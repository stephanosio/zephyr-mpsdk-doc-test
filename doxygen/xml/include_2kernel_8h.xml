<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="include_2kernel_8h" kind="file" language="C++">
    <compoundname>kernel.h</compoundname>
    <includes refid="kernel__includes_8h" local="no">kernel_includes.h</includes>
    <includes refid="errno_8h" local="no">errno.h</includes>
    <includes refid="limits_8h" local="no">limits.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="tracing__macros_8h" local="no">tracing/tracing_macros.h</includes>
    <includes refid="tracing_2tracing_8h" local="no">tracing/tracing.h</includes>
    <includes refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h" local="no">syscalls/kernel.h</includes>
    <includedby refid="cache_8h" local="no">include/cache.h</includedby>
    <includedby refid="init_8h" local="no">include/init.h</includedby>
    <includedby refid="syscall__handler_8h" local="no">include/syscall_handler.h</includedby>
    <includedby refid="timeout__q_8h" local="no">include/timeout_q.h</includedby>
    <includedby refid="zephyr_8h" local="no">include/zephyr.h</includedby>
    <incdepgraph>
      <node id="49">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="37">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="36">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="46">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="1">
        <label>include/kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="20">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="9">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="22">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="12">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="7">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="57">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="59">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="11">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="35">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="60">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="52">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="24">
        <label>alloca.h</label>
      </node>
      <node id="39">
        <label>arch/cpu.h</label>
      </node>
      <node id="58">
        <label>kernel.h</label>
      </node>
      <node id="18">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="55">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/cache.h</label>
        <link refid="cache_8h"/>
      </node>
      <node id="4">
        <label>include/device.h</label>
        <link refid="device_8h"/>
      </node>
      <node id="5">
        <label>include/drivers/pcie/endpoint/pcie_ep.h</label>
        <link refid="pcie__ep_8h"/>
      </node>
      <node id="3">
        <label>include/init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
      </node>
      <node id="180">
        <label>include/posix/pthread.h</label>
        <link refid="pthread_8h"/>
      </node>
      <node id="182">
        <label>include/smf.h</label>
        <link refid="smf_8h"/>
      </node>
      <node id="177">
        <label>include/syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
      </node>
      <node id="178">
        <label>include/timeout_q.h</label>
        <link refid="timeout__q_8h"/>
        <childnode refid="179" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>include/wait_q.h</label>
        <link refid="wait__q_8h"/>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/xen/console.h</label>
        <link refid="xen_2console_8h"/>
      </node>
      <node id="181">
        <label>include/zephyr.h</label>
        <link refid="zephyr_8h"/>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>subsys/testsuite/ztest/include/ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>subsys/testsuite/ztest/include/ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>subsys/testsuite/ztest/include/ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>subsys/testsuite/ztest/include/ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>subsys/testsuite/ztest/include/ztest_test_new.h</label>
        <link refid="ztest__test__new_8h"/>
      </node>
      <node id="11">
        <label>tests/kernel/common/src/atomic.c</label>
        <link refid="atomic_8c"/>
      </node>
      <node id="12">
        <label>tests/kernel/common/src/bitarray.c</label>
        <link refid="bitarray_8c"/>
      </node>
      <node id="13">
        <label>tests/kernel/common/src/bitfield.c</label>
        <link refid="bitfield_8c"/>
      </node>
      <node id="14">
        <label>tests/kernel/common/src/boot_delay.c</label>
        <link refid="boot__delay_8c"/>
      </node>
      <node id="15">
        <label>tests/kernel/common/src/byteorder.c</label>
        <link refid="byteorder_8c"/>
      </node>
      <node id="16">
        <label>tests/kernel/common/src/clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="17">
        <label>tests/kernel/common/src/errno.c</label>
        <link refid="errno_8c"/>
      </node>
      <node id="18">
        <label>tests/kernel/common/src/irq_offload.c</label>
        <link refid="irq__offload_8c"/>
      </node>
      <node id="19">
        <label>tests/kernel/common/src/main.c</label>
        <link refid="common_2src_2main_8c"/>
      </node>
      <node id="20">
        <label>tests/kernel/common/src/multilib.c</label>
        <link refid="multilib_8c"/>
      </node>
      <node id="21">
        <label>tests/kernel/common/src/printk.c</label>
        <link refid="printk_8c"/>
      </node>
      <node id="22">
        <label>tests/kernel/common/src/timeout_order.c</label>
        <link refid="timeout__order_8c"/>
      </node>
      <node id="23">
        <label>tests/kernel/condvar/condvar_api/src/main.c</label>
        <link refid="condvar_2condvar__api_2src_2main_8c"/>
      </node>
      <node id="24">
        <label>tests/kernel/context/src/main.c</label>
        <link refid="context_2src_2main_8c"/>
      </node>
      <node id="25">
        <label>tests/kernel/device/src/abstract_driver.c</label>
        <link refid="abstract__driver_8c"/>
      </node>
      <node id="26">
        <label>tests/kernel/device/src/abstract_driver.h</label>
        <link refid="abstract__driver_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>tests/kernel/device/src/main.c</label>
        <link refid="device_2src_2main_8c"/>
      </node>
      <node id="28">
        <label>tests/kernel/device/src/mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="29">
        <label>tests/kernel/device/src/test_driver_init.c</label>
        <link refid="test__driver__init_8c"/>
      </node>
      <node id="30">
        <label>tests/kernel/early_sleep/src/main.c</label>
        <link refid="early__sleep_2src_2main_8c"/>
      </node>
      <node id="31">
        <label>tests/kernel/events/event_api/src/main.c</label>
        <link refid="events_2event__api_2src_2main_8c"/>
      </node>
      <node id="32">
        <label>tests/kernel/events/event_api/src/test_event_apis.c</label>
        <link refid="test__event__apis_8c"/>
      </node>
      <node id="33">
        <label>tests/kernel/events/sys_event/src/main.c</label>
        <link refid="events_2sys__event_2src_2main_8c"/>
      </node>
      <node id="34">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="35">
        <label>tests/kernel/fatal/no-multithreading/src/main.c</label>
        <link refid="fatal_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="36">
        <label>tests/kernel/fifo/fifo_api/src/main.c</label>
        <link refid="fifo_2fifo__api_2src_2main_8c"/>
      </node>
      <node id="37">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo.h</label>
        <link refid="test__fifo_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_cancel.c</label>
        <link refid="test__fifo__cancel_8c"/>
      </node>
      <node id="39">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c</label>
        <link refid="test__fifo__contexts_8c"/>
      </node>
      <node id="40">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_fail.c</label>
        <link refid="test__fifo__fail_8c"/>
      </node>
      <node id="41">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_loop.c</label>
        <link refid="test__fifo__loop_8c"/>
      </node>
      <node id="42">
        <label>tests/kernel/fifo/fifo_timeout/src/main.c</label>
        <link refid="fifo_2fifo__timeout_2src_2main_8c"/>
      </node>
      <node id="43">
        <label>tests/kernel/fifo/fifo_usage/src/main.c</label>
        <link refid="fifo_2fifo__usage_2src_2main_8c"/>
      </node>
      <node id="44">
        <label>tests/kernel/fpu_sharing/float_disable/src/k_float_disable.c</label>
        <link refid="k__float__disable_8c"/>
      </node>
      <node id="45">
        <label>tests/kernel/fpu_sharing/float_disable/src/main.c</label>
        <link refid="fpu__sharing_2float__disable_2src_2main_8c"/>
      </node>
      <node id="46">
        <label>tests/kernel/fpu_sharing/generic/src/load_store.c</label>
        <link refid="load__store_8c"/>
      </node>
      <node id="47">
        <label>tests/kernel/fpu_sharing/generic/src/main.c</label>
        <link refid="fpu__sharing_2generic_2src_2main_8c"/>
      </node>
      <node id="48">
        <label>tests/kernel/fpu_sharing/generic/src/pi.c</label>
        <link refid="pi_8c"/>
      </node>
      <node id="49">
        <label>tests/kernel/gen_isr_table/src/main.c</label>
        <link refid="gen__isr__table_2src_2main_8c"/>
      </node>
      <node id="50">
        <label>tests/kernel/interrupt/src/direct_isr.c</label>
        <link refid="direct__isr_8c"/>
      </node>
      <node id="51">
        <label>tests/kernel/interrupt/src/dynamic_isr.c</label>
        <link refid="dynamic__isr_8c"/>
      </node>
      <node id="52">
        <label>tests/kernel/interrupt/src/interrupt_offload.c</label>
        <link refid="interrupt__offload_8c"/>
      </node>
      <node id="53">
        <label>tests/kernel/interrupt/src/main.c</label>
        <link refid="interrupt_2src_2main_8c"/>
      </node>
      <node id="54">
        <label>tests/kernel/interrupt/src/nested_irq.c</label>
        <link refid="nested__irq_8c"/>
      </node>
      <node id="55">
        <label>tests/kernel/interrupt/src/prevent_irq.c</label>
        <link refid="prevent__irq_8c"/>
      </node>
      <node id="56">
        <label>tests/kernel/interrupt/src/regular_isr.c</label>
        <link refid="regular__isr_8c"/>
      </node>
      <node id="57">
        <label>tests/kernel/lifo/lifo_api/src/main.c</label>
        <link refid="lifo_2lifo__api_2src_2main_8c"/>
      </node>
      <node id="58">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo.h</label>
        <link refid="test__lifo_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_contexts.c</label>
        <link refid="test__lifo__contexts_8c"/>
      </node>
      <node id="60">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_fail.c</label>
        <link refid="test__lifo__fail_8c"/>
      </node>
      <node id="61">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_loop.c</label>
        <link refid="test__lifo__loop_8c"/>
      </node>
      <node id="62">
        <label>tests/kernel/lifo/lifo_usage/src/main.c</label>
        <link refid="lifo_2lifo__usage_2src_2main_8c"/>
      </node>
      <node id="63">
        <label>tests/kernel/mbox/mbox_api/src/main.c</label>
        <link refid="mbox_2mbox__api_2src_2main_8c"/>
      </node>
      <node id="64">
        <label>tests/kernel/mbox/mbox_api/src/test_mbox_api.c</label>
        <link refid="test__mbox__api_8c"/>
      </node>
      <node id="65">
        <label>tests/kernel/mbox/mbox_usage/src/main.c</label>
        <link refid="mbox_2mbox__usage_2src_2main_8c"/>
      </node>
      <node id="66">
        <label>tests/kernel/mem_heap/k_heap_api/src/main.c</label>
        <link refid="mem__heap_2k__heap__api_2src_2main_8c"/>
      </node>
      <node id="67">
        <label>tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c</label>
        <link refid="test__kheap__api_8c"/>
      </node>
      <node id="68">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/main.c</label>
        <link refid="mem__heap_2mheap__api__concept_2src_2main_8c"/>
      </node>
      <node id="69">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</label>
        <link refid="test__mheap__api_8c"/>
      </node>
      <node id="70">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c</label>
        <link refid="test__mheap__concept_8c"/>
      </node>
      <node id="71">
        <label>tests/kernel/mem_heap/shared_multi_heap/src/main.c</label>
        <link refid="mem__heap_2shared__multi__heap_2src_2main_8c"/>
      </node>
      <node id="72">
        <label>tests/kernel/mem_protect/demand_paging/src/main.c</label>
        <link refid="mem__protect_2demand__paging_2src_2main_8c"/>
      </node>
      <node id="73">
        <label>tests/kernel/mem_protect/futex/src/main.c</label>
        <link refid="mem__protect_2futex_2src_2main_8c"/>
      </node>
      <node id="74">
        <label>tests/kernel/mem_protect/mem_map/src/main.c</label>
        <link refid="mem__protect_2mem__map_2src_2main_8c"/>
      </node>
      <node id="75">
        <label>tests/kernel/mem_protect/mem_protect/src/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="78">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="79">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="76">
        <label>tests/kernel/mem_protect/mem_protect/src/main.c</label>
        <link refid="mem__protect_2mem__protect_2src_2main_8c"/>
      </node>
      <node id="80">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_domain.c</label>
        <link refid="mem__domain_8c"/>
      </node>
      <node id="81">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_partition.c</label>
        <link refid="mem__partition_8c"/>
      </node>
      <node id="77">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="83">
        <label>tests/kernel/mem_protect/protection/src/main.c</label>
        <link refid="mem__protect_2protection_2src_2main_8c"/>
      </node>
      <node id="84">
        <label>tests/kernel/mem_protect/stack_random/src/main.c</label>
        <link refid="mem__protect_2stack__random_2src_2main_8c"/>
      </node>
      <node id="85">
        <label>tests/kernel/mem_protect/stackprot/src/main.c</label>
        <link refid="mem__protect_2stackprot_2src_2main_8c"/>
      </node>
      <node id="86">
        <label>tests/kernel/mem_protect/sys_sem/src/main.c</label>
        <link refid="mem__protect_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="87">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="88">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="89">
        <label>tests/kernel/mem_slab/mslab/src/main.c</label>
        <link refid="mem__slab_2mslab_2src_2main_8c"/>
      </node>
      <node id="90">
        <label>tests/kernel/mem_slab/mslab_api/src/main.c</label>
        <link refid="mem__slab_2mslab__api_2src_2main_8c"/>
      </node>
      <node id="91">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c</label>
        <link refid="test__mslab__api_8c"/>
      </node>
      <node id="92">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_extern.c</label>
        <link refid="test__mslab__extern_8c"/>
      </node>
      <node id="93">
        <label>tests/kernel/mem_slab/mslab_concept/src/main.c</label>
        <link refid="mem__slab_2mslab__concept_2src_2main_8c"/>
      </node>
      <node id="94">
        <label>tests/kernel/mem_slab/mslab_concept/src/test_mslab_alloc_wait.c</label>
        <link refid="test__mslab__alloc__wait_8c"/>
      </node>
      <node id="95">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/main.c</label>
        <link refid="mem__slab_2mslab__threadsafe_2src_2main_8c"/>
      </node>
      <node id="96">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/test_mslab_threadsafe.c</label>
        <link refid="test__mslab__threadsafe_8c"/>
      </node>
      <node id="97">
        <label>tests/kernel/mp/src/main.c</label>
        <link refid="mp_2src_2main_8c"/>
      </node>
      <node id="98">
        <label>tests/kernel/msgq/msgq_api/src/main.c</label>
        <link refid="msgq_2msgq__api_2src_2main_8c"/>
      </node>
      <node id="99">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq.h</label>
        <link refid="test__msgq_8h"/>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_attrs.c</label>
        <link refid="test__msgq__attrs_8c"/>
      </node>
      <node id="101">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_contexts.c</label>
        <link refid="test__msgq__contexts_8c"/>
      </node>
      <node id="102">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_fail.c</label>
        <link refid="test__msgq__fail_8c"/>
      </node>
      <node id="103">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_purge.c</label>
        <link refid="test__msgq__purge_8c"/>
      </node>
      <node id="104">
        <label>tests/kernel/msgq/msgq_usage/src/main.c</label>
        <link refid="msgq_2msgq__usage_2src_2main_8c"/>
      </node>
      <node id="105">
        <label>tests/kernel/mutex/mutex_api/src/test_mutex_apis.c</label>
        <link refid="test__mutex__apis_8c"/>
      </node>
      <node id="106">
        <label>tests/kernel/mutex/mutex_error_case/src/test_mutex_error.c</label>
        <link refid="test__mutex__error_8c"/>
      </node>
      <node id="107">
        <label>tests/kernel/mutex/sys_mutex/src/main.c</label>
        <link refid="mutex_2sys__mutex_2src_2main_8c"/>
      </node>
      <node id="108">
        <label>tests/kernel/mutex/sys_mutex/src/thread_competition.c</label>
        <link refid="thread__competition_8c"/>
      </node>
      <node id="109">
        <label>tests/kernel/obj_tracking/src/main.c</label>
        <link refid="obj__tracking_2src_2main_8c"/>
      </node>
      <node id="110">
        <label>tests/kernel/pending/src/main.c</label>
        <link refid="pending_2src_2main_8c"/>
      </node>
      <node id="111">
        <label>tests/kernel/pipe/pipe/src/main.c</label>
        <link refid="pipe_2pipe_2src_2main_8c"/>
      </node>
      <node id="112">
        <label>tests/kernel/pipe/pipe/src/test_pipe.c</label>
        <link refid="test__pipe_8c"/>
      </node>
      <node id="113">
        <label>tests/kernel/pipe/pipe_api/src/main.c</label>
        <link refid="pipe_2pipe__api_2src_2main_8c"/>
      </node>
      <node id="114">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_avail.c</label>
        <link refid="test__pipe__avail_8c"/>
      </node>
      <node id="115">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c</label>
        <link refid="test__pipe__contexts_8c"/>
      </node>
      <node id="116">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_fail.c</label>
        <link refid="test__pipe__fail_8c"/>
      </node>
      <node id="117">
        <label>tests/kernel/poll/src/main.c</label>
        <link refid="poll_2src_2main_8c"/>
      </node>
      <node id="118">
        <label>tests/kernel/poll/src/test_poll.c</label>
        <link refid="test__poll_8c"/>
      </node>
      <node id="119">
        <label>tests/kernel/poll/src/test_poll_fail.c</label>
        <link refid="test__poll__fail_8c"/>
      </node>
      <node id="120">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="121">
        <label>tests/kernel/queue/src/main.c</label>
        <link refid="queue_2src_2main_8c"/>
      </node>
      <node id="122">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>tests/kernel/queue/src/test_queue_contexts.c</label>
        <link refid="test__queue__contexts_8c"/>
      </node>
      <node id="124">
        <label>tests/kernel/queue/src/test_queue_fail.c</label>
        <link refid="test__queue__fail_8c"/>
      </node>
      <node id="125">
        <label>tests/kernel/queue/src/test_queue_loop.c</label>
        <link refid="test__queue__loop_8c"/>
      </node>
      <node id="126">
        <label>tests/kernel/queue/src/test_queue_user.c</label>
        <link refid="test__queue__user_8c"/>
      </node>
      <node id="127">
        <label>tests/kernel/sched/deadline/src/main.c</label>
        <link refid="sched_2deadline_2src_2main_8c"/>
      </node>
      <node id="128">
        <label>tests/kernel/sched/metairq/src/main.c</label>
        <link refid="sched_2metairq_2src_2main_8c"/>
      </node>
      <node id="129">
        <label>tests/kernel/sched/preempt/src/main.c</label>
        <link refid="sched_2preempt_2src_2main_8c"/>
      </node>
      <node id="132">
        <label>tests/kernel/sched/schedule_api/src/main.c</label>
        <link refid="sched_2schedule__api_2src_2main_8c"/>
      </node>
      <node id="130">
        <label>tests/kernel/sched/schedule_api/src/test_priority_scheduling.c</label>
        <link refid="test__priority__scheduling_8c"/>
      </node>
      <node id="131">
        <label>tests/kernel/sched/schedule_api/src/test_sched.h</label>
        <link refid="test__sched_8h"/>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c</label>
        <link refid="test__sched__is__preempt__thread_8c"/>
      </node>
      <node id="134">
        <label>tests/kernel/sched/schedule_api/src/test_sched_priority.c</label>
        <link refid="test__sched__priority_8c"/>
      </node>
      <node id="135">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c</label>
        <link refid="test__sched__timeslice__and__lock_8c"/>
      </node>
      <node id="136">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c</label>
        <link refid="test__sched__timeslice__reset_8c"/>
      </node>
      <node id="137">
        <label>tests/kernel/sched/schedule_api/src/test_slice_scheduling.c</label>
        <link refid="test__slice__scheduling_8c"/>
      </node>
      <node id="138">
        <label>tests/kernel/sched/schedule_api/src/user_api.c</label>
        <link refid="user__api_8c"/>
      </node>
      <node id="139">
        <label>tests/kernel/semaphore/semaphore/src/main.c</label>
        <link refid="semaphore_2semaphore_2src_2main_8c"/>
      </node>
      <node id="140">
        <label>tests/kernel/semaphore/sys_sem/src/main.c</label>
        <link refid="semaphore_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="141">
        <label>tests/kernel/sleep/src/main.c</label>
        <link refid="sleep_2src_2main_8c"/>
      </node>
      <node id="142">
        <label>tests/kernel/sleep/src/usleep.c</label>
        <link refid="usleep_8c"/>
      </node>
      <node id="143">
        <label>tests/kernel/smp/src/main.c</label>
        <link refid="smp_2src_2main_8c"/>
      </node>
      <node id="144">
        <label>tests/kernel/smp_boot_delay/src/main.c</label>
        <link refid="smp__boot__delay_2src_2main_8c"/>
      </node>
      <node id="145">
        <label>tests/kernel/spinlock/src/main.c</label>
        <link refid="spinlock_2src_2main_8c"/>
      </node>
      <node id="146">
        <label>tests/kernel/spinlock/src/spinlock_error_case.c</label>
        <link refid="spinlock__error__case_8c"/>
      </node>
      <node id="147">
        <label>tests/kernel/stack/stack/src/main.c</label>
        <link refid="stack_2stack_2src_2main_8c"/>
      </node>
      <node id="148">
        <label>tests/kernel/stack/stack/src/test_stack_contexts.c</label>
        <link refid="test__stack__contexts_8c"/>
      </node>
      <node id="149">
        <label>tests/kernel/stack/stack/src/test_stack_fail.c</label>
        <link refid="test__stack__fail_8c"/>
      </node>
      <node id="150">
        <label>tests/kernel/threads/dynamic_thread/src/main.c</label>
        <link refid="threads_2dynamic__thread_2src_2main_8c"/>
      </node>
      <node id="151">
        <label>tests/kernel/threads/no-multithreading/src/main.c</label>
        <link refid="threads_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="152">
        <label>tests/kernel/threads/thread_apis/src/main.c</label>
        <link refid="threads_2thread__apis_2src_2main_8c"/>
      </node>
      <node id="153">
        <label>tests/kernel/threads/thread_apis/src/test_essential_thread.c</label>
        <link refid="test__essential__thread_8c"/>
      </node>
      <node id="154">
        <label>tests/kernel/threads/thread_apis/src/test_kthread_for_each.c</label>
        <link refid="test__kthread__for__each_8c"/>
      </node>
      <node id="155">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c</label>
        <link refid="test__threads__cancel__abort_8c"/>
      </node>
      <node id="156">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cpu_mask.c</label>
        <link refid="test__threads__cpu__mask_8c"/>
      </node>
      <node id="157">
        <label>tests/kernel/threads/thread_apis/src/test_threads_set_priority.c</label>
        <link refid="test__threads__set__priority_8c"/>
      </node>
      <node id="158">
        <label>tests/kernel/threads/thread_apis/src/test_threads_spawn.c</label>
        <link refid="test__threads__spawn_8c"/>
      </node>
      <node id="159">
        <label>tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c</label>
        <link refid="test__threads__suspend__resume_8c"/>
      </node>
      <node id="160">
        <label>tests/kernel/threads/thread_error_case/src/main.c</label>
        <link refid="threads_2thread__error__case_2src_2main_8c"/>
      </node>
      <node id="161">
        <label>tests/kernel/threads/thread_init/src/main.c</label>
        <link refid="threads_2thread__init_2src_2main_8c"/>
      </node>
      <node id="162">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
      <node id="163">
        <label>tests/kernel/threads/tls/src/main.c</label>
        <link refid="threads_2tls_2src_2main_8c"/>
      </node>
      <node id="164">
        <label>tests/kernel/tickless/tickless_concept/src/main.c</label>
        <link refid="tickless_2tickless__concept_2src_2main_8c"/>
      </node>
      <node id="165">
        <label>tests/kernel/timer/cycle64/src/main.c</label>
        <link refid="timer_2cycle64_2src_2main_8c"/>
      </node>
      <node id="166">
        <label>tests/kernel/timer/starve/src/main.c</label>
        <link refid="timer_2starve_2src_2main_8c"/>
      </node>
      <node id="167">
        <label>tests/kernel/timer/timer_api/src/main.c</label>
        <link refid="timer_2timer__api_2src_2main_8c"/>
      </node>
      <node id="168">
        <label>tests/kernel/timer/timer_api/src/timer_convert.c</label>
        <link refid="timer__convert_8c"/>
      </node>
      <node id="169">
        <label>tests/kernel/timer/timer_error_case/src/main.c</label>
        <link refid="timer_2timer__error__case_2src_2main_8c"/>
      </node>
      <node id="170">
        <label>tests/kernel/timer/timer_monotonic/src/main.c</label>
        <link refid="timer_2timer__monotonic_2src_2main_8c"/>
      </node>
      <node id="171">
        <label>tests/kernel/workq/critical/src/main.c</label>
        <link refid="workq_2critical_2src_2main_8c"/>
      </node>
      <node id="172">
        <label>tests/kernel/workq/user_work/src/main.c</label>
        <link refid="workq_2user__work_2src_2main_8c"/>
      </node>
      <node id="173">
        <label>tests/kernel/workq/work/src/main.c</label>
        <link refid="workq_2work_2src_2main_8c"/>
      </node>
      <node id="174">
        <label>tests/kernel/workq/work_queue/src/main.c</label>
        <link refid="workq_2work__queue_2src_2main_8c"/>
      </node>
      <node id="175">
        <label>tests/kernel/xip/src/main.c</label>
        <link refid="xip_2src_2main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structk__futex" prot="public">k_futex</innerclass>
    <innerclass refid="structk__event" prot="public">k_event</innerclass>
    <innerclass refid="structk__fifo" prot="public">k_fifo</innerclass>
    <innerclass refid="structk__lifo" prot="public">k_lifo</innerclass>
    <innerclass refid="structk__mutex" prot="public">k_mutex</innerclass>
    <innerclass refid="structk__condvar" prot="public">k_condvar</innerclass>
    <innerclass refid="structk__work" prot="public">k_work</innerclass>
    <innerclass refid="structk__work__delayable" prot="public">k_work_delayable</innerclass>
    <innerclass refid="structk__work__sync" prot="public">k_work_sync</innerclass>
    <innerclass refid="structk__work__queue__config" prot="public">k_work_queue_config</innerclass>
    <innerclass refid="structk__work__q" prot="public">k_work_q</innerclass>
    <innerclass refid="structk__delayed__work" prot="public">k_delayed_work</innerclass>
    <innerclass refid="structk__msgq" prot="public">k_msgq</innerclass>
    <innerclass refid="structk__msgq__attrs" prot="public">k_msgq_attrs</innerclass>
    <innerclass refid="structk__mbox__msg" prot="public">k_mbox_msg</innerclass>
    <innerclass refid="structk__mbox" prot="public">k_mbox</innerclass>
    <innerclass refid="structk__pipe" prot="public">k_pipe</innerclass>
    <innerclass refid="structk__heap" prot="public">k_heap</innerclass>
    <innerclass refid="structk__poll__signal" prot="public">k_poll_signal</innerclass>
    <innerclass refid="structk__poll__event" prot="public">k_poll_event</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="include_2kernel_8h_1ac627cc4c3da16be4b74f0a4ab036a603" prot="public" static="no">
        <name>K_ANY</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="35" column="9" bodyfile="include/kernel.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1ab489ddac3ff8aace22e1c011dd040415" prot="public" static="no">
        <name>K_END</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="36" column="9" bodyfile="include/kernel.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" prot="public" static="no">
        <name>K_PRIO_COOP</name>
        <param><defname>x</defname></param>
        <initializer>(-(<ref refid="ztest_8h_1a547289eba0d6db7c8aba94bc1351b3b2" kindref="member">CONFIG_NUM_COOP_PRIORITIES</ref> - (x)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="42" column="9" bodyfile="include/kernel.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" prot="public" static="no">
        <name>K_PRIO_PREEMPT</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="43" column="9" bodyfile="include/kernel.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1a5fd4365cb6e8742e750b5e4950fb1e47" prot="public" static="no">
        <name>K_HIGHEST_THREAD_PRIO</name>
        <initializer>(-<ref refid="ztest_8h_1a547289eba0d6db7c8aba94bc1351b3b2" kindref="member">CONFIG_NUM_COOP_PRIORITIES</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="45" column="9" bodyfile="include/kernel.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1afa4bcc2fdfea5cd7c63d56f476b1b32f" prot="public" static="no">
        <name>K_LOWEST_THREAD_PRIO</name>
        <initializer>CONFIG_NUM_PREEMPT_PRIORITIES</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="46" column="9" bodyfile="include/kernel.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1a8f3f1d910dd847f0b223a4aa00788fa2" prot="public" static="no">
        <name>K_IDLE_PRIO</name>
        <initializer><ref refid="include_2kernel_8h_1afa4bcc2fdfea5cd7c63d56f476b1b32f" kindref="member">K_LOWEST_THREAD_PRIO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="47" column="9" bodyfile="include/kernel.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1ab326c7eb1d248650e6017dcaee8d24b2" prot="public" static="no">
        <name>K_HIGHEST_APPLICATION_THREAD_PRIO</name>
        <initializer>(<ref refid="include_2kernel_8h_1a5fd4365cb6e8742e750b5e4950fb1e47" kindref="member">K_HIGHEST_THREAD_PRIO</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="48" column="9" bodyfile="include/kernel.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1ad4c2df561988fa1194c2f8c768d667cd" prot="public" static="no">
        <name>K_LOWEST_APPLICATION_THREAD_PRIO</name>
        <initializer>(<ref refid="include_2kernel_8h_1afa4bcc2fdfea5cd7c63d56f476b1b32f" kindref="member">K_LOWEST_THREAD_PRIO</ref> - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="49" column="9" bodyfile="include/kernel.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__thread__apis_1gad503fbcca905a9266b0e154e3ded258c" prot="public" static="no">
        <name>K_ESSENTIAL</name>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0))</initializer>
        <briefdescription>
<para>system thread that must not abort </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="164" column="9" bodyfile="include/kernel.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__thread__apis_1gab18cf1e8728e7adf53db2ae4bbcdd951" prot="public" static="no">
        <name>K_FP_REGS</name>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1))</initializer>
        <briefdescription>
<para>FPU registers are managed by context switch. </para>
        </briefdescription>
        <detaileddescription>
<para>This option indicates that the thread uses the CPU&apos;s floating point registers. This instructs the kernel to take additional steps to save and restore the contents of these registers when scheduling the thread. No effect if <verbatim>embed:rst:inline :kconfig:option:`CONFIG_FPU_SHARING` </verbatim> is not enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="176" column="9" bodyfile="include/kernel.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" prot="public" static="no">
        <name>K_USER</name>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2))</initializer>
        <briefdescription>
<para>user mode thread </para>
        </briefdescription>
        <detaileddescription>
<para>This thread has dropped from supervisor mode to user mode and consequently has additional restrictions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="185" column="9" bodyfile="include/kernel.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" prot="public" static="no">
        <name>K_INHERIT_PERMS</name>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3))</initializer>
        <briefdescription>
<para>Inherit Permissions. </para>
        </briefdescription>
        <detaileddescription>
<para>Indicates that the thread being created should inherit all kernel object permissions from the thread that created it. No effect if <verbatim>embed:rst:inline :kconfig:option:`CONFIG_USERSPACE` </verbatim> is not enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="195" column="9" bodyfile="include/kernel.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__thread__apis_1gacbdb579370978fe07e4a863a84bd8bee" prot="public" static="no">
        <name>K_CALLBACK_STATE</name>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(4))</initializer>
        <briefdescription>
<para>Callback item state. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a single bit of state reserved for &quot;callback manager&quot; utilities (p4wq initially) who need to track operations invoked from within a user-provided callback they have been invoked. Effectively it serves as a tiny bit of zero-overhead TLS data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="206" column="9" bodyfile="include/kernel.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" prot="public" static="no">
        <name>k_thread_access_grant</name>
        <param><defname>thread</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga1a2b2aa21d7cc37f33e6a62abd2ae340" kindref="member">FOR_EACH_FIXED_ARG</ref>(<ref refid="group__usermode__apis_1ga94087bedf96fe2a2bea437d3d585ca22" kindref="member">k_object_access_grant</ref>, (;), <ref refid="timeout__order_8c_1a2ff5187d48101eb303964e1b8983beb4" kindref="member">thread</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Grant a thread access to a set of kernel objects. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience function. For the provided thread, grant access to the remaining arguments, which must be pointers to kernel objects.</para>
<para>The thread object must be initialized (i.e. running). The objects don&apos;t need to be. Note that NULL shouldn&apos;t be passed as an argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to grant access to objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>list of kernel object pointers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="321" column="9" bodyfile="include/kernel.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__thread__apis_1gab3ced58648ca35788a40676e8478ecd2" prot="public" static="no">
        <name>K_THREAD_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>stack_size</defname></param>
        <param><defname>entry</defname></param>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>options</defname></param>
        <param><defname>delay</defname></param>
        <initializer>	<ref refid="workq_2work__queue_2src_2main_8c_1a3cae6f14ff609be8071cbbcf686729b6" kindref="member">K_THREAD_STACK_DEFINE</ref>(_k_thread_stack_##name, stack_size);	 \
	struct <ref refid="structk__thread" kindref="compound">k_thread</ref> _k_thread_obj_##name;				 \
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(_static_thread_data, _k_thread_data_##name) = \
		Z_THREAD_INITIALIZER(&amp;_k_thread_obj_##name,		 \
				    _k_thread_stack_##name, stack_size,  \
				entry, p1, p2, p3, prio, options, delay, \
				NULL, name);				 	 \
	const <ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref> name = (<ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref>)&amp;_k_thread_obj_##name</initializer>
        <briefdescription>
<para>Statically define and initialize a thread. </para>
        </briefdescription>
        <detaileddescription>
<para>The thread may be scheduled for immediate execution or a delayed start.</para>
<para>Thread options are architecture-specific, and can include K_ESSENTIAL, K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating them using &quot;|&quot; (the logical OR operator).</para>
<para>The ID of the thread can be accessed using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>const<sp/>k_tid_t<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack size in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread entry function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st entry point parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd entry point parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd entry point parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Scheduling delay (in milliseconds), zero for no delay. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="667" column="9" bodyfile="include/kernel.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" prot="public" static="no">
        <name>K_NO_WAIT</name>
        <initializer>Z_TIMEOUT_NO_WAIT</initializer>
        <briefdescription>
<para>Generate null timeout delay. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API not to wait if the requested operation cannot be performed immediately.</para>
<para><simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1048" column="9" bodyfile="include/kernel.h" bodystart="1048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1gae2f3a80170afc5fbce0337cdf5a4ce4c" prot="public" static="no">
        <name>K_NSEC</name>
        <param><defname>t</defname></param>
        <initializer>Z_TIMEOUT_NS(<ref refid="test__sched__timeslice__and__lock_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>)</initializer>
        <briefdescription>
<para>Generate timeout delay from nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>t</emphasis> nanoseconds to perform the requested operation. Note that timer precision is limited to the tick rate, not the requested value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in nanoseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1062" column="9" bodyfile="include/kernel.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1ga91198e325210ec052a8308e642058c0b" prot="public" static="no">
        <name>K_USEC</name>
        <param><defname>t</defname></param>
        <initializer>Z_TIMEOUT_US(<ref refid="test__sched__timeslice__and__lock_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>)</initializer>
        <briefdescription>
<para>Generate timeout delay from microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>t</emphasis> microseconds to perform the requested operation. Note that timer precision is limited to the tick rate, not the requested value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in microseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1076" column="9" bodyfile="include/kernel.h" bodystart="1076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1gab41f59fd2b724cb1279e4f6821154b33" prot="public" static="no">
        <name>K_CYC</name>
        <param><defname>t</defname></param>
        <initializer>Z_TIMEOUT_CYC(<ref refid="test__sched__timeslice__and__lock_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>)</initializer>
        <briefdescription>
<para>Generate timeout delay from cycles. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>t</emphasis> cycles to perform the requested operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in cycles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1088" column="9" bodyfile="include/kernel.h" bodystart="1088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1gaeda983960bd25f1dba7a386ad720e395" prot="public" static="no">
        <name>K_TICKS</name>
        <param><defname>t</defname></param>
        <initializer>Z_TIMEOUT_TICKS(<ref refid="test__sched__timeslice__and__lock_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>)</initializer>
        <briefdescription>
<para>Generate timeout delay from system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>t</emphasis> ticks to perform the requested operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in system ticks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1100" column="9" bodyfile="include/kernel.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" prot="public" static="no">
        <name>K_MSEC</name>
        <param><defname>ms</defname></param>
        <initializer>Z_TIMEOUT_MS(<ref refid="kobject_8c_1a14afa64cf434f39c0f93fedf0e2616d9" kindref="member">ms</ref>)</initializer>
        <briefdescription>
<para>Generate timeout delay from milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>ms</emphasis> milliseconds to perform the requested operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in milliseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1112" column="9" bodyfile="include/kernel.h" bodystart="1112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1gadc361472aea59267f6ea38f5e7c7ca2a" prot="public" static="no">
        <name>K_SECONDS</name>
        <param><defname>s</defname></param>
        <initializer><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>((<ref refid="kobject_8c_1ac3f4657537e42ff1fa877307841464af" kindref="member">s</ref>) * <ref refid="include_2sys__clock_8h_1a222f9dff749accf8de62bc4b52c7bdcd" kindref="member">MSEC_PER_SEC</ref>)</initializer>
        <briefdescription>
<para>Generate timeout delay from seconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>s</emphasis> seconds to perform the requested operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1124" column="9" bodyfile="include/kernel.h" bodystart="1124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1gaef02f20d4d2ebfc9aa29acae01bd3698" prot="public" static="no">
        <name>K_MINUTES</name>
        <param><defname>m</defname></param>
        <initializer><ref refid="group__clock__apis_1gadc361472aea59267f6ea38f5e7c7ca2a" kindref="member">K_SECONDS</ref>((m) * 60)</initializer>
        <briefdescription>
<para>Generate timeout delay from minutes. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>m</emphasis> minutes to perform the requested operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in minutes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1136" column="9" bodyfile="include/kernel.h" bodystart="1136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1gaa9e0cd890db28965b66d4bc5d719a91f" prot="public" static="no">
        <name>K_HOURS</name>
        <param><defname>h</defname></param>
        <initializer><ref refid="group__clock__apis_1gaef02f20d4d2ebfc9aa29acae01bd3698" kindref="member">K_MINUTES</ref>((h) * 60)</initializer>
        <briefdescription>
<para>Generate timeout delay from hours. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait up to <emphasis>h</emphasis> hours to perform the requested operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in hours.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1148" column="9" bodyfile="include/kernel.h" bodystart="1148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" prot="public" static="no">
        <name>K_FOREVER</name>
        <initializer>Z_FOREVER</initializer>
        <briefdescription>
<para>Generate infinite timeout delay. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro generates a timeout delay that instructs a kernel API to wait as long as necessary to perform the requested operation.</para>
<para><simplesect kind="return"><para>Timeout delay value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1158" column="9" bodyfile="include/kernel.h" bodystart="1158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__timer__apis_1gaa267fcb0a2e18cd0da29e9f9612510a6" prot="public" static="no">
        <name>K_TIMER_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>expiry_fn</defname></param>
        <param><defname>stop_fn</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_timer, name) = \
		Z_TIMER_INITIALIZER(name, expiry_fn, stop_fn)</initializer>
        <briefdescription>
<para>Statically define and initialize a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>The timer can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_timer<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the timer variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time the timer expires. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke if the timer is stopped while running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1333" column="9" bodyfile="include/kernel.h" bodystart="1333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__queue__apis_1gacd0bc309f0147d4669f65fafa87e0e70" prot="public" static="no">
        <name>K_QUEUE_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_queue, name) = \
		Z_QUEUE_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The queue can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_queue<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1907" column="9" bodyfile="include/kernel.h" bodystart="1907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__event__apis_1ga093449cc6686d3235944f3faad284893" prot="public" static="no">
        <name>K_EVENT_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__event" kindref="compound">k_event</ref>, name) =               \
		Z_EVENT_INITIALIZER(name);</initializer>
        <briefdescription>
<para>Statically define and initialize an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>The event can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_event<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the event object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2110" column="9" bodyfile="include/kernel.h" bodystart="2110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" prot="public" static="no">
        <name>k_fifo_init</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, init, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	<ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, init, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	})</initializer>
        <briefdescription>
<para>Initialize a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a FIFO queue, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2145" column="9" bodyfile="include/kernel.h" bodystart="2145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gab744080af449e093df8dd4982e013e16" prot="public" static="no">
        <name>k_fifo_cancel_wait</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, cancel_wait, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	<ref refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" kindref="member">k_queue_cancel_wait</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, cancel_wait, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	})</initializer>
        <briefdescription>
<para>Cancel waiting on a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine causes first thread pending on <emphasis>fifo</emphasis>, if any, to return from <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> call with NULL value (as if timeout expired).</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2163" column="9" bodyfile="include/kernel.h" bodystart="2163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" prot="public" static="no">
        <name>k_fifo_put</name>
        <param><defname>fifo</defname></param>
        <param><defname>data</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	})</initializer>
        <briefdescription>
<para>Add an element to a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a data item to <emphasis>fifo</emphasis>. A FIFO data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2182" column="9" bodyfile="include/kernel.h" bodystart="2182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gab1c5212040d12cbb92cede5cf54928ba" prot="public" static="no">
        <name>k_fifo_alloc_put</name>
        <param><defname>fifo</defname></param>
        <param><defname>data</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, alloc_put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	int <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, alloc_put, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Add an element to a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a data item to <emphasis>fifo</emphasis>. There is an implicit memory allocation to create an additional temporary bookkeeping data structure from the calling thread&apos;s resource pool, which is automatically freed when the item is removed. The data itself is not copied.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t sufficient RAM in the caller&apos;s resource pool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2205" column="9" bodyfile="include/kernel.h" bodystart="2205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga1bf5f52290c83e54ba14358cbbb4051b" prot="public" static="no">
        <name>k_fifo_put_list</name>
        <param><defname>fifo</defname></param>
        <param><defname>head</defname></param>
        <param><defname>tail</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_list, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, head, tail); \
	<ref refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" kindref="member">k_queue_append_list</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, head, tail); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_list, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, head, tail); \
	})</initializer>
        <briefdescription>
<para>Atomically add a list of elements to a FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>fifo</emphasis> in one operation. The data items must be in a singly-linked list, with the first word of each data item pointing to the next data item; the list must be NULL-terminated.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to first node in singly-linked list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to last node in singly-linked list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2227" column="9" bodyfile="include/kernel.h" bodystart="2227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga4cdc286a7a6f0d43acab63a4846815e7" prot="public" static="no">
        <name>k_fifo_put_slist</name>
        <param><defname>fifo</defname></param>
        <param><defname>list</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_slist, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, list); \
	<ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, list); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, put_slist, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, list); \
	})</initializer>
        <briefdescription>
<para>Atomically add a list of elements to a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>fifo</emphasis> in one operation. The data items must be in a singly-linked list implemented using a sys_slist_t object. Upon completion, the sys_slist_t object is invalid and must be re-initialized via <ref refid="group__single-linked-list__apis_1ga913aea7661b4ab3b4b50a8efc0d70428" kindref="member">sys_slist_init()</ref>.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sys_slist_t object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2247" column="9" bodyfile="include/kernel.h" bodystart="2247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" prot="public" static="no">
        <name>k_fifo_get</name>
        <param><defname>fifo</defname></param>
        <param><defname>timeout</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, get, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>); \
	void *<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, get, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Get an element from a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes a data item from <emphasis>fifo</emphasis> in a &quot;first in, first out&quot; manner. The first word of the data item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to obtain a data item, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the data item if successful; NULL if returned without waiting, or waiting period timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2271" column="9" bodyfile="include/kernel.h" bodystart="2271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gab7cec4adc128ed1fd2d194ba6cd8c640" prot="public" static="no">
        <name>k_fifo_is_empty</name>
        <param><defname>fifo</defname></param>
        <initializer>	<ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue)</initializer>
        <briefdescription>
<para>Query a FIFO queue to see if it has data available. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the data might be already gone by the time this function returns if other threads is also trying to read from the FIFO.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the FIFO queue is empty. </para>
</simplesect>
<simplesect kind="return"><para>0 if data is available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2292" column="9" bodyfile="include/kernel.h" bodystart="2292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga2e0c8608f095a929740fa94c94a4f389" prot="public" static="no">
        <name>k_fifo_peek_head</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_head, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	void *<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" kindref="member">k_queue_peek_head</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_head, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Peek element at the head of a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the head of FIFO queue without removing it. A usecase for this is if elements of the FIFO object are themselves containers. Then on each iteration of processing, a head container will be peeked, and some data processed out of it, and only if the container is empty, it will be completely remove from the FIFO queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Head element, or NULL if the FIFO queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2308" column="9" bodyfile="include/kernel.h" bodystart="2308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1gafbe2ce9a6437b886cf149016187ba92f" prot="public" static="no">
        <name>k_fifo_peek_tail</name>
        <param><defname>fifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_tail, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>); \
	void *<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" kindref="member">k_queue_peek_tail</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__fifo" kindref="compound">k_fifo</ref>, peek_tail, <ref refid="pending_2src_2main_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Peek element at the tail of FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the tail of FIFO queue (without removing it). A usecase for this is if elements of the FIFO queue are themselves containers. Then it may be useful to add more data to the last container in a FIFO queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the FIFO queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tail element, or NULL if a FIFO queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2327" column="9" bodyfile="include/kernel.h" bodystart="2327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fifo__apis_1ga230b02a526ecb0ae1598be75cb9a8274" prot="public" static="no">
        <name>K_FIFO_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1ga66939b955ea98a204119a6d6c5661cca" kindref="member">STRUCT_SECTION_ITERABLE_ALTERNATE</ref>(k_queue, <ref refid="structk__fifo" kindref="compound">k_fifo</ref>, name) = \
		Z_FIFO_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The FIFO queue can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_fifo<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the FIFO queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2344" column="9" bodyfile="include/kernel.h" bodystart="2344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lifo__apis_1ga69fb19716a9014f7de79f8e524d64a3e" prot="public" static="no">
        <name>k_lifo_init</name>
        <param><defname>lifo</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, init, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>); \
	<ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>)-&gt;_queue); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, init, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>); \
	})</initializer>
        <briefdescription>
<para>Initialize a LIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a LIFO queue object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the LIFO queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2380" column="9" bodyfile="include/kernel.h" bodystart="2380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lifo__apis_1gad662e36b1df8b9013e2dc61f9dfe3a8b" prot="public" static="no">
        <name>k_lifo_put</name>
        <param><defname>lifo</defname></param>
        <param><defname>data</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, put, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__queue__apis_1ga8ce013d8a037d4be5078797e0050e9c6" kindref="member">k_queue_prepend</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>)-&gt;_queue, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, put, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	})</initializer>
        <briefdescription>
<para>Add an element to a LIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a data item to <emphasis>lifo</emphasis>. A LIFO queue data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the LIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2399" column="9" bodyfile="include/kernel.h" bodystart="2399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lifo__apis_1ga96d885a6a36fcfcb5eaa65898eee0965" prot="public" static="no">
        <name>k_lifo_alloc_put</name>
        <param><defname>lifo</defname></param>
        <param><defname>data</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, alloc_put, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	int <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>)-&gt;_queue, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, alloc_put, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Add an element to a LIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a data item to <emphasis>lifo</emphasis>. There is an implicit memory allocation to create an additional temporary bookkeeping data structure from the calling thread&apos;s resource pool, which is automatically freed when the item is removed. The data itself is not copied.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the LIFO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t sufficient RAM in the caller&apos;s resource pool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2422" column="9" bodyfile="include/kernel.h" bodystart="2422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lifo__apis_1gad5f1775947b07a2a77f667aa9e41db5a" prot="public" static="no">
        <name>k_lifo_get</name>
        <param><defname>lifo</defname></param>
        <param><defname>timeout</defname></param>
        <initializer>	({ \
	<ref refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_ENTER</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, get, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>); \
	void *<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref> = <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get</ref>(&amp;(<ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>)-&gt;_queue, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>); \
	<ref refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" kindref="member">SYS_PORT_TRACING_OBJ_FUNC_EXIT</ref>(<ref refid="structk__lifo" kindref="compound">k_lifo</ref>, get, <ref refid="pending_2src_2main_8c_1a5f1a84796be0de3921a88115c3d4246c" kindref="member">lifo</ref>, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>, <ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>); \
	<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>; \
	})</initializer>
        <briefdescription>
<para>Get an element from a LIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes a data item from <emphasis>LIFO</emphasis> in a &quot;last in, first out&quot; manner. The first word of the data item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the LIFO queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to obtain a data item, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the data item if successful; NULL if returned without waiting, or waiting period timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2447" column="9" bodyfile="include/kernel.h" bodystart="2447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lifo__apis_1gaebd450d4181f22491623ea0aed6ee576" prot="public" static="no">
        <name>K_LIFO_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1ga66939b955ea98a204119a6d6c5661cca" kindref="member">STRUCT_SECTION_ITERABLE_ALTERNATE</ref>(k_queue, <ref refid="structk__lifo" kindref="compound">k_lifo</ref>, name) = \
		Z_LIFO_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a LIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The LIFO queue can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_lifo<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the fifo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2464" column="9" bodyfile="include/kernel.h" bodystart="2464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" prot="public" static="no">
        <name>K_STACK_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>stack_num_entries</defname></param>
        <initializer>	stack_data_t __noinit                                  \
		_k_stack_buf_##name[stack_num_entries];        \
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_stack, name) =               \
		Z_STACK_INITIALIZER(name, _k_stack_buf_##name, \
				    stack_num_entries)</initializer>
        <briefdescription>
<para>Statically define and initialize a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>The stack can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_stack<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_num_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of values that can be stacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2596" column="9" bodyfile="include/kernel.h" bodystart="2596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mutex__apis_1gab6f3d98fabbdc0918bbc9934d61d63f3" prot="public" static="no">
        <name>K_MUTEX_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__mutex" kindref="compound">k_mutex</ref>, name) = \
		Z_MUTEX_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>The mutex can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_mutex<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mutex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2668" column="9" bodyfile="include/kernel.h" bodystart="2668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__condvar__apis_1ga770816651e25f7e7dae992a0b2260c21" prot="public" static="no">
        <name>K_CONDVAR_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__condvar" kindref="compound">k_condvar</ref>, name) =                             \
		Z_CONDVAR_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para>The condition variable can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_condvar<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2807" column="9" bodyfile="include/kernel.h" bodystart="2807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__semaphore__apis_1ga689359a77a0cebe737ef644c188f7e57" prot="public" static="no">
        <name>K_SEM_MAX_LIMIT</name>
        <initializer>UINT_MAX</initializer>
        <briefdescription>
<para>Maximum limit value allowed for a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for use when a semaphore does not have an explicit maximum limit, and instead is just used for counting purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2855" column="9" bodyfile="include/kernel.h" bodystart="2855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__semaphore__apis_1ga018a8aa43e02e704deee7b6341502946" prot="public" static="no">
        <name>K_SEM_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>initial_count</defname></param>
        <param><defname>count_limit</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_sem, name) = \
		Z_SEM_INITIALIZER(name, initial_count, count_limit); \
	BUILD_ASSERT(((count_limit) != 0) &amp;&amp; \
		     ((initial_count) &lt;= (count_limit)) &amp;&amp; \
			 ((count_limit) &lt;= <ref refid="group__semaphore__apis_1ga689359a77a0cebe737ef644c188f7e57" kindref="member">K_SEM_MAX_LIMIT</ref>));</initializer>
        <briefdescription>
<para>Statically define and initialize a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>The semaphore can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_sem<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2948" column="9" bodyfile="include/kernel.h" bodystart="2948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__workqueue__apis_1ga893b281f3d2bc0088650536899e17903" prot="public" static="no">
        <name>K_WORK_DELAYABLE_DEFINE</name>
        <param><defname>work</defname></param>
        <param><defname>work_handler</defname></param>
        <initializer>	struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> <ref refid="workq_2work_2src_2main_8c_1a147e2d2d335d9181395da44aa45b7694" kindref="member">work</ref> \
	  = Z_WORK_DELAYABLE_INITIALIZER(<ref refid="workq_2work__queue_2src_2main_8c_1a79d59599a7df302be796206c85bb7437" kindref="member">work_handler</ref>)</initializer>
        <briefdescription>
<para>Initialize a statically-defined delayable work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro can be used to initialize a statically-defined delayable work item, prior to its first use. For example,</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>K_WORK_DELAYABLE_DEFINE(&lt;dwork&gt;,<sp/>&lt;work_handler&gt;);<sp/></highlight></codeline>
</programlisting></para>
<para>Note that if the runtime dependencies support initialization with <ref refid="group__workqueue__apis_1ga2876c5d82fb2340a093bc4d689a55465" kindref="member">k_work_init_delayable()</ref> using that will eliminate the initialized object in ROM that is produced by this macro and copied in at system startup.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for delayable work item object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time work item is processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3634" column="9" bodyfile="include/kernel.h" bodystart="3634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__workqueue__apis_1ga4f3eac1fc56d5c9c21a3afa9b964b0bf" prot="public" static="no">
        <name>K_WORK_USER_DEFINE</name>
        <param><defname>work</defname></param>
        <param><defname>work_handler</defname></param>
        <initializer>	struct k_work_user <ref refid="workq_2work_2src_2main_8c_1a147e2d2d335d9181395da44aa45b7694" kindref="member">work</ref> = Z_WORK_USER_INITIALIZER(<ref refid="workq_2work__queue_2src_2main_8c_1a79d59599a7df302be796206c85bb7437" kindref="member">work_handler</ref>)</initializer>
        <briefdescription>
<para>Initialize a statically-defined user work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro can be used to initialize a statically-defined user work item, prior to its first use. For example,</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>K_WORK_USER_DEFINE(&lt;work&gt;,<sp/>&lt;work_handler&gt;);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for work item object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time work item is processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3964" column="9" bodyfile="include/kernel.h" bodystart="3964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__workqueue__apis_1gaf8e003eefa5dd66ba883688f9d39c333" prot="public" static="no">
        <name>K_WORK_DEFINE</name>
        <param><defname>work</defname></param>
        <param><defname>work_handler</defname></param>
        <initializer>	struct <ref refid="structk__work" kindref="compound">k_work</ref> <ref refid="workq_2work_2src_2main_8c_1a147e2d2d335d9181395da44aa45b7694" kindref="member">work</ref> = Z_WORK_INITIALIZER(<ref refid="workq_2work__queue_2src_2main_8c_1a79d59599a7df302be796206c85bb7437" kindref="member">work_handler</ref>)</initializer>
        <briefdescription>
<para>Initialize a statically-defined work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro can be used to initialize a statically-defined workqueue work item, prior to its first use. For example,</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>K_WORK_DEFINE(&lt;work&gt;,<sp/>&lt;work_handler&gt;);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for work item object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time work item is processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4103" column="9" bodyfile="include/kernel.h" bodystart="4103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__workqueue__apis_1ga41c8a64e854c6cca3a6956079cce2826" prot="public" static="no">
        <name>K_DELAYED_WORK_DEFINE</name>
        <param><defname>work</defname></param>
        <param><defname>work_handler</defname></param>
        <initializer>	__DEPRECATED_MACRO \
	struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> <ref refid="workq_2work_2src_2main_8c_1a147e2d2d335d9181395da44aa45b7694" kindref="member">work</ref> = Z_DELAYED_WORK_INITIALIZER(<ref refid="workq_2work__queue_2src_2main_8c_1a79d59599a7df302be796206c85bb7437" kindref="member">work_handler</ref>)</initializer>
        <briefdescription>
<para>Initialize a statically-defined delayed work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro can be used to initialize a statically-defined workqueue delayed work item, prior to its first use. For example,</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>K_DELAYED_WORK_DEFINE(&lt;work&gt;,<sp/>&lt;work_handler&gt;);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for delayed work item object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time work item is processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4117" column="9" bodyfile="include/kernel.h" bodystart="4117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__msgq__apis_1ga4bb73f46fd0818f7f7a90860b792f7ce" prot="public" static="no">
        <name>K_MSGQ_FLAG_ALLOC</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4285" column="9" bodyfile="include/kernel.h" bodystart="4285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__msgq__apis_1ga95ef93002766901511d09c8cd8f8293b" prot="public" static="no">
        <name>K_MSGQ_DEFINE</name>
        <param><defname>q_name</defname></param>
        <param><defname>q_msg_size</defname></param>
        <param><defname>q_max_msgs</defname></param>
        <param><defname>q_align</defname></param>
        <initializer>	static char __noinit __aligned(q_align)				\
		_k_fifo_buf_##q_name[(q_max_msgs) * (q_msg_size)];	\
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__msgq" kindref="compound">k_msgq</ref>, q_name) =			\
	       Z_MSGQ_INITIALIZER(q_name, _k_fifo_buf_##q_name,	\
				  q_msg_size, q_max_msgs)</initializer>
        <briefdescription>
<para>Statically define and initialize a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The message queue&apos;s ring buffer contains space for <emphasis>q_max_msgs</emphasis> messages, each of which is <emphasis>q_msg_size</emphasis> bytes long. The buffer is aligned to a <emphasis>q_align</emphasis> -byte boundary, which must be a power of 2. To ensure that each message is similarly aligned to this boundary, <emphasis>q_msg_size</emphasis> must also be a multiple of <emphasis>q_align</emphasis>.</para>
<para>The message queue can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_msgq<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q_msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Message size (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q_max_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of messages that can be queued. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the message queue&apos;s ring buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4320" column="9" bodyfile="include/kernel.h" bodystart="4320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mailbox__apis_1gab55cba898db47113a06641c01f3e3714" prot="public" static="no">
        <name>K_MBOX_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__mbox" kindref="compound">k_mbox</ref>, name) = \
		Z_MBOX_INITIALIZER(name) \</initializer>
        <briefdescription>
<para>Statically define and initialize a mailbox. </para>
        </briefdescription>
        <detaileddescription>
<para>The mailbox is to be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_mbox<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mailbox. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4569" column="9" bodyfile="include/kernel.h" bodystart="4569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pipe__apis_1gac2256aa00c59e78199be9bdefd61aa52" prot="public" static="no">
        <name>K_PIPE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>pipe_buffer_size</defname></param>
        <param><defname>pipe_align</defname></param>
        <initializer>	static <ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> char __noinit __aligned(pipe_align)		\
		_k_pipe_buf_##name[pipe_buffer_size];			\
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__pipe" kindref="compound">k_pipe</ref>, name) =				\
		Z_PIPE_INITIALIZER(name, _k_pipe_buf_##name, pipe_buffer_size)</initializer>
        <briefdescription>
<para>Statically define and initialize a pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>The pipe can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_pipe<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipe_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the pipe&apos;s ring buffer (in bytes), or zero if no ring buffer is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipe_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the pipe&apos;s ring buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4719" column="9" bodyfile="include/kernel.h" bodystart="4719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__slab__apis_1ga60bc92eee58fcc5f121b8e4d82eaa69e" prot="public" static="no">
        <name>K_MEM_SLAB_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>slab_block_size</defname></param>
        <param><defname>slab_num_blocks</defname></param>
        <param><defname>slab_align</defname></param>
        <initializer>	char __noinit_named(k_mem_slab_buf_##name) \
	   __aligned(<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_align)) \
	   _k_mem_slab_buf_##name[(slab_num_blocks) * <ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size)]; \
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_mem_slab, name) = \
		Z_MEM_SLAB_INITIALIZER(name, _k_mem_slab_buf_##name, \
					<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size), slab_num_blocks)</initializer>
        <briefdescription>
<para>Statically define and initialize a memory slab in a public (non-static) scope. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory slab&apos;s buffer contains <emphasis>slab_num_blocks</emphasis> memory blocks that are <emphasis>slab_block_size</emphasis> bytes long. The buffer is aligned to a <emphasis>slab_align</emphasis> -byte boundary. To ensure that each memory block is similarly aligned to this boundary, <emphasis>slab_block_size</emphasis> must also be a multiple of <emphasis>slab_align</emphasis>.</para>
<para>The memory slab can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_mem_slab<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>This macro cannot be used together with a static keyword. If such a use-case is desired, use <ref refid="group__mem__slab__apis_1ga90bdbb15f410991f54ba16025c24bc3c" kindref="member">K_MEM_SLAB_DEFINE_STATIC</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory slab&apos;s buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4925" column="9" bodyfile="include/kernel.h" bodystart="4925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__slab__apis_1ga90bdbb15f410991f54ba16025c24bc3c" prot="public" static="no">
        <name>K_MEM_SLAB_DEFINE_STATIC</name>
        <param><defname>name</defname></param>
        <param><defname>slab_block_size</defname></param>
        <param><defname>slab_num_blocks</defname></param>
        <param><defname>slab_align</defname></param>
        <initializer>	static char __noinit_named(k_mem_slab_buf_##name) \
	   __aligned(<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_align)) \
	   _k_mem_slab_buf_##name[(slab_num_blocks) * <ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size)]; \
	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_mem_slab, name) = \
		Z_MEM_SLAB_INITIALIZER(name, _k_mem_slab_buf_##name, \
					<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size), slab_num_blocks)</initializer>
        <briefdescription>
<para>Statically define and initialize a memory slab in a private (static) scope. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory slab&apos;s buffer contains <emphasis>slab_num_blocks</emphasis> memory blocks that are <emphasis>slab_block_size</emphasis> bytes long. The buffer is aligned to a <emphasis>slab_align</emphasis> -byte boundary. To ensure that each memory block is similarly aligned to this boundary, <emphasis>slab_block_size</emphasis> must also be a multiple of <emphasis>slab_align</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory slab&apos;s buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4947" column="9" bodyfile="include/kernel.h" bodystart="4947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__apis_1ga795d7f1e6d5b7b19a7a50198d7829a0f" prot="public" static="no">
        <name>K_HEAP_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>bytes</defname></param>
        <initializer>	Z_HEAP_DEFINE_IN_SECT(name, bytes,			\
			      __noinit_named(kheap_buf_##name))</initializer>
        <briefdescription>
<para>Define a static <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines and initializes a static memory region and <ref refid="structk__heap" kindref="compound">k_heap</ref> of the requested size. After kernel start, &amp;name can be used as if <ref refid="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" kindref="member">k_heap_init()</ref> had been called.</para>
<para>Note that this macro enforces a minimum size on the memory region to accommodate metadata requirements. Very small heaps will be padded to fit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for the struct <ref refid="structk__heap" kindref="compound">k_heap</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory region, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5198" column="9" bodyfile="include/kernel.h" bodystart="5198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__apis_1ga968f4c6a201fdf6862d62dd5d9f8d032" prot="public" static="no">
        <name>K_HEAP_DEFINE_NOCACHE</name>
        <param><defname>name</defname></param>
        <param><defname>bytes</defname></param>
        <initializer>	Z_HEAP_DEFINE_IN_SECT(name, bytes, __nocache)</initializer>
        <briefdescription>
<para>Define a static <ref refid="structk__heap" kindref="compound">k_heap</ref> in uncached memory. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines and initializes a static memory region and <ref refid="structk__heap" kindref="compound">k_heap</ref> of the requested size in uncache memory. After kernel start, &amp;name can be used as if <ref refid="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" kindref="member">k_heap_init()</ref> had been called.</para>
<para>Note that this macro enforces a minimum size on the memory region to accommodate metadata requirements. Very small heaps will be padded to fit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for the struct <ref refid="structk__heap" kindref="compound">k_heap</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory region, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5216" column="9" bodyfile="include/kernel.h" bodystart="5216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gafd5d801eb9e9cf6097b2c08b4933998e" prot="public" static="no">
        <name>K_POLL_TYPE_IGNORE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5364" column="9" bodyfile="include/kernel.h" bodystart="5364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga144d8eb34d85f6053e454410a10bf56a" prot="public" static="no">
        <name>K_POLL_TYPE_SIGNAL</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_SIGNAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5365" column="9" bodyfile="include/kernel.h" bodystart="5365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga0fd7605bdffd43dff7480a90a603ffde" prot="public" static="no">
        <name>K_POLL_TYPE_SEM_AVAILABLE</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_SEM_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5366" column="9" bodyfile="include/kernel.h" bodystart="5366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga58d656f73f031a39b8a936133fe5504f" prot="public" static="no">
        <name>K_POLL_TYPE_DATA_AVAILABLE</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5367" column="9" bodyfile="include/kernel.h" bodystart="5367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga71734fee18c523cf70276260118afb91" prot="public" static="no">
        <name>K_POLL_TYPE_FIFO_DATA_AVAILABLE</name>
        <initializer><ref refid="group__poll__apis_1ga58d656f73f031a39b8a936133fe5504f" kindref="member">K_POLL_TYPE_DATA_AVAILABLE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5368" column="9" bodyfile="include/kernel.h" bodystart="5368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gaa83509b54175fb6c98324422a928d5e1" prot="public" static="no">
        <name>K_POLL_TYPE_MSGQ_DATA_AVAILABLE</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_MSGQ_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5369" column="9" bodyfile="include/kernel.h" bodystart="5369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" prot="public" static="no">
        <name>K_POLL_STATE_NOT_READY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5380" column="9" bodyfile="include/kernel.h" bodystart="5380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga478aae7fe4fb5c7b7c76ed216c22a7f1" prot="public" static="no">
        <name>K_POLL_STATE_SIGNALED</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_SIGNALED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5381" column="9" bodyfile="include/kernel.h" bodystart="5381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gae9e3eefd5a29a538d22f53592578bb37" prot="public" static="no">
        <name>K_POLL_STATE_SEM_AVAILABLE</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_SEM_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5382" column="9" bodyfile="include/kernel.h" bodystart="5382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gac166d9919d591bace163c5211e7b41f4" prot="public" static="no">
        <name>K_POLL_STATE_DATA_AVAILABLE</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5383" column="9" bodyfile="include/kernel.h" bodystart="5383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gabd5ac3341698534f39ded718079d6168" prot="public" static="no">
        <name>K_POLL_STATE_FIFO_DATA_AVAILABLE</name>
        <initializer><ref refid="group__poll__apis_1gac166d9919d591bace163c5211e7b41f4" kindref="member">K_POLL_STATE_DATA_AVAILABLE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5384" column="9" bodyfile="include/kernel.h" bodystart="5384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gac236074cd43f59f28b803fe2c4a4f6f7" prot="public" static="no">
        <name>K_POLL_STATE_MSGQ_DATA_AVAILABLE</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_MSGQ_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5385" column="9" bodyfile="include/kernel.h" bodystart="5385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gadaf4b4c8e13afb54114af72d133e1fdb" prot="public" static="no">
        <name>K_POLL_STATE_CANCELLED</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_CANCELLED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5386" column="9" bodyfile="include/kernel.h" bodystart="5386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga6d6321e189afca73a276cd671ec531ae" prot="public" static="no">
        <name>K_POLL_SIGNAL_INITIALIZER</name>
        <param><defname>obj</defname></param>
        <initializer>	{ \
	.poll_events = <ref refid="group__doubly-linked-list__apis_1ga3681d4600f9cbd9237ea9ce6f67e508d" kindref="member">SYS_DLIST_STATIC_INIT</ref>(&amp;obj.poll_events), \
	.signaled = 0, \
	.<ref refid="structresult" kindref="compound">result</ref> = 0, \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5403" column="9" bodyfile="include/kernel.h" bodystart="5403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga8e3889f2bac281a6e65e31068e58047e" prot="public" static="no">
        <name>K_POLL_EVENT_INITIALIZER</name>
        <param><defname>_event_type</defname></param>
        <param><defname>_event_mode</defname></param>
        <param><defname>_event_obj</defname></param>
        <initializer>	{ \
	.poller = NULL, \
	.type = _event_type, \
	.<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref> = <ref refid="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" kindref="member">K_POLL_STATE_NOT_READY</ref>, \
	.mode = _event_mode, \
	.unused = 0, \
	{ \
		.obj = _event_obj, \
	}, \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5446" column="9" bodyfile="include/kernel.h" bodystart="5446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gada2366896d913dc916b3c28642648b63" prot="public" static="no">
        <name>K_POLL_EVENT_STATIC_INITIALIZER</name>
        <param><defname>_event_type</defname></param>
        <param><defname>_event_mode</defname></param>
        <param><defname>_event_obj</defname></param>
        <param><defname>event_tag</defname></param>
        <initializer>	{ \
	.<ref refid="timer_2starve_2src_2main_8c_1aa7eccd3911dd697c8b39d08273f3e64e" kindref="member">tag</ref> = event_tag, \
	.type = _event_type, \
	.<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref> = <ref refid="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" kindref="member">K_POLL_STATE_NOT_READY</ref>, \
	.mode = _event_mode, \
	.unused = 0, \
	{ \
		.obj = _event_obj, \
	}, \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5459" column="9" bodyfile="include/kernel.h" bodystart="5458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" prot="public" static="no">
        <name>k_oops</name>
        <param></param>
        <initializer>z_except_reason(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>)</initializer>
        <briefdescription>
<para>Fatally terminate a thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This should be called when a thread has encountered an unrecoverable runtime condition and needs to terminate. What this ultimately means is determined by the _fatal_error_handler() implementation, which will be called will reason code K_ERR_KERNEL_OOPS.</para>
<para>If this is called from ISR context, the default system fatal error handler will treat it as an unrecoverable system error, just like <ref refid="include_2kernel_8h_1aedd541f707b1463aaac15c7798340329" kindref="member">k_panic()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5683" column="9" bodyfile="include/kernel.h" bodystart="5683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="include_2kernel_8h_1aedd541f707b1463aaac15c7798340329" prot="public" static="no">
        <name>k_panic</name>
        <param></param>
        <initializer>z_except_reason(<ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52a6ea29e224a1bc958a961420471711617" kindref="member">K_ERR_KERNEL_PANIC</ref>)</initializer>
        <briefdescription>
<para>Fatally terminate the system. </para>
        </briefdescription>
        <detaileddescription>
<para>This should be called when the Zephyr kernel has encountered an unrecoverable runtime condition and needs to terminate. What this ultimately means is determined by the _fatal_error_handler() implementation, which will be called will reason code K_ERR_KERNEL_PANIC. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5693" column="9" bodyfile="include/kernel.h" bodystart="5693" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779c" prot="public" static="no" strong="no">
        <type></type>
        <name>execution_context_types</name>
        <enumvalue id="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779ca30593044743695f8184a157283dac4d5" prot="public">
          <name>K_ISR</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779ca62c0b731a1bb3c5e4aadeba3f93df58b" prot="public">
          <name>K_COOP_THREAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779cae84f57f4ac996c751d1f4c9e49789322" prot="public">
          <name>K_PREEMPT_THREAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="80" column="1" bodyfile="include/kernel.h" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="group__workqueue__apis_1ga15b3bbe041870ee299f7e042b0305e3c" prot="public" static="no" strong="no">
        <type></type>
        <name>@119</name>
        <enumvalue id="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3cac6bee9a104cf6ee3853579f5eb15c165" prot="public">
          <name>K_WORK_RUNNING</name>
          <initializer>= BIT(K_WORK_RUNNING_BIT)</initializer>
          <briefdescription>
<para>Flag indicating a work item that is running under a work queue thread. </para>
          </briefdescription>
          <detaileddescription>
<para>Accessed via <ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get()</ref>. May co-occur with other flags. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3ca9fdc4327489bcdcca3de0ee9eed6b732" prot="public">
          <name>K_WORK_CANCELING</name>
          <initializer>= BIT(K_WORK_CANCELING_BIT)</initializer>
          <briefdescription>
<para>Flag indicating a work item that is being canceled. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   Accessed via k_work_busy_get().  May co-occur with other flags.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3caa7f8855bc9931bff79062ce53b06eb85" prot="public">
          <name>K_WORK_QUEUED</name>
          <initializer>= BIT(K_WORK_QUEUED_BIT)</initializer>
          <briefdescription>
<para>Flag indicating a work item that has been submitted to a queue but has not started running. </para>
          </briefdescription>
          <detaileddescription>
<para>Accessed via <ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get()</ref>. May co-occur with other flags. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3cab4bf9e74435077b2bbfe1de1f4e80aed" prot="public">
          <name>K_WORK_DELAYED</name>
          <initializer>= BIT(K_WORK_DELAYED_BIT)</initializer>
          <briefdescription>
<para>Flag indicating a delayed work item that is scheduled for submission to a queue. </para>
          </briefdescription>
          <detaileddescription>
<para>Accessed via <ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get()</ref>. May co-occur with other flags. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3500" column="1" bodyfile="include/kernel.h" bodystart="3500" bodyend="3569"/>
      </memberdef>
      <memberdef kind="enum" id="group__poll__apis_1ga36d7978872a83191dd3cc16d62165add" prot="public" static="no" strong="no">
        <type></type>
        <name>k_poll_modes</name>
        <enumvalue id="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda22874743e2f6b0f1fd55c5375732b681" prot="public">
          <name>K_POLL_MODE_NOTIFY_ONLY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda71e08944b3e944c28056f9a5fbfb018c" prot="public">
          <name>K_POLL_NUM_MODES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5372" column="1" bodyfile="include/kernel.h" bodystart="5372" bodyend="5377"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__thread__apis_1gaf9f23a6ff9dae76af56f25b373e74c75" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* k_thread_user_cb_t) (const struct k_thread *thread, void *user_data)</definition>
        <argsstring>)(const struct k_thread *thread, void *user_data)</argsstring>
        <name>k_thread_user_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="95" column="9" bodyfile="include/kernel.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__timer__apis_1ga37bcd42a457855a68b74570c979ababa" prot="public" static="no">
        <type>void(*</type>
        <definition>k_timer_expiry_t</definition>
        <argsstring>)(struct k_timer *timer)</argsstring>
        <name>k_timer_expiry_t</name>
        <briefdescription>
<para>Timer expiry function type. </para>
        </briefdescription>
        <detaileddescription>
<para>A timer&apos;s expiry function is executed by the system clock interrupt handler each time the timer expires. The expiry function is optional, and is only invoked if the timer has been initialized with one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1304" column="9" bodyfile="include/kernel.h" bodystart="1304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__timer__apis_1ga16fbd44c08a26c4fdeb7f542f2a03a15" prot="public" static="no">
        <type>void(*</type>
        <definition>k_timer_stop_t</definition>
        <argsstring>)(struct k_timer *timer)</argsstring>
        <name>k_timer_stop_t</name>
        <briefdescription>
<para>Timer stop function type. </para>
        </briefdescription>
        <detaileddescription>
<para>A timer&apos;s stop function is executed if the timer is stopped prematurely. The function runs in the context of call that stops the timer. As <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> can be invoked from an ISR, the stop function must be callable from interrupt context (isr-ok).</para>
<para>The stop function is optional, and is only invoked if the timer has been initialized with one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1320" column="9" bodyfile="include/kernel.h" bodystart="1320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* k_work_handler_t) (struct k_work *work)</definition>
        <argsstring>)(struct k_work *work)</argsstring>
        <name>k_work_handler_t</name>
        <briefdescription>
<para>The signature for a work item handler function. </para>
        </briefdescription>
        <detaileddescription>
<para>The function will be invoked by the thread animating a work queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>the work item that provided the handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2980" column="9" bodyfile="include/kernel.h" bodystart="2980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__workqueue__apis_1gafdb3f5f2225b3d5d1fe682cb97f3b328" prot="public" static="no">
        <type>void(*</type>
        <definition>k_work_user_handler_t</definition>
        <argsstring>)(struct k_work_user *work)</argsstring>
        <name>k_work_user_handler_t</name>
        <briefdescription>
<para>Work item handler function type for user work queues. </para>
        </briefdescription>
        <detaileddescription>
<para>A work item&apos;s handler function is executed by a user workqueue&apos;s thread when the work item is processed by the workqueue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the work item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3917" column="9" bodyfile="include/kernel.h" bodystart="3917" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_foreach</definition>
        <argsstring>(k_thread_user_cb_t user_cb, void *user_data)</argsstring>
        <name>k_thread_foreach</name>
        <param>
          <type><ref refid="group__thread__apis_1gaf9f23a6ff9dae76af56f25b373e74c75" kindref="member">k_thread_user_cb_t</ref></type>
          <declname>user_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Iterate over all the threads in the system. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine iterates over all the threads in the system and calls the user_cb function for each thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:option:`CONFIG_THREAD_MONITOR` </verbatim> must be set for this function to be effective. </para>
</simplesect>
<simplesect kind="note"><para>This API uses <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock</ref> to protect the _kernel.threads list which means creation of new threads and terminations of existing threads are blocked until this API returns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="113" column="13" declfile="include/kernel.h" declline="113" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_foreach_unlocked</definition>
        <argsstring>(k_thread_user_cb_t user_cb, void *user_data)</argsstring>
        <name>k_thread_foreach_unlocked</name>
        <param>
          <type><ref refid="group__thread__apis_1gaf9f23a6ff9dae76af56f25b373e74c75" kindref="member">k_thread_user_cb_t</ref></type>
          <declname>user_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Iterate over all the threads in the system without locking. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine works exactly the same like <ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach</ref> but unlocks interrupts when user_cb is executed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:option:`CONFIG_THREAD_MONITOR` </verbatim> must be set for this function to be effective. </para>
</simplesect>
<simplesect kind="note"><para>This API uses <ref refid="group__spinlock__apis_1gaac60da4347f5b29ff8c4e5f24c99b3bf" kindref="member">k_spin_lock</ref> only when accessing the _kernel.threads queue elements. It unlocks it during user callback function processing. If a new task is created when this <computeroutput>foreach</computeroutput> function is in progress, the added new task would not be included in the enumeration. If a task is aborted during this enumeration, there would be a race here and there is a possibility that this aborted task would be included in the enumeration. </para>
</simplesect>
<simplesect kind="note"><para>If the task is aborted and the memory occupied by its <computeroutput><ref refid="structk__thread" kindref="compound">k_thread</ref></computeroutput> structure is reused when this <computeroutput>k_thread_foreach_unlocked</computeroutput> is in progress it might even lead to the system behave unstable. This function may never return, as it would follow some <computeroutput>next</computeroutput> task pointers treating given pointer as a pointer to the <ref refid="structk__thread" kindref="compound">k_thread</ref> structure while it is something different right now. Do not reuse the memory that was occupied by <ref refid="structk__thread" kindref="compound">k_thread</ref> structure of aborted task if it was aborted after this function was called in any context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="142" column="13" declfile="include/kernel.h" declline="142" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
        <definition>k_tid_t k_thread_create</definition>
        <argsstring>(struct k_thread *new_thread, k_thread_stack_t *stack, size_t stack_size, k_thread_entry_t entry, void *p1, void *p2, void *p3, int prio, uint32_t options, k_timeout_t delay)</argsstring>
        <name>k_thread_create</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>new_thread</declname>
        </param>
        <param>
          <type><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stack_size</declname>
        </param>
        <param>
          <type><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prio</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Create a thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a thread, then schedules it for execution.</para>
<para>The new thread may be scheduled for immediate execution or a delayed start. If the newly spawned thread does not have a delayed start the kernel scheduler may preempt the current thread to allow the new thread to execute.</para>
<para>Thread options are architecture-specific, and can include K_ESSENTIAL, K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating them using &quot;|&quot; (the logical OR operator).</para>
<para>Stack objects passed to this function must be originally defined with either of these macros in order to be portable:</para>
<para><itemizedlist>
<listitem><para><ref refid="group__thread__stack__api_1gac5368ce24fdeab3863b5c8dee2ebd955" kindref="member">K_THREAD_STACK_DEFINE()</ref> - For stacks that may support either user or supervisor threads.</para>
</listitem><listitem><para><ref refid="threads_2thread__stack_2src_2main_8c_1a72c0793eec55b1d100382b62b7d3c06d" kindref="member">K_KERNEL_STACK_DEFINE()</ref> - For stacks that may support supervisor threads only. These stacks use less memory if CONFIG_USERSPACE is enabled.</para>
</listitem></itemizedlist>
</para>
<para>The stack_size parameter has constraints. It must either be:</para>
<para><itemizedlist>
<listitem><para>The original size value passed to <ref refid="group__thread__stack__api_1gac5368ce24fdeab3863b5c8dee2ebd955" kindref="member">K_THREAD_STACK_DEFINE()</ref> or <ref refid="threads_2thread__stack_2src_2main_8c_1a72c0793eec55b1d100382b62b7d3c06d" kindref="member">K_KERNEL_STACK_DEFINE()</ref></para>
</listitem><listitem><para>The return value of <ref refid="group__thread__stack__api_1ga775f8e6b4144cfdd24f3261b6db64150" kindref="member">K_THREAD_STACK_SIZEOF(stack)</ref> if the stack was defined with <ref refid="group__thread__stack__api_1gac5368ce24fdeab3863b5c8dee2ebd955" kindref="member">K_THREAD_STACK_DEFINE()</ref></para>
</listitem><listitem><para>The return value of <ref refid="group__thread__stack__api_1ga57b3824b117c634dbb6052d47dc4301c" kindref="member">K_KERNEL_STACK_SIZEOF(stack)</ref> if the stack was defined with <ref refid="threads_2thread__stack_2src_2main_8c_1a72c0793eec55b1d100382b62b7d3c06d" kindref="member">K_KERNEL_STACK_DEFINE()</ref>.</para>
</listitem></itemizedlist>
</para>
<para>Using other values, or sizeof(stack) may produce undefined behavior.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to uninitialized struct <ref refid="structk__thread" kindref="compound">k_thread</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the stack space. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack size in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread entry function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st entry point parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd entry point parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd entry point parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Scheduling delay, or K_NO_WAIT (for no delay).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID of new thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="276" column="10" declfile="include/kernel.h" declline="276" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FUNC_NORETURN void</type>
        <definition>FUNC_NORETURN void k_thread_user_mode_enter</definition>
        <argsstring>(k_thread_entry_t entry, void *p1, void *p2, void *p3)</argsstring>
        <name>k_thread_user_mode_enter</name>
        <param>
          <type><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>Drop a thread&apos;s privileges permanently to user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows a supervisor thread to be re-used as a user thread. This function does not return, but control will transfer to the provided entry point as if this was a new user thread.</para>
<para>The implementation ensures that the stack buffer contents are erased. Any thread-local storage will be reverted to a pristine state.</para>
<para>Memory domain membership, resource pool assignment, kernel object permissions, priority, and thread options are preserved.</para>
<para>A common use of this function is to re-use the main thread as a user thread once all supervisor mode-only tasks have been completed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to start executing from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st entry point parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd entry point parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd entry point parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="304" column="27" declfile="include/kernel.h" declline="304" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga3f46c06833add2a2e0ddb7242f06702c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_thread_heap_assign</definition>
        <argsstring>(struct k_thread *thread, struct k_heap *heap)</argsstring>
        <name>k_thread_heap_assign</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>heap</declname>
        </param>
        <briefdescription>
<para>Assign a resource memory pool to a thread. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, threads have no resource pool assigned unless their parent thread has a resource pool, in which case it is inherited. Multiple threads may be assigned to the same memory pool.</para>
<para>Changing a thread&apos;s resource pool will not migrate allocations from the previous pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Target thread to assign a memory pool for resource requests. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heap</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap object to use for resources, or NULL if the thread should no longer have a memory pool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="338" column="20" bodyfile="include/kernel.h" bodystart="338" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga220d22dc35115fcdc0badb262e7a019d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_system_pool_assign</definition>
        <argsstring>(struct k_thread *thread)</argsstring>
        <name>k_thread_system_pool_assign</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Assign the system heap as a thread&apos;s resource pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to z_thread_heap_assign(), but the thread will use the kernel heap to draw memory.</para>
<para>Use with caution, as a malicious thread could perform DoS attacks on the kernel heap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Target thread to assign the system heap for resource requests </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="382" column="6" declfile="include/kernel.h" declline="382" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_join</definition>
        <argsstring>(struct k_thread *thread, k_timeout_t timeout)</argsstring>
        <name>k_thread_join</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Sleep until a thread exits. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller will be put to sleep until the target thread exits, either due to being aborted, self-exiting, or taking a fatal error. This API returns immediately if the thread isn&apos;t running.</para>
<para>This API may only be called from ISRs with a K_NO_WAIT timeout, where it can be useful as a predicate to detect when a thread has aborted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to wait to exit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>upper bound time to wait for the thread to exit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>success, target thread has exited or wasn&apos;t running </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>returned without waiting </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>waiting period timed out </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EDEADLK</parametername>
</parameternamelist>
<parameterdescription>
<para>target thread is joining on the caller, or target thread is the caller </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="404" column="6" declfile="include/kernel.h" declline="404" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_sleep</definition>
        <argsstring>(k_timeout_t timeout)</argsstring>
        <name>k_sleep</name>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Put the current thread to sleep. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine puts the current thread to sleep for <emphasis>duration</emphasis>, specified as a <ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref> object.</para>
<para><simplesect kind="note"><para>if <emphasis>timeout</emphasis> is set to K_FOREVER then the thread is suspended.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired duration of sleep.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the requested time has elapsed or the number of milliseconds left to sleep, if thread was woken up by <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup</ref> call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="419" column="10" declfile="include/kernel.h" declline="419" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>static int32_t k_msleep</definition>
        <argsstring>(int32_t ms)</argsstring>
        <name>k_msleep</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Put the current thread to sleep. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine puts the current thread to sleep for <emphasis>duration</emphasis> milliseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of milliseconds to sleep.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the requested time has elapsed or the number of milliseconds left to sleep, if thread was woken up by <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup</ref> call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="431" column="23" bodyfile="include/kernel.h" bodystart="431" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1gaeac56bb072ce295b9fdc372ab8cee67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_usleep</definition>
        <argsstring>(int32_t us)</argsstring>
        <name>k_usleep</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>us</declname>
        </param>
        <briefdescription>
<para>Put the current thread to sleep with microsecond resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is unlikely to work as expected without kernel tuning. In particular, because the lower bound on the duration of a sleep is the duration of a tick, <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` </verbatim> must be adjusted to achieve the resolution desired. The implications of doing this must be understood before attempting to use <ref refid="group__thread__apis_1gaeac56bb072ce295b9fdc372ab8cee67e" kindref="member">k_usleep()</ref>. Use with caution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>us</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of microseconds to sleep.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the requested time has elapsed or the number of microseconds left to sleep, if thread was woken up by <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup</ref> call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="451" column="10" declfile="include/kernel.h" declline="451" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga550b642e071480323e589866abb99c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_busy_wait</definition>
        <argsstring>(uint32_t usec_to_wait)</argsstring>
        <name>k_busy_wait</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>usec_to_wait</declname>
        </param>
        <briefdescription>
<para>Cause the current thread to busy wait. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine causes the current thread to execute a &quot;do nothing&quot; loop for <emphasis>usec_to_wait</emphasis> microseconds.</para>
<para><simplesect kind="note"><para>The clock used for the microsecond-resolution delay here may be skewed relative to the clock used for system timeouts like <ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep()</ref>. For example k_busy_wait(1000) may take slightly more or less time than k_sleep(K_MSEC(1)), with the offset dependent on clock tolerances. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="465" column="7" declfile="include/kernel.h" declline="465" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga08a3484c33444ecedc2d71d78495a295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_yield</definition>
        <argsstring>(void)</argsstring>
        <name>k_yield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Yield the current thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine causes the current thread to yield execution to another thread of the same or higher priority. If there are no other ready threads of the same or higher priority, the routine returns immediately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="474" column="7" declfile="include/kernel.h" declline="474" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_wakeup</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_wakeup</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Wake up a sleeping thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine prematurely wakes up <emphasis>thread</emphasis> from sleeping.</para>
<para>If <emphasis>thread</emphasis> is not currently sleeping, the routine has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread to wake. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="485" column="7" declfile="include/kernel.h" declline="485" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__attribute_const__ <ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
        <definition>static __attribute_const__ k_tid_t k_current_get</definition>
        <argsstring>(void)</argsstring>
        <name>k_current_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get thread ID of the current thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ID of current thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="509" column="23" bodyfile="include/kernel.h" bodystart="509" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_abort</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_abort</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Abort a thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine permanently stops execution of <emphasis>thread</emphasis>. The thread is taken off all kernel queues it is part of (i.e. the ready queue, the timeout queue, or a kernel object wait queue). However, any kernel resources the thread might currently own (such as mutexes or memory blocks) are not released. It is the responsibility of the caller of this routine to ensure all necessary cleanup is performed.</para>
<para>After <ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> returns, the thread is guaranteed not to be running or to become runnable anywhere on the system. Normally this is done via blocking the caller (in the same manner as <ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join()</ref>), but in interrupt context on SMP systems the implementation is required to spin for threads that are running on other CPUs. Note that as specified, this means that on SMP platforms it is possible for application code to create a deadlock condition by simultaneously aborting a cycle of threads using at least one termination from interrupt context. Zephyr cannot detect all such conditions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread to abort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="541" column="7" declfile="include/kernel.h" declline="541" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_start</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_start</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Start an inactive thread. </para>
        </briefdescription>
        <detaileddescription>
<para>If a thread was created with K_FOREVER in the delay parameter, it will not be added to the scheduling queue until this function is called on it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>thread to start </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="553" column="7" declfile="include/kernel.h" declline="553" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga80013f10d12ccdffbbd88cee048f1c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>k_ticks_t k_thread_timeout_expires_ticks</definition>
        <argsstring>(const struct k_thread *t)</argsstring>
        <name>k_thread_timeout_expires_ticks</name>
        <param>
          <type>const struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get time when a thread wakes up, in system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine computes the system uptime when a waiting thread next executes, in units of system ticks. If the thread is not waiting, it returns current system time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="567" column="12" declfile="include/kernel.h" declline="567" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga4cb4126c8e4f62bd44f3dd03f2e4a423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>k_ticks_t k_thread_timeout_remaining_ticks</definition>
        <argsstring>(const struct k_thread *t)</argsstring>
        <name>k_thread_timeout_remaining_ticks</name>
        <param>
          <type>const struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get time remaining before a thread wakes up, in system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine computes the time remaining before a waiting thread next executes, in units of system ticks. If the thread is not waiting, it returns zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="582" column="12" declfile="include/kernel.h" declline="582" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_priority_get</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_priority_get</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Get a thread&apos;s priority. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gets the priority of <emphasis>thread</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread whose priority is needed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Priority of <emphasis>thread</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="686" column="6" declfile="include/kernel.h" declline="686" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_priority_set</definition>
        <argsstring>(k_tid_t thread, int prio)</argsstring>
        <name>k_thread_priority_set</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Set a thread&apos;s priority. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine immediately changes the priority of <emphasis>thread</emphasis>.</para>
<para>Rescheduling can occur immediately depending on the priority <emphasis>thread</emphasis> is set to:</para>
<para><itemizedlist>
<listitem><para>If its priority is raised above the priority of the caller of this function, and the caller is preemptible, <emphasis>thread</emphasis> will be scheduled in.</para>
</listitem><listitem><para>If the caller operates on itself, it lowers its priority below that of other threads in the system, and the caller is preemptible, the thread of highest priority will be scheduled in.</para>
</listitem></itemizedlist>
</para>
<para>Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the highest priority.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread whose priority is to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>New priority.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Changing the priority of a thread currently involved in mutex priority inheritance may result in undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="713" column="7" declfile="include/kernel.h" declline="713" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1gad887f16c1dd6f3247682a83beb22d1ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_deadline_set</definition>
        <argsstring>(k_tid_t thread, int deadline)</argsstring>
        <name>k_thread_deadline_set</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deadline</declname>
        </param>
        <briefdescription>
<para>Set deadline expiration time for scheduler. </para>
        </briefdescription>
        <detaileddescription>
<para>This sets the &quot;deadline&quot; expiration as a time delta from the current time, in the same units used by <ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref>. The scheduler (when deadline scheduling is enabled) will choose the next expiring thread when selecting between threads at the same static priority. Threads at different priorities will be scheduled according to their static priority.</para>
<para><simplesect kind="note"><para>Deadlines are stored internally using 32 bit unsigned integers. The number of cycles between the &quot;first&quot; deadline in the scheduler queue and the &quot;last&quot; deadline must be less than 2^31 (i.e a signed non-negative quantity). Failure to adhere to this rule may result in scheduled threads running in an incorrect deadline order.</para>
</simplesect>
<simplesect kind="note"><para>Despite the API naming, the scheduler makes no guarantees the the thread WILL be scheduled within that deadline, nor does it take extra metadata (like e.g. the &quot;runtime&quot; and &quot;period&quot; parameters in Linux sched_setattr()) that allows the kernel to validate the scheduling for achievability. Such features could be implemented above this call, which is simply input to the priority selection logic.</para>
</simplesect>
<simplesect kind="note"><para>You should enable <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SCHED_DEADLINE` </verbatim> in your project configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>A thread on which to set the deadline </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>A time delta, in cycle units </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="749" column="7" declfile="include/kernel.h" declline="749" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga80b9c58df6600c7e79f16756c128f44c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_cpu_mask_clear</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_cpu_mask_clear</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Sets all CPU enable masks to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>After this returns, the thread will no longer be schedulable on any CPUs. The thread must not be currently runnable.</para>
<para><simplesect kind="note"><para>You should enable <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SCHED_DEADLINE` </verbatim> in your project configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to operate upon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="765" column="5" declfile="include/kernel.h" declline="765" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1gaedcfeb0964ae72611791241580b2119d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_cpu_mask_enable_all</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_cpu_mask_enable_all</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Sets all CPU enable masks to one. </para>
        </briefdescription>
        <detaileddescription>
<para>After this returns, the thread will be schedulable on any CPU. The thread must not be currently runnable.</para>
<para><simplesect kind="note"><para>You should enable <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SCHED_DEADLINE` </verbatim> in your project configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to operate upon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="779" column="5" declfile="include/kernel.h" declline="779" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga306587604a7496db8059bd395fd90fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_cpu_mask_enable</definition>
        <argsstring>(k_tid_t thread, int cpu)</argsstring>
        <name>k_thread_cpu_mask_enable</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Enable thread to run on specified CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>The thread must not be currently runnable.</para>
<para><simplesect kind="note"><para>You should enable <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SCHED_DEADLINE` </verbatim> in your project configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to operate upon </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="793" column="5" declfile="include/kernel.h" declline="793" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga89e6c07ac112da75b2ef115d1a557d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_cpu_mask_disable</definition>
        <argsstring>(k_tid_t thread, int cpu)</argsstring>
        <name>k_thread_cpu_mask_disable</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Prevent thread to run on specified CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>The thread must not be currently runnable.</para>
<para><simplesect kind="note"><para>You should enable <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SCHED_DEADLINE` </verbatim> in your project configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to operate upon </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="807" column="5" declfile="include/kernel.h" declline="807" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_suspend</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_suspend</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Suspend a thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine prevents the kernel scheduler from making <emphasis>thread</emphasis> the current thread. All other internal operations on <emphasis>thread</emphasis> are still performed; for example, kernel objects it is waiting on are still handed to it. Note that any existing timeouts (e.g. <ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep()</ref>, or a timeout argument to <ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take()</ref> et. al.) will be canceled. On resume, the thread will begin running immediately and return from the blocked call.</para>
<para>If <emphasis>thread</emphasis> is already suspended, the routine has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread to suspend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="825" column="7" declfile="include/kernel.h" declline="825" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_resume</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_resume</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Resume a suspended thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows the kernel scheduler to make <emphasis>thread</emphasis> the current thread, when it is next eligible for that role.</para>
<para>If <emphasis>thread</emphasis> is not currently suspended, the routine has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread to resume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="837" column="7" declfile="include/kernel.h" declline="837" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga877c1bfeffbf8f097d1656f9e10a66e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sched_time_slice_set</definition>
        <argsstring>(int32_t slice, int prio)</argsstring>
        <name>k_sched_time_slice_set</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>slice</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Set time-slicing period and scope. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine specifies how the scheduler will perform time slicing of preemptible threads.</para>
<para>To enable time slicing, <emphasis>slice</emphasis> must be non-zero. The scheduler ensures that no thread runs for more than the specified time limit before other threads of that priority are given a chance to execute. Any thread whose priority is higher than <emphasis>prio</emphasis> is exempted, and may execute as long as desired without being preempted due to time slicing.</para>
<para>Time slicing only limits the maximum amount of time a thread may continuously execute. Once the scheduler selects a thread for execution, there is no minimum guaranteed time the thread will execute before threads of greater or equal priority are scheduled.</para>
<para>When the current thread is the only one of that priority eligible for execution, this routine has no effect; the thread is immediately rescheduled after the slice period expires.</para>
<para>To disable timeslicing, set both <emphasis>slice</emphasis> and <emphasis>prio</emphasis> to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slice</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time slice length (in milliseconds). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Highest thread priority level eligible for time slicing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="865" column="13" declfile="include/kernel.h" declline="865" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__isr__apis_1ga8482b0dd2283d12677a9ebe321667d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_is_in_isr</definition>
        <argsstring>(void)</argsstring>
        <name>k_is_in_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if code is running at interrupt level. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows the caller to customize its actions, depending on whether it is a thread or an ISR.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="return"><para>false if invoked by a thread. </para>
</simplesect>
<simplesect kind="return"><para>true if invoked by an ISR. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="885" column="13" declfile="include/kernel.h" declline="885" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_is_preempt_thread</definition>
        <argsstring>(void)</argsstring>
        <name>k_is_preempt_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if code is running in a preemptible thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows the caller to customize its actions, depending on whether it can be preempted by another thread. The routine returns a &apos;true&apos; value if all of the following conditions are met:</para>
<para><itemizedlist>
<listitem><para>The code is running in a thread, not at ISR.</para>
</listitem><listitem><para>The thread&apos;s priority is in the preemptible range.</para>
</listitem><listitem><para>The thread has not locked the scheduler.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="return"><para>0 if invoked by an ISR or by a cooperative thread. </para>
</simplesect>
<simplesect kind="return"><para>Non-zero if invoked by a preemptible thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="903" column="6" declfile="include/kernel.h" declline="903" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__isr__apis_1gae74e5de996276df767b96d4b50fa47ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool k_is_pre_kernel</definition>
        <argsstring>(void)</argsstring>
        <name>k_is_pre_kernel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether startup is in the before-main-task phase. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows the caller to customize its actions, depending on whether it being invoked before the kernel is fully active.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="return"><para>true if invoked before post-kernel initialization </para>
</simplesect>
<simplesect kind="return"><para>false if invoked during/after post-kernel initialization </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="916" column="20" bodyfile="include/kernel.h" bodystart="916" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sched_lock</definition>
        <argsstring>(void)</argsstring>
        <name>k_sched_lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the scheduler. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine prevents the current thread from being preempted by another thread by instructing the scheduler to treat it as a cooperative thread. If the thread subsequently performs an operation that makes it unready, it will be context switched out in the normal manner. When the thread again becomes the current thread, its non-preemptible status is maintained.</para>
<para>This routine can be called recursively.</para>
<para><simplesect kind="note"><para><ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref> and <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> should normally be used when the operation being performed can be safely interrupted by ISRs. However, if the amount of processing involved is very small, better performance may be obtained by using <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref> and <ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="948" column="13" declfile="include/kernel.h" declline="948" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sched_unlock</definition>
        <argsstring>(void)</argsstring>
        <name>k_sched_unlock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlock the scheduler. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reverses the effect of a previous call to <ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref>. A thread must call the routine once for each time it called <ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref> before the thread becomes preemptible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="957" column="13" declfile="include/kernel.h" declline="957" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga4834d9b81ed60c00eee77b0d4f8ab9e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_thread_custom_data_set</definition>
        <argsstring>(void *value)</argsstring>
        <name>k_thread_custom_data_set</name>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set current thread&apos;s custom data. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sets the custom data for the current thread to @ value.</para>
<para>Custom data is not used by the kernel itself, and is freely available for a thread to use as it sees fit. It can be used as a framework upon which to build thread-local storage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New custom data value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="971" column="7" declfile="include/kernel.h" declline="971" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga19af063cff7b306ba28062996922740d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_thread_custom_data_get</definition>
        <argsstring>(void)</argsstring>
        <name>k_thread_custom_data_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get current thread&apos;s custom data. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the custom data for the current thread.</para>
<para><simplesect kind="return"><para>Current custom data value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="980" column="7" declfile="include/kernel.h" declline="980" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_name_set</definition>
        <argsstring>(k_tid_t thread, const char *str)</argsstring>
        <name>k_thread_name_set</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Set current thread name. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the name of the thread to be used when <verbatim>embed:rst:inline :kconfig:option:`CONFIG_THREAD_MONITOR` </verbatim> is enabled for tracing and debugging.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to set name, or NULL to set the current thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Name string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory access error with supplied string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread name configuration option not enabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread name too long </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="995" column="6" declfile="include/kernel.h" declline="995" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1gadebf45da56dee393164569742459dc0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * k_thread_name_get</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_name_get</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Get thread name. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the name of a thread</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Thread</parametername>
</parameternamelist>
<parameterdescription>
<para>name, or NULL if configuration not enabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1005" column="12" declfile="include/kernel.h" declline="1005" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_name_copy</definition>
        <argsstring>(k_tid_t thread, char *buf, size_t size)</argsstring>
        <name>k_thread_name_copy</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Copy the thread name into a supplied buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to obtain name information </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer too small </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory access error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread name feature not enabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1018" column="6" declfile="include/kernel.h" declline="1018" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__thread__apis_1gae36c37d54522fbf8d9a34b93991e51ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * k_thread_state_str</definition>
        <argsstring>(k_tid_t thread_id)</argsstring>
        <name>k_thread_state_str</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Get thread state string. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the human friendly thread state string</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Thread</parametername>
</parameternamelist>
<parameterdescription>
<para>state string, empty if no state flag is set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1029" column="12" declfile="include/kernel.h" declline="1029" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_init</definition>
        <argsstring>(struct k_timer *timer, k_timer_expiry_t expiry_fn, k_timer_stop_t stop_fn)</argsstring>
        <name>k_timer_init</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <param>
          <type><ref refid="group__timer__apis_1ga37bcd42a457855a68b74570c979ababa" kindref="member">k_timer_expiry_t</ref></type>
          <declname>expiry_fn</declname>
        </param>
        <param>
          <type><ref refid="group__timer__apis_1ga16fbd44c08a26c4fdeb7f542f2a03a15" kindref="member">k_timer_stop_t</ref></type>
          <declname>stop_fn</declname>
        </param>
        <briefdescription>
<para>Initialize a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a timer, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time the timer expires. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke if the timer is stopped while running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1346" column="13" declfile="include/kernel.h" declline="1346" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_start</definition>
        <argsstring>(struct k_timer *timer, k_timeout_t duration, k_timeout_t period)</argsstring>
        <name>k_timer_start</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>duration</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Start a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine starts a timer, and resets its status to zero. The timer begins counting down using the specified duration and period values.</para>
<para>Attempting to start a timer that is already running is permitted. The timer&apos;s status is reset to zero and the timer begins counting down using the new duration and period values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial timer duration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer period. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1364" column="7" declfile="include/kernel.h" declline="1364" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_stop</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_stop</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Stop a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine stops a running timer prematurely. The timer&apos;s stop function, if one exists, is invoked by the caller.</para>
<para>Attempting to stop a timer that is not running is permitted, but has no effect on the timer.</para>
<para><simplesect kind="note"><para>The stop handler has to be callable from ISRs if <emphasis>k_timer_stop</emphasis> is to be called from ISRs.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1383" column="7" declfile="include/kernel.h" declline="1383" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_timer_status_get</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_status_get</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Read timer status. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads the timer&apos;s status, which indicates the number of times it has expired since its status was last read.</para>
<para>Calling this routine resets the timer&apos;s status to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1397" column="11" declfile="include/kernel.h" declline="1397" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_timer_status_sync</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_status_sync</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Synchronize thread to timer expiration. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine blocks the calling thread until the timer&apos;s status is non-zero (indicating that it has expired at least once since it was last examined) or the timer is stopped. If the timer status is already non-zero, or the timer is already stopped, the caller continues without waiting.</para>
<para>Calling this routine resets the timer&apos;s status to zero.</para>
<para>This routine must not be used by interrupt handlers, since they are not allowed to block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1416" column="11" declfile="include/kernel.h" declline="1416" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga022b4cf5c8d0ee21b6a3b04fd425533f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>k_ticks_t k_timer_expires_ticks</definition>
        <argsstring>(const struct k_timer *timer)</argsstring>
        <name>k_timer_expires_ticks</name>
        <param>
          <type>const struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Get next expiration time of a timer, in system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the future system uptime reached at the next time of expiration of the timer, in units of system ticks. If the timer is not running, current system time is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Uptime of expiration, in ticks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1430" column="12" declfile="include/kernel.h" declline="1430" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>k_ticks_t k_timer_remaining_ticks</definition>
        <argsstring>(const struct k_timer *timer)</argsstring>
        <name>k_timer_remaining_ticks</name>
        <param>
          <type>const struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Get time remaining before a timer next expires, in system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine computes the time remaining before a running timer next expires, in units of system ticks. If the timer is not running, it returns zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1445" column="12" declfile="include/kernel.h" declline="1445" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_timer_remaining_get</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_remaining_get</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Get time remaining before a timer next expires. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine computes the (approximate) time remaining before a running timer next expires. If the timer is not running, it returns zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Remaining time (in milliseconds). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1463" column="24" bodyfile="include/kernel.h" bodystart="1463" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_user_data_set</definition>
        <argsstring>(struct k_timer *timer, void *user_data)</argsstring>
        <name>k_timer_user_data_set</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Associate user-specific data with a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine records the <emphasis>user_data</emphasis> with the <emphasis>timer</emphasis>, to be retrieved later.</para>
<para>It can be used e.g. in a timer handler shared across multiple subsystems to retrieve data specific to the subsystem this timer is associated with.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to associate with the timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1482" column="7" declfile="include/kernel.h" declline="1482" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_timer_user_data_get</definition>
        <argsstring>(const struct k_timer *timer)</argsstring>
        <name>k_timer_user_data_get</name>
        <param>
          <type>const struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Retrieve the user-specific data from a timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The user data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1500" column="7" declfile="include/kernel.h" declline="1500" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__apis_1ga8f143af2ee4ad42d9f7817ef161cbd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref></type>
        <definition>int64_t k_uptime_ticks</definition>
        <argsstring>(void)</argsstring>
        <name>k_uptime_ticks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get system uptime, in system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the elapsed time since the system booted, in ticks (c.f. <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` </verbatim>), which is the fundamental unit of resolution of kernel timekeeping.</para>
<para><simplesect kind="return"><para>Current uptime in ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1524" column="10" declfile="include/kernel.h" declline="1524" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref></type>
        <definition>static int64_t k_uptime_get</definition>
        <argsstring>(void)</argsstring>
        <name>k_uptime_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get system uptime. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the elapsed time since the system booted, in milliseconds.</para>
<para><simplesect kind="note"><para>While this function returns time in milliseconds, it does not mean it has millisecond resolution. The actual resolution depends on <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` </verbatim> config option.</para>
</simplesect>
<simplesect kind="return"><para>Current uptime in milliseconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1539" column="23" bodyfile="include/kernel.h" bodystart="1539" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_uptime_get_32</definition>
        <argsstring>(void)</argsstring>
        <name>k_uptime_get_32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get system uptime (32-bit version). </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the lower 32 bits of the system uptime in milliseconds.</para>
<para>Because correct conversion requires full precision of the system clock there is no benefit to using this over <ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get()</ref> unless you know the application will never run long enough for the system clock to approach 2^32 ticks. Calls to this function may involve interrupt blocking and 64-bit math.</para>
<para><simplesect kind="note"><para>While this function returns time in milliseconds, it does not mean it has millisecond resolution. The actual resolution depends on <verbatim>embed:rst:inline :kconfig:option:`CONFIG_SYS_CLOCK_TICKS_PER_SEC` </verbatim> config option</para>
</simplesect>
<simplesect kind="return"><para>The low 32 bits of the current uptime, in milliseconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1563" column="24" bodyfile="include/kernel.h" bodystart="1563" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__apis_1gad748b2fe83b36884dc087b4af367de80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref></type>
        <definition>static int64_t k_uptime_delta</definition>
        <argsstring>(int64_t *reftime)</argsstring>
        <name>k_uptime_delta</name>
        <param>
          <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref> *</type>
          <declname>reftime</declname>
        </param>
        <briefdescription>
<para>Get elapsed time. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine computes the elapsed time between the current system uptime and an earlier reference time, in milliseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reftime</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a reference time, which is updated to the current uptime upon return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Elapsed time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1579" column="23" bodyfile="include/kernel.h" bodystart="1579" bodyend="1588"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__apis_1ga208687de625e0036558343b4e66143d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_cycle_get_32</definition>
        <argsstring>(void)</argsstring>
        <name>k_cycle_get_32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read the hardware clock. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the current time, as measured by the system&apos;s hardware clock.</para>
<para><simplesect kind="return"><para>Current hardware clock up-counter (in cycles). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1598" column="24" bodyfile="include/kernel.h" bodystart="1598" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__apis_1gae09f509d02bf75a7b45d2800d823bb3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t k_cycle_get_64</definition>
        <argsstring>(void)</argsstring>
        <name>k_cycle_get_64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read the 64-bit hardware clock. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the current time in 64-bits, as measured by the system&apos;s hardware clock, if available.</para>
<para><simplesect kind="see"><para>CONFIG_TIMER_HAS_64BIT_CYCLE_COUNTER</para>
</simplesect>
<simplesect kind="return"><para>Current hardware clock up-counter (in cycles). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1613" column="24" bodyfile="include/kernel.h" bodystart="1613" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_init</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_init</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Initialize a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a queue object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1669" column="7" declfile="include/kernel.h" declline="1669" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_cancel_wait</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_cancel_wait</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Cancel waiting on a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine causes first thread pending on <emphasis>queue</emphasis>, if any, to return from <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> call with NULL value (as if timeout expired). If the queue is being waited on by <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>, it will return with -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> will return NULL).</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1684" column="7" declfile="include/kernel.h" declline="1684" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_append</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_append</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Append an element to the end of a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine appends a data item to <emphasis>queue</emphasis>. A queue data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1698" column="13" declfile="include/kernel.h" declline="1698" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_queue_alloc_append</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_alloc_append</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Append an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine appends a data item to <emphasis>queue</emphasis>. There is an implicit memory allocation to create an additional temporary bookkeeping data structure from the calling thread&apos;s resource pool, which is automatically freed when the item is removed. The data itself is not copied.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t sufficient RAM in the caller&apos;s resource pool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1716" column="10" declfile="include/kernel.h" declline="1716" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga8ce013d8a037d4be5078797e0050e9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_prepend</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_prepend</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepend an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine prepends a data item to <emphasis>queue</emphasis>. A queue data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1730" column="13" declfile="include/kernel.h" declline="1730" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_queue_alloc_prepend</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_alloc_prepend</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepend an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine prepends a data item to <emphasis>queue</emphasis>. There is an implicit memory allocation to create an additional temporary bookkeeping data structure from the calling thread&apos;s resource pool, which is automatically freed when the item is removed. The data itself is not copied.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t sufficient RAM in the caller&apos;s resource pool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1748" column="10" declfile="include/kernel.h" declline="1748" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_insert</definition>
        <argsstring>(struct k_queue *queue, void *prev, void *data)</argsstring>
        <name>k_queue_insert</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine inserts a data item to <emphasis>queue</emphasis> after previous item. A queue data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the previous data item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1763" column="13" declfile="include/kernel.h" declline="1763" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_queue_append_list</definition>
        <argsstring>(struct k_queue *queue, void *head, void *tail)</argsstring>
        <name>k_queue_append_list</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
<para>Atomically append a list of elements to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>queue</emphasis> in one operation. The data items must be in a singly-linked list, with the first word in each data item pointing to the next data item; the list must be NULL-terminated.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to first node in singly-linked list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to last node in singly-linked list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>on invalid supplied data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1783" column="12" declfile="include/kernel.h" declline="1783" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_queue_merge_slist</definition>
        <argsstring>(struct k_queue *queue, sys_slist_t *list)</argsstring>
        <name>k_queue_merge_slist</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Atomically add a list of elements to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>queue</emphasis> in one operation. The data items must be in a singly-linked list implemented using a sys_slist_t object. Upon completion, the original list is empty.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sys_slist_t object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>on invalid data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1800" column="12" declfile="include/kernel.h" declline="1800" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_queue_get</definition>
        <argsstring>(struct k_queue *queue, k_timeout_t timeout)</argsstring>
        <name>k_queue_get</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get an element from a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes first data item from <emphasis>queue</emphasis>. The first word of the data item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to obtain a data item or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the data item if successful; NULL if returned without waiting, or waiting period timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1820" column="7" declfile="include/kernel.h" declline="1820" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_queue_remove</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_remove</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Remove an element from a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes data item from <emphasis>queue</emphasis>. The first word of the data item is reserved for the kernel&apos;s use. Removing elements from k_queue rely on sys_slist_find_and_remove which is not a constant time operation.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if data item was removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1838" column="6" declfile="include/kernel.h" declline="1838" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_queue_unique_append</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_unique_append</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Append an element to a queue only if it&apos;s not present already. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine appends data item to <emphasis>queue</emphasis>. The first word of the data item is reserved for the kernel&apos;s use. Appending elements to k_queue relies on sys_slist_is_node_in_list which is not a constant time operation.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if data item was added, false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1854" column="6" declfile="include/kernel.h" declline="1854" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_queue_is_empty</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_is_empty</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Query a queue to see if it has data available. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the data might be already gone by the time this function returns if other threads are also trying to read from the queue.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the queue is empty. </para>
</simplesect>
<simplesect kind="return"><para>0 if data is available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1869" column="6" declfile="include/kernel.h" declline="1869" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_queue_peek_head</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_peek_head</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Peek element at the head of queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the head of queue without removing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Head element, or NULL if queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1885" column="7" declfile="include/kernel.h" declline="1885" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_queue_peek_tail</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_peek_tail</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Peek element at the tail of queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the tail of queue without removing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tail element, or NULL if queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1896" column="7" declfile="include/kernel.h" declline="1896" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__futex__apis_1ga596bfa265f88567ad9e80fd38cd433d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_futex_wait</definition>
        <argsstring>(struct k_futex *futex, int expected, k_timeout_t timeout)</argsstring>
        <name>k_futex_wait</name>
        <param>
          <type>struct <ref refid="structk__futex" kindref="compound">k_futex</ref> *</type>
          <declname>futex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expected</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Pend the current thread on a futex. </para>
        </briefdescription>
        <detaileddescription>
<para>Tests that the supplied futex contains the expected value, and if so, goes to sleep until some other thread calls <ref refid="group__futex__apis_1ga62de1aeb7c5c273aed20d0e05336d7a0" kindref="member">k_futex_wake()</ref> on it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>futex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the futex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected value of the futex, if it is different the caller will not wait on it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period on the futex, or one of the special values K_NO_WAIT or K_FOREVER. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not have read access to futex address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>If the futex value did not match the expected parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Futex parameter address not recognized by the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ETIMEDOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread woke up due to timeout and not a futex wakeup. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the caller went to sleep and was woken up. The caller should check the futex&apos;s value on wakeup to determine if it needs to block again. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1969" column="6" declfile="include/kernel.h" declline="1969" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__futex__apis_1ga62de1aeb7c5c273aed20d0e05336d7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_futex_wake</definition>
        <argsstring>(struct k_futex *futex, bool wake_all)</argsstring>
        <name>k_futex_wake</name>
        <param>
          <type>struct <ref refid="structk__futex" kindref="compound">k_futex</ref> *</type>
          <declname>futex</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>wake_all</declname>
        </param>
        <briefdescription>
<para>Wake one/all threads pending on a futex. </para>
        </briefdescription>
        <detaileddescription>
<para>Wake up the highest priority thread pending on the supplied futex, or wakeup all the threads pending on the supplied futex, and the behavior depends on wake_all.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>futex</parametername>
</parameternamelist>
<parameterdescription>
<para>Futex to wake up pending threads. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wake_all</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, wake up all pending threads; If false, wakeup the highest priority thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not have access to the futex address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Futex parameter address not recognized by the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of threads that were woken up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1986" column="6" declfile="include/kernel.h" declline="1986" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1gacf803590b39b095056f2b1c5090c4019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_event_init</definition>
        <argsstring>(struct k_event *event)</argsstring>
        <name>k_event_init</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Initialize an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes an event object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2021" column="7" declfile="include/kernel.h" declline="2021" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1gaa5587377200d81deb33c5e5ca72aecc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_event_post</definition>
        <argsstring>(struct k_event *event, uint32_t events)</argsstring>
        <name>k_event_post</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Post one or more events to an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine posts one or more events to an event object. All tasks waiting on the event object <emphasis>event</emphasis> whose waiting conditions become met by this posting immediately unpend.</para>
<para>Posting differs from setting in that posted events are merged together with the current set of events tracked by the event object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of events to post to <emphasis>event</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2036" column="7" declfile="include/kernel.h" declline="2036" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1ga4b534f62467fe537d1f06e04705122af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_event_set</definition>
        <argsstring>(struct k_event *event, uint32_t events)</argsstring>
        <name>k_event_set</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Set the events in an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sets the events stored in event object to the specified value. All tasks waiting on the event object <emphasis>event</emphasis> whose waiting conditions become met by this immediately unpend.</para>
<para>Setting differs from posting in that set events replace the current set of events tracked by the event object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of events to post to <emphasis>event</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2051" column="7" declfile="include/kernel.h" declline="2051" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1ga0f83f5f034e13bab65149fb90b87a753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_event_wait</definition>
        <argsstring>(struct k_event *event, uint32_t events, bool reset, k_timeout_t timeout)</argsstring>
        <name>k_event_wait</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>reset</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for any of the specified events. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine waits on event object <emphasis>event</emphasis> until any of the specified events have been delivered to the event object, or the maximum wait time <emphasis>timeout</emphasis> has expired. A thread may wait on up to 32 distinctly numbered events that are expressed as bits in a single 32-bit word.</para>
<para><simplesect kind="note"><para>The caller must be careful when resetting if there are multiple threads waiting for the event object <emphasis>event</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of desired events on which to wait </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, clear the set of events tracked by the event object before waiting. If false, do not clear the events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the desired set of events or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>of matching events upon success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if matching events were not received within the specified time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2074" column="11" declfile="include/kernel.h" declline="2074" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1gaddd60a99de5ac3d84f643c9433b744c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_event_wait_all</definition>
        <argsstring>(struct k_event *event, uint32_t events, bool reset, k_timeout_t timeout)</argsstring>
        <name>k_event_wait_all</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>reset</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for any of the specified events. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine waits on event object <emphasis>event</emphasis> until all of the specified events have been delivered to the event object, or the maximum wait time <emphasis>timeout</emphasis> has expired. A thread may wait on up to 32 distinctly numbered events that are expressed as bits in a single 32-bit word.</para>
<para><simplesect kind="note"><para>The caller must be careful when resetting if there are multiple threads waiting for the event object <emphasis>event</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of desired events on which to wait </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, clear the set of events tracked by the event object before waiting. If false, do not clear the events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the desired set of events or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>of matching events upon success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if matching events were not received within the specified time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2098" column="11" declfile="include/kernel.h" declline="2098" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_stack_init</definition>
        <argsstring>(struct k_stack *stack, stack_data_t *buffer, uint32_t num_entries)</argsstring>
        <name>k_stack_init</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>stack_data_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_entries</declname>
        </param>
        <briefdescription>
<para>Initialize a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a stack object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of array used to hold stacked values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of values that can be stacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2514" column="6" declfile="include/kernel.h" declline="2514" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_stack_alloc_init</definition>
        <argsstring>(struct k_stack *stack, uint32_t num_entries)</argsstring>
        <name>k_stack_alloc_init</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_entries</declname>
        </param>
        <briefdescription>
<para>Initialize a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a stack object, prior to its first use. Internal buffers will be allocated from the calling thread&apos;s resource pool. This memory will be released if <ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup()</ref> is called, or userspace is enabled and the stack object loses all references to it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of values that can be stacked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-ENOMEM if memory couldn&apos;t be allocated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2532" column="10" declfile="include/kernel.h" declline="2532" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_stack_cleanup</definition>
        <argsstring>(struct k_stack *stack)</argsstring>
        <name>k_stack_cleanup</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Release a stack&apos;s allocated buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>If a stack object was given a dynamically allocated buffer via <ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref>, this will free it. This function does nothing if the buffer wasn&apos;t dynamically allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>when object is still in use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2546" column="5" declfile="include/kernel.h" declline="2546" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_stack_push</definition>
        <argsstring>(struct k_stack *stack, stack_data_t data)</argsstring>
        <name>k_stack_push</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>stack_data_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Push an element onto a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a stack_data_t value <emphasis>data</emphasis> to <emphasis>stack</emphasis>.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to push onto the stack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if stack is full </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2561" column="6" declfile="include/kernel.h" declline="2561" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_stack_pop</definition>
        <argsstring>(struct k_stack *stack, stack_data_t *data, k_timeout_t timeout)</argsstring>
        <name>k_stack_pop</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>stack_data_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Pop an element from a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes a stack_data_t value from <emphasis>stack</emphasis> in a &quot;last in,
first out&quot; manner and stores the value in <emphasis>data</emphasis>.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the value popped from the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to obtain a value, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Element popped from stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2583" column="6" declfile="include/kernel.h" declline="2583" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mutex__apis_1ga56b64952fb8b78b00268a21c28b41480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mutex_init</definition>
        <argsstring>(struct k_mutex *mutex)</argsstring>
        <name>k_mutex_init</name>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Initialize a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a mutex object, prior to its first use.</para>
<para>Upon completion, the mutex is available and does not have an owner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex object created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2684" column="6" declfile="include/kernel.h" declline="2684" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mutex__apis_1ga850549358645249c285669baa49c33b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mutex_lock</definition>
        <argsstring>(struct k_mutex *mutex, k_timeout_t timeout)</argsstring>
        <name>k_mutex_lock</name>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Lock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine locks <emphasis>mutex</emphasis>. If the mutex is locked by another thread, the calling thread waits until the mutex becomes available or until a timeout occurs.</para>
<para>A thread is permitted to lock a mutex it has already locked. The operation completes immediately and the lock count is increased by 1.</para>
<para>Mutexes may not be locked in ISRs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to lock the mutex, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2708" column="6" declfile="include/kernel.h" declline="2708" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mutex_unlock</definition>
        <argsstring>(struct k_mutex *mutex)</argsstring>
        <name>k_mutex_unlock</name>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine unlocks <emphasis>mutex</emphasis>. The mutex must already be locked by the calling thread.</para>
<para>The mutex cannot be claimed by another thread until it has been unlocked by the calling thread as many times as it was previously locked by that thread.</para>
<para>Mutexes may not be unlocked in ISRs, as mutexes must only be manipulated in thread context due to ownership and priority inheritance semantics.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex unlocked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>The current thread does not own the mutex </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex is not locked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2730" column="6" declfile="include/kernel.h" declline="2730" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__condvar__apis_1gac9b497c56cc4642965afa6c0c6d7ecfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_init</definition>
        <argsstring>(struct k_condvar *condvar)</argsstring>
        <name>k_condvar_init</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <briefdescription>
<para>Initialize a condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition variable created successfully </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2758" column="6" declfile="include/kernel.h" declline="2758" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__condvar__apis_1ga0376a8f7dc6e4f1e1eed55940f43015b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_signal</definition>
        <argsstring>(struct k_condvar *condvar)</argsstring>
        <name>k_condvar_signal</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <briefdescription>
<para>Signals one thread that is pending on the condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2766" column="6" declfile="include/kernel.h" declline="2766" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__condvar__apis_1gad2e46a7b9e1bc934fd1f5cb38dde40d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_broadcast</definition>
        <argsstring>(struct k_condvar *condvar)</argsstring>
        <name>k_condvar_broadcast</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <briefdescription>
<para>Unblock all threads that are pending on the condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer with number of woken threads on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2775" column="6" declfile="include/kernel.h" declline="2775" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__condvar__apis_1gab2e1d05db4f954755f430ca894e44dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_wait</definition>
        <argsstring>(struct k_condvar *condvar, struct k_mutex *mutex, k_timeout_t timeout)</argsstring>
        <name>k_condvar_wait</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits on the condition variable releasing the mutex lock. </para>
        </briefdescription>
        <detaileddescription>
<para>Automically releases the currently owned mutex, blocks the current thread waiting on the condition variable specified by <emphasis>condvar</emphasis>, and finally acquires the mutex again.</para>
<para>The waiting thread unblocks only after another thread calls k_condvar_signal, or k_condvar_broadcast with the same condition variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the condition variable or one of the special values K_NO_WAIT and K_FOREVER. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2794" column="6" declfile="include/kernel.h" declline="2794" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_sem_init</definition>
        <argsstring>(struct k_sem *sem, unsigned int initial_count, unsigned int limit)</argsstring>
        <name>k_sem_init</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>initial_count</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Initialize a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a semaphore object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial semaphore count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum permitted semaphore count.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__semaphore__apis_1ga689359a77a0cebe737ef644c188f7e57" kindref="member">K_SEM_MAX_LIMIT</ref></para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore created successfully </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2872" column="6" declfile="include/kernel.h" declline="2872" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_sem_take</definition>
        <argsstring>(struct k_sem *sem, k_timeout_t timeout)</argsstring>
        <name>k_sem_take</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Take a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine takes <emphasis>sem</emphasis>.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to take the semaphore, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out, or the semaphore was reset during the waiting period. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2893" column="6" declfile="include/kernel.h" declline="2893" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sem_give</definition>
        <argsstring>(struct k_sem *sem)</argsstring>
        <name>k_sem_give</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Give a semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gives <emphasis>sem</emphasis>, unless the semaphore is already at its maximum permitted count.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2905" column="7" declfile="include/kernel.h" declline="2905" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1ga1bd12d8d8c1b9c6be9b665d0fefe5562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sem_reset</definition>
        <argsstring>(struct k_sem *sem)</argsstring>
        <name>k_sem_reset</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Resets a semaphore&apos;s count to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sets the count of <emphasis>sem</emphasis> to zero. Any outstanding semaphore takes will be aborted with -EAGAIN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2916" column="7" declfile="include/kernel.h" declline="2916" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__semaphore__apis_1ga58843b581e170a1811fc38eecbfd01f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int k_sem_count_get</definition>
        <argsstring>(struct k_sem *sem)</argsstring>
        <name>k_sem_count_get</name>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Get a semaphore&apos;s count. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the current count of <emphasis>sem</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the semaphore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current semaphore count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2927" column="15" declfile="include/kernel.h" declline="2927" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gaf20080884a2893d39cd8e862b34a2a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_work_init</definition>
        <argsstring>(struct k_work *work, k_work_handler_t handler)</argsstring>
        <name>k_work_init</name>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize a (non-delayable) work structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be invoked before submitting a work structure for the first time. It need not be invoked again on the same work structure. It can be re-invoked to change the associated handler, but this must be done when the work item is idle.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>the work structure to be initialized.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to be invoked by the work item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2995" column="6" declfile="include/kernel.h" declline="2995" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_busy_get</definition>
        <argsstring>(const struct k_work *work)</argsstring>
        <name>k_work_busy_get</name>
        <param>
          <type>const struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Busy state flags from the work item. </para>
        </briefdescription>
        <detaileddescription>
<para>A zero return value indicates the work item appears to be idle.</para>
<para><simplesect kind="note"><para>This is a live snapshot of state, which may change before the result is checked. Use locks where appropriate.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a mask of flags K_WORK_DELAYED, K_WORK_QUEUED, K_WORK_RUNNING, and K_WORK_CANCELING. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3012" column="5" declfile="include/kernel.h" declline="3012" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga0d1d2e1d2ba2e89a560a1bdc5365d9e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool k_work_is_pending</definition>
        <argsstring>(const struct k_work *work)</argsstring>
        <name>k_work_is_pending</name>
        <param>
          <type>const struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Test whether a work item is currently pending. </para>
        </briefdescription>
        <detaileddescription>
<para>Wrapper to determine whether a work item is in a non-idle dstate.</para>
<para><simplesect kind="note"><para>This is a live snapshot of state, which may change before the result is checked. Use locks where appropriate.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if and only if <ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get()</ref> returns a non-zero value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3742" column="20" bodyfile="include/kernel.h" bodystart="3742" bodyend="3745" declfile="include/kernel.h" declline="3027" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_submit_to_queue</definition>
        <argsstring>(struct k_work_q *queue, struct k_work *work)</argsstring>
        <name>k_work_submit_to_queue</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Submit a work item to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work queue on which the item should run. If NULL the queue from the most recent submission will be used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was already submitted to a queue </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was not submitted and has been queued to <computeroutput>queue</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was running and has been queued to the queue that was running it </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>if work submission was rejected because the work item is cancelling; or</para>
</listitem><listitem><para><computeroutput>queue</computeroutput> is draining; or</para>
</listitem><listitem><para><computeroutput>queue</computeroutput> is plugged. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>queue</computeroutput> is null and the work item has never been run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>queue</computeroutput> has not been started. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3049" column="5" declfile="include/kernel.h" declline="3049" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gace61b59575093d7442f39ccb7be686d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_submit</definition>
        <argsstring>(struct k_work *work)</argsstring>
        <name>k_work_submit</name>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Submit a work item to the system queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>as with <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3060" column="12" declfile="include/kernel.h" declline="3060" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gabd1cda459bab538fb2d6dfd84a73b253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_work_flush</definition>
        <argsstring>(struct k_work *work, struct k_work_sync *sync)</argsstring>
        <name>k_work_flush</name>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__work__sync" kindref="compound">k_work_sync</ref> *</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
<para>Wait for last-submitted instance to complete. </para>
        </briefdescription>
        <detaileddescription>
<para>Resubmissions may occur while waiting, including chained submissions (from within the handler).</para>
<para><simplesect kind="note"><para>Be careful of caller and work queue thread relative priority. If this function sleeps it will not return until the work queue thread completes the tasks that allow this thread to resume.</para>
</simplesect>
<simplesect kind="note"><para>Behavior is undefined if this function is invoked on <computeroutput>work</computeroutput> from a work queue running <computeroutput>work</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an opaque item containing state related to the pending cancellation. The object must persist until the call returns, and be accessible from both the caller thread and the work queue thread. The object must not be used for any other flush or cancel operation until this one completes. On architectures with CONFIG_KERNEL_COHERENCE the object must be allocated in coherent memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if call had to wait for completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was already idle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3086" column="6" declfile="include/kernel.h" declline="3086" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga389fe2a8fb20f9bd593cf8d990727078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_cancel</definition>
        <argsstring>(struct k_work *work)</argsstring>
        <name>k_work_cancel</name>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Cancel a work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This attempts to prevent a pending (non-delayable) work item from being processed by removing it from the work queue. If the item is being processed, the work item will continue to be processed, but resubmissions are rejected until cancellation completes.</para>
<para>If this returns zero cancellation is complete, otherwise something (probably a work queue thread) is still referencing the item.</para>
<para>See also <ref refid="group__workqueue__apis_1gab2b05cfe3af08f7d32c3946fa1c808f9" kindref="member">k_work_cancel_sync()</ref>.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get()</ref> status indicating the state of the item after all cancellation steps performed by this call are completed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3108" column="5" declfile="include/kernel.h" declline="3108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gab2b05cfe3af08f7d32c3946fa1c808f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_work_cancel_sync</definition>
        <argsstring>(struct k_work *work, struct k_work_sync *sync)</argsstring>
        <name>k_work_cancel_sync</name>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__work__sync" kindref="compound">k_work_sync</ref> *</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
<para>Cancel a work item and wait for it to complete. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="group__workqueue__apis_1ga389fe2a8fb20f9bd593cf8d990727078" kindref="member">k_work_cancel()</ref> but does not return until cancellation is complete. This can be invoked by a thread after <ref refid="group__workqueue__apis_1ga389fe2a8fb20f9bd593cf8d990727078" kindref="member">k_work_cancel()</ref> to synchronize with a previous cancellation.</para>
<para>On return the work structure will be idle unless something submits it after the cancellation was complete.</para>
<para><simplesect kind="note"><para>Be careful of caller and work queue thread relative priority. If this function sleeps it will not return until the work queue thread completes the tasks that allow this thread to resume.</para>
</simplesect>
<simplesect kind="note"><para>Behavior is undefined if this function is invoked on <computeroutput>work</computeroutput> from a work queue running <computeroutput>work</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an opaque item containing state related to the pending cancellation. The object must persist until the call returns, and be accessible from both the caller thread and the work queue thread. The object must not be used for any other flush or cancel operation until this one completes. On architectures with CONFIG_KERNEL_COHERENCE the object must be allocated in coherent memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was pending (call had to wait for cancellation of a running handler to complete, or scheduled or submitted operations were cancelled); </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3140" column="6" declfile="include/kernel.h" declline="3140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gada77d818ea9e4d07c14a960872ed5492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_work_queue_init</definition>
        <argsstring>(struct k_work_q *queue)</argsstring>
        <name>k_work_queue_init</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Initialize a work queue structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be invoked before starting a work queue structure for the first time. It need not be invoked again on the same work queue structure.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>the queue structure to be initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3151" column="6" declfile="include/kernel.h" declline="3151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gadfc56554f9bfe7b52309d79660188593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_work_queue_start</definition>
        <argsstring>(struct k_work_q *queue, k_thread_stack_t *stack, size_t stack_size, int prio, const struct k_work_queue_config *cfg)</argsstring>
        <name>k_work_queue_start</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stack_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>const struct <ref refid="structk__work__queue__config" kindref="compound">k_work_queue_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Initialize a work queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This configures the work queue thread and starts it running. The function should not be re-invoked on a queue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the queue structure. It must be initialized in zeroed/bss memory or with <ref refid="group__workqueue__apis_1gada77d818ea9e4d07c14a960872ed5492" kindref="member">k_work_queue_init</ref> before use.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the work thread stack area.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the the work thread stack area, in bytes.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>initial thread priority</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>optional additional configuration parameters. Pass <computeroutput>NULL</computeroutput> if not required, to use the defaults documented in <ref refid="structk__work__queue__config" kindref="compound">k_work_queue_config</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3172" column="6" declfile="include/kernel.h" declline="3172" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga0b8b496f7e7bd82d08590a07293e38d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
        <definition>static k_tid_t k_work_queue_thread_get</definition>
        <argsstring>(struct k_work_q *queue)</argsstring>
        <name>k_work_queue_thread_get</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Access the thread that animates a work queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This is necessary to grant a work queue thread access to things the work items it will process are expected to use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the queue structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the thread associated with the work queue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3771" column="23" bodyfile="include/kernel.h" bodystart="3771" bodyend="3774" declfile="include/kernel.h" declline="3185" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga0fefe3e0225ac99b47b250849f6cd863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_queue_drain</definition>
        <argsstring>(struct k_work_q *queue, bool plug)</argsstring>
        <name>k_work_queue_drain</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>plug</declname>
        </param>
        <briefdescription>
<para>Wait until the work queue has drained, optionally plugging it. </para>
        </briefdescription>
        <detaileddescription>
<para>This blocks submission to the work queue except when coming from queue thread, and blocks the caller until no more work items are available in the queue.</para>
<para>If <computeroutput>plug</computeroutput> is true then submission will continue to be blocked after the drain operation completes until <ref refid="group__workqueue__apis_1gaa0463bb79af3ec470f7d3be02052139f" kindref="member">k_work_queue_unplug()</ref> is invoked.</para>
<para>Note that work items that are delayed are not yet associated with their work queue. They must be cancelled externally if a goal is to ensure the work queue remains empty. The <computeroutput>plug</computeroutput> feature can be used to prevent delayed items from being submitted after the drain completes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the queue structure.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plug</parametername>
</parameternamelist>
<parameterdescription>
<para>if true the work queue will continue to block new submissions after all items have drained.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if call had to wait for the drain to complete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if call did not have to wait </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>negative</parametername>
</parameternamelist>
<parameterdescription>
<para>if wait was interrupted or failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3210" column="5" declfile="include/kernel.h" declline="3210" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gaa0463bb79af3ec470f7d3be02052139f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_queue_unplug</definition>
        <argsstring>(struct k_work_q *queue)</argsstring>
        <name>k_work_queue_unplug</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Release a work queue to accept new submissions. </para>
        </briefdescription>
        <detaileddescription>
<para>This releases the block on new submissions placed when <ref refid="group__workqueue__apis_1ga0fefe3e0225ac99b47b250849f6cd863" kindref="member">k_work_queue_drain()</ref> is invoked with the <computeroutput>plug</computeroutput> option enabled. If this is invoked before the drain completes new items may be submitted as soon as the drain completes.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the queue structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successfully unplugged </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>if the work queue was not plugged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3225" column="5" declfile="include/kernel.h" declline="3225" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga2876c5d82fb2340a093bc4d689a55465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_work_init_delayable</definition>
        <argsstring>(struct k_work_delayable *dwork, k_work_handler_t handler)</argsstring>
        <name>k_work_init_delayable</name>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <param>
          <type><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize a delayable work structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be invoked before scheduling a delayable work structure for the first time. It need not be invoked again on the same work structure. It can be re-invoked to change the associated handler, but this must be done when the work item is idle.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>the delayable work structure to be initialized.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to be invoked by the work item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3240" column="6" declfile="include/kernel.h" declline="3240" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gabcb822a03ce7ea9ee1ed046afe31ffca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
        <definition>static struct k_work_delayable * k_work_delayable_from_work</definition>
        <argsstring>(struct k_work *work)</argsstring>
        <name>k_work_delayable_from_work</name>
        <param>
          <type>struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Get the parent delayable work structure from a work pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is necessary when a <computeroutput>k_work_handler_t</computeroutput> function is passed to <ref refid="group__workqueue__apis_1ga17f863c9f6ff2fb41dc0f3b7de4fdf23" kindref="member">k_work_schedule_for_queue()</ref> and the handler needs to access data from the container of the containing <computeroutput><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address passed to the work handler</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the containing <computeroutput><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref></computeroutput> structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3748" column="1" bodyfile="include/kernel.h" bodystart="3748" bodyend="3751" declfile="include/kernel.h" declline="3255" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga1b76969667844f0981d348c9c671bc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_delayable_busy_get</definition>
        <argsstring>(const struct k_work_delayable *dwork)</argsstring>
        <name>k_work_delayable_busy_get</name>
        <param>
          <type>const struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <briefdescription>
<para>Busy state flags from the delayable work item. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="note"><para>This is a live snapshot of state, which may change before the result can be inspected. Use locks where appropriate.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a mask of flags K_WORK_DELAYED, K_WORK_QUEUED, K_WORK_RUNNING, and K_WORK_CANCELING. A zero return value indicates the work item appears to be idle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3270" column="5" declfile="include/kernel.h" declline="3270" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga66e598dbc73f653cbfec03c21168df2e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool k_work_delayable_is_pending</definition>
        <argsstring>(const struct k_work_delayable *dwork)</argsstring>
        <name>k_work_delayable_is_pending</name>
        <param>
          <type>const struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <briefdescription>
<para>Test whether a delayed work item is currently pending. </para>
        </briefdescription>
        <detaileddescription>
<para>Wrapper to determine whether a delayed work item is in a non-idle state.</para>
<para><simplesect kind="note"><para>This is a live snapshot of state, which may change before the result can be inspected. Use locks where appropriate.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if and only if <ref refid="group__workqueue__apis_1ga1b76969667844f0981d348c9c671bc9f" kindref="member">k_work_delayable_busy_get()</ref> returns a non-zero value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3753" column="20" bodyfile="include/kernel.h" bodystart="3753" bodyend="3757" declfile="include/kernel.h" declline="3286" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga1772c37bc62b86180d5cf48fe3037624" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>static k_ticks_t k_work_delayable_expires_get</definition>
        <argsstring>(const struct k_work_delayable *dwork)</argsstring>
        <name>k_work_delayable_expires_get</name>
        <param>
          <type>const struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <briefdescription>
<para>Get the absolute tick count at which a scheduled delayable work will be submitted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is a live snapshot of state, which may change before the result can be inspected. Use locks where appropriate.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the tick count when the timer that will schedule the work item will expire, or the current tick count if the work is not scheduled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3759" column="25" bodyfile="include/kernel.h" bodystart="3759" bodyend="3763" declfile="include/kernel.h" declline="3302" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gabce78598a014f3ed87730fe6a9fe61b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>static k_ticks_t k_work_delayable_remaining_get</definition>
        <argsstring>(const struct k_work_delayable *dwork)</argsstring>
        <name>k_work_delayable_remaining_get</name>
        <param>
          <type>const struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <briefdescription>
<para>Get the number of ticks until a scheduled delayable work will be submitted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is a live snapshot of state, which may change before the result can be inspected. Use locks where appropriate.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of ticks until the timer that will schedule the work item will expire, or zero if the item is not scheduled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3765" column="25" bodyfile="include/kernel.h" bodystart="3765" bodyend="3769" declfile="include/kernel.h" declline="3318" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga17f863c9f6ff2fb41dc0f3b7de4fdf23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_schedule_for_queue</definition>
        <argsstring>(struct k_work_q *queue, struct k_work_delayable *dwork, k_timeout_t delay)</argsstring>
        <name>k_work_schedule_for_queue</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Submit an idle work item to a queue after a delay. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="group__workqueue__apis_1gabf5db091eac19b19a4e12c0cb381f0a8" kindref="member">k_work_reschedule_for_queue()</ref> this is a no-op if the work item is already scheduled or submitted, even if <computeroutput>delay</computeroutput> is <computeroutput>K_NO_WAIT</computeroutput>.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>the queue on which the work item should be submitted after the delay.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to wait before submitting the work item. If <computeroutput>K_NO_WAIT</computeroutput> and the work is not pending this is equivalent to <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was already scheduled or submitted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if work has been scheduled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>delay</computeroutput> is <computeroutput>K_NO_WAIT</computeroutput> and <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref> fails with this code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>delay</computeroutput> is <computeroutput>K_NO_WAIT</computeroutput> and <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref> fails with this code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>delay</computeroutput> is <computeroutput>K_NO_WAIT</computeroutput> and <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref> fails with this code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3346" column="5" declfile="include/kernel.h" declline="3346" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga5c113ea2bc8e8e5cd7a5c8bc5ec595d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_schedule</definition>
        <argsstring>(struct k_work_delayable *dwork, k_timeout_t delay)</argsstring>
        <name>k_work_schedule</name>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Submit an idle work item to the system work queue after a delay. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a thin wrapper around <ref refid="group__workqueue__apis_1ga17f863c9f6ff2fb41dc0f3b7de4fdf23" kindref="member">k_work_schedule_for_queue()</ref>, with all the API characteristcs of that function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to wait before submitting the work item. If <computeroutput>K_NO_WAIT</computeroutput> this is equivalent to <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>as with <ref refid="group__workqueue__apis_1ga17f863c9f6ff2fb41dc0f3b7de4fdf23" kindref="member">k_work_schedule_for_queue()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3363" column="12" declfile="include/kernel.h" declline="3363" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gabf5db091eac19b19a4e12c0cb381f0a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_reschedule_for_queue</definition>
        <argsstring>(struct k_work_q *queue, struct k_work_delayable *dwork, k_timeout_t delay)</argsstring>
        <name>k_work_reschedule_for_queue</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Reschedule a work item to a queue after a delay. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="group__workqueue__apis_1ga17f863c9f6ff2fb41dc0f3b7de4fdf23" kindref="member">k_work_schedule_for_queue()</ref> this function can change the deadline of a scheduled work item, and will schedule a work item that isn&apos;t idle (e.g. is submitted or running). This function does not affect (&quot;unsubmit&quot;) a work item that has been submitted to a queue.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>the queue on which the work item should be submitted after the delay.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to wait before submitting the work item. If <computeroutput>K_NO_WAIT</computeroutput> this is equivalent to <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref> after canceling any previous scheduled submission.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If delay is <computeroutput>K_NO_WAIT</computeroutput> (&quot;no delay&quot;) the return values are as with <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref>.</para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if delay is <computeroutput>K_NO_WAIT</computeroutput> and work was already on a queue </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if<itemizedlist>
<listitem><para>delay is <computeroutput>K_NO_WAIT</computeroutput> and work was not submitted but has now been queued to <computeroutput>queue</computeroutput>; or</para>
</listitem><listitem><para>delay not <computeroutput>K_NO_WAIT</computeroutput> and work has been scheduled </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>if delay is <computeroutput>K_NO_WAIT</computeroutput> and work was running and has been queued to the queue that was running it </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>delay</computeroutput> is <computeroutput>K_NO_WAIT</computeroutput> and <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref> fails with this code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>delay</computeroutput> is <computeroutput>K_NO_WAIT</computeroutput> and <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref> fails with this code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>delay</computeroutput> is <computeroutput>K_NO_WAIT</computeroutput> and <ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue()</ref> fails with this code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3401" column="5" declfile="include/kernel.h" declline="3401" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gaacaab408fb7c848d466ad1f069dfa648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_reschedule</definition>
        <argsstring>(struct k_work_delayable *dwork, k_timeout_t delay)</argsstring>
        <name>k_work_reschedule</name>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Reschedule a work item to the system work queue after a delay. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a thin wrapper around <ref refid="group__workqueue__apis_1gabf5db091eac19b19a4e12c0cb381f0a8" kindref="member">k_work_reschedule_for_queue()</ref>, with all the API characteristcs of that function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>the time to wait before submitting the work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>as with <ref refid="group__workqueue__apis_1gabf5db091eac19b19a4e12c0cb381f0a8" kindref="member">k_work_reschedule_for_queue()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3417" column="12" declfile="include/kernel.h" declline="3417" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gad47d54e513030304be2600d75b1a965f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_work_flush_delayable</definition>
        <argsstring>(struct k_work_delayable *dwork, struct k_work_sync *sync)</argsstring>
        <name>k_work_flush_delayable</name>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__work__sync" kindref="compound">k_work_sync</ref> *</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
<para>Flush delayable work. </para>
        </briefdescription>
        <detaileddescription>
<para>If the work is scheduled, it is immediately submitted. Then the caller blocks until the work completes, as with <ref refid="group__workqueue__apis_1gabd1cda459bab538fb2d6dfd84a73b253" kindref="member">k_work_flush()</ref>.</para>
<para><simplesect kind="note"><para>Be careful of caller and work queue thread relative priority. If this function sleeps it will not return until the work queue thread completes the tasks that allow this thread to resume.</para>
</simplesect>
<simplesect kind="note"><para>Behavior is undefined if this function is invoked on <computeroutput>dwork</computeroutput> from a work queue running <computeroutput>dwork</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an opaque item containing state related to the pending cancellation. The object must persist until the call returns, and be accessible from both the caller thread and the work queue thread. The object must not be used for any other flush or cancel operation until this one completes. On architectures with CONFIG_KERNEL_COHERENCE the object must be allocated in coherent memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if call had to wait for completion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was already idle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3444" column="6" declfile="include/kernel.h" declline="3444" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga92355914ee178d4c3e848a1946bed3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_cancel_delayable</definition>
        <argsstring>(struct k_work_delayable *dwork)</argsstring>
        <name>k_work_cancel_delayable</name>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <briefdescription>
<para>Cancel delayable work. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="group__workqueue__apis_1ga389fe2a8fb20f9bd593cf8d990727078" kindref="member">k_work_cancel()</ref> but for delayable work. If the work is scheduled or submitted it is canceled. This function does not wait for the cancellation to complete.</para>
<para><simplesect kind="note"><para>The work may still be running when this returns. Use <ref refid="group__workqueue__apis_1gad47d54e513030304be2600d75b1a965f" kindref="member">k_work_flush_delayable()</ref> or <ref refid="group__workqueue__apis_1ga7e7ec237648556fc16bfda8d35f7cd86" kindref="member">k_work_cancel_delayable_sync()</ref> to ensure it is not running.</para>
</simplesect>
<simplesect kind="note"><para>Canceling delayable work does not prevent rescheduling it. It does prevent submitting it until the cancellation completes.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="group__workqueue__apis_1ga1b76969667844f0981d348c9c671bc9f" kindref="member">k_work_delayable_busy_get()</ref> status indicating the state of the item after all cancellation steps performed by this call are completed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3467" column="5" declfile="include/kernel.h" declline="3467" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga7e7ec237648556fc16bfda8d35f7cd86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_work_cancel_delayable_sync</definition>
        <argsstring>(struct k_work_delayable *dwork, struct k_work_sync *sync)</argsstring>
        <name>k_work_cancel_delayable_sync</name>
        <param>
          <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref> *</type>
          <declname>dwork</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__work__sync" kindref="compound">k_work_sync</ref> *</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
<para>Cancel delayable work and wait. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="group__workqueue__apis_1ga92355914ee178d4c3e848a1946bed3e4" kindref="member">k_work_cancel_delayable()</ref> but waits until the work becomes idle.</para>
<para><simplesect kind="note"><para>Canceling delayable work does not prevent rescheduling it. It does prevent submitting it until the cancellation completes.</para>
</simplesect>
<simplesect kind="note"><para>Be careful of caller and work queue thread relative priority. If this function sleeps it will not return until the work queue thread completes the tasks that allow this thread to resume.</para>
</simplesect>
<simplesect kind="note"><para>Behavior is undefined if this function is invoked on <computeroutput>dwork</computeroutput> from a work queue running <computeroutput>dwork</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwork</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the delayable work item.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an opaque item containing state related to the pending cancellation. The object must persist until the call returns, and be accessible from both the caller thread and the work queue thread. The object must not be used for any other flush or cancel operation until this one completes. On architectures with CONFIG_KERNEL_COHERENCE the object must be allocated in coherent memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if work was not idle (call had to wait for cancellation of a running handler to complete, or scheduled or submitted operations were cancelled); </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3497" column="6" declfile="include/kernel.h" declline="3497" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga7ab20a3405d7132870ee5e4b5610bfe3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool k_work_pending</definition>
        <argsstring>(const struct k_work *work)</argsstring>
        <name>k_work_pending</name>
        <param>
          <type>const struct <ref refid="structk__work" kindref="compound">k_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3779" column="20" bodyfile="include/kernel.h" bodystart="3779" bodyend="3782"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gad4b913b161ebf5958f7c42ed5e1a6c25" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_work_q_start</definition>
        <argsstring>(struct k_work_q *work_q, k_thread_stack_t *stack, size_t stack_size, int prio)</argsstring>
        <name>k_work_q_start</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>work_q</declname>
        </param>
        <param>
          <type><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stack_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3785" column="20" bodyfile="include/kernel.h" bodystart="3785" bodyend="3790"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gaf484b980ae3dbbd620b96e883c4b4fe6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_delayed_work_init</definition>
        <argsstring>(struct k_delayed_work *work, k_work_handler_t handler)</argsstring>
        <name>k_delayed_work_init</name>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3802" column="20" bodyfile="include/kernel.h" bodystart="3802" bodyend="3806"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga9d96cee1aa79b9fd01aa3ea7892f74d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int k_delayed_work_submit_to_queue</definition>
        <argsstring>(struct k_work_q *work_q, struct k_delayed_work *work, k_timeout_t delay)</argsstring>
        <name>k_delayed_work_submit_to_queue</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>work_q</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3809" column="19" bodyfile="include/kernel.h" bodystart="3809" bodyend="3817"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gabc2b985a4edddd17d1a7406d69167e0c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int k_delayed_work_submit</definition>
        <argsstring>(struct k_delayed_work *work, k_timeout_t delay)</argsstring>
        <name>k_delayed_work_submit</name>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3820" column="19" bodyfile="include/kernel.h" bodystart="3820" bodyend="3827"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga00189a735a3a557118c035b7d69feeb0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int k_delayed_work_cancel</definition>
        <argsstring>(struct k_delayed_work *work)</argsstring>
        <name>k_delayed_work_cancel</name>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3830" column="19" bodyfile="include/kernel.h" bodystart="3830" bodyend="3868"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga47b86afff751340829339566a9932f72" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool k_delayed_work_pending</definition>
        <argsstring>(struct k_delayed_work *work)</argsstring>
        <name>k_delayed_work_pending</name>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3871" column="20" bodyfile="include/kernel.h" bodystart="3871" bodyend="3874"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga3c5c9af0fb7c0518a87e04f110c27105" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>static int32_t k_delayed_work_remaining_get</definition>
        <argsstring>(struct k_delayed_work *work)</argsstring>
        <name>k_delayed_work_remaining_get</name>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3877" column="23" bodyfile="include/kernel.h" bodystart="3877" bodyend="3883"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gacbde6358fe7676d8a6bcf286e7802997" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>static k_ticks_t k_delayed_work_expires_ticks</definition>
        <argsstring>(struct k_delayed_work *work)</argsstring>
        <name>k_delayed_work_expires_ticks</name>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3886" column="25" bodyfile="include/kernel.h" bodystart="3886" bodyend="3890"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga1d0f51e16f52308bb258bf63b4b26915" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>static k_ticks_t k_delayed_work_remaining_ticks</definition>
        <argsstring>(struct k_delayed_work *work)</argsstring>
        <name>k_delayed_work_remaining_ticks</name>
        <param>
          <type>struct <ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref> *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3893" column="25" bodyfile="include/kernel.h" bodystart="3893" bodyend="3897"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga9de9c7a7f13cc6b325e5453e34afe62d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_work_user_init</definition>
        <argsstring>(struct k_work_user *work, k_work_user_handler_t handler)</argsstring>
        <name>k_work_user_init</name>
        <param>
          <type>struct k_work_user *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="group__workqueue__apis_1gafdb3f5f2225b3d5d1fe682cb97f3b328" kindref="member">k_work_user_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize a userspace work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a user workqueue work item, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of work item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time work item is processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3976" column="20" bodyfile="include/kernel.h" bodystart="3976" bodyend="3980"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga58d05d4127e4cd51104a1f1a87f626cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool k_work_user_is_pending</definition>
        <argsstring>(struct k_work_user *work)</argsstring>
        <name>k_work_user_is_pending</name>
        <param>
          <type>struct k_work_user *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Check if a userspace work item is pending. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine indicates if user work item <emphasis>work</emphasis> is pending in a workqueue&apos;s queue.</para>
<para><simplesect kind="note"><para>Checking if the work is pending gives no guarantee that the work will still be pending when this information is used. It is up to the caller to make sure that this information is used in a safe manner.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if work item is pending, or false if it is not pending. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3998" column="20" bodyfile="include/kernel.h" bodystart="3998" bodyend="4001"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga50ae1f6f74c0bc0a41dbbf789fff8856" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int k_work_user_submit_to_queue</definition>
        <argsstring>(struct k_work_user_q *work_q, struct k_work_user *work)</argsstring>
        <name>k_work_user_submit_to_queue</name>
        <param>
          <type>struct k_work_user_q *</type>
          <declname>work_q</declname>
        </param>
        <param>
          <type>struct k_work_user *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Submit a work item to a user mode workqueue. </para>
        </briefdescription>
        <detaileddescription>
<para>Submits a work item to a workqueue that runs in user mode. A temporary memory allocation is made from the caller&apos;s resource pool which is freed once the worker thread consumes the <ref refid="structk__work" kindref="compound">k_work</ref> item. The workqueue thread must have memory access to the <ref refid="structk__work" kindref="compound">k_work</ref> item being submitted. The caller must have permission granted on the work_q parameter&apos;s queue object.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of workqueue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if the work item was already in some workqueue </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if no memory for thread resource pool allocation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4021" column="19" bodyfile="include/kernel.h" bodystart="4021" bodyend="4040"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga3091bc8fab5311252e41634a97a18589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_work_user_queue_start</definition>
        <argsstring>(struct k_work_user_q *work_q, k_thread_stack_t *stack, size_t stack_size, int prio, const char *name)</argsstring>
        <name>k_work_user_queue_start</name>
        <param>
          <type>struct k_work_user_q *</type>
          <declname>work_q</declname>
        </param>
        <param>
          <type><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stack_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Start a workqueue in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This works identically to <ref refid="group__workqueue__apis_1gadfc56554f9bfe7b52309d79660188593" kindref="member">k_work_queue_start()</ref> except it is callable from user mode, and the worker thread created will run in user mode. The caller must have permissions granted on both the work_q parameter&apos;s thread and queue objects, and the same restrictions on priority apply as <ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of workqueue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to work queue thread&apos;s stack space, as defined by <ref refid="group__thread__stack__api_1gac5368ce24fdeab3863b5c8dee2ebd955" kindref="member">K_THREAD_STACK_DEFINE()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the work queue thread&apos;s stack (in bytes), which should either be the same constant passed to <ref refid="group__thread__stack__api_1gac5368ce24fdeab3863b5c8dee2ebd955" kindref="member">K_THREAD_STACK_DEFINE()</ref> or the value of <ref refid="group__thread__stack__api_1ga775f8e6b4144cfdd24f3261b6db64150" kindref="member">K_THREAD_STACK_SIZEOF()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority of the work queue&apos;s thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>optional thread name. If not null a copy is made into the thread&apos;s name buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4061" column="13" declfile="include/kernel.h" declline="4061" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga371dab33a40622bea19b07d852863443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_work_poll_init</definition>
        <argsstring>(struct k_work_poll *work, k_work_handler_t handler)</argsstring>
        <name>k_work_poll_init</name>
        <param>
          <type>struct k_work_poll *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize a triggered work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a workqueue triggered work item, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of triggered work item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time work item is processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4129" column="13" declfile="include/kernel.h" declline="4129" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga0abafd7f851e42fd3572c8438e600a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_poll_submit_to_queue</definition>
        <argsstring>(struct k_work_q *work_q, struct k_work_poll *work, struct k_poll_event *events, int num_events, k_timeout_t timeout)</argsstring>
        <name>k_work_poll_submit_to_queue</name>
        <param>
          <type>struct <ref refid="structk__work__q" kindref="compound">k_work_q</ref> *</type>
          <declname>work_q</declname>
        </param>
        <param>
          <type>struct k_work_poll *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_events</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Submit a triggered work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine schedules work item <emphasis>work</emphasis> to be processed by workqueue <emphasis>work_q</emphasis> when one of the given <emphasis>events</emphasis> is signaled. The routine initiates internal poller for the work item and then returns to the caller. Only when one of the watched events happen the work item is actually submitted to the workqueue and becomes pending.</para>
<para>Submitting a previously submitted triggered work item that is still waiting for the event cancels the existing submission and reschedules it the using the new event list. Note that this behavior is inherently subject to race conditions with the pre-existing triggered work item and work queue, so care must be taken to synchronize such resubmissions externally.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="warning"><para>Provided array of events as well as a triggered work item must be placed in persistent memory (valid until work handler execution or work cancellation) and cannot be modified after submission.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of workqueue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of delayed work item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of events which trigger the work. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of events in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout after which the work will be scheduled for execution even if not triggered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item started watching for events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item is being processed or has completed its work. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRINUSE</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item is pending on a different workqueue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4166" column="12" declfile="include/kernel.h" declline="4166" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1gad9f222e46d72c4f98739395a0c8bb4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_poll_submit</definition>
        <argsstring>(struct k_work_poll *work, struct k_poll_event *events, int num_events, k_timeout_t timeout)</argsstring>
        <name>k_work_poll_submit</name>
        <param>
          <type>struct k_work_poll *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_events</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Submit a triggered work item to the system workqueue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine schedules work item <emphasis>work</emphasis> to be processed by system workqueue when one of the given <emphasis>events</emphasis> is signaled. The routine initiates internal poller for the work item and then returns to the caller. Only when one of the watched events happen the work item is actually submitted to the workqueue and becomes pending.</para>
<para>Submitting a previously submitted triggered work item that is still waiting for the event cancels the existing submission and reschedules it the using the new event list. Note that this behavior is inherently subject to race conditions with the pre-existing triggered work item and work queue, so care must be taken to synchronize such resubmissions externally.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="warning"><para>Provided array of events as well as a triggered work item must not be modified until the item has been processed by the workqueue.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of delayed work item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of events which trigger the work. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of events in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout after which the work will be scheduled for execution even if not triggered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item started watching for events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item is being processed or has completed its work. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EADDRINUSE</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item is pending on a different workqueue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4203" column="12" declfile="include/kernel.h" declline="4203" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__workqueue__apis_1ga2a19547d04dc1a202e80b752e3177215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_work_poll_cancel</definition>
        <argsstring>(struct k_work_poll *work)</argsstring>
        <name>k_work_poll_cancel</name>
        <param>
          <type>struct k_work_poll *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Cancel a triggered work item. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine cancels the submission of triggered work item <emphasis>work</emphasis>. A triggered work item can only be canceled if no event triggered work submission.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of delayed work item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item canceled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Work item is being processed or has completed its work. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4222" column="12" declfile="include/kernel.h" declline="4222" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga54a5cdcaea2236c383ace433fedc0d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_msgq_init</definition>
        <argsstring>(struct k_msgq *msgq, char *buffer, size_t msg_size, uint32_t max_msgs)</argsstring>
        <name>k_msgq_init</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_msgs</declname>
        </param>
        <briefdescription>
<para>Initialize a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a message queue object, prior to its first use.</para>
<para>The message queue&apos;s ring buffer must contain space for <emphasis>max_msgs</emphasis> messages, each of which is <emphasis>msg_size</emphasis> bytes long. The buffer must be aligned to an N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure that each message is similarly aligned to this boundary, <emphasis>q_msg_size</emphasis> must also be a multiple of N.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to ring buffer that holds queued messages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Message size (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of messages that can be queued. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4343" column="6" declfile="include/kernel.h" declline="4343" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gabe7305b8f442ebdc147dbbc6e8cf92fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_alloc_init</definition>
        <argsstring>(struct k_msgq *msgq, size_t msg_size, uint32_t max_msgs)</argsstring>
        <name>k_msgq_alloc_init</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_msgs</declname>
        </param>
        <briefdescription>
<para>Initialize a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a message queue object, prior to its first use, allocating its internal ring buffer from the calling thread&apos;s resource pool.</para>
<para>Memory allocated for the ring buffer can be released by calling <ref refid="group__msgq__apis_1gafda4399aa9b8f1e44bdf752e00ea787b" kindref="member">k_msgq_cleanup()</ref>, or if userspace is enabled and the msgq object loses all of its references.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Message size (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of messages that can be queued.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -ENOMEM if there was insufficient memory in the thread&apos;s resource pool, or -EINVAL if the size parameters cause an integer overflow. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4365" column="6" declfile="include/kernel.h" declline="4365" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gafda4399aa9b8f1e44bdf752e00ea787b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_cleanup</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_cleanup</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Release allocated buffer for a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Releases memory allocated for the ring buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>message queue to cleanup</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue not empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4378" column="5" declfile="include/kernel.h" declline="4378" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga54e96aaaea5462a1f963b7fd5ca82bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_put</definition>
        <argsstring>(struct k_msgq *msgq, const void *data, k_timeout_t timeout)</argsstring>
        <name>k_msgq_put</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Send a message to a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sends a message to message queue <emphasis>q</emphasis>.</para>
<para><simplesect kind="note"><para>The message content is copied from <emphasis>data</emphasis> into <emphasis>msgq</emphasis> and the <emphasis>data</emphasis> pointer is not retained, so the message content will not be modified by this function.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to add the message, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting or queue purged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4401" column="6" declfile="include/kernel.h" declline="4401" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gae67f2ced2df1f9c290ae15dab9097cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_get</definition>
        <argsstring>(struct k_msgq *msgq, void *data, k_timeout_t timeout)</argsstring>
        <name>k_msgq_get</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive a message from a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine receives a message from message queue <emphasis>q</emphasis> in a &quot;first in,
first out&quot; manner.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the received message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to receive the message, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4423" column="6" declfile="include/kernel.h" declline="4423" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga14f543472f2f63cfde0bdfa87b95c915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_peek</definition>
        <argsstring>(struct k_msgq *msgq, void *data)</argsstring>
        <name>k_msgq_peek</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Peek/read a message from a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads a message from message queue <emphasis>q</emphasis> in a &quot;first in,
first out&quot; manner and leaves the message in the queue.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the message read from the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned when the queue has no message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4439" column="6" declfile="include/kernel.h" declline="4439" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gaa18875887773195ae44b7fe0972ee760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_msgq_purge</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_purge</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Purge a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine discards all unreceived messages in a message queue&apos;s ring buffer. Any threads that are blocked waiting to send a message to the message queue are unblocked and see an -ENOMSG error code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4450" column="7" declfile="include/kernel.h" declline="4450" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga7d154beb4f9c6227eddbef26d406ca24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_msgq_num_free_get</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_num_free_get</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Get the amount of free space in a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the number of unused entries in a message queue&apos;s ring buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unused ring buffer entries. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4462" column="11" declfile="include/kernel.h" declline="4462" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga8f9d3eef67cbc9c0717a84190bbf7f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_msgq_get_attrs</definition>
        <argsstring>(struct k_msgq *msgq, struct k_msgq_attrs *attrs)</argsstring>
        <name>k_msgq_get_attrs</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__msgq__attrs" kindref="compound">k_msgq_attrs</ref> *</type>
          <declname>attrs</declname>
        </param>
        <briefdescription>
<para>Get basic attributes of a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine fetches basic attributes of message queue into attr argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attrs</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to message queue attribute structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4472" column="8" declfile="include/kernel.h" declline="4472" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga458793a89f1d9f762bda3422918a9faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_msgq_num_used_get</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_num_used_get</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Get the number of messages in a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the number of messages in a message queue&apos;s ring buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of messages. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4490" column="11" declfile="include/kernel.h" declline="4490" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__mailbox__apis_1ga686f20c199a9e971822d8279d175d8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mbox_init</definition>
        <argsstring>(struct k_mbox *mbox)</argsstring>
        <name>k_mbox_init</name>
        <param>
          <type>struct <ref refid="structk__mbox" kindref="compound">k_mbox</ref> *</type>
          <declname>mbox</declname>
        </param>
        <briefdescription>
<para>Initialize a mailbox. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a mailbox object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mailbox. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4580" column="13" declfile="include/kernel.h" declline="4580" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__mailbox__apis_1gaa1e5cdd992d8b9be11f82254e1886ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mbox_put</definition>
        <argsstring>(struct k_mbox *mbox, struct k_mbox_msg *tx_msg, k_timeout_t timeout)</argsstring>
        <name>k_mbox_put</name>
        <param>
          <type>struct <ref refid="structk__mbox" kindref="compound">k_mbox</ref> *</type>
          <declname>mbox</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref> *</type>
          <declname>tx_msg</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Send a mailbox message in a synchronous manner. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sends a message to <emphasis>mbox</emphasis> and waits for a receiver to both receive and process it. The message data may be in a buffer, in a memory pool block, or non-existent (i.e. an empty message).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mailbox. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the transmit message descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the message to be received, or one of the special values K_NO_WAIT and K_FOREVER. Once the message has been received, this routine waits as long as necessary for the message to be completely processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4601" column="12" declfile="include/kernel.h" declline="4601" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mailbox__apis_1gadd60f7b760371c0a141a1e4da253a0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mbox_async_put</definition>
        <argsstring>(struct k_mbox *mbox, struct k_mbox_msg *tx_msg, struct k_sem *sem)</argsstring>
        <name>k_mbox_async_put</name>
        <param>
          <type>struct <ref refid="structk__mbox" kindref="compound">k_mbox</ref> *</type>
          <declname>mbox</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref> *</type>
          <declname>tx_msg</declname>
        </param>
        <param>
          <type>struct k_sem *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Send a mailbox message in an asynchronous manner. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sends a message to <emphasis>mbox</emphasis> without waiting for a receiver to process it. The message data may be in a buffer, in a memory pool block, or non-existent (i.e. an empty message). Optionally, the semaphore <emphasis>sem</emphasis> will be given when the message has been both received and completely processed by the receiver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mailbox. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the transmit message descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of a semaphore, or NULL if none is needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4617" column="13" declfile="include/kernel.h" declline="4617" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__mailbox__apis_1ga2ea91154620b139dbed1ad949b97c3ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mbox_get</definition>
        <argsstring>(struct k_mbox *mbox, struct k_mbox_msg *rx_msg, void *buffer, k_timeout_t timeout)</argsstring>
        <name>k_mbox_get</name>
        <param>
          <type>struct <ref refid="structk__mbox" kindref="compound">k_mbox</ref> *</type>
          <declname>mbox</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref> *</type>
          <declname>rx_msg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive a mailbox message. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine receives a message from <emphasis>mbox</emphasis>, then optionally retrieves its data and disposes of the message.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mailbox. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the receive message descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the buffer to receive data, or NULL to defer data retrieval and message disposal until later. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for a message to be received, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4637" column="12" declfile="include/kernel.h" declline="4637" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mailbox__apis_1ga3d19e648e67f109609259543c9a01d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mbox_data_get</definition>
        <argsstring>(struct k_mbox_msg *rx_msg, void *buffer)</argsstring>
        <name>k_mbox_data_get</name>
        <param>
          <type>struct <ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref> *</type>
          <declname>rx_msg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Retrieve mailbox message data into a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine completes the processing of a received message by retrieving its data into a buffer, then disposing of the message.</para>
<para>Alternatively, this routine can be used to dispose of a received message without retrieving its data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rx_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the receive message descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the buffer to receive data, or NULL to discard the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4653" column="13" declfile="include/kernel.h" declline="4653" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pipe_init</definition>
        <argsstring>(struct k_pipe *pipe, unsigned char *buffer, size_t size)</argsstring>
        <name>k_pipe_init</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Initialize a pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a pipe object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe&apos;s ring buffer, or NULL if no ring buffer is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the pipe&apos;s ring buffer (in bytes), or zero if no ring buffer is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4736" column="6" declfile="include/kernel.h" declline="4736" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1gaad0ab1b97b537da408031e4bcbe04f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_pipe_cleanup</definition>
        <argsstring>(struct k_pipe *pipe)</argsstring>
        <name>k_pipe_cleanup</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
<para>Release a pipe&apos;s allocated buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>If a pipe object was given a dynamically allocated buffer via <ref refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" kindref="member">k_pipe_alloc_init()</ref>, this will free it. This function does nothing if the buffer wasn&apos;t dynamically allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>nothing to cleanup </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4749" column="5" declfile="include/kernel.h" declline="4749" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_pipe_alloc_init</definition>
        <argsstring>(struct k_pipe *pipe, size_t size)</argsstring>
        <name>k_pipe_alloc_init</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Initialize a pipe and allocate a buffer for it. </para>
        </briefdescription>
        <detaileddescription>
<para>Storage for the buffer region will be allocated from the calling thread&apos;s resource pool. This memory will be released if <ref refid="group__pipe__apis_1gaad0ab1b97b537da408031e4bcbe04f36" kindref="member">k_pipe_cleanup()</ref> is called, or userspace is enabled and the pipe object loses all references to it.</para>
<para>This function should only be called on uninitialized pipe objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the pipe&apos;s ring buffer (in bytes), or zero if no ring buffer is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if memory couldn&apos;t be allocated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4766" column="6" declfile="include/kernel.h" declline="4766" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_pipe_put</definition>
        <argsstring>(struct k_pipe *pipe, void *data, size_t bytes_to_write, size_t *bytes_written, size_t min_xfer, k_timeout_t timeout)</argsstring>
        <name>k_pipe_put</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes_to_write</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes_written</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_xfer</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Write data to a pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes up to <emphasis>bytes_to_write</emphasis> bytes of data to <emphasis>pipe</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of data to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_to_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_written</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the number of bytes written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_xfer</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to wait for the data to be written, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>At least <emphasis>min_xfer</emphasis> bytes of data were written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting; zero data bytes were written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out; between zero and <emphasis>min_xfer</emphasis> minus one data bytes were written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4786" column="6" declfile="include/kernel.h" declline="4786" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_pipe_get</definition>
        <argsstring>(struct k_pipe *pipe, void *data, size_t bytes_to_read, size_t *bytes_read, size_t min_xfer, k_timeout_t timeout)</argsstring>
        <name>k_pipe_get</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes_to_read</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes_read</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_xfer</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Read data from a pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads up to <emphasis>bytes_to_read</emphasis> bytes of data from <emphasis>pipe</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to place the data read from pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_to_read</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_read</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the number of bytes read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_xfer</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of data bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to wait for the data to be read, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>At least <emphasis>min_xfer</emphasis> bytes of data were read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid parameters supplied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting; zero data bytes were read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out; between zero and <emphasis>min_xfer</emphasis> minus one data bytes were read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4809" column="6" declfile="include/kernel.h" declline="4809" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t k_pipe_read_avail</definition>
        <argsstring>(struct k_pipe *pipe)</argsstring>
        <name>k_pipe_read_avail</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
<para>Query the number of bytes that may be read from <emphasis>pipe</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number n such that 0 &lt;= n &lt;= <ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">k_pipe::size</ref>; the result is zero for unbuffered pipes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4821" column="9" declfile="include/kernel.h" declline="4821" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t k_pipe_write_avail</definition>
        <argsstring>(struct k_pipe *pipe)</argsstring>
        <name>k_pipe_write_avail</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
<para>Query the number of bytes that may be written to <emphasis>pipe</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number n such that 0 &lt;= n &lt;= <ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">k_pipe::size</ref>; the result is zero for unbuffered pipes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4831" column="9" declfile="include/kernel.h" declline="4831" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1ga41484bb5c7dcd97e7a7b7f1422f8026f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pipe_flush</definition>
        <argsstring>(struct k_pipe *pipe)</argsstring>
        <name>k_pipe_flush</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
<para>Flush the pipe of write data. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine flushes the pipe. Flushing the pipe is equivalent to reading both all the data in the pipe&apos;s buffer and all the data waiting to go into that pipe into a large temporary buffer and discarding the buffer. Any writers that were previously pended become unpended.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4843" column="7" declfile="include/kernel.h" declline="4843" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__pipe__apis_1ga71e0e38a15fa27f27c1f028223936445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_pipe_buffer_flush</definition>
        <argsstring>(struct k_pipe *pipe)</argsstring>
        <name>k_pipe_buffer_flush</name>
        <param>
          <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref> *</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
<para>Flush the pipe&apos;s internal buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine flushes the pipe&apos;s internal buffer. This is equivalent to reading up to N bytes from the pipe (where N is the size of the pipe&apos;s buffer) into a temporary buffer and then discarding that buffer. If there were writers previously pending, then some may unpend as they try to fill up the pipe&apos;s emptied buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the pipe. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4856" column="7" declfile="include/kernel.h" declline="4856" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1ga094a8f173f287e29bb287119c26889d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_slab_init</definition>
        <argsstring>(struct k_mem_slab *slab, void *buffer, size_t block_size, uint32_t num_blocks)</argsstring>
        <name>k_mem_slab_init</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>block_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_blocks</declname>
        </param>
        <briefdescription>
<para>Initialize a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes a memory slab, prior to its first use.</para>
<para>The memory slab&apos;s buffer contains <emphasis>slab_num_blocks</emphasis> memory blocks that are <emphasis>slab_block_size</emphasis> bytes long. The buffer must be aligned to an N-byte boundary matching a word boundary, where N is a power of 2 (i.e. 4 on 32-bit systems, 8, 16, ...). To ensure that each memory block is similarly aligned to this boundary, <emphasis>slab_block_size</emphasis> must also be a multiple of N.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer used for the memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of memory blocks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid data supplied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4976" column="12" declfile="include/kernel.h" declline="4976" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_slab_alloc</definition>
        <argsstring>(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)</argsstring>
        <name>k_mem_slab_alloc</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate memory from a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allocates a memory block from a memory slab.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR. </para>
</simplesect>
<simplesect kind="note"><para>When CONFIG_MULTITHREADING=n any <emphasis>timeout</emphasis> is treated as K_NO_WAIT.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to block address area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to wait for operation to complete. Use K_NO_WAIT to return without waiting, or K_FOREVER to wait as long as necessary.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory allocated. The block address area pointed at by <emphasis>mem</emphasis> is set to the starting address of the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid data supplied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5001" column="12" declfile="include/kernel.h" declline="5001" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1ga97915aee5a59e19f8b28185eed93aac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_slab_free</definition>
        <argsstring>(struct k_mem_slab *slab, void **mem)</argsstring>
        <name>k_mem_slab_free</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Free memory allocated from a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine releases a previously allocated memory block back to its associated memory slab.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to block address area (as set by <ref refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" kindref="member">k_mem_slab_alloc()</ref>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5013" column="13" declfile="include/kernel.h" declline="5013" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gac76b96d7055e4ad94765c93530dd0720" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_mem_slab_num_used_get</definition>
        <argsstring>(struct k_mem_slab *slab)</argsstring>
        <name>k_mem_slab_num_used_get</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <briefdescription>
<para>Get the number of used blocks in a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gets the number of memory blocks that are currently allocated in <emphasis>slab</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of allocated memory blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5025" column="24" bodyfile="include/kernel.h" bodystart="5025" bodyend="5028"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gae0e949c1c3476dd57bc0c0ed627d2346" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_mem_slab_max_used_get</definition>
        <argsstring>(struct k_mem_slab *slab)</argsstring>
        <name>k_mem_slab_max_used_get</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <briefdescription>
<para>Get the number of maximum used blocks so far in a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gets the maximum number of memory blocks that were allocated in <emphasis>slab</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum number of allocated memory blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5040" column="24" bodyfile="include/kernel.h" bodystart="5040" bodyend="5048"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gae87577e2873cf746db69216a82f94aea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_mem_slab_num_free_get</definition>
        <argsstring>(struct k_mem_slab *slab)</argsstring>
        <name>k_mem_slab_num_free_get</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <briefdescription>
<para>Get the number of unused blocks in a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gets the number of memory blocks that are currently unallocated in <emphasis>slab</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unallocated memory blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5060" column="24" bodyfile="include/kernel.h" bodystart="5060" bodyend="5063"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_heap_init</definition>
        <argsstring>(struct k_heap *h, void *mem, size_t bytes)</argsstring>
        <name>k_heap_init</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs a synchronized <ref refid="structk__heap" kindref="compound">k_heap</ref> object over a memory region specified by the user. Note that while any alignment and size can be passed as valid parameters, internal alignment restrictions inside the inner <ref refid="structsys__heap" kindref="compound">sys_heap</ref> mean that not all bytes may be usable as allocated memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap struct to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory region, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5093" column="6" declfile="include/kernel.h" declline="5093" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gaf77211a72441de389857bc13e10be4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_heap_aligned_alloc</definition>
        <argsstring>(struct k_heap *h, size_t align, size_t bytes, k_timeout_t timeout)</argsstring>
        <name>k_heap_aligned_alloc</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate aligned memory from a <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Behaves in all ways like <ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref>, except that the returned memory (if available) will have a starting address in memory which is a multiple of the specified power-of-two alignment value in bytes. The resulting memory can be returned to the heap using <ref refid="group__heap__apis_1ga6cf917a0b3d91a0101192bd4808ada9c" kindref="member">k_heap_free()</ref>.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR. </para>
</simplesect>
<simplesect kind="note"><para>When CONFIG_MULTITHREADING=n any <emphasis>timeout</emphasis> is treated as K_NO_WAIT.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap from which to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment in bytes, must be a power of two </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to wait, or K_NO_WAIT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to memory the caller can now use </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5114" column="6" declfile="include/kernel.h" declline="5114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_heap_alloc</definition>
        <argsstring>(struct k_heap *h, size_t bytes, k_timeout_t timeout)</argsstring>
        <name>k_heap_alloc</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate memory from a <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocates and returns a memory buffer from the memory region owned by the heap. If no memory is available immediately, the call will block for the specified timeout (constructed via the standard timeout API, or K_NO_WAIT or K_FOREVER) waiting for memory to be freed. If the allocation cannot be performed by the expiration of the timeout, NULL will be returned.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR. </para>
</simplesect>
<simplesect kind="note"><para>When CONFIG_MULTITHREADING=n any <emphasis>timeout</emphasis> is treated as K_NO_WAIT.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap from which to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired size of block to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to wait, or K_NO_WAIT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to valid heap memory, or NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5137" column="6" declfile="include/kernel.h" declline="5137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1ga6cf917a0b3d91a0101192bd4808ada9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_heap_free</definition>
        <argsstring>(struct k_heap *h, void *mem)</argsstring>
        <name>k_heap_free</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Free memory allocated by <ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the specified memory block, which must have been returned from <ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref>, to the heap for use by other callers. Passing a NULL block is legal, and has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap to which to return the memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid memory block, or NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5150" column="6" declfile="include/kernel.h" declline="5150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_aligned_alloc</definition>
        <argsstring>(size_t align, size_t size)</argsstring>
        <name>k_aligned_alloc</name>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from the heap with a specified alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides semantics similar to aligned_alloc(); memory is allocated from the heap with a specified alignment. However, one minor difference is that <ref refid="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" kindref="member">k_aligned_alloc()</ref> accepts any non-zero <computeroutput>size</computeroutput>, wherase aligned_alloc() only accepts a <computeroutput>size</computeroutput> that is an integral multiple of <computeroutput>align</computeroutput>.</para>
<para>Above, aligned_alloc() refers to: C11 standard (ISO/IEC 9899:2011): 7.22.3.1 The aligned_alloc function (p: 347-348)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of memory requested (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory requested (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the allocated memory if successful; otherwise NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5247" column="13" declfile="include/kernel.h" declline="5247" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_malloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>k_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from the heap. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides traditional <ref refid="stdlib_8h_1a9c36d0fe3ec4675cbffdc9b52f5fb399" kindref="member">malloc()</ref> semantics. Memory is allocated from the heap memory pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory requested (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the allocated memory if successful; otherwise NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5259" column="13" declfile="include/kernel.h" declline="5259" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>k_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free memory allocated from heap. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides traditional <ref refid="stdlib_8h_1afbedc913aa4651b3c3b4b3aecd9b4711" kindref="member">free()</ref> semantics. The memory being returned must have been allocated from the heap memory pool or k_mem_pool_malloc().</para>
<para>If <emphasis>ptr</emphasis> is NULL, no operation is performed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to previously allocated memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5272" column="13" declfile="include/kernel.h" declline="5272" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_calloc</definition>
        <argsstring>(size_t nmemb, size_t size)</argsstring>
        <name>k_calloc</name>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from heap, array style. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides traditional <ref refid="stdlib_8h_1a2807e26a012717736641384f91ab2563" kindref="member">calloc()</ref> semantics. Memory is allocated from the heap memory pool and zeroed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the requested array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each array element (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the allocated memory if successful; otherwise NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5285" column="13" declfile="include/kernel.h" declline="5285" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1gaa06bddd93a024fc5326d93187d80eb03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_event_init</definition>
        <argsstring>(struct k_poll_event *event, uint32_t type, int mode, void *obj)</argsstring>
        <name>k_poll_event_init</name>
        <param>
          <type>struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Initialize one struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para>After this routine is called on a poll event, the event it ready to be placed in an event array to be passed to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitfield of the types of event, from the K_POLL_TYPE_xxx values. Only values that apply to the same object being polled can be used together. Choosing K_POLL_TYPE_IGNORE disables the event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Future. Use K_POLL_MODE_NOTIFY_ONLY. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel object or poll signal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5486" column="13" declfile="include/kernel.h" declline="5486" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_poll</definition>
        <argsstring>(struct k_poll_event *events, int num_events, k_timeout_t timeout)</argsstring>
        <name>k_poll</name>
        <param>
          <type>struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_events</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for one or many of multiple poll events to occur. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows a thread to wait concurrently for one or many of multiple poll events to have occurred. Such events can be a kernel object being available, like a semaphore, or a poll signal event.</para>
<para>When an event notifies that a kernel object is available, the kernel object is not &quot;given&quot; to the thread calling <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>: it merely signals the fact that the object was available when the <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> call was in effect. Also, all threads trying to acquire an object the regular way, i.e. by pending on the object, have precedence over the thread polling on the object. This means that the polling thread will never get the poll event on an object until the object becomes available and its pend queue is empty. For this reason, the <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> call is more effective when the objects being polled only have one thread, the polling thread, trying to acquire them.</para>
<para>When <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> returns 0, the caller should loop on all the events that were passed to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> and check the state field for the values that were expected and take the associated actions.</para>
<para>Before being reused for another call to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>, the user has to reset the state field to K_POLL_STATE_NOT_READY.</para>
<para>When called from user mode, a temporary memory allocation is required from the caller&apos;s resource pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of events to be polled for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of events in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for an event to be ready, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more events are ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINTR</parametername>
</parameternamelist>
<parameterdescription>
<para>Polling has been interrupted, e.g. with <ref refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" kindref="member">k_queue_cancel_wait()</ref>. All output events are still set and valid, cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other words, -EINTR status means that at least one of output events is K_POLL_STATE_CANCELLED. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread resource pool insufficient memory (user mode only) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Bad parameters (user mode only) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5532" column="6" declfile="include/kernel.h" declline="5532" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_signal_init</definition>
        <argsstring>(struct k_poll_signal *sig)</argsstring>
        <name>k_poll_signal_init</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Initialize a poll signal object. </para>
        </briefdescription>
        <detaileddescription>
<para>Ready a poll signal object to be signaled via <ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>A poll signal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5543" column="7" declfile="include/kernel.h" declline="5543" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_signal_reset</definition>
        <argsstring>(struct k_poll_signal *sig)</argsstring>
        <name>k_poll_signal_reset</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5550" column="7" declfile="include/kernel.h" declline="5550" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_signal_check</definition>
        <argsstring>(struct k_poll_signal *sig, unsigned int *signaled, int *result)</argsstring>
        <name>k_poll_signal_check</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int *</type>
          <declname>signaled</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Fetch the signaled state and result value of a poll signal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>A poll signal object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signaled</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer buffer which will be written nonzero if the object was signaled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer destination buffer which will be written with the result value if the object was signaled, or an undefined value if it was not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5562" column="7" declfile="include/kernel.h" declline="5562" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_poll_signal_raise</definition>
        <argsstring>(struct k_poll_signal *sig, int result)</argsstring>
        <name>k_poll_signal_raise</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>int</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Signal a poll signal object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine makes ready a poll signal, which is basically a poll event of type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be made ready to run. A <emphasis>result</emphasis> value can be specified.</para>
<para>The poll signal contains a &apos;signaled&apos; field that, when set by <ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise()</ref>, stays set until the user sets it back to 0 with <ref refid="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" kindref="member">k_poll_signal_reset()</ref>. It thus has to be reset by the user before being passed again to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> or <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> will consider it being signaled, and will return immediately.</para>
<para><simplesect kind="note"><para>The result is stored and the &apos;signaled&apos; field is set even if this function returns an error indicating that an expiring poll was not notified. The next <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> will detect the missed raise.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>A poll signal. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the result field of the signal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal was delivered successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The polling thread&apos;s timeout is in the process of expiring. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5589" column="6" declfile="include/kernel.h" declline="5589" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_cpu_idle</definition>
        <argsstring>(void)</argsstring>
        <name>k_cpu_idle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Make the CPU idle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function makes the CPU idle until an event wakes it up.</para>
<para>In a regular system, the idle thread should be the only thread responsible for making the CPU idle and triggering any type of power management. However, in some more constrained systems, such as a single-threaded system, the only thread would be responsible for this if needed.</para>
<para><simplesect kind="note"><para>In some architectures, before returning, the function unmasks interrupts unconditionally. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5616" column="20" bodyfile="include/kernel.h" bodystart="5616" bodyend="5619"/>
      </memberdef>
      <memberdef kind="function" id="group__cpu__idle__apis_1gadf88ece6447b65b7d0d2f3a70ab4fe8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void k_cpu_atomic_idle</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>k_cpu_atomic_idle</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Make the CPU idle in an atomic fashion. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" kindref="member">k_cpu_idle()</ref>, but must be called with interrupts locked.</para>
<para>Enabling interrupts and entering a low-power mode will be atomic, i.e. there will be no period of time where interrupts are enabled before the processor enters a low-power mode.</para>
<para>After waking up from the low-power mode, the interrupt lockout state will be restored as if by <ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock(key)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt locking key obtained from <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5635" column="20" bodyfile="include/kernel.h" bodystart="5635" bodyend="5638"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1a2df4b2550ace30512cddebd36b6a54a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_float_disable</definition>
        <argsstring>(struct k_thread *thread)</argsstring>
        <name>k_float_disable</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Disable preservation of floating point context information. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine informs the kernel that the specified thread will no longer be using the floating point registers.</para>
<para><simplesect kind="warning"><para>Some architectures apply restrictions on how the disabling of floating point preservation may be requested, see arch_float_disable.</para>
</simplesect>
<simplesect kind="warning"><para>This routine should only be used to disable floating point support for a thread that currently has such support enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the floating point disabling is not implemented. -EINVAL If the floating point disabling could not be performed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5764" column="6" declfile="include/kernel.h" declline="5764" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1a81fb955ddd41658a9aad5c083f173f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_float_enable</definition>
        <argsstring>(struct k_thread *thread, unsigned int options)</argsstring>
        <name>k_float_enable</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Enable preservation of floating point context information. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine informs the kernel that the specified thread will use the floating point registers.</para>
<para>Invoking this routine initializes the thread&apos;s floating point context info to that of an FPU that has been reset. The next time the thread is scheduled by z_swap() it will either inherit an FPU that is guaranteed to be in a &quot;sane&quot; state (if the most recent user of the FPU was cooperatively swapped out) or the thread&apos;s own floating point context will be loaded (if the most recent user of the FPU was preempted, or if this thread is the first user of the FPU). Thereafter, the kernel will protect the thread&apos;s FP context so that it is not altered during a preemptive context switch.</para>
<para>The <emphasis>options</emphasis> parameter indicates which floating point register sets will be used by the specified thread.</para>
<para>For x86 options:</para>
<para><itemizedlist>
<listitem><para>K_FP_REGS indicates x87 FPU and MMX registers only</para>
</listitem><listitem><para>K_SSE_REGS indicates SSE registers (and also x87 FPU and MMX registers)</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>Some architectures apply restrictions on how the enabling of floating point preservation may be requested, see arch_float_enable.</para>
</simplesect>
<simplesect kind="warning"><para>This routine should only be used to enable floating point support for a thread that currently has such support enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>architecture dependent options</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the floating point enabling is not implemented. -EINVAL If the floating point enabling could not be performed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5804" column="6" declfile="include/kernel.h" declline="5804" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_runtime_stats_get</definition>
        <argsstring>(k_tid_t thread, k_thread_runtime_stats_t *stats)</argsstring>
        <name>k_thread_runtime_stats_get</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type><ref refid="kernel_2thread_8h_1a887f70695cd229ea8f30ea3e1faf45cf" kindref="member">k_thread_runtime_stats_t</ref> *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Get the runtime statistics of a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct to copy statistics into. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if null pointers, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5813" column="5" declfile="include/kernel.h" declline="5813" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1abd855bb83b3be393b46833e7854a193e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_runtime_stats_all_get</definition>
        <argsstring>(k_thread_runtime_stats_t *stats)</argsstring>
        <name>k_thread_runtime_stats_all_get</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a887f70695cd229ea8f30ea3e1faf45cf" kindref="member">k_thread_runtime_stats_t</ref> *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Get the runtime statistics of all threads. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct to copy statistics into. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if null pointers, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5822" column="5" declfile="include/kernel.h" declline="5822" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1a3e52beb93fca2231d5860fe1cf1181fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_runtime_stats_enable</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_runtime_stats_enable</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Enable gathering of runtime statistics for specified thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine enables the gathering of runtime statistics for the specified thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if invalid thread ID, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5833" column="12" declfile="include/kernel.h" declline="5833" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1ae5ea2e05a602b7d5ee78a65ced61d63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_thread_runtime_stats_disable</definition>
        <argsstring>(k_tid_t thread)</argsstring>
        <name>k_thread_runtime_stats_disable</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Disable gathering of runtime statistics for specified thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine disables the gathering of runtime statistics for the specified thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if invalid thread ID, otherwise 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5844" column="12" declfile="include/kernel.h" declline="5844" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1a54f2652ba1ed613219941eaaf193180c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sys_runtime_stats_enable</definition>
        <argsstring>(void)</argsstring>
        <name>k_sys_runtime_stats_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable gathering of system runtime statistics. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine enables the gathering of system runtime statistics. Note that it does not affect the gathering of similar statistics for individual threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5853" column="13" declfile="include/kernel.h" declline="5853" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="include_2kernel_8h_1a2e3c96c0b11108ee7eca3f0666c780e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sys_runtime_stats_disable</definition>
        <argsstring>(void)</argsstring>
        <name>k_sys_runtime_stats_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable gathering of system runtime statistics. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine disables the gathering of system runtime statistics. Note that it does not affect the gathering of similar statistics for individual threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5862" column="13" declfile="include/kernel.h" declline="5862" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public kernel APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Wind<sp/>River<sp/>Systems,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_KERNEL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_KERNEL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_ASMLANGUAGE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="kernel__includes_8h" kindref="compound">kernel_includes.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="errno_8h" kindref="compound">errno.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="limits_8h" kindref="compound">limits.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tracing__macros_8h" kindref="compound">tracing/tracing_macros.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="include_2kernel_8h_1ac627cc4c3da16be4b74f0a4ab036a603" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_ANY<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="include_2kernel_8h_1ab489ddac3ff8aace22e1c011dd040415" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_END<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONFIG_NUM_COOP_PRIORITIES<sp/>+<sp/>CONFIG_NUM_PREEMPT_PRIORITIES<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Zero<sp/>available<sp/>thread<sp/>priorities<sp/>defined!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_PRIO_COOP(x)<sp/>(-(CONFIG_NUM_COOP_PRIORITIES<sp/>-<sp/>(x)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_PRIO_PREEMPT(x)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="include_2kernel_8h_1a5fd4365cb6e8742e750b5e4950fb1e47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_HIGHEST_THREAD_PRIO<sp/>(-CONFIG_NUM_COOP_PRIORITIES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="include_2kernel_8h_1afa4bcc2fdfea5cd7c63d56f476b1b32f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_LOWEST_THREAD_PRIO<sp/>CONFIG_NUM_PREEMPT_PRIORITIES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="include_2kernel_8h_1a8f3f1d910dd847f0b223a4aa00788fa2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_IDLE_PRIO<sp/>K_LOWEST_THREAD_PRIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="include_2kernel_8h_1ab326c7eb1d248650e6017dcaee8d24b2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_HIGHEST_APPLICATION_THREAD_PRIO<sp/>(K_HIGHEST_THREAD_PRIO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="include_2kernel_8h_1ad4c2df561988fa1194c2f8c768d667cd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_LOWEST_APPLICATION_THREAD_PRIO<sp/>(K_LOWEST_THREAD_PRIO<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_POLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_POLL_EVENT_OBJ_INIT(obj)<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.poll_events<sp/>=<sp/>SYS_DLIST_STATIC_INIT(&amp;obj.poll_events),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_POLL_EVENT<sp/>sys_dlist_t<sp/>poll_events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_POLL_EVENT_OBJ_INIT(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_POLL_EVENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__msgq" kindref="compound">k_msgq</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mbox" kindref="compound">k_mbox</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__pipe" kindref="compound">k_pipe</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_queue;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__fifo" kindref="compound">k_fifo</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__lifo" kindref="compound">k_lifo</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_mem_slab;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_mem_pool;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_timer;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__futex" kindref="compound">k_futex</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__event" kindref="compound">k_event</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779c" kindref="member">execution_context_types</ref><sp/>{</highlight></codeline>
<codeline lineno="81" refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779ca30593044743695f8184a157283dac4d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779ca30593044743695f8184a157283dac4d5" kindref="member">K_ISR</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="82" refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779ca62c0b731a1bb3c5e4aadeba3f93df58b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779ca62c0b731a1bb3c5e4aadeba3f93df58b" kindref="member">K_COOP_THREAD</ref>,</highlight></codeline>
<codeline lineno="83" refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779cae84f57f4ac996c751d1f4c9e49789322" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1ab0b42f9804777dfa5fed2b7cd866779cae84f57f4ac996c751d1f4c9e49789322" kindref="member">K_PREEMPT_THREAD</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>private,<sp/>used<sp/>by<sp/>k_poll<sp/>and<sp/>k_work_poll<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_work_poll;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*_poller_cb_t)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/>*event,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group__thread__apis_1gaf9f23a6ff9dae76af56f25b373e74c75" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__thread__apis_1gaf9f23a6ff9dae76af56f25b373e74c75" kindref="member">k_thread_user_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach</ref>(<ref refid="group__thread__apis_1gaf9f23a6ff9dae76af56f25b373e74c75" kindref="member">k_thread_user_cb_t</ref><sp/>user_cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" kindref="member">k_thread_foreach_unlocked</ref>(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gaf9f23a6ff9dae76af56f25b373e74c75" kindref="member">k_thread_user_cb_t</ref><sp/>user_cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>Thread<sp/>user<sp/>options.<sp/>May<sp/>be<sp/>needed<sp/>by<sp/>assembly<sp/>code.<sp/>Common<sp/>part<sp/>uses<sp/>low</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>bits,<sp/>arch-specific<sp/>use<sp/>high<sp/>bits.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="group__thread__apis_1gad503fbcca905a9266b0e154e3ded258c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_ESSENTIAL<sp/>(BIT(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FPU_SHARING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="group__thread__apis_1gab18cf1e8728e7adf53db2ae4bbcdd951" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_FP_REGS<sp/>(BIT(1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_USER<sp/>(BIT(2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_INHERIT_PERMS<sp/>(BIT(3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="group__thread__apis_1gacbdb579370978fe07e4a863a84bd8bee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_CALLBACK_STATE<sp/>(BIT(4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_X86</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>x86<sp/>Bitmask<sp/>definitions<sp/>for<sp/>threads<sp/>user<sp/>options<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FPU_SHARING)<sp/>&amp;&amp;<sp/>defined(CONFIG_X86_SSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_SSE_REGS<sp/>(BIT(7))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>end<sp/>-<sp/>thread<sp/>options<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_ASMLANGUAGE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*new_thread,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stack_size,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref><sp/><ref refid="structk__thread_1a63d78888376893fe0bdb485c5f114e03" kindref="member">entry</ref>,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>options,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>delay);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>FUNC_NORETURN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter</ref>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref><sp/><ref refid="structk__thread_1a63d78888376893fe0bdb485c5f114e03" kindref="member">entry</ref>,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_thread_access_grant(thread,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOR_EACH_FIXED_ARG(k_object_access_grant,<sp/>(;),<sp/>thread,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="group__thread__apis_1ga3f46c06833add2a2e0ddb7242f06702c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga3f46c06833add2a2e0ddb7242f06702c" kindref="member">k_thread_heap_assign</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/>*heap)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>-&gt;<ref refid="structk__thread_1a35b859bded3a270f25ccc40efece7583" kindref="member">resource_pool</ref><sp/>=<sp/>heap;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_INIT_STACKS)<sp/>&amp;&amp;<sp/>defined(CONFIG_THREAD_STACK_INFO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_thread_stack_space_get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*unused_ptr);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(CONFIG_HEAP_MEM_POOL_SIZE<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="group__thread__apis_1ga220d22dc35115fcdc0badb262e7a019d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga220d22dc35115fcdc0badb262e7a019d" kindref="member">k_thread_system_pool_assign</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(CONFIG_HEAP_MEM_POOL_SIZE<sp/>&gt;<sp/>0)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(<ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="kobject_8c_1a14afa64cf434f39c0f93fedf0e2616d9" kindref="member">ms</ref>)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(Z_TIMEOUT_MS(<ref refid="kobject_8c_1a14afa64cf434f39c0f93fedf0e2616d9" kindref="member">ms</ref>));</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="group__thread__apis_1gaeac56bb072ce295b9fdc372ab8cee67e" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__thread__apis_1gaeac56bb072ce295b9fdc372ab8cee67e" kindref="member">k_usleep</ref>(<ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/>us);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>usec_to_wait);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="group__thread__apis_1ga08a3484c33444ecedc2d71d78495a295" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga08a3484c33444ecedc2d71d78495a295" kindref="member">k_yield</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">__attribute_const__</highlight></codeline>
<codeline lineno="495"><highlight class="normal">__syscall<sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/>z_current_get(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_THREAD_LOCAL_STORAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Thread-local<sp/>cache<sp/>of<sp/>current<sp/>thread<sp/>ID,<sp/>set<sp/>in<sp/>z_thread_entry()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>__thread<sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/>z_tls_current;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">__attribute_const__</highlight></codeline>
<codeline lineno="509" refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_THREAD_LOCAL_STORAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_tls_current;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_current_get();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" kindref="member">k_thread_start</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/>z_timeout_expires(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_timeout<sp/>*<ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/>z_timeout_remaining(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_timeout<sp/>*<ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SYS_CLOCK_EXISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="group__thread__apis_1ga80013f10d12ccdffbbd88cee048f1c21" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__thread__apis_1ga80013f10d12ccdffbbd88cee048f1c21" kindref="member">k_thread_timeout_expires_ticks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/>z_impl_k_thread_timeout_expires_ticks(</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_timeout_expires(&amp;<ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>-&gt;<ref refid="structk__thread_1a09a988f143ab5c4df887894920ff9df8" kindref="member">base</ref>.timeout);</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="group__thread__apis_1ga4cb4126c8e4f62bd44f3dd03f2e4a423" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__thread__apis_1ga4cb4126c8e4f62bd44f3dd03f2e4a423" kindref="member">k_thread_timeout_remaining_ticks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/>z_impl_k_thread_timeout_remaining_ticks(</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_timeout_remaining(&amp;<ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>-&gt;<ref refid="structk__thread_1a09a988f143ab5c4df887894920ff9df8" kindref="member">base</ref>.timeout);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SYS_CLOCK_EXISTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>timeout<sp/>has<sp/>timed<sp/>out<sp/>and<sp/>is<sp/>not<sp/>on<sp/>_timeout_q<sp/>anymore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_EXPIRED<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_static_thread_data<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*init_thread;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/>*init_stack;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_stack_size;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref><sp/><ref refid="structinit__entry" kindref="compound">init_entry</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*init_p1;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*init_p2;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*init_p3;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__sched__timeslice__and__lock_8c_1aeb42338ae4548ede7fc2a53704df7882" kindref="member">init_prio</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>init_options;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/>init_delay;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*init_abort)(void);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*init_name;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_THREAD_INITIALIZER(thread,<sp/>stack,<sp/>stack_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry,<sp/>p1,<sp/>p2,<sp/>p3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prio,<sp/>options,<sp/>delay,<sp/>abort,<sp/>tname)<sp/><sp/>\</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_thread<sp/>=<sp/>(thread),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_stack<sp/>=<sp/>(stack),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="620"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_stack_size<sp/>=<sp/>(stack_size),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_entry<sp/>=<sp/>(k_thread_entry_t)entry,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_p1<sp/>=<sp/>(void<sp/>*)p1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="623"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_p2<sp/>=<sp/>(void<sp/>*)p2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_p3<sp/>=<sp/>(void<sp/>*)p3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_prio<sp/>=<sp/>(prio),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_options<sp/>=<sp/>(options),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_delay<sp/>=<sp/>(delay),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_abort<sp/>=<sp/>(abort),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_name<sp/>=<sp/>STRINGIFY(tname),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="group__thread__apis_1gab3ced58648ca35788a40676e8478ecd2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_THREAD_DEFINE(name,<sp/>stack_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="666"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry,<sp/>p1,<sp/>p2,<sp/>p3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="667"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prio,<sp/>options,<sp/>delay)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_THREAD_STACK_DEFINE(_k_thread_stack_##name,<sp/>stack_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>k_thread<sp/>_k_thread_obj_##name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(_static_thread_data,<sp/>_k_thread_data_##name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_THREAD_INITIALIZER(&amp;_k_thread_obj_##name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_k_thread_stack_##name,<sp/>stack_size,<sp/><sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>prio,<sp/>options,<sp/>delay,<sp/>\</highlight></codeline>
<codeline lineno="674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>k_tid_t<sp/>name<sp/>=<sp/>(k_tid_t)&amp;_k_thread_obj_##name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="686" refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SCHED_DEADLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="group__thread__apis_1gad887f16c1dd6f3247682a83beb22d1ce" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1gad887f16c1dd6f3247682a83beb22d1ce" kindref="member">k_thread_deadline_set</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deadline);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SCHED_CPU_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="group__thread__apis_1ga80b9c58df6600c7e79f16756c128f44c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga80b9c58df6600c7e79f16756c128f44c" kindref="member">k_thread_cpu_mask_clear</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="779" refid="group__thread__apis_1gaedcfeb0964ae72611791241580b2119d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1gaedcfeb0964ae72611791241580b2119d" kindref="member">k_thread_cpu_mask_enable_all</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="group__thread__apis_1ga306587604a7496db8059bd395fd90fc0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga306587604a7496db8059bd395fd90fc0" kindref="member">k_thread_cpu_mask_enable</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="807" refid="group__thread__apis_1ga89e6c07ac112da75b2ef115d1a557d44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga89e6c07ac112da75b2ef115d1a557d44" kindref="member">k_thread_cpu_mask_disable</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="825" refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="837" refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="group__thread__apis_1ga877c1bfeffbf8f097d1656f9e10a66e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga877c1bfeffbf8f097d1656f9e10a66e8" kindref="member">k_sched_time_slice_set</ref>(<ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/>slice,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="885" refid="group__isr__apis_1ga8482b0dd2283d12677a9ebe321667d16" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__isr__apis_1ga8482b0dd2283d12677a9ebe321667d16" kindref="member">k_is_in_isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="903" refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="916" refid="group__isr__apis_1gae74e5de996276df767b96d4b50fa47ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__isr__apis_1gae74e5de996276df767b96d4b50fa47ea" kindref="member">k_is_pre_kernel</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>z_sys_post_kernel;<sp/></highlight><highlight class="comment">/*<sp/>in<sp/>init.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!z_sys_post_kernel;</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="948" refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="971" refid="group__thread__apis_1ga4834d9b81ed60c00eee77b0d4f8ab9e4" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga4834d9b81ed60c00eee77b0d4f8ab9e4" kindref="member">k_thread_custom_data_set</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="980" refid="group__thread__apis_1ga19af063cff7b306ba28062996922740d" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__thread__apis_1ga19af063cff7b306ba28062996922740d" kindref="member">k_thread_custom_data_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005" refid="group__thread__apis_1gadebf45da56dee393164569742459dc0a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__thread__apis_1gadebf45da56dee393164569742459dc0a" kindref="member">k_thread_name_get</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018" refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029" refid="group__thread__apis_1gae36c37d54522fbf8d9a34b93991e51ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__thread__apis_1gae36c37d54522fbf8d9a34b93991e51ca" kindref="member">k_thread_state_str</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/>thread_id);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048" refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_NO_WAIT<sp/>Z_TIMEOUT_NO_WAIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="group__clock__apis_1gae2f3a80170afc5fbce0337cdf5a4ce4c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_NSEC(t)<sp/><sp/><sp/><sp/><sp/>Z_TIMEOUT_NS(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076" refid="group__clock__apis_1ga91198e325210ec052a8308e642058c0b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_USEC(t)<sp/><sp/><sp/><sp/><sp/>Z_TIMEOUT_US(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088" refid="group__clock__apis_1gab41f59fd2b724cb1279e4f6821154b33" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_CYC(t)<sp/><sp/><sp/><sp/><sp/>Z_TIMEOUT_CYC(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100" refid="group__clock__apis_1gaeda983960bd25f1dba7a386ad720e395" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_TICKS(t)<sp/><sp/><sp/><sp/><sp/>Z_TIMEOUT_TICKS(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112" refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MSEC(ms)<sp/><sp/><sp/><sp/><sp/>Z_TIMEOUT_MS(ms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124" refid="group__clock__apis_1gadc361472aea59267f6ea38f5e7c7ca2a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_SECONDS(s)<sp/><sp/><sp/>K_MSEC((s)<sp/>*<sp/>MSEC_PER_SEC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136" refid="group__clock__apis_1gaef02f20d4d2ebfc9aa29acae01bd3698" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MINUTES(m)<sp/><sp/><sp/>K_SECONDS((m)<sp/>*<sp/>60)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="group__clock__apis_1gaa9e0cd890db28965b66d4bc5d719a91f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_HOURS(h)<sp/><sp/><sp/><sp/><sp/>K_MINUTES((h)<sp/>*<sp/>60)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158" refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_FOREVER<sp/>Z_FOREVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_TIMEOUT_64BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_TIMEOUT_ABS_TICKS(t)<sp/>\</highlight></codeline>
<codeline lineno="1174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_TIMEOUT_TICKS(Z_TICK_ABS((k_ticks_t)MAX(t,<sp/>0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_TIMEOUT_ABS_MS(t)<sp/>K_TIMEOUT_ABS_TICKS(k_ms_to_ticks_ceil64(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_TIMEOUT_ABS_US(t)<sp/>K_TIMEOUT_ABS_TICKS(k_us_to_ticks_ceil64(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_TIMEOUT_ABS_NS(t)<sp/>K_TIMEOUT_ABS_TICKS(k_ns_to_ticks_ceil64(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_TIMEOUT_ABS_CYC(t)<sp/>K_TIMEOUT_ABS_TICKS(k_cyc_to_ticks_ceil64(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_timer<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>_timeout<sp/>structure<sp/>must<sp/>be<sp/>first<sp/>here<sp/>if<sp/>we<sp/>want<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>dynamic<sp/>timer<sp/>allocation.<sp/>timeout.node<sp/>is<sp/>used<sp/>in<sp/>the<sp/>double-linked</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>list<sp/>of<sp/>free<sp/>timers</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_timeout<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>queue<sp/>for<sp/>the<sp/>(single)<sp/>thread<sp/>waiting<sp/>on<sp/>this<sp/>timer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/>wait_q;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>runs<sp/>in<sp/>ISR<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*expiry_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>runs<sp/>in<sp/>the<sp/>context<sp/>of<sp/>the<sp/>thread<sp/>that<sp/>calls<sp/>k_timer_stop()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*stop_fn)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>timer<sp/>period<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>period;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>timer<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>status;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>user-specific<sp/>data,<sp/>also<sp/>used<sp/>to<sp/>support<sp/>legacy<sp/>features<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(k_timer)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_TIMER_INITIALIZER(obj,<sp/>expiry,<sp/>stop)<sp/>\</highlight></codeline>
<codeline lineno="1271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.timeout<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.node<sp/>=<sp/>{},\</highlight></codeline>
<codeline lineno="1274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.fn<sp/>=<sp/>z_timer_expiration_handler,<sp/>\</highlight></codeline>
<codeline lineno="1275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dticks<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="1276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="1277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/>\</highlight></codeline>
<codeline lineno="1278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expiry_fn<sp/>=<sp/>expiry,<sp/>\</highlight></codeline>
<codeline lineno="1279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stop_fn<sp/>=<sp/>stop,<sp/>\</highlight></codeline>
<codeline lineno="1280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.status<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="1281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.user_data<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="1282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304" refid="group__timer__apis_1ga37bcd42a457855a68b74570c979ababa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__timer__apis_1ga37bcd42a457855a68b74570c979ababa" kindref="member">k_timer_expiry_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320" refid="group__timer__apis_1ga16fbd44c08a26c4fdeb7f542f2a03a15" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__timer__apis_1ga16fbd44c08a26c4fdeb7f542f2a03a15" kindref="member">k_timer_stop_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333" refid="group__timer__apis_1gaa267fcb0a2e18cd0da29e9f9612510a6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_TIMER_DEFINE(name,<sp/>expiry_fn,<sp/>stop_fn)<sp/>\</highlight></codeline>
<codeline lineno="1334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_timer,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="1335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_TIMER_INITIALIZER(name,<sp/>expiry_fn,<sp/>stop_fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346" refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" kindref="member">k_timer_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>,</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__timer__apis_1ga37bcd42a457855a68b74570c979ababa" kindref="member">k_timer_expiry_t</ref><sp/>expiry_fn,</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__timer__apis_1ga16fbd44c08a26c4fdeb7f542f2a03a15" kindref="member">k_timer_stop_t</ref><sp/>stop_fn);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364" refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" kindref="member">k_timer_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>duration,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>period);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383" refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397" refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" kindref="member">k_timer_status_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416" refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" kindref="member">k_timer_status_sync</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SYS_CLOCK_EXISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430" refid="group__timer__apis_1ga022b4cf5c8d0ee21b6a3b04fd425533f" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__timer__apis_1ga022b4cf5c8d0ee21b6a3b04fd425533f" kindref="member">k_timer_expires_ticks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/>z_impl_k_timer_expires_ticks(</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>)</highlight></codeline>
<codeline lineno="1434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_timeout_expires(&amp;<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>-&gt;timeout);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445" refid="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" kindref="member">k_timer_remaining_ticks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/>z_impl_k_timer_remaining_ticks(</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_timeout_remaining(&amp;<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>-&gt;timeout);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463" refid="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" kindref="member">k_timer_remaining_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>)</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="time__units_8h_1a9c1fcba23d4d8fc10db9b9ec6fc4a9aa" kindref="member">k_ticks_to_ms_floor32</ref>(<ref refid="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" kindref="member">k_timer_remaining_ticks</ref>(<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SYS_CLOCK_EXISTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482" refid="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" kindref="member">k_timer_user_data_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_impl_k_timer_user_data_set(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>-&gt;user_data<sp/>=<sp/><ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500" refid="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" kindref="member">k_timer_user_data_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*z_impl_k_timer_user_data_get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_timer<sp/>*<ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="timeout__order_8c_1a1aea163f91df5b08c53c40e2cb68e242" kindref="member">timer</ref>-&gt;user_data;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524" refid="group__clock__apis_1ga8f143af2ee4ad42d9f7817ef161cbd13" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref><sp/><ref refid="group__clock__apis_1ga8f143af2ee4ad42d9f7817ef161cbd13" kindref="member">k_uptime_ticks</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539" refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref><sp/><ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="time__units_8h_1a828a817b2dbade336bc9934576984490" kindref="member">k_ticks_to_ms_floor64</ref>(<ref refid="group__clock__apis_1ga8f143af2ee4ad42d9f7817ef161cbd13" kindref="member">k_uptime_ticks</ref>());</highlight></codeline>
<codeline lineno="1542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563" refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)<ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get</ref>();</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579" refid="group__clock__apis_1gad748b2fe83b36884dc087b4af367de80" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref><sp/><ref refid="group__clock__apis_1gad748b2fe83b36884dc087b4af367de80" kindref="member">k_uptime_delta</ref>(<ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref><sp/>*reftime)</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref><sp/>uptime,<sp/>delta;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uptime<sp/>=<sp/><ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get</ref>();</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>uptime<sp/>-<sp/>*reftime;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*reftime<sp/>=<sp/>uptime;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598" refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="arc_2v2_2misc_8h_1a9ee9f897ec750957de45bf8d43349d5e" kindref="member">arch_k_cycle_get_32</ref>();</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613" refid="group__clock__apis_1gae09f509d02bf75a7b45d2800d823bb3a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__clock__apis_1gae09f509d02bf75a7b45d2800d823bb3a" kindref="member">k_cycle_get_64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_TIMER_HAS_64BIT_CYCLE_COUNTER))<sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT(0,<sp/></highlight><highlight class="stringliteral">&quot;64-bit<sp/>cycle<sp/>counter<sp/>not<sp/>enabled<sp/>on<sp/>this<sp/>platform.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;See<sp/>CONFIG_TIMER_HAS_64BIT_CYCLE_COUNTER&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="arc_2v2_2misc_8h_1acc1ed8d949f694a1d39e389334caf971" kindref="member">arch_k_cycle_get_64</ref>();</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_queue<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>data_q;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/>wait_q;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_EVENT;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(k_queue)</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_QUEUE_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="1643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1644"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_q<sp/>=<sp/>SYS_SFLIST_STATIC_INIT(&amp;obj.data_q),<sp/>\</highlight></codeline>
<codeline lineno="1645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lock<sp/>=<sp/>{<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="1646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_EVENT_OBJ_INIT(obj)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*z_queue_node_peek(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_free);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669" refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684" refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" kindref="member">k_queue_cancel_wait</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698" refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716" refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730" refid="group__queue__apis_1ga8ce013d8a037d4be5078797e0050e9c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1ga8ce013d8a037d4be5078797e0050e9c6" kindref="member">k_queue_prepend</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748" refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763" refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" kindref="member">k_queue_insert</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*prev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783" refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" kindref="member">k_queue_append_list</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*head,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tail);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800" refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref><sp/>*list);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820" refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838" refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" kindref="member">k_queue_remove</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854" refid="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" kindref="member">k_queue_unique_append</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869" refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_k_queue_is_empty(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>)</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="group__flagged-single-linked-list__apis_1gac506235a9df89a7a52631e9990ceaad5" kindref="member">sys_sflist_is_empty</ref>(&amp;<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>-&gt;data_q);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885" refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" kindref="member">k_queue_peek_head</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896" refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" kindref="member">k_queue_peek_tail</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_queue<sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907" refid="group__queue__apis_1gacd0bc309f0147d4669f65fafa87e0e70" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_QUEUE_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="1908"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_queue,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="1909"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_QUEUE_INITIALIZER(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923" refid="structk__futex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__futex" kindref="compound">k_futex</ref><sp/>{</highlight></codeline>
<codeline lineno="1924" refid="structk__futex_1a454ad1b595b899306c8e9c8e1431e7a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="structk__futex_1a454ad1b595b899306c8e9c8e1431e7a7" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_futex_data<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/>wait_q;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FUTEX_DATA_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="1940"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1941"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q)<sp/>\</highlight></codeline>
<codeline lineno="1942"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969" refid="group__futex__apis_1ga596bfa265f88567ad9e80fd38cd433d3" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__futex__apis_1ga596bfa265f88567ad9e80fd38cd433d3" kindref="member">k_futex_wait</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__futex" kindref="compound">k_futex</ref><sp/>*futex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__init_2src_2main_8c_1aa871625e1e2bdbe5f1d0fede91d1ea26" kindref="member">expected</ref>,</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986" refid="group__futex__apis_1ga62de1aeb7c5c273aed20d0e05336d7a0" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__futex__apis_1ga62de1aeb7c5c273aed20d0e05336d7a0" kindref="member">k_futex_wake</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__futex" kindref="compound">k_futex</ref><sp/>*futex,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wake_all);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002" refid="structk__event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__event" kindref="compound">k_event</ref><sp/>{</highlight></codeline>
<codeline lineno="2003" refid="structk__event_1a5bacd5f2d34da646d9d7ee229842e432" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__event_1a5bacd5f2d34da646d9d7ee229842e432" kindref="member">wait_q</ref>;</highlight></codeline>
<codeline lineno="2004" refid="structk__event_1a54c6f5997132e88406ffa5bcc0a10b83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__event_1a54c6f5997132e88406ffa5bcc0a10b83" kindref="member">events</ref>;</highlight></codeline>
<codeline lineno="2005" refid="structk__event_1a1f0de9c69f29ad854f3b0d510ceb1efc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="structk__event_1a1f0de9c69f29ad854f3b0d510ceb1efc" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_EVENT_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="2009"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2010"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/>\</highlight></codeline>
<codeline lineno="2011"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.events<sp/>=<sp/>0<sp/>\</highlight></codeline>
<codeline lineno="2012"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021" refid="group__event__apis_1gacf803590b39b095056f2b1c5090c4019" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__event__apis_1gacf803590b39b095056f2b1c5090c4019" kindref="member">k_event_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__event" kindref="compound">k_event</ref><sp/>*event);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036" refid="group__event__apis_1gaa5587377200d81deb33c5e5ca72aecc3" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__event__apis_1gaa5587377200d81deb33c5e5ca72aecc3" kindref="member">k_event_post</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__event" kindref="compound">k_event</ref><sp/>*event,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>events);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051" refid="group__event__apis_1ga4b534f62467fe537d1f06e04705122af" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__event__apis_1ga4b534f62467fe537d1f06e04705122af" kindref="member">k_event_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__event" kindref="compound">k_event</ref><sp/>*event,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>events);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074" refid="group__event__apis_1ga0f83f5f034e13bab65149fb90b87a753" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__event__apis_1ga0f83f5f034e13bab65149fb90b87a753" kindref="member">k_event_wait</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__event" kindref="compound">k_event</ref><sp/>*event,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>events,</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reset,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098" refid="group__event__apis_1gaddd60a99de5ac3d84f643c9433b744c1" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__event__apis_1gaddd60a99de5ac3d84f643c9433b744c1" kindref="member">k_event_wait_all</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__event" kindref="compound">k_event</ref><sp/>*event,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>events,</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reset,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110" refid="group__event__apis_1ga093449cc6686d3235944f3faad284893" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_EVENT_DEFINE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_event,<sp/>name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_EVENT_INITIALIZER(name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116" refid="structk__fifo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__fifo" kindref="compound">k_fifo</ref><sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_queue<sp/>_queue;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FIFO_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="2124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>._queue<sp/>=<sp/>Z_QUEUE_INITIALIZER(obj._queue)<sp/>\</highlight></codeline>
<codeline lineno="2126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145" refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_init(fifo)<sp/>\</highlight></codeline>
<codeline lineno="2146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>init,<sp/>fifo);<sp/>\</highlight></codeline>
<codeline lineno="2148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_init(&amp;(fifo)-&gt;_queue);<sp/>\</highlight></codeline>
<codeline lineno="2149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>init,<sp/>fifo);<sp/>\</highlight></codeline>
<codeline lineno="2150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163" refid="group__fifo__apis_1gab744080af449e093df8dd4982e013e16" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_cancel_wait(fifo)<sp/>\</highlight></codeline>
<codeline lineno="2164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>cancel_wait,<sp/>fifo);<sp/>\</highlight></codeline>
<codeline lineno="2166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_cancel_wait(&amp;(fifo)-&gt;_queue);<sp/>\</highlight></codeline>
<codeline lineno="2167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>cancel_wait,<sp/>fifo);<sp/>\</highlight></codeline>
<codeline lineno="2168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182" refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_put(fifo,<sp/>data)<sp/>\</highlight></codeline>
<codeline lineno="2183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>put,<sp/>fifo,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_append(&amp;(fifo)-&gt;_queue,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>put,<sp/>fifo,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205" refid="group__fifo__apis_1gab1c5212040d12cbb92cede5cf54928ba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_alloc_put(fifo,<sp/>data)<sp/>\</highlight></codeline>
<codeline lineno="2206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>alloc_put,<sp/>fifo,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret<sp/>=<sp/>k_queue_alloc_append(&amp;(fifo)-&gt;_queue,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>alloc_put,<sp/>fifo,<sp/>data,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="2210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="2211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227" refid="group__fifo__apis_1ga1bf5f52290c83e54ba14358cbbb4051b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_put_list(fifo,<sp/>head,<sp/>tail)<sp/>\</highlight></codeline>
<codeline lineno="2228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>put_list,<sp/>fifo,<sp/>head,<sp/>tail);<sp/>\</highlight></codeline>
<codeline lineno="2230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_append_list(&amp;(fifo)-&gt;_queue,<sp/>head,<sp/>tail);<sp/>\</highlight></codeline>
<codeline lineno="2231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>put_list,<sp/>fifo,<sp/>head,<sp/>tail);<sp/>\</highlight></codeline>
<codeline lineno="2232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247" refid="group__fifo__apis_1ga4cdc286a7a6f0d43acab63a4846815e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_put_slist(fifo,<sp/>list)<sp/>\</highlight></codeline>
<codeline lineno="2248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>put_slist,<sp/>fifo,<sp/>list);<sp/>\</highlight></codeline>
<codeline lineno="2250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_merge_slist(&amp;(fifo)-&gt;_queue,<sp/>list);<sp/>\</highlight></codeline>
<codeline lineno="2251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>put_slist,<sp/>fifo,<sp/>list);<sp/>\</highlight></codeline>
<codeline lineno="2252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271" refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_get(fifo,<sp/>timeout)<sp/>\</highlight></codeline>
<codeline lineno="2272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>get,<sp/>fifo,<sp/>timeout);<sp/>\</highlight></codeline>
<codeline lineno="2274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*ret<sp/>=<sp/>k_queue_get(&amp;(fifo)-&gt;_queue,<sp/>timeout);<sp/>\</highlight></codeline>
<codeline lineno="2275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>get,<sp/>fifo,<sp/>timeout,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="2276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="2277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight></codeline>
<codeline lineno="2292" refid="group__fifo__apis_1gab7cec4adc128ed1fd2d194ba6cd8c640" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_is_empty(fifo)<sp/>\</highlight></codeline>
<codeline lineno="2293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_is_empty(&amp;(fifo)-&gt;_queue)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308" refid="group__fifo__apis_1ga2e0c8608f095a929740fa94c94a4f389" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_peek_head(fifo)<sp/>\</highlight></codeline>
<codeline lineno="2309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>peek_head,<sp/>fifo);<sp/>\</highlight></codeline>
<codeline lineno="2311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*ret<sp/>=<sp/>k_queue_peek_head(&amp;(fifo)-&gt;_queue);<sp/>\</highlight></codeline>
<codeline lineno="2312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>peek_head,<sp/>fifo,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="2313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="2314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327" refid="group__fifo__apis_1gafbe2ce9a6437b886cf149016187ba92f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_fifo_peek_tail(fifo)<sp/>\</highlight></codeline>
<codeline lineno="2328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_fifo,<sp/>peek_tail,<sp/>fifo);<sp/>\</highlight></codeline>
<codeline lineno="2330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*ret<sp/>=<sp/>k_queue_peek_tail(&amp;(fifo)-&gt;_queue);<sp/>\</highlight></codeline>
<codeline lineno="2331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_fifo,<sp/>peek_tail,<sp/>fifo,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="2332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="2333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344" refid="group__fifo__apis_1ga230b02a526ecb0ae1598be75cb9a8274" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_FIFO_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="2345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE_ALTERNATE(k_queue,<sp/>k_fifo,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="2346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_FIFO_INITIALIZER(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350" refid="structk__lifo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__lifo" kindref="compound">k_lifo</ref><sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_queue<sp/>_queue;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_LIFO_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="2359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>._queue<sp/>=<sp/>Z_QUEUE_INITIALIZER(obj._queue)<sp/>\</highlight></codeline>
<codeline lineno="2361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380" refid="group__lifo__apis_1ga69fb19716a9014f7de79f8e524d64a3e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_lifo_init(lifo)<sp/>\</highlight></codeline>
<codeline lineno="2381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_lifo,<sp/>init,<sp/>lifo);<sp/>\</highlight></codeline>
<codeline lineno="2383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_init(&amp;(lifo)-&gt;_queue);<sp/>\</highlight></codeline>
<codeline lineno="2384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_lifo,<sp/>init,<sp/>lifo);<sp/>\</highlight></codeline>
<codeline lineno="2385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399" refid="group__lifo__apis_1gad662e36b1df8b9013e2dc61f9dfe3a8b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_lifo_put(lifo,<sp/>data)<sp/>\</highlight></codeline>
<codeline lineno="2400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_lifo,<sp/>put,<sp/>lifo,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_queue_prepend(&amp;(lifo)-&gt;_queue,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_lifo,<sp/>put,<sp/>lifo,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422" refid="group__lifo__apis_1ga96d885a6a36fcfcb5eaa65898eee0965" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_lifo_alloc_put(lifo,<sp/>data)<sp/>\</highlight></codeline>
<codeline lineno="2423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_lifo,<sp/>alloc_put,<sp/>lifo,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret<sp/>=<sp/>k_queue_alloc_prepend(&amp;(lifo)-&gt;_queue,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="2426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_lifo,<sp/>alloc_put,<sp/>lifo,<sp/>data,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="2427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="2428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447" refid="group__lifo__apis_1gad5f1775947b07a2a77f667aa9e41db5a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_lifo_get(lifo,<sp/>timeout)<sp/>\</highlight></codeline>
<codeline lineno="2448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="2449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_lifo,<sp/>get,<sp/>lifo,<sp/>timeout);<sp/>\</highlight></codeline>
<codeline lineno="2450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*ret<sp/>=<sp/>k_queue_get(&amp;(lifo)-&gt;_queue,<sp/>timeout);<sp/>\</highlight></codeline>
<codeline lineno="2451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_lifo,<sp/>get,<sp/>lifo,<sp/>timeout,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="2452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="2453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464" refid="group__lifo__apis_1gaebd450d4181f22491623ea0aed6ee576" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_LIFO_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="2465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE_ALTERNATE(k_queue,<sp/>k_lifo,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="2466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_LIFO_INITIALIZER(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_STACK_FLAG_ALLOC<sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)1)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffer<sp/>was<sp/>allocated<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>stack_data_t;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_stack<sp/>{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/>wait_q;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>*base,<sp/>*next,<sp/>*top;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(k_stack)</highlight></codeline>
<codeline lineno="2485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_STACK_INITIALIZER(obj,<sp/>stack_buffer,<sp/>stack_num_entries)<sp/>\</highlight></codeline>
<codeline lineno="2488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.base<sp/>=<sp/>stack_buffer,<sp/>\</highlight></codeline>
<codeline lineno="2491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.next<sp/>=<sp/>stack_buffer,<sp/>\</highlight></codeline>
<codeline lineno="2492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.top<sp/>=<sp/>stack_buffer<sp/>+<sp/>stack_num_entries,<sp/>\</highlight></codeline>
<codeline lineno="2493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514" refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" kindref="member">k_stack_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_entries);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532" refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_entries);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546" refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561" refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" kindref="member">k_stack_push</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,<sp/>stack_data_t<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583" refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" kindref="member">k_stack_pop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_stack<sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,<sp/>stack_data_t<sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596" refid="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_STACK_DEFINE(name,<sp/>stack_num_entries)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_data_t<sp/>__noinit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2598"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_k_stack_buf_##name[stack_num_entries];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2599"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_stack,<sp/>name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2600"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_STACK_INITIALIZER(name,<sp/>_k_stack_buf_##name,<sp/>\</highlight></codeline>
<codeline lineno="2601"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_num_entries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref>;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__q" kindref="compound">k_work_q</ref>;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__queue__config" kindref="compound">k_work_queue_config</ref>;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref>;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>k_sys_work_q;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629" refid="structk__mutex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>{</highlight></codeline>
<codeline lineno="2631" refid="structk__mutex_1a4add234295bceff22551ee74f3aed802" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__mutex_1a4add234295bceff22551ee74f3aed802" kindref="member">wait_q</ref>;</highlight></codeline>
<codeline lineno="2633" refid="structk__mutex_1af910bb07dc99e50078de26fccca468e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="structk__mutex_1af910bb07dc99e50078de26fccca468e4" kindref="member">owner</ref>;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636" refid="structk__mutex_1a0db401fc8e03e1f984b8fd15af974718" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__mutex_1a0db401fc8e03e1f984b8fd15af974718" kindref="member">lock_count</ref>;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639" refid="structk__mutex_1ab0d16fac9f8af960a501ffd93ec08c80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structk__mutex_1ab0d16fac9f8af960a501ffd93ec08c80" kindref="member">owner_orig_prio</ref>;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(<ref refid="structk__mutex" kindref="compound">k_mutex</ref>)</highlight></codeline>
<codeline lineno="2642"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_MUTEX_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="2648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/>\</highlight></codeline>
<codeline lineno="2650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.owner<sp/>=<sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="2651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lock_count<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="2652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.owner_orig_prio<sp/>=<sp/>K_LOWEST_APPLICATION_THREAD_PRIO,<sp/>\</highlight></codeline>
<codeline lineno="2653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2668" refid="group__mutex__apis_1gab6f3d98fabbdc0918bbc9934d61d63f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MUTEX_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="2669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_mutex,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="2670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_MUTEX_INITIALIZER(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684" refid="group__mutex__apis_1ga56b64952fb8b78b00268a21c28b41480" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mutex__apis_1ga56b64952fb8b78b00268a21c28b41480" kindref="member">k_mutex_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708" refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" kindref="member">k_mutex_lock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730" refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" kindref="member">k_mutex_unlock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737" refid="structk__condvar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__condvar" kindref="compound">k_condvar</ref><sp/>{</highlight></codeline>
<codeline lineno="2738" refid="structk__condvar_1a14b457a06420f093e779d569f4fea906" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__condvar_1a14b457a06420f093e779d569f4fea906" kindref="member">wait_q</ref>;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_CONDVAR_INITIALIZER(obj)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2744"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758" refid="group__condvar__apis_1gac9b497c56cc4642965afa6c0c6d7ecfc" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__condvar__apis_1gac9b497c56cc4642965afa6c0c6d7ecfc" kindref="member">k_condvar_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__condvar" kindref="compound">k_condvar</ref><sp/>*condvar);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766" refid="group__condvar__apis_1ga0376a8f7dc6e4f1e1eed55940f43015b" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__condvar__apis_1ga0376a8f7dc6e4f1e1eed55940f43015b" kindref="member">k_condvar_signal</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__condvar" kindref="compound">k_condvar</ref><sp/>*condvar);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775" refid="group__condvar__apis_1gad2e46a7b9e1bc934fd1f5cb38dde40d8" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__condvar__apis_1gad2e46a7b9e1bc934fd1f5cb38dde40d8" kindref="member">k_condvar_broadcast</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__condvar" kindref="compound">k_condvar</ref><sp/>*condvar);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794" refid="group__condvar__apis_1gab2e1d05db4f954755f430ca894e44dbc" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__condvar__apis_1gab2e1d05db4f954755f430ca894e44dbc" kindref="member">k_condvar_wait</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__condvar" kindref="compound">k_condvar</ref><sp/>*condvar,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>,</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807" refid="group__condvar__apis_1ga770816651e25f7e7dae992a0b2260c21" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_CONDVAR_DEFINE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_condvar,<sp/>name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_CONDVAR_INITIALIZER(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/>{</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/>wait_q;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_EVENT;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(k_sem)</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SEM_INITIALIZER(obj,<sp/>initial_count,<sp/>count_limit)<sp/>\</highlight></codeline>
<codeline lineno="2830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/>\</highlight></codeline>
<codeline lineno="2832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count<sp/>=<sp/>initial_count,<sp/>\</highlight></codeline>
<codeline lineno="2833"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.limit<sp/>=<sp/>count_limit,<sp/>\</highlight></codeline>
<codeline lineno="2834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_EVENT_OBJ_INIT(obj)<sp/>\</highlight></codeline>
<codeline lineno="2835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855" refid="group__semaphore__apis_1ga689359a77a0cebe737ef644c188f7e57" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_SEM_MAX_LIMIT<sp/>UINT_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872" refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__semaphore__apis_1gadcd0e6cfba3392fb887222eafe4c1845" kindref="member">k_sem_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_sem<sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_count,</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893" refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_sem<sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2905" refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_sem<sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916" refid="group__semaphore__apis_1ga1bd12d8d8c1b9c6be9b665d0fefe5562" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__semaphore__apis_1ga1bd12d8d8c1b9c6be9b665d0fefe5562" kindref="member">k_sem_reset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_sem<sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927" refid="group__semaphore__apis_1ga58843b581e170a1811fc38eecbfd01f3" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__semaphore__apis_1ga58843b581e170a1811fc38eecbfd01f3" kindref="member">k_sem_count_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_sem<sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_k_sem_count_get(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_sem<sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>)</highlight></codeline>
<codeline lineno="2933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>-&gt;count;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948" refid="group__semaphore__apis_1ga018a8aa43e02e704deee7b6341502946" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_SEM_DEFINE(name,<sp/>initial_count,<sp/>count_limit)<sp/>\</highlight></codeline>
<codeline lineno="2949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_sem,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="2950"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_SEM_INITIALIZER(name,<sp/>initial_count,<sp/>count_limit);<sp/>\</highlight></codeline>
<codeline lineno="2951"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(((count_limit)<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="2952"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((initial_count)<sp/>&lt;=<sp/>(count_limit))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="2953"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((count_limit)<sp/>&lt;=<sp/>K_SEM_MAX_LIMIT));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref>;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__sync" kindref="compound">k_work_sync</ref>;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2980" refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight></codeline>
<codeline lineno="2995" refid="group__workqueue__apis_1gaf20080884a2893d39cd8e862b34a2a30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gaf20080884a2893d39cd8e862b34a2a30" kindref="member">k_work_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>);</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012" refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga0d1d2e1d2ba2e89a560a1bdc5365d9e0" kindref="member">k_work_is_pending</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3049" refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga5353e76f73db070614f50d06d292d05c" kindref="member">k_work_submit_to_queue</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060" refid="group__workqueue__apis_1gace61b59575093d7442f39ccb7be686d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gace61b59575093d7442f39ccb7be686d7" kindref="member">k_work_submit</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086" refid="group__workqueue__apis_1gabd1cda459bab538fb2d6dfd84a73b253" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gabd1cda459bab538fb2d6dfd84a73b253" kindref="member">k_work_flush</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__sync" kindref="compound">k_work_sync</ref><sp/>*sync);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3108" refid="group__workqueue__apis_1ga389fe2a8fb20f9bd593cf8d990727078" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga389fe2a8fb20f9bd593cf8d990727078" kindref="member">k_work_cancel</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight></codeline>
<codeline lineno="3140" refid="group__workqueue__apis_1gab2b05cfe3af08f7d32c3946fa1c808f9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gab2b05cfe3af08f7d32c3946fa1c808f9" kindref="member">k_work_cancel_sync</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__sync" kindref="compound">k_work_sync</ref><sp/>*sync);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3151" refid="group__workqueue__apis_1gada77d818ea9e4d07c14a960872ed5492" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gada77d818ea9e4d07c14a960872ed5492" kindref="member">k_work_queue_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight></codeline>
<codeline lineno="3172" refid="group__workqueue__apis_1gadfc56554f9bfe7b52309d79660188593" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gadfc56554f9bfe7b52309d79660188593" kindref="member">k_work_queue_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stack_size,</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__queue__config" kindref="compound">k_work_queue_config</ref><sp/>*cfg);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="group__workqueue__apis_1ga0b8b496f7e7bd82d08590a07293e38d7" kindref="member">k_work_queue_thread_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210" refid="group__workqueue__apis_1ga0fefe3e0225ac99b47b250849f6cd863" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga0fefe3e0225ac99b47b250849f6cd863" kindref="member">k_work_queue_drain</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>plug);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225" refid="group__workqueue__apis_1gaa0463bb79af3ec470f7d3be02052139f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gaa0463bb79af3ec470f7d3be02052139f" kindref="member">k_work_queue_unplug</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240" refid="group__workqueue__apis_1ga2876c5d82fb2340a093bc4d689a55465" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga2876c5d82fb2340a093bc4d689a55465" kindref="member">k_work_init_delayable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>,</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><ref refid="group__workqueue__apis_1gabcb822a03ce7ea9ee1ed046afe31ffca" kindref="member">k_work_delayable_from_work</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270" refid="group__workqueue__apis_1ga1b76969667844f0981d348c9c671bc9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga1b76969667844f0981d348c9c671bc9f" kindref="member">k_work_delayable_busy_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga66e598dbc73f653cbfec03c21168df2e" kindref="member">k_work_delayable_is_pending</ref>(</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__workqueue__apis_1ga1772c37bc62b86180d5cf48fe3037624" kindref="member">k_work_delayable_expires_get</ref>(</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>);</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__workqueue__apis_1gabce78598a014f3ed87730fe6a9fe61b4" kindref="member">k_work_delayable_remaining_get</ref>(</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>);</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346" refid="group__workqueue__apis_1ga17f863c9f6ff2fb41dc0f3b7de4fdf23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga17f863c9f6ff2fb41dc0f3b7de4fdf23" kindref="member">k_work_schedule_for_queue</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>,</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>delay);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363" refid="group__workqueue__apis_1ga5c113ea2bc8e8e5cd7a5c8bc5ec595d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga5c113ea2bc8e8e5cd7a5c8bc5ec595d3" kindref="member">k_work_schedule</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>,</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>delay);</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401" refid="group__workqueue__apis_1gabf5db091eac19b19a4e12c0cb381f0a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gabf5db091eac19b19a4e12c0cb381f0a8" kindref="member">k_work_reschedule_for_queue</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>,</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>,</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>delay);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3417" refid="group__workqueue__apis_1gaacaab408fb7c848d466ad1f069dfa648" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gaacaab408fb7c848d466ad1f069dfa648" kindref="member">k_work_reschedule</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>,</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>delay);</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3444" refid="group__workqueue__apis_1gad47d54e513030304be2600d75b1a965f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gad47d54e513030304be2600d75b1a965f" kindref="member">k_work_flush_delayable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>,</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__sync" kindref="compound">k_work_sync</ref><sp/>*sync);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3467" refid="group__workqueue__apis_1ga92355914ee178d4c3e848a1946bed3e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga92355914ee178d4c3e848a1946bed3e4" kindref="member">k_work_cancel_delayable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3497" refid="group__workqueue__apis_1ga7e7ec237648556fc16bfda8d35f7cd86" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga7e7ec237648556fc16bfda8d35f7cd86" kindref="member">k_work_cancel_delayable_sync</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>,</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__sync" kindref="compound">k_work_sync</ref><sp/>*sync);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>atomic<sp/>API<sp/>is<sp/>used<sp/>for<sp/>all<sp/>work<sp/>and<sp/>queue<sp/>flags<sp/>fields<sp/>to</highlight></codeline>
<codeline lineno="3506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>enforce<sp/>sequential<sp/>consistency<sp/>in<sp/>SMP<sp/>environments.</highlight></codeline>
<codeline lineno="3507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bits<sp/>that<sp/>represent<sp/>the<sp/>work<sp/>item<sp/>states.<sp/><sp/>At<sp/>least<sp/>nine<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="3510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>combinations<sp/>are<sp/>distinct<sp/>valid<sp/>stable<sp/>states.</highlight></codeline>
<codeline lineno="3511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_RUNNING_BIT<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_CANCELING_BIT<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUED_BIT<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_DELAYED_BIT<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_MASK<sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_DELAYED_BIT)<sp/>|<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_QUEUED_BIT)</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_RUNNING_BIT)<sp/>|<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_CANCELING_BIT),</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Static<sp/>work<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_DELAYABLE_BIT<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_DELAYABLE<sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_DELAYABLE_BIT),</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dynamic<sp/>work<sp/>queue<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_STARTED_BIT<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_STARTED<sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_QUEUE_STARTED_BIT),</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_BUSY_BIT<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_BUSY<sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_QUEUE_BUSY_BIT),</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_DRAIN_BIT<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_DRAIN<sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_QUEUE_DRAIN_BIT),</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_PLUGGED_BIT<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_PLUGGED<sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_QUEUE_PLUGGED_BIT),</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Static<sp/>work<sp/>queue<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_NO_YIELD_BIT<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_QUEUE_NO_YIELD<sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_QUEUE_NO_YIELD_BIT),</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transient<sp/>work<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548" refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3cac6bee9a104cf6ee3853579f5eb15c165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3cac6bee9a104cf6ee3853579f5eb15c165" kindref="member">K_WORK_RUNNING</ref><sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_RUNNING_BIT),</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3554" refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3ca9fdc4327489bcdcca3de0ee9eed6b732" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3ca9fdc4327489bcdcca3de0ee9eed6b732" kindref="member">K_WORK_CANCELING</ref><sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_CANCELING_BIT),</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"></highlight></codeline>
<codeline lineno="3561" refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3caa7f8855bc9931bff79062ce53b06eb85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3caa7f8855bc9931bff79062ce53b06eb85" kindref="member">K_WORK_QUEUED</ref><sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_QUEUED_BIT),</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568" refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3cab4bf9e74435077b2bbfe1de1f4e80aed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gga15b3bbe041870ee299f7e042b0305e3cab4bf9e74435077b2bbfe1de1f4e80aed" kindref="member">K_WORK_DELAYED</ref><sp/>=<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(K_WORK_DELAYED_BIT),</highlight></codeline>
<codeline lineno="3569"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3572" refid="structk__work" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref><sp/>{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>fields<sp/>are<sp/>protected<sp/>by<sp/>the<sp/>work<sp/>module<sp/>spinlock.<sp/><sp/>No<sp/>fields</highlight></codeline>
<codeline lineno="3574"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>to<sp/>be<sp/>accessed<sp/>except<sp/>through<sp/>kernel<sp/>API.</highlight></codeline>
<codeline lineno="3575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Node<sp/>to<sp/>link<sp/>into<sp/>k_work_q<sp/>pending<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578" refid="structk__work_1a85772682983e0fdeb735f0821d5710d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structk__work_1a85772682983e0fdeb735f0821d5710d4" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>function<sp/>to<sp/>be<sp/>invoked<sp/>by<sp/>the<sp/>work<sp/>queue<sp/>thread.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581" refid="structk__work_1a096d6ca1338fb0fbfa330b790136f172" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref><sp/><ref refid="structk__work_1a096d6ca1338fb0fbfa330b790136f172" kindref="member">handler</ref>;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>on<sp/>which<sp/>the<sp/>work<sp/>item<sp/>was<sp/>last<sp/>submitted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584" refid="structk__work_1a551be8394e041020c36a97dc2e12e137" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="structk__work_1a551be8394e041020c36a97dc2e12e137" kindref="member">queue</ref>;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>State<sp/>of<sp/>the<sp/>work<sp/>item.</highlight></codeline>
<codeline lineno="3587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>item<sp/>can<sp/>be<sp/>DELAYED,<sp/>QUEUED,<sp/>and<sp/>RUNNING<sp/>simultaneously.</highlight></codeline>
<codeline lineno="3589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>can<sp/>be<sp/>RUNNING<sp/>and<sp/>CANCELING<sp/>simultaneously.</highlight></codeline>
<codeline lineno="3591"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592" refid="structk__work_1a391ed7d2039cd05c9894267bf8ea4dfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__work_1a391ed7d2039cd05c9894267bf8ea4dfd" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_WORK_INITIALIZER(work_handler)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.handler<sp/>=<sp/>work_handler,<sp/>\</highlight></codeline>
<codeline lineno="3597"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3600" refid="structk__work__delayable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>{</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>work<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3602" refid="structk__work__delayable_1a594ad30acf08249909c30c0af76c1629" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref><sp/><ref refid="structk__work__delayable_1a594ad30acf08249909c30c0af76c1629" kindref="member">work</ref>;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Timeout<sp/>used<sp/>to<sp/>submit<sp/>work<sp/>after<sp/>a<sp/>delay.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3605" refid="structk__work__delayable_1a1db9148a05731100d3d3915534ac2d4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_timeout<sp/><ref refid="structk__work__delayable_1a1db9148a05731100d3d3915534ac2d4d" kindref="member">timeout</ref>;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>to<sp/>which<sp/>the<sp/>work<sp/>should<sp/>be<sp/>submitted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3608" refid="structk__work__delayable_1a25dc6aaf1713e1db0f2530370afd4dc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="structk__work__delayable_1a25dc6aaf1713e1db0f2530370afd4dc4" kindref="member">queue</ref>;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_WORK_DELAYABLE_INITIALIZER(work_handler)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.work<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.handler<sp/>=<sp/>work_handler,<sp/>\</highlight></codeline>
<codeline lineno="3614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>K_WORK_DELAYABLE,<sp/>\</highlight></codeline>
<codeline lineno="3615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="3616"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634" refid="group__workqueue__apis_1ga893b281f3d2bc0088650536899e17903" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_WORK_DELAYABLE_DEFINE(work,<sp/>work_handler)<sp/>\</highlight></codeline>
<codeline lineno="3635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>k_work_delayable<sp/>work<sp/>\</highlight></codeline>
<codeline lineno="3636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Z_WORK_DELAYABLE_INITIALIZER(work_handler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Record<sp/>used<sp/>to<sp/>wait<sp/>for<sp/>work<sp/>to<sp/>flush.</highlight></codeline>
<codeline lineno="3643"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3644"><highlight class="comment"><sp/>*<sp/>The<sp/>work<sp/>item<sp/>is<sp/>inserted<sp/>into<sp/>the<sp/>queue<sp/>that<sp/>will<sp/>process<sp/>(or<sp/>is</highlight></codeline>
<codeline lineno="3645"><highlight class="comment"><sp/>*<sp/>processing)<sp/>the<sp/>item,<sp/>and<sp/>will<sp/>be<sp/>processed<sp/>as<sp/>soon<sp/>as<sp/>the<sp/>item</highlight></codeline>
<codeline lineno="3646"><highlight class="comment"><sp/>*<sp/>completes.<sp/><sp/>When<sp/>the<sp/>flusher<sp/>is<sp/>processed<sp/>the<sp/>semaphore<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="3647"><highlight class="comment"><sp/>*<sp/>signaled,<sp/>releasing<sp/>the<sp/>thread<sp/>waiting<sp/>for<sp/>the<sp/>flush.</highlight></codeline>
<codeline lineno="3648"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_work_flusher<sp/>{</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref><sp/><ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>;</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Record<sp/>used<sp/>to<sp/>wait<sp/>for<sp/>work<sp/>to<sp/>complete<sp/>a<sp/>cancellation.</highlight></codeline>
<codeline lineno="3655"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3656"><highlight class="comment"><sp/>*<sp/>The<sp/>work<sp/>item<sp/>is<sp/>inserted<sp/>into<sp/>a<sp/>global<sp/>queue<sp/>of<sp/>pending<sp/>cancels.</highlight></codeline>
<codeline lineno="3657"><highlight class="comment"><sp/>*<sp/>When<sp/>a<sp/>cancelling<sp/>work<sp/>item<sp/>goes<sp/>idle<sp/>any<sp/>matching<sp/>waiters<sp/>are</highlight></codeline>
<codeline lineno="3658"><highlight class="comment"><sp/>*<sp/>removed<sp/>from<sp/>pending_cancels<sp/>and<sp/>are<sp/>woken.</highlight></codeline>
<codeline lineno="3659"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_work_canceller<sp/>{</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/>node;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683" refid="structk__work__sync" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__sync" kindref="compound">k_work_sync</ref><sp/>{</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3685" refid="structk__work__sync_1ad81ff57cb9f2f3dc5f2d65917cf04f1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_work_flusher<sp/><ref refid="structk__work__sync_1ad81ff57cb9f2f3dc5f2d65917cf04f1c" kindref="member">flusher</ref>;</highlight></codeline>
<codeline lineno="3686" refid="structk__work__sync_1a7e8fd0b9d6736c403aefa8462c7c0835" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_work_canceller<sp/><ref refid="structk__work__sync_1a7e8fd0b9d6736c403aefa8462c7c0835" kindref="member">canceller</ref>;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3688"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight></codeline>
<codeline lineno="3696" refid="structk__work__queue__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__queue__config" kindref="compound">k_work_queue_config</ref><sp/>{</highlight></codeline>
<codeline lineno="3701" refid="structk__work__queue__config_1a0929d83372efff6798bc69bb7ca1eaaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structk__work__queue__config_1a0929d83372efff6798bc69bb7ca1eaaa" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3715" refid="structk__work__queue__config_1afcf64d6e69d1ddfff8cbd749dafa4d13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structk__work__queue__config_1afcf64d6e69d1ddfff8cbd749dafa4d13" kindref="member">no_yield</ref>;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3719" refid="structk__work__q" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>{</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>thread<sp/>that<sp/>animates<sp/>the<sp/>work.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721" refid="structk__work__q_1aa42ca271a4989f129bf1a43c491327eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="structk__work__q_1aa42ca271a4989f129bf1a43c491327eb" kindref="member">thread</ref>;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>the<sp/>following<sp/>fields<sp/>must<sp/>be<sp/>accessed<sp/>only<sp/>while<sp/>the</highlight></codeline>
<codeline lineno="3724"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>work<sp/>module<sp/>spinlock<sp/>is<sp/>held.</highlight></codeline>
<codeline lineno="3725"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>of<sp/>k_work<sp/>items<sp/>to<sp/>be<sp/>worked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728" refid="structk__work__q_1a2012199571f6b658873550d64386b00c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref><sp/><ref refid="structk__work__q_1a2012199571f6b658873550d64386b00c" kindref="member">pending</ref>;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>queue<sp/>for<sp/>idle<sp/>work<sp/>thread.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3731" refid="structk__work__q_1a561c90f8bb944217230e00052cdecf10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__work__q_1a561c90f8bb944217230e00052cdecf10" kindref="member">notifyq</ref>;</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>queue<sp/>for<sp/>threads<sp/>waiting<sp/>for<sp/>the<sp/>queue<sp/>to<sp/>drain.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3734" refid="structk__work__q_1a308d1ac78b1203b7ea78b0f18c5bdf5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__work__q_1a308d1ac78b1203b7ea78b0f18c5bdf5b" kindref="member">drainq</ref>;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flags<sp/>describing<sp/>queue<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3737" refid="structk__work__q_1a68bc8e9c412ebdbf34827087d91a080e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__work__q_1a68bc8e9c412ebdbf34827087d91a080e" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Provide<sp/>the<sp/>implementation<sp/>for<sp/>inline<sp/>functions<sp/>declared<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight></codeline>
<codeline lineno="3742" refid="group__workqueue__apis_1ga0d1d2e1d2ba2e89a560a1bdc5365d9e0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga0d1d2e1d2ba2e89a560a1bdc5365d9e0" kindref="member">k_work_is_pending</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gaba8a8734768d768b433f9d8490e7df7b" kindref="member">k_work_busy_get</ref>(<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*</highlight></codeline>
<codeline lineno="3748" refid="group__workqueue__apis_1gabcb822a03ce7ea9ee1ed046afe31ffca" refkind="member"><highlight class="normal"><ref refid="group__workqueue__apis_1gabcb822a03ce7ea9ee1ed046afe31ffca" kindref="member">k_work_delayable_from_work</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sys-util_1gac5bc561d1bfd1bf68877fe577779bd2f" kindref="member">CONTAINER_OF</ref>(<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref>,<sp/><ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753" refid="group__workqueue__apis_1ga66e598dbc73f653cbfec03c21168df2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga66e598dbc73f653cbfec03c21168df2e" kindref="member">k_work_delayable_is_pending</ref>(</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>)</highlight></codeline>
<codeline lineno="3755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga1b76969667844f0981d348c9c671bc9f" kindref="member">k_work_delayable_busy_get</ref>(<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight></codeline>
<codeline lineno="3759" refid="group__workqueue__apis_1ga1772c37bc62b86180d5cf48fe3037624" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__workqueue__apis_1ga1772c37bc62b86180d5cf48fe3037624" kindref="member">k_work_delayable_expires_get</ref>(</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>)</highlight></codeline>
<codeline lineno="3761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_timeout_expires(&amp;<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>-&gt;<ref refid="structk__work__delayable_1a1db9148a05731100d3d3915534ac2d4d" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight></codeline>
<codeline lineno="3765" refid="group__workqueue__apis_1gabce78598a014f3ed87730fe6a9fe61b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__workqueue__apis_1gabce78598a014f3ed87730fe6a9fe61b4" kindref="member">k_work_delayable_remaining_get</ref>(</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/>*<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>)</highlight></codeline>
<codeline lineno="3767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_timeout_remaining(&amp;<ref refid="workq_2work_2src_2main_8c_1a0aaa7e21c7cd2159f22acc20d1860ffd" kindref="member">dwork</ref>-&gt;<ref refid="structk__work__delayable_1a1db9148a05731100d3d3915534ac2d4d" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="3769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771" refid="group__workqueue__apis_1ga0b8b496f7e7bd82d08590a07293e38d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="group__workqueue__apis_1ga0b8b496f7e7bd82d08590a07293e38d7" kindref="member">k_work_queue_thread_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>)</highlight></codeline>
<codeline lineno="3772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>-&gt;thread;</highlight></codeline>
<codeline lineno="3774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Legacy<sp/>wrappers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3779" refid="group__workqueue__apis_1ga7ab20a3405d7132870ee5e4b5610bfe3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga7ab20a3405d7132870ee5e4b5610bfe3" kindref="member">k_work_pending</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work" kindref="compound">k_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga0d1d2e1d2ba2e89a560a1bdc5365d9e0" kindref="member">k_work_is_pending</ref>(<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3785" refid="group__workqueue__apis_1gad4b913b161ebf5958f7c42ed5e1a6c25" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gad4b913b161ebf5958f7c42ed5e1a6c25" kindref="member">k_work_q_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*work_q,</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stack_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio)</highlight></codeline>
<codeline lineno="3788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gadfc56554f9bfe7b52309d79660188593" kindref="member">k_work_queue_start</ref>(work_q,<sp/><ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,<sp/>stack_size,<sp/>prio,<sp/>NULL);</highlight></codeline>
<codeline lineno="3790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>deprecated,<sp/>remove<sp/>when<sp/>corresponding<sp/>deprecated<sp/>API<sp/>is<sp/>removed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3793" refid="structk__delayed__work" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>{</highlight></codeline>
<codeline lineno="3794" refid="structk__delayed__work_1a1afdb65c0a2638d4fa5662c16287ec00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/><ref refid="structk__delayed__work_1a1afdb65c0a2638d4fa5662c16287ec00" kindref="member">work</ref>;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DELAYED_WORK_INITIALIZER(work_handler)<sp/>__DEPRECATED_MACRO<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.work<sp/>=<sp/>Z_WORK_DELAYABLE_INITIALIZER(work_handler),<sp/>\</highlight></codeline>
<codeline lineno="3799"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3802" refid="group__workqueue__apis_1gaf484b980ae3dbbd620b96e883c4b4fe6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gaf484b980ae3dbbd620b96e883c4b4fe6" kindref="member">k_delayed_work_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>)</highlight></codeline>
<codeline lineno="3804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1ga2876c5d82fb2340a093bc4d689a55465" kindref="member">k_work_init_delayable</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work,<sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3809" refid="group__workqueue__apis_1ga9d96cee1aa79b9fd01aa3ea7892f74d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga9d96cee1aa79b9fd01aa3ea7892f74d0" kindref="member">k_delayed_work_submit_to_queue</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*work_q,</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>delay)</highlight></codeline>
<codeline lineno="3812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/><ref refid="group__workqueue__apis_1gabf5db091eac19b19a4e12c0cb381f0a8" kindref="member">k_work_reschedule_for_queue</ref>(work_q,<sp/>&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work,<sp/>delay);</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Legacy<sp/>API<sp/>doesn&apos;t<sp/>distinguish<sp/>success<sp/>cases.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rc<sp/>&gt;=<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>rc;</highlight></codeline>
<codeline lineno="3817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3820" refid="group__workqueue__apis_1gabc2b985a4edddd17d1a7406d69167e0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gabc2b985a4edddd17d1a7406d69167e0c" kindref="member">k_delayed_work_submit</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/>delay)</highlight></codeline>
<codeline lineno="3822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/><ref refid="group__workqueue__apis_1gaacaab408fb7c848d466ad1f069dfa648" kindref="member">k_work_reschedule</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work,<sp/>delay);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Legacy<sp/>API<sp/>doesn&apos;t<sp/>distinguish<sp/>success<sp/>cases.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rc<sp/>&gt;=<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>rc;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3830" refid="group__workqueue__apis_1ga00189a735a3a557118c035b7d69feeb0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga00189a735a3a557118c035b7d69feeb0" kindref="member">k_delayed_work_cancel</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pending<sp/>=<sp/><ref refid="group__workqueue__apis_1ga66e598dbc73f653cbfec03c21168df2e" kindref="member">k_work_delayable_is_pending</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work);</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/><ref refid="group__workqueue__apis_1ga92355914ee178d4c3e848a1946bed3e4" kindref="member">k_work_cancel_delayable</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work);</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Old<sp/>return<sp/>value<sp/>rules:</highlight></codeline>
<codeline lineno="3836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>0<sp/>if:</highlight></codeline>
<codeline lineno="3838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>item<sp/>countdown<sp/>cancelled<sp/>before<sp/>the<sp/>item<sp/>was<sp/>submitted<sp/>to</highlight></codeline>
<codeline lineno="3839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>its<sp/>queue;<sp/>or</highlight></codeline>
<codeline lineno="3840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>item<sp/>was<sp/>removed<sp/>from<sp/>its<sp/>queue<sp/>before<sp/>it<sp/>was<sp/>processed.</highlight></codeline>
<codeline lineno="3841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-EINVAL<sp/>if:</highlight></codeline>
<codeline lineno="3843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>item<sp/>has<sp/>never<sp/>been<sp/>submitted;<sp/>or</highlight></codeline>
<codeline lineno="3844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>item<sp/>has<sp/>been<sp/>successfully<sp/>cancelled;<sp/>or</highlight></codeline>
<codeline lineno="3845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Timeout<sp/>handler<sp/>is<sp/>in<sp/>the<sp/>process<sp/>of<sp/>submitting<sp/>the<sp/>work<sp/>item<sp/>to</highlight></codeline>
<codeline lineno="3846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>its<sp/>queue;<sp/>or</highlight></codeline>
<codeline lineno="3847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>queue<sp/>thread<sp/>has<sp/>removed<sp/>the<sp/>work<sp/>item<sp/>from<sp/>the<sp/>queue<sp/>but</highlight></codeline>
<codeline lineno="3848"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>has<sp/>not<sp/>called<sp/>its<sp/>handler.</highlight></codeline>
<codeline lineno="3849"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-EALREADY<sp/>if:</highlight></codeline>
<codeline lineno="3851"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>queue<sp/>thread<sp/>has<sp/>removed<sp/>the<sp/>work<sp/>item<sp/>from<sp/>the<sp/>queue<sp/>and</highlight></codeline>
<codeline lineno="3852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>cleared<sp/>its<sp/>pending<sp/>flag;<sp/>or</highlight></codeline>
<codeline lineno="3853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>queue<sp/>thread<sp/>is<sp/>invoking<sp/>the<sp/>item<sp/>handler;<sp/>or</highlight></codeline>
<codeline lineno="3854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Work<sp/>item<sp/>handler<sp/>has<sp/>completed.</highlight></codeline>
<codeline lineno="3855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3856"><highlight class="comment"></highlight></codeline>
<codeline lineno="3857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>can&apos;t<sp/>reconstruct<sp/>those<sp/>states,<sp/>so<sp/>call<sp/>it<sp/>successful<sp/>only<sp/>when</highlight></codeline>
<codeline lineno="3858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>pending<sp/>item<sp/>is<sp/>no<sp/>longer<sp/>pending,<sp/>-EINVAL<sp/>if<sp/>it<sp/>was<sp/>pending<sp/>and</highlight></codeline>
<codeline lineno="3859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>still<sp/>is,<sp/>and<sp/>cancel,<sp/>and<sp/>-EALREADY<sp/>if<sp/>it<sp/>wasn&apos;t<sp/>pending<sp/>(so</highlight></codeline>
<codeline lineno="3860"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>presumably<sp/>cancellation<sp/>should<sp/>have<sp/>had<sp/>no<sp/>effect,<sp/>assuming<sp/>we</highlight></codeline>
<codeline lineno="3861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>didn&apos;t<sp/>hit<sp/>a<sp/>race<sp/>condition).</highlight></codeline>
<codeline lineno="3862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending)<sp/>{</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1gaa4ccb54aa806de3e41a8515f06db85d4" kindref="member">EALREADY</ref>;</highlight></codeline>
<codeline lineno="3868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3871" refid="group__workqueue__apis_1ga47b86afff751340829339566a9932f72" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga47b86afff751340829339566a9932f72" kindref="member">k_delayed_work_pending</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga66e598dbc73f653cbfec03c21168df2e" kindref="member">k_work_delayable_is_pending</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3877" refid="group__workqueue__apis_1ga3c5c9af0fb7c0518a87e04f110c27105" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__workqueue__apis_1ga3c5c9af0fb7c0518a87e04f110c27105" kindref="member">k_delayed_work_remaining_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/>rem<sp/>=<sp/><ref refid="group__workqueue__apis_1gabce78598a014f3ed87730fe6a9fe61b4" kindref="member">k_work_delayable_remaining_get</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Probably<sp/>should<sp/>be<sp/>ceil32,<sp/>but<sp/>was<sp/>floor32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="time__units_8h_1a9c1fcba23d4d8fc10db9b9ec6fc4a9aa" kindref="member">k_ticks_to_ms_floor32</ref>(rem);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3886" refid="group__workqueue__apis_1gacbde6358fe7676d8a6bcf286e7802997" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__workqueue__apis_1gacbde6358fe7676d8a6bcf286e7802997" kindref="member">k_delayed_work_expires_ticks</ref>(</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga1772c37bc62b86180d5cf48fe3037624" kindref="member">k_work_delayable_expires_get</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal">__deprecated</highlight></codeline>
<codeline lineno="3893" refid="group__workqueue__apis_1ga1d0f51e16f52308bb258bf63b4b26915" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="group__workqueue__apis_1ga1d0f51e16f52308bb258bf63b4b26915" kindref="member">k_delayed_work_remaining_ticks</ref>(</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__delayed__work" kindref="compound">k_delayed_work</ref><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3895"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gabce78598a014f3ed87730fe6a9fe61b4" kindref="member">k_work_delayable_remaining_get</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;work);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_work_user;</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917" refid="group__workqueue__apis_1gafdb3f5f2225b3d5d1fe682cb97f3b328" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__workqueue__apis_1gafdb3f5f2225b3d5d1fe682cb97f3b328" kindref="member">k_work_user_handler_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_work_user<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_work_user_q<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_queue<sp/><ref refid="test__queue__contexts_8c_1a643b6f9660035f1e1098c9484d214bbd" kindref="member">queue</ref>;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>;</highlight></codeline>
<codeline lineno="3926"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_USER_STATE_PENDING,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Work<sp/>item<sp/>pending<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_work_user<sp/>{</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_reserved;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Used<sp/>by<sp/>k_queue<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gafdb3f5f2225b3d5d1fe682cb97f3b328" kindref="member">k_work_user_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>((__cplusplus<sp/>-<sp/>0)<sp/>&lt;<sp/>202002L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_WORK_USER_INITIALIZER(work_handler)<sp/>{<sp/>NULL,<sp/>work_handler,<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_WORK_USER_INITIALIZER(work_handler)<sp/>\</highlight></codeline>
<codeline lineno="3946"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3947"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>._reserved<sp/>=<sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="3948"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.handler<sp/>=<sp/>work_handler,<sp/>\</highlight></codeline>
<codeline lineno="3949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0<sp/>\</highlight></codeline>
<codeline lineno="3950"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964" refid="group__workqueue__apis_1ga4f3eac1fc56d5c9c21a3afa9b964b0bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_WORK_USER_DEFINE(work,<sp/>work_handler)<sp/>\</highlight></codeline>
<codeline lineno="3965"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>k_work_user<sp/>work<sp/>=<sp/>Z_WORK_USER_INITIALIZER(work_handler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3976" refid="group__workqueue__apis_1ga9de9c7a7f13cc6b325e5453e34afe62d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga9de9c7a7f13cc6b325e5453e34afe62d" kindref="member">k_work_user_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_user<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1gafdb3f5f2225b3d5d1fe682cb97f3b328" kindref="member">k_work_user_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>)</highlight></codeline>
<codeline lineno="3978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref><sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_work_user)Z_WORK_USER_INITIALIZER(<ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998" refid="group__workqueue__apis_1ga58d05d4127e4cd51104a1f1a87f626cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga58d05d4127e4cd51104a1f1a87f626cd" kindref="member">k_work_user_is_pending</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_user<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="3999"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;<ref refid="structk__work_1a391ed7d2039cd05c9894267bf8ea4dfd" kindref="member">flags</ref>,<sp/>K_WORK_USER_STATE_PENDING);</highlight></codeline>
<codeline lineno="4001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021" refid="group__workqueue__apis_1ga50ae1f6f74c0bc0a41dbbf789fff8856" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga50ae1f6f74c0bc0a41dbbf789fff8856" kindref="member">k_work_user_submit_to_queue</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_user_q<sp/>*work_q,</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_user<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>)</highlight></codeline>
<codeline lineno="4023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/>-<ref refid="group__system__errno_1ga8368025077a0385849d6817b2007c095" kindref="member">EBUSY</ref>;</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__atomic__apis_1ga7ff45e13aa5f8be5d7a550e49f5c720b" kindref="member">atomic_test_and_set_bit</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;<ref refid="structk__work_1a391ed7d2039cd05c9894267bf8ea4dfd" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_USER_STATE_PENDING))<sp/>{</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append</ref>(&amp;work_q-&gt;queue,<sp/><ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Couldn&apos;t<sp/>insert<sp/>into<sp/>the<sp/>queue.<sp/>Clear<sp/>the<sp/>pending<sp/>bit</highlight></codeline>
<codeline lineno="4031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>the<sp/>work<sp/>item<sp/>can<sp/>be<sp/>submitted<sp/>again</highlight></codeline>
<codeline lineno="4032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" kindref="member">atomic_clear_bit</ref>(&amp;<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>-&gt;<ref refid="structk__work_1a391ed7d2039cd05c9894267bf8ea4dfd" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_WORK_USER_STATE_PENDING);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight></codeline>
<codeline lineno="4061" refid="group__workqueue__apis_1ga3091bc8fab5311252e41634a97a18589" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga3091bc8fab5311252e41634a97a18589" kindref="member">k_work_user_queue_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_user_q<sp/>*work_q,</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stack_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio,</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_work_poll<sp/>{</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work" kindref="compound">k_work</ref><sp/><ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*workq;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_poller<sp/>poller;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/>*events;</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_events;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref><sp/>real_handler;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_timeout<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poll_result;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight></codeline>
<codeline lineno="4103" refid="group__workqueue__apis_1gaf8e003eefa5dd66ba883688f9d39c333" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_WORK_DEFINE(work,<sp/>work_handler)<sp/>\</highlight></codeline>
<codeline lineno="4104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>k_work<sp/>work<sp/>=<sp/>Z_WORK_INITIALIZER(work_handler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117" refid="group__workqueue__apis_1ga41c8a64e854c6cca3a6956079cce2826" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_DELAYED_WORK_DEFINE(work,<sp/>work_handler)<sp/>__DEPRECATED_MACRO<sp/>\</highlight></codeline>
<codeline lineno="4118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>k_delayed_work<sp/>work<sp/>=<sp/>Z_DELAYED_WORK_INITIALIZER(work_handler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129" refid="group__workqueue__apis_1ga371dab33a40622bea19b07d852863443" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga371dab33a40622bea19b07d852863443" kindref="member">k_work_poll_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_poll<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__workqueue__apis_1ga5add9ef0dce306a08413c4140fc0bdda" kindref="member">k_work_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>);</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight></codeline>
<codeline lineno="4166" refid="group__workqueue__apis_1ga0abafd7f851e42fd3572c8438e600a53" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga0abafd7f851e42fd3572c8438e600a53" kindref="member">k_work_poll_submit_to_queue</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__work__q" kindref="compound">k_work_q</ref><sp/>*work_q,</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_poll<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/>*events,</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_events,</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4203" refid="group__workqueue__apis_1gad9f222e46d72c4f98739395a0c8bb4ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1gad9f222e46d72c4f98739395a0c8bb4ea" kindref="member">k_work_poll_submit</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_poll<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>,</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/>*events,</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_events,</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4222" refid="group__workqueue__apis_1ga2a19547d04dc1a202e80b752e3177215" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__workqueue__apis_1ga2a19547d04dc1a202e80b752e3177215" kindref="member">k_work_poll_cancel</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_work_poll<sp/>*<ref refid="profiling_2profiling__api_2src_2main_8c_1ab8576d2c1da058eedc28da3c8cfac6f1" kindref="member">work</ref>);</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4235" refid="structk__msgq" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>{</highlight></codeline>
<codeline lineno="4237" refid="structk__msgq_1ae3b3d53d60b789d69c65494cfd090076" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__msgq_1ae3b3d53d60b789d69c65494cfd090076" kindref="member">wait_q</ref>;</highlight></codeline>
<codeline lineno="4239" refid="structk__msgq_1aa2e00a7292502f0de88cff28c5e375f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="structk__msgq_1aa2e00a7292502f0de88cff28c5e375f0" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="4241" refid="structk__msgq_1a512fe468da96540639a0d71f1707f79d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structk__msgq_1a512fe468da96540639a0d71f1707f79d" kindref="member">msg_size</ref>;</highlight></codeline>
<codeline lineno="4243" refid="structk__msgq_1aebd3b6e91e97b2d4369feea1a3f7b7a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__msgq_1aebd3b6e91e97b2d4369feea1a3f7b7a0" kindref="member">max_msgs</ref>;</highlight></codeline>
<codeline lineno="4245" refid="structk__msgq_1aca77f1cf833d3aa27ae65004b446bdd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structk__msgq_1aca77f1cf833d3aa27ae65004b446bdd2" kindref="member">buffer_start</ref>;</highlight></codeline>
<codeline lineno="4247" refid="structk__msgq_1a9d47fd25d7a70e8518d45dd48c51f0e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structk__msgq_1a9d47fd25d7a70e8518d45dd48c51f0e0" kindref="member">buffer_end</ref>;</highlight></codeline>
<codeline lineno="4249" refid="structk__msgq_1a594e8a4a638521f42f24f85fe0742d64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structk__msgq_1a594e8a4a638521f42f24f85fe0742d64" kindref="member">read_ptr</ref>;</highlight></codeline>
<codeline lineno="4251" refid="structk__msgq_1aacf9b7b9f6e26e402f3752fc56834f23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structk__msgq_1aacf9b7b9f6e26e402f3752fc56834f23" kindref="member">write_ptr</ref>;</highlight></codeline>
<codeline lineno="4253" refid="structk__msgq_1a5c0cc83eaaf44d7fd7de8fffc7b2f857" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__msgq_1a5c0cc83eaaf44d7fd7de8fffc7b2f857" kindref="member">used_msgs</ref>;</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_EVENT;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4258" refid="structk__msgq_1ae03025420908f8342ce12a1395c7657b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structk__msgq_1ae03025420908f8342ce12a1395c7657b" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(<ref refid="structk__msgq" kindref="compound">k_msgq</ref>)</highlight></codeline>
<codeline lineno="4261"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_MSGQ_INITIALIZER(obj,<sp/>q_buffer,<sp/>q_msg_size,<sp/>q_max_msgs)<sp/>\</highlight></codeline>
<codeline lineno="4268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/>\</highlight></codeline>
<codeline lineno="4270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.msg_size<sp/>=<sp/>q_msg_size,<sp/>\</highlight></codeline>
<codeline lineno="4271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max_msgs<sp/>=<sp/>q_max_msgs,<sp/>\</highlight></codeline>
<codeline lineno="4272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer_start<sp/>=<sp/>q_buffer,<sp/>\</highlight></codeline>
<codeline lineno="4273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer_end<sp/>=<sp/>q_buffer<sp/>+<sp/>(q_max_msgs<sp/>*<sp/>q_msg_size),<sp/>\</highlight></codeline>
<codeline lineno="4274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.read_ptr<sp/>=<sp/>q_buffer,<sp/>\</highlight></codeline>
<codeline lineno="4275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.write_ptr<sp/>=<sp/>q_buffer,<sp/>\</highlight></codeline>
<codeline lineno="4276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.used_msgs<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="4277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_EVENT_OBJ_INIT(obj)<sp/>\</highlight></codeline>
<codeline lineno="4278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285" refid="group__msgq__apis_1ga4bb73f46fd0818f7f7a90860b792f7ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MSGQ_FLAG_ALLOC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290" refid="structk__msgq__attrs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__msgq__attrs" kindref="compound">k_msgq_attrs</ref><sp/>{</highlight></codeline>
<codeline lineno="4292" refid="structk__msgq__attrs_1a7d1d72946bdd517c07da37493a89e30e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structk__msgq__attrs_1a7d1d72946bdd517c07da37493a89e30e" kindref="member">msg_size</ref>;</highlight></codeline>
<codeline lineno="4294" refid="structk__msgq__attrs_1ad0f5894ba0da840b91eb85015252e649" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__msgq__attrs_1ad0f5894ba0da840b91eb85015252e649" kindref="member">max_msgs</ref>;</highlight></codeline>
<codeline lineno="4296" refid="structk__msgq__attrs_1a00f936870442fa455117cbdd7821fac5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__msgq__attrs_1a00f936870442fa455117cbdd7821fac5" kindref="member">used_msgs</ref>;</highlight></codeline>
<codeline lineno="4297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight></codeline>
<codeline lineno="4299"><highlight class="normal"></highlight></codeline>
<codeline lineno="4320" refid="group__msgq__apis_1ga95ef93002766901511d09c8cd8f8293b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MSGQ_DEFINE(q_name,<sp/>q_msg_size,<sp/>q_max_msgs,<sp/>q_align)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>char<sp/>__noinit<sp/>__aligned(q_align)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_k_fifo_buf_##q_name[(q_max_msgs)<sp/>*<sp/>(q_msg_size)];<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_msgq,<sp/>q_name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_MSGQ_INITIALIZER(q_name,<sp/>_k_fifo_buf_##q_name,<sp/>\</highlight></codeline>
<codeline lineno="4325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q_msg_size,<sp/>q_max_msgs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4343" refid="group__msgq__apis_1ga54a5cdcaea2236c383ace433fedc0d39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__msgq__apis_1ga54a5cdcaea2236c383ace433fedc0d39" kindref="member">k_msgq_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msg_size,</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>max_msgs);</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365" refid="group__msgq__apis_1gabe7305b8f442ebdc147dbbc6e8cf92fc" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__msgq__apis_1gabe7305b8f442ebdc147dbbc6e8cf92fc" kindref="member">k_msgq_alloc_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msg_size,</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>max_msgs);</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight></codeline>
<codeline lineno="4378" refid="group__msgq__apis_1gafda4399aa9b8f1e44bdf752e00ea787b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__msgq__apis_1gafda4399aa9b8f1e44bdf752e00ea787b" kindref="member">k_msgq_cleanup</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>);</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401" refid="group__msgq__apis_1ga54e96aaaea5462a1f963b7fd5ca82bfe" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__msgq__apis_1ga54e96aaaea5462a1f963b7fd5ca82bfe" kindref="member">k_msgq_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423" refid="group__msgq__apis_1gae67f2ced2df1f9c290ae15dab9097cb7" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__msgq__apis_1gae67f2ced2df1f9c290ae15dab9097cb7" kindref="member">k_msgq_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4439" refid="group__msgq__apis_1ga14f543472f2f63cfde0bdfa87b95c915" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__msgq__apis_1ga14f543472f2f63cfde0bdfa87b95c915" kindref="member">k_msgq_peek</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4450" refid="group__msgq__apis_1gaa18875887773195ae44b7fe0972ee760" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__msgq__apis_1gaa18875887773195ae44b7fe0972ee760" kindref="member">k_msgq_purge</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>);</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight></codeline>
<codeline lineno="4462" refid="group__msgq__apis_1ga7d154beb4f9c6227eddbef26d406ca24" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__msgq__apis_1ga7d154beb4f9c6227eddbef26d406ca24" kindref="member">k_msgq_num_free_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>);</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472" refid="group__msgq__apis_1ga8f9d3eef67cbc9c0717a84190bbf7f41" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="group__msgq__apis_1ga8f9d3eef67cbc9c0717a84190bbf7f41" kindref="member">k_msgq_get_attrs</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>,</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq__attrs" kindref="compound">k_msgq_attrs</ref><sp/>*attrs);</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>z_impl_k_msgq_num_free_get(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>)</highlight></codeline>
<codeline lineno="4477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>-&gt;<ref refid="structk__msgq_1aebd3b6e91e97b2d4369feea1a3f7b7a0" kindref="member">max_msgs</ref><sp/>-<sp/><ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>-&gt;<ref refid="structk__msgq_1a5c0cc83eaaf44d7fd7de8fffc7b2f857" kindref="member">used_msgs</ref>;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight></codeline>
<codeline lineno="4490" refid="group__msgq__apis_1ga458793a89f1d9f762bda3422918a9faa" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__msgq__apis_1ga458793a89f1d9f762bda3422918a9faa" kindref="member">k_msgq_num_used_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>);</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>z_impl_k_msgq_num_used_get(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>)</highlight></codeline>
<codeline lineno="4493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="msgq_2msgq__api_2src_2main_8c_1a5c4ebc803e1cc8bb3827444dc64e2c47" kindref="member">msgq</ref>-&gt;<ref refid="structk__msgq_1a5c0cc83eaaf44d7fd7de8fffc7b2f857" kindref="member">used_msgs</ref>;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4509" refid="structk__mbox__msg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref><sp/>{</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>_mailbox;</highlight></codeline>
<codeline lineno="4513" refid="structk__mbox__msg_1aeabf45e9599a64852a1cfd656b1ece8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structk__mbox__msg_1aeabf45e9599a64852a1cfd656b1ece8e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="4515" refid="structk__mbox__msg_1aa79f2bf71431b474ec4551ade4d7a8dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__mbox__msg_1aa79f2bf71431b474ec4551ade4d7a8dd" kindref="member">info</ref>;</highlight></codeline>
<codeline lineno="4517" refid="structk__mbox__msg_1a74b0edeed4c44cb5932eb292efc9d9c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structk__mbox__msg_1a74b0edeed4c44cb5932eb292efc9d9c2" kindref="member">tx_data</ref>;</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_rx_data;</highlight></codeline>
<codeline lineno="4521" refid="structk__mbox__msg_1a3d29864697b86a2f36300c65f25b28f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__block" kindref="compound">k_mem_block</ref><sp/><ref refid="structk__mbox__msg_1a3d29864697b86a2f36300c65f25b28f3" kindref="member">tx_block</ref>;</highlight></codeline>
<codeline lineno="4523" refid="structk__mbox__msg_1a9eb145a242ac66e80d90286d83fe7a61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="structk__mbox__msg_1a9eb145a242ac66e80d90286d83fe7a61" kindref="member">rx_source_thread</ref>;</highlight></codeline>
<codeline lineno="4525" refid="structk__mbox__msg_1a73236acb7d27bb0233f5abb7214fb19c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="structk__mbox__msg_1a73236acb7d27bb0233f5abb7214fb19c" kindref="member">tx_target_thread</ref>;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/>_syncing_thread;</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(CONFIG_NUM_MBOX_ASYNC_MSGS<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/>*_async_sem;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4537" refid="structk__mbox" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mbox" kindref="compound">k_mbox</ref><sp/>{</highlight></codeline>
<codeline lineno="4539" refid="structk__mbox_1a0bca912a50120707ddafa66d740ade96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__mbox_1a0bca912a50120707ddafa66d740ade96" kindref="member">tx_msg_queue</ref>;</highlight></codeline>
<codeline lineno="4541" refid="structk__mbox_1a808a14c31892a2d042cdb0723a2956e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__mbox_1a808a14c31892a2d042cdb0723a2956e2" kindref="member">rx_msg_queue</ref>;</highlight></codeline>
<codeline lineno="4542" refid="structk__mbox_1a2c549d5bd7216b62d81ad2198e0d79e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="structk__mbox_1a2c549d5bd7216b62d81ad2198e0d79e4" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(<ref refid="structk__mbox" kindref="compound">k_mbox</ref>)</highlight></codeline>
<codeline lineno="4545"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_MBOX_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="4551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tx_msg_queue<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.tx_msg_queue),<sp/>\</highlight></codeline>
<codeline lineno="4553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rx_msg_queue<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.rx_msg_queue),<sp/>\</highlight></codeline>
<codeline lineno="4554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight></codeline>
<codeline lineno="4569" refid="group__mailbox__apis_1gab55cba898db47113a06641c01f3e3714" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MBOX_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="4570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_mbox,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="4571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_MBOX_INITIALIZER(name)<sp/>\</highlight></codeline>
<codeline lineno="4572"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4580" refid="group__mailbox__apis_1ga686f20c199a9e971822d8279d175d8c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mailbox__apis_1ga686f20c199a9e971822d8279d175d8c2" kindref="member">k_mbox_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox" kindref="compound">k_mbox</ref><sp/>*<ref refid="test__mbox__api_8c_1ab64dcf4f081bd916b6351045d0166c0b" kindref="member">mbox</ref>);</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601" refid="group__mailbox__apis_1gaa1e5cdd992d8b9be11f82254e1886ed2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mailbox__apis_1gaa1e5cdd992d8b9be11f82254e1886ed2" kindref="member">k_mbox_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox" kindref="compound">k_mbox</ref><sp/>*<ref refid="test__mbox__api_8c_1ab64dcf4f081bd916b6351045d0166c0b" kindref="member">mbox</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref><sp/>*tx_msg,</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"></highlight></codeline>
<codeline lineno="4617" refid="group__mailbox__apis_1gadd60f7b760371c0a141a1e4da253a0f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mailbox__apis_1gadd60f7b760371c0a141a1e4da253a0f0" kindref="member">k_mbox_async_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox" kindref="compound">k_mbox</ref><sp/>*<ref refid="test__mbox__api_8c_1ab64dcf4f081bd916b6351045d0166c0b" kindref="member">mbox</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref><sp/>*tx_msg,</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_sem<sp/>*<ref refid="timeout__order_8c_1a415c37e05febf68101d95d933a50c66b" kindref="member">sem</ref>);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight></codeline>
<codeline lineno="4637" refid="group__mailbox__apis_1ga2ea91154620b139dbed1ad949b97c3ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mailbox__apis_1ga2ea91154620b139dbed1ad949b97c3ef" kindref="member">k_mbox_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox" kindref="compound">k_mbox</ref><sp/>*<ref refid="test__mbox__api_8c_1ab64dcf4f081bd916b6351045d0166c0b" kindref="member">mbox</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref><sp/>*rx_msg,</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight></codeline>
<codeline lineno="4653" refid="group__mailbox__apis_1ga3d19e648e67f109609259543c9a01d6e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mailbox__apis_1ga3d19e648e67f109609259543c9a01d6e" kindref="member">k_mbox_data_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mbox__msg" kindref="compound">k_mbox_msg</ref><sp/>*rx_msg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4664" refid="structk__pipe" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>{</highlight></codeline>
<codeline lineno="4665" refid="structk__pipe_1acb78995d6b7df28a5452f5d2e88b4dfb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structk__pipe_1acb78995d6b7df28a5452f5d2e88b4dfb" kindref="member">buffer</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4666" refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4667" refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">bytes_used</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4668" refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">read_index</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4669" refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">write_index</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4670" refid="structk__pipe_1aa2a367a9c8f0be89bcdf1bf6d3b0b875" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="structk__pipe_1aa2a367a9c8f0be89bcdf1bf6d3b0b875" kindref="member">lock</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4673" refid="structk__pipe_1a81ab4435d9ca7e5246164fc4fcd9ad59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__pipe_1a81ab4435d9ca7e5246164fc4fcd9ad59" kindref="member">readers</ref>;<sp/></highlight></codeline>
<codeline lineno="4674" refid="structk__pipe_1ac61ce23d990cf4cef44a1ecfc5047ccc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__pipe_1ac61ce23d990cf4cef44a1ecfc5047ccc" kindref="member">writers</ref>;<sp/></highlight></codeline>
<codeline lineno="4675" refid="structk__pipe_1ab85435da2a54b81c5e38ffbb47c2f2ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structk__pipe_1ab85435da2a54b81c5e38ffbb47c2f2ce" kindref="member">wait_q</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4677" refid="structk__pipe_1a2ed95fbe24ea20c4f292a66def1d4dde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__pipe_1a2ed95fbe24ea20c4f292a66def1d4dde" kindref="member">flags</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(<ref refid="structk__pipe" kindref="compound">k_pipe</ref>)</highlight></codeline>
<codeline lineno="4680"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_PIPE_FLAG_ALLOC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PIPE_INITIALIZER(obj,<sp/>pipe_buffer,<sp/>pipe_buffer_size)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>pipe_buffer,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/>=<sp/>pipe_buffer_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bytes_used<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.read_index<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.write_index<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lock<sp/>=<sp/>{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.readers<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q.readers),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writers<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q.writers)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight></codeline>
<codeline lineno="4719" refid="group__pipe__apis_1gac2256aa00c59e78199be9bdefd61aa52" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_PIPE_DEFINE(name,<sp/>pipe_buffer_size,<sp/>pipe_align)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4720"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>unsigned<sp/>char<sp/>__noinit<sp/>__aligned(pipe_align)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4721"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_k_pipe_buf_##name[pipe_buffer_size];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4722"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_pipe,<sp/>name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4723"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PIPE_INITIALIZER(name,<sp/>_k_pipe_buf_##name,<sp/>pipe_buffer_size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight></codeline>
<codeline lineno="4736" refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749" refid="group__pipe__apis_1gaad0ab1b97b537da408031e4bcbe04f36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1gaad0ab1b97b537da408031e4bcbe04f36" kindref="member">k_pipe_cleanup</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766" refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" kindref="member">k_pipe_alloc_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"></highlight></codeline>
<codeline lineno="4786" refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_to_write,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytes_written,</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_xfer,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809" refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_to_read,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytes_read,</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_xfer,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight></codeline>
<codeline lineno="4821" refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight></codeline>
<codeline lineno="4831" refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight></codeline>
<codeline lineno="4843" refid="group__pipe__apis_1ga41484bb5c7dcd97e7a7b7f1422f8026f" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1ga41484bb5c7dcd97e7a7b7f1422f8026f" kindref="member">k_pipe_flush</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight></codeline>
<codeline lineno="4856" refid="group__pipe__apis_1ga71e0e38a15fa27f27c1f028223936445" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pipe__apis_1ga71e0e38a15fa27f27c1f028223936445" kindref="member">k_pipe_buffer_flush</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/>*<ref refid="test__mutex__error_8c_1aa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"></highlight></codeline>
<codeline lineno="4864"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_mem_slab<sp/>{</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/>wait_q;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_blocks;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>block_size;</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*free_list;</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_used;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>max_used;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" kindref="member">SYS_PORT_TRACING_TRACKING_FIELD</ref>(k_mem_slab)</highlight></codeline>
<codeline lineno="4877"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"></highlight></codeline>
<codeline lineno="4879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_MEM_SLAB_INITIALIZER(obj,<sp/>slab_buffer,<sp/>slab_block_size,<sp/>\</highlight></codeline>
<codeline lineno="4880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slab_num_blocks)<sp/>\</highlight></codeline>
<codeline lineno="4881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4882"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.wait_q<sp/>=<sp/>Z_WAIT_Q_INIT(&amp;obj.wait_q),<sp/>\</highlight></codeline>
<codeline lineno="4883"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lock<sp/>=<sp/>{},<sp/>\</highlight></codeline>
<codeline lineno="4884"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.num_blocks<sp/>=<sp/>slab_num_blocks,<sp/>\</highlight></codeline>
<codeline lineno="4885"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.block_size<sp/>=<sp/>slab_block_size,<sp/>\</highlight></codeline>
<codeline lineno="4886"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>slab_buffer,<sp/>\</highlight></codeline>
<codeline lineno="4887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.free_list<sp/>=<sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="4888"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.num_used<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="4889"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4890"><highlight class="normal"></highlight></codeline>
<codeline lineno="4891"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925" refid="group__mem__slab__apis_1ga60bc92eee58fcc5f121b8e4d82eaa69e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_SLAB_DEFINE(name,<sp/>slab_block_size,<sp/>slab_num_blocks,<sp/>slab_align)<sp/>\</highlight></codeline>
<codeline lineno="4926"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>__noinit_named(k_mem_slab_buf_##name)<sp/>\</highlight></codeline>
<codeline lineno="4927"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__aligned(WB_UP(slab_align))<sp/>\</highlight></codeline>
<codeline lineno="4928"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_k_mem_slab_buf_##name[(slab_num_blocks)<sp/>*<sp/>WB_UP(slab_block_size)];<sp/>\</highlight></codeline>
<codeline lineno="4929"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_mem_slab,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="4930"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_MEM_SLAB_INITIALIZER(name,<sp/>_k_mem_slab_buf_##name,<sp/>\</highlight></codeline>
<codeline lineno="4931"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WB_UP(slab_block_size),<sp/>slab_num_blocks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight></codeline>
<codeline lineno="4947" refid="group__mem__slab__apis_1ga90bdbb15f410991f54ba16025c24bc3c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_MEM_SLAB_DEFINE_STATIC(name,<sp/>slab_block_size,<sp/>slab_num_blocks,<sp/>slab_align)<sp/>\</highlight></codeline>
<codeline lineno="4948"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>char<sp/>__noinit_named(k_mem_slab_buf_##name)<sp/>\</highlight></codeline>
<codeline lineno="4949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__aligned(WB_UP(slab_align))<sp/>\</highlight></codeline>
<codeline lineno="4950"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_k_mem_slab_buf_##name[(slab_num_blocks)<sp/>*<sp/>WB_UP(slab_block_size)];<sp/>\</highlight></codeline>
<codeline lineno="4951"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>STRUCT_SECTION_ITERABLE(k_mem_slab,<sp/>name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="4952"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_MEM_SLAB_INITIALIZER(name,<sp/>_k_mem_slab_buf_##name,<sp/>\</highlight></codeline>
<codeline lineno="4953"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WB_UP(slab_block_size),<sp/>slab_num_blocks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"></highlight></codeline>
<codeline lineno="4976" refid="group__mem__slab__apis_1ga094a8f173f287e29bb287119c26889d1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mem__slab__apis_1ga094a8f173f287e29bb287119c26889d1" kindref="member">k_mem_slab_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_mem_slab<sp/>*slab,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>,</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>block_size,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_blocks);</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight></codeline>
<codeline lineno="5001" refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" kindref="member">k_mem_slab_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_mem_slab<sp/>*slab,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**mem,</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013" refid="group__mem__slab__apis_1ga97915aee5a59e19f8b28185eed93aac7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mem__slab__apis_1ga97915aee5a59e19f8b28185eed93aac7" kindref="member">k_mem_slab_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_mem_slab<sp/>*slab,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**mem);</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight></codeline>
<codeline lineno="5025" refid="group__mem__slab__apis_1gac76b96d7055e4ad94765c93530dd0720" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__mem__slab__apis_1gac76b96d7055e4ad94765c93530dd0720" kindref="member">k_mem_slab_num_used_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_mem_slab<sp/>*slab)</highlight></codeline>
<codeline lineno="5026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slab-&gt;num_used;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"></highlight></codeline>
<codeline lineno="5040" refid="group__mem__slab__apis_1gae0e949c1c3476dd57bc0c0ed627d2346" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__mem__slab__apis_1gae0e949c1c3476dd57bc0c0ed627d2346" kindref="member">k_mem_slab_max_used_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_mem_slab<sp/>*slab)</highlight></codeline>
<codeline lineno="5041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slab-&gt;max_used;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(slab);</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060" refid="group__mem__slab__apis_1gae87577e2873cf746db69216a82f94aea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__mem__slab__apis_1gae87577e2873cf746db69216a82f94aea" kindref="member">k_mem_slab_num_free_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>k_mem_slab<sp/>*slab)</highlight></codeline>
<codeline lineno="5061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slab-&gt;num_blocks<sp/>-<sp/>slab-&gt;num_used;</highlight></codeline>
<codeline lineno="5063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>kernel<sp/>synchronized<sp/>heap<sp/>struct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight></codeline>
<codeline lineno="5074" refid="structk__heap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/>{</highlight></codeline>
<codeline lineno="5075" refid="structk__heap_1a4b8551f4fd1cd648c68f47ea2ebd682f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__heap" kindref="compound">sys_heap</ref><sp/><ref refid="structk__heap_1a4b8551f4fd1cd648c68f47ea2ebd682f" kindref="member">heap</ref>;</highlight></codeline>
<codeline lineno="5076" refid="structk__heap_1abd30d236bd986e791ea7698583e45588" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wait_q_t<sp/><ref refid="structk__heap_1abd30d236bd986e791ea7698583e45588" kindref="member">wait_q</ref>;</highlight></codeline>
<codeline lineno="5077" refid="structk__heap_1a3bd15b8ad69a6ab76b5c4a297673e5ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="structk__heap_1a3bd15b8ad69a6ab76b5c4a297673e5ec" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="5078"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight></codeline>
<codeline lineno="5093" refid="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" kindref="member">k_heap_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5114" refid="group__heap__apis_1gaf77211a72441de389857bc13e10be4e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__heap__apis_1gaf77211a72441de389857bc13e10be4e6" kindref="member">k_heap_aligned_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes,</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"></highlight></codeline>
<codeline lineno="5137" refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes,</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight></codeline>
<codeline lineno="5150" refid="group__heap__apis_1ga6cf917a0b3d91a0101192bd4808ada9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__apis_1ga6cf917a0b3d91a0101192bd4808ada9c" kindref="member">k_heap_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem);</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hand-calculated<sp/>minimum<sp/>heap<sp/>sizes<sp/>needed<sp/>to<sp/>return<sp/>a<sp/>successful</highlight></codeline>
<codeline lineno="5153"><highlight class="comment"><sp/>*<sp/>1-byte<sp/>allocation.<sp/><sp/>See<sp/>details<sp/>in<sp/>lib/os/heap.[ch]</highlight></codeline>
<codeline lineno="5154"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_HEAP_MIN_SIZE<sp/>(sizeof(void<sp/>*)<sp/>&gt;<sp/>4<sp/>?<sp/>56<sp/>:<sp/>44)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5156"><highlight class="normal"></highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_HEAP_DEFINE_IN_SECT(name,<sp/>bytes,<sp/>in_section)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>in_section<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__aligned(8)<sp/></highlight><highlight class="comment">/*<sp/>CHUNK_UNIT<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kheap_##name[MAX(bytes,<sp/>Z_HEAP_MIN_SIZE)];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCT_SECTION_ITERABLE(k_heap,<sp/>name)<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.heap<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_mem<sp/>=<sp/>kheap_##name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.init_bytes<sp/>=<sp/>MAX(bytes,<sp/>Z_HEAP_MIN_SIZE),<sp/>\</highlight></codeline>
<codeline lineno="5181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"></highlight></codeline>
<codeline lineno="5198" refid="group__heap__apis_1ga795d7f1e6d5b7b19a7a50198d7829a0f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_HEAP_DEFINE(name,<sp/>bytes)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_HEAP_DEFINE_IN_SECT(name,<sp/>bytes,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__noinit_named(kheap_buf_##name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216" refid="group__heap__apis_1ga968f4c6a201fdf6862d62dd5d9f8d032" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_HEAP_DEFINE_NOCACHE(name,<sp/>bytes)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_HEAP_DEFINE_IN_SECT(name,<sp/>bytes,<sp/>__nocache)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight></codeline>
<codeline lineno="5247" refid="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" kindref="member">k_aligned_alloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"></highlight></codeline>
<codeline lineno="5259" refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight></codeline>
<codeline lineno="5272" refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>);</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight></codeline>
<codeline lineno="5285" refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nmemb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>polling<sp/>API<sp/>-<sp/>PRIVATE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5290"><highlight class="normal"></highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_POLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_INIT_OBJ_POLL_EVENT(obj)<sp/>do<sp/>{<sp/>(obj)-&gt;poll_event<sp/>=<sp/>NULL;<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_INIT_OBJ_POLL_EVENT(obj)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"></highlight></codeline>
<codeline lineno="5297"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>private<sp/>-<sp/>types<sp/>bit<sp/>positions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_poll_types_bits<sp/>{</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>be<sp/>used<sp/>to<sp/>ignore<sp/>an<sp/>event<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_TYPE_IGNORE,</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>be<sp/>signaled<sp/>by<sp/>k_poll_signal_raise()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_TYPE_SIGNAL,</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>semaphore<sp/>availability<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_TYPE_SEM_AVAILABLE,</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>queue/FIFO/LIFO<sp/>data<sp/>availability<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_TYPE_DATA_AVAILABLE,</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>msgq<sp/>data<sp/>availability<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_TYPE_MSGQ_DATA_AVAILABLE,</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_NUM_TYPES</highlight></codeline>
<codeline lineno="5315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_POLL_TYPE_BIT(type)<sp/>(1U<sp/>&lt;&lt;<sp/>((type)<sp/>-<sp/>1U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>private<sp/>-<sp/>states<sp/>bit<sp/>positions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5320"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_poll_states_bits<sp/>{</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>default<sp/>state<sp/>when<sp/>creating<sp/>event<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_STATE_NOT_READY,</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>signaled<sp/>by<sp/>k_poll_signal_raise()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_STATE_SIGNALED,</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>semaphore<sp/>is<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_STATE_SEM_AVAILABLE,</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>data<sp/>is<sp/>available<sp/>to<sp/>read<sp/>on<sp/>queue/FIFO/LIFO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_STATE_DATA_AVAILABLE,</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>queue/FIFO/LIFO<sp/>wait<sp/>was<sp/>cancelled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_STATE_CANCELLED,</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>data<sp/>is<sp/>available<sp/>to<sp/>read<sp/>on<sp/>a<sp/>message<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_STATE_MSGQ_DATA_AVAILABLE,</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_POLL_NUM_STATES</highlight></codeline>
<codeline lineno="5340"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_POLL_STATE_BIT(state)<sp/>(1U<sp/>&lt;&lt;<sp/>((state)<sp/>-<sp/>1U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_POLL_EVENT_NUM_UNUSED_BITS<sp/>\</highlight></codeline>
<codeline lineno="5345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32<sp/>-<sp/>(0<sp/>\</highlight></codeline>
<codeline lineno="5346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>8<sp/></highlight><highlight class="comment">/*<sp/>tag<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="5347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_POLL_NUM_TYPES<sp/>\</highlight></codeline>
<codeline lineno="5348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_POLL_NUM_STATES<sp/>\</highlight></codeline>
<codeline lineno="5349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>modes<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="5350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>polling<sp/>API<sp/>-<sp/>PRIVATE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Public<sp/>polling<sp/>API<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>-<sp/>values<sp/>for<sp/>k_poll_event.type<sp/>bitfield<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5364" refid="group__poll__apis_1gafd5d801eb9e9cf6097b2c08b4933998e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_TYPE_IGNORE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5365" refid="group__poll__apis_1ga144d8eb34d85f6053e454410a10bf56a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_TYPE_SIGNAL<sp/>Z_POLL_TYPE_BIT(_POLL_TYPE_SIGNAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366" refid="group__poll__apis_1ga0fd7605bdffd43dff7480a90a603ffde" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_TYPE_SEM_AVAILABLE<sp/>Z_POLL_TYPE_BIT(_POLL_TYPE_SEM_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5367" refid="group__poll__apis_1ga58d656f73f031a39b8a936133fe5504f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_TYPE_DATA_AVAILABLE<sp/>Z_POLL_TYPE_BIT(_POLL_TYPE_DATA_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368" refid="group__poll__apis_1ga71734fee18c523cf70276260118afb91" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_TYPE_FIFO_DATA_AVAILABLE<sp/>K_POLL_TYPE_DATA_AVAILABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5369" refid="group__poll__apis_1gaa83509b54175fb6c98324422a928d5e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_TYPE_MSGQ_DATA_AVAILABLE<sp/>Z_POLL_TYPE_BIT(_POLL_TYPE_MSGQ_DATA_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>-<sp/>polling<sp/>modes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5372" refid="group__poll__apis_1ga36d7978872a83191dd3cc16d62165add" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__poll__apis_1ga36d7978872a83191dd3cc16d62165add" kindref="member">k_poll_modes</ref><sp/>{</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>polling<sp/>thread<sp/>does<sp/>not<sp/>take<sp/>ownership<sp/>of<sp/>objects<sp/>when<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5374" refid="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda22874743e2f6b0f1fd55c5375732b681" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda22874743e2f6b0f1fd55c5375732b681" kindref="member">K_POLL_MODE_NOTIFY_ONLY</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda71e08944b3e944c28056f9a5fbfb018c" kindref="member">K_POLL_NUM_MODES</ref></highlight></codeline>
<codeline lineno="5377" refid="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda71e08944b3e944c28056f9a5fbfb018c" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>-<sp/>values<sp/>for<sp/>k_poll_event.state<sp/>bitfield<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5380" refid="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_STATE_NOT_READY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5381" refid="group__poll__apis_1ga478aae7fe4fb5c7b7c76ed216c22a7f1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_STATE_SIGNALED<sp/>Z_POLL_STATE_BIT(_POLL_STATE_SIGNALED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5382" refid="group__poll__apis_1gae9e3eefd5a29a538d22f53592578bb37" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_STATE_SEM_AVAILABLE<sp/>Z_POLL_STATE_BIT(_POLL_STATE_SEM_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5383" refid="group__poll__apis_1gac166d9919d591bace163c5211e7b41f4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_STATE_DATA_AVAILABLE<sp/>Z_POLL_STATE_BIT(_POLL_STATE_DATA_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384" refid="group__poll__apis_1gabd5ac3341698534f39ded718079d6168" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_STATE_FIFO_DATA_AVAILABLE<sp/>K_POLL_STATE_DATA_AVAILABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5385" refid="group__poll__apis_1gac236074cd43f59f28b803fe2c4a4f6f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_STATE_MSGQ_DATA_AVAILABLE<sp/>Z_POLL_STATE_BIT(_POLL_STATE_MSGQ_DATA_AVAILABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5386" refid="group__poll__apis_1gadaf4b4c8e13afb54114af72d133e1fdb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_STATE_CANCELLED<sp/>Z_POLL_STATE_BIT(_POLL_STATE_CANCELLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>-<sp/>poll<sp/>signal<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5389" refid="structk__poll__signal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>{</highlight></codeline>
<codeline lineno="5391" refid="structk__poll__signal_1a22e88955ba0e369d39edefadcf4c60fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref><sp/><ref refid="structk__poll__signal_1a22e88955ba0e369d39edefadcf4c60fd" kindref="member">poll_events</ref>;</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight></codeline>
<codeline lineno="5397" refid="structk__poll__signal_1ae9fe6751d75f7d2b2800cb723603c0fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal_1ae9fe6751d75f7d2b2800cb723603c0fe" kindref="member">signaled</ref>;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"></highlight></codeline>
<codeline lineno="5400" refid="structk__poll__signal_1ab438c1e36cecda66fe2c4642518a1db1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal_1ab438c1e36cecda66fe2c4642518a1db1" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"></highlight></codeline>
<codeline lineno="5403" refid="group__poll__apis_1ga6d6321e189afca73a276cd671ec531ae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_SIGNAL_INITIALIZER(obj)<sp/>\</highlight></codeline>
<codeline lineno="5404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.poll_events<sp/>=<sp/>SYS_DLIST_STATIC_INIT(&amp;obj.poll_events),<sp/>\</highlight></codeline>
<codeline lineno="5406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.signaled<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="5407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.result<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="5408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5413" refid="structk__poll__event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/>{</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref><sp/>_node;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"></highlight></codeline>
<codeline lineno="5418" refid="structk__poll__event_1ad030c37b97f33e1bbb3361057180fa4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_poller<sp/>*<ref refid="structk__poll__event_1ad030c37b97f33e1bbb3361057180fa4f" kindref="member">poller</ref>;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight></codeline>
<codeline lineno="5421" refid="structk__poll__event_1a37c5f45deaa046b356d95af569220c70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__poll__event_1a37c5f45deaa046b356d95af569220c70" kindref="member">tag</ref>:8;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"></highlight></codeline>
<codeline lineno="5424" refid="structk__poll__event_1a8f9e251aa8722eb4716f622e85be34ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__poll__event_1a8f9e251aa8722eb4716f622e85be34ae" kindref="member">type</ref>:_POLL_NUM_TYPES;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight></codeline>
<codeline lineno="5427" refid="structk__poll__event_1aaf4f32852d799a406bfeea4e57891129" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__poll__event_1aaf4f32852d799a406bfeea4e57891129" kindref="member">state</ref>:_POLL_NUM_STATES;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"></highlight></codeline>
<codeline lineno="5430" refid="structk__poll__event_1acca81763486ef5ebcc911cb1cbd6c899" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__poll__event_1acca81763486ef5ebcc911cb1cbd6c899" kindref="member">mode</ref>:1;</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight></codeline>
<codeline lineno="5433" refid="structk__poll__event_1a750ac48e7aa3c8fb70814b24e951fc85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structk__poll__event_1a750ac48e7aa3c8fb70814b24e951fc85" kindref="member">unused</ref>:_POLL_EVENT_NUM_UNUSED_BITS;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5437" refid="structk__poll__event_1aeaf67f9bc91d59fb2939e1469a088f2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structk__poll__event_1aeaf67f9bc91d59fb2939e1469a088f2d" kindref="member">obj</ref>;</highlight></codeline>
<codeline lineno="5438" refid="structk__poll__event_1a130aaff7a8908993ed6be737a94a52ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*<ref refid="structk__poll__event_1a130aaff7a8908993ed6be737a94a52ab" kindref="member">signal</ref>;</highlight></codeline>
<codeline lineno="5439" refid="structk__poll__event_1a9ed342b8a45884f985245f55b0e1c8cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/>*<ref refid="structk__poll__event_1a9ed342b8a45884f985245f55b0e1c8cc" kindref="member">sem</ref>;</highlight></codeline>
<codeline lineno="5440" refid="structk__poll__event_1a4ba07f42f4af03f30478ebf48a1653f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__fifo" kindref="compound">k_fifo</ref><sp/>*<ref refid="structk__poll__event_1a4ba07f42f4af03f30478ebf48a1653f7" kindref="member">fifo</ref>;</highlight></codeline>
<codeline lineno="5441" refid="structk__poll__event_1a6e30a6ce30702817895e66f22f0abedf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_queue<sp/>*<ref refid="structk__poll__event_1a6e30a6ce30702817895e66f22f0abedf" kindref="member">queue</ref>;</highlight></codeline>
<codeline lineno="5442" refid="structk__poll__event_1a5bbe94482a70ec13c2106f89afd2d59c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__msgq" kindref="compound">k_msgq</ref><sp/>*<ref refid="structk__poll__event_1a5bbe94482a70ec13c2106f89afd2d59c" kindref="member">msgq</ref>;</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5444"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"></highlight></codeline>
<codeline lineno="5446" refid="group__poll__apis_1ga8e3889f2bac281a6e65e31068e58047e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_EVENT_INITIALIZER(_event_type,<sp/>_event_mode,<sp/>_event_obj)<sp/>\</highlight></codeline>
<codeline lineno="5447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.poller<sp/>=<sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="5449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>_event_type,<sp/>\</highlight></codeline>
<codeline lineno="5450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.state<sp/>=<sp/>K_POLL_STATE_NOT_READY,<sp/>\</highlight></codeline>
<codeline lineno="5451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mode<sp/>=<sp/>_event_mode,<sp/>\</highlight></codeline>
<codeline lineno="5452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.unused<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="5453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.obj<sp/>=<sp/>_event_obj,<sp/>\</highlight></codeline>
<codeline lineno="5455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="5456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"></highlight></codeline>
<codeline lineno="5458" refid="group__poll__apis_1gada2366896d913dc916b3c28642648b63" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>K_POLL_EVENT_STATIC_INITIALIZER(_event_type,<sp/>_event_mode,<sp/>_event_obj,<sp/>\</highlight></codeline>
<codeline lineno="5459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_tag)<sp/>\</highlight></codeline>
<codeline lineno="5460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tag<sp/>=<sp/>event_tag,<sp/>\</highlight></codeline>
<codeline lineno="5462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>_event_type,<sp/>\</highlight></codeline>
<codeline lineno="5463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.state<sp/>=<sp/>K_POLL_STATE_NOT_READY,<sp/>\</highlight></codeline>
<codeline lineno="5464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mode<sp/>=<sp/>_event_mode,<sp/>\</highlight></codeline>
<codeline lineno="5465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.unused<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="5466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.obj<sp/>=<sp/>_event_obj,<sp/>\</highlight></codeline>
<codeline lineno="5468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="5469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight></codeline>
<codeline lineno="5486" refid="group__poll__apis_1gaa06bddd93a024fc5326d93187d80eb03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__poll__apis_1gaa06bddd93a024fc5326d93187d80eb03" kindref="member">k_poll_event_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/>*event,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>type,</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"></highlight></codeline>
<codeline lineno="5532" refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/>*events,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_events,</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight></codeline>
<codeline lineno="5543" refid="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" kindref="member">k_poll_signal_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*sig);</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"></highlight></codeline>
<codeline lineno="5545"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5546"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Reset<sp/>a<sp/>poll<sp/>signal<sp/>object&apos;s<sp/>state<sp/>to<sp/>unsignaled.</highlight></codeline>
<codeline lineno="5547"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5548"><highlight class="comment"><sp/>*<sp/>@param<sp/>sig<sp/>A<sp/>poll<sp/>signal<sp/>object</highlight></codeline>
<codeline lineno="5549"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5550" refid="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" kindref="member">k_poll_signal_reset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*sig);</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"></highlight></codeline>
<codeline lineno="5562" refid="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" kindref="member">k_poll_signal_check</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*sig,</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*signaled,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"></highlight></codeline>
<codeline lineno="5589" refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/>*sig,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"></highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_handle_obj_poll_events(<ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref><sp/>*events,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"></highlight></codeline>
<codeline lineno="5616" refid="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" kindref="member">k_cpu_idle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__arch-pm_1ga6ce051203e6cc091d0fb42a15f662a48" kindref="member">arch_cpu_idle</ref>();</highlight></codeline>
<codeline lineno="5619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight></codeline>
<codeline lineno="5635" refid="group__cpu__idle__apis_1gadf88ece6447b65b7d0d2f3a70ab4fe8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cpu__idle__apis_1gadf88ece6447b65b7d0d2f3a70ab4fe8f" kindref="member">k_cpu_atomic_idle</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>)</highlight></codeline>
<codeline lineno="5636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__arch-pm_1ga4d0297717c23a3cc5df434549e26924d" kindref="member">arch_cpu_atomic_idle</ref>(<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="5638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_EXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5648"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>architecture<sp/>has<sp/>direct<sp/>support<sp/>for<sp/>triggering<sp/>a<sp/>CPU<sp/>exception<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>z_except_reason(reason)<sp/>ARCH_EXCEPT(reason)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5651"><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_ASSERT_NO_FILE_INFO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5653"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__EXCEPT_LOC()<sp/>__ASSERT_PRINT(&quot;@<sp/>%s:%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__)</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5655"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__EXCEPT_LOC()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5656"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>This<sp/>is<sp/>the<sp/>implementation<sp/>for<sp/>arches<sp/>that<sp/>do<sp/>not<sp/>implement</highlight></codeline>
<codeline lineno="5659"><highlight class="comment"><sp/>*<sp/>ARCH_EXCEPT()<sp/>to<sp/>generate<sp/>a<sp/>real<sp/>CPU<sp/>exception.</highlight></codeline>
<codeline lineno="5660"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5661"><highlight class="comment"><sp/>*<sp/>We<sp/>won&apos;t<sp/>have<sp/>a<sp/>real<sp/>exception<sp/>frame<sp/>to<sp/>determine<sp/>the<sp/>PC<sp/>value<sp/>when</highlight></codeline>
<codeline lineno="5662"><highlight class="comment"><sp/>*<sp/>the<sp/>oops<sp/>occurred,<sp/>so<sp/>print<sp/>file<sp/>and<sp/>line<sp/>number<sp/>before<sp/>we<sp/>jump<sp/>into</highlight></codeline>
<codeline lineno="5663"><highlight class="comment"><sp/>*<sp/>the<sp/>fatal<sp/>error<sp/>handler.</highlight></codeline>
<codeline lineno="5664"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5665"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>z_except_reason(reason)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5666"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__EXCEPT_LOC();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="5667"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_fatal_error(reason,<sp/>NULL);<sp/>\</highlight></codeline>
<codeline lineno="5668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5669"><highlight class="normal"></highlight></codeline>
<codeline lineno="5670"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ARCH__EXCEPT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5671"><highlight class="normal"></highlight></codeline>
<codeline lineno="5683" refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_oops()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_except_reason(K_ERR_KERNEL_OOPS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight></codeline>
<codeline lineno="5693" refid="include_2kernel_8h_1aedd541f707b1463aaac15c7798340329" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>k_panic()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_except_reason(K_ERR_KERNEL_PANIC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"></highlight></codeline>
<codeline lineno="5695"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5696"><highlight class="comment"><sp/>*<sp/>private<sp/>APIs<sp/>that<sp/>are<sp/>utilized<sp/>by<sp/>one<sp/>or<sp/>more<sp/>public<sp/>APIs</highlight></codeline>
<codeline lineno="5697"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5698"><highlight class="normal"></highlight></codeline>
<codeline lineno="5702"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_init_thread_base(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_thread_base<sp/>*thread_base,</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>initial_state,</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>options);</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"></highlight></codeline>
<codeline lineno="5706"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_init_static_threads(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5715"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>z_init_static_threads()<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5716"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5717"><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>z_is_thread_essential(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight></codeline>
<codeline lineno="5723"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5724"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_smp_thread_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_smp_thread_swap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_timer_expiration_handler(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_timeout<sp/>*<ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"></highlight></codeline>
<codeline lineno="5733"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PRINTK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5741"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>k_str_out(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1adc08ed1554f35803d229aeaf11216b3f" kindref="member">c</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight></codeline>
<codeline lineno="5764" refid="include_2kernel_8h_1a2df4b2550ace30512cddebd36b6a54a1" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1a2df4b2550ace30512cddebd36b6a54a1" kindref="member">k_float_disable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"></highlight></codeline>
<codeline lineno="5804" refid="include_2kernel_8h_1a81fb955ddd41658a9aad5c083f173f77" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1a81fb955ddd41658a9aad5c083f173f77" kindref="member">k_float_enable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>options);</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"></highlight></codeline>
<codeline lineno="5813" refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" kindref="member">k_thread_runtime_stats_get</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread__runtime__stats" kindref="compound">k_thread_runtime_stats_t</ref><sp/>*stats);</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"></highlight></codeline>
<codeline lineno="5822" refid="include_2kernel_8h_1abd855bb83b3be393b46833e7854a193e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1abd855bb83b3be393b46833e7854a193e" kindref="member">k_thread_runtime_stats_all_get</ref>(<ref refid="structk__thread__runtime__stats" kindref="compound">k_thread_runtime_stats_t</ref><sp/>*stats);</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"></highlight></codeline>
<codeline lineno="5833" refid="include_2kernel_8h_1a3e52beb93fca2231d5860fe1cf1181fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1a3e52beb93fca2231d5860fe1cf1181fd" kindref="member">k_thread_runtime_stats_enable</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"></highlight></codeline>
<codeline lineno="5844" refid="include_2kernel_8h_1ae5ea2e05a602b7d5ee78a65ced61d63b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1ae5ea2e05a602b7d5ee78a65ced61d63b" kindref="member">k_thread_runtime_stats_disable</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"></highlight></codeline>
<codeline lineno="5853" refid="include_2kernel_8h_1a54f2652ba1ed613219941eaaf193180c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1a54f2652ba1ed613219941eaaf193180c" kindref="member">k_sys_runtime_stats_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"></highlight></codeline>
<codeline lineno="5862" refid="include_2kernel_8h_1a2e3c96c0b11108ee7eca3f0666c780e0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="include_2kernel_8h_1a2e3c96c0b11108ee7eca3f0666c780e0" kindref="member">k_sys_runtime_stats_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"></highlight></codeline>
<codeline lineno="5864"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5867"><highlight class="normal"></highlight></codeline>
<codeline lineno="5868"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tracing_2tracing_8h" kindref="compound">tracing/tracing.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5869"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h" kindref="compound">syscalls/kernel.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5870"><highlight class="normal"></highlight></codeline>
<codeline lineno="5871"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5872"><highlight class="normal"></highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_KERNEL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/kernel.h"/>
  </compounddef>
</doxygen>
