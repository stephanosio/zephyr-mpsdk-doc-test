<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="flash_8h" kind="file" language="C++">
    <compoundname>flash.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="lib_2libc_2minimal_2include_2sys_2types_8h" local="no">sys/types.h</includes>
    <includes local="no">device.h</includes>
    <includes local="no">syscalls/flash.h</includes>
    <includedby refid="stream__flash_8h" local="no">include/storage/stream_flash.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/flash.h</label>
        <link refid="flash_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="6">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>device.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="8">
        <label>syscalls/flash.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>include/dfu/flash_img.h</label>
        <link refid="flash__img_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/flash.h</label>
        <link refid="flash_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/storage/stream_flash.h</label>
        <link refid="stream__flash_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structflash__pages__layout" prot="public">flash_pages_layout</innerclass>
    <innerclass refid="structflash__parameters" prot="public">flash_parameters</innerclass>
    <innerclass refid="structflash__driver__api" prot="public">flash_driver_api</innerclass>
    <innerclass refid="structflash__pages__info" prot="public">flash_pages_info</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga358404d040b7ef30c8d24106e97bc290" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_read) (const struct device *dev, off_t offset, void *data, size_t len)</definition>
        <argsstring>)(const struct device *dev, off_t offset, void *data, size_t len)</argsstring>
        <name>flash_api_read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="69" column="9" bodyfile="include/drivers/flash.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1gaf6b0c3aa2b6514ac8936aa0c7fda96ba" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_write) (const struct device *dev, off_t offset, const void *data, size_t len)</definition>
        <argsstring>)(const struct device *dev, off_t offset, const void *data, size_t len)</argsstring>
        <name>flash_api_write</name>
        <briefdescription>
<para>Flash write implementation handler type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Any necessary write protection management must be performed by the driver, with the driver responsible for ensuring the &quot;write-protect&quot; after the operation completes (successfully or not) matches the write-protect state when the operation was started. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="80" column="9" bodyfile="include/drivers/flash.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga2178a2338e652396ba9811ca449f4cb5" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_erase) (const struct device *dev, off_t offset, size_t size)</definition>
        <argsstring>)(const struct device *dev, off_t offset, size_t size)</argsstring>
        <name>flash_api_erase</name>
        <briefdescription>
<para>Flash erase implementation handler type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Any necessary erase protection management must be performed by the driver, with the driver responsible for ensuring the &quot;erase-protect&quot; after the operation completes (successfully or not) matches the erase-protect state when the operation was started. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="91" column="9" bodyfile="include/drivers/flash.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga2dee3874cb1be4ef4dab599963c30e70" prot="public" static="no">
        <type>const struct <ref refid="structflash__parameters" kindref="compound">flash_parameters</ref> *(*</type>
        <definition>typedef const struct flash_parameters *(* flash_api_get_parameters) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>flash_api_get_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="91" column="9" bodyfile="include/drivers/flash.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga7576411536217c9ec3e167e7a5ca82a5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* flash_api_pages_layout) (const struct device *dev, const struct flash_pages_layout **layout, size_t *layout_size)</definition>
        <argsstring>)(const struct device *dev, const struct flash_pages_layout **layout, size_t *layout_size)</argsstring>
        <name>flash_api_pages_layout</name>
        <briefdescription>
<para>Retrieve a flash device&apos;s layout. </para>
        </briefdescription>
        <detaileddescription>
<para>A flash device layout is a run-length encoded description of the pages on the device. (Here, &quot;page&quot; means the smallest erasable area on the flash device.)</para>
<para>For flash memories which have uniform page sizes, this routine returns an array of length 1, which specifies the page size and number of pages in the memory.</para>
<para>Layouts for flash memories with nonuniform page sizes will be returned as an array with multiple elements, each of which describes a group of pages that all have the same size. In this case, the sequence of array elements specifies the order in which these groups occur on the device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash device whose layout to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>The flash layout will be returned in this argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the returned layout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="118" column="9" bodyfile="include/drivers/flash.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1gac7b802015885044df6a1872513b89ab5" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_sfdp_read) (const struct device *dev, off_t offset, void *data, size_t len)</definition>
        <argsstring>)(const struct device *dev, off_t offset, void *data, size_t len)</argsstring>
        <name>flash_api_sfdp_read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="123" column="9" bodyfile="include/drivers/flash.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__internal__interface_1ga088369ef7593aa7c1fbe4cdad6e5b994" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* flash_api_read_jedec_id) (const struct device *dev, uint8_t *id)</definition>
        <argsstring>)(const struct device *dev, uint8_t *id)</argsstring>
        <name>flash_api_read_jedec_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="125" column="9" bodyfile="include/drivers/flash.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flash__interface_1ga41bfc5eb05a8e73873763c36f3e1ec6f" prot="public" static="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>typedef bool(* flash_page_cb) (const struct flash_pages_info *info, void *data)</definition>
        <argsstring>)(const struct flash_pages_info *info, void *data)</argsstring>
        <name>flash_page_cb</name>
        <briefdescription>
<para>Callback type for iterating over flash pages present on a device. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback should return true to continue iterating, and false to halt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information for current page </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data for callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True to continue iteration, false to halt iteration. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__flash__interface_1ga275f2346e88b5e4d050dae426f0953fe" kindref="member">flash_page_foreach()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="297" column="9" bodyfile="include/drivers/flash.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flash__interface_1gaa7c9382796aad64da0da683f54600b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_read</definition>
        <argsstring>(const struct device *dev, off_t offset, void *data, size_t len)</argsstring>
        <name>flash_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read data from flash. </para>
        </briefdescription>
        <detaileddescription>
<para>All flash drivers support reads without alignment restrictions on the read offset, the read size, or the destination address.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>: flash dev </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: Offset (byte aligned) to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>: Buffer to store read data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>: Number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="163" column="6" declfile="include/drivers/flash.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1ga76d7880cc5e18ca40237736d3bd94324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_write</definition>
        <argsstring>(const struct device *dev, off_t offset, const void *data, size_t len)</argsstring>
        <name>flash_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Write buffer into flash memory. </para>
        </briefdescription>
        <detaileddescription>
<para>All flash drivers support a source buffer located either in RAM or SoC flash, without alignment restrictions on the source address. Write size and offset must be multiples of the minimum write block size supported by the driver.</para>
<para>Any necessary write protection management is performed by the driver write implementation itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>: flash device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: starting offset for the write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>: data to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>: Number of bytes to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="194" column="6" declfile="include/drivers/flash.h" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1ga05f9c8b0c1ff7273f71797e7ff799c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_erase</definition>
        <argsstring>(const struct device *dev, off_t offset, size_t size)</argsstring>
        <name>flash_erase</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Erase part or all of a flash memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Acceptable values of erase size and offset are subject to hardware-specific multiples of page size and offset. Please check the API implemented by the underlying sub driver, for example by using <ref refid="group__flash__interface_1gafc959b0363eb27d6a3237e4288d60979" kindref="member">flash_get_page_info_by_offs()</ref> if that is supported by your flash driver.</para>
<para>Any necessary erase protection management is performed by the driver erase implementation itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>: flash device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: erase area starting offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: size of area to be erased</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__flash__interface_1gafc959b0363eb27d6a3237e4288d60979" kindref="member">flash_get_page_info_by_offs()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__flash__interface_1gaae733082fa92f80261d5895d3f81a98b" kindref="member">flash_get_page_info_by_idx()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="231" column="6" declfile="include/drivers/flash.h" declline="231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1gafc959b0363eb27d6a3237e4288d60979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_get_page_info_by_offs</definition>
        <argsstring>(const struct device *dev, off_t offset, struct flash_pages_info *info)</argsstring>
        <name>flash_get_page_info_by_offs</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>struct <ref refid="structflash__pages__info" kindref="compound">flash_pages_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get the size and start offset of flash page at certain flash offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>flash device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within the page </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Page Info structure to be filled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -EINVAL if page of the offset doesn&apos;t exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="261" column="6" declfile="include/drivers/flash.h" declline="261" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1gaae733082fa92f80261d5895d3f81a98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_get_page_info_by_idx</definition>
        <argsstring>(const struct device *dev, uint32_t page_index, struct flash_pages_info *info)</argsstring>
        <name>flash_get_page_info_by_idx</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>page_index</declname>
        </param>
        <param>
          <type>struct <ref refid="structflash__pages__info" kindref="compound">flash_pages_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get the size and start offset of flash page of certain index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>flash device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the page. Index are counted from 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Page Info structure to be filled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -EINVAL if page of the index doesn&apos;t exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="274" column="6" declfile="include/drivers/flash.h" declline="274" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1gaf750fe20c02758be7e37f36d2d16345e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t flash_get_page_count</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>flash_get_page_count</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the total number of flash pages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>flash device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of flash pages. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="285" column="9" declfile="include/drivers/flash.h" declline="285" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1ga275f2346e88b5e4d050dae426f0953fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void flash_page_foreach</definition>
        <argsstring>(const struct device *dev, flash_page_cb cb, void *data)</argsstring>
        <name>flash_page_foreach</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__flash__interface_1ga41bfc5eb05a8e73873763c36f3e1ec6f" kindref="member">flash_page_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Iterate over all flash pages on a device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine iterates over all flash pages on the given device, ordered by increasing start offset. For each page, it invokes the given callback, passing it the page&apos;s information and a private data object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device whose pages to iterate over </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to invoke for each flash page </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data for callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="311" column="6" declfile="include/drivers/flash.h" declline="311" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1ga8e9b921299bfb059bf72445a2ffa5a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_sfdp_read</definition>
        <argsstring>(const struct device *dev, off_t offset, void *data, size_t len)</argsstring>
        <name>flash_sfdp_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read data from Serial Flash Discoverable Parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads data from a serial flash device compatible with the JEDEC JESD216 standard for encoding flash memory characteristics.</para>
<para>Availability of this API is conditional on selecting <computeroutput>CONFIG_FLASH_JESD216_API</computeroutput> and support of that functionality in the driver underlying <computeroutput>dev</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device from which parameters will be read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>address within the SFDP region containing data of interest </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>where the data to be read will be placed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes of data to be read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if the flash driver does not support SFDP access </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>negative</parametername>
</parameternamelist>
<parameterdescription>
<para>values for other errors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="336" column="6" declfile="include/drivers/flash.h" declline="336" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1gadb273ed317e1088b57adcac3385f50a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_read_jedec_id</definition>
        <argsstring>(const struct device *dev, uint8_t *id)</argsstring>
        <name>flash_read_jedec_id</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Read the JEDEC ID from a compatible flash device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device from which id will be read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a buffer of at least 3 bytes into which id will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on successful store of 3-byte JEDEC id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if flash driver doesn&apos;t support this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>negative</parametername>
</parameternamelist>
<parameterdescription>
<para>values for other errors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="364" column="6" declfile="include/drivers/flash.h" declline="364" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1gaadfb323bc1b4efa39e7bc0a048c472a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t flash_get_write_block_size</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>flash_get_write_block_size</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the minimum write block size supported by the driver. </para>
        </briefdescription>
        <detaileddescription>
<para>The write block size supported by the driver might differ from the write block size of memory used because the driver might implements write-modify algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>flash device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>write block size in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="391" column="9" declfile="include/drivers/flash.h" declline="391" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__flash__interface_1ga07b516708224b7a69a5169ef9c5c26e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structflash__parameters" kindref="compound">flash_parameters</ref> *</type>
        <definition>const struct flash_parameters * flash_get_parameters</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>flash_get_parameters</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get pointer to <ref refid="structflash__parameters" kindref="compound">flash_parameters</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para>Returned pointer points to a structure that should be considered constant through a runtime, regardless if it is defined in RAM or Flash. Developer is free to cache the structure pointer or copy its contents.</para>
<para><simplesect kind="return"><para>pointer to <ref refid="structflash__parameters" kindref="compound">flash_parameters</ref> structure characteristic for the device. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/flash.h" line="413" column="30" declfile="include/drivers/flash.h" declline="413" declcolumn="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public API for FLASH drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_FLASH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_FLASH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FLASH_PAGE_LAYOUT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structflash__pages__layout" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__pages__layout" kindref="compound">flash_pages_layout</ref><sp/>{</highlight></codeline>
<codeline lineno="34" refid="structflash__pages__layout_1af5e496e680dbe9f4fd2738e6dc2534ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structflash__pages__layout_1af5e496e680dbe9f4fd2738e6dc2534ec" kindref="member">pages_count</ref>;<sp/></highlight><highlight class="comment">/*<sp/>count<sp/>of<sp/>pages<sp/>sequence<sp/>of<sp/>the<sp/>same<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structflash__pages__layout_1aabdad4d8a197936f7756950bc73326ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structflash__pages__layout_1aabdad4d8a197936f7756950bc73326ee" kindref="member">pages_size</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_FLASH_PAGE_LAYOUT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structflash__parameters" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__parameters" kindref="compound">flash_parameters</ref><sp/>{</highlight></codeline>
<codeline lineno="56" refid="structflash__parameters_1a9795a3e4fae4d7b81745e876f62ab3a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structflash__parameters_1a9795a3e4fae4d7b81745e876f62ab3a8" kindref="member">write_block_size</ref>;</highlight></codeline>
<codeline lineno="57" refid="structflash__parameters_1a218b0cbc797572ce096d0d6f55475ff9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structflash__parameters_1a218b0cbc797572ce096d0d6f55475ff9" kindref="member">erase_value</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Byte<sp/>value<sp/>of<sp/>erased<sp/>flash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group__flash__internal__interface_1ga358404d040b7ef30c8d24106e97bc290" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__flash__internal__interface_1ga358404d040b7ef30c8d24106e97bc290" kindref="member">flash_api_read</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="80" refid="group__flash__internal__interface_1gaf6b0c3aa2b6514ac8936aa0c7fda96ba" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__flash__internal__interface_1gaf6b0c3aa2b6514ac8936aa0c7fda96ba" kindref="member">flash_api_write</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__flash__internal__interface_1ga2178a2338e652396ba9811ca449f4cb5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__flash__internal__interface_1ga2178a2338e652396ba9811ca449f4cb5" kindref="member">flash_api_erase</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__parameters" kindref="compound">flash_parameters</ref>*<sp/>(*flash_api_get_parameters)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FLASH_PAGE_LAYOUT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="group__flash__internal__interface_1ga7576411536217c9ec3e167e7a5ca82a5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__flash__internal__interface_1ga7576411536217c9ec3e167e7a5ca82a5" kindref="member">flash_api_pages_layout</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__pages__layout" kindref="compound">flash_pages_layout</ref><sp/>**layout,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*layout_size);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_FLASH_PAGE_LAYOUT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="group__flash__internal__interface_1gac7b802015885044df6a1872513b89ab5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__flash__internal__interface_1gac7b802015885044df6a1872513b89ab5" kindref="member">flash_api_sfdp_read</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="125" refid="group__flash__internal__interface_1ga088369ef7593aa7c1fbe4cdad6e5b994" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__flash__internal__interface_1ga088369ef7593aa7c1fbe4cdad6e5b994" kindref="member">flash_api_read_jedec_id</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*id);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="structflash__driver__api" refkind="compound"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>{</highlight></codeline>
<codeline lineno="128" refid="structflash__driver__api_1aa3f58e76ce1a1bacf57d874a4e190480" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flash__internal__interface_1ga358404d040b7ef30c8d24106e97bc290" kindref="member">flash_api_read</ref><sp/><ref refid="structflash__driver__api_1aa3f58e76ce1a1bacf57d874a4e190480" kindref="member">read</ref>;</highlight></codeline>
<codeline lineno="129" refid="structflash__driver__api_1aa799a18761bbe6d43a82dc12a8de44c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flash__internal__interface_1gaf6b0c3aa2b6514ac8936aa0c7fda96ba" kindref="member">flash_api_write</ref><sp/><ref refid="structflash__driver__api_1aa799a18761bbe6d43a82dc12a8de44c4" kindref="member">write</ref>;</highlight></codeline>
<codeline lineno="130" refid="structflash__driver__api_1acaf3275b42cb048eca00818026f10f15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flash__internal__interface_1ga2178a2338e652396ba9811ca449f4cb5" kindref="member">flash_api_erase</ref><sp/><ref refid="structflash__driver__api_1acaf3275b42cb048eca00818026f10f15" kindref="member">erase</ref>;</highlight></codeline>
<codeline lineno="131" refid="structflash__driver__api_1a2696431e3b94db2f8a830e3142a577fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flash__internal__interface_1ga2dee3874cb1be4ef4dab599963c30e70" kindref="member">flash_api_get_parameters</ref><sp/><ref refid="structflash__driver__api_1a2696431e3b94db2f8a830e3142a577fc" kindref="member">get_parameters</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FLASH_PAGE_LAYOUT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="structflash__driver__api_1a82b03b535d86e98c083b701176a5556b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flash__internal__interface_1ga7576411536217c9ec3e167e7a5ca82a5" kindref="member">flash_api_pages_layout</ref><sp/><ref refid="structflash__driver__api_1a82b03b535d86e98c083b701176a5556b" kindref="member">page_layout</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_FLASH_PAGE_LAYOUT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FLASH_JESD216_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="structflash__driver__api_1a0d8122a16fe671099cb9c13459fc022c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flash__internal__interface_1gac7b802015885044df6a1872513b89ab5" kindref="member">flash_api_sfdp_read</ref><sp/><ref refid="structflash__driver__api_1a0d8122a16fe671099cb9c13459fc022c" kindref="member">sfdp_read</ref>;</highlight></codeline>
<codeline lineno="137" refid="structflash__driver__api_1add4026f7bd3a49de6de1dfee7c43d57b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__flash__internal__interface_1ga088369ef7593aa7c1fbe4cdad6e5b994" kindref="member">flash_api_read_jedec_id</ref><sp/><ref refid="structflash__driver__api_1add4026f7bd3a49de6de1dfee7c43d57b" kindref="member">read_jedec_id</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_FLASH_JESD216_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group__flash__interface_1gaa7c9382796aad64da0da683f54600b5f" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1gaa7c9382796aad64da0da683f54600b5f" kindref="member">flash_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_flash_read(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structflash__driver__api_1aa3f58e76ce1a1bacf57d874a4e190480" kindref="member">read</ref>(dev,<sp/>offset,<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="group__flash__interface_1ga76d7880cc5e18ca40237736d3bd94324" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1ga76d7880cc5e18ca40237736d3bd94324" kindref="member">flash_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_flash_write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>api-&gt;<ref refid="structflash__driver__api_1aa799a18761bbe6d43a82dc12a8de44c4" kindref="member">write</ref>(dev,<sp/>offset,<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="group__flash__interface_1ga05f9c8b0c1ff7273f71797e7ff799c95" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1ga05f9c8b0c1ff7273f71797e7ff799c95" kindref="member">flash_erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_flash_erase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>api-&gt;<ref refid="structflash__driver__api_1acaf3275b42cb048eca00818026f10f15" kindref="member">erase</ref>(dev,<sp/>offset,<sp/>size);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="structflash__pages__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__pages__info" kindref="compound">flash_pages_info</ref><sp/>{</highlight></codeline>
<codeline lineno="246" refid="structflash__pages__info_1a5c841987fef1636b83141871456ea867" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/><ref refid="structflash__pages__info_1a5c841987fef1636b83141871456ea867" kindref="member">start_offset</ref>;<sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>from<sp/>the<sp/>base<sp/>of<sp/>flash<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="structflash__pages__info_1a1ef4b965caaeed26014a6d6ae85c93c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structflash__pages__info_1a1ef4b965caaeed26014a6d6ae85c93c1" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="248" refid="structflash__pages__info_1adca463710082164f4323d3011235eb6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structflash__pages__info_1adca463710082164f4323d3011235eb6f" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FLASH_PAGE_LAYOUT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="group__flash__interface_1gafc959b0363eb27d6a3237e4288d60979" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1gafc959b0363eb27d6a3237e4288d60979" kindref="member">flash_get_page_info_by_offs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__pages__info" kindref="compound">flash_pages_info</ref><sp/>*info);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="group__flash__interface_1gaae733082fa92f80261d5895d3f81a98b" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1gaae733082fa92f80261d5895d3f81a98b" kindref="member">flash_get_page_info_by_idx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>page_index,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__pages__info" kindref="compound">flash_pages_info</ref><sp/>*info);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group__flash__interface_1gaf750fe20c02758be7e37f36d2d16345e" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1gaf750fe20c02758be7e37f36d2d16345e" kindref="member">flash_get_page_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="group__flash__interface_1ga41bfc5eb05a8e73873763c36f3e1ec6f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref><sp/>(*<ref refid="group__flash__interface_1ga41bfc5eb05a8e73873763c36f3e1ec6f" kindref="member">flash_page_cb</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__pages__info" kindref="compound">flash_pages_info</ref><sp/>*info,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="group__flash__interface_1ga275f2346e88b5e4d050dae426f0953fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1ga275f2346e88b5e4d050dae426f0953fe" kindref="member">flash_page_foreach</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="group__flash__interface_1ga41bfc5eb05a8e73873763c36f3e1ec6f" kindref="member">flash_page_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_FLASH_PAGE_LAYOUT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_FLASH_JESD216_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="group__flash__interface_1ga8e9b921299bfb059bf72445a2ffa5a97" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1ga8e9b921299bfb059bf72445a2ffa5a97" kindref="member">flash_sfdp_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_flash_sfdp_read(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/>offset,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>=<sp/>-<ref refid="group__system__errno_1ga91457bbf35f0f1085619a99423bb1f33" kindref="member">ENOTSUP</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;<ref refid="structflash__driver__api_1a0d8122a16fe671099cb9c13459fc022c" kindref="member">sfdp_read</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>=<sp/>api-&gt;<ref refid="structflash__driver__api_1a0d8122a16fe671099cb9c13459fc022c" kindref="member">sfdp_read</ref>(dev,<sp/>offset,<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="group__flash__interface_1gadb273ed317e1088b57adcac3385f50a7" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1gadb273ed317e1088b57adcac3385f50a7" kindref="member">flash_read_jedec_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_flash_read_jedec_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>=<sp/>-<ref refid="group__system__errno_1ga91457bbf35f0f1085619a99423bb1f33" kindref="member">ENOTSUP</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;<ref refid="structflash__driver__api_1add4026f7bd3a49de6de1dfee7c43d57b" kindref="member">read_jedec_id</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>=<sp/>api-&gt;<ref refid="structflash__driver__api_1add4026f7bd3a49de6de1dfee7c43d57b" kindref="member">read_jedec_id</ref>(dev,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_FLASH_JESD216_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="group__flash__interface_1gaadfb323bc1b4efa39e7bc0a048c472a6" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__flash__interface_1gaadfb323bc1b4efa39e7bc0a048c472a6" kindref="member">flash_get_write_block_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z_impl_flash_get_write_block_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structflash__driver__api_1a2696431e3b94db2f8a830e3142a577fc" kindref="member">get_parameters</ref>(dev)-&gt;write_block_size;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="group__flash__interface_1ga07b516708224b7a69a5169ef9c5c26e3" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__parameters" kindref="compound">flash_parameters</ref><sp/>*<ref refid="group__flash__interface_1ga07b516708224b7a69a5169ef9c5c26e3" kindref="member">flash_get_parameters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__parameters" kindref="compound">flash_parameters</ref><sp/>*z_impl_flash_get_parameters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__driver__api" kindref="compound">flash_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structflash__driver__api_1a2696431e3b94db2f8a830e3142a577fc" kindref="member">get_parameters</ref>(dev);</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/flash.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_FLASH_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/flash.h"/>
  </compounddef>
</doxygen>
