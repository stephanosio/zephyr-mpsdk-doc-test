<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__file__system__api" kind="group">
    <compoundname>file_system_api</compoundname>
    <title>File System APIs</title>
    <innerclass refid="structfs__mount__t" prot="public">fs_mount_t</innerclass>
    <innerclass refid="structfs__dirent" prot="public">fs_dirent</innerclass>
    <innerclass refid="structfs__statvfs" prot="public">fs_statvfs</innerclass>
    <innerclass refid="structfs__file__t" prot="public">fs_file_t</innerclass>
    <innerclass refid="structfs__dir__t" prot="public">fs_dir_t</innerclass>
    <innerclass refid="structfs__file__system__t" prot="public">fs_file_system_t</innerclass>
      <sectiondef kind="user-defined">
      <header>fs_open open and creation mode flags</header>
      <memberdef kind="define" id="group__file__system__api_1gafd1228407bcf929a175cc18802cda4b2" prot="public" static="no">
        <name>FS_O_READ</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open for read flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="145" column="9" bodyfile="include/fs/fs.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga0e86c5413b46133e824deaa89b16ee8d" prot="public" static="no">
        <name>FS_O_WRITE</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open for write flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="147" column="9" bodyfile="include/fs/fs.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga24ebd0220844552dd044bc2f16de4bef" prot="public" static="no">
        <name>FS_O_RDWR</name>
        <initializer>(<ref refid="group__file__system__api_1gafd1228407bcf929a175cc18802cda4b2" kindref="member">FS_O_READ</ref> | <ref refid="group__file__system__api_1ga0e86c5413b46133e824deaa89b16ee8d" kindref="member">FS_O_WRITE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open for read-write flag combination </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="149" column="9" bodyfile="include/fs/fs.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga728a9885ecf444cec4a1610671cc68bf" prot="public" static="no">
        <name>FS_O_MODE_MASK</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitmask for read and write flags </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="151" column="9" bodyfile="include/fs/fs.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1gaa0965d6d26ece16ee1300f815d31b4e8" prot="public" static="no">
        <name>FS_O_CREATE</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create file if it does not exist </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="154" column="9" bodyfile="include/fs/fs.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga51d5d3c5df852cbb3699b3a7357dbcb3" prot="public" static="no">
        <name>FS_O_APPEND</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open/create file for append </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="156" column="9" bodyfile="include/fs/fs.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1gabe568c7cd0aef699b0c19385e33266d4" prot="public" static="no">
        <name>FS_O_FLAGS_MASK</name>
        <initializer>0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitmask for open/create flags </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="158" column="9" bodyfile="include/fs/fs.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1gafa921cd65710cfa28f3b7a519a1f6142" prot="public" static="no">
        <name>FS_O_MASK</name>
        <initializer>(<ref refid="group__file__system__api_1ga728a9885ecf444cec4a1610671cc68bf" kindref="member">FS_O_MODE_MASK</ref> | <ref refid="group__file__system__api_1gabe568c7cd0aef699b0c19385e33266d4" kindref="member">FS_O_FLAGS_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bitmask for open flags </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="161" column="9" bodyfile="include/fs/fs.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>fs_seek whence parameter values</header>
      <memberdef kind="define" id="group__file__system__api_1ga5b33d405a458db1db212d345b21454f8" prot="public" static="no">
        <name>FS_SEEK_SET</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek from the beginning of file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="172" column="9" bodyfile="include/fs/fs.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1gacf310c560f9076b5b4b6ab4192147211" prot="public" static="no">
        <name>FS_SEEK_CUR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek from a current position </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="176" column="9" bodyfile="include/fs/fs.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1gaea9734cc236a73aefd3b35444d08d39d" prot="public" static="no">
        <name>FS_SEEK_END</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seek from the end of file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="180" column="9" bodyfile="include/fs/fs.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__file__system__api_1ga79f37397a1590284fae2c4b456f26afb" prot="public" static="no" strong="no">
        <type></type>
        <name>fs_dir_entry_type</name>
        <enumvalue id="group__file__system__api_1gga79f37397a1590284fae2c4b456f26afbae84f63edd56b9a797a219b5382f85e3b" prot="public">
          <name>FS_DIR_ENTRY_FILE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Identifier for file entry </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__file__system__api_1gga79f37397a1590284fae2c4b456f26afba443eeda19fcb1164475c2ffd8276e937" prot="public">
          <name>FS_DIR_ENTRY_DIR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Identifier for directory entry </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="27" column="1" bodyfile="include/fs/fs.h" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="group__file__system__api_1ga5bea799269f02f5b3395d6b2c068b618" prot="public" static="no" strong="no">
        <type></type>
        <name>@118</name>
        <enumvalue id="group__file__system__api_1gga5bea799269f02f5b3395d6b2c068b618a7f8f37a9e6506d6a2432391aee0fde40" prot="public">
          <name>FS_FATFS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Identifier for in-tree FatFS file system. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__file__system__api_1gga5bea799269f02f5b3395d6b2c068b618a18e15403ed6ec492c565e00d86c4a33f" prot="public">
          <name>FS_LITTLEFS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Identifier for in-tree LittleFS file system. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__file__system__api_1gga5bea799269f02f5b3395d6b2c068b618a37c6c9e64a57fee8c51884e18facf25f" prot="public">
          <name>FS_TYPE_EXTERNAL_BASE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Base identifier for external file systems. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration to uniquely identify file system types. </para>
        </briefdescription>
        <detaileddescription>
<para>Zephyr supports in-tree file systems and external ones. Each requires a unique identifier used to register the file system implementation and to associate a mount point with the file system type. This anonymous enum defines global identifiers for the in-tree file systems.</para>
<para>External file systems should be registered using unique identifiers starting at <computeroutput>FS_TYPE_EXTERNAL_BASE</computeroutput>. It is the responsibility of applications that use external file systems to ensure that these identifiers are unique if multiple file system implementations are used by the application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="48" column="1" bodyfile="include/fs/fs.h" bodystart="48" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__file__system__api_1gad44be87cbda3ddc48021ed16d515f564" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void fs_file_t_init</definition>
        <argsstring>(struct fs_file_t *zfp)</argsstring>
        <name>fs_file_t_init</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <briefdescription>
<para>Initialize <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> object; the function needs to be invoked on object before first use with fs_open.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="224" column="20" bodyfile="include/fs/fs.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gacd31440cd0b10308e55a0484828ea2f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void fs_dir_t_init</definition>
        <argsstring>(struct fs_dir_t *zdp)</argsstring>
        <name>fs_dir_t_init</name>
        <param>
          <type>struct <ref refid="structfs__dir__t" kindref="compound">fs_dir_t</ref> *</type>
          <declname>zdp</declname>
        </param>
        <briefdescription>
<para>Initialize <ref refid="structfs__dir__t" kindref="compound">fs_dir_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the <ref refid="structfs__dir__t" kindref="compound">fs_dir_t</ref> object; the function needs to be invoked on object before first use with fs_opendir.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zdp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to file object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="238" column="20" bodyfile="include/fs/fs.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga9c90031ba3e5a10da8e00e81d53ef63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_open</definition>
        <argsstring>(struct fs_file_t *zfp, const char *file_name, fs_mode_t flags)</argsstring>
        <name>fs_open</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type><ref refid="fs__interface_8h_1a7090a1b41e73d393b8be3e18ab411027" kindref="member">fs_mode_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Open or create file. </para>
        </briefdescription>
        <detaileddescription>
<para>Opens or possibly creates a file and associates a stream with it.</para>
<para><computeroutput>flags</computeroutput> can be 0 or a binary combination of one or more of the following identifiers:<itemizedlist>
<listitem><para><computeroutput>FS_O_READ</computeroutput> open for read</para>
</listitem><listitem><para><computeroutput>FS_O_WRITE</computeroutput> open for write</para>
</listitem><listitem><para><computeroutput>FS_O_RDWR</computeroutput> open for read/write (<computeroutput>FS_O_READ | FS_O_WRITE</computeroutput>)</para>
</listitem><listitem><para><computeroutput>FS_O_CREATE</computeroutput> create file if it does not exist</para>
</listitem><listitem><para><computeroutput>FS_O_APPEND</computeroutput> move to end of file before each write</para>
</listitem></itemizedlist>
</para>
<para>If <computeroutput>flags</computeroutput> are set to 0 the function will attempt to open an existing file with no read/write access; this may be used to e.g. check if the file exists.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a file object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of a file to open </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode flags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>when zfp is already used; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when a bad file name is given; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EROFS</parametername>
</parameternamelist>
<parameterdescription>
<para>when opening read-only file for write, or attempting to create a file on a system that has been mounted with the FS_MOUNT_FLAG_READ_ONLY flag; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>when the file path is not possible (bad mount point); </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code, depending on a file system back-end. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="274" column="5" declfile="include/fs/fs.h" declline="274" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga4811679c25021e9f763824e06292e043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_close</definition>
        <argsstring>(struct fs_file_t *zfp)</argsstring>
        <name>fs_close</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <briefdescription>
<para>Close file. </para>
        </briefdescription>
        <detaileddescription>
<para>Flushes the associated stream and closes the file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="287" column="5" declfile="include/fs/fs.h" declline="287" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gab979f963a8372f98080f66e0f32c8df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_unlink</definition>
        <argsstring>(const char *path)</argsstring>
        <name>fs_unlink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Unlink file. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes the specified file or directory</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the file or directory to delete</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when a bad file name is given; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EROFS</parametername>
</parameternamelist>
<parameterdescription>
<para>if file is read-only, or when file system has been mounted with the FS_MOUNT_FLAG_READ_ONLY flag; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="303" column="5" declfile="include/fs/fs.h" declline="303" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga28bb828c6e59bf7e1f0e3edc56a15575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_rename</definition>
        <argsstring>(const char *from, const char *to)</argsstring>
        <name>fs_rename</name>
        <param>
          <type>const char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Rename file or directory. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs a rename and / or move of the specified source path to the specified destination. The source path can refer to either a file or a directory. All intermediate directories in the destination path must already exist. If the source path refers to a file, the destination path must contain a full filename path, rather than just the new parent directory. If an object already exists at the specified destination path, this function causes it to be unlinked prior to the rename (i.e., the destination gets clobbered). <simplesect kind="note"><para>Current implementation does not allow moving files between mount points.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The source path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination path</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when a bad file name is given, or when rename would cause move between mount points; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EROFS</parametername>
</parameternamelist>
<parameterdescription>
<para>if file is read-only, or when file system has been mounted with the FS_MOUNT_FLAG_READ_ONLY flag; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="330" column="5" declfile="include/fs/fs.h" declline="330" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gaba7e07127777187eedcd6976d352ab76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t fs_read</definition>
        <argsstring>(struct fs_file_t *zfp, void *ptr, size_t size)</argsstring>
        <name>fs_read</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read file. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads up to <computeroutput>size</computeroutput> bytes of data to <computeroutput>ptr</computeroutput> pointed buffer, returns number of bytes read. A returned value may be lower than <computeroutput>size</computeroutput> if there were fewer bytes available than requested.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>a number of bytes read, on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADF</parametername>
</parameternamelist>
<parameterdescription>
<para>when invoked on zfp that represents unopened/closed file; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="348" column="9" declfile="include/fs/fs.h" declline="348" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga9e0dccc0d4235ff8bc4a745bc697e808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t fs_write</definition>
        <argsstring>(struct fs_file_t *zfp, const void *ptr, size_t size)</argsstring>
        <name>fs_write</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write file. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempts to write <computeroutput>size</computeroutput> number of bytes to the specified file. If a negative value is returned from the function, the file pointer has not been advanced. If the function returns a non-negative number that is lower than <computeroutput>size</computeroutput>, the global <computeroutput>errno</computeroutput> variable should be checked for an error code, as the device may have no free space for data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>a number of bytes written, on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADF</parametername>
</parameternamelist>
<parameterdescription>
<para>when invoked on zfp that represents unopened/closed file; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="369" column="9" declfile="include/fs/fs.h" declline="369" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga81fc26a759e82d7da7531f9687c1ea50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_seek</definition>
        <argsstring>(struct fs_file_t *zfp, off_t offset, int whence)</argsstring>
        <name>fs_seek</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
<para>Seek file. </para>
        </briefdescription>
        <detaileddescription>
<para>Moves the file position to a new location in the file. The <computeroutput>offset</computeroutput> is added to file position based on the <computeroutput>whence</computeroutput> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative location to move the file pointer to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>whence</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative location from where offset is to be calculated.<itemizedlist>
<listitem><para><computeroutput>FS_SEEK_SET</computeroutput> for the beginning of the file;</para>
</listitem><listitem><para><computeroutput>FS_SEEK_CUR</computeroutput> for the current position;</para>
</listitem><listitem><para><computeroutput>FS_SEEK_END</computeroutput> for the end of the file.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADF</parametername>
</parameternamelist>
<parameterdescription>
<para>when invoked on zfp that represents unopened/closed file; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if not supported by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="389" column="5" declfile="include/fs/fs.h" declline="389" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga5e97d124edf3ad98c0e2057999745d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>off_t</type>
        <definition>off_t fs_tell</definition>
        <argsstring>(struct fs_file_t *zfp)</argsstring>
        <name>fs_tell</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <briefdescription>
<para>Get current file position. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves and returns the current position in the file stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;=</parametername>
</parameternamelist>
<parameterdescription>
<para>0 a current position in file; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADF</parametername>
</parameternamelist>
<parameterdescription>
<para>when invoked on zfp that represents unopened/closed file; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if not supported by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The current revision does not validate the file object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="405" column="7" declfile="include/fs/fs.h" declline="405" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gae525d9d95f4286f1c6eb0d2ded7febfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_truncate</definition>
        <argsstring>(struct fs_file_t *zfp, off_t length)</argsstring>
        <name>fs_truncate</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Truncate or extend an open file to a given size. </para>
        </briefdescription>
        <detaileddescription>
<para>Truncates the file to the new length if it is shorter than the current size of the file. Expands the file if the new length is greater than the current size of the file. The expanded region would be filled with zeroes.</para>
<para><simplesect kind="note"><para>In the case of expansion, if the volume got full during the expansion process, the function will expand to the maximum possible length and return success. Caller should check if the expanded size matches the requested length.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the file in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADF</parametername>
</parameternamelist>
<parameterdescription>
<para>when invoked on zfp that represents unopened/closed file; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="427" column="5" declfile="include/fs/fs.h" declline="427" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gabf1951701521cf8d47a29129ec8462dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_sync</definition>
        <argsstring>(struct fs_file_t *zfp)</argsstring>
        <name>fs_sync</name>
        <param>
          <type>struct <ref refid="structfs__file__t" kindref="compound">fs_file_t</ref> *</type>
          <declname>zfp</declname>
        </param>
        <briefdescription>
<para>Flush cached write data buffers of an open file. </para>
        </briefdescription>
        <detaileddescription>
<para>The function flushes the cache of an open file; it can be invoked to ensure data gets written to the storage media immediately, e.g. to avoid data loss in case if power is removed unexpectedly. <simplesect kind="note"><para>Closing a file will cause caches to be flushed correctly so the function need not be called when the file is being closed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADF</parametername>
</parameternamelist>
<parameterdescription>
<para>when invoked on zfp that represents unopened/closed file; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="445" column="5" declfile="include/fs/fs.h" declline="445" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga235cef7d5c4df385a40a0f0293574b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_mkdir</definition>
        <argsstring>(const char *path)</argsstring>
        <name>fs_mkdir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Directory create. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a new directory using specified path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the directory to create</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EROFS</parametername>
</parameternamelist>
<parameterdescription>
<para>if file is read-only, or when file system has been mounted with the FS_MOUNT_FLAG_READ_ONLY flag; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="460" column="5" declfile="include/fs/fs.h" declline="460" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga00c042be81b3785d868c0c7a680a2fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_opendir</definition>
        <argsstring>(struct fs_dir_t *zdp, const char *path)</argsstring>
        <name>fs_opendir</name>
        <param>
          <type>struct <ref refid="structfs__dir__t" kindref="compound">fs_dir_t</ref> *</type>
          <declname>zdp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Directory open. </para>
        </briefdescription>
        <detaileddescription>
<para>Opens an existing directory specified by the path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zdp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the directory object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the directory to open</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when a bad directory path is given; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>when zdp is already used; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="476" column="5" declfile="include/fs/fs.h" declline="476" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gab17be11c60221cf65aaf5f70f373a68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_readdir</definition>
        <argsstring>(struct fs_dir_t *zdp, struct fs_dirent *entry)</argsstring>
        <name>fs_readdir</name>
        <param>
          <type>struct <ref refid="structfs__dir__t" kindref="compound">fs_dir_t</ref> *</type>
          <declname>zdp</declname>
        </param>
        <param>
          <type>struct <ref refid="structfs__dirent" kindref="compound">fs_dirent</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Directory read entry. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads directory entries of an open directory. In end-of-dir condition, the function will return 0 and set the <computeroutput>entry-&gt;name[0]</computeroutput> to 0.</para>
<para><simplesect kind="note"><para>: Most existing underlying file systems do not generate POSIX special directory entries &quot;.&quot; or &quot;..&quot;. For consistency the abstraction layer will remove these from lower layer results so higher layers see consistent results.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zdp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the directory object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to zfs_dirent structure to read the entry into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success or end-of-dir; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>when no such directory found; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="497" column="5" declfile="include/fs/fs.h" declline="497" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gaa2bf80a27f8a142ea1d553631d43b77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_closedir</definition>
        <argsstring>(struct fs_dir_t *zdp)</argsstring>
        <name>fs_closedir</name>
        <param>
          <type>struct <ref refid="structfs__dir__t" kindref="compound">fs_dir_t</ref> *</type>
          <declname>zdp</declname>
        </param>
        <briefdescription>
<para>Directory close. </para>
        </briefdescription>
        <detaileddescription>
<para>Closes an open directory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zdp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the directory object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="510" column="5" declfile="include/fs/fs.h" declline="510" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga46d59d84a1da3ce1d90478397826d793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_mount</definition>
        <argsstring>(struct fs_mount_t *mp)</argsstring>
        <name>fs_mount</name>
        <param>
          <type>struct <ref refid="structfs__mount__t" kindref="compound">fs_mount_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
<para>Mount filesystem. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform steps needed for mounting a file system like calling the file system specific mount function and adding the mount point to mounted file system list.</para>
<para><simplesect kind="note"><para>Current implementation of ELM FAT driver allows only following mount points: &quot;/RAM:&quot;,&quot;/NAND:&quot;,&quot;/CF:&quot;,&quot;/SD:&quot;,&quot;/SD2:&quot;,&quot;/USB:&quot;,&quot;/USB2:&quot;,&quot;/USB3:&quot; or mount points that consist of single digit, e.g: &quot;/0:&quot;, &quot;/1:&quot; and so forth.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structfs__mount__t" kindref="compound">fs_mount_t</ref> structure. Referenced object is not changed if the mount operation failed. A reference is captured in the fs infrastructure if the mount operation succeeds, and the application must not mutate the structure contents until fs_unmount is successfully invoked on the same pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>when file system type has not been registered; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not supported by underlying file system driver; when <computeroutput>FS_MOUNT_FLAG_USE_DISK_ACCESS</computeroutput> is set but driver does not support it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EROFS</parametername>
</parameternamelist>
<parameterdescription>
<para>if system requires formatting but <computeroutput>FS_MOUNT_FLAG_READ_ONLY</computeroutput> has been set; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="539" column="5" declfile="include/fs/fs.h" declline="539" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gabc20c3ce66340c4c207aba3c88448fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_unmount</definition>
        <argsstring>(struct fs_mount_t *mp)</argsstring>
        <name>fs_unmount</name>
        <param>
          <type>struct <ref refid="structfs__mount__t" kindref="compound">fs_mount_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
<para>Unmount filesystem. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform steps needed to unmount a file system like calling the file system specific unmount function and removing the mount point from mounted file system list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structfs__mount__t" kindref="compound">fs_mount_t</ref> structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if no system has been mounted at given mount point; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not supported by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="555" column="5" declfile="include/fs/fs.h" declline="555" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1gab10d479fc27aa73aab2f08342387fc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_readmount</definition>
        <argsstring>(int *index, const char **name)</argsstring>
        <name>fs_readmount</name>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get path of mount point at index. </para>
        </briefdescription>
        <detaileddescription>
<para>This function iterates through the list of mount points and returns the directory name of the mount point at the given <computeroutput>index</computeroutput>. On success <computeroutput>index</computeroutput> is incremented and <computeroutput>name</computeroutput> is set to the mount directory name. If a mount point with the given <computeroutput>index</computeroutput> does not exist, <computeroutput>name</computeroutput> will be set to <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to mount point index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to pointer to path name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is no mount point with given index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="572" column="5" declfile="include/fs/fs.h" declline="572" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga890681c0d324b2d184da7b1577ed571e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_stat</definition>
        <argsstring>(const char *path, struct fs_dirent *entry)</argsstring>
        <name>fs_stat</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct <ref refid="structfs__dirent" kindref="compound">fs_dirent</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>File or directory status. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks the status of a file or directory specified by the <computeroutput>path</computeroutput>. <simplesect kind="note"><para>The file on a storage device may not be updated until it is closed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the file or directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the zfs_dirent structure to fill if the file or directory exists.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when a bad directory or file name is given; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>when no such directory or file is found; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not supported by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="590" column="5" declfile="include/fs/fs.h" declline="590" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga12fc010a1b146e694f121a3a41e85430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_statvfs</definition>
        <argsstring>(const char *path, struct fs_statvfs *stat)</argsstring>
        <name>fs_statvfs</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct <ref refid="structfs__statvfs" kindref="compound">fs_statvfs</ref> *</type>
          <declname>stat</declname>
        </param>
        <briefdescription>
<para>Retrieves statistics of the file system volume. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the total and available space in the file system volume.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the mounted directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the zfs_statvfs structure to receive the fs statistics.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when a bad path to a directory, or a file, is given; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>when not implemented by underlying file system driver; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>an other negative errno code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="606" column="5" declfile="include/fs/fs.h" declline="606" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga97f4c377097c96320b32419011eebc5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_register</definition>
        <argsstring>(int type, const struct fs_file_system_t *fs)</argsstring>
        <name>fs_register</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const struct <ref refid="structfs__file__system__t" kindref="compound">fs_file_system_t</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
<para>Register a file system. </para>
        </briefdescription>
        <detaileddescription>
<para>Register file system with virtual file system. Number of allowed file system types to be registered is controlled with the CONFIG_FILE_SYSTEM_MAX_TYPES Kconfig option.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of file system (ex: <computeroutput>FS_FATFS</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to File system</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>when a file system of a given type has already been registered; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSCP</parametername>
</parameternamelist>
<parameterdescription>
<para>when there is no space left, in file system registry, to add this file system type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="623" column="5" declfile="include/fs/fs.h" declline="623" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__file__system__api_1ga098db65c6b327182ecbf0bdf44ec9c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_unregister</definition>
        <argsstring>(int type, const struct fs_file_system_t *fs)</argsstring>
        <name>fs_unregister</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const struct <ref refid="structfs__file__system__t" kindref="compound">fs_file_system_t</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
<para>Unregister a file system. </para>
        </briefdescription>
        <detaileddescription>
<para>Unregister file system from virtual file system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of file system (ex: <computeroutput>FS_FATFS</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to File system</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when file system of a given type has not been registered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="636" column="5" declfile="include/fs/fs.h" declline="636" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__file__system__api_1ga37b6ee15dc50499516fc51e9cb6287d5" prot="public" static="no">
        <name>FS_MOUNT_FLAG_NO_FORMAT</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag prevents formatting device if requested file system not found </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="60" column="9" bodyfile="include/fs/fs.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga789e7f0fbbbb1c751f9dee9d9ca9693d" prot="public" static="no">
        <name>FS_MOUNT_FLAG_READ_ONLY</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag makes mounted file system read-only </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="62" column="9" bodyfile="include/fs/fs.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1gac11f7ecef01b7758b6f8f70fdcd7089d" prot="public" static="no">
        <name>FS_MOUNT_FLAG_AUTOMOUNT</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag used in pre-defined mount structures that are to be mounted on startup.</para>
<para>This flag has no impact in user-defined mount structures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="68" column="9" bodyfile="include/fs/fs.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1gadb6c0761d7d537f73b23b1056d12686e" prot="public" static="no">
        <name>FS_MOUNT_FLAG_USE_DISK_ACCESS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag requests file system driver to use Disk Access API. When the flag is set to the <ref refid="structfs__mount__t_1ac5bd11869b64cfe1794b446d388c7116" kindref="member">fs_mount_t.flags</ref> prior to fs_mount call, a file system needs to use the Disk Access API, otherwise mount callback for the driver should return -ENOSUP; when the flag is not set the file system driver should use Flash API by default, unless it only supports Disc Access API. When file system will use Disk Access API and the flag is not set, the mount callback for the file system should set the flag on success. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="77" column="9" bodyfile="include/fs/fs.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga479d34077e909fccbb40f53616499f19" prot="public" static="no">
        <name>FSTAB_ENTRY_DT_MOUNT_FLAGS</name>
        <param><defname>node_id</defname></param>
        <initializer>	((<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, automount) ? <ref refid="group__file__system__api_1gac11f7ecef01b7758b6f8f70fdcd7089d" kindref="member">FS_MOUNT_FLAG_AUTOMOUNT</ref> : 0)	\
	 | (<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, read_only) ? <ref refid="group__file__system__api_1ga789e7f0fbbbb1c751f9dee9d9ca9693d" kindref="member">FS_MOUNT_FLAG_READ_ONLY</ref> : 0)	\
	 | (<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, no_format) ? <ref refid="group__file__system__api_1ga37b6ee15dc50499516fc51e9cb6287d5" kindref="member">FS_MOUNT_FLAG_NO_FORMAT</ref> : 0)  \
	 | (<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, disk_access) ? <ref refid="group__file__system__api_1gadb6c0761d7d537f73b23b1056d12686e" kindref="member">FS_MOUNT_FLAG_USE_DISK_ACCESS</ref> : 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="194" column="9" bodyfile="include/fs/fs.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga1f50cda8a852400e063ab5b0db94e3fe" prot="public" static="no">
        <name>FS_FSTAB_ENTRY</name>
        <param><defname>node_id</defname></param>
        <initializer>_CONCAT(z_fsmp_, node_id)</initializer>
        <briefdescription>
<para>The name under which a zephyr,fstab entry mount structure is defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="204" column="9" bodyfile="include/fs/fs.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__file__system__api_1ga1a9f475a065f3e77b035b0daf1511387" prot="public" static="no">
        <name>FS_FSTAB_DECLARE_ENTRY</name>
        <param><defname>node_id</defname></param>
        <initializer>	extern struct <ref refid="structfs__mount__t" kindref="compound">fs_mount_t</ref> <ref refid="group__file__system__api_1ga1f50cda8a852400e063ab5b0db94e3fe" kindref="member">FS_FSTAB_ENTRY</ref>(node_id)</initializer>
        <briefdescription>
<para>Generate a declaration for the externally defined fstab entry. </para>
        </briefdescription>
        <detaileddescription>
<para>This will evaluate to the name of a struct <ref refid="structfs__mount__t" kindref="compound">fs_mount_t</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fs.h" line="212" column="9" bodyfile="include/fs/fs.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File System APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
