<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__user__mutex__apis" kind="group">
    <compoundname>user_mutex_apis</compoundname>
    <title>User mode mutex APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__user__mutex__apis_1ga5456b75934cb26abc974a45ae82d717b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_mutex_init</definition>
        <argsstring>(struct sys_mutex *mutex)</argsstring>
        <name>sys_mutex_init</name>
        <param>
          <type>struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Initialize a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a mutex object, prior to its first use.</para>
<para>Upon completion, the mutex is available and does not have an owner.</para>
<para>This routine is only necessary to call when userspace is disabled and the mutex was not created with <ref refid="group__user__mutex__apis_1ga486bd6a11d0b0d312cdf8a6a8f66c1a3" kindref="member">SYS_MUTEX_DEFINE()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="68" column="20" bodyfile="include/sys/mutex.h" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__user__mutex__apis_1ga6887005f8223d4f36de5ae5c02ba4b17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sys_mutex_lock</definition>
        <argsstring>(struct sys_mutex *mutex, k_timeout_t timeout)</argsstring>
        <name>sys_mutex_lock</name>
        <param>
          <type>struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Lock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine locks <emphasis>mutex</emphasis>. If the mutex is locked by another thread, the calling thread waits until the mutex becomes available or until a timeout occurs.</para>
<para>A thread is permitted to lock a mutex it has already locked. The operation completes immediately and the lock count is increased by 1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex, which may reside in user memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to lock the mutex, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller has no access to provided mutex address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Provided mutex not recognized by the kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="102" column="19" bodyfile="include/sys/mutex.h" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__user__mutex__apis_1ga7d4babcd161600dab5f1842c58be2a1f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sys_mutex_unlock</definition>
        <argsstring>(struct sys_mutex *mutex)</argsstring>
        <name>sys_mutex_unlock</name>
        <param>
          <type>struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine unlocks <emphasis>mutex</emphasis>. The mutex must already be locked by the calling thread.</para>
<para>The mutex cannot be claimed by another thread until it has been unlocked by the calling thread as many times as it was previously locked by that thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex, which may reside in user memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex unlocked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller has no access to provided mutex address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Provided mutex not recognized by the kernel or mutex wasn&apos;t locked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not own the mutex </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="125" column="19" bodyfile="include/sys/mutex.h" bodystart="125" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__user__mutex__apis_1ga486bd6a11d0b0d312cdf8a6a8f66c1a3" prot="public" static="no">
        <name>SYS_MUTEX_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> name</initializer>
        <briefdescription>
<para>Statically define and initialize a <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The mutex can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>sys_mutex<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para>Route this to memory domains using <ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mutex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="53" column="9" bodyfile="include/sys/mutex.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
