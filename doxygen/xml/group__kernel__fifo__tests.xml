<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__fifo__tests" kind="group">
    <compoundname>kernel_fifo_tests</compoundname>
    <title>FIFOs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga7a4cef9e4f488f1821120ad1c86ba75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_cancel_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_fifo_cancel_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test cancel waiting on a FIFO queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine causes first thread pending on fifo (if any), to return from <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> with NULL value (as if timeout expired). <simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>,<ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1gab744080af449e093df8dd4982e013e16" kindref="member">k_fifo_cancel_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init via k_fifo_init</para>
<para>TESTPOINT: test K_FIFO_DEFINEed fifo</para>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_cancel.c" line="64" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_cancel.c" bodystart="64" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1gacf5f60ecba957605cd37ff60018d6525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_fifo_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test thread to thread data passing via fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1ga1bf5f52290c83e54ba14358cbbb4051b" kindref="member">k_fifo_put_list()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init via k_fifo_init</para>
<para>TESTPOINT: test K_FIFO_DEFINEed fifo</para>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" line="137" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" bodystart="137" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga8792e66238075ab4563960a8e9673303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_thread2isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_fifo_thread2isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test isr to thread data passing via fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init via k_fifo_init</para>
<para>TESTPOINT: test K_FIFO_DEFINEed fifo</para>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" line="151" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" bodystart="151" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1gab9aa7234b95b21068f4ab84d386f5c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_isr2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_fifo_isr2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test thread to isr data passing via fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_fifo_init fifo</para>
<para>TESTPOINT: test K_FIFO_DEFINE fifo</para>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" line="165" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" bodystart="165" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1gac2b599bc4432d2021e31e84c82fa8105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_is_empty_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_fifo_is_empty_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test empty fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, <ref refid="group__fifo__apis_1gab7cec4adc128ed1fd2d194ba6cd8c640" kindref="member">k_fifo_is_empty()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: k_fifo_is_empty after init</para>
<para>TESTPONT: check fifo is empty from thread</para>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" line="179" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" bodystart="179" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga46db1e3ada655404331eb226a4ac69ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_is_empty_isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_fifo_is_empty_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test empty fifo in interrupt context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, fifo_is_empty(), <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: check fifo is empty from isr</para>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" line="193" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga96c62d112812e04d8135544ce2378c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_get_fail</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>test_fifo_get_fail</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>Test FIFO get fail. </para>
        </briefdescription>
        <detaileddescription>
<para>test zephyr fifo_get when no data to read, it should returns NULL. <simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: fifo get returns NULL</para>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_fail.c" line="22" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_fail.c" bodystart="22" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga528984d073348bfcee12f8f49cc6c2fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fifo_loop</definition>
        <argsstring>(void)</argsstring>
        <name>test_fifo_loop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify zephyr fifo continuous read write in loop. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Test Steps<orderedlist>
<listitem><para>fifo put from main thread</para>
</listitem><listitem><para>fifo read from isr</para>
</listitem><listitem><para>fifo put from isr</para>
</listitem><listitem><para>fifo get from spawn thread</para>
</listitem><listitem><para>loop above steps for LOOPs times</para>
</listitem></orderedlist>
</para>
</listitem><listitem><para>Expected Results<orderedlist>
<listitem><para>fifo data pass correctly and stably across contexts</para>
</listitem></orderedlist>
</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_api/src/test_fifo_loop.c" line="99" column="6" bodyfile="tests/kernel/fifo/fifo_api/src/test_fifo_loop.c" bodystart="99" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga723a6a7991b83d5200cfc869be47b473" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_timeout_empty_fifo</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_empty_fifo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test empty fifo with timeout and K_NO_WAIT. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_timeout/src/main.c" line="298" column="13" bodyfile="tests/kernel/fifo/fifo_timeout/src/main.c" bodystart="298" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga2dc012d9bb368cd35ba373e6b75c27ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_timeout_non_empty_fifo</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_non_empty_fifo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test non empty fifo with timeout and K_NO_WAIT. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_timeout/src/main.c" line="321" column="13" bodyfile="tests/kernel/fifo/fifo_timeout/src/main.c" bodystart="321" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga4a50a944c4c702a556cd6b85ca148cc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_timeout_fifo_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_fifo_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test fifo with timeout and K_NO_WAIT. </para>
        </briefdescription>
        <detaileddescription>
<para>In first scenario test fifo with some timeout where child thread puts data on the fifo on time. In second scenario test k_fifo_get with timeout of K_NO_WAIT and the fifo should be filled by the child thread based on the data availability on another fifo. In third scenario test k_fifo_get with timeout of K_FOREVER and the fifo should be filled by the child thread based on the data availability on another fifo. <simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_timeout/src/main.c" line="350" column="13" bodyfile="tests/kernel/fifo/fifo_timeout/src/main.c" bodystart="350" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1gac1cd1d01845a1e5d491f94c5d11aea60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_timeout_threads_pend_on_fifo</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_threads_pend_on_fifo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test fifo with different timeouts. </para>
        </briefdescription>
        <detaileddescription>
<para>test multiple threads pending on the same fifo with different timeouts <simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_timeout/src/main.c" line="437" column="13" bodyfile="tests/kernel/fifo/fifo_timeout/src/main.c" bodystart="437" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga996023d288efc0268de64101103b30c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_timeout_threads_pend_on_dual_fifos</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_threads_pend_on_dual_fifos</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test multiple fifos with different timeouts. </para>
        </briefdescription>
        <detaileddescription>
<para>test multiple threads pending on different fifos with different timeouts <simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_timeout/src/main.c" line="456" column="13" bodyfile="tests/kernel/fifo/fifo_timeout/src/main.c" bodystart="456" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga1d2a3d776b3cad2c3578b8c13fddc179" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_timeout_threads_pend_fail_on_fifo</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_threads_pend_fail_on_fifo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test same fifo with different timeouts. </para>
        </briefdescription>
        <detaileddescription>
<para>test multiple threads pending on the same fifo with different timeouts but getting the data in time <simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_timeout/src/main.c" line="477" column="13" bodyfile="tests/kernel/fifo/fifo_timeout/src/main.c" bodystart="477" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga3971a365d919667a0f7e146ef904c630" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_timeout_setup</definition>
        <argsstring>(void)</argsstring>
        <name>test_timeout_setup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test fifo init. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__fifo__apis_1gaeebf6ef54d4be61e19408f44a734a159" kindref="member">k_fifo_init()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_timeout/src/main.c" line="495" column="13" bodyfile="tests/kernel/fifo/fifo_timeout/src/main.c" bodystart="495" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga112bdbae341a1e0194db434f20ccef0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_single_fifo_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_single_fifo_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Tests single fifo get and put operation in thread context. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Thread enters items into a fifo, starts the Child Thread and waits for a semaphore. Child thread extracts all items from the fifo and enters some items back into the fifo. Child Thread gives the semaphore for Test Thread to continue. Once the control is returned back to Test Thread, it extracts all items from the fifo. <simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1gab7cec4adc128ed1fd2d194ba6cd8c640" kindref="member">k_fifo_is_empty()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga230b02a526ecb0ae1598be75cb9a8274" kindref="member">K_FIFO_DEFINE(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_usage/src/main.c" line="144" column="13" bodyfile="tests/kernel/fifo/fifo_usage/src/main.c" bodystart="144" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1gaab9f8ce6ca2e5b284f1393f44c399eb6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_dual_fifo_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_dual_fifo_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Tests dual fifo get and put operation in thread context. </para>
        </briefdescription>
        <detaileddescription>
<para>test Thread enters an item into fifo2, starts a Child Thread and extract an item from fifo1 once the item is there. The Child Thread will extract an item from fifo2 once the item is there and and enter an item to fifo1. The flow of control goes from Test Thread to Child Thread and so forth. <simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1gab7cec4adc128ed1fd2d194ba6cd8c640" kindref="member">k_fifo_is_empty()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga230b02a526ecb0ae1598be75cb9a8274" kindref="member">K_FIFO_DEFINE(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_usage/src/main.c" line="183" column="13" bodyfile="tests/kernel/fifo/fifo_usage/src/main.c" bodystart="183" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__fifo__tests_1ga3ac8ebd02342fbf38d13af7126f3616b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_isr_fifo_play</definition>
        <argsstring>(void)</argsstring>
        <name>test_isr_fifo_play</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Tests fifo put and get operation in interrupt context. </para>
        </briefdescription>
        <detaileddescription>
<para>Tests the ISR interfaces. Test thread puts items into fifo2 and gives control to the Child thread. Child thread gets items from fifo2 and then puts items into fifo1. Child thread gives back control to the Test thread and Test thread gets the items from fifo1. All the Push and Pop operations happen in ISR Context. <simplesect kind="see"><para><ref refid="group__fifo__apis_1ga1e2c480e2124116af97e94e7b4435de6" kindref="member">k_fifo_get()</ref>, <ref refid="group__fifo__apis_1gab7cec4adc128ed1fd2d194ba6cd8c640" kindref="member">k_fifo_is_empty()</ref>, <ref refid="group__fifo__apis_1ga3addb10f86f19e245c23362433d5c913" kindref="member">k_fifo_put()</ref>, <ref refid="group__fifo__apis_1ga230b02a526ecb0ae1598be75cb9a8274" kindref="member">K_FIFO_DEFINE(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fifo/fifo_usage/src/main.c" line="215" column="13" bodyfile="tests/kernel/fifo/fifo_usage/src/main.c" bodystart="215" bodyend="236"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for the FIFO kernel object. </para>
    </briefdescription>
    <detaileddescription>
<para>Verify zephyr fifo apis under different context</para>
<para><itemizedlist>
<listitem><para>API coverage<orderedlist>
<listitem><para>k_fifo_init K_FIFO_DEFINE</para>
</listitem><listitem><para>k_fifo_put k_fifo_put_list k_fifo_put_slist</para>
</listitem><listitem><para>k_fifo_get * </para>
</listitem></orderedlist>
</para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
