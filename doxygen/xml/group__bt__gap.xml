<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__gap" kind="group">
    <compoundname>bt_gap</compoundname>
    <title>Generic Access Profile</title>
    <innerclass refid="structbt__le__ext__adv__sent__info" prot="public">bt_le_ext_adv_sent_info</innerclass>
    <innerclass refid="structbt__le__ext__adv__connected__info" prot="public">bt_le_ext_adv_connected_info</innerclass>
    <innerclass refid="structbt__le__ext__adv__scanned__info" prot="public">bt_le_ext_adv_scanned_info</innerclass>
    <innerclass refid="structbt__le__ext__adv__cb" prot="public">bt_le_ext_adv_cb</innerclass>
    <innerclass refid="structbt__data" prot="public">bt_data</innerclass>
    <innerclass refid="structbt__le__adv__param" prot="public">bt_le_adv_param</innerclass>
    <innerclass refid="structbt__le__per__adv__param" prot="public">bt_le_per_adv_param</innerclass>
    <innerclass refid="structbt__le__ext__adv__start__param" prot="public">bt_le_ext_adv_start_param</innerclass>
    <innerclass refid="structbt__le__ext__adv__info" prot="public">bt_le_ext_adv_info</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__synced__info" prot="public">bt_le_per_adv_sync_synced_info</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__term__info" prot="public">bt_le_per_adv_sync_term_info</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__recv__info" prot="public">bt_le_per_adv_sync_recv_info</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__state__info" prot="public">bt_le_per_adv_sync_state_info</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__cb" prot="public">bt_le_per_adv_sync_cb</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__param" prot="public">bt_le_per_adv_sync_param</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__info" prot="public">bt_le_per_adv_sync_info</innerclass>
    <innerclass refid="structbt__le__per__adv__sync__transfer__param" prot="public">bt_le_per_adv_sync_transfer_param</innerclass>
    <innerclass refid="structbt__le__scan__param" prot="public">bt_le_scan_param</innerclass>
    <innerclass refid="structbt__le__scan__recv__info" prot="public">bt_le_scan_recv_info</innerclass>
    <innerclass refid="structbt__le__scan__cb" prot="public">bt_le_scan_cb</innerclass>
    <innerclass refid="structbt__le__oob__sc__data" prot="public">bt_le_oob_sc_data</innerclass>
    <innerclass refid="structbt__le__oob" prot="public">bt_le_oob</innerclass>
    <innerclass refid="structbt__br__discovery__result" prot="public">bt_br_discovery_result</innerclass>
    <innerclass refid="structbt__br__discovery__param" prot="public">bt_br_discovery_param</innerclass>
    <innerclass refid="structbt__br__oob" prot="public">bt_br_oob</innerclass>
    <innerclass refid="structbt__bond__info" prot="public">bt_bond_info</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__bt__gap_1ga2970898e8a43ce21e1cc510d49f1b89d" prot="public" static="no" strong="no">
        <type></type>
        <name>@40</name>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da928b376123819cb0a69fbb5b35608dbf" prot="public">
          <name>BT_LE_ADV_OPT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience value when no options are specified. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" prot="public">
          <name>BT_LE_ADV_OPT_CONNECTABLE</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
<para>Advertise as connectable. </para>
          </briefdescription>
          <detaileddescription>
<para>Advertise as connectable. If not connectable then the type of advertising is determined by providing scan response data. The advertiser address is determined by the type of advertising and/or enabling privacy <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_PRIVACY` </verbatim>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da7d12782a02afefcf4b5c04442a99f8a2" prot="public">
          <name>BT_LE_ADV_OPT_ONE_TIME</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
<para>Advertise one time. </para>
          </briefdescription>
          <detaileddescription>
<para>Don&apos;t try to resume connectable advertising after a connection. This option is only meaningful when used together with BT_LE_ADV_OPT_CONNECTABLE. If set the advertising will be stopped when <ref refid="group__bt__gap_1ga1776e310b9d80898e6b32d50c4fe0b49" kindref="member">bt_le_adv_stop()</ref> is called or when an incoming (peripheral) connection happens. If this option is not set the stack will take care of keeping advertising enabled even as connections occur. If Advertising directed or the advertiser was started with <ref refid="group__bt__gap_1gaddc6da5166cd8415d2b367380447eac1" kindref="member">bt_le_ext_adv_start</ref> then this behavior is the default behavior and this flag has no effect. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da407cf5ae358d3c00dd7e47dfaad3ec6e" prot="public">
          <name>BT_LE_ADV_OPT_USE_IDENTITY</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
<para>Advertise using identity address. </para>
          </briefdescription>
          <detaileddescription>
<para>Advertise using the identity address as the advertiser address. <simplesect kind="warning"><para>This will compromise the privacy of the device, so care must be taken when using this option. </para>
</simplesect>
<simplesect kind="note"><para>The address used for advertising will not be the same as returned by <ref refid="group__bt__gap_1ga296d1adf3c9ed2f2c65bb75b887d59ee" kindref="member">bt_le_oob_get_local</ref>, instead <ref refid="group__bt__gap_1ga06d0ae35cbf4382679cc3cfe612cee4d" kindref="member">bt_id_get</ref> should be used to get the LE address. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" prot="public">
          <name>BT_LE_ADV_OPT_USE_NAME</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Advertise using GAP device name. <verbatim>    Include the GAP device name automatically when advertising.
    By default the GAP device name is put at the end of the scan
    response data.
    When advertising using @ref BT_LE_ADV_OPT_EXT_ADV and not
    @ref BT_LE_ADV_OPT_SCANNABLE then it will be put at the end of the
    advertising data.
    If the GAP device name does not fit into advertising data it will be
    converted to a shortened name if possible.
    @ref BT_LE_ADV_OPT_FORCE_NAME_IN_AD can be used to force the device
    name to appear in the advertising data of an advert with scan
    response data.

    The application can set the device name itself by including the
    following in the advertising data.
    @code
    BT_DATA(BT_DATA_NAME_COMPLETE, name, sizeof(name) - 1)
    @endcode
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dafd164ec5476f5e2d9aedf50032946872" prot="public">
          <name>BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY</name>
          <initializer>= BIT(4)</initializer>
          <briefdescription>
<para>Low duty cycle directed advertising. </para>
          </briefdescription>
          <detaileddescription>
<para>Use low duty directed advertising mode, otherwise high duty mode will be used. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dabdcf1c80662061fa30575e1f9fc6cf6f" prot="public">
          <name>BT_LE_ADV_OPT_DIR_ADDR_RPA</name>
          <initializer>= BIT(5)</initializer>
          <briefdescription>
<para>Directed advertising to privacy-enabled peer. </para>
          </briefdescription>
          <detaileddescription>
<para>Enable use of Resolvable Private Address (RPA) as the target address in directed advertisements. This is required if the remote device is privacy-enabled and supports address resolution of the target address in directed advertisement. It is the responsibility of the application to check that the remote device supports address resolution of directed advertisements by reading its Central Address Resolution characteristic. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da807ba316edc49c8448a8ff7d497173f5" prot="public">
          <name>BT_LE_ADV_OPT_FILTER_SCAN_REQ</name>
          <initializer>= BIT(6)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use filter accept list to filter devices that can request scan response data. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dad5efef3d01731110dbd71d5a5dc9baaf" prot="public">
          <name>BT_LE_ADV_OPT_FILTER_CONN</name>
          <initializer>= BIT(7)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use filter accept list to filter devices that can connect. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da1563b053f457833d1a3d11c8dc4d394b" prot="public">
          <name>BT_LE_ADV_OPT_NOTIFY_SCAN_REQ</name>
          <initializer>= BIT(8)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Notify the application when a scan response data has been sent to an active scanner. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae60eafe69ef10b84f61a1f4accf789c9" prot="public">
          <name>BT_LE_ADV_OPT_SCANNABLE</name>
          <initializer>= BIT(9)</initializer>
          <briefdescription>
<para>Support scan response data. </para>
          </briefdescription>
          <detaileddescription>
<para>When used together with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> then this option cannot be used together with the <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" kindref="member">BT_LE_ADV_OPT_CONNECTABLE</ref> option. When used together with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> then scan response data must be set. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" prot="public">
          <name>BT_LE_ADV_OPT_EXT_ADV</name>
          <initializer>= BIT(10)</initializer>
          <briefdescription>
<para>Advertise with extended advertising. </para>
          </briefdescription>
          <detaileddescription>
<para>This options enables extended advertising in the advertising set. In extended advertising the advertising set will send a small header packet on the three primary advertising channels. This small header points to the advertising data packet that will be sent on one of the 37 secondary advertising channels. The advertiser will send primary advertising on LE 1M PHY, and secondary advertising on LE 2M PHY. Connections will be established on LE 2M PHY.</para>
<para>Without this option the advertiser will send advertising data on the three primary advertising channels.</para>
<para><simplesect kind="note"><para>Enabling this option requires extended advertising support in the peer devices scanning for advertisement packets. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae864aefcdfbecaffe823b9b144fe0a6b" prot="public">
          <name>BT_LE_ADV_OPT_NO_2M</name>
          <initializer>= BIT(11)</initializer>
          <briefdescription>
<para>Disable use of LE 2M PHY on the secondary advertising channel. </para>
          </briefdescription>
          <detaileddescription>
<para>Disabling the use of LE 2M PHY could be necessary if scanners don&apos;t support the LE 2M PHY. The advertiser will send primary advertising on LE 1M PHY, and secondary advertising on LE 1M PHY. Connections will be established on LE 1M PHY.</para>
<para><simplesect kind="note"><para>Cannot be set if BT_LE_ADV_OPT_CODED is set.</para>
</simplesect>
<simplesect kind="note"><para>Requires <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref>. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dad01c4962a350d3218ba0cabd713708b1" prot="public">
          <name>BT_LE_ADV_OPT_CODED</name>
          <initializer>= BIT(12)</initializer>
          <briefdescription>
<para>Advertise on the LE Coded PHY (Long Range). </para>
          </briefdescription>
          <detaileddescription>
<para>The advertiser will send both primary and secondary advertising on the LE Coded PHY. This gives the advertiser increased range with the trade-off of lower data rate and higher power consumption. Connections will be established on LE Coded PHY.</para>
<para><simplesect kind="note"><para>Requires <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da185e0f884f8b0ce79625448638de8fab" prot="public">
          <name>BT_LE_ADV_OPT_ANONYMOUS</name>
          <initializer>= BIT(13)</initializer>
          <briefdescription>
<para>Advertise without a device address (identity or RPA). </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>Requires <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89daecff4fe3ac3d1fba3f6fa76c77713859" prot="public">
          <name>BT_LE_ADV_OPT_USE_TX_POWER</name>
          <initializer>= BIT(14)</initializer>
          <briefdescription>
<para>Advertise with transmit power. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>Requires <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dab46741616f8bfe50c4b492d1f7970779" prot="public">
          <name>BT_LE_ADV_OPT_DISABLE_CHAN_37</name>
          <initializer>= BIT(15)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable advertising on channel index 37. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dabd9cb02691d7e025fe3fea9a80123275" prot="public">
          <name>BT_LE_ADV_OPT_DISABLE_CHAN_38</name>
          <initializer>= BIT(16)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable advertising on channel index 38. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da89f7494620236c976bf1a76a880e2a28" prot="public">
          <name>BT_LE_ADV_OPT_DISABLE_CHAN_39</name>
          <initializer>= BIT(17)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable advertising on channel index 39. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da0a9642077d93cf9c0eb42f64a9e34e73" prot="public">
          <name>BT_LE_ADV_OPT_FORCE_NAME_IN_AD</name>
          <initializer>= BIT(18)</initializer>
          <briefdescription>
<para>Put GAP device name into advert data. </para>
          </briefdescription>
          <detaileddescription>
<para>Will place the GAP device name into the advertising data rather than the scan response data.</para>
<para><simplesect kind="note"><para>Requires <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advertising options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="330" column="1" bodyfile="include/bluetooth/bluetooth.h" bodystart="330" bodyend="520"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__gap_1gafa231099d07583c3ed0981e0bb665f55" prot="public" static="no" strong="no">
        <type></type>
        <name>@41</name>
        <enumvalue id="group__bt__gap_1ggafa231099d07583c3ed0981e0bb665f55aa2c689d726eacfb18d87655b1f587518" prot="public">
          <name>BT_LE_PER_ADV_OPT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience value when no options are specified. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1ggafa231099d07583c3ed0981e0bb665f55a9524537e4cb726f4ff10ba93381bb27f" prot="public">
          <name>BT_LE_PER_ADV_OPT_USE_TX_POWER</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
<para>Advertise with transmit power. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>Requires <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Periodic Advertising options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="592" column="1" bodyfile="include/bluetooth/bluetooth.h" bodystart="592" bodyend="602"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__gap_1ga394b3903fbf00ba2b6243f60689a5a5f" prot="public" static="no" strong="no">
        <type></type>
        <name>@42</name>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5faeeef50a544edc104b39e4ef0c9a58d6c" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience value when no options are specified. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5fae9a88caa6a83da8b1697a6167629bf7e" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_USE_PER_ADV_LIST</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
<para>Use the periodic advertising list to sync with advertiser. </para>
          </briefdescription>
          <detaileddescription>
<para>When this option is set, the address and SID of the parameters are ignored. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5fae35a6eb572a2842e4cc2fc3677e19b53" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_REPORTING_INITIALLY_DISABLED</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
<para>Disables periodic advertising reports. </para>
          </briefdescription>
          <detaileddescription>
<para>No advertisement reports will be handled until enabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5fa9ec2b0c346c2cab7f61c2efcc8e37db2" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_FILTER_DUPLICATE</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Filter duplicate Periodic Advertising reports </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5faaa256e560f013eb74415d817154b8f4e" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_DONT_SYNC_AOA</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sync with Angle of Arrival (AoA) constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5fa99034652a92249e6d04065d68352020b" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_DONT_SYNC_AOD_1US</name>
          <initializer>= BIT(4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sync with Angle of Departure (AoD) 1 us constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5fa0f52e38e513ec7eefcbc5c86c36f002e" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_DONT_SYNC_AOD_2US</name>
          <initializer>= BIT(5)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sync with Angle of Departure (AoD) 2 us constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga394b3903fbf00ba2b6243f60689a5a5fa5c702876d70d5eadc4df6e59d96b8320" prot="public">
          <name>BT_LE_PER_ADV_SYNC_OPT_SYNC_ONLY_CONST_TONE_EXT</name>
          <initializer>= BIT(6)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Do not sync to packets without a constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Periodic advertising sync options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1263" column="1" bodyfile="include/bluetooth/bluetooth.h" bodystart="1263" bodyend="1296"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__gap_1gac205be2172292384dd687b5471a87edd" prot="public" static="no" strong="no">
        <type></type>
        <name>@43</name>
        <enumvalue id="group__bt__gap_1ggac205be2172292384dd687b5471a87eddaef90aceabc3f9d0b17b7f3415152fca2" prot="public">
          <name>BT_LE_PER_ADV_SYNC_TRANSFER_OPT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience value when no options are specified. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1ggac205be2172292384dd687b5471a87edda2694870b7ebd2dcd0b3834367f7d7061" prot="public">
          <name>BT_LE_PER_ADV_SYNC_TRANSFER_OPT_SYNC_NO_AOA</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
<para>No Angle of Arrival (AoA) </para>
          </briefdescription>
          <detaileddescription>
<para>Do not sync with Angle of Arrival (AoA) constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1ggac205be2172292384dd687b5471a87eddab0725048806858083be9ab3fcd9a36ed" prot="public">
          <name>BT_LE_PER_ADV_SYNC_TRANSFER_OPT_SYNC_NO_AOD_1US</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
<para>No Angle of Departure (AoD) 1 us. </para>
          </briefdescription>
          <detaileddescription>
<para>Do not sync with Angle of Departure (AoD) 1 us constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1ggac205be2172292384dd687b5471a87edda433ae469b27e820fdfd2a1d562010991" prot="public">
          <name>BT_LE_PER_ADV_SYNC_TRANSFER_OPT_SYNC_NO_AOD_2US</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
<para>No Angle of Departure (AoD) 2. </para>
          </briefdescription>
          <detaileddescription>
<para>Do not sync with Angle of Departure (AoD) 2 us constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1ggac205be2172292384dd687b5471a87eddaed2f78d682b5fbd1adf89c2f005e4f48" prot="public">
          <name>BT_LE_PER_ADV_SYNC_TRANSFER_OPT_SYNC_ONLY_CTE</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Only sync to packets with constant tone extension </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Periodic Advertising Sync Transfer options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1453" column="1" bodyfile="include/bluetooth/bluetooth.h" bodystart="1453" bodyend="1482"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__gap_1ga157d5577a5b2f5986037d0d09c7dc77d" prot="public" static="no" strong="no">
        <type></type>
        <name>@44</name>
        <enumvalue id="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77daad3f19e5849b6d6813fa88257082e185" prot="public">
          <name>BT_LE_SCAN_OPT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience value when no options are specified. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da0af65ac48e068f7e6f1815cb151d4394" prot="public">
          <name>BT_LE_SCAN_OPT_FILTER_DUPLICATE</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Filter duplicates. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77daf7a25b6790b138b2b88de3c7d81cb0ae" prot="public">
          <name>BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Filter using filter accept list. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da16f171c649dd090333e9822a92b4bbdb" prot="public">
          <name>BT_LE_SCAN_OPT_CODED</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable scan on coded PHY (Long Range). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da7ff0c79b2675e7b7512379e2cbedc0a6" prot="public">
          <name>BT_LE_SCAN_OPT_NO_1M</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
<para>Disable scan on 1M phy. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>Requires <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da16f171c649dd090333e9822a92b4bbdb" kindref="member">BT_LE_SCAN_OPT_CODED</ref>. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1608" column="1" bodyfile="include/bluetooth/bluetooth.h" bodystart="1608" bodyend="1627"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__gap_1ga1fb9092bcdeada2d206bdc74afbbe122" prot="public" static="no" strong="no">
        <type></type>
        <name>@45</name>
        <enumvalue id="group__bt__gap_1gga1fb9092bcdeada2d206bdc74afbbe122a731c507ed451eb6f8f8372849185b006" prot="public">
          <name>BT_LE_SCAN_TYPE_PASSIVE</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Scan without requesting additional information from advertisers. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gap_1gga1fb9092bcdeada2d206bdc74afbbe122af202213813092ba298cd046aed687f22" prot="public">
          <name>BT_LE_SCAN_TYPE_ACTIVE</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Scan and request additional information from advertisers. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1631" column="1" bodyfile="include/bluetooth/bluetooth.h" bodystart="1631" bodyend="1637"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__gap_1ga68f6aecf0e3e0c9134487e243ecbafc4" prot="public" static="no">
        <type>void(*</type>
        <definition>bt_ready_cb_t</definition>
        <argsstring>)(int err)</argsstring>
        <name>bt_ready_cb_t</name>
        <briefdescription>
<para>Callback for notifying that Bluetooth has been enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>zero on success or (negative) error code otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="125" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gap_1ga9c166a535270031636736984767d9d0d" prot="public" static="no">
        <type>void</type>
        <definition>bt_le_scan_cb_t</definition>
        <argsstring>(const bt_addr_le_t *addr, int8_t rssi, uint8_t adv_type, struct net_buf_simple *buf)</argsstring>
        <name>bt_le_scan_cb_t</name>
        <briefdescription>
<para>Callback type for reporting LE scan results. </para>
        </briefdescription>
        <detaileddescription>
<para>A function of this type is given to the <ref refid="group__bt__gap_1gac5e19c26b53a08dadb8efa7ecc692ad6" kindref="member">bt_le_scan_start()</ref> function and will be called for any discovered LE device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertiser LE address and type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rssi</parametername>
</parameternamelist>
<parameterdescription>
<para>Strength of advertiser signal. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adv_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of advertising response from advertiser. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing advertiser data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1052" column="14" bodyfile="include/bluetooth/bluetooth.h" bodystart="1052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gap_1ga4af91613898d0e0b0afd0f559d1375e1" prot="public" static="no">
        <type>void</type>
        <definition>bt_br_discovery_cb_t</definition>
        <argsstring>(struct bt_br_discovery_result *results, size_t count)</argsstring>
        <name>bt_br_discovery_cb_t</name>
        <briefdescription>
<para>Callback type for reporting BR/EDR discovery (inquiry) results. </para>
        </briefdescription>
        <detaileddescription>
<para>A callback of this type is given to the <ref refid="group__bt__gap_1gaf7efa6302cde58a10efaf0b68f5cb3c6" kindref="member">bt_br_discovery_start()</ref> function and will be called at the end of the discovery with information about found devices populated in the results array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage used for discovery results </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of valid discovery results. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2061" column="14" bodyfile="include/bluetooth/bluetooth.h" bodystart="2061" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__gap_1gac45d16bfe21c3c38e834c293e5ebc42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_enable</definition>
        <argsstring>(bt_ready_cb_t cb)</argsstring>
        <name>bt_enable</name>
        <param>
          <type><ref refid="group__bt__gap_1ga68f6aecf0e3e0c9134487e243ecbafc4" kindref="member">bt_ready_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Enable Bluetooth. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable Bluetooth. Must be the called before any calls that require communication with the local Bluetooth hardware.</para>
<para>When <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_SETTINGS` </verbatim> has been enabled and the application is not managing identities of the stack itself then the application must call <ref refid="group__settings_1ga89c6d618df81f197cc5c1a2018b00648" kindref="member">settings_load()</ref> before the stack is fully enabled. See <ref refid="group__bt__gap_1gae11eb8ad254418c38a0e8689df25a159" kindref="member">bt_id_create()</ref> for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to notify completion or NULL to perform the enabling synchronously.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="143" column="5" declfile="include/bluetooth/bluetooth.h" declline="143" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gac8bb3609a3d6da69ff736809e45f5c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_set_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>bt_set_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set Bluetooth Device Name. </para>
        </briefdescription>
        <detaileddescription>
<para>Set Bluetooth GAP Device Name.</para>
<para>When advertising with device name in the advertising data the name should be updated by calling <ref refid="group__bt__gap_1ga9a406ebfefac3dd09935a4ae0e317817" kindref="member">bt_le_adv_update_data</ref> or <ref refid="group__bt__gap_1gad731f829b3566be3e56485b2a64f80b1" kindref="member">bt_le_ext_adv_set_data</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="158" column="5" declfile="include/bluetooth/bluetooth.h" declline="158" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gad922d894b25e86de3f81ce77200a13fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bt_get_name</definition>
        <argsstring>(void)</argsstring>
        <name>bt_get_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get Bluetooth Device Name. </para>
        </briefdescription>
        <detaileddescription>
<para>Get Bluetooth GAP Device Name.</para>
<para><simplesect kind="return"><para>Bluetooth Device Name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="167" column="12" declfile="include/bluetooth/bluetooth.h" declline="167" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga06d0ae35cbf4382679cc3cfe612cee4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_id_get</definition>
        <argsstring>(bt_addr_le_t *addrs, size_t *count)</argsstring>
        <name>bt_id_get</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addrs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Get the currently configured identities. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an array of the currently configured identity addresses. To make sure all available identities can be retrieved, the number of elements in the <emphasis>addrs</emphasis> array should be CONFIG_BT_ID_MAX. The identity identifier that some APIs expect (such as advertising parameters) is simply the index of the identity in the <emphasis>addrs</emphasis> array.</para>
<para>If <emphasis>addrs</emphasis> is passed as NULL, then returned <emphasis>count</emphasis> contains the count of all available identities that can be retrieved with a subsequent call to this function with non-NULL <emphasis>addrs</emphasis> parameter.</para>
<para><simplesect kind="note"><para>Deleted identities may show up as BT_LE_ADDR_ANY in the returned array.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array where to store the configured identities. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Should be initialized to the array size. Once the function returns it will contain the number of returned identities. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="189" column="6" declfile="include/bluetooth/bluetooth.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gae11eb8ad254418c38a0e8689df25a159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_id_create</definition>
        <argsstring>(bt_addr_le_t *addr, uint8_t *irk)</argsstring>
        <name>bt_id_create</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>irk</declname>
        </param>
        <briefdescription>
<para>Create a new identity. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new identity using the given address and IRK. This function can be called before calling <ref refid="group__bt__gap_1gac45d16bfe21c3c38e834c293e5ebc42b" kindref="member">bt_enable()</ref>, in which case it can be used to override the controller&apos;s public address (in case it has one). However, the new identity will only be stored persistently in flash when this API is used after <ref refid="group__bt__gap_1gac45d16bfe21c3c38e834c293e5ebc42b" kindref="member">bt_enable()</ref>. The reason is that the persistent settings are loaded after <ref refid="group__bt__gap_1gac45d16bfe21c3c38e834c293e5ebc42b" kindref="member">bt_enable()</ref> and would therefore cause potential conflicts with the stack blindly overwriting what&apos;s stored in flash. The identity will also not be written to flash in case a pre-defined address is provided, since in such a situation the app clearly has some place it got the address from and will be able to repeat the procedure on every power cycle, i.e. it would be redundant to also store the information in flash.</para>
<para>Generating random static address or random IRK is not supported when calling this function before <ref refid="group__bt__gap_1gac45d16bfe21c3c38e834c293e5ebc42b" kindref="member">bt_enable()</ref>.</para>
<para>If the application wants to have the stack randomly generate identities and store them in flash for later recovery, the way to do it would be to first initialize the stack (using bt_enable), then call <ref refid="group__settings_1ga89c6d618df81f197cc5c1a2018b00648" kindref="member">settings_load()</ref>, and after that check with <ref refid="group__bt__gap_1ga06d0ae35cbf4382679cc3cfe612cee4d" kindref="member">bt_id_get()</ref> how many identities were recovered. If an insufficient amount of identities were recovered the app may then call <ref refid="group__bt__gap_1gae11eb8ad254418c38a0e8689df25a159" kindref="member">bt_id_create()</ref> to create new ones.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to use for the new identity. If NULL or initialized to BT_ADDR_LE_ANY the stack will generate a new random static address for the identity and copy it to the given parameter upon return from this function (in case the parameter was non-NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irk</parametername>
</parameternamelist>
<parameterdescription>
<para>Identity Resolving Key (16 bytes) to be used with this identity. If set to all zeroes or NULL, the stack will generate a random IRK for the identity and copy it back to the parameter upon return from this function (in case the parameter was non-NULL). If privacy <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_PRIVACY` </verbatim> is not enabled this parameter must be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Identity identifier (&gt;= 0) in case of success, or a negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="232" column="5" declfile="include/bluetooth/bluetooth.h" declline="232" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gabb3353edc8a3a8d29a0370049b20cbe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_id_reset</definition>
        <argsstring>(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)</argsstring>
        <name>bt_id_reset</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>irk</declname>
        </param>
        <briefdescription>
<para>Reset/reclaim an identity for reuse. </para>
        </briefdescription>
        <detaileddescription>
<para>The semantics of the <emphasis>addr</emphasis> and <emphasis>irk</emphasis> parameters of this function are the same as with <ref refid="group__bt__gap_1gae11eb8ad254418c38a0e8689df25a159" kindref="member">bt_id_create()</ref>. The difference is the first <emphasis>id</emphasis> parameter that needs to be an existing identity (if it doesn&apos;t exist this function will return an error). When given an existing identity this function will disconnect any connections created using it, remove any pairing keys or other data associated with it, and then create a new identity in the same slot, based on the <emphasis>addr</emphasis> and <emphasis>irk</emphasis> parameters.</para>
<para><simplesect kind="note"><para>the default identity (BT_ID_DEFAULT) cannot be reset, i.e. this API will return an error if asked to do that.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Existing identity identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to use for the new identity. If NULL or initialized to BT_ADDR_LE_ANY the stack will generate a new static random address for the identity and copy it to the given parameter upon return from this function (in case the parameter was non-NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irk</parametername>
</parameternamelist>
<parameterdescription>
<para>Identity Resolving Key (16 bytes) to be used with this identity. If set to all zeroes or NULL, the stack will generate a random IRK for the identity and copy it back to the parameter upon return from this function (in case the parameter was non-NULL). If privacy <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_PRIVACY` </verbatim> is not enabled this parameter must be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Identity identifier (&gt;= 0) in case of success, or a negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="266" column="5" declfile="include/bluetooth/bluetooth.h" declline="266" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaf6cd906690a51ebed04bea4f4ef716ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_id_delete</definition>
        <argsstring>(uint8_t id)</argsstring>
        <name>bt_id_delete</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Delete an identity. </para>
        </briefdescription>
        <detaileddescription>
<para>When given a valid identity this function will disconnect any connections created using it, remove any pairing keys or other data associated with it, and then flag is as deleted, so that it can not be used for any operations. To take back into use the slot the identity was occupying the <ref refid="group__bt__gap_1gabb3353edc8a3a8d29a0370049b20cbe4" kindref="member">bt_id_reset()</ref> API needs to be used.</para>
<para><simplesect kind="note"><para>the default identity (BT_ID_DEFAULT) cannot be deleted, i.e. this API will return an error if asked to do that.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Existing identity identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success, or a negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="284" column="5" declfile="include/bluetooth/bluetooth.h" declline="284" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gad2e3caef88d52d720e8e4d21df767b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_adv_start</definition>
        <argsstring>(const struct bt_le_adv_param *param, const struct bt_data *ad, size_t ad_len, const struct bt_data *sd, size_t sd_len)</argsstring>
        <name>bt_le_adv_start</name>
        <param>
          <type>const struct <ref refid="structbt__le__adv__param" kindref="compound">bt_le_adv_param</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sd_len</declname>
        </param>
        <briefdescription>
<para>Start advertising. </para>
        </briefdescription>
        <detaileddescription>
<para>Set advertisement data, scan response data, advertisement parameters and start advertising.</para>
<para>When the advertisement parameter peer address has been set the advertising will be directed to the peer. In this case advertisement data and scan response data parameters are ignored. If the mode is high duty cycle the timeout will be <ref refid="group__bt__gap__defines_1gabe483d4dd601b11ac3eea570c962b1ec" kindref="member">BT_GAP_ADV_HIGH_DUTY_CYCLE_MAX_TIMEOUT</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be used in advertisement packets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in ad </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be used in scan response packets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in sd</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
<simplesect kind="return"><para>-ENOMEM No free connection objects available for connectable advertiser. </para>
</simplesect>
<simplesect kind="return"><para>-ECONNREFUSED When connectable advertising is requested and there is already maximum number of connections established in the controller. This error code is only guaranteed when using Zephyr controller, for other controllers code returned in this case may be -EIO. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="842" column="5" declfile="include/bluetooth/bluetooth.h" declline="842" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga9a406ebfefac3dd09935a4ae0e317817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_adv_update_data</definition>
        <argsstring>(const struct bt_data *ad, size_t ad_len, const struct bt_data *sd, size_t sd_len)</argsstring>
        <name>bt_le_adv_update_data</name>
        <param>
          <type>const struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sd_len</declname>
        </param>
        <briefdescription>
<para>Update advertising. </para>
        </briefdescription>
        <detaileddescription>
<para>Update advertisement and scan response data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be used in advertisement packets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in ad </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be used in scan response packets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in sd</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="858" column="5" declfile="include/bluetooth/bluetooth.h" declline="858" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga1776e310b9d80898e6b32d50c4fe0b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_adv_stop</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_adv_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stop advertising. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops ongoing advertising.</para>
<para><simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="868" column="5" declfile="include/bluetooth/bluetooth.h" declline="868" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gad02b855dd7a26e3910b247fa73f19297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_create</definition>
        <argsstring>(const struct bt_le_adv_param *param, const struct bt_le_ext_adv_cb *cb, struct bt_le_ext_adv **adv)</argsstring>
        <name>bt_le_ext_adv_create</name>
        <param>
          <type>const struct <ref refid="structbt__le__adv__param" kindref="compound">bt_le_adv_param</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__ext__adv__cb" kindref="compound">bt_le_ext_adv_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>struct bt_le_ext_adv **</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Create advertising set. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new advertising set and set advertising parameters. Advertising parameters can be updated with <ref refid="group__bt__gap_1ga1aabdb81cb1a1841ff0fb91d849123fc" kindref="member">bt_le_ext_adv_update_param</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback struct to notify about advertiser activity. Can be NULL. Must point to valid memory during the lifetime of the advertising set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid advertising set object on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="884" column="5" declfile="include/bluetooth/bluetooth.h" declline="884" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaddc6da5166cd8415d2b367380447eac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_start</definition>
        <argsstring>(struct bt_le_ext_adv *adv, struct bt_le_ext_adv_start_param *param)</argsstring>
        <name>bt_le_ext_adv_start</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__ext__adv__start__param" kindref="compound">bt_le_ext_adv_start_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Start advertising with the given advertising set. </para>
        </briefdescription>
        <detaileddescription>
<para>If the advertiser is limited by either the timeout or number of advertising events the application will be notified by the advertiser sent callback once the limit is reached. If the advertiser is limited by both the timeout and the number of advertising events then the limit that is reached first will stop the advertiser.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertise start parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="925" column="5" declfile="include/bluetooth/bluetooth.h" declline="925" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga1c864c4b183f9a86c9f70a11471c5b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_stop</definition>
        <argsstring>(struct bt_le_ext_adv *adv)</argsstring>
        <name>bt_le_ext_adv_stop</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Stop advertising with the given advertising set. </para>
        </briefdescription>
        <detaileddescription>
<para>Stop advertising with a specific advertising set. When using this function the advertising sent callback will not be called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="938" column="5" declfile="include/bluetooth/bluetooth.h" declline="938" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gad731f829b3566be3e56485b2a64f80b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_set_data</definition>
        <argsstring>(struct bt_le_ext_adv *adv, const struct bt_data *ad, size_t ad_len, const struct bt_data *sd, size_t sd_len)</argsstring>
        <name>bt_le_ext_adv_set_data</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sd_len</declname>
        </param>
        <briefdescription>
<para>Set an advertising set&apos;s advertising or scan response data. </para>
        </briefdescription>
        <detaileddescription>
<para>Set advertisement data or scan response data. If the advertising set is currently advertising then the advertising data will be updated in subsequent advertising events.</para>
<para>When both <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> and <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae60eafe69ef10b84f61a1f4accf789c9" kindref="member">BT_LE_ADV_OPT_SCANNABLE</ref> are enabled then advertising data is ignored. When <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae60eafe69ef10b84f61a1f4accf789c9" kindref="member">BT_LE_ADV_OPT_SCANNABLE</ref> is not enabled then scan response data is ignored.</para>
<para>If the advertising set has been configured to send advertising data on the primary advertising channels then the maximum data length is <ref refid="group__bt__gap__defines_1ga39ab5040c9471631486da7dbebd9c36f" kindref="member">BT_GAP_ADV_MAX_ADV_DATA_LEN</ref> bytes. If the advertising set has been configured for extended advertising, then the maximum data length is defined by the controller with the maximum possible of <ref refid="group__bt__gap__defines_1ga53af114e4925482739dc50dc84c2f641" kindref="member">BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN</ref> bytes.</para>
<para><simplesect kind="note"><para>Not all scanners support extended data length advertising data.</para>
</simplesect>
<simplesect kind="note"><para>When updating the advertising data while advertising the advertising data and scan response data length must be smaller or equal to what can be fit in a single advertising packet. Otherwise the advertiser must be stopped.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be used in advertisement packets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in ad </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be used in scan response packets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in sd</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="974" column="5" declfile="include/bluetooth/bluetooth.h" declline="974" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga1aabdb81cb1a1841ff0fb91d849123fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_update_param</definition>
        <argsstring>(struct bt_le_ext_adv *adv, const struct bt_le_adv_param *param)</argsstring>
        <name>bt_le_ext_adv_update_param</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__adv__param" kindref="compound">bt_le_adv_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Update advertising parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Update the advertising parameters. The function will return an error if the advertiser set is currently advertising. Stop the advertising set before calling this function.</para>
<para><simplesect kind="note"><para>When changing the option <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> then <ref refid="group__bt__gap_1gad731f829b3566be3e56485b2a64f80b1" kindref="member">bt_le_ext_adv_set_data</ref> needs to be called in order to update the advertising data and scan response data.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="994" column="5" declfile="include/bluetooth/bluetooth.h" declline="994" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga62310a27f7fea925dfcf3abd7c454787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_delete</definition>
        <argsstring>(struct bt_le_ext_adv *adv)</argsstring>
        <name>bt_le_ext_adv_delete</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Delete advertising set. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete advertising set. This will free up the advertising set and make it possible to create a new advertising set.</para>
<para><simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1005" column="5" declfile="include/bluetooth/bluetooth.h" declline="1005" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaeb37d6cdd94a04b4cce8bc1e7aae70b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_le_ext_adv_get_index</definition>
        <argsstring>(struct bt_le_ext_adv *adv)</argsstring>
        <name>bt_le_ext_adv_get_index</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Get array index of an advertising set. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to map bt_adv to index of an array of advertising sets. The array has CONFIG_BT_EXT_ADV_MAX_ADV_SET elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the advertising set object. The range of the returned value is 0..CONFIG_BT_EXT_ADV_MAX_ADV_SET-1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1018" column="9" declfile="include/bluetooth/bluetooth.h" declline="1018" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gac06c9f55cf1da46e0d64b4d9af984ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_get_info</definition>
        <argsstring>(const struct bt_le_ext_adv *adv, struct bt_le_ext_adv_info *info)</argsstring>
        <name>bt_le_ext_adv_get_info</name>
        <param>
          <type>const struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__ext__adv__info" kindref="compound">bt_le_ext_adv_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get advertising set info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set info object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1037" column="5" declfile="include/bluetooth/bluetooth.h" declline="1037" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaa72029a2759123ec776061d2e80bf3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_set_param</definition>
        <argsstring>(struct bt_le_ext_adv *adv, const struct bt_le_per_adv_param *param)</argsstring>
        <name>bt_le_per_adv_set_param</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__per__adv__param" kindref="compound">bt_le_per_adv_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Set or update the periodic advertising parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The periodic advertising parameters can only be set or updated on an extended advertisement set which is neither scannable, connectable nor anonymous.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1067" column="5" declfile="include/bluetooth/bluetooth.h" declline="1067" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gafd0e7ccca93a8347a4ca6cca88e77899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_set_data</definition>
        <argsstring>(const struct bt_le_ext_adv *adv, const struct bt_data *ad, size_t ad_len)</argsstring>
        <name>bt_le_per_adv_set_data</name>
        <param>
          <type>const struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_len</declname>
        </param>
        <briefdescription>
<para>Set or update the periodic advertising data. </para>
        </briefdescription>
        <detaileddescription>
<para>The periodic advertisement data can only be set or updated on an extended advertisement set which is neither scannable, connectable nor anonymous.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising data length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1083" column="5" declfile="include/bluetooth/bluetooth.h" declline="1083" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga0f23f4ed48e8679646f247ea0d687094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_start</definition>
        <argsstring>(struct bt_le_ext_adv *adv)</argsstring>
        <name>bt_le_per_adv_start</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Starts periodic advertising. </para>
        </briefdescription>
        <detaileddescription>
<para>Enabling the periodic advertising can be done independently of extended advertising, but both periodic advertising and extended advertising shall be enabled before any periodic advertising data is sent. The periodic advertising and extended advertising can be enabled in any order.</para>
<para>Once periodic advertising has been enabled, it will continue advertising until <ref refid="group__bt__gap_1ga1b15206fc552d597c12af369d48ff7d5" kindref="member">bt_le_per_adv_stop()</ref> has been called, or if the advertising set is deleted by <ref refid="group__bt__gap_1ga62310a27f7fea925dfcf3abd7c454787" kindref="member">bt_le_ext_adv_delete()</ref>. Calling <ref refid="group__bt__gap_1ga1c864c4b183f9a86c9f70a11471c5b15" kindref="member">bt_le_ext_adv_stop()</ref> will not stop the periodic advertising.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1103" column="5" declfile="include/bluetooth/bluetooth.h" declline="1103" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga1b15206fc552d597c12af369d48ff7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_stop</definition>
        <argsstring>(struct bt_le_ext_adv *adv)</argsstring>
        <name>bt_le_per_adv_stop</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Stops periodic advertising. </para>
        </briefdescription>
        <detaileddescription>
<para>Disabling the periodic advertising can be done independently of extended advertising. Disabling periodic advertising will not disable extended advertising.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising set object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1116" column="5" declfile="include/bluetooth/bluetooth.h" declline="1116" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga8d05bd864d98b5b43595eb256e464024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_le_per_adv_sync_get_index</definition>
        <argsstring>(struct bt_le_per_adv_sync *per_adv_sync)</argsstring>
        <name>bt_le_per_adv_sync_get_index</name>
        <param>
          <type>struct bt_le_per_adv_sync *</type>
          <declname>per_adv_sync</declname>
        </param>
        <briefdescription>
<para>Get array index of an periodic advertising sync object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is get the index of an array of periodic advertising sync objects. The array has CONFIG_BT_PER_ADV_SYNC_MAX elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>per_adv_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>The periodic advertising sync object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the periodic advertising sync object. The range of the returned value is 0..CONFIG_BT_PER_ADV_SYNC_MAX-1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1345" column="9" declfile="include/bluetooth/bluetooth.h" declline="1345" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gabfaf265a48dd09ea02d114e2023c14a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_get_info</definition>
        <argsstring>(struct bt_le_per_adv_sync *per_adv_sync, struct bt_le_per_adv_sync_info *info)</argsstring>
        <name>bt_le_per_adv_sync_get_info</name>
        <param>
          <type>struct bt_le_per_adv_sync *</type>
          <declname>per_adv_sync</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__per__adv__sync__info" kindref="compound">bt_le_per_adv_sync_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get periodic adv sync information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>per_adv_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic advertising sync object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic advertising sync info object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1370" column="5" declfile="include/bluetooth/bluetooth.h" declline="1370" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga83126917373c0bcaa24964dd1d8bde46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct bt_le_per_adv_sync *</type>
        <definition>struct bt_le_per_adv_sync * bt_le_per_adv_sync_lookup_addr</definition>
        <argsstring>(const bt_addr_le_t *adv_addr, uint8_t sid)</argsstring>
        <name>bt_le_per_adv_sync_lookup_addr</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>adv_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>sid</declname>
        </param>
        <briefdescription>
<para>Look up an existing periodic advertising sync object by advertiser address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertiser address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>The advertising set ID.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Periodic advertising sync object or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1381" column="25" declfile="include/bluetooth/bluetooth.h" declline="1381" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga061bf84b989b2c96ab51d2ca0debb017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_create</definition>
        <argsstring>(const struct bt_le_per_adv_sync_param *param, struct bt_le_per_adv_sync **out_sync)</argsstring>
        <name>bt_le_per_adv_sync_create</name>
        <param>
          <type>const struct <ref refid="structbt__le__per__adv__sync__param" kindref="compound">bt_le_per_adv_sync_param</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>struct bt_le_per_adv_sync **</type>
          <declname>out_sync</declname>
        </param>
        <briefdescription>
<para>Create a periodic advertising sync object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a periodic advertising sync object that can try to synchronize to periodic advertising reports from an advertiser. Scan shall either be disabled or extended scan shall be enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic advertising sync parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic advertising sync object on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1396" column="5" declfile="include/bluetooth/bluetooth.h" declline="1396" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaa0c218ff3c78b26dcfaa726ee30267a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_delete</definition>
        <argsstring>(struct bt_le_per_adv_sync *per_adv_sync)</argsstring>
        <name>bt_le_per_adv_sync_delete</name>
        <param>
          <type>struct bt_le_per_adv_sync *</type>
          <declname>per_adv_sync</declname>
        </param>
        <briefdescription>
<para>Delete periodic advertising sync. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete the periodic advertising sync object. Can be called regardless of the state of the sync. If the syncing is currently syncing, the syncing is cancelled. If the sync has been established, it is terminated. The periodic advertising sync object will be invalidated afterwards.</para>
<para>If the state of the sync object is syncing, then a new periodic advertising sync object may not be created until the controller has finished canceling this object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>per_adv_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>The periodic advertising sync object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1415" column="5" declfile="include/bluetooth/bluetooth.h" declline="1415" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga0df428314deaa84c7f5680a90c38729a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_le_per_adv_sync_cb_register</definition>
        <argsstring>(struct bt_le_per_adv_sync_cb *cb)</argsstring>
        <name>bt_le_per_adv_sync_cb_register</name>
        <param>
          <type>struct <ref refid="structbt__le__per__adv__sync__cb" kindref="compound">bt_le_per_adv_sync_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register periodic advertising sync callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the callback structure to the list of callback structures for periodic adverising syncs.</para>
<para>This callback will be called for all periodic advertising sync activity, such as synced, terminated and when data is received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback struct. Must point to memory that remains valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1428" column="6" declfile="include/bluetooth/bluetooth.h" declline="1428" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga07e4510de7e72c6ed6196b3da9fb40be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_recv_enable</definition>
        <argsstring>(struct bt_le_per_adv_sync *per_adv_sync)</argsstring>
        <name>bt_le_per_adv_sync_recv_enable</name>
        <param>
          <type>struct bt_le_per_adv_sync *</type>
          <declname>per_adv_sync</declname>
        </param>
        <briefdescription>
<para>Enables receiving periodic advertising reports for a sync. </para>
        </briefdescription>
        <detaileddescription>
<para>If the sync is already receiving the reports, -EALREADY is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>per_adv_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>The periodic advertising sync object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1439" column="5" declfile="include/bluetooth/bluetooth.h" declline="1439" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga3dc0c6a0c6a77f4db63ee2ff8329a4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_recv_disable</definition>
        <argsstring>(struct bt_le_per_adv_sync *per_adv_sync)</argsstring>
        <name>bt_le_per_adv_sync_recv_disable</name>
        <param>
          <type>struct bt_le_per_adv_sync *</type>
          <declname>per_adv_sync</declname>
        </param>
        <briefdescription>
<para>Disables receiving periodic advertising reports for a sync. </para>
        </briefdescription>
        <detaileddescription>
<para>If the sync report receiving is already disabled, -EALREADY is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>per_adv_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>The periodic advertising sync object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1450" column="5" declfile="include/bluetooth/bluetooth.h" declline="1450" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaf81a1dd7a628d1a2f25c6b53b0679809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_transfer</definition>
        <argsstring>(const struct bt_le_per_adv_sync *per_adv_sync, const struct bt_conn *conn, uint16_t service_data)</argsstring>
        <name>bt_le_per_adv_sync_transfer</name>
        <param>
          <type>const struct bt_le_per_adv_sync *</type>
          <declname>per_adv_sync</declname>
        </param>
        <param>
          <type>const struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>service_data</declname>
        </param>
        <briefdescription>
<para>Transfer the periodic advertising sync information to a peer device. </para>
        </briefdescription>
        <detaileddescription>
<para>This will allow another device to quickly synchronize to the same periodic advertising train that this device is currently synced to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>per_adv_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>The periodic advertising sync to transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The peer device that will receive the sync information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application service data provided to the remote host.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1517" column="5" declfile="include/bluetooth/bluetooth.h" declline="1517" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gac96199a4e5e6cfb789c1bd1c0e67d6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_set_info_transfer</definition>
        <argsstring>(const struct bt_le_ext_adv *adv, const struct bt_conn *conn, uint16_t service_data)</argsstring>
        <name>bt_le_per_adv_set_info_transfer</name>
        <param>
          <type>const struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>const struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>service_data</declname>
        </param>
        <briefdescription>
<para>Transfer the information about a periodic advertising set. </para>
        </briefdescription>
        <detaileddescription>
<para>This will allow another device to quickly synchronize to periodic advertising set from this device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adv</parametername>
</parameternamelist>
<parameterdescription>
<para>The periodic advertising set to transfer info of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The peer device that will receive the information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application service data provided to the remote host.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1534" column="5" declfile="include/bluetooth/bluetooth.h" declline="1534" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaa0658bd53df1d5e8e89e13330e4fd0ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_transfer_subscribe</definition>
        <argsstring>(const struct bt_conn *conn, const struct bt_le_per_adv_sync_transfer_param *param)</argsstring>
        <name>bt_le_per_adv_sync_transfer_subscribe</name>
        <param>
          <type>const struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__per__adv__sync__transfer__param" kindref="compound">bt_le_per_adv_sync_transfer_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Subscribe to periodic advertising sync transfers (PASTs). </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the parameters and allow other devices to transfer periodic advertising syncs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection to set the parameters for. If NULL default parameters for all connections will be set. Parameters set for specific connection will always have precedence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The periodic advertising sync transfer parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1551" column="5" declfile="include/bluetooth/bluetooth.h" declline="1551" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga08f872078045bbef4aca19761f25eeb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_sync_transfer_unsubscribe</definition>
        <argsstring>(const struct bt_conn *conn)</argsstring>
        <name>bt_le_per_adv_sync_transfer_unsubscribe</name>
        <param>
          <type>const struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Unsubscribe from periodic advertising sync transfers (PASTs). </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the parameters that allow other devices to transfer periodic advertising syncs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection to remove the parameters for. If NULL default parameters for all connections will be removed. Unsubscribing for a specific device, will still allow other devices to transfer periodic advertising syncs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1568" column="5" declfile="include/bluetooth/bluetooth.h" declline="1568" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga27c4961f3c7270a7f1caeadb4107854b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_list_add</definition>
        <argsstring>(const bt_addr_le_t *addr, uint8_t sid)</argsstring>
        <name>bt_le_per_adv_list_add</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>sid</declname>
        </param>
        <briefdescription>
<para>Add a device to the periodic advertising list. </para>
        </briefdescription>
        <detaileddescription>
<para>Add peer device LE address to the periodic advertising list. This will make it possibly to automatically create a periodic advertising sync to this device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE identity address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>The advertising set ID. This value is obtained from the <ref refid="structbt__le__scan__recv__info" kindref="compound">bt_le_scan_recv_info</ref> in the scan callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1583" column="5" declfile="include/bluetooth/bluetooth.h" declline="1583" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga100efac4a49984e06202c63c4e5955cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_list_remove</definition>
        <argsstring>(const bt_addr_le_t *addr, uint8_t sid)</argsstring>
        <name>bt_le_per_adv_list_remove</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>sid</declname>
        </param>
        <briefdescription>
<para>Remove a device from the periodic advertising list. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes peer device LE address from the periodic advertising list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE identity address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>The advertising set ID. This value is obtained from the <ref refid="structbt__le__scan__recv__info" kindref="compound">bt_le_scan_recv_info</ref> in the scan callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1596" column="5" declfile="include/bluetooth/bluetooth.h" declline="1596" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga5909bd768c23a19a42a660e3b814c981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_per_adv_list_clear</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_per_adv_list_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear the periodic advertising list. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears the entire periodic advertising list.</para>
<para><simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1605" column="5" declfile="include/bluetooth/bluetooth.h" declline="1605" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gac5e19c26b53a08dadb8efa7ecc692ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_scan_start</definition>
        <argsstring>(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)</argsstring>
        <name>bt_le_scan_start</name>
        <param>
          <type>const struct <ref refid="structbt__le__scan__param" kindref="compound">bt_le_scan_param</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="group__bt__gap_1ga9c166a535270031636736984767d9d0d" kindref="member">bt_le_scan_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Start (LE) scanning. </para>
        </briefdescription>
        <detaileddescription>
<para>Start LE scanning with given parameters and provide results through the specified callback.</para>
<para><simplesect kind="note"><para>The LE scanner by default does not use the Identity Address of the local device when <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_PRIVACY` </verbatim> is disabled. This is to prevent the active scanner from disclosing the identity information when requesting additional information from advertisers. In order to enable directed advertiser reports then <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_SCAN_WITH_IDENTITY` </verbatim> must be enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to notify scan results. May be NULL if callback registration through <ref refid="group__bt__gap_1gad7c2f18de7f67b73ccc0e7813f48f096" kindref="member">bt_le_scan_cb_register</ref> is preferred.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1831" column="5" declfile="include/bluetooth/bluetooth.h" declline="1831" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaa2de1a1ab523606b36a4c445fb0c3b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_scan_stop</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_scan_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stop (LE) scanning. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops ongoing LE scanning.</para>
<para><simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1841" column="5" declfile="include/bluetooth/bluetooth.h" declline="1841" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gad7c2f18de7f67b73ccc0e7813f48f096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_le_scan_cb_register</definition>
        <argsstring>(struct bt_le_scan_cb *cb)</argsstring>
        <name>bt_le_scan_cb_register</name>
        <param>
          <type>struct <ref refid="structbt__le__scan__cb" kindref="compound">bt_le_scan_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register scanner packet callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the callback structure to the list of callback structures that monitors scanner activity.</para>
<para>This callback will be called for all scanner activity, regardless of what API was used to start the scanner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback struct. Must point to memory that remains valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1854" column="6" declfile="include/bluetooth/bluetooth.h" declline="1854" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gac2718f2128b3f8c79b12d760771c8378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_le_scan_cb_unregister</definition>
        <argsstring>(struct bt_le_scan_cb *cb)</argsstring>
        <name>bt_le_scan_cb_unregister</name>
        <param>
          <type>struct <ref refid="structbt__le__scan__cb" kindref="compound">bt_le_scan_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Unregister scanner packet callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the callback structure from the list of scanner callbacks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback struct. Must point to memory that remains valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1863" column="6" declfile="include/bluetooth/bluetooth.h" declline="1863" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga40f2f7fdb09aba3c5137f680e67792f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_filter_accept_list_add</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_le_filter_accept_list_add</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Add device (LE) to filter accept list. </para>
        </briefdescription>
        <detaileddescription>
<para>Add peer device LE address to the filter accept list.</para>
<para><simplesect kind="note"><para>The filter accept list cannot be modified when an LE role is using the filter accept list, i.e advertiser or scanner using a filter accept list or automatic connecting to devices using filter accept list.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE identity address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1879" column="5" declfile="include/bluetooth/bluetooth.h" declline="1879" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga1423cb91b0e9e7633bf9a3e7aa73d730" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_le_whitelist_add</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_le_whitelist_add</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1881" column="19" bodyfile="include/bluetooth/bluetooth.h" bodystart="1881" bodyend="1884"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga0532ed768ab4f9d69c202066d2f87e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_filter_accept_list_remove</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_le_filter_accept_list_remove</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Remove device (LE) from filter accept list. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove peer device LE address from the filter accept list.</para>
<para><simplesect kind="note"><para>The filter accept list cannot be modified when an LE role is using the filter accept list, i.e advertiser or scanner using a filter accept list or automatic connecting to devices using filter accept list.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE identity address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1900" column="5" declfile="include/bluetooth/bluetooth.h" declline="1900" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga0f3bbbfca7dc10003258d9b0a051e653" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_le_whitelist_rem</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_le_whitelist_rem</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1902" column="19" bodyfile="include/bluetooth/bluetooth.h" bodystart="1902" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gac87df899d1e363c63162988157ee6d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_filter_accept_list_clear</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_filter_accept_list_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear filter accept list. </para>
        </briefdescription>
        <detaileddescription>
<para>Clear all devices from the filter accept list.</para>
<para><simplesect kind="note"><para>The filter accept list cannot be modified when an LE role is using the filter accept list, i.e advertiser or scanner using a filter accept list or automatic connecting to devices using filter accept list.</para>
</simplesect>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1919" column="5" declfile="include/bluetooth/bluetooth.h" declline="1919" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga1e80196fbf29a539cdf5c21fbc96cfef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_le_whitelist_clear</definition>
        <argsstring>(void)</argsstring>
        <name>bt_le_whitelist_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1921" column="19" bodyfile="include/bluetooth/bluetooth.h" bodystart="1921" bodyend="1924"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gabc115fd3fff6d00ae878a31613bf70aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_set_chan_map</definition>
        <argsstring>(uint8_t chan_map[5])</argsstring>
        <name>bt_le_set_chan_map</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>chan_map</declname>
          <array>[5]</array>
        </param>
        <briefdescription>
<para>Set (LE) channel map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel map.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1934" column="5" declfile="include/bluetooth/bluetooth.h" declline="1934" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga652eef01e5256e0d820cd1f4db877429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_data_parse</definition>
        <argsstring>(struct net_buf_simple *ad, bool(*func)(struct bt_data *data, void *user_data), void *user_data)</argsstring>
        <name>bt_data_parse</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*)(struct <ref refid="structbt__data" kindref="compound">bt_data</ref> *<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, void *<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Helper for parsing advertising (or EIR or OOB) data. </para>
        </briefdescription>
        <detaileddescription>
<para>A helper for parsing the basic data types used for Extended Inquiry Response (EIR), Advertising Data (AD), and OOB data blocks. The most common scenario is to call this helper on the advertising data received in the callback that was given to <ref refid="group__bt__gap_1gac5e19c26b53a08dadb8efa7ecc692ad6" kindref="member">bt_le_scan_start()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising data as given to the bt_le_scan_cb_t callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function which will be called for each element that&apos;s found in the data. The callback should return true to continue parsing, or false to stop parsing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to be passed to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1950" column="6" declfile="include/bluetooth/bluetooth.h" declline="1950" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga296d1adf3c9ed2f2c65bb75b887d59ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_oob_get_local</definition>
        <argsstring>(uint8_t id, struct bt_le_oob *oob)</argsstring>
        <name>bt_le_oob_get_local</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__oob" kindref="compound">bt_le_oob</ref> *</type>
          <declname>oob</declname>
        </param>
        <briefdescription>
<para>Get local LE Out of Band (OOB) information. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to get local information that are useful for Out of Band pairing or connection creation.</para>
<para>If privacy <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_PRIVACY` </verbatim> is enabled this will result in generating new Resolvable Private Address (RPA) that is valid for <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_RPA_TIMEOUT` </verbatim> seconds. This address will be used for advertising started by <ref refid="group__bt__gap_1gad2e3caef88d52d720e8e4d21df767b02" kindref="member">bt_le_adv_start</ref>, active scanning and connection creation.</para>
<para><simplesect kind="note"><para>If privacy is enabled the RPA cannot be refreshed in the following cases:<itemizedlist>
<listitem><para>Creating a connection in progress, wait for the connected callback. In addition when extended advertising <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_EXT_ADV` </verbatim> is not enabled or not supported by the controller:</para>
</listitem><listitem><para>Advertiser is enabled using a Random Static Identity Address for a different local identity.</para>
</listitem><listitem><para>The local identity conflicts with the local identity used by other roles.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Local identity, in most cases BT_ID_DEFAULT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oob</parametername>
</parameternamelist>
<parameterdescription>
<para>LE OOB information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2002" column="5" declfile="include/bluetooth/bluetooth.h" declline="2002" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga7486aab863ca497a50dacf81657f48d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_ext_adv_oob_get_local</definition>
        <argsstring>(struct bt_le_ext_adv *adv, struct bt_le_oob *oob)</argsstring>
        <name>bt_le_ext_adv_oob_get_local</name>
        <param>
          <type>struct bt_le_ext_adv *</type>
          <declname>adv</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__le__oob" kindref="compound">bt_le_oob</ref> *</type>
          <declname>oob</declname>
        </param>
        <briefdescription>
<para>Get local LE Out of Band (OOB) information. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to get local information that are useful for Out of Band pairing or connection creation.</para>
<para>If privacy <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_PRIVACY` </verbatim> is enabled this will result in generating new Resolvable Private Address (RPA) that is valid for <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_RPA_TIMEOUT` </verbatim> seconds. This address will be used by the advertising set.</para>
<para><simplesect kind="note"><para>When generating OOB information for multiple advertising set all OOB information needs to be generated at the same time.</para>
</simplesect>
<simplesect kind="note"><para>If privacy is enabled the RPA cannot be refreshed in the following cases:<itemizedlist>
<listitem><para>Creating a connection in progress, wait for the connected callback.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">adv</parametername>
</parameternamelist>
<parameterdescription>
<para>The advertising set object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oob</parametername>
</parameternamelist>
<parameterdescription>
<para>LE OOB information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2028" column="5" declfile="include/bluetooth/bluetooth.h" declline="2028" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaf7efa6302cde58a10efaf0b68f5cb3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_br_discovery_start</definition>
        <argsstring>(const struct bt_br_discovery_param *param, struct bt_br_discovery_result *results, size_t count, bt_br_discovery_cb_t cb)</argsstring>
        <name>bt_br_discovery_start</name>
        <param>
          <type>const struct <ref refid="structbt__br__discovery__param" kindref="compound">bt_br_discovery_param</ref> *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__br__discovery__result" kindref="compound">bt_br_discovery_result</ref> *</type>
          <declname>results</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="group__bt__gap_1ga4af91613898d0e0b0afd0f559d1375e1" kindref="member">bt_br_discovery_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Start BR/EDR discovery. </para>
        </briefdescription>
        <detaileddescription>
<para>Start BR/EDR discovery (inquiry) and provide results through the specified callback. When bt_br_discovery_cb_t is called it indicates that discovery has completed. If more inquiry results were received during session than fits in provided result storage, only ones with highest RSSI will be reported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Discovery parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage for discovery results. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of results in storage. Valid range: 1-255. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to notify discovery results.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2092" column="5" declfile="include/bluetooth/bluetooth.h" declline="2092" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga567c71b49399fe7e1a5593edbf005e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_br_discovery_stop</definition>
        <argsstring>(void)</argsstring>
        <name>bt_br_discovery_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stop BR/EDR discovery. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops ongoing BR/EDR discovery. If discovery was stopped by this call results won&apos;t be reported</para>
<para><simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2105" column="5" declfile="include/bluetooth/bluetooth.h" declline="2105" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga2ec860d06c45098624b106b59fbab634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_br_oob_get_local</definition>
        <argsstring>(struct bt_br_oob *oob)</argsstring>
        <name>bt_br_oob_get_local</name>
        <param>
          <type>struct <ref refid="structbt__br__oob" kindref="compound">bt_br_oob</ref> *</type>
          <declname>oob</declname>
        </param>
        <briefdescription>
<para>Get BR/EDR local Out Of Band information. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to get local controller information that are useful for Out Of Band pairing or connection creation process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oob</parametername>
</parameternamelist>
<parameterdescription>
<para>Out Of Band information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2120" column="5" declfile="include/bluetooth/bluetooth.h" declline="2120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gad3b9075cc9bab5c1ae37514a6dfe555c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_br_set_discoverable</definition>
        <argsstring>(bool enable)</argsstring>
        <name>bt_br_set_discoverable</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/disable set controller in discoverable state. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows make local controller to listen on INQUIRY SCAN channel and responds to devices making general inquiry. To enable this state it&apos;s mandatory to first be in connectable state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Value allowing/disallowing controller to become discoverable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Negative if fail set to requested state or requested state has been already set. Zero if done successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2135" column="5" declfile="include/bluetooth/bluetooth.h" declline="2135" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga80aed18a099948bef8f3649ad537e541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_br_set_connectable</definition>
        <argsstring>(bool enable)</argsstring>
        <name>bt_br_set_connectable</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/disable set controller in connectable state. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows make local controller to be connectable. It means the controller start listen to devices requests on PAGE SCAN channel. If disabled also resets discoverability if was set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Value allowing/disallowing controller to be connectable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Negative if fail set to requested state or requested state has been already set. Zero if done successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2149" column="5" declfile="include/bluetooth/bluetooth.h" declline="2149" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaceabbbe6e844650f791010e53c9df6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_unpair</definition>
        <argsstring>(uint8_t id, const bt_addr_le_t *addr)</argsstring>
        <name>bt_unpair</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Clear pairing information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Local identity (mostly just BT_ID_DEFAULT). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote address, NULL or BT_ADDR_LE_ANY to clear all remote devices.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or negative error value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2160" column="5" declfile="include/bluetooth/bluetooth.h" declline="2160" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1gaad380b7f8984f8522c1b79f9bdc04905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_foreach_bond</definition>
        <argsstring>(uint8_t id, void(*func)(const struct bt_bond_info *info, void *user_data), void *user_data)</argsstring>
        <name>bt_foreach_bond</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>void(*)(const struct <ref refid="structbt__bond__info" kindref="compound">bt_bond_info</ref> *info, void *<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Iterate through all existing bonds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Local identity (mostly just BT_ID_DEFAULT). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call for each bond. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to pass to the callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2175" column="6" declfile="include/bluetooth/bluetooth.h" declline="2175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gap_1ga8046c2b06d3dad0d6c8184de492517d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_configure_data_path</definition>
        <argsstring>(uint8_t dir, uint8_t id, uint8_t vs_config_len, const uint8_t *vs_config)</argsstring>
        <name>bt_configure_data_path</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>vs_config_len</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>vs_config</declname>
        </param>
        <briefdescription>
<para>Configure vendor data path. </para>
        </briefdescription>
        <detaileddescription>
<para>Request the Controller to configure the data transport path in a given direction between the Controller and the Host.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction to be configured, BT_HCI_DATAPATH_DIR_HOST_TO_CTLR or BT_HCI_DATAPATH_DIR_CTLR_TO_HOST </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Vendor specific logical transport channel ID, range [BT_HCI_DATAPATH_ID_VS..BT_HCI_DATAPATH_ID_VS_END] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vs_config_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of additional vendor specific configuration data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vs_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to additional vendor specific configuration data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="2193" column="5" declfile="include/bluetooth/bluetooth.h" declline="2193" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__gap_1gaded4b52c9bb87fd4d19b1eb9361973e5" prot="public" static="no">
        <name>BT_ID_DEFAULT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience macro for specifying the default identity. This helps make the code more readable, especially when only one identity is supported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="46" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga8481217e632522e1f322de87d745f8f0" prot="public" static="no">
        <name>BT_DATA</name>
        <param><defname>_type</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_data_len</defname></param>
        <initializer>	{ \
		.type = (_type), \
		.data_len = (_data_len), \
		.<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref> = (const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)(_data), \
	}</initializer>
        <briefdescription>
<para>Helper to declare elements of <ref refid="structbt__data" kindref="compound">bt_data</ref> arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro is mainly for creating an array of struct <ref refid="structbt__data" kindref="compound">bt_data</ref> elements which is then passed to e.g. <ref refid="group__bt__gap_1gad2e3caef88d52d720e8e4d21df767b02" kindref="member">bt_le_adv_start()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of advertising data field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data field payload </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes behind the _data pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="309" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga4c51f9b7a3a4e84abb4df3f1f714c6e2" prot="public" static="no">
        <name>BT_DATA_BYTES</name>
        <param><defname>_type</defname></param>
        <param><defname>_bytes...</defname></param>
        <initializer>	<ref refid="group__bt__gap_1ga8481217e632522e1f322de87d745f8f0" kindref="member">BT_DATA</ref>(_type, ((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> []) { _bytes }), \
		sizeof((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> []) { _bytes }))</initializer>
        <briefdescription>
<para>Helper to declare elements of <ref refid="structbt__data" kindref="compound">bt_data</ref> arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro is mainly for creating an array of struct <ref refid="structbt__data" kindref="compound">bt_data</ref> elements which is then passed to e.g. <ref refid="group__bt__gap_1gad2e3caef88d52d720e8e4d21df767b02" kindref="member">bt_le_adv_start()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of advertising data field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of single-byte parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="325" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga71555b857cf8c2a47c36e4dafa7accf4" prot="public" static="no">
        <name>BT_LE_ADV_PARAM_INIT</name>
        <param><defname>_options</defname></param>
        <param><defname>_int_min</defname></param>
        <param><defname>_int_max</defname></param>
        <param><defname>_peer</defname></param>
        <initializer>{ \
	.id = <ref refid="group__bt__gap_1gaded4b52c9bb87fd4d19b1eb9361973e5" kindref="member">BT_ID_DEFAULT</ref>, \
	.sid = 0, \
	.secondary_max_skip = 0, \
	.options = (_options), \
	.interval_min = (_int_min), \
	.interval_max = (_int_max), \
	.peer = (_peer), \
}</initializer>
        <briefdescription>
<para>Initialize advertising parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising Options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_int_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_int_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_peer</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer address, set to NULL for undirected advertising or address of peer for directed advertising. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="634" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" prot="public" static="no">
        <name>BT_LE_ADV_PARAM</name>
        <param><defname>_options</defname></param>
        <param><defname>_int_min</defname></param>
        <param><defname>_int_max</defname></param>
        <param><defname>_peer</defname></param>
        <initializer>	((struct <ref refid="structbt__le__adv__param" kindref="compound">bt_le_adv_param</ref>[]) { \
		<ref refid="group__bt__gap_1ga71555b857cf8c2a47c36e4dafa7accf4" kindref="member">BT_LE_ADV_PARAM_INIT</ref>(_options, _int_min, _int_max, _peer) \
	 })</initializer>
        <briefdescription>
<para>Helper to declare advertising parameters inline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertising Options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_int_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_int_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_peer</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer address, set to NULL for undirected advertising or address of peer for directed advertising. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="654" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga1f5edc3c4cbead62e32cef8cc7b83725" prot="public" static="no">
        <name>BT_LE_ADV_CONN_DIR</name>
        <param><defname>_peer</defname></param>
        <initializer>						  <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" kindref="member">BT_LE_ADV_OPT_CONNECTABLE</ref> |  \
						  <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da7d12782a02afefcf4b5c04442a99f8a2" kindref="member">BT_LE_ADV_OPT_ONE_TIME</ref>, 0, 0,\
						  _peer)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="659" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gad490487b9e196526a13fe249a4c25448" prot="public" static="no">
        <name>BT_LE_ADV_CONN</name>
        <initializer>				       <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" kindref="member">BT_LE_ADV_OPT_CONNECTABLE</ref>, \
				       <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
				       <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="664" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga7b29dba3d892186897c5b4ca5adfd2e3" prot="public" static="no">
        <name>BT_LE_ADV_CONN_NAME</name>
        <initializer>					    <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" kindref="member">BT_LE_ADV_OPT_CONNECTABLE</ref> | \
					    <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref>, \
					    <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
					    <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="668" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga213307090f1debdc783c54faf4a36740" prot="public" static="no">
        <name>BT_LE_ADV_CONN_NAME_AD</name>
        <initializer>					    <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" kindref="member">BT_LE_ADV_OPT_CONNECTABLE</ref> | \
					    <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> | \
					    <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da0a9642077d93cf9c0eb42f64a9e34e73" kindref="member">BT_LE_ADV_OPT_FORCE_NAME_IN_AD</ref>, \
					    <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
					    <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="673" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gab89e033ed3fd116c94120d177dfdc839" prot="public" static="no">
        <name>BT_LE_ADV_CONN_DIR_LOW_DUTY</name>
        <param><defname>_peer</defname></param>
        <initializer>	<ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" kindref="member">BT_LE_ADV_OPT_CONNECTABLE</ref> | <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da7d12782a02afefcf4b5c04442a99f8a2" kindref="member">BT_LE_ADV_OPT_ONE_TIME</ref> | \
			<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dafd164ec5476f5e2d9aedf50032946872" kindref="member">BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY</ref>, \
			<ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, \
			_peer)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="679" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga1610555bf59f1d691d640f245957fdce" prot="public" static="no">
        <name>BT_LE_ADV_NCONN</name>
        <initializer>					<ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(0, <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
					<ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable advertising with private address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="686" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gac1c3c47e3136ce813bb50b00a9387cb4" prot="public" static="no">
        <name>BT_LE_ADV_NCONN_NAME</name>
        <initializer>					     <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref>, \
					     <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
					     <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable advertising with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="690" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga6ef9fb7a469b03265c7adc99ea19a11b" prot="public" static="no">
        <name>BT_LE_ADV_NCONN_IDENTITY</name>
        <initializer>						 <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da407cf5ae358d3c00dd7e47dfaad3ec6e" kindref="member">BT_LE_ADV_OPT_USE_IDENTITY</ref>, \
						 <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
						 <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, \
						 NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable advertising with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da407cf5ae358d3c00dd7e47dfaad3ec6e" kindref="member">BT_LE_ADV_OPT_USE_IDENTITY</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="695" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gac4880197cbe21aad78c4edf10cde95da" prot="public" static="no">
        <name>BT_LE_EXT_ADV_CONN_NAME</name>
        <initializer>						<ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> | \
						<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2a90f8d144a194f74c5432079c5d42a3" kindref="member">BT_LE_ADV_OPT_CONNECTABLE</ref> | \
						<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref>, \
						<ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
						<ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, \
						NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connectable extended advertising with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="701" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga3e4abd3691e2c6d95acd21b9ca566edd" prot="public" static="no">
        <name>BT_LE_EXT_ADV_SCAN_NAME</name>
        <initializer>						<ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> | \
						<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae60eafe69ef10b84f61a1f4accf789c9" kindref="member">BT_LE_ADV_OPT_SCANNABLE</ref> | \
						<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref>, \
						<ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
						<ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, \
						NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scannable extended advertising with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="709" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gaabc0385f6a5307b48ec43af6aae7dea6" prot="public" static="no">
        <name>BT_LE_EXT_ADV_NCONN</name>
        <initializer>					    <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref>, \
					    <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
					    <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable extended advertising with private address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="717" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga5c79af6787ccda890f485a45c931cdc8" prot="public" static="no">
        <name>BT_LE_EXT_ADV_NCONN_NAME</name>
        <initializer>						 <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> | \
						 <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref>, \
						 <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
						 <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, \
						 NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable extended advertising with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="722" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga7e46a64af0036c433c2e940ce7db0a05" prot="public" static="no">
        <name>BT_LE_EXT_ADV_NCONN_IDENTITY</name>
        <initializer>		<ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> | \
				<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da407cf5ae358d3c00dd7e47dfaad3ec6e" kindref="member">BT_LE_ADV_OPT_USE_IDENTITY</ref>, \
				<ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
				<ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable extended advertising with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da407cf5ae358d3c00dd7e47dfaad3ec6e" kindref="member">BT_LE_ADV_OPT_USE_IDENTITY</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="729" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga0e911d3aafdd0c926590b3272a3da564" prot="public" static="no">
        <name>BT_LE_EXT_ADV_CODED_NCONN</name>
        <initializer>						  <ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> | \
						  <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dad01c4962a350d3218ba0cabd713708b1" kindref="member">BT_LE_ADV_OPT_CODED</ref>, \
						  <ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
						  <ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, \
						  NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable extended advertising on coded PHY with private address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="736" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga8c6027f7c0888c577f9b61a65104be05" prot="public" static="no">
        <name>BT_LE_EXT_ADV_CODED_NCONN_NAME</name>
        <initializer>		<ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> | <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dad01c4962a350d3218ba0cabd713708b1" kindref="member">BT_LE_ADV_OPT_CODED</ref> | \
				<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref>, \
				<ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
				<ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable extended advertising on coded PHY with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da2dbc9ec77d6de134d96a7bd3d9256398" kindref="member">BT_LE_ADV_OPT_USE_NAME</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="745" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gac67c52693154ebbeedbb31e100513812" prot="public" static="no">
        <name>BT_LE_EXT_ADV_CODED_NCONN_IDENTITY</name>
        <initializer>		<ref refid="group__bt__gap_1ga9557269dd36b624b49e76c511c3a0cc1" kindref="member">BT_LE_ADV_PARAM</ref>(<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dae33ae9d8e43cce82e47fa73999d415ab" kindref="member">BT_LE_ADV_OPT_EXT_ADV</ref> | <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89dad01c4962a350d3218ba0cabd713708b1" kindref="member">BT_LE_ADV_OPT_CODED</ref> | \
				<ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da407cf5ae358d3c00dd7e47dfaad3ec6e" kindref="member">BT_LE_ADV_OPT_USE_IDENTITY</ref>, \
				<ref refid="group__bt__gap__defines_1ga9573e6bcdae3aae9d51c0becbbd7ac60" kindref="member">BT_GAP_ADV_FAST_INT_MIN_2</ref>, \
				<ref refid="group__bt__gap__defines_1gaebc3ce60836522d883f664227a3ffcfb" kindref="member">BT_GAP_ADV_FAST_INT_MAX_2</ref>, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-connectable extended advertising on coded PHY with <ref refid="group__bt__gap_1gga2970898e8a43ce21e1cc510d49f1b89da407cf5ae358d3c00dd7e47dfaad3ec6e" kindref="member">BT_LE_ADV_OPT_USE_IDENTITY</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="754" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gaf0d4c5b05deb5466a0e29c153263b489" prot="public" static="no">
        <name>BT_LE_EXT_ADV_START_PARAM_INIT</name>
        <param><defname>_timeout</defname></param>
        <param><defname>_n_evts</defname></param>
        <initializer>{ \
	.<ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref> = (_timeout), \
	.num_events = (_n_evts), \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to initialize extended advertising start parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertiser timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_n_evts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of advertising events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="766" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga9b2cefbcb0a85116cadb68f6d80c6429" prot="public" static="no">
        <name>BT_LE_EXT_ADV_START_PARAM</name>
        <param><defname>_timeout</defname></param>
        <param><defname>_n_evts</defname></param>
        <initializer>	((struct <ref refid="structbt__le__ext__adv__start__param" kindref="compound">bt_le_ext_adv_start_param</ref>[]) { \
		<ref refid="group__bt__gap_1gaf0d4c5b05deb5466a0e29c153263b489" kindref="member">BT_LE_EXT_ADV_START_PARAM_INIT</ref>((_timeout), (_n_evts)) \
	})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare extended advertising start parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Advertiser timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_n_evts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of advertising events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="778" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga8c83a6f322a479bc24a576a7f091312e" prot="public" static="no">
        <name>BT_LE_EXT_ADV_START_DEFAULT</name>
        <initializer><ref refid="group__bt__gap_1ga9b2cefbcb0a85116cadb68f6d80c6429" kindref="member">BT_LE_EXT_ADV_START_PARAM</ref>(0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="783" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga880567278a81098ae55f52f624c61041" prot="public" static="no">
        <name>BT_LE_PER_ADV_PARAM_INIT</name>
        <param><defname>_int_min</defname></param>
        <param><defname>_int_max</defname></param>
        <param><defname>_options</defname></param>
        <initializer>{ \
	.interval_min = (_int_min), \
	.interval_max = (_int_max), \
	.options = (_options), \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare periodic advertising parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_int_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum periodic advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_int_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum periodic advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic advertising properties bitfield. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="792" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gaf46e54f8fcda7b65b659685bb225d243" prot="public" static="no">
        <name>BT_LE_PER_ADV_PARAM</name>
        <param><defname>_int_min</defname></param>
        <param><defname>_int_max</defname></param>
        <param><defname>_options</defname></param>
        <initializer>	((struct <ref refid="structbt__le__per__adv__param" kindref="compound">bt_le_per_adv_param</ref>[]) { \
		<ref refid="group__bt__gap_1ga880567278a81098ae55f52f624c61041" kindref="member">BT_LE_PER_ADV_PARAM_INIT</ref>(_int_min, _int_max, _options) \
	})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare periodic advertising parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_int_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum periodic advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_int_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum periodic advertising interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Periodic advertising properties bitfield. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="806" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga8f6a00faaaab2a91ac943c71ed041ac1" prot="public" static="no">
        <name>BT_LE_PER_ADV_DEFAULT</name>
        <initializer>						  <ref refid="group__bt__gap_1gaf46e54f8fcda7b65b659685bb225d243" kindref="member">BT_LE_PER_ADV_PARAM</ref>(<ref refid="group__bt__gap__defines_1gab51898ce46ee9ae468ed7ffc1d117321" kindref="member">BT_GAP_PER_ADV_SLOW_INT_MIN</ref>, \
						  <ref refid="group__bt__gap__defines_1gaa618da2a7c217527b0d962315caa1c22" kindref="member">BT_GAP_PER_ADV_SLOW_INT_MAX</ref>, \
						  <ref refid="group__bt__gap_1ggafa231099d07583c3ed0981e0bb665f55aa2c689d726eacfb18d87655b1f587518" kindref="member">BT_LE_PER_ADV_OPT_NONE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="811" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga33e84f4ccbf4d0aa2527e9fe1086e252" prot="public" static="no">
        <name>BT_LE_SCAN_OPT_FILTER_WHITELIST</name>
        <initializer>__DEPRECATED_MACRO <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77daf7a25b6790b138b2b88de3c7d81cb0ae" kindref="member">BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1629" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="1629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gac9f372ca16afb1c2f0e100c5b1b94cd5" prot="public" static="no">
        <name>BT_LE_SCAN_PARAM_INIT</name>
        <param><defname>_type</defname></param>
        <param><defname>_options</defname></param>
        <param><defname>_interval</defname></param>
        <param><defname>_window</defname></param>
        <initializer>{ \
	.type = (_type), \
	.options = (_options), \
	.interval = (_interval), \
	.window = (_window), \
	.<ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref> = 0, \
	.interval_coded = 0, \
	.window_coded = 0, \
}</initializer>
        <briefdescription>
<para>Initialize scan parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan Type, BT_LE_SCAN_TYPE_ACTIVE or BT_LE_SCAN_TYPE_PASSIVE. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan Interval (N * 0.625 ms) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_window</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan Window (N * 0.625 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1742" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="1742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga57ace75133343ba8de7fa965f452ee3d" prot="public" static="no">
        <name>BT_LE_SCAN_PARAM</name>
        <param><defname>_type</defname></param>
        <param><defname>_options</defname></param>
        <param><defname>_interval</defname></param>
        <param><defname>_window</defname></param>
        <initializer>	((struct <ref refid="structbt__le__scan__param" kindref="compound">bt_le_scan_param</ref>[]) { \
		<ref refid="group__bt__gap_1gac9f372ca16afb1c2f0e100c5b1b94cd5" kindref="member">BT_LE_SCAN_PARAM_INIT</ref>(_type, _options, _interval, _window) \
	 })</initializer>
        <briefdescription>
<para>Helper to declare scan parameters inline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan Type, BT_LE_SCAN_TYPE_ACTIVE or BT_LE_SCAN_TYPE_PASSIVE. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan Interval (N * 0.625 ms) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_window</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan Window (N * 0.625 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1762" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="1762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1gac137ea4ce32697582a337116ffa41da5" prot="public" static="no">
        <name>BT_LE_SCAN_ACTIVE</name>
        <initializer>					   <ref refid="group__bt__gap_1ga57ace75133343ba8de7fa965f452ee3d" kindref="member">BT_LE_SCAN_PARAM</ref>(<ref refid="group__bt__gap_1gga1fb9092bcdeada2d206bdc74afbbe122af202213813092ba298cd046aed687f22" kindref="member">BT_LE_SCAN_TYPE_ACTIVE</ref>, \
					   <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da0af65ac48e068f7e6f1815cb151d4394" kindref="member">BT_LE_SCAN_OPT_FILTER_DUPLICATE</ref>, \
					   <ref refid="group__bt__gap__defines_1ga747caa714962215453a966a323e77cf8" kindref="member">BT_GAP_SCAN_FAST_INTERVAL</ref>, \
					   <ref refid="group__bt__gap__defines_1ga100e1c20813630848a1a80390e8a06a0" kindref="member">BT_GAP_SCAN_FAST_WINDOW</ref>)</initializer>
        <briefdescription>
<para>Helper macro to enable active scanning to discover new devices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1770" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="1770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga8ceaef6f0fbf4fe2d76d47e8f59aeb11" prot="public" static="no">
        <name>BT_LE_SCAN_PASSIVE</name>
        <initializer>					    <ref refid="group__bt__gap_1ga57ace75133343ba8de7fa965f452ee3d" kindref="member">BT_LE_SCAN_PARAM</ref>(<ref refid="group__bt__gap_1gga1fb9092bcdeada2d206bdc74afbbe122a731c507ed451eb6f8f8372849185b006" kindref="member">BT_LE_SCAN_TYPE_PASSIVE</ref>, \
					    <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da0af65ac48e068f7e6f1815cb151d4394" kindref="member">BT_LE_SCAN_OPT_FILTER_DUPLICATE</ref>, \
					    <ref refid="group__bt__gap__defines_1ga747caa714962215453a966a323e77cf8" kindref="member">BT_GAP_SCAN_FAST_INTERVAL</ref>, \
					    <ref refid="group__bt__gap__defines_1ga100e1c20813630848a1a80390e8a06a0" kindref="member">BT_GAP_SCAN_FAST_WINDOW</ref>)</initializer>
        <briefdescription>
<para>Helper macro to enable passive scanning to discover new devices. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro should be used if information required for device identification (e.g., UUID) are known to be placed in Advertising Data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1781" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="1781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga06380c4ae6289c704a143b9d192bc35f" prot="public" static="no">
        <name>BT_LE_SCAN_CODED_ACTIVE</name>
        <initializer>		<ref refid="group__bt__gap_1ga57ace75133343ba8de7fa965f452ee3d" kindref="member">BT_LE_SCAN_PARAM</ref>(<ref refid="group__bt__gap_1gga1fb9092bcdeada2d206bdc74afbbe122af202213813092ba298cd046aed687f22" kindref="member">BT_LE_SCAN_TYPE_ACTIVE</ref>, \
				 <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da16f171c649dd090333e9822a92b4bbdb" kindref="member">BT_LE_SCAN_OPT_CODED</ref> | \
				 <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da0af65ac48e068f7e6f1815cb151d4394" kindref="member">BT_LE_SCAN_OPT_FILTER_DUPLICATE</ref>, \
				 <ref refid="group__bt__gap__defines_1ga747caa714962215453a966a323e77cf8" kindref="member">BT_GAP_SCAN_FAST_INTERVAL</ref>, \
				 <ref refid="group__bt__gap__defines_1ga100e1c20813630848a1a80390e8a06a0" kindref="member">BT_GAP_SCAN_FAST_WINDOW</ref>)</initializer>
        <briefdescription>
<para>Helper macro to enable active scanning to discover new devices. Include scanning on Coded PHY in addition to 1M PHY. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1790" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="1790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__gap_1ga1e5a4589304babc6b0d49019ebcff6b0" prot="public" static="no">
        <name>BT_LE_SCAN_CODED_PASSIVE</name>
        <initializer>		<ref refid="group__bt__gap_1ga57ace75133343ba8de7fa965f452ee3d" kindref="member">BT_LE_SCAN_PARAM</ref>(<ref refid="group__bt__gap_1gga1fb9092bcdeada2d206bdc74afbbe122a731c507ed451eb6f8f8372849185b006" kindref="member">BT_LE_SCAN_TYPE_PASSIVE</ref>, \
				 <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da16f171c649dd090333e9822a92b4bbdb" kindref="member">BT_LE_SCAN_OPT_CODED</ref> | \
				 <ref refid="group__bt__gap_1gga157d5577a5b2f5986037d0d09c7dc77da0af65ac48e068f7e6f1815cb151d4394" kindref="member">BT_LE_SCAN_OPT_FILTER_DUPLICATE</ref>, \
				 <ref refid="group__bt__gap__defines_1ga747caa714962215453a966a323e77cf8" kindref="member">BT_GAP_SCAN_FAST_INTERVAL</ref>, \
				 <ref refid="group__bt__gap__defines_1ga100e1c20813630848a1a80390e8a06a0" kindref="member">BT_GAP_SCAN_FAST_WINDOW</ref>)</initializer>
        <briefdescription>
<para>Helper macro to enable passive scanning to discover new devices. Include scanning on Coded PHY in addition to 1M PHY. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro should be used if information required for device identification (e.g., UUID) are known to be placed in Advertising Data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/bluetooth.h" line="1804" column="9" bodyfile="include/bluetooth/bluetooth.h" bodystart="1804" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic Access Profile. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
