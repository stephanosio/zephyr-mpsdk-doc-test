<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structethernet__context" kind="struct" language="C++" prot="public">
    <compoundname>ethernet_context</compoundname>
    <includes refid="ethernet_8h" local="no">ethernet.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structethernet__context_1a800f7b276341771addd3f1f1ffb5329b" prot="public" static="no" mutable="no">
        <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref></type>
        <definition>atomic_t ethernet_context::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags representing ethernet state, which are accessed from multiple threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="519" column="10" bodyfile="include/net/ethernet.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structethernet__context_1a4c152bdc054a3e86a5baedcf4e8eed1d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work" kindref="compound">k_work</ref></type>
        <definition>struct k_work ethernet_context::carrier_work</definition>
        <argsstring></argsstring>
        <name>carrier_work</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Carrier ON/OFF handler worker. This is used to create network interface UP/DOWN event when ethernet L2 driver notices carrier ON/OFF situation. We must not create another network management event from inside management handler thus we use worker thread to trigger the UP/DOWN event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="542" column="13" bodyfile="include/net/ethernet.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structethernet__context_1a2358d48d02192220f2621dd96e353f37" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if* ethernet_context::iface</definition>
        <argsstring></argsstring>
        <name>iface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network interface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="545" column="13" bodyfile="include/net/ethernet.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structethernet__context_1a49f0358828531ab6e3cc398ebaf6f6f9" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref></type>
        <definition>enum net_l2_flags ethernet_context::ethernet_l2_flags</definition>
        <argsstring></argsstring>
        <name>ethernet_l2_flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This tells what L2 features does ethernet support. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="554" column="18" bodyfile="include/net/ethernet.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structethernet__context_1a483abbb2e14fea59b01d6ee74466c702" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool ethernet_context::is_net_carrier_up</definition>
        <argsstring></argsstring>
        <name>is_net_carrier_up</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is network carrier up </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="589" column="6" bodyfile="include/net/ethernet.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structethernet__context_1ab7ea3afc9bd0ac19893d4a7edf2be057" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool ethernet_context::is_init</definition>
        <argsstring></argsstring>
        <name>is_init</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is this context already initialized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ethernet.h" line="592" column="6" bodyfile="include/net/ethernet.h" bodystart="592" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Ethernet L2 context that is needed for VLAN </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="9">
        <label>__thread_entry</label>
      </node>
      <node id="7">
        <label>_callee_saved</label>
      </node>
      <node id="11">
        <label>_mem_domain_info</label>
      </node>
      <node id="17">
        <label>_slist</label>
      </node>
      <node id="3">
        <label>_snode</label>
      </node>
      <node id="16">
        <label>_thread_arch</label>
      </node>
      <node id="6">
        <label>_thread_base</label>
      </node>
      <node id="10">
        <label>_thread_stack_info</label>
      </node>
      <node id="8">
        <label>_wait_q_t</label>
      </node>
      <node id="20">
        <label>device</label>
        <link refid="structdevice"/>
        <childnode refid="21" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>device_state</label>
        <link refid="structdevice__state"/>
      </node>
      <node id="1">
        <label>ethernet_context</label>
        <link refid="structethernet__context"/>
        <childnode refid="2" relation="usage">
          <edgelabel>carrier_work</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>iface</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="14" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="5">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="6" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="3" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="5" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>net_if</label>
        <link refid="structnet__if"/>
        <childnode refid="19" relation="usage">
          <edgelabel>if_dev</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>net_if_config</label>
        <link refid="structnet__if__config"/>
        <childnode refid="25" relation="usage">
          <edgelabel>ip</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>net_if_dev</label>
        <link refid="structnet__if__dev"/>
        <childnode refid="20" relation="usage">
          <edgelabel>dev</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>l2</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>link_addr</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>net_if_ip</label>
        <link refid="structnet__if__ip"/>
      </node>
      <node id="22">
        <label>net_l2</label>
        <link refid="structnet__l2"/>
      </node>
      <node id="23">
        <label>net_linkaddr</label>
        <link refid="structnet__linkaddr"/>
      </node>
      <node id="14">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="12">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/net/ethernet.h" line="515" column="1" bodyfile="include/net/ethernet.h" bodystart="515" bodyend="593"/>
    <listofallmembers>
      <member refid="structethernet__context_1a4c152bdc054a3e86a5baedcf4e8eed1d" prot="public" virt="non-virtual"><scope>ethernet_context</scope><name>carrier_work</name></member>
      <member refid="structethernet__context_1a49f0358828531ab6e3cc398ebaf6f6f9" prot="public" virt="non-virtual"><scope>ethernet_context</scope><name>ethernet_l2_flags</name></member>
      <member refid="structethernet__context_1a800f7b276341771addd3f1f1ffb5329b" prot="public" virt="non-virtual"><scope>ethernet_context</scope><name>flags</name></member>
      <member refid="structethernet__context_1a2358d48d02192220f2621dd96e353f37" prot="public" virt="non-virtual"><scope>ethernet_context</scope><name>iface</name></member>
      <member refid="structethernet__context_1ab7ea3afc9bd0ac19893d4a7edf2be057" prot="public" virt="non-virtual"><scope>ethernet_context</scope><name>is_init</name></member>
      <member refid="structethernet__context_1a483abbb2e14fea59b01d6ee74466c702" prot="public" virt="non-virtual"><scope>ethernet_context</scope><name>is_net_carrier_up</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
