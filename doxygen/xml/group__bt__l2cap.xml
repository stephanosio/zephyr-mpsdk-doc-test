<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__l2cap" kind="group">
    <compoundname>bt_l2cap</compoundname>
    <title>L2CAP</title>
    <innerclass refid="structbt__l2cap__chan" prot="public">bt_l2cap_chan</innerclass>
    <innerclass refid="structbt__l2cap__le__endpoint" prot="public">bt_l2cap_le_endpoint</innerclass>
    <innerclass refid="structbt__l2cap__le__chan" prot="public">bt_l2cap_le_chan</innerclass>
    <innerclass refid="structbt__l2cap__br__endpoint" prot="public">bt_l2cap_br_endpoint</innerclass>
    <innerclass refid="structbt__l2cap__br__chan" prot="public">bt_l2cap_br_chan</innerclass>
    <innerclass refid="structbt__l2cap__chan__ops" prot="public">bt_l2cap_chan_ops</innerclass>
    <innerclass refid="structbt__l2cap__server" prot="public">bt_l2cap_server</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__bt__l2cap_1ga642436bdf29f79495763b10231c6b25b" prot="public" static="no" strong="no">
        <type></type>
        <name>bt_l2cap_chan_state</name>
        <enumvalue id="group__bt__l2cap_1gga642436bdf29f79495763b10231c6b25ba1dc4c69537acf13a8c00dfca5acfb83c" prot="public">
          <name>BT_L2CAP_DISCONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel disconnected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__l2cap_1gga642436bdf29f79495763b10231c6b25bac2a46c646c8739e8b129b89698eae7cd" prot="public">
          <name>BT_L2CAP_CONNECTING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel in connecting state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__l2cap_1gga642436bdf29f79495763b10231c6b25ba3167a1b491cb9b97ebe51f66c209f064" prot="public">
          <name>BT_L2CAP_CONFIG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel in config state, BR/EDR specific </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__l2cap_1gga642436bdf29f79495763b10231c6b25ba3adc86576ca2db5a7f74030d11699b68" prot="public">
          <name>BT_L2CAP_CONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel ready for upper layer traffic on it </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__l2cap_1gga642436bdf29f79495763b10231c6b25ba7a24502cfb06df715f58ad2e088cb7e8" prot="public">
          <name>BT_L2CAP_DISCONNECTING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel in disconnecting state </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Life-span states of L2CAP CoC channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Used only by internal APIs dealing with setting channel to proper state depending on operational context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="97" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="97" bodyend="109"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__l2cap_1ga371a747c8939a1156111dc03c774015c" prot="public" static="no" strong="no">
        <type></type>
        <name>bt_l2cap_chan_status</name>
        <enumvalue id="group__bt__l2cap_1gga371a747c8939a1156111dc03c774015ca89aea3cf3d9a004ffd53eae602666fd5" prot="public">
          <name>BT_L2CAP_STATUS_OUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel output status </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__l2cap_1gga371a747c8939a1156111dc03c774015ca82d4e553f4298d00c27045949663208e" prot="public">
          <name>BT_L2CAP_STATUS_SHUTDOWN</name>
          <briefdescription>
<para>Channel shutdown status. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>   Once this status is notified it means the channel will no longer be
   able to transmit or receive data.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__l2cap_1gga371a747c8939a1156111dc03c774015caea6cc7cae26d69926e7def91242650af" prot="public">
          <name>BT_L2CAP_STATUS_ENCRYPT_PENDING</name>
          <briefdescription>
<para>Channel encryption pending status. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__l2cap_1gga371a747c8939a1156111dc03c774015ca91bd77f9889b59ba5b0005a51016ba2c" prot="public">
          <name>BT_L2CAP_NUM_STATUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status of L2CAP channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="112" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="112" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__l2cap_1gafe930d6bed8baed9f982f791b5d2172f" prot="public" static="no">
        <type>void(*</type>
        <definition>bt_l2cap_chan_destroy_t</definition>
        <argsstring>)(struct bt_l2cap_chan *chan)</argsstring>
        <name>bt_l2cap_chan_destroy_t</name>
        <briefdescription>
<para>Channel destroy callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="90" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__l2cap_1ga5a80330e52ea0fa4ee3266094570bb16" prot="public" static="no">
        <type>enum <ref refid="group__bt__l2cap_1ga642436bdf29f79495763b10231c6b25b" kindref="member">bt_l2cap_chan_state</ref></type>
        <definition>typedef enum bt_l2cap_chan_state bt_l2cap_chan_state_t</definition>
        <argsstring></argsstring>
        <name>bt_l2cap_chan_state_t</name>
        <briefdescription>
<para>Life-span states of L2CAP CoC channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Used only by internal APIs dealing with setting channel to proper state depending on operational context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="109" column="24"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__l2cap_1ga3a1a88a8e87aefe9bea1dd01aa193b42" prot="public" static="no">
        <type>enum <ref refid="group__bt__l2cap_1ga371a747c8939a1156111dc03c774015c" kindref="member">bt_l2cap_chan_status</ref></type>
        <definition>typedef enum bt_l2cap_chan_status bt_l2cap_chan_status_t</definition>
        <argsstring></argsstring>
        <name>bt_l2cap_chan_status_t</name>
        <briefdescription>
<para>Status of L2CAP channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="128" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__l2cap_1ga1a5e8c81c086872d7fb8da5329f982c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_server_register</definition>
        <argsstring>(struct bt_l2cap_server *server)</argsstring>
        <name>bt_l2cap_server_register</name>
        <param>
          <type>struct <ref refid="structbt__l2cap__server" kindref="compound">bt_l2cap_server</ref> *</type>
          <declname>server</declname>
        </param>
        <briefdescription>
<para>Register L2CAP server. </para>
        </briefdescription>
        <detaileddescription>
<para>Register L2CAP server for a PSM, each new connection is authorized using the <ref refid="posix_2sys_2socket_8h_1a33e6ea428ff537ed7a4763ce91b7d9bb" kindref="member">accept()</ref> callback which in case of success shall allocate the channel structure to be used by the new connection.</para>
<para>For fixed, SIG-assigned PSMs (in the range 0x0001-0x007f) the PSM should be assigned to server-&gt;psm before calling this API. For dynamic PSMs (in the range 0x0080-0x00ff) server-&gt;psm may be pre-set to a given value (this is however not recommended) or be left as 0, in which case upon return a newly allocated value will have been assigned to it. For dynamically allocated values the expectation is that it&apos;s exposed through a GATT service, and that&apos;s how L2CAP clients discover how to connect to the server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>Server structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="402" column="5" declfile="include/bluetooth/l2cap.h" declline="402" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__l2cap_1ga5b0ae2abd714f46e6bb2394bce33e613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_br_server_register</definition>
        <argsstring>(struct bt_l2cap_server *server)</argsstring>
        <name>bt_l2cap_br_server_register</name>
        <param>
          <type>struct <ref refid="structbt__l2cap__server" kindref="compound">bt_l2cap_server</ref> *</type>
          <declname>server</declname>
        </param>
        <briefdescription>
<para>Register L2CAP server on BR/EDR oriented connection. </para>
        </briefdescription>
        <detaileddescription>
<para>Register L2CAP server for a PSM, each new connection is authorized using the <ref refid="posix_2sys_2socket_8h_1a33e6ea428ff537ed7a4763ce91b7d9bb" kindref="member">accept()</ref> callback which in case of success shall allocate the channel structure to be used by the new connection.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>Server structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="414" column="5" declfile="include/bluetooth/l2cap.h" declline="414" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__l2cap_1gaebc2d157fb5f013722e9c332b3d81804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_ecred_chan_connect</definition>
        <argsstring>(struct bt_conn *conn, struct bt_l2cap_chan **chans, uint16_t psm)</argsstring>
        <name>bt_l2cap_ecred_chan_connect</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> **</type>
          <declname>chans</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>psm</declname>
        </param>
        <briefdescription>
<para>Connect Enhanced Credit Based L2CAP channels. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect up to 5 L2CAP channels by PSM, once the connection is completed each channel connected() callback will be called. If the connection is rejected disconnected() callback is called instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chans</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of channel objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psm</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel PSM to connect to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="428" column="5" declfile="include/bluetooth/l2cap.h" declline="428" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__l2cap_1ga05d28a51d9fba08d609287957ea4c7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_ecred_chan_reconfigure</definition>
        <argsstring>(struct bt_l2cap_chan **chans, uint16_t mtu)</argsstring>
        <name>bt_l2cap_ecred_chan_reconfigure</name>
        <param>
          <type>struct <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> **</type>
          <declname>chans</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mtu</declname>
        </param>
        <briefdescription>
<para>Reconfigure Enhanced Credit Based L2CAP channels. </para>
        </briefdescription>
        <detaileddescription>
<para>Reconfigure up to 5 L2CAP channels. Channels must be from the same bt_conn. Once reconfiguration is completed each channel reconfigured() callback will be called. MTU cannot be decreased on any of provided channels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chans</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of channel objects. Null-terminated. Elements after the first 5 are silently ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel MTU to reconfigure to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="443" column="5" declfile="include/bluetooth/l2cap.h" declline="443" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__l2cap_1ga3c3cfb4b151c808c0a3d2562a5c26a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_chan_connect</definition>
        <argsstring>(struct bt_conn *conn, struct bt_l2cap_chan *chan, uint16_t psm)</argsstring>
        <name>bt_l2cap_chan_connect</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> *</type>
          <declname>chan</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>psm</declname>
        </param>
        <briefdescription>
<para>Connect L2CAP channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect L2CAP channel by PSM, once the connection is completed channel connected() callback will be called. If the connection is rejected disconnected() callback is called instead. Channel object passed (over an address of it) as second parameter shouldn&apos;t be instantiated in application as standalone. Instead of, application should create transport dedicated L2CAP objects, i.e. type of <ref refid="structbt__l2cap__le__chan" kindref="compound">bt_l2cap_le_chan</ref> for LE and/or type of <ref refid="structbt__l2cap__br__chan" kindref="compound">bt_l2cap_br_chan</ref> for BR/EDR. Then pass to this API the location (address) of <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> type object which is a member of both transport dedicated objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psm</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel PSM to connect to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="463" column="5" declfile="include/bluetooth/l2cap.h" declline="463" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__l2cap_1ga7165f82a05e3a19d6b2baf0ba292a3fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_chan_disconnect</definition>
        <argsstring>(struct bt_l2cap_chan *chan)</argsstring>
        <name>bt_l2cap_chan_disconnect</name>
        <param>
          <type>struct <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> *</type>
          <declname>chan</declname>
        </param>
        <briefdescription>
<para>Disconnect L2CAP channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Disconnect L2CAP channel, if the connection is pending it will be canceled and as a result the channel disconnected() callback is called. Regarding to input parameter, to get details see reference description to <ref refid="group__bt__l2cap_1ga3c3cfb4b151c808c0a3d2562a5c26a20" kindref="member">bt_l2cap_chan_connect()</ref> API above.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="477" column="5" declfile="include/bluetooth/l2cap.h" declline="477" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__l2cap_1ga97b7909749667f910f83e6fcb54495c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_chan_send</definition>
        <argsstring>(struct bt_l2cap_chan *chan, struct net_buf *buf)</argsstring>
        <name>bt_l2cap_chan_send</name>
        <param>
          <type>struct <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> *</type>
          <declname>chan</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Send data to L2CAP channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Send data from buffer to the channel. If credits are not available, buf will be queued and sent as and when credits are received from peer. Regarding to first input parameter, to get details see reference description to <ref refid="group__bt__l2cap_1ga3c3cfb4b151c808c0a3d2562a5c26a20" kindref="member">bt_l2cap_chan_connect()</ref> API above.</para>
<para>When sending L2CAP data over an BR/EDR connection the application is sending L2CAP PDUs. The application is required to have reserved <ref refid="group__bt__l2cap_1ga281232ec622c626c0be2be23bae18d8d" kindref="member">BT_L2CAP_CHAN_SEND_RESERVE</ref> bytes in the buffer before sending. The application should use the <ref refid="group__bt__l2cap_1gab95b119de4757588074e367a90a7136a" kindref="member">BT_L2CAP_BUF_SIZE()</ref> helper to correctly size the buffers for the for the outgoing buffer pool.</para>
<para>When sending L2CAP data over an LE connection the applicatios is sending L2CAP SDUs. The application can optionally reserve <ref refid="group__bt__l2cap_1gabdb3983d3862f6654a1653dd45c4157d" kindref="member">BT_L2CAP_SDU_CHAN_SEND_RESERVE</ref> bytes in the buffer before sending. By reserving bytes in the buffer the stack can use this buffer as a segment directly, otherwise it will have to allocate a new segment for the first segment. If the application is reserving the bytes it should use the <ref refid="group__bt__l2cap_1gab95b119de4757588074e367a90a7136a" kindref="member">BT_L2CAP_BUF_SIZE()</ref> helper to correctly size the buffers for the for the outgoing buffer pool. When segmenting an L2CAP SDU into L2CAP PDUs the stack will first attempt to allocate buffers from the original buffer pool of the L2CAP SDU before using the stacks own buffer pool.</para>
<para><simplesect kind="note"><para>Buffer ownership is transferred to the stack in case of success, in case of an error the caller retains the ownership of the buffer.</para>
</simplesect>
<simplesect kind="return"><para>Bytes sent in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="510" column="5" declfile="include/bluetooth/l2cap.h" declline="510" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__l2cap_1gad53f5fc31314121ff84e740879eae3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_l2cap_chan_recv_complete</definition>
        <argsstring>(struct bt_l2cap_chan *chan, struct net_buf *buf)</argsstring>
        <name>bt_l2cap_chan_recv_complete</name>
        <param>
          <type>struct <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> *</type>
          <declname>chan</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Complete receiving L2CAP channel data. </para>
        </briefdescription>
        <detaileddescription>
<para>Complete the reception of incoming data. This shall only be called if the channel recv callback has returned -EINPROGRESS to process some incoming data. The buffer shall contain the original user_data as that is used for storing the credits/segments used by the packet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="524" column="5" declfile="include/bluetooth/l2cap.h" declline="524" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__l2cap_1gab33b91052026973180356640b7310659" prot="public" static="no">
        <name>BT_L2CAP_HDR_SIZE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>L2CAP PDU header size, used for buffer size calculations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="30" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1ga45ef5aee4ed4dd705cad6d234562c660" prot="public" static="no">
        <name>BT_L2CAP_TX_MTU</name>
        <initializer>(CONFIG_BT_L2CAP_TX_MTU)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum Transmission Unit (MTU) for an outgoing L2CAP PDU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="33" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1ga6e458a1758e5012755f3b97f8348c966" prot="public" static="no">
        <name>BT_L2CAP_RX_MTU</name>
        <initializer>(CONFIG_BT_BUF_ACL_RX_SIZE - <ref refid="group__bt__l2cap_1gab33b91052026973180356640b7310659" kindref="member">BT_L2CAP_HDR_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum Transmission Unit (MTU) for an incoming L2CAP PDU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="36" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1gab95b119de4757588074e367a90a7136a" prot="public" static="no">
        <name>BT_L2CAP_BUF_SIZE</name>
        <param><defname>mtu</defname></param>
        <initializer><ref refid="group__bt__buf_1ga8f570211d5e391be63bd46c189eac637" kindref="member">BT_BUF_ACL_SIZE</ref>(<ref refid="group__bt__l2cap_1gab33b91052026973180356640b7310659" kindref="member">BT_L2CAP_HDR_SIZE</ref> + (mtu))</initializer>
        <briefdescription>
<para>Helper to calculate needed buffer size for L2CAP PDUs. Useful for creating buffer pools. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Needed L2CAP PDU MTU.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Needed buffer size to match the requested L2CAP PDU MTU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="45" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1ga967c4c3f9b9beba1d0ce8516c5d1c659" prot="public" static="no">
        <name>BT_L2CAP_SDU_HDR_SIZE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>L2CAP SDU header size, used for buffer size calculations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="48" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1gaa6fcd053d918db7005bc058501c2a598" prot="public" static="no">
        <name>BT_L2CAP_SDU_TX_MTU</name>
        <initializer>(<ref refid="group__bt__l2cap_1ga45ef5aee4ed4dd705cad6d234562c660" kindref="member">BT_L2CAP_TX_MTU</ref> - <ref refid="group__bt__l2cap_1ga967c4c3f9b9beba1d0ce8516c5d1c659" kindref="member">BT_L2CAP_SDU_HDR_SIZE</ref>)</initializer>
        <briefdescription>
<para>Maximum Transmission Unit for an unsegmented outgoing L2CAP SDU. </para>
        </briefdescription>
        <detaileddescription>
<para>The Maximum Transmission Unit for an outgoing L2CAP SDU when sent without segmentation, i.e a single L2CAP SDU will fit inside a single L2CAP PDU.</para>
<para>The MTU for outgoing L2CAP SDUs with segmentation is defined by the size of the application buffer pool. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="58" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1ga13b93a8f09157fbcf739fa4949840efe" prot="public" static="no">
        <name>BT_L2CAP_SDU_RX_MTU</name>
        <initializer>(<ref refid="group__bt__l2cap_1ga6e458a1758e5012755f3b97f8348c966" kindref="member">BT_L2CAP_RX_MTU</ref> - <ref refid="group__bt__l2cap_1ga967c4c3f9b9beba1d0ce8516c5d1c659" kindref="member">BT_L2CAP_SDU_HDR_SIZE</ref>)</initializer>
        <briefdescription>
<para>Maximum Transmission Unit for an unsegmented incoming L2CAP SDU. </para>
        </briefdescription>
        <detaileddescription>
<para>The Maximum Transmission Unit for an incoming L2CAP SDU when sent without segmentation, i.e a single L2CAP SDU will fit inside a single L2CAP PDU.</para>
<para>The MTU for incoming L2CAP SDUs with segmentation is defined by the size of the application buffer pool. The application will have to define an alloc_buf callback for the channel in order to support receiving segmented L2CAP SDUs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="70" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1ga1c76618c32bbe86b18fd8663760fb220" prot="public" static="no">
        <name>BT_L2CAP_SDU_BUF_SIZE</name>
        <param><defname>mtu</defname></param>
        <initializer><ref refid="group__bt__l2cap_1gab95b119de4757588074e367a90a7136a" kindref="member">BT_L2CAP_BUF_SIZE</ref>(<ref refid="group__bt__l2cap_1ga967c4c3f9b9beba1d0ce8516c5d1c659" kindref="member">BT_L2CAP_SDU_HDR_SIZE</ref> + (mtu))</initializer>
        <briefdescription>
<para>Helper to calculate needed buffer size for L2CAP SDUs. Useful for creating buffer pools. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Required BT_L2CAP_*_SDU.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Needed buffer size to match the requested L2CAP SDU MTU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="81" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1gac936761e661a5c65d65ee9b4c185679b" prot="public" static="no">
        <name>BT_L2CAP_LE_CHAN</name>
        <param><defname>_ch</defname></param>
        <initializer><ref refid="group__sys-util_1gac5bc561d1bfd1bf68877fe577779bd2f" kindref="member">CONTAINER_OF</ref>(_ch, struct <ref refid="structbt__l2cap__le__chan" kindref="compound">bt_l2cap_le_chan</ref>, chan)</initializer>
        <briefdescription>
<para>Helper macro getting container object of type <ref refid="structbt__l2cap__le__chan" kindref="compound">bt_l2cap_le_chan</ref> address having the same container chan member address as object in question. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of object of <ref refid="structbt__l2cap__chan" kindref="compound">bt_l2cap_chan</ref> type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of in memory <ref refid="structbt__l2cap__le__chan" kindref="compound">bt_l2cap_le_chan</ref> object type containing the address of in question object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="209" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1ga281232ec622c626c0be2be23bae18d8d" prot="public" static="no">
        <name>BT_L2CAP_CHAN_SEND_RESERVE</name>
        <initializer>(<ref refid="group__bt__l2cap_1gab95b119de4757588074e367a90a7136a" kindref="member">BT_L2CAP_BUF_SIZE</ref>(0))</initializer>
        <briefdescription>
<para>Headroom needed for outgoing L2CAP PDUs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="338" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__l2cap_1gabdb3983d3862f6654a1653dd45c4157d" prot="public" static="no">
        <name>BT_L2CAP_SDU_CHAN_SEND_RESERVE</name>
        <initializer>(<ref refid="group__bt__l2cap_1ga1c76618c32bbe86b18fd8663760fb220" kindref="member">BT_L2CAP_SDU_BUF_SIZE</ref>(0))</initializer>
        <briefdescription>
<para>Headroom needed for outgoing L2CAP SDUs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="343" column="9" bodyfile="include/bluetooth/l2cap.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>L2CAP. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
