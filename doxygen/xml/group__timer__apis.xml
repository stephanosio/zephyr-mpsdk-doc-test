<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__timer__apis" kind="group">
    <compoundname>timer_apis</compoundname>
    <title>Timer APIs</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__timer__apis_1ga37bcd42a457855a68b74570c979ababa" prot="public" static="no">
        <type>void(*</type>
        <definition>k_timer_expiry_t</definition>
        <argsstring>)(struct k_timer *timer)</argsstring>
        <name>k_timer_expiry_t</name>
        <briefdescription>
<para>Timer expiry function type. </para>
        </briefdescription>
        <detaileddescription>
<para>A timer&apos;s expiry function is executed by the system clock interrupt handler each time the timer expires. The expiry function is optional, and is only invoked if the timer has been initialized with one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1304" column="9" bodyfile="include/kernel.h" bodystart="1304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__timer__apis_1ga16fbd44c08a26c4fdeb7f542f2a03a15" prot="public" static="no">
        <type>void(*</type>
        <definition>k_timer_stop_t</definition>
        <argsstring>)(struct k_timer *timer)</argsstring>
        <name>k_timer_stop_t</name>
        <briefdescription>
<para>Timer stop function type. </para>
        </briefdescription>
        <detaileddescription>
<para>A timer&apos;s stop function is executed if the timer is stopped prematurely. The function runs in the context of call that stops the timer. As <ref refid="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" kindref="member">k_timer_stop()</ref> can be invoked from an ISR, the stop function must be callable from interrupt context (isr-ok).</para>
<para>The stop function is optional, and is only invoked if the timer has been initialized with one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1320" column="9" bodyfile="include/kernel.h" bodystart="1320" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__timer__apis_1ga318c846a740b901e5d56876a47ad7f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_init</definition>
        <argsstring>(struct k_timer *timer, k_timer_expiry_t expiry_fn, k_timer_stop_t stop_fn)</argsstring>
        <name>k_timer_init</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <param>
          <type><ref refid="group__timer__apis_1ga37bcd42a457855a68b74570c979ababa" kindref="member">k_timer_expiry_t</ref></type>
          <declname>expiry_fn</declname>
        </param>
        <param>
          <type><ref refid="group__timer__apis_1ga16fbd44c08a26c4fdeb7f542f2a03a15" kindref="member">k_timer_stop_t</ref></type>
          <declname>stop_fn</declname>
        </param>
        <briefdescription>
<para>Initialize a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a timer, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time the timer expires. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke if the timer is stopped while running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1346" column="13" declfile="include/kernel.h" declline="1346" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga3ba70e9f059ff52fd2057ab89ea7f2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_start</definition>
        <argsstring>(struct k_timer *timer, k_timeout_t duration, k_timeout_t period)</argsstring>
        <name>k_timer_start</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>duration</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Start a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine starts a timer, and resets its status to zero. The timer begins counting down using the specified duration and period values.</para>
<para>Attempting to start a timer that is already running is permitted. The timer&apos;s status is reset to zero and the timer begins counting down using the new duration and period values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial timer duration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer period. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1364" column="7" declfile="include/kernel.h" declline="1364" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga8d3e3356a10d36570e16f7920e4c8772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_stop</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_stop</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Stop a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine stops a running timer prematurely. The timer&apos;s stop function, if one exists, is invoked by the caller.</para>
<para>Attempting to stop a timer that is not running is permitted, but has no effect on the timer.</para>
<para><simplesect kind="note"><para>The stop handler has to be callable from ISRs if <emphasis>k_timer_stop</emphasis> is to be called from ISRs.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1383" column="7" declfile="include/kernel.h" declline="1383" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1gad532f4834cd4cf8be27b089e6ea347ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_timer_status_get</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_status_get</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Read timer status. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads the timer&apos;s status, which indicates the number of times it has expired since its status was last read.</para>
<para>Calling this routine resets the timer&apos;s status to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1397" column="11" declfile="include/kernel.h" declline="1397" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga81d6d95b7021e26ad4cab161318e04f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_timer_status_sync</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_status_sync</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Synchronize thread to timer expiration. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine blocks the calling thread until the timer&apos;s status is non-zero (indicating that it has expired at least once since it was last examined) or the timer is stopped. If the timer status is already non-zero, or the timer is already stopped, the caller continues without waiting.</para>
<para>Calling this routine resets the timer&apos;s status to zero.</para>
<para>This routine must not be used by interrupt handlers, since they are not allowed to block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1416" column="11" declfile="include/kernel.h" declline="1416" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga022b4cf5c8d0ee21b6a3b04fd425533f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>k_ticks_t k_timer_expires_ticks</definition>
        <argsstring>(const struct k_timer *timer)</argsstring>
        <name>k_timer_expires_ticks</name>
        <param>
          <type>const struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Get next expiration time of a timer, in system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the future system uptime reached at the next time of expiration of the timer, in units of system ticks. If the timer is not running, current system time is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Uptime of expiration, in ticks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1430" column="12" declfile="include/kernel.h" declline="1430" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga1176b36b960e786f68eaededf99a88b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref></type>
        <definition>k_ticks_t k_timer_remaining_ticks</definition>
        <argsstring>(const struct k_timer *timer)</argsstring>
        <name>k_timer_remaining_ticks</name>
        <param>
          <type>const struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Get time remaining before a timer next expires, in system ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine computes the time remaining before a running timer next expires, in units of system ticks. If the timer is not running, it returns zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1445" column="12" declfile="include/kernel.h" declline="1445" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga6c6d8b0aa59bfa0f5924e95ccf756259" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_timer_remaining_get</definition>
        <argsstring>(struct k_timer *timer)</argsstring>
        <name>k_timer_remaining_get</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Get time remaining before a timer next expires. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine computes the (approximate) time remaining before a running timer next expires. If the timer is not running, it returns zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Remaining time (in milliseconds). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1463" column="24" bodyfile="include/kernel.h" bodystart="1463" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1gadba1884961e790dd9c5d567de91cc7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_timer_user_data_set</definition>
        <argsstring>(struct k_timer *timer, void *user_data)</argsstring>
        <name>k_timer_user_data_set</name>
        <param>
          <type>struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Associate user-specific data with a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine records the <emphasis>user_data</emphasis> with the <emphasis>timer</emphasis>, to be retrieved later.</para>
<para>It can be used e.g. in a timer handler shared across multiple subsystems to retrieve data specific to the subsystem this timer is associated with.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to associate with the timer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1482" column="7" declfile="include/kernel.h" declline="1482" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__timer__apis_1ga19a7d99a01a83828efd7f0d3bf2dd358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_timer_user_data_get</definition>
        <argsstring>(const struct k_timer *timer)</argsstring>
        <name>k_timer_user_data_get</name>
        <param>
          <type>const struct k_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Retrieve the user-specific data from a timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The user data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1500" column="7" declfile="include/kernel.h" declline="1500" declcolumn="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__timer__apis_1gaa267fcb0a2e18cd0da29e9f9612510a6" prot="public" static="no">
        <name>K_TIMER_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>expiry_fn</defname></param>
        <param><defname>stop_fn</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_timer, name) = \
		Z_TIMER_INITIALIZER(name, expiry_fn, stop_fn)</initializer>
        <briefdescription>
<para>Statically define and initialize a timer. </para>
        </briefdescription>
        <detaileddescription>
<para>The timer can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_timer<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the timer variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke each time the timer expires. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke if the timer is stopped while running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1333" column="9" bodyfile="include/kernel.h" bodystart="1333" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
