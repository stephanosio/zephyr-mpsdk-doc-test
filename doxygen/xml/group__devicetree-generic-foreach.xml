<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__devicetree-generic-foreach" kind="group">
    <compoundname>devicetree-generic-foreach</compoundname>
    <title>&quot;For-each&quot; macros</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" prot="public" static="no">
        <name>DT_FOREACH_CHILD</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD)(fn)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each child of &quot;node_id&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take one parameter, which will be the node identifier of a child node of &quot;node_id&quot;.</para>
<para>Example devicetree fragment: <verbatim>n: node {
        child-1 {
                label = &quot;foo&quot;;
        };
        child-2 {
                label = &quot;bar&quot;;
        };
};
</verbatim> Example usage: <verbatim>#define LABEL_AND_COMMA(node_id) DT_LABEL(node_id),

const char *child_labels[] = {
    DT_FOREACH_CHILD(DT_NODELABEL(n), LABEL_AND_COMMA)
};
</verbatim> This expands to: <verbatim>const char *child_labels[] = {
    &quot;foo&quot;, &quot;bar&quot;,
};
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1835" column="9" bodyfile="include/devicetree.h" bodystart="1835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1gae7461e9fa4687bf88cdd7c76f30986de" prot="public" static="no">
        <name>DT_FOREACH_CHILD_VARGS</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD_VARGS)(fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each child of &quot;node_id&quot; with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; takes multiple arguments. The first should be the node identifier for the child node. The remaining are passed-in by the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" kindref="member">DT_FOREACH_CHILD</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1850" column="9" bodyfile="include/devicetree.h" bodystart="1850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1gae907df926b94f1da52b1ab701392f3bd" prot="public" static="no">
        <name>DT_FOREACH_CHILD_STATUS_OKAY</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD_STATUS_OKAY)(fn)</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on the child nodes with status &quot;okay&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; should take one argument, which is the node identifier for the child node.</para>
<para>As usual, both a missing status and an &quot;ok&quot; status are treated as &quot;okay&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1865" column="9" bodyfile="include/devicetree.h" bodystart="1865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga8bbf6992e5f90d8a28035ea6211dd2a3" prot="public" static="no">
        <name>DT_FOREACH_CHILD_STATUS_OKAY_VARGS</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD_STATUS_OKAY_VARGS)(fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on the child nodes with status &quot;okay&quot; with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; takes multiple arguments. The first should be the node identifier for the child node. The remaining are passed-in by the caller.</para>
<para>As usual, both a missing status and an &quot;ok&quot; status are treated as &quot;okay&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1gae907df926b94f1da52b1ab701392f3bd" kindref="member">DT_FOREACH_CHILD_STATUS_OKAY</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1884" column="9" bodyfile="include/devicetree.h" bodystart="1884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga118a0477ab297a1bda9e16acf556babc" prot="public" static="no">
        <name>DT_FOREACH_PROP_ELEM</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _FOREACH_PROP_ELEM)(fn)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each element in the value of property &quot;prop&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take three parameters: fn(node_id, prop, idx). &quot;node_id&quot; and &quot;prop&quot; are the same as what is passed to DT_FOREACH_PROP_ELEM, and &quot;idx&quot; is the current index into the array. The &quot;idx&quot; values are integer literals starting from 0.</para>
<para>Example devicetree fragment: <verbatim>n: node {
        my-ints = &lt;1 2 3&gt;;
};
</verbatim> Example usage: <verbatim>#define TIMES_TWO(node_id, prop, idx) \
        (2 * DT_PROP_BY_IDX(node_id, prop, idx)),

int array[] = {
        DT_FOREACH_PROP_ELEM(DT_NODELABEL(n), my_ints, TIMES_TWO)
};
</verbatim> This expands to: <verbatim>int array[] = {
        (2 * 1), (2 * 2), (2 * 3),
};
</verbatim> In general, this macro expands to: <verbatim>fn(node_id, prop, 0) fn(node_id, prop, 1) [...] fn(node_id, prop, n-1)
</verbatim> where &quot;n&quot; is the number of elements in &quot;prop&quot;, as it would be returned by <computeroutput><ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, prop)</ref></computeroutput>.</para>
<para>The &quot;prop&quot; argument must refer to a property with type string, array, uint8-array, string-array, phandles, or phandle-array. It is an error to use this macro with properties of other types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1931" column="9" bodyfile="include/devicetree.h" bodystart="1931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1gaae36970d49c860414374c76e136a9607" prot="public" static="no">
        <name>DT_FOREACH_PROP_ELEM_VARGS</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _FOREACH_PROP_ELEM_VARGS)(fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each element in the value of property &quot;prop&quot; with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take multiple parameters: fn(node_id, prop, idx, ...). &quot;node_id&quot; and &quot;prop&quot; are the same as what is passed to DT_FOREACH_PROP_ELEM, and &quot;idx&quot; is the current index into the array. The &quot;idx&quot; values are integer literals starting from 0. The remaining arguments are passed-in by the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1ga118a0477ab297a1bda9e16acf556babc" kindref="member">DT_FOREACH_PROP_ELEM</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1951" column="9" bodyfile="include/devicetree.h" bodystart="1951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga52b34316d269cc8d8ef2244d3ca460b8" prot="public" static="no">
        <name>DT_FOREACH_STATUS_OKAY</name>
        <param><defname>compat</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),			\
		    (<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_FOREACH_OKAY_, compat)(fn)),	\
		    ())</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each status &quot;okay&quot; node of a compatible. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro expands to: <verbatim>fn(node_id_1) fn(node_id_2) ... fn(node_id_n)
</verbatim> where each &quot;node_id_&lt;i&gt;&quot; is a node identifier for some node with compatible &quot;compat&quot; and status &quot;okay&quot;. Whitespace is added between expansions as shown above.</para>
<para>Example devicetree fragment: <verbatim>/ {
        a {
                compatible = &quot;foo&quot;;
                status = &quot;okay&quot;;
        };
        b {
                compatible = &quot;foo&quot;;
                status = &quot;disabled&quot;;
        };
        c {
                compatible = &quot;foo&quot;;
        };
};
</verbatim> Example usage: <verbatim>DT_FOREACH_STATUS_OKAY(foo, DT_NODE_PATH)
</verbatim> This expands to one of the following: <verbatim>&quot;/a&quot; &quot;/c&quot;
&quot;/c&quot; &quot;/a&quot;
</verbatim> &quot;One of the following&quot; is because no guarantees are made about the order that node identifiers are passed to &quot;fn&quot; in the expansion.</para>
<para>(The &quot;/c&quot; string literal is present because a missing status property is always treated as if the status were set to &quot;okay&quot;.)</para>
<para>Note also that &quot;fn&quot; is responsible for adding commas, semicolons, or other terminators as needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores devicetree compatible </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to call for each enabled node. Must accept a node_id as its only parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2003" column="9" bodyfile="include/devicetree.h" bodystart="2003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga99cf30d6cf4847ed99ba7d81ad2b49d0" prot="public" static="no">
        <name>DT_FOREACH_STATUS_OKAY_VARGS</name>
        <param><defname>compat</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),			\
		    (<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_FOREACH_OKAY_VARGS_,			\
			      compat)(fn, __VA_ARGS__)),		\
		    ())</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each status &quot;okay&quot; node of a compatible with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__devicetree-generic-foreach_1ga52b34316d269cc8d8ef2244d3ca460b8" kindref="member">DT_FOREACH_STATUS_OKAY()</ref> except you can also pass additional arguments to &quot;fn&quot;.</para>
<para>Example devicetree fragment: <verbatim>/ {
        a {
                compatible = &quot;foo&quot;;
                val = &lt;3&gt;;
        };
        b {
                compatible = &quot;foo&quot;;
                val = &lt;4&gt;;
        };
};
</verbatim> Example usage: <verbatim>#define MY_FN(node_id, operator) DT_PROP(node_id, val) operator
x = DT_FOREACH_STATUS_OKAY_VARGS(foo, MY_FN, +) 0;
</verbatim> This expands to one of the following: <verbatim>x = 3 + 4 + 0;
x = 4 + 3 + 0;
</verbatim> i.e. it sets x to 7. As with <ref refid="group__devicetree-generic-foreach_1ga52b34316d269cc8d8ef2244d3ca460b8" kindref="member">DT_FOREACH_STATUS_OKAY()</ref>, there are no guarantees about the order nodes appear in the expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores devicetree compatible </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to call for each enabled node. Must accept a node_id as its only parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments to pass to &quot;fn&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2046" column="9" bodyfile="include/devicetree.h" bodystart="2046" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
