<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__heap__tests" kind="group">
    <compoundname>kernel_heap_tests</compoundname>
    <title>Heap Memory Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__heap__tests_1gaf2837f9f6d78519c726aadfb1901727f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kheap_alloc_in_isr_nowait</definition>
        <argsstring>(void)</argsstring>
        <name>test_kheap_alloc_in_isr_nowait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate allocation and free heap memory in isr context. </para>
        </briefdescription>
        <detaileddescription>
<para>The test validates <ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref> in isr context, the timeout param should be K_NO_WAIT, because this situation isn&apos;t allow to wait. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c" line="187" column="6" bodyfile="tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1gaac7f10d7cd380bf0cea84e08a0d504f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_heap_alloc_pending</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_heap_alloc_pending</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the <ref refid="structk__heap" kindref="compound">k_heap</ref> support wait between different threads. </para>
        </briefdescription>
        <detaileddescription>
<para>In main thread alloc a buffer from the heap, then run the child thread. If there isn&apos;t enough space in the heap, the child thread will wait timeout long until main thread free the buffer to heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c" line="201" column="6" bodyfile="tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c" bodystart="201" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1gaa14be175c686f758f0ae1dd75237e819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_heap_alloc_pending_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_heap_alloc_pending_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the <ref refid="structk__heap" kindref="compound">k_heap</ref> alloc_pending_null support. </para>
        </briefdescription>
        <detaileddescription>
<para>In main thread alloc two buffer from the heap, then run the child thread which alloc a buffer larger than remaining space. The child thread will wait timeout long until main thread free one of the buffer to heap, space in the heap is still not enough and then return null after timeout. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c" line="238" column="6" bodyfile="tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c" bodystart="238" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1gaa654f7a6ac7167de7dbbfcc2c0358112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mheap_malloc_free</definition>
        <argsstring>(void)</argsstring>
        <name>test_mheap_malloc_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to demonstrate <ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref> and <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> API usage. </para>
        </briefdescription>
        <detaileddescription>
<para>The test allocates 4 blocks from heap memory pool using <ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref> API. It also tries to allocate a block of size 64 bytes which fails as all the memory is allocated up. It then validates <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> API by freeing up all the blocks which were allocated from the heap memory.</para>
<para><simplesect kind="see"><para><ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: This routine provides traditional <ref refid="stdlib_8h_1a9c36d0fe3ec4675cbffdc9b52f5fb399" kindref="member">malloc()</ref> semantics. Memory is allocated from the heap memory pool.</para>
<para>TESTPOINT: Return NULL if fail.</para>
<para>TESTPOINT: This routine provides traditional <ref refid="stdlib_8h_1afbedc913aa4651b3c3b4b3aecd9b4711" kindref="member">free()</ref> semantics. The memory being returned must have been allocated from the heap memory pool.</para>
<para>TESTPOINT: If ptr is NULL, no operation is performed.</para>
<para>TESTPOINT: Return NULL if fail.</para>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="57" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="57" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1gaa6c30663f6376f5ed00daf6b76ae7c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mheap_calloc</definition>
        <argsstring>(void)</argsstring>
        <name>test_mheap_calloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to demonstrate <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>The test validates <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API. When requesting a huge size of space or a space larger than heap memory, the API will return NULL. The 8 blocks of memory of size 16 bytes are allocated by <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API. When allocated using <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> the memory buffers have to be zeroed. Check is done, if the blocks are memset to 0 and read/write is allowed. The test is then teared up by freeing all the blocks allocated.</para>
<para><simplesect kind="see"><para><ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="112" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="112" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1ga1fc1b44587fbbac9c871f6e5c01856aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sys_heap_mem_pool_assign</definition>
        <argsstring>(void)</argsstring>
        <name>test_sys_heap_mem_pool_assign</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate allocation and free from system heap memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Set heap memory as resource pool. It will success when alloc a block of memory smaller than the pool and will fail when alloc a block of memory larger than the pool.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga220d22dc35115fcdc0badb262e7a019d" kindref="member">k_thread_system_pool_assign()</ref>, z_thread_malloc(), <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="178" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="178" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1ga3064c284d543a8a788271139d58e7e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_malloc_in_isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_malloc_in_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate allocation and free from system heap memory pool in isr context. </para>
        </briefdescription>
        <detaileddescription>
<para>When in isr context, the kernel will successfully alloc a block of memory because in this situation, the kernel will assign the heap memory as resource pool.</para>
<para><simplesect kind="see"><para>z_thread_malloc(), <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="207" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1ga4654b80624f77420086d9fd48ad3e551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_malloc_in_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_malloc_in_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate allocation and free failure when thread&apos;s resource pool is not assigned. </para>
        </briefdescription>
        <detaileddescription>
<para>When a thread&apos;s resource pool is not assigned, alloc memory will fail.</para>
<para><simplesect kind="see"><para>z_thread_malloc() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" line="226" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c" bodystart="226" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__heap__tests_1gad7d14b289bbbdfbd66ad271a8c55ed51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mheap_malloc_align4</definition>
        <argsstring>(void)</argsstring>
        <name>test_mheap_malloc_align4</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>The test validates <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>The 8 blocks of memory of size 16 bytes are allocated by <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> API. When allocated using <ref refid="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" kindref="member">k_calloc()</ref> the memory buffers have to be zeroed. Check is done, if the blocks are memset to 0 and read/write is allowed. The test is then teared up by freeing all the blocks allocated.</para>
<para><simplesect kind="see"><para><ref refid="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" kindref="member">k_malloc()</ref>, <ref refid="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" kindref="member">k_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: The address of the allocated chunk is guaranteed to be aligned on a word boundary (4 or 8 bytes).</para>
        </inbodydescription>
        <location file="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c" line="34" column="6" bodyfile="tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c" bodystart="34" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Heap tests. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
