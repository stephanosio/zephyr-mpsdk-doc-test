<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__log__backend__std" kind="group">
    <compoundname>log_backend_std</compoundname>
    <title>Logger backend standard interface</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__log__backend__std_1ga187212f5bcf701e57f3859338afa04ac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t log_backend_std_get_flags</definition>
        <argsstring>(void)</argsstring>
        <name>log_backend_std_get_flags</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend_std.h" line="24" column="24" bodyfile="include/logging/log_backend_std.h" bodystart="24" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend__std_1ga31e937cc9e2fc7417b61a381e6b52604" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_std_put</definition>
        <argsstring>(const struct log_output *const output, uint32_t flags, struct log_msg *msg)</argsstring>
        <name>log_backend_std_put</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *const</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Put log message to a standard logger backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Formatting flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend_std.h" line="46" column="1" bodyfile="include/logging/log_backend_std.h" bodystart="46" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend__std_1gae64f537029b579ae947a8ba4c5b2634d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_std_panic</definition>
        <argsstring>(const struct log_output *const output)</argsstring>
        <name>log_backend_std_panic</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *const</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Put a standard logger backend into panic mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Log output instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend_std.h" line="63" column="1" bodyfile="include/logging/log_backend_std.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend__std_1gac79c5ea2d5f7a952f55ba21621120805" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_std_dropped</definition>
        <argsstring>(const struct log_output *const output, uint32_t cnt)</argsstring>
        <name>log_backend_std_dropped</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *const</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
<para>Report dropped messages to a standard logger backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dropped messages. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend_std.h" line="74" column="1" bodyfile="include/logging/log_backend_std.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend__std_1ga175b8a2e61962bc8e85df52b951cf6f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_std_sync_string</definition>
        <argsstring>(const struct log_output *const output, uint32_t flags, struct log_msg_ids src_level, uint32_t timestamp, const char *fmt, va_list ap)</argsstring>
        <name>log_backend_std_sync_string</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *const</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref></type>
          <declname>src_level</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Synchronously process log message by a standard logger backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Formatting flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message source and level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Log string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>Log string arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend_std.h" line="89" column="1" bodyfile="include/logging/log_backend_std.h" bodystart="89" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend__std_1ga16051aad0b33efd6bbc7b6c8b63b0871" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_std_sync_hexdump</definition>
        <argsstring>(const struct log_output *const output, uint32_t flags, struct log_msg_ids src_level, uint32_t timestamp, const char *metadata, const uint8_t *data, uint32_t length)</argsstring>
        <name>log_backend_std_sync_hexdump</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *const</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref></type>
          <declname>src_level</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Synchronously process hexdump message by a standard logger backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Formatting flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message source and level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>String associated with a hexdump. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to dump. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend_std.h" line="129" column="1" bodyfile="include/logging/log_backend_std.h" bodystart="129" bodyend="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logger backend interface for forwarding to standard backend. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
