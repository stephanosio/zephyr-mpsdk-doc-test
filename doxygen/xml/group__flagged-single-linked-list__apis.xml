<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__flagged-single-linked-list__apis" kind="group">
    <compoundname>flagged-single-linked-list_apis</compoundname>
    <title>Flagged Single-linked list</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga9597045ad20485fd88a0fec83fe1ffe1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_init</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_init</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Initialize a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="202" column="20" bodyfile="include/sys/sflist.h" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga0e258c1faa3cbaee48c29e8f2c11132b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t sys_sfnode_flags_get</definition>
        <argsstring>(sys_sfnode_t *node)</argsstring>
        <name>sys_sfnode_flags_get</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Fetch flags value for a particular sfnode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the node to fetch flags from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of flags, which will be between 0 and 3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="270" column="23" bodyfile="include/sys/sflist.h" bodystart="270" bodyend="273" declfile="include/sys/sflist.h" declline="216" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga6c993728bebb604f966cdc944939642e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_head</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_peek_head</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Peek the first node from the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A point on the list to peek the first node from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer on the first node of the list (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="243" column="28" bodyfile="include/sys/sflist.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gabf278ac7912180fc50a25c0ebddc093c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_tail</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_peek_tail</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Peek the last node from the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A point on the list to peek the last node from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer on the last node of the list (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="255" column="28" bodyfile="include/sys/sflist.h" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gae56469b67ad7a92363d04ac726e326ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sfnode_init</definition>
        <argsstring>(sys_sfnode_t *node, uint8_t flags)</argsstring>
        <name>sys_sfnode_init</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Initialize an sflist node. </para>
        </briefdescription>
        <detaileddescription>
<para>Set an initial flags value for this slist node, which can be a value between 0 and 3. These flags will persist even if the node is moved around within a list, removed, or transplanted to a different slist.</para>
<para>This is ever so slightly faster than <ref refid="group__flagged-single-linked-list__apis_1ga85d82a3a5927f79a5f5655cb3405ce95" kindref="member">sys_sfnode_flags_set()</ref> and should only be used on a node that hasn&apos;t been added to any list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the node to set the flags on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A value between 0 and 3 to set the flags value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="288" column="20" bodyfile="include/sys/sflist.h" bodystart="288" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga85d82a3a5927f79a5f5655cb3405ce95" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sfnode_flags_set</definition>
        <argsstring>(sys_sfnode_t *node, uint8_t flags)</argsstring>
        <name>sys_sfnode_flags_set</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set flags value for an sflist node. </para>
        </briefdescription>
        <detaileddescription>
<para>Set a flags value for this slist node, which can be a value between 0 and 3. These flags will persist even if the node is moved around within a list, removed, or transplanted to a different slist.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the node to set the flags on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A value between 0 and 3 to set the flags value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="304" column="20" bodyfile="include/sys/sflist.h" bodystart="304" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gac506235a9df89a7a52631e9990ceaad5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_sflist_is_empty</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_is_empty</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Test if the given list is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to test</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean, true if it&apos;s empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="323" column="22" bodyfile="include/sys/sflist.h" bodystart="323" bodyend="323" declfile="include/sys/sflist.h" declline="321" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gaa67d15dd4fb28dbbc64f4b0e8e21455e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_next_no_check</definition>
        <argsstring>(sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_peek_next_no_check</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Peek the next node from current node, node is not NULL. </para>
        </briefdescription>
        <detaileddescription>
<para>Faster then <ref refid="group__flagged-single-linked-list__apis_1ga514b41f1af89f3f08e216cfede7d5605" kindref="member">sys_sflist_peek_next()</ref> if node is known not to be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node where to peek the next node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer on the next node (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="336" column="31" bodyfile="include/sys/sflist.h" bodystart="336" bodyend="336" declfile="include/sys/sflist.h" declline="334" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga514b41f1af89f3f08e216cfede7d5605" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_next</definition>
        <argsstring>(sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_peek_next</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Peek the next node from current node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node where to peek the next node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer on the next node (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="347" column="31" bodyfile="include/sys/sflist.h" bodystart="347" bodyend="347" declfile="include/sys/sflist.h" declline="345" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga824ff283c821b6f392ebd81516b65712" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_prepend</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_prepend</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Prepend a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to prepend </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="360" column="22" bodyfile="include/sys/sflist.h" bodystart="360" bodyend="360" declfile="include/sys/sflist.h" declline="357" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga77733972e39b7db9fc3dcc998261fb2d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_append</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_append</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Append a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="373" column="22" bodyfile="include/sys/sflist.h" bodystart="373" bodyend="373" declfile="include/sys/sflist.h" declline="370" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gaaf9512d6c4432f34347771c9887e678a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_append_list</definition>
        <argsstring>(sys_sflist_t *list, void *head, void *tail)</argsstring>
        <name>sys_sflist_append_list</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
<para>Append a list to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>Append a singly-linked, NULL-terminated list consisting of nodes containing the pointer to the next node as the first element of a node, to <emphasis>list</emphasis>. This and other sys_sflist_*() functions are not thread safe.</para>
<para>FIXME: Why are the element parameters void *?</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the first element of the list to append </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the last element of the list to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="391" column="22" bodyfile="include/sys/sflist.h" bodystart="391" bodyend="391" declfile="include/sys/sflist.h" declline="388" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga6c68678fceb6127a34760fb04ddef8b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_merge_sflist</definition>
        <argsstring>(sys_sflist_t *list, sys_sflist_t *list_to_append)</argsstring>
        <name>sys_sflist_merge_sflist</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list_to_append</declname>
        </param>
        <briefdescription>
<para>merge two sflists, appending the second one to the first </para>
        </briefdescription>
        <detaileddescription>
<para>When the operation is completed, the appending list is empty. This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list_to_append</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the list to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="405" column="22" bodyfile="include/sys/sflist.h" bodystart="405" bodyend="405" declfile="include/sys/sflist.h" declline="402" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga8983c5704eb149b0941f1fb19f79b8c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_insert</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *prev, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_insert</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Insert a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the previous node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="420" column="22" bodyfile="include/sys/sflist.h" bodystart="420" bodyend="420" declfile="include/sys/sflist.h" declline="416" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga065a7968e8082b65f9344a6331b424fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_get_not_empty</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_get_not_empty</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Fetch and remove the first node of the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>List must be known to be non-empty. This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first node of the list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="434" column="31" bodyfile="include/sys/sflist.h" bodystart="434" bodyend="434" declfile="include/sys/sflist.h" declline="432" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga124d4dbb8d6d554071cb5eac2585b4ac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_get</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_get</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Fetch and remove the first node of the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first node of the list (or NULL if empty) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="447" column="31" bodyfile="include/sys/sflist.h" bodystart="447" bodyend="447" declfile="include/sys/sflist.h" declline="445" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga66c716ef7495fcb04ea60aac340dc5ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_remove</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *prev_node, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_remove</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>prev_node</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove a node. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the previous node (can be NULL, which means the node is the list&apos;s head) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="463" column="22" bodyfile="include/sys/sflist.h" bodystart="463" bodyend="463" declfile="include/sys/sflist.h" declline="459" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gad66348fe7677cca76a547e09c8354322" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_sflist_find_and_remove</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_find_and_remove</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Find and remove a node from a list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to remove from the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if node was removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="478" column="22" bodyfile="include/sys/sflist.h" bodystart="478" bodyend="478" declfile="include/sys/sflist.h" declline="475" declcolumn="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1gaa3e9a3eeef7ecca012b0926fb2758c01" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_NODE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_NODE(sflist, __sl, __sn)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list Note: the loop is unsafe and thus __sn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_SFLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="69" column="9" bodyfile="include/sys/sflist.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga0470a27a54ed20eec35baa6cacd6a5ff" prot="public" static="no">
        <name>SYS_SFLIST_ITERATE_FROM_NODE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <initializer>	Z_GENLIST_ITERATE_FROM_NODE(sflist, __sl, __sn)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list, from a node in the list Note: the loop is unsafe and thus __sn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_ITERATE_FROM_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> Like <ref refid="group__flagged-single-linked-list__apis_1gaa3e9a3eeef7ecca012b0926fb2758c01" kindref="member">SYS_SFLIST_FOR_EACH_NODE()</ref>, but __dn already contains a node in the list where to start searching for the next entry from. If NULL, it starts from the head.</para>
<para>This and other SYS_SFLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer to peek each node of the list it contains the starting node, or NULL to start from the head </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="92" column="9" bodyfile="include/sys/sflist.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1gabe867ebba43f1f0ebd2441147a9e3d3d" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_NODE_SAFE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <param><defname>__sns</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_NODE_SAFE(sflist, __sl, __sn, __sns)</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list Note: __sn can be removed, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_NODE_SAFE(l, n, s) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_SFLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sns</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="111" column="9" bodyfile="include/sys/sflist.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga68dae6db03b52bc27777a2b8c274a852" prot="public" static="no">
        <name>SYS_SFLIST_CONTAINER</name>
        <param><defname>__ln</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_CONTAINER(__ln, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="122" column="9" bodyfile="include/sys/sflist.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga2c339b75ed80f3a94b0419ac73f18682" prot="public" static="no">
        <name>SYS_SFLIST_PEEK_HEAD_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_HEAD_CONTAINER(sflist, __sl, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="132" column="9" bodyfile="include/sys/sflist.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga73760da17d0daefe655bbd750a3ce3e8" prot="public" static="no">
        <name>SYS_SFLIST_PEEK_TAIL_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_TAIL_CONTAINER(sflist, __sl, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="142" column="9" bodyfile="include/sys/sflist.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga0ba4b870acea3a10a1be066fb1d769c8" prot="public" static="no">
        <name>SYS_SFLIST_PEEK_NEXT_CONTAINER</name>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_NEXT_CONTAINER(sflist, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="151" column="9" bodyfile="include/sys/sflist.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga1db228cdfd8004738fc6c4d2430be0cc" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_CONTAINER(sflist, __sl, __cn, __n)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list under a container Note: the loop is unsafe and thus __cn should not be detached. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_CONTAINER(l, c, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_sfnode_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="168" column="9" bodyfile="include/sys/sflist.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga6b33a7b2be024c0e243f5bbccf900e81" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_CONTAINER_SAFE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__cns</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_CONTAINER_SAFE(sflist, __sl, __cn, __cns, __n)</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list under a container Note: __cn can be detached, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_NODE_SAFE(l, c, cn, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cns</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_sfnode_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="186" column="9" bodyfile="include/sys/sflist.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga892d5c9ce2d89b04f0ce15a88eefed71" prot="public" static="no">
        <name>SYS_SFLIST_STATIC_INIT</name>
        <param><defname>ptr_to_list</defname></param>
        <initializer>{NULL, NULL}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="208" column="9" bodyfile="include/sys/sflist.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga46e57329036b76ab03267d2e9258d5c2" prot="public" static="no">
        <name>SYS_SFLIST_FLAGS_MASK</name>
        <initializer>0x3UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="209" column="9" bodyfile="include/sys/sflist.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
