<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mem__blocks_8h" kind="file" language="C++">
    <compoundname>mem_blocks.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes local="no">kernel.h</includes>
    <includes refid="ilog2_8h" local="no">math/ilog2.h</includes>
    <includes refid="bitarray_8h" local="no">sys/bitarray.h</includes>
    <incdepgraph>
      <node id="7">
        <label>arch/common/ffs.h</label>
        <link refid="ffs_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>math/ilog2.h</label>
        <link refid="ilog2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/bitarray.h</label>
        <link refid="bitarray_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sys/mem_blocks.h</label>
        <link refid="mem__blocks_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="10">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="8">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4">
        <label>kernel.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mem__blocks_8h_1a0a18ac0266ab6532cdd93302ca012112" prot="public" static="no">
        <name>MAX_MULTI_ALLOCATORS</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="27" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__blocks__apis_1gab49fdcd86522d318051ca6a6ddf41c7c" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf_align</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE(name, blk_sz, num_blks, buf_align,)</initializer>
        <briefdescription>
<para>Create a memory block object with a new backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory block buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="159" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__blocks__apis_1gaa6b90846448323837dab3a17c3065359" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE_STATIC</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf_align</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE(name, blk_sz, num_blks, buf_align, static)</initializer>
        <briefdescription>
<para>Create a static memory block object with a new backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory block buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="172" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__blocks__apis_1gae6b688b2925308c9007071bab681dcdd" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name, blk_sz, num_blks, buf,)</initializer>
        <briefdescription>
<para>Create a memory block object with a providing backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Backing buffer of type uint8_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="186" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__blocks__apis_1gaad3cfb34553bd97290b388bec910b8cc" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE_STATIC_WITH_EXT_BUF</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name, blk_sz, num_blks, buf, static)</initializer>
        <briefdescription>
<para>Create a static memory block object with a providing backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Backing buffer of type uint8_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="199" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" prot="public" static="no">
        <type>struct sys_mem_blocks</type>
        <definition>sys_mem_blocks_t</definition>
        <argsstring></argsstring>
        <name>sys_mem_blocks_t</name>
        <briefdescription>
<para>Memory Blocks Allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="49" column="29" bodyfile="include/sys/mem_blocks.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" prot="public" static="no">
        <type>struct sys_multi_mem_blocks</type>
        <definition>sys_multi_mem_blocks_t</definition>
        <argsstring></argsstring>
        <name>sys_multi_mem_blocks_t</name>
        <briefdescription>
<para>Multi Memory Blocks Allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="56" column="35" bodyfile="include/sys/mem_blocks.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mem__blocks__apis_1ga2e58484681d0d9629af9a8c7c14453d9" prot="public" static="no">
        <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *(*</type>
        <definition>typedef sys_mem_blocks_t *(* sys_multi_mem_blocks_choice_fn_t) (struct sys_multi_mem_blocks *group, void *cfg)</definition>
        <argsstring>)(struct sys_multi_mem_blocks *group, void *cfg)</argsstring>
        <name>sys_multi_mem_blocks_choice_fn_t</name>
        <briefdescription>
<para>Multi memory blocks allocator choice function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a user-provided functions whose responsibility is selecting a specific memory blocks allocator based on the opaque cfg value, which is specified by the user as an argument to <ref refid="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" kindref="member">sys_multi_mem_blocks_alloc()</ref>. The callback returns a pointer to the chosen allocator where the allocation is performed.</para>
<para>NULL may be returned, which will cause the allocation to fail and a -EINVAL reported to the calling code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque user-provided value. It may be interpreted in any way by the application.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the chosen allocator, or NULL if none is chosen. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="76" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mem__blocks__apis_1ga3e53a5c65bb0e88fbf20e66b016c1dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mem_blocks_alloc</definition>
        <argsstring>(sys_mem_blocks_t *mem_block, size_t count, void **out_blocks)</argsstring>
        <name>sys_mem_blocks_alloc</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *</type>
          <declname>mem_block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>out_blocks</declname>
        </param>
        <briefdescription>
<para>Allocate multiple memory blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate multiple memory blocks, and place their pointers into the output array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structmem__block" kindref="compound">mem_block</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array to be populated by pointers to the memory blocks. It must have at least <computeroutput>count</computeroutput> elements.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Not enough blocks for allocation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="218" column="5" declfile="include/sys/mem_blocks.h" declline="218" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1gadd799f4f2423277ed5daf08a0d150b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mem_blocks_free</definition>
        <argsstring>(sys_mem_blocks_t *mem_block, size_t count, void **in_blocks)</argsstring>
        <name>sys_mem_blocks_free</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *</type>
          <declname>mem_block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>in_blocks</declname>
        </param>
        <briefdescription>
<para>Free multiple memory blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Free multiple memory blocks according to the array of memory block pointers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structmem__block" kindref="compound">mem_block</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to free. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array of pointers to the memory blocks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid pointers supplied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="235" column="5" declfile="include/sys/mem_blocks.h" declline="235" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1gad39867e3cd1e1e69e6fb3746c05abed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sys_multi_mem_blocks_init</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, sys_multi_mem_blocks_choice_fn_t choice_fn)</argsstring>
        <name>sys_multi_mem_blocks_init</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga2e58484681d0d9629af9a8c7c14453d9" kindref="member">sys_multi_mem_blocks_choice_fn_t</ref></type>
          <declname>choice_fn</declname>
        </param>
        <briefdescription>
<para>Initialize multi memory blocks allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize a sys_multi_mem_block struct with the specified choice function. Note that individual allocator must be added later with sys_multi_mem_blocks_add_allocator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>choice_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_multi_mem_blocks_choice_fn_t callback used to select the allocator to be used at allocation time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="249" column="6" declfile="include/sys/mem_blocks.h" declline="249" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1ga03967e8b917a1592638586c9cfbba4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sys_multi_mem_blocks_add_allocator</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, sys_mem_blocks_t *alloc)</argsstring>
        <name>sys_multi_mem_blocks_add_allocator</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
<para>Add an allocator to an allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>This adds a known allocator to an existing multi memory blocks allocator group.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="261" column="6" declfile="include/sys/mem_blocks.h" declline="261" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_multi_mem_blocks_alloc</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, void *cfg, size_t count, void **out_blocks, size_t *blk_size)</argsstring>
        <name>sys_multi_mem_blocks_alloc</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>out_blocks</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>blk_size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from multi memory blocks allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>Just as for <ref refid="group__mem__blocks__apis_1ga3e53a5c65bb0e88fbf20e66b016c1dff" kindref="member">sys_mem_blocks_alloc()</ref>, allocates multiple blocks of memory. Takes an opaque configuration pointer passed to the choice function, which is used by integration code to choose an allocator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque configuration parameter, as for sys_multi_mem_blocks_choice_fn_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array to be populated by pointers to the memory blocks. It must have at least <computeroutput>count</computeroutput> elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">blk_size</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, output the block size of the chosen allocator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied, or no allocator chosen. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Not enough blocks for allocation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="285" column="5" declfile="include/sys/mem_blocks.h" declline="285" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1ga8dedc28ed45e9e6350b584b1082b4d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_multi_mem_blocks_free</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, size_t count, void **in_blocks)</argsstring>
        <name>sys_multi_mem_blocks_free</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>in_blocks</declname>
        </param>
        <briefdescription>
<para>Free memory allocated from multi memory blocks allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>Free previous allocated memory blocks from <ref refid="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" kindref="member">sys_multi_mem_blocks_alloc()</ref>.</para>
<para>Note that all blocks in <computeroutput>in_blocks</computeroutput> must be from the same allocator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to free. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array of pointers to the memory blocks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied, or no allocator chosen. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid pointer(s) supplied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="305" column="5" declfile="include/sys/mem_blocks.h" declline="305" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Memory Blocks Allocator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_MEM_BLOCKS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_MEM_BLOCKS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ilog2_8h" kindref="compound">math/ilog2.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="bitarray_8h" kindref="compound">sys/bitarray.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="mem__blocks_8h_1a0a18ac0266ab6532cdd93302ca012112" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_MULTI_ALLOCATORS<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sys_mem_blocks;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sys_multi_mem_blocks;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sys_mem_blocks<sp/><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sys_multi_mem_blocks<sp/><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__mem__blocks__apis_1ga2e58484681d0d9629af9a8c7c14453d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref><sp/>*(*sys_multi_mem_blocks_choice_fn_t)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sys_multi_mem_blocks<sp/>*group,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cfg);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sys_mem_blocks<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>num_blocks;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bit<sp/>shift<sp/>for<sp/>block<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>blk_sz_shift;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Memory<sp/>block<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bitmap<sp/>of<sp/>allocated<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsys__bitarray" kindref="compound">sys_bitarray_t</ref><sp/>*bitmap;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sys_multi_mem_blocks<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>allocators<sp/>in<sp/>this<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_allocators;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__blocks__apis_1ga2e58484681d0d9629af9a8c7c14453d9" kindref="member">sys_multi_mem_blocks_choice_fn_t</ref><sp/>choice_fn;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref><sp/>*allocators[<ref refid="mem__blocks_8h_1a0a18ac0266ab6532cdd93302ca012112" kindref="member">MAX_MULTI_ALLOCATORS</ref>];</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf,<sp/>mbmod)<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_BITARRAY_DEFINE(_sys_mem_blocks_bitmap_##name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_blks,<sp/>mbmod);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbmod<sp/>sys_mem_blocks_t<sp/>name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.num_blocks<sp/>=<sp/>num_blks,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.blk_sz_shift<sp/>=<sp/>ilog2(blk_sz),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>buf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bitmap<sp/>=<sp/>&amp;_sys_mem_blocks_bitmap_##name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_MEM_BLOCKS_DEFINE(name,<sp/>blk_sz,<sp/>num_blks,<sp/>balign,<sp/>mbmod)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbmod<sp/>uint8_t<sp/>__noinit_named(sys_mem_blocks_buf_##name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__aligned(WB_UP(balign))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_sys_mem_blocks_buf_##name[num_blks<sp/>*<sp/>WB_UP(blk_sz)];<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name,<sp/>blk_sz,<sp/>num_blks,<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_sys_mem_blocks_buf_##name,<sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbmod);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="group__mem__blocks__apis_1gab49fdcd86522d318051ca6a6ddf41c7c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_MEM_BLOCKS_DEFINE(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf_align)<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_MEM_BLOCKS_DEFINE(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf_align,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="group__mem__blocks__apis_1gaa6b90846448323837dab3a17c3065359" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_MEM_BLOCKS_DEFINE_STATIC(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf_align)<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_MEM_BLOCKS_DEFINE(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf_align,<sp/>static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="group__mem__blocks__apis_1gae6b688b2925308c9007071bab681dcdd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf)<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="group__mem__blocks__apis_1gaad3cfb34553bd97290b388bec910b8cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_MEM_BLOCKS_DEFINE_STATIC_WITH_EXT_BUF(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf)<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name,<sp/>blk_sz,<sp/>num_blks,<sp/>buf,<sp/>static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="group__mem__blocks__apis_1ga3e53a5c65bb0e88fbf20e66b016c1dff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mem__blocks__apis_1ga3e53a5c65bb0e88fbf20e66b016c1dff" kindref="member">sys_mem_blocks_alloc</ref>(<ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref><sp/>*<ref refid="structmem__block" kindref="compound">mem_block</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**out_blocks);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="group__mem__blocks__apis_1gadd799f4f2423277ed5daf08a0d150b9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mem__blocks__apis_1gadd799f4f2423277ed5daf08a0d150b9c" kindref="member">sys_mem_blocks_free</ref>(<ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref><sp/>*<ref refid="structmem__block" kindref="compound">mem_block</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**in_blocks);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="group__mem__blocks__apis_1gad39867e3cd1e1e69e6fb3746c05abed0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mem__blocks__apis_1gad39867e3cd1e1e69e6fb3746c05abed0" kindref="member">sys_multi_mem_blocks_init</ref>(<ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref><sp/>*group,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__blocks__apis_1ga2e58484681d0d9629af9a8c7c14453d9" kindref="member">sys_multi_mem_blocks_choice_fn_t</ref><sp/>choice_fn);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="group__mem__blocks__apis_1ga03967e8b917a1592638586c9cfbba4bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mem__blocks__apis_1ga03967e8b917a1592638586c9cfbba4bb" kindref="member">sys_multi_mem_blocks_add_allocator</ref>(<ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref><sp/>*group,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref><sp/>*alloc);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" kindref="member">sys_multi_mem_blocks_alloc</ref>(<ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref><sp/>*group,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cfg,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**out_blocks,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*blk_size);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="group__mem__blocks__apis_1ga8dedc28ed45e9e6350b584b1082b4d4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__mem__blocks__apis_1ga8dedc28ed45e9e6350b584b1082b4d4f" kindref="member">sys_multi_mem_blocks_free</ref>(<ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref><sp/>*group,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**in_blocks);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_MEM_BLOCKS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/mem_blocks.h"/>
  </compounddef>
</doxygen>
