<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__pipe__tests" kind="group">
    <compoundname>kernel_pipe_tests</compoundname>
    <title>PIPEs</title>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="group__kernel__pipe__tests_1ga5337edf3b057c982a0fb434cc75e9506" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> <ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> char</type>
        <definition>ZTEST_DMEM unsigned char data[]</definition>
        <argsstring>[]</argsstring>
        <name>data</name>
        <initializer>= &quot;abcdefgh&quot;</initializer>
        <briefdescription>
<para>Tests for the Pipe read / write availability. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="15" column="34" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref></type>
        <definition>struct k_pipe pipe</definition>
        <argsstring></argsstring>
        <name>pipe</name>
        <initializer>= {
	.<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref> = <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>,
	.size = sizeof(<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>) - 1 ,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="16" column="20" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__pipe__tests_1gae4e485dafcd7063842298620b30f2733" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref></type>
        <definition>struct k_pipe bufferless</definition>
        <argsstring></argsstring>
        <name>bufferless</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="21" column="20" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__pipe__tests_1ga8ad3cc1ffd86f88e50ba27223c17f3fb" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref></type>
        <definition>struct k_pipe bufferless1</definition>
        <argsstring></argsstring>
        <name>bufferless1</name>
        <initializer>= {
	.<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref> = <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>,
	.size = 0,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="23" column="20" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga648e3f0e21e7ca863744932b847c2df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_no_buffer</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_no_buffer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Pipes with no buffer or size 0 should return 0 bytes available. </para>
        </briefdescription>
        <detaileddescription>
<para>Pipes can be created to be bufferless (i.e. <ref refid="structk__pipe_1acb78995d6b7df28a5452f5d2e88b4dfb" kindref="member">k_pipe::buffer</ref> is <computeroutput>NULL</computeroutput> or <ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">k_pipe::size</ref> is 0).</para>
<para>If either of those conditions is true, then <ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref> and <ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref> should return 0.</para>
<para><simplesect kind="note"><para>A distinction can be made between buffered and bufferless pipes in that <ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref> and <ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref> will never simultaneously return 0 for a buffered pipe, but they will both return 0 for an unbuffered pipe. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="43" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="43" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga2c091cd42e8c0c37edc7094aa7d01c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_r_lt_w</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_r_lt_w</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for r &lt; w. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref> is less than <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref>.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is not relevant. <verbatim> r     w
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim> As shown above, the pipe will be able to read 3 bytes without blocking and write 5 bytes without blocking.</para>
<para>Thus r_avail = w - r = 3 would read: a b c d</para>
<para>w_avail = N - (w - r) = 5 would overwrite: e f g h </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="83" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="83" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga32f5729c631bfa4fd8f893bf002ae742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_w_lt_r</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_w_lt_r</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for w &lt; r. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref> is less than <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref>.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is not relevant. <verbatim> w     r
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim></para>
<para>As shown above, the pipe will fbe able to read 5 bytes without blocking and write 3 bytes without blocking.</para>
<para>Thus r_avail = N - (r - w) = 5 would read: e f g h</para>
<para>w_avail = r - w = 3 would overwrite: a b c d </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="122" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga6d93684dce575130daa520d4178e554d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_r_eq_w_empty</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_r_eq_w_empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for <computeroutput>r == w</computeroutput> and an empty buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref> is equal to <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref> and <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is zero.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is relevant because the read and write indeces are equal. <verbatim>       r
       w
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim> Regardless of whether the buffer is full or empty, the following holds: <verbatim>r_avail = bytes_used
w_avail = N - bytes_used
</verbatim> Thus: r_avail = 0 would read:</para>
<para>w_avail = N - 0 = 8 would overwrite: e f g h a b c d </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="165" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="165" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga49ff4c6fc7350063ed424be560c594f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_r_eq_w_full</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_r_eq_w_full</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for <computeroutput>r == w</computeroutput> and a full buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref> is equal to <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref> and <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is equal to <ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">k_pipe::size</ref>.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is relevant because the read and write indeces are equal. <verbatim>       r
       w
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim> Regardless of whether the buffer is full or empty, the following holds: <verbatim>r_avail = bytes_used
w_avail = N - bytes_used
</verbatim> Thus r_avail = N = 8 would read: e f g h a b c d</para>
<para>w_avail = N - 8 = 0 would overwrite: </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="208" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="208" bodyend="222"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga6cd1dd8a17b07b46de7a22449ad00c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_on_single_elements</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_on_single_elements</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify pipe with 1 element insert. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>transfer sequences of bytes of data in whole.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>function and block box testing,Interface testing, Dynamic analysis and testing.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_TEST_USERSPACE.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Define and initialize a pipe at compile time.</para>
</listitem><listitem><para>Using a sub thread to get pipe data in whole, and check if the data is correct with expected.</para>
</listitem><listitem><para>Using main thread to put data in whole, check if the return is correct with expected.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The pipe put/get whole data is correct.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="727" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="727" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gac8ddfaa33e567499dc4b86aca23f5697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_on_multiple_elements</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_on_multiple_elements</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test when multiple items are present in the pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>transfer sequences of bytes of data in part.<itemizedlist>
<listitem><para>Using a sub thread to get data part.</para>
</listitem><listitem><para>Using main thread to put data part by part</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="753" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="753" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaa61bc00b4782f35380e9140c3acb74b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_forever_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_forever_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test when multiple items are present with wait. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="771" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="771" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga4d13141c2a50d3c725fca2a99c22179f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_timeout</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_timeout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipes with timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Check if the kernel support supplying a timeout parameter indicating the maximum amount of time a process will wait.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>function and block box testing,Interface testing, Dynamic analysis and testing.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_TEST_USERSPACE.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Create a sub thread to get data from a pipe.</para>
</listitem><listitem><para>In the sub thread, Set <ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC(10)</ref> as timeout for <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref>. and check the data which get from pipe if correct.</para>
</listitem><listitem><para>In main thread, use k_pipe_put to put data. and check the return of k_pipe_put.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The pipe can set timeout and works well.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="822" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="822" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gad9ec08c52200773df8dc035bee160921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_on_empty_pipe</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_on_empty_pipe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe get from a empty pipe. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="840" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="840" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga0f2bfadd72ea2900d6230c8ea7386069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_forever_timeout</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_forever_timeout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test the pipe_get with K_FOREVER as timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>Testcase is similar to <ref refid="group__kernel__pipe__tests_1ga6cd1dd8a17b07b46de7a22449ad00c23" kindref="member">test_pipe_on_single_elements()</ref> but with K_FOREVER as timeout.</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="853" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="853" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaecea7c9d45b6c6c88321e07c30aa2d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_timeout</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_timeout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>k_pipe_get timeout test </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="872" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="872" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga6eb6267999be80ff799afb3cddc84f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_invalid_size</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_invalid_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe get of invalid size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="884" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="884" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga39198913a513afdd1b8d14f79f5b84e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_min_xfer</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_min_xfer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe get returns immediately if &gt;= min_xfer is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="903" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="903" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga1b7df9aaf4f2f153a39ac5c3e782e505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_put_min_xfer</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_put_min_xfer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe put returns immediately if &gt;= min_xfer is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="926" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="926" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga0482146a5f49643ce4b349cbbd5c2ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_define_at_runtime</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_define_at_runtime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test defining and initializing pipes at run time. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Check if the kernel provided a mechanism for defining and initializing pipes at run time.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>function and block box testing,Interface testing, Dynamic analysis and testing.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_TEST_USERSPACE.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Define and initialize a pipe at run time</para>
</listitem><listitem><para>Using this pipe to transfer data.</para>
</listitem><listitem><para>Check the pipe get/put operation.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>Pipe can be defined and initialized at run time.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="984" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="984" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga3bf1689f313462df0a67f63bbf006d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_flush</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_flush</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test flushing a pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Check if the kernel flushes a pipe properly at runtime.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>function and block box testing,Interface testing, Dynamic analysis and testing.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_TEST_USERSPACE.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Define and initialize a pipe at run time</para>
</listitem><listitem><para>Use this pipe to transfer data.</para>
</listitem><listitem><para>Have a thread fill and block on writing to the pipe</para>
</listitem><listitem><para>Flush the pipe and check that the pipe is completely empty</para>
</listitem><listitem><para>Have a thread fill and block on writing to the pipe</para>
</listitem><listitem><para>Flush only the pipe&apos;s buffer and check the results</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>Reading from the pipe after <ref refid="group__pipe__apis_1ga41484bb5c7dcd97e7a7b7f1422f8026f" kindref="member">k_pipe_flush()</ref> results in no data to read.</para>
</listitem><listitem><para>Reading from the pipe after <ref refid="group__pipe__apis_1ga71e0e38a15fa27f27c1f028223936445" kindref="member">k_pipe_buffer_flush()</ref> results in read data, but missing the original data that was in the buffer prior to the flush.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe/src/test_pipe.c" line="1098" column="6" bodyfile="tests/kernel/pipe/pipe/src/test_pipe.c" bodystart="1098" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga9f5f0800ee4c3148844d97f0341d48ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe data passing between threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Verify data passing with &quot;pipe put/get&quot; APIs between threads</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>function and block box testing,Interface testing, Dynamic analysis and testing.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_TEST_USERSPACE.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Initialize a pipe, which is defined at run time.</para>
</listitem><listitem><para>Create a thread (A).</para>
</listitem><listitem><para>In A thread, check if it can get data, which is sent by main thread via the pipe.</para>
</listitem><listitem><para>In A thread, send data to main thread via the pipe.</para>
</listitem><listitem><para>In main thread, send data to A thread via the pipe.</para>
</listitem><listitem><para>In main thread, check if it can get data, which is sent by A thread.</para>
</listitem><listitem><para>Do the same testing with a pipe, which is defined at compile time</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>Data can be sent/received between threads.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init()</ref>, <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gac2256aa00c59e78199be9bdefd61aa52" kindref="member">K_PIPE_DEFINE(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_pipe_init pipe</para>
<para>TESTPOINT: test K_PIPE_DEFINE pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="292" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="292" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaec0aabe27966e4f4d9a4bc90f37fe5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_user_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_user_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test data passing using pipes between user threads. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init()</ref>, <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gac2256aa00c59e78199be9bdefd61aa52" kindref="member">K_PIPE_DEFINE(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_object_alloc pipe</para>
<para>TESTPOINT: test k_pipe_alloc_init</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="307" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="307" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gae4866a237984d4318f25f13bc5b82633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_resource_pool_auto_free</definition>
        <argsstring>(void)</argsstring>
        <name>test_resource_pool_auto_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test resource pool free. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="326" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="326" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaf26e9597b960fd21b1e9fbd2528d7216" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tThread_half_pipe_put</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tThread_half_pipe_put</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="336" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaed747dff67cae5af75b2d186a9194d57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tThread_half_pipe_get</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tThread_half_pipe_get</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="341" column="13" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaf2e86fbca58a7ae664fb4f528711ee15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_half_pipe_put_get</definition>
        <argsstring>(void)</argsstring>
        <name>test_half_pipe_put_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test put/get with smaller pipe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="350" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="350" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gafc65cf58e8bcde78fc688d4ed20e84bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_put</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_put</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="381" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="381" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga74fe0df1db9ec493e97f407c241ad315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_large</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_large</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: thread-thread data passing via pipe</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="412" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="412" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gafc62de28e1f1996d1961ef09a62da6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_reader_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_reader_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pending reader in pipe. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref>, <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_pipe_block_put with semaphore</para>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" line="438" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c" bodystart="438" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga565dd05ba929081bbd9e26e712a7c428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_put_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_put_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe put failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init()</ref>, <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="41" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga55d88dcdd4477c3f809925e7f150d068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_user_put_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_user_put_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe put by a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="53" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="53" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga173e81cd9b57c73d0c356dece65870e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe get failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gae9e807fb63bb7186b87015664f2c762d" kindref="member">k_pipe_init()</ref>, <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="90" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="90" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga10d17769b28b81a3f953ba26fcfd81d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_user_get_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_user_get_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test pipe get by a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" kindref="member">k_pipe_alloc_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="106" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gaf50096df170967cc7e2fc27f917701df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_alloc_not_init</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_alloc_not_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" kindref="member">k_pipe_alloc_init()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if an uninitialized <ref refid="structk__pipe" kindref="compound">k_pipe</ref> is passed to <ref refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" kindref="member">k_pipe_alloc_init()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga32a902a5d12ca54b17c2b58783214613" kindref="member">k_pipe_alloc_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="126" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga08fd01aa714d2d7a2d810f8b6244958f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if an uninitialized <ref refid="structk__pipe" kindref="compound">k_pipe</ref> is passed to <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="144" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="144" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga1e0055eef14a99921822a3399e3013c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_unreach_data</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_unreach_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if the parameter address is accessed deny to test k_pipe_get</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="164" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="164" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga1a223d7b04edd91fa4969cc85157443a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_get_unreach_size</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_get_unreach_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if the parameter address is accessed deny to test k_pipe_get</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gada9aaf9a336d98a95441212f4223e9ef" kindref="member">k_pipe_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="188" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="188" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga6a4ed12ff2c406895347bb06bd27d160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_put_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_put_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if a null pointer is passed into the k_pipe_put as a parameter</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="212" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="212" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga28bf8cd0c9f2eb27f7d59973c4eb414b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_put_unreach_data</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_put_unreach_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if the parameter address is accessed deny to test k_pipe_put</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="232" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="232" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga6120256b52268e0f6140229a9c9b338e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_put_unreach_size</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_put_unreach_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if the parameter address is accessed deny to test k_pipe_put</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga5cfd4b75485c7d69f8614030914ad132" kindref="member">k_pipe_put()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="256" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="256" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga2d5d31bcc993c6bdc46a6308aff8c49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_read_avail_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_read_avail_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if a null pointer is passed into the k_pipe_read_avail as a parameter</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="280" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="280" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1gafb08cb3e8962bd5d15e30d5fde85acad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_write_avail_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_write_avail_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>See what will happen if a null pointer is passed into the k_pipe_write_avail as a parameter</para>
<para><simplesect kind="see"><para><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" line="296" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_fail.c" bodystart="296" bodyend="300"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
