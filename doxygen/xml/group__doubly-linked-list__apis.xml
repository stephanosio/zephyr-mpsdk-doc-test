<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__doubly-linked-list__apis" kind="group">
    <compoundname>doubly-linked-list_apis</compoundname>
    <title>Doubly-linked list</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" prot="public" static="no">
        <type>struct _dnode</type>
        <definition>typedef struct _dnode sys_dlist_t</definition>
        <argsstring></argsstring>
        <name>sys_dlist_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="48" column="21" bodyfile="include/sys/dlist.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" prot="public" static="no">
        <type>struct _dnode</type>
        <definition>typedef struct _dnode sys_dnode_t</definition>
        <argsstring></argsstring>
        <name>sys_dnode_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="49" column="21" bodyfile="include/sys/dlist.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__doubly-linked-list__apis_1gaf05dbc7d7250990b971796300aaf6c53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_dlist_init</definition>
        <argsstring>(sys_dlist_t *list)</argsstring>
        <name>sys_dlist_init</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>initialize list to its empty state </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="197" column="20" bodyfile="include/sys/dlist.h" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1gadf15b39af330221921d24505280e7a32" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_dnode_init</definition>
        <argsstring>(sys_dnode_t *node)</argsstring>
        <name>sys_dnode_init</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>initialize node to its state when not in a list </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="211" column="20" bodyfile="include/sys/dlist.h" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1gac725da0c7e65c126a96a9405af84ca41" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_dnode_is_linked</definition>
        <argsstring>(const sys_dnode_t *node)</argsstring>
        <name>sys_dnode_is_linked</name>
        <param>
          <type>const <ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>check if a node is a member of any list </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if node is linked into a list, false if it is not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="225" column="20" bodyfile="include/sys/dlist.h" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga78a2c3d2272ee91578eafbfba3840af4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_dlist_is_head</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_is_head</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>check if a node is the list&apos;s head </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if node is the head, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="239" column="20" bodyfile="include/sys/dlist.h" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga38b8cad6cd6535c8ddc65d623fa967db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_dlist_is_tail</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_is_tail</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>check if a node is the list&apos;s tail </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if node is the tail, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="253" column="20" bodyfile="include/sys/dlist.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1gaaa314b62d8d271071d5603075a961766" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_dlist_is_empty</definition>
        <argsstring>(sys_dlist_t *list)</argsstring>
        <name>sys_dlist_is_empty</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>check if the list is empty </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="266" column="20" bodyfile="include/sys/dlist.h" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga05b1ed491829b98de0200eca523b7829" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_dlist_has_multiple_nodes</definition>
        <argsstring>(sys_dlist_t *list)</argsstring>
        <name>sys_dlist_has_multiple_nodes</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>check if more than one node present </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_dlist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if multiple nodes, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="281" column="20" bodyfile="include/sys/dlist.h" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga6fc11e4682311b6b368d849e1e421183" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_peek_head</definition>
        <argsstring>(sys_dlist_t *list)</argsstring>
        <name>sys_dlist_peek_head</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>get a reference to the head item in the list </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the head element, NULL if list is empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="294" column="27" bodyfile="include/sys/dlist.h" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga7196173f9d59400b52163c2850a22fee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_peek_head_not_empty</definition>
        <argsstring>(sys_dlist_t *list)</argsstring>
        <name>sys_dlist_peek_head_not_empty</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>get a reference to the head item in the list </para>
        </briefdescription>
        <detaileddescription>
<para>The list must be known to be non-empty.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the head element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="309" column="27" bodyfile="include/sys/dlist.h" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga84863ceb4ef678a9d3500d0e876e6afb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_peek_next_no_check</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_peek_next_no_check</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>get a reference to the next item in the list, node is not NULL </para>
        </briefdescription>
        <detaileddescription>
<para>Faster than <ref refid="group__doubly-linked-list__apis_1ga76366019520dc4c2ce2735cf747c1a22" kindref="member">sys_dlist_peek_next()</ref> if node is known not to be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node from which to get the next element in the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the next element from a node, NULL if node is the tail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="325" column="27" bodyfile="include/sys/dlist.h" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga76366019520dc4c2ce2735cf747c1a22" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_peek_next</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_peek_next</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>get a reference to the next item in the list </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node from which to get the next element in the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the next element from a node, NULL if node is the tail or NULL (when node comes from reading the head of an empty list). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="341" column="27" bodyfile="include/sys/dlist.h" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga806259b974b7ea6e42feaeab3987f140" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_peek_prev_no_check</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_peek_prev_no_check</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>get a reference to the previous item in the list, node is not NULL </para>
        </briefdescription>
        <detaileddescription>
<para>Faster than <ref refid="group__doubly-linked-list__apis_1ga23b9f6a10a14c08ccf1fbb7d8518fc43" kindref="member">sys_dlist_peek_prev()</ref> if node is known not to be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node from which to get the previous element in the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the previous element from a node, NULL if node is the tail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="359" column="27" bodyfile="include/sys/dlist.h" bodystart="359" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga23b9f6a10a14c08ccf1fbb7d8518fc43" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_peek_prev</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_peek_prev</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>get a reference to the previous item in the list </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node from which to get the previous element in the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the previous element from a node, NULL if node is the tail or NULL (when node comes from reading the head of an empty list). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="376" column="27" bodyfile="include/sys/dlist.h" bodystart="376" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1gac84d0d3aade5677f7840f51f3c65c095" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_peek_tail</definition>
        <argsstring>(sys_dlist_t *list)</argsstring>
        <name>sys_dlist_peek_tail</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>get a reference to the tail item in the list </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the tail element, NULL if list is empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="390" column="27" bodyfile="include/sys/dlist.h" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga119cb342faf37cd4e97e6361c7ecabe3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_dlist_append</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_append</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>add node to tail of list </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_dlist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="404" column="20" bodyfile="include/sys/dlist.h" bodystart="404" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga6f21ba50e0de93f54bfefeaabe0c767f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_dlist_prepend</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_prepend</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>add node to head of list </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_dlist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="424" column="20" bodyfile="include/sys/dlist.h" bodystart="424" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga94987670c6afd5eabeb9957bb065a071" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_dlist_insert</definition>
        <argsstring>(sys_dnode_t *successor, sys_dnode_t *node)</argsstring>
        <name>sys_dlist_insert</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>successor</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Insert a node into a list. </para>
        </briefdescription>
        <detaileddescription>
<para>Insert a node before a specified node in a dlist.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>successor</parametername>
</parameternamelist>
<parameterdescription>
<para>the position before which &quot;node&quot; will be inserted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="443" column="20" bodyfile="include/sys/dlist.h" bodystart="443" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga667cee0bdd59d8ca3fc82a5bca2bcd48" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_dlist_insert_at</definition>
        <argsstring>(sys_dlist_t *list, sys_dnode_t *node, int(*cond)(sys_dnode_t *node, void *data), void *data)</argsstring>
        <name>sys_dlist_insert_at</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *node, void *<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>)</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>insert node at position </para>
        </briefdescription>
        <detaileddescription>
<para>Insert a node in a location depending on a external condition. The cond() function checks if the node is to be inserted <emphasis>before</emphasis> the current node against which it is checked. This and other sys_dlist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that determines if the current node is the correct insert point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter to cond() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="468" column="20" bodyfile="include/sys/dlist.h" bodystart="468" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga06f88befada25820fba01d2019970e4e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_dlist_remove</definition>
        <argsstring>(sys_dnode_t *node)</argsstring>
        <name>sys_dlist_remove</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>remove a specific node from a list </para>
        </briefdescription>
        <detaileddescription>
<para>The list is implicit from the node. The node must be part of a list. This and other sys_dlist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="496" column="20" bodyfile="include/sys/dlist.h" bodystart="496" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="group__doubly-linked-list__apis_1ga3032394541494771f980e7642ecbc287" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__doubly-linked-list__apis_1ga57fdb936802a617d16c00ab08cd2ad98" kindref="member">sys_dnode_t</ref> *</type>
        <definition>static sys_dnode_t * sys_dlist_get</definition>
        <argsstring>(sys_dlist_t *list)</argsstring>
        <name>sys_dlist_get</name>
        <param>
          <type><ref refid="group__doubly-linked-list__apis_1gaa03f9557215b486fee1039dd4c07e683" kindref="member">sys_dlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>get the first node in a list </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_dlist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the doubly-linked list to operate on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the first node in the list, NULL if list is empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="516" column="27" bodyfile="include/sys/dlist.h" bodystart="516" bodyend="526"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__doubly-linked-list__apis_1ga3788b5bbd11acc885e7378800a8cf974" prot="public" static="no">
        <name>SYS_DLIST_FOR_EACH_NODE</name>
        <param><defname>__dl</defname></param>
        <param><defname>__dn</defname></param>
        <initializer>	for (__dn = <ref refid="group__doubly-linked-list__apis_1ga6fc11e4682311b6b368d849e1e421183" kindref="member">sys_dlist_peek_head</ref>(__dl); __dn != NULL;		\
	     __dn = <ref refid="group__doubly-linked-list__apis_1ga76366019520dc4c2ce2735cf747c1a22" kindref="member">sys_dlist_peek_next</ref>(__dl, __dn))</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list Note: the loop is unsafe and thus __dn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_DLIST_FOR_EACH_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_DLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__dl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_dlist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__dn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_dnode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="67" column="9" bodyfile="include/sys/dlist.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1ga2bda6ba927f32e1d0b71ad63781b9909" prot="public" static="no">
        <name>SYS_DLIST_ITERATE_FROM_NODE</name>
        <param><defname>__dl</defname></param>
        <param><defname>__dn</defname></param>
        <initializer>	for (__dn = __dn ? <ref refid="group__doubly-linked-list__apis_1ga84863ceb4ef678a9d3500d0e876e6afb" kindref="member">sys_dlist_peek_next_no_check</ref>(__dl, __dn) \
			 : <ref refid="group__doubly-linked-list__apis_1ga6fc11e4682311b6b368d849e1e421183" kindref="member">sys_dlist_peek_head</ref>(__dl); \
	     __dn != NULL; \
	     __dn = <ref refid="group__doubly-linked-list__apis_1ga76366019520dc4c2ce2735cf747c1a22" kindref="member">sys_dlist_peek_next</ref>(__dl, __dn))</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list, from a node in the list Note: the loop is unsafe and thus __dn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_DLIST_ITERATE_FROM_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> Like <ref refid="group__doubly-linked-list__apis_1ga3788b5bbd11acc885e7378800a8cf974" kindref="member">SYS_DLIST_FOR_EACH_NODE()</ref>, but __dn already contains a node in the list where to start searching for the next entry from. If NULL, it starts from the head.</para>
<para>This and other SYS_DLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__dl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_dlist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__dn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_dnode_t pointer to peek each node of the list; it contains the starting node, or NULL to start from the head </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="91" column="9" bodyfile="include/sys/dlist.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1ga21c5c7dc311eaba99f00fb2eeca736d9" prot="public" static="no">
        <name>SYS_DLIST_FOR_EACH_NODE_SAFE</name>
        <param><defname>__dl</defname></param>
        <param><defname>__dn</defname></param>
        <param><defname>__dns</defname></param>
        <initializer>	for (__dn = <ref refid="group__doubly-linked-list__apis_1ga6fc11e4682311b6b368d849e1e421183" kindref="member">sys_dlist_peek_head</ref>(__dl),				\
		     __dns = <ref refid="group__doubly-linked-list__apis_1ga76366019520dc4c2ce2735cf747c1a22" kindref="member">sys_dlist_peek_next</ref>(__dl, __dn);		\
	     __dn != NULL; __dn = __dns,				\
		     __dns = <ref refid="group__doubly-linked-list__apis_1ga76366019520dc4c2ce2735cf747c1a22" kindref="member">sys_dlist_peek_next</ref>(__dl, __dn))</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list Note: __dn can be removed, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_DLIST_FOR_EACH_NODE_SAFE(l, n, s) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_DLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__dl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_dlist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__dn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_dnode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__dns</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_dnode_t pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="113" column="9" bodyfile="include/sys/dlist.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1ga33a8bf65e8095e3b4dcee0b005b79170" prot="public" static="no">
        <name>SYS_DLIST_CONTAINER</name>
        <param><defname>__dn</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	((__dn != NULL) ? <ref refid="group__sys-util_1gac5bc561d1bfd1bf68877fe577779bd2f" kindref="member">CONTAINER_OF</ref>(__dn, __typeof__(*__cn), __n) : NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="127" column="9" bodyfile="include/sys/dlist.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1ga6dc66f3e84d3b79fef461d30b56a0f7c" prot="public" static="no">
        <name>SYS_DLIST_PEEK_HEAD_CONTAINER</name>
        <param><defname>__dl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	<ref refid="group__doubly-linked-list__apis_1ga33a8bf65e8095e3b4dcee0b005b79170" kindref="member">SYS_DLIST_CONTAINER</ref>(<ref refid="group__doubly-linked-list__apis_1ga6fc11e4682311b6b368d849e1e421183" kindref="member">sys_dlist_peek_head</ref>(__dl), __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="136" column="9" bodyfile="include/sys/dlist.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1gaffb72234c90286ecf382b93d4db50a19" prot="public" static="no">
        <name>SYS_DLIST_PEEK_NEXT_CONTAINER</name>
        <param><defname>__dl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	((__cn != NULL) ? \
	 <ref refid="group__doubly-linked-list__apis_1ga33a8bf65e8095e3b4dcee0b005b79170" kindref="member">SYS_DLIST_CONTAINER</ref>(<ref refid="group__doubly-linked-list__apis_1ga76366019520dc4c2ce2735cf747c1a22" kindref="member">sys_dlist_peek_next</ref>(__dl, &amp;(__cn-&gt;__n)),	\
				      __cn, __n) : NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="146" column="9" bodyfile="include/sys/dlist.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1gaf9eeb36eef731248c2f57c603feb1b20" prot="public" static="no">
        <name>SYS_DLIST_FOR_EACH_CONTAINER</name>
        <param><defname>__dl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	for (__cn = <ref refid="group__doubly-linked-list__apis_1ga6dc66f3e84d3b79fef461d30b56a0f7c" kindref="member">SYS_DLIST_PEEK_HEAD_CONTAINER</ref>(__dl, __cn, __n);     \
	     __cn != NULL;                                              \
	     __cn = <ref refid="group__doubly-linked-list__apis_1gaffb72234c90286ecf382b93d4db50a19" kindref="member">SYS_DLIST_PEEK_NEXT_CONTAINER</ref>(__dl, __cn, __n))</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list under a container Note: the loop is unsafe and thus __cn should not be detached. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_DLIST_FOR_EACH_CONTAINER(l, c, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__dl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_dlist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_dnode_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="165" column="9" bodyfile="include/sys/dlist.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1gaf07e09986c950b0dd1a0c89d4348f858" prot="public" static="no">
        <name>SYS_DLIST_FOR_EACH_CONTAINER_SAFE</name>
        <param><defname>__dl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__cns</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	for (__cn = <ref refid="group__doubly-linked-list__apis_1ga6dc66f3e84d3b79fef461d30b56a0f7c" kindref="member">SYS_DLIST_PEEK_HEAD_CONTAINER</ref>(__dl, __cn, __n),	\
	     __cns = <ref refid="group__doubly-linked-list__apis_1gaffb72234c90286ecf382b93d4db50a19" kindref="member">SYS_DLIST_PEEK_NEXT_CONTAINER</ref>(__dl, __cn, __n);    \
	     __cn != NULL; __cn = __cns,				\
	     __cns = <ref refid="group__doubly-linked-list__apis_1gaffb72234c90286ecf382b93d4db50a19" kindref="member">SYS_DLIST_PEEK_NEXT_CONTAINER</ref>(__dl, __cn, __n))</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list under a container Note: __cn can be detached, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_DLIST_FOR_EACH_CONTAINER_SAFE(l, c, cn, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__dl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_dlist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cns</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_dnode_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="185" column="9" bodyfile="include/sys/dlist.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__doubly-linked-list__apis_1ga3681d4600f9cbd9237ea9ce6f67e508d" prot="public" static="no">
        <name>SYS_DLIST_STATIC_INIT</name>
        <param><defname>ptr_to_list</defname></param>
        <initializer>{ {(ptr_to_list)}, {(ptr_to_list)} }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/dlist.h" line="203" column="9" bodyfile="include/sys/dlist.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
