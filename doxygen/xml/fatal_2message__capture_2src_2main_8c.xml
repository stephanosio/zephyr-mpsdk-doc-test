<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="fatal_2message__capture_2src_2main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes refid="printk_8h" local="no">sys/printk.h</includes>
    <incdepgraph>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="1">
        <label>tests/kernel/fatal/message_capture/src/main.c</label>
        <link refid="fatal_2message__capture_2src_2main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="fatal_2message__capture_2src_2main_8c_1ae7a9fff43dd4909582bbd79d7ecda899" prot="public" static="yes" mutable="no">
        <type>volatile int</type>
        <definition>volatile int expected_reason</definition>
        <argsstring></argsstring>
        <name>expected_reason</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fatal/message_capture/src/main.c" line="10" column="21" bodyfile="tests/kernel/fatal/message_capture/src/main.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__fatal__apis_1gab6dfd75572a84729df534fde49ef7d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_sys_fatal_error_handler</definition>
        <argsstring>(unsigned int reason, const z_arch_esf_t *pEsf)</argsstring>
        <name>k_sys_fatal_error_handler</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const z_arch_esf_t *</type>
          <declname>esf</declname>
          <defname>pEsf</defname>
        </param>
        <briefdescription>
<para>Fatal error policy handler. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not invoked by application code, but is declared as a weak symbol so that applications may introduce their own policy.</para>
<para>The default implementation of this function halts the system unconditionally. Depending on architecture support, this may be a simple infinite loop, power off the hardware, or exit an emulator.</para>
<para>If this function returns, then the currently executing thread will be aborted.</para>
<para>A few notes for custom implementations:</para>
<para><itemizedlist>
<listitem><para>If the error is determined to be unrecoverable, <ref refid="group__log__ctrl_1ga9ee5a99e0487e3f1e6d289b12c19ad5a" kindref="member">LOG_PANIC()</ref> should be invoked to flush any pending logging buffers.</para>
</listitem><listitem><para>K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel itself, and should not be considered recoverable. There is an assertion in z_fatal_error() to enforce this.</para>
</listitem><listitem><para>Even outside of a kernel panic, unless the fault occurred in user mode, the kernel itself may be in an inconsistent state, with API calls to kernel objects possibly exhibiting undefined behavior or triggering another exception.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason for the fatal error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>esf</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception context, with details and partial or full register state when the error occurred. May in some cases be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fatal/message_capture/src/main.c" line="12" column="6" bodyfile="tests/kernel/fatal/message_capture/src/main.c" bodystart="12" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="fatal_2message__capture_2src_2main_8c_1a41573e360733439dd8d897c1bc2a67b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_message_capture</definition>
        <argsstring>(void)</argsstring>
        <name>test_message_capture</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This test case verifies when fatal error log message can be captured. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>When the fatal error is triggered, if the debugging message function is turned on, the system can capture the log information.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Writing a function deliberately triggers a koops exception.</para>
</listitem><listitem><para>When the log module is enabled, it will log some information in the process of exception.</para>
</listitem><listitem><para>The regex in testcase.yaml verify the kernel will dump thread id information and error type when exception occurs.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The expected log message is caught.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Success if the log matching regex in step 3.</para>
</listitem><listitem><para>Failure if the log is not matching regex in step 3.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fatal/message_capture/src/main.c" line="62" column="6" bodyfile="tests/kernel/fatal/message_capture/src/main.c" bodystart="62" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="fatal_2message__capture_2src_2main_8c_1a6288eba0f8e8ad3ab1544ad731eb7667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/fatal/message_capture/src/main.c" line="74" column="6" bodyfile="tests/kernel/fatal/message_capture/src/main.c" bodystart="74" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="printk_8h" kindref="compound">sys/printk.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fatal_2message__capture_2src_2main_8c_1ae7a9fff43dd4909582bbd79d7ecda899" kindref="member">expected_reason</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__fatal__apis_1gab6dfd75572a84729df534fde49ef7d85" kindref="member">k_sys_fatal_error_handler</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reason,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>z_arch_esf_t<sp/>*pEsf)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Caught<sp/>system<sp/>error<sp/>--<sp/>reason<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>reason);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2message__capture_2src_2main_8c_1ae7a9fff43dd4909582bbd79d7ecda899" kindref="member">expected_reason</ref><sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Was<sp/>not<sp/>expecting<sp/>a<sp/>crash\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fatal__apis_1gaa8c0b43a2360e5319d7910e8e0ceb951" kindref="member">k_fatal_halt</ref>(reason);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reason<sp/>!=<sp/><ref refid="fatal_2message__capture_2src_2main_8c_1ae7a9fff43dd4909582bbd79d7ecda899" kindref="member">expected_reason</ref>)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>crash<sp/>type<sp/>got<sp/>%d<sp/>expected<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>reason,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2message__capture_2src_2main_8c_1ae7a9fff43dd4909582bbd79d7ecda899" kindref="member">expected_reason</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fatal__apis_1gaa8c0b43a2360e5319d7910e8e0ceb951" kindref="member">k_fatal_halt</ref>(reason);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2message__capture_2src_2main_8c_1ae7a9fff43dd4909582bbd79d7ecda899" kindref="member">expected_reason</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fatal_2message__capture_2src_2main_8c_1a41573e360733439dd8d897c1bc2a67b5" kindref="member">test_message_capture</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2message__capture_2src_2main_8c_1ae7a9fff43dd4909582bbd79d7ecda899" kindref="member">expected_reason</ref><sp/>=<sp/><ref refid="group__fatal__apis_1gga5b7e799fa19549ef9416a2d6cba29b52ad6bc280fafebf22e2c97481cc4a5b7c3" kindref="member">K_ERR_KERNEL_OOPS</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref><sp/>=<sp/><ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" kindref="member">k_oops</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;SHOULD<sp/>NEVER<sp/>SEE<sp/>THIS\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock</ref>(<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fatal_2message__capture_2src_2main_8c_1a6288eba0f8e8ad3ab1544ad731eb7667" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2message__capture_2src_2main_8c_1a41573e360733439dd8d897c1bc2a67b5" kindref="member">test_message_capture</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/fatal/message_capture/src/main.c"/>
  </compounddef>
</doxygen>
