<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="heap__listener_8h" kind="file" language="C++">
    <compoundname>heap_listener.h</compoundname>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="slist_8h" local="no">sys/slist.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/sys/heap_listener.h</label>
        <link refid="heap__listener_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="12">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="2">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structheap__listener" prot="public">heap_listener</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__heap__listener__apis_1ga77e603053a5b69caae2a49e441a525c0" prot="public" static="no">
        <name>HEAP_ID_FROM_POINTER</name>
        <param><defname>heap_pointer</defname></param>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)heap_pointer)</initializer>
        <briefdescription>
<para>Construct heap identifier from heap pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct a heap identifer from a pointer to the heap object, such as <ref refid="structsys__heap" kindref="compound">sys_heap</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the heap object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="181" column="9" bodyfile="include/sys/heap_listener.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1ga7627d1b500bb7e833770c99071f9255d" prot="public" static="no">
        <name>HEAP_ID_LIBC</name>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)0)</initializer>
        <briefdescription>
<para>Libc heap identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Identifier of the global libc heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="188" column="9" bodyfile="include/sys/heap_listener.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1ga1854b23cbd41dec0d8262e8f122ebd5d" prot="public" static="no">
        <name>HEAP_LISTENER_ALLOC_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>_heap_id</defname></param>
        <param><defname>_alloc_cb</defname></param>
        <initializer>	struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> name = { \
		.heap_id = _heap_id, \
		.event = <ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a23ece0bd476a164e251ebd1af61f0008" kindref="member">HEAP_ALLOC</ref>, \
		{ \
			.alloc_cb = _alloc_cb \
		}, \
	}</initializer>
        <briefdescription>
<para>Define heap event listener node for allocation event. </para>
        </briefdescription>
        <detaileddescription>
<para>Sample usage: <programlisting><codeline><highlight class="normal">void<sp/>on_heap_alloc(uintptr_t<sp/>heap_id,<sp/>void<sp/>*mem,<sp/>size_t<sp/>bytes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LOG_INF(&quot;Memory<sp/>allocated<sp/>at<sp/>%p,<sp/>size<sp/>%ld&quot;,<sp/>heap_id,<sp/>mem,<sp/>bytes);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">HEAP_LISTENER_ALLOC_DEFINE(my_listener,<sp/>HEAP_ID_LIBC,<sp/>on_heap_alloc);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the heap event listener object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the heap to be listened </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_alloc_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be called for allocation event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="207" column="9" bodyfile="include/sys/heap_listener.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1ga7e5822ebd4c08235b01cf99cd6fe10e8" prot="public" static="no">
        <name>HEAP_LISTENER_FREE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>_heap_id</defname></param>
        <param><defname>_free_cb</defname></param>
        <initializer>	struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> name = { \
		.heap_id = _heap_id, \
		.event = <ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a82e2137ada931f068fa36d40245f5a80" kindref="member">HEAP_FREE</ref>, \
		{ \
			.free_cb = _free_cb \
		}, \
	}</initializer>
        <briefdescription>
<para>Define heap event listener node for free event. </para>
        </briefdescription>
        <detaileddescription>
<para>Sample usage: <programlisting><codeline><highlight class="normal">void<sp/>on_heap_free(uintptr_t<sp/>heap_id,<sp/>void<sp/>*mem,<sp/>size_t<sp/>bytes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LOG_INF(&quot;Memory<sp/>freed<sp/>at<sp/>%p,<sp/>size<sp/>%ld&quot;,<sp/>heap_id,<sp/>mem,<sp/>bytes);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">HEAP_LISTENER_FREE_DEFINE(my_listener,<sp/>HEAP_ID_LIBC,<sp/>on_heap_free);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the heap event listener object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the heap to be listened </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_free_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be called for free event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="233" column="9" bodyfile="include/sys/heap_listener.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1gaa4fa9685749e050ca06e7cdc99b7c970" prot="public" static="no">
        <name>HEAP_LISTENER_RESIZE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>_heap_id</defname></param>
        <param><defname>_resize_cb</defname></param>
        <initializer>	struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> name = { \
		.heap_id = _heap_id, \
		.event = <ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a198aa2475e58078a46cf79ffb0914408" kindref="member">HEAP_RESIZE</ref>, \
		{ \
			.resize_cb = _resize_cb \
		}, \
	}</initializer>
        <briefdescription>
<para>Define heap event listener node for resize event. </para>
        </briefdescription>
        <detaileddescription>
<para>Sample usage: <programlisting><codeline><highlight class="normal">void<sp/>on_heap_resized(uintptr_t<sp/>heap_id,<sp/>void<sp/>*old_heap_end,<sp/>void<sp/>*new_heap_end)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LOG_INF(&quot;Libc<sp/>heap<sp/>end<sp/>moved<sp/>from<sp/>%p<sp/>to<sp/>%p&quot;,<sp/>old_heap_end,<sp/>new_heap_end);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">HEAP_LISTENER_RESIZE_DEFINE(my_listener,<sp/>HEAP_ID_LIBC,<sp/>on_heap_resized);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the heap event listener object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the heap to be listened </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_resize_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be called when the listened heap is resized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="259" column="9" bodyfile="include/sys/heap_listener.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__heap__listener__apis_1ga9679320e1c32dcbad726789946565510" prot="public" static="no" strong="no">
        <type></type>
        <name>heap_event_types</name>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510ae82b3e0225bde5553f472c5f00985b18" prot="public">
          <name>HEAP_EVT_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a198aa2475e58078a46cf79ffb0914408" prot="public">
          <name>HEAP_RESIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a23ece0bd476a164e251ebd1af61f0008" prot="public">
          <name>HEAP_ALLOC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a82e2137ada931f068fa36d40245f5a80" prot="public">
          <name>HEAP_FREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510aa64f229b21eedbca9a581b60e3da5a50" prot="public">
          <name>HEAP_REALLOC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510afb3a6f56a29d74c35db90fbeaa61a3b6" prot="public">
          <name>HEAP_MAX_EVENTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="25" column="1" bodyfile="include/sys/heap_listener.h" bodystart="25" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__heap__listener__apis_1ga38ae35495e88e699bfa26685e36ae0cc" prot="public" static="no">
        <type>void(*</type>
        <definition>heap_listener_resize_cb_t</definition>
        <argsstring>)(uintptr_t heap_id, void *old_heap_end, void *new_heap_end)</argsstring>
        <name>heap_listener_resize_cb_t</name>
        <briefdescription>
<para>Callback used when heap is resized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Minimal C library does not emit this event.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of heap being resized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to end of heap before resize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to end of heap after resize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="50" column="9" bodyfile="include/sys/heap_listener.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__heap__listener__apis_1ga9bcf93f882c1af68fe7ae0e7fe4235c3" prot="public" static="no">
        <type>void(*</type>
        <definition>heap_listener_alloc_cb_t</definition>
        <argsstring>)(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_alloc_cb_t</name>
        <briefdescription>
<para>Callback used when there is heap allocation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Heaps managed by libraries outside of code in Zephyr main code repository may not emit this event.</para>
</simplesect>
<simplesect kind="note"><para>The number of bytes allocated may not match exactly to the request to the allocation function. Internal mechanism of the heap may allocate more than requested.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of allocated memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="70" column="9" bodyfile="include/sys/heap_listener.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__heap__listener__apis_1gacaf76642922706c2bff8a57f9efe7e8f" prot="public" static="no">
        <type>void(*</type>
        <definition>heap_listener_free_cb_t</definition>
        <argsstring>)(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_free_cb_t</name>
        <briefdescription>
<para>Callback used when memory is freed from heap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Heaps managed by libraries outside of code in Zephyr main code repository may not emit this event.</para>
</simplesect>
<simplesect kind="note"><para>The number of bytes freed may not match exactly to the request to the allocation function. Internal mechanism of the heap dictates how memory is allocated or freed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the freed memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of freed memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="89" column="9" bodyfile="include/sys/heap_listener.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__heap__listener__apis_1ga63d5470d9ca312ccc80d35c7f8dea200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_register</definition>
        <argsstring>(struct heap_listener *listener)</argsstring>
        <name>heap_listener_register</name>
        <param>
          <type>struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Register heap event listener. </para>
        </briefdescription>
        <detaileddescription>
<para>Add the listener to the global list of heap listeners that can be notified by different heap implementations upon certain events related to the heap usage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structheap__listener" kindref="compound">heap_listener</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="124" column="6" declfile="include/sys/heap_listener.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1ga872e123af0a5349e45fcedfd8b83b508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_unregister</definition>
        <argsstring>(struct heap_listener *listener)</argsstring>
        <name>heap_listener_unregister</name>
        <param>
          <type>struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Unregister heap event listener. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the listener from the global list of heap listeners that can be notified by different heap implementations upon certain events related to the heap usage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structheap__listener" kindref="compound">heap_listener</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="135" column="6" declfile="include/sys/heap_listener.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1gaebe49e01cba6d327c635da4795e37e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_notify_alloc</definition>
        <argsstring>(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_notify_alloc</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>heap_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Notify listeners of heap allocation event. </para>
        </briefdescription>
        <detaileddescription>
<para>Notify registered heap event listeners with matching heap identifier that an allocation has been done on heap</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of allocated memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="147" column="6" declfile="include/sys/heap_listener.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1ga8fd3dc5b65e3bc8bbc1dadaa741d47fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_notify_free</definition>
        <argsstring>(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_notify_free</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>heap_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Notify listeners of heap free event. </para>
        </briefdescription>
        <detaileddescription>
<para>Notify registered heap event listeners with matching heap identifier that memory is freed on heap</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the freed memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of freed memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="159" column="6" declfile="include/sys/heap_listener.h" declline="159" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1ga9d3062fbcdc10edc3839193e8ea79654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_notify_resize</definition>
        <argsstring>(uintptr_t heap_id, void *old_heap_end, void *new_heap_end)</argsstring>
        <name>heap_listener_notify_resize</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>heap_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>old_heap_end</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>new_heap_end</declname>
        </param>
        <briefdescription>
<para>Notify listeners of heap resize event. </para>
        </briefdescription>
        <detaileddescription>
<para>Notify registered heap event listeners with matching heap identifier that the heap has been resized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the heap end before the change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the heap end after the change </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="171" column="6" declfile="include/sys/heap_listener.h" declline="171" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_HEAP_LISTENER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_HEAP_LISTENER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="slist_8h" kindref="compound">sys/slist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_HEAP_LISTENER)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="group__heap__listener__apis_1ga9679320e1c32dcbad726789946565510" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga9679320e1c32dcbad726789946565510" kindref="member">heap_event_types</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Dummy<sp/>event<sp/>so<sp/>an<sp/>un-initialized<sp/>but<sp/>zero-ed<sp/>listener<sp/>node</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>will<sp/>not<sp/>trigger<sp/>any<sp/>callbacks.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510ae82b3e0225bde5553f472c5f00985b18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510ae82b3e0225bde5553f472c5f00985b18" kindref="member">HEAP_EVT_UNKNOWN</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a198aa2475e58078a46cf79ffb0914408" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a198aa2475e58078a46cf79ffb0914408" kindref="member">HEAP_RESIZE</ref>,</highlight></codeline>
<codeline lineno="33" refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a23ece0bd476a164e251ebd1af61f0008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a23ece0bd476a164e251ebd1af61f0008" kindref="member">HEAP_ALLOC</ref>,</highlight></codeline>
<codeline lineno="34" refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a82e2137ada931f068fa36d40245f5a80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a82e2137ada931f068fa36d40245f5a80" kindref="member">HEAP_FREE</ref>,</highlight></codeline>
<codeline lineno="35" refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510aa64f229b21eedbca9a581b60e3da5a50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510aa64f229b21eedbca9a581b60e3da5a50" kindref="member">HEAP_REALLOC</ref>,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510afb3a6f56a29d74c35db90fbeaa61a3b6" kindref="member">HEAP_MAX_EVENTS</ref></highlight></codeline>
<codeline lineno="38" refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510afb3a6f56a29d74c35db90fbeaa61a3b6" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="group__heap__listener__apis_1ga38ae35495e88e699bfa26685e36ae0cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__heap__listener__apis_1ga38ae35495e88e699bfa26685e36ae0cc" kindref="member">heap_listener_resize_cb_t</ref>)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_heap_end,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_heap_end);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__heap__listener__apis_1ga9bcf93f882c1af68fe7ae0e7fe4235c3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__heap__listener__apis_1ga9bcf93f882c1af68fe7ae0e7fe4235c3" kindref="member">heap_listener_alloc_cb_t</ref>)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group__heap__listener__apis_1gacaf76642922706c2bff8a57f9efe7e8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__heap__listener__apis_1gacaf76642922706c2bff8a57f9efe7e8f" kindref="member">heap_listener_free_cb_t</ref>)(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structheap__listener" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structheap__listener" kindref="compound">heap_listener</ref><sp/>{</highlight></codeline>
<codeline lineno="94" refid="structheap__listener_1ab0f3071d7828856bcbee55ff9791a27c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structheap__listener_1ab0f3071d7828856bcbee55ff9791a27c" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structheap__listener_1a9b13bffbb860ea78207b4ebe7c61b768" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="structheap__listener_1a9b13bffbb860ea78207b4ebe7c61b768" kindref="member">heap_id</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="structheap__listener_1a1ef2db791f5422fa7e6bb17c2b6bf247" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga9679320e1c32dcbad726789946565510" kindref="member">heap_event_types</ref><sp/><ref refid="structheap__listener_1a1ef2db791f5422fa7e6bb17c2b6bf247" kindref="member">event</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110" refid="structheap__listener_1a34a982da6ecc3564ef2194f045eea646" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1ga9bcf93f882c1af68fe7ae0e7fe4235c3" kindref="member">heap_listener_alloc_cb_t</ref><sp/><ref refid="structheap__listener_1a34a982da6ecc3564ef2194f045eea646" kindref="member">alloc_cb</ref>;</highlight></codeline>
<codeline lineno="111" refid="structheap__listener_1a46a7f4856397851c64ce07c95b1d9b19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1gacaf76642922706c2bff8a57f9efe7e8f" kindref="member">heap_listener_free_cb_t</ref><sp/><ref refid="structheap__listener_1a46a7f4856397851c64ce07c95b1d9b19" kindref="member">free_cb</ref>;</highlight></codeline>
<codeline lineno="112" refid="structheap__listener_1a0dcba80daeebe0be96d5e75051cbf287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__heap__listener__apis_1ga38ae35495e88e699bfa26685e36ae0cc" kindref="member">heap_listener_resize_cb_t</ref><sp/><ref refid="structheap__listener_1a0dcba80daeebe0be96d5e75051cbf287" kindref="member">resize_cb</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="group__heap__listener__apis_1ga63d5470d9ca312ccc80d35c7f8dea200" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga63d5470d9ca312ccc80d35c7f8dea200" kindref="member">heap_listener_register</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structheap__listener" kindref="compound">heap_listener</ref><sp/>*listener);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="group__heap__listener__apis_1ga872e123af0a5349e45fcedfd8b83b508" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga872e123af0a5349e45fcedfd8b83b508" kindref="member">heap_listener_unregister</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structheap__listener" kindref="compound">heap_listener</ref><sp/>*listener);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="group__heap__listener__apis_1gaebe49e01cba6d327c635da4795e37e22" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1gaebe49e01cba6d327c635da4795e37e22" kindref="member">heap_listener_notify_alloc</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="group__heap__listener__apis_1ga8fd3dc5b65e3bc8bbc1dadaa741d47fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga8fd3dc5b65e3bc8bbc1dadaa741d47fc" kindref="member">heap_listener_notify_free</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="group__heap__listener__apis_1ga9d3062fbcdc10edc3839193e8ea79654" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga9d3062fbcdc10edc3839193e8ea79654" kindref="member">heap_listener_notify_resize</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_heap_end,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_heap_end);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="group__heap__listener__apis_1ga77e603053a5b69caae2a49e441a525c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEAP_ID_FROM_POINTER(heap_pointer)<sp/>((uintptr_t)heap_pointer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="group__heap__listener__apis_1ga7627d1b500bb7e833770c99071f9255d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEAP_ID_LIBC<sp/>((uintptr_t)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="group__heap__listener__apis_1ga1854b23cbd41dec0d8262e8f122ebd5d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEAP_LISTENER_ALLOC_DEFINE(name,<sp/>_heap_id,<sp/>_alloc_cb)<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>heap_listener<sp/>name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.heap_id<sp/>=<sp/>_heap_id,<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.event<sp/>=<sp/>HEAP_ALLOC,<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.alloc_cb<sp/>=<sp/>_alloc_cb<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="group__heap__listener__apis_1ga7e5822ebd4c08235b01cf99cd6fe10e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEAP_LISTENER_FREE_DEFINE(name,<sp/>_heap_id,<sp/>_free_cb)<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>heap_listener<sp/>name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.heap_id<sp/>=<sp/>_heap_id,<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.event<sp/>=<sp/>HEAP_FREE,<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.free_cb<sp/>=<sp/>_free_cb<sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="group__heap__listener__apis_1gaa4fa9685749e050ca06e7cdc99b7c970" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEAP_LISTENER_RESIZE_DEFINE(name,<sp/>_heap_id,<sp/>_resize_cb)<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>heap_listener<sp/>name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.heap_id<sp/>=<sp/>_heap_id,<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.event<sp/>=<sp/>HEAP_RESIZE,<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.resize_cb<sp/>=<sp/>_resize_cb<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_HEAP_LISTENER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEAP_ID_FROM_POINTER(heap_pointer)<sp/>((uintptr_t)NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1gaebe49e01cba6d327c635da4795e37e22" kindref="member">heap_listener_notify_alloc</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(heap_id);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(mem);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(bytes);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga8fd3dc5b65e3bc8bbc1dadaa741d47fc" kindref="member">heap_listener_notify_free</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(heap_id);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(mem);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(bytes);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__heap__listener__apis_1ga9d3062fbcdc10edc3839193e8ea79654" kindref="member">heap_listener_notify_resize</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>heap_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_heap_end,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_heap_end)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(heap_id);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(old_heap_end);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(new_heap_end);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_HEAP_LISTENER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_HEAP_LISTENER_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/heap_listener.h"/>
  </compounddef>
</doxygen>
