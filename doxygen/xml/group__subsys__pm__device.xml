<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__subsys__pm__device" kind="group">
    <compoundname>subsys_pm_device</compoundname>
    <title>Device</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__subsys__pm__device_1ga561c0789071e3c3963f21f4c4a1bb2c6" prot="public" static="no" strong="no">
        <type></type>
        <name>pm_device_state</name>
        <enumvalue id="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a54b207e01b4dfc5e1ff56149817120c7" prot="public">
          <name>PM_DEVICE_STATE_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Device is in active or regular state. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a03f61cb7cd5e4820c1c731500fd053b5" prot="public">
          <name>PM_DEVICE_STATE_SUSPENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Device is suspended.</para>
<para><simplesect kind="note"><para>Device context may be lost. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a51a5904aff980deff73d29568b6f7deb" prot="public">
          <name>PM_DEVICE_STATE_SUSPENDING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Device is being suspended. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__subsys__pm__device_1gga561c0789071e3c3963f21f4c4a1bb2c6a2456389354b744d4e96847e38f8b61c2" prot="public">
          <name>PM_DEVICE_STATE_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Device is turned off (power removed).</para>
<para><simplesect kind="note"><para>Device context is lost. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Device power states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="49" column="1" bodyfile="include/pm/device.h" bodystart="49" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="group__subsys__pm__device_1gaee5546eacb9be7caa9d59ab63926cc4c" prot="public" static="no" strong="no">
        <type></type>
        <name>pm_device_action</name>
        <enumvalue id="group__subsys__pm__device_1ggaee5546eacb9be7caa9d59ab63926cc4ca5b7ae11deaee85eb0b8452bc89383790" prot="public">
          <name>PM_DEVICE_ACTION_SUSPEND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Suspend. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__subsys__pm__device_1ggaee5546eacb9be7caa9d59ab63926cc4ca757c6ab81eeac0d6afae479d6a0ac564" prot="public">
          <name>PM_DEVICE_ACTION_RESUME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Resume. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__subsys__pm__device_1ggaee5546eacb9be7caa9d59ab63926cc4ca2bcd7dee3a85b27157bbc465bacf521e" prot="public">
          <name>PM_DEVICE_ACTION_TURN_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Turn off. <simplesect kind="note"><para>Action triggered only by a power domain. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__subsys__pm__device_1ggaee5546eacb9be7caa9d59ab63926cc4cac7690e0ffd27742acf58fdbdb7b89544" prot="public">
          <name>PM_DEVICE_ACTION_TURN_ON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Turn on. <simplesect kind="note"><para>Action triggered only by a power domain. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__subsys__pm__device_1ggaee5546eacb9be7caa9d59ab63926cc4ca63772d89ffcae03af7b1aa2cfd16cba3" prot="public">
          <name>PM_DEVICE_ACTION_FORCE_SUSPEND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Force suspend. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Device PM actions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="71" column="1" bodyfile="include/pm/device.h" bodystart="71" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__subsys__pm__device_1gad109511e4314fa6145ee97dd655ec7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * pm_device_state_str</definition>
        <argsstring>(enum pm_device_state state)</argsstring>
        <name>pm_device_state_str</name>
        <param>
          <type>enum <ref refid="group__subsys__pm__device_1ga561c0789071e3c3963f21f4c4a1bb2c6" kindref="member">pm_device_state</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Get name of device PM state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>State id which name should be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="315" column="12" declfile="include/pm/device.h" declline="315" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga37fb93d42a507abc7aa51c4a08e5353c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_state_set</definition>
        <argsstring>(const struct device *dev, enum pm_device_state state)</argsstring>
        <name>pm_device_state_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__subsys__pm__device_1ga561c0789071e3c3963f21f4c4a1bb2c6" kindref="member">pm_device_state</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Set the power state of a device. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__subsys__pm__device_1ga3840d6e7832a00b93763247a5951bfde" kindref="member">pm_device_action_run()</ref> instead.</para>
</xrefdescription></xrefsect></para>
<para>This function calls the device PM control callback so that the device does the necessary operations to put the device into the given state.</para>
<para><simplesect kind="note"><para>Some devices may not support all device power states.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Device power state to be set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If requested state is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is already at the requested state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is changing its state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If device does not support PM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>If device has power state locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="338" column="6" declfile="include/pm/device.h" declline="338" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gaffcf0aea5df10657235d4ed1f8c74d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_state_get</definition>
        <argsstring>(const struct device *dev, enum pm_device_state *state)</argsstring>
        <name>pm_device_state_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__subsys__pm__device_1ga561c0789071e3c3963f21f4c4a1bb2c6" kindref="member">pm_device_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Obtain the power state of a device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer where device power state will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If device does not implement power management. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="350" column="5" declfile="include/pm/device.h" declline="350" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga3840d6e7832a00b93763247a5951bfde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pm_device_action_run</definition>
        <argsstring>(const struct device *dev, enum pm_device_action action)</argsstring>
        <name>pm_device_action_run</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__subsys__pm__device_1gaee5546eacb9be7caa9d59ab63926cc4c" kindref="member">pm_device_action</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Run a pm action on a device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calls the device PM control callback so that the device does the necessary operations to execute the given action.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pm action.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If requested state is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is already at the requested state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is changing its state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If device does not support PM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>If device has power state locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno on failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="370" column="5" declfile="include/pm/device.h" declline="370" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga765a5412f66070ccefd8e80ed9f62b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_device_children_action_run</definition>
        <argsstring>(const struct device *dev, enum pm_device_action action, pm_device_action_failed_cb_t failure_cb)</argsstring>
        <name>pm_device_children_action_run</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__subsys__pm__device_1gaee5546eacb9be7caa9d59ab63926cc4c" kindref="member">pm_device_action</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>pm_device_action_failed_cb_t</type>
          <declname>failure_cb</declname>
        </param>
        <briefdescription>
<para>Run a pm action on all children of a device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calls all child devices PM control callback so that the device does the necessary operations to execute the given action.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Device pm action. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failure_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call if a child fails the action, can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="383" column="6" declfile="include/pm/device.h" declline="383" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga7ea002352f3d1c90aecff1d54c255a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_device_busy_set</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_busy_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Mark a device as busy. </para>
        </briefdescription>
        <detaileddescription>
<para>Devices marked as busy will not be suspended when the system goes into low-power states. This can be useful if, for example, the device is in the middle of a transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device_1ga8b527314f0c61b85602876b4f5a52275" kindref="member">pm_device_busy_clear()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="399" column="6" declfile="include/pm/device.h" declline="399" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga8b527314f0c61b85602876b4f5a52275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_device_busy_clear</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_busy_clear</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Clear a device busy status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device_1ga7ea002352f3d1c90aecff1d54c255a06" kindref="member">pm_device_busy_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="408" column="6" declfile="include/pm/device.h" declline="408" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gae59a1fbcd2399717076fbfcee1e5e411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_is_any_busy</definition>
        <argsstring>(void)</argsstring>
        <name>pm_device_is_any_busy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if any device is busy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If no device is busy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If one or more devices are busy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="416" column="6" declfile="include/pm/device.h" declline="416" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga8ff7c3197d5ded860878302d00ac709c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_is_busy</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_is_busy</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if a device is busy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device is not busy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device is busy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="426" column="6" declfile="include/pm/device.h" declline="426" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga8837ac66f849821757b3638bbb65d3ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_wakeup_enable</definition>
        <argsstring>(struct device *dev, bool enable)</argsstring>
        <name>pm_device_wakeup_enable</name>
        <param>
          <type>struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable or disable a device as a wake up source. </para>
        </briefdescription>
        <detaileddescription>
<para>A device marked as a wake up source will not be suspended when the system goes into low-power modes, thus allowing to use it as a wake up source for the system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> to enable or <computeroutput>false</computeroutput> to disable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If the wakeup source was successfully enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If the wakeup source was not successfully enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="441" column="6" declfile="include/pm/device.h" declline="441" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga0716c6158804ac48022280d8d237f8c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_wakeup_is_enabled</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_wakeup_is_enabled</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if a device is enabled as a wake up source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the wakeup source is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if the wakeup source is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="451" column="6" declfile="include/pm/device.h" declline="451" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gac818aafb748b57d70909808b45d89379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_wakeup_is_capable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_wakeup_is_capable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if a device is wake up capable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device is wake up capable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device is not wake up capable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="461" column="6" declfile="include/pm/device.h" declline="461" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gaab27e932950e1063b2f1f4c4e19dbf01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_device_state_lock</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_state_lock</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Lock current device state. </para>
        </briefdescription>
        <detaileddescription>
<para>This function locks the current device power state. Once locked the device power state will not be changed by system power management or device runtime power management until unlocked.</para>
<para><simplesect kind="note"><para>The given device should not have device runtime enabled.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device_1gaa5d2387a01a4ca4d765b1ea2361155bb" kindref="member">pm_device_state_unlock</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="477" column="6" declfile="include/pm/device.h" declline="477" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gaa5d2387a01a4ca4d765b1ea2361155bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pm_device_state_unlock</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_state_unlock</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Unlock the current device state. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlocks a previously locked device pm.</para>
<para><simplesect kind="see"><para><ref refid="group__subsys__pm__device_1gaab27e932950e1063b2f1f4c4e19dbf01" kindref="member">pm_device_state_lock</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="488" column="6" declfile="include/pm/device.h" declline="488" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gaf577cada579b6f871bc55e4a282ef8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_state_is_locked</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_state_is_locked</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if the device pm is locked. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is not locked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="498" column="6" declfile="include/pm/device.h" declline="498" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga32eb5e210d2f0ba533b0185a94c8744e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool pm_device_on_power_domain</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>pm_device_on_power_domain</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if the device is on a switchable power domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is on a switchable power domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is not on a switchable power domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="508" column="6" declfile="include/pm/device.h" declline="508" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gabfaec92a92766154b8b9ac9dd29f2c1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void device_busy_set</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>device_busy_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark a device as busy.</para>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__subsys__pm__device_1ga7ea002352f3d1c90aecff1d54c255a06" kindref="member">pm_device_busy_set()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="568" column="21" bodyfile="include/pm/device.h" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1gadff113f34359db32c8739294143a1c8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void device_busy_clear</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>device_busy_clear</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Clear busy status of a device. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__subsys__pm__device_1ga8b527314f0c61b85602876b4f5a52275" kindref="member">pm_device_busy_clear()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="580" column="21" bodyfile="include/pm/device.h" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga9ee3ee2f5dac79c85fc901c179fbadf9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int device_any_busy_check</definition>
        <argsstring>(void)</argsstring>
        <name>device_any_busy_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if any device is busy. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__subsys__pm__device_1gae59a1fbcd2399717076fbfcee1e5e411" kindref="member">pm_device_is_any_busy()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>No devices are busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more devices are busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="593" column="20" bodyfile="include/pm/device.h" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="group__subsys__pm__device_1ga24bd4cb295002584c4f8183e937badc1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int device_busy_check</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>device_busy_check</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if a device is busy. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__subsys__pm__device_1ga8ff7c3197d5ded860878302d00ac709c" kindref="member">pm_device_is_busy()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Device is not busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Device is busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="608" column="20" bodyfile="include/pm/device.h" bodystart="608" bodyend="611"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__subsys__pm__device_1ga26e9cbf9103b9ddda42527740c905b02" prot="public" static="no">
        <name>PM_DEVICE_DEFINE</name>
        <param><defname>dev_name</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <initializer>	Z_PM_DEVICE_DEFINE(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name, pm_action_cb)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define device PM resources for the given device name.</para>
<para><simplesect kind="note"><para>This macro is a no-op if <verbatim>embed:rst:inline :kconfig:`CONFIG_PM_DEVICE` </verbatim> is not enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Device name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>PM control callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device_1gaf625e31cd9c3f992c826872ac3b93554" kindref="member">PM_DEVICE_DT_DEFINE</ref>, <ref refid="group__subsys__pm__device_1ga0fbb1dca1f65934b20970076a4bcaf88" kindref="member">PM_DEVICE_DT_INST_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="245" column="9" bodyfile="include/pm/device.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__pm__device_1gaf625e31cd9c3f992c826872ac3b93554" prot="public" static="no">
        <name>PM_DEVICE_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <initializer>	Z_PM_DEVICE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id),	\
			   pm_action_cb)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define device PM resources for the given node identifier.</para>
<para><simplesect kind="note"><para>This macro is a no-op if <verbatim>embed:rst:inline :kconfig:`CONFIG_PM_DEVICE` </verbatim> is not enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>PM control callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device_1ga0fbb1dca1f65934b20970076a4bcaf88" kindref="member">PM_DEVICE_DT_INST_DEFINE</ref>, <ref refid="group__subsys__pm__device_1ga26e9cbf9103b9ddda42527740c905b02" kindref="member">PM_DEVICE_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="258" column="9" bodyfile="include/pm/device.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__pm__device_1ga0fbb1dca1f65934b20970076a4bcaf88" prot="public" static="no">
        <name>PM_DEVICE_DT_INST_DEFINE</name>
        <param><defname>idx</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <initializer>	Z_PM_DEVICE_DEFINE(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(idx),				\
			   Z_DEVICE_DT_DEV_NAME(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(idx)),	\
			   pm_action_cb)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define device PM resources for the given instance.</para>
<para><simplesect kind="note"><para>This macro is a no-op if <verbatim>embed:rst:inline :kconfig:`CONFIG_PM_DEVICE` </verbatim> is not enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>PM control callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__subsys__pm__device_1gaf625e31cd9c3f992c826872ac3b93554" kindref="member">PM_DEVICE_DT_DEFINE</ref>, <ref refid="group__subsys__pm__device_1ga26e9cbf9103b9ddda42527740c905b02" kindref="member">PM_DEVICE_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="272" column="9" bodyfile="include/pm/device.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__pm__device_1gafce1f14890ebdb9317486a85e68c47f3" prot="public" static="no">
        <name>PM_DEVICE_GET</name>
        <param><defname>dev_name</defname></param>
        <initializer>	Z_PM_DEVICE_GET(dev_name)</initializer>
        <briefdescription>
<para>Obtain a reference to the device PM resources for the given device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Device name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the device PM resources (NULL if device <verbatim>embed:rst:inline :kconfig:`CONFIG_PM_DEVICE` </verbatim> is disabled). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="285" column="9" bodyfile="include/pm/device.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__pm__device_1gad244d742bc6b9874bfb90a2c3c87c4e8" prot="public" static="no">
        <name>PM_DEVICE_DT_GET</name>
        <param><defname>node_id</defname></param>
        <initializer>	<ref refid="group__subsys__pm__device_1gafce1f14890ebdb9317486a85e68c47f3" kindref="member">PM_DEVICE_GET</ref>(Z_DEVICE_DT_DEV_NAME(node_id))</initializer>
        <briefdescription>
<para>Obtain a reference to the device PM resources for the given node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the device PM resources (NULL if device <verbatim>embed:rst:inline :kconfig:`CONFIG_PM_DEVICE` </verbatim> is disabled). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="296" column="9" bodyfile="include/pm/device.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__pm__device_1ga52892f2c34f6ccc9598002625baf12ce" prot="public" static="no">
        <name>PM_DEVICE_DT_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__subsys__pm__device_1gad244d742bc6b9874bfb90a2c3c87c4e8" kindref="member">PM_DEVICE_DT_GET</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(idx))</initializer>
        <briefdescription>
<para>Obtain a reference to the device PM resources for the given instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the device PM resources (NULL if device <verbatim>embed:rst:inline :kconfig:`CONFIG_PM_DEVICE` </verbatim> is disabled). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pm/device.h" line="307" column="9" bodyfile="include/pm/device.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Device Power Management API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
