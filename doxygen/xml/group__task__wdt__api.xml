<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__task__wdt__api" kind="group">
    <compoundname>task_wdt_api</compoundname>
    <title>Task Watchdog APIs</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__task__wdt__api_1gab9b9e2dd0eb52e324806cc5090507c45" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* task_wdt_callback_t) (int channel_id, void *user_data)</definition>
        <argsstring>)(int channel_id, void *user_data)</argsstring>
        <name>task_wdt_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task watchdog callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/task_wdt/task_wdt.h" line="36" column="9" bodyfile="include/task_wdt/task_wdt.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__task__wdt__api_1gafa31c31c13478669615ebf0bbdd28a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int task_wdt_init</definition>
        <argsstring>(const struct device *hw_wdt)</argsstring>
        <name>task_wdt_init</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>hw_wdt</declname>
        </param>
        <briefdescription>
<para>Initialize task watchdog. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets up necessary kernel timers and the hardware watchdog (if desired as fallback). It has to be called before <ref refid="group__task__wdt__api_1ga26484bd148a9e2910d9989a1d9598230" kindref="member">task_wdt_add()</ref> and <ref refid="group__task__wdt__api_1ga00fc594cace06d6308efa1ded45a22fc" kindref="member">task_wdt_feed()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hw_wdt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the hardware watchdog device used as fallback. Pass NULL if no hardware watchdog fallback is desired.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If assigning a hardware watchdog is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-Errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno if the fallback hw_wdt is used and the install timeout API fails. See <ref refid="group__watchdog__interface_1ga5be7aa7f1987be0e69c74b62d1c126a5" kindref="member">wdt_install_timeout()</ref> API for possible return values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/task_wdt/task_wdt.h" line="54" column="5" declfile="include/task_wdt/task_wdt.h" declline="54" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__task__wdt__api_1ga26484bd148a9e2910d9989a1d9598230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int task_wdt_add</definition>
        <argsstring>(uint32_t reload_period, task_wdt_callback_t callback, void *user_data)</argsstring>
        <name>task_wdt_add</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>reload_period</declname>
        </param>
        <param>
          <type><ref refid="group__task__wdt__api_1gab9b9e2dd0eb52e324806cc5090507c45" kindref="member">task_wdt_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Install new timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a new timeout to the list of task watchdog channels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reload_period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period in milliseconds used to reset the timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be called when watchdog timer expired. Pass NULL to use system reset handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to associate with the watchdog channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful, a non-negative value indicating the index of the channel to which the timeout was assigned. This ID is supposed to be used as the parameter in calls to <ref refid="group__task__wdt__api_1ga00fc594cace06d6308efa1ded45a22fc" kindref="member">task_wdt_feed()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If the reload_period is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>If no more timeouts can be installed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/task_wdt/task_wdt.h" line="73" column="5" declfile="include/task_wdt/task_wdt.h" declline="73" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__task__wdt__api_1ga631c1243b5a00a304687cc54e2632c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int task_wdt_delete</definition>
        <argsstring>(int channel_id)</argsstring>
        <name>task_wdt_delete</name>
        <param>
          <type>int</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete task watchdog channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes the specified channel from the list of task watchdog channels. The channel is now available again for other tasks via <ref refid="group__task__wdt__api_1ga26484bd148a9e2910d9989a1d9598230" kindref="member">task_wdt_add()</ref> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the channel as returned by <ref refid="group__task__wdt__api_1ga26484bd148a9e2910d9989a1d9598230" kindref="member">task_wdt_add()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If there is no installed timeout for supplied channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/task_wdt/task_wdt.h" line="87" column="5" declfile="include/task_wdt/task_wdt.h" declline="87" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__task__wdt__api_1ga00fc594cace06d6308efa1ded45a22fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int task_wdt_feed</definition>
        <argsstring>(int channel_id)</argsstring>
        <name>task_wdt_feed</name>
        <param>
          <type>int</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Feed specified watchdog channel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function loops through all installed task watchdogs and updates the internal kernel timer used as for the software watchdog with the next due timeout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the fed channel as returned by <ref refid="group__task__wdt__api_1ga26484bd148a9e2910d9989a1d9598230" kindref="member">task_wdt_add()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If there is no installed timeout for supplied channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/task_wdt/task_wdt.h" line="101" column="5" declfile="include/task_wdt/task_wdt.h" declline="101" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Task Watchdog APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
