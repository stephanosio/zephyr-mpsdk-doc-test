<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structipc__service__backend" kind="struct" language="C++" prot="public">
    <compoundname>ipc_service_backend</compoundname>
    <includes refid="ipc__service__backend_8h" local="no">ipc_service_backend.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structipc__service__backend_1ab8e9231fcff8f695af8ba396556af130" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ipc_service_backend::open_instance) (const struct device *instance)</definition>
        <argsstring>)(const struct device *instance)</argsstring>
        <name>open_instance</name>
        <briefdescription>
<para>Pointer to the function that will be used to open an instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>when the instance is already opened.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>errno codes depending on the implementation of the backend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ipc/ipc_service_backend.h" line="38" column="1" bodyfile="include/ipc/ipc_service_backend.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structipc__service__backend_1a67d72d3331319fb966e31814c6bdec36" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ipc_service_backend::send) (const struct device *instance, void *token, const void *data, size_t len)</definition>
        <argsstring>)(const struct device *instance, void *token, const void *data, size_t len)</argsstring>
        <name>send</name>
        <briefdescription>
<para>Pointer to the function that will be used to send data to the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend-specific token. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to send.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when instance is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>when the message is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>when the instance is busy or not ready.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>errno codes depending on the implementation of the backend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ipc/ipc_service_backend.h" line="55" column="1" bodyfile="include/ipc/ipc_service_backend.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structipc__service__backend_1ada6207ad7e97e415eeb7518b7163dc7e" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ipc_service_backend::register_endpoint) (const struct device *instance, void **token, const struct ipc_ept_cfg *cfg)</definition>
        <argsstring>)(const struct device *instance, void **token, const struct ipc_ept_cfg *cfg)</argsstring>
        <name>register_endpoint</name>
        <briefdescription>
<para>Pointer to the function that will be used to register endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to register the endpoint onto. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend-specific token. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when the endpoint configuration or instance is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>when the instance is busy or not ready.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>errno codes depending on the implementation of the backend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ipc/ipc_service_backend.h" line="71" column="1" bodyfile="include/ipc/ipc_service_backend.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>IPC Service backend. </para>
    </briefdescription>
    <detaileddescription>
<para>IPC backend configuration structure.</para>
<para>This structure is used for configuration backend during registration. </para>
    </detaileddescription>
    <location file="include/ipc/ipc_service_backend.h" line="27" column="1" bodyfile="include/ipc/ipc_service_backend.h" bodystart="27" bodyend="74"/>
    <listofallmembers>
      <member refid="structipc__service__backend_1ab8e9231fcff8f695af8ba396556af130" prot="public" virt="non-virtual"><scope>ipc_service_backend</scope><name>open_instance</name></member>
      <member refid="structipc__service__backend_1ada6207ad7e97e415eeb7518b7163dc7e" prot="public" virt="non-virtual"><scope>ipc_service_backend</scope><name>register_endpoint</name></member>
      <member refid="structipc__service__backend_1a67d72d3331319fb966e31814c6bdec36" prot="public" virt="non-virtual"><scope>ipc_service_backend</scope><name>send</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
