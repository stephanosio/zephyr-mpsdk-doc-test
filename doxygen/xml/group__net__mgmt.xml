<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__net__mgmt" kind="group">
    <compoundname>net_mgmt</compoundname>
    <title>Network Management</title>
    <innerclass refid="structnet__mgmt__event__callback" prot="public">net_mgmt_event_callback</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__net__mgmt_1gaba005de4dbeb090a384df1ba67251108" prot="public" static="no">
        <type>int(*</type>
        <definition>net_mgmt_request_handler_t</definition>
        <argsstring>)(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len)</argsstring>
        <name>net_mgmt_request_handler_t</name>
        <briefdescription>
<para>Signature which all Net MGMT request handler need to follow. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mgmt_request</parametername>
</parameternamelist>
<parameterdescription>
<para>The exact request value the handler is being called through </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on struct <ref refid="structnet__if" kindref="compound">net_if</ref> if the request is meant to be tight to a network interface. NULL otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a data understood by the handler. NULL otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in byte of the memory pointed by data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="88" column="9" bodyfile="include/net/net_mgmt.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__net__mgmt_1ga01c7010a1ad7e89f314dfedd531dcbd2" prot="public" static="no">
        <type>void(*</type>
        <definition>net_mgmt_event_handler_t</definition>
        <argsstring>)(struct net_mgmt_event_callback *cb, uint32_t mgmt_event, struct net_if *iface)</argsstring>
        <name>net_mgmt_event_handler_t</name>
        <briefdescription>
<para>Define the user&apos;s callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Original struct <ref refid="structnet__mgmt__event__callback" kindref="compound">net_mgmt_event_callback</ref> owning this handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mgmt_event</parametername>
</parameternamelist>
<parameterdescription>
<para>The network event being notified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a struct <ref refid="structnet__if" kindref="compound">net_if</ref> to which the the event belongs to, if it&apos;s an event on an iface. NULL otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="113" column="9" bodyfile="include/net/net_mgmt.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__mgmt_1gaa1d086dcdeb54412073e287129bc50e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_mgmt_init_event_callback</definition>
        <argsstring>(struct net_mgmt_event_callback *cb, net_mgmt_event_handler_t handler, uint32_t mgmt_event_mask)</argsstring>
        <name>net_mgmt_init_event_callback</name>
        <param>
          <type>struct <ref refid="structnet__mgmt__event__callback" kindref="compound">net_mgmt_event_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="group__net__mgmt_1ga01c7010a1ad7e89f314dfedd531dcbd2" kindref="member">net_mgmt_event_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>mgmt_event_mask</declname>
        </param>
        <briefdescription>
<para>Helper to initialize a struct <ref refid="structnet__mgmt__event__callback" kindref="compound">net_mgmt_event_callback</ref> properly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handler function pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mgmt_event_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask of relevant events for the handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="174" column="6" bodyfile="include/net/net_mgmt.h" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__net__mgmt_1gae53f5bbc973b0f414107eca75ac0c26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_mgmt_add_event_callback</definition>
        <argsstring>(struct net_mgmt_event_callback *cb)</argsstring>
        <name>net_mgmt_add_event_callback</name>
        <param>
          <type>struct <ref refid="structnet__mgmt__event__callback" kindref="compound">net_mgmt_event_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Add a user callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on user&apos;s callback to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="193" column="6" declfile="include/net/net_mgmt.h" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__mgmt_1ga4960bfb01ecd891da72c57f17587f946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_mgmt_del_event_callback</definition>
        <argsstring>(struct net_mgmt_event_callback *cb)</argsstring>
        <name>net_mgmt_del_event_callback</name>
        <param>
          <type>struct <ref refid="structnet__mgmt__event__callback" kindref="compound">net_mgmt_event_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Delete a user callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on user&apos;s callback to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="203" column="6" declfile="include/net/net_mgmt.h" declline="203" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__mgmt_1ga10882f80c53400b94401a2a08d31697d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_mgmt_event_notify_with_info</definition>
        <argsstring>(uint32_t mgmt_event, struct net_if *iface, const void *info, size_t length)</argsstring>
        <name>net_mgmt_event_notify_with_info</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>mgmt_event</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Used by the system to notify an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mgmt_event</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual network event code to notify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer on a struct <ref refid="structnet__if" kindref="compound">net_if</ref> if only the event is based on an iface. NULL otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer on the information you want to pass along with the event. NULL otherwise. Note the data pointed there is normalized by the related event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data pointed by info pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Note: info and length are disabled if CONFIG_NET_MGMT_EVENT_INFO is not defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="222" column="6" declfile="include/net/net_mgmt.h" declline="222" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__mgmt_1ga0648b82762467395b98a3bc13ab451d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_mgmt_event_notify</definition>
        <argsstring>(uint32_t mgmt_event, struct net_if *iface)</argsstring>
        <name>net_mgmt_event_notify</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>mgmt_event</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="225" column="20" bodyfile="include/net/net_mgmt.h" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group__net__mgmt_1gacbaa95c65717747d802dc80eb745aa17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_mgmt_event_wait</definition>
        <argsstring>(uint32_t mgmt_event_mask, uint32_t *raised_event, struct net_if **iface, const void **info, size_t *info_length, k_timeout_t timeout)</argsstring>
        <name>net_mgmt_event_wait</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>mgmt_event_mask</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>raised_event</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>info</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>info_length</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Used to wait synchronously on an event mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mgmt_event_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask of relevant events to wait on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raised_event</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on a uint32_t to get which event from the mask generated the event. Can be NULL if the caller is not interested in that information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on a place holder for the iface on which the event has originated from. This is valid if only the event mask has bit NET_MGMT_IFACE_BIT set relevantly, depending on events the caller wants to listen to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer if user wants to get the information the event might bring along. NULL otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info_length</parametername>
</parameternamelist>
<parameterdescription>
<para>tells how long the info memory area is. Only valid if the info is not NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout delay. K_FOREVER can be used to wait indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative error code otherwise. -ETIMEDOUT will be specifically returned if the timeout kick-in instead of an actual event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="256" column="5" declfile="include/net/net_mgmt.h" declline="256" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__mgmt_1ga03c39d5f2af3f2d7a633513fb5ec8a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_mgmt_event_wait_on_iface</definition>
        <argsstring>(struct net_if *iface, uint32_t mgmt_event_mask, uint32_t *raised_event, const void **info, size_t *info_length, k_timeout_t timeout)</argsstring>
        <name>net_mgmt_event_wait_on_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>mgmt_event_mask</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>raised_event</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>info</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>info_length</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Used to wait synchronously on an event mask for a specific iface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on a valid network interface to listen event to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mgmt_event_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask of relevant events to wait on. Listened to events should be relevant to iface events and thus have the bit NET_MGMT_IFACE_BIT set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raised_event</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on a uint32_t to get which event from the mask generated the event. Can be NULL if the caller is not interested in that information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer if user wants to get the information the event might bring along. NULL otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info_length</parametername>
</parameternamelist>
<parameterdescription>
<para>tells how long the info memory area is. Only valid if the info is not NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout delay. K_FOREVER can be used to wait indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative error code otherwise. -ETIMEDOUT will be specifically returned if the timeout kick-in instead of an actual event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="294" column="5" declfile="include/net/net_mgmt.h" declline="294" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__mgmt_1gaab4fe2e9ea0657bf91fb1910af6729cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_mgmt_event_init</definition>
        <argsstring>(void)</argsstring>
        <name>net_mgmt_event_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Used by the core of the network stack to initialize the network event processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="317" column="6" declfile="include/net/net_mgmt.h" declline="317" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__net__mgmt_1ga40e0f9fc86812ad9f6fe174b4c3804e6" prot="public" static="no">
        <name>net_mgmt</name>
        <param><defname>_mgmt_request</defname></param>
        <param><defname>_iface</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_len</defname></param>
        <initializer>	net_mgmt_##_mgmt_request(_mgmt_request, _iface, _data, _len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="92" column="9" bodyfile="include/net/net_mgmt.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__mgmt_1ga08bde8717fd8e12a338c517b22b87776" prot="public" static="no">
        <name>NET_MGMT_DEFINE_REQUEST_HANDLER</name>
        <param><defname>_mgmt_request</defname></param>
        <initializer>	extern int net_mgmt_##_mgmt_request(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> mgmt_request,	\
					    struct <ref refid="structnet__if" kindref="compound">net_if</ref> *iface,	\
					    void *<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, size_t len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="95" column="9" bodyfile="include/net/net_mgmt.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__mgmt_1gab67d09d1e65b806ec1957451cbf60501" prot="public" static="no">
        <name>NET_MGMT_REGISTER_REQUEST_HANDLER</name>
        <param><defname>_mgmt_request</defname></param>
        <param><defname>_func</defname></param>
        <initializer>	FUNC_ALIAS(_func, net_mgmt_##_mgmt_request, int)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_mgmt.h" line="100" column="9" bodyfile="include/net/net_mgmt.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Network Management. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
