<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mutex__apis" kind="group">
    <compoundname>mutex_apis</compoundname>
    <title>Mutex APIs</title>
    <innerclass refid="structk__mutex" prot="public">k_mutex</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mutex__apis_1ga56b64952fb8b78b00268a21c28b41480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mutex_init</definition>
        <argsstring>(struct k_mutex *mutex)</argsstring>
        <name>k_mutex_init</name>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Initialize a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a mutex object, prior to its first use.</para>
<para>Upon completion, the mutex is available and does not have an owner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex object created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2684" column="6" declfile="include/kernel.h" declline="2684" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mutex__apis_1ga850549358645249c285669baa49c33b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mutex_lock</definition>
        <argsstring>(struct k_mutex *mutex, k_timeout_t timeout)</argsstring>
        <name>k_mutex_lock</name>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Lock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine locks <emphasis>mutex</emphasis>. If the mutex is locked by another thread, the calling thread waits until the mutex becomes available or until a timeout occurs.</para>
<para>A thread is permitted to lock a mutex it has already locked. The operation completes immediately and the lock count is increased by 1.</para>
<para>Mutexes may not be locked in ISRs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to lock the mutex, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2708" column="6" declfile="include/kernel.h" declline="2708" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mutex_unlock</definition>
        <argsstring>(struct k_mutex *mutex)</argsstring>
        <name>k_mutex_unlock</name>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine unlocks <emphasis>mutex</emphasis>. The mutex must already be locked by the calling thread.</para>
<para>The mutex cannot be claimed by another thread until it has been unlocked by the calling thread as many times as it was previously locked by that thread.</para>
<para>Mutexes may not be unlocked in ISRs, as mutexes must only be manipulated in thread context due to ownership and priority inheritance semantics.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex unlocked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>The current thread does not own the mutex </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex is not locked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2730" column="6" declfile="include/kernel.h" declline="2730" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__mutex__apis_1gab6f3d98fabbdc0918bbc9934d61d63f3" prot="public" static="no">
        <name>K_MUTEX_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__mutex" kindref="compound">k_mutex</ref>, name) = \
		Z_MUTEX_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>The mutex can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_mutex<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mutex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2668" column="9" bodyfile="include/kernel.h" bodystart="2668" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
