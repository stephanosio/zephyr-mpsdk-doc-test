<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mem__blocks__apis" kind="group">
    <compoundname>mem_blocks_apis</compoundname>
    <title>Memory Blocks APIs</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" prot="public" static="no">
        <type>struct sys_mem_blocks</type>
        <definition>sys_mem_blocks_t</definition>
        <argsstring></argsstring>
        <name>sys_mem_blocks_t</name>
        <briefdescription>
<para>Memory Blocks Allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="49" column="29" bodyfile="include/sys/mem_blocks.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" prot="public" static="no">
        <type>struct sys_multi_mem_blocks</type>
        <definition>sys_multi_mem_blocks_t</definition>
        <argsstring></argsstring>
        <name>sys_multi_mem_blocks_t</name>
        <briefdescription>
<para>Multi Memory Blocks Allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="56" column="35" bodyfile="include/sys/mem_blocks.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mem__blocks__apis_1ga2e58484681d0d9629af9a8c7c14453d9" prot="public" static="no">
        <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *(*</type>
        <definition>typedef sys_mem_blocks_t *(* sys_multi_mem_blocks_choice_fn_t) (struct sys_multi_mem_blocks *group, void *cfg)</definition>
        <argsstring>)(struct sys_multi_mem_blocks *group, void *cfg)</argsstring>
        <name>sys_multi_mem_blocks_choice_fn_t</name>
        <briefdescription>
<para>Multi memory blocks allocator choice function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a user-provided functions whose responsibility is selecting a specific memory blocks allocator based on the opaque cfg value, which is specified by the user as an argument to <ref refid="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" kindref="member">sys_multi_mem_blocks_alloc()</ref>. The callback returns a pointer to the chosen allocator where the allocation is performed.</para>
<para>NULL may be returned, which will cause the allocation to fail and a -EINVAL reported to the calling code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque user-provided value. It may be interpreted in any way by the application.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the chosen allocator, or NULL if none is chosen. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="76" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mem__blocks__apis_1ga3e53a5c65bb0e88fbf20e66b016c1dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mem_blocks_alloc</definition>
        <argsstring>(sys_mem_blocks_t *mem_block, size_t count, void **out_blocks)</argsstring>
        <name>sys_mem_blocks_alloc</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *</type>
          <declname>mem_block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>out_blocks</declname>
        </param>
        <briefdescription>
<para>Allocate multiple memory blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate multiple memory blocks, and place their pointers into the output array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structmem__block" kindref="compound">mem_block</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array to be populated by pointers to the memory blocks. It must have at least <computeroutput>count</computeroutput> elements.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Not enough blocks for allocation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="218" column="5" declfile="include/sys/mem_blocks.h" declline="218" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1gadd799f4f2423277ed5daf08a0d150b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mem_blocks_free</definition>
        <argsstring>(sys_mem_blocks_t *mem_block, size_t count, void **in_blocks)</argsstring>
        <name>sys_mem_blocks_free</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *</type>
          <declname>mem_block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>in_blocks</declname>
        </param>
        <briefdescription>
<para>Free multiple memory blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Free multiple memory blocks according to the array of memory block pointers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structmem__block" kindref="compound">mem_block</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to free. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array of pointers to the memory blocks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid pointers supplied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="235" column="5" declfile="include/sys/mem_blocks.h" declline="235" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1gad39867e3cd1e1e69e6fb3746c05abed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sys_multi_mem_blocks_init</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, sys_multi_mem_blocks_choice_fn_t choice_fn)</argsstring>
        <name>sys_multi_mem_blocks_init</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga2e58484681d0d9629af9a8c7c14453d9" kindref="member">sys_multi_mem_blocks_choice_fn_t</ref></type>
          <declname>choice_fn</declname>
        </param>
        <briefdescription>
<para>Initialize multi memory blocks allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize a sys_multi_mem_block struct with the specified choice function. Note that individual allocator must be added later with sys_multi_mem_blocks_add_allocator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>choice_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_multi_mem_blocks_choice_fn_t callback used to select the allocator to be used at allocation time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="249" column="6" declfile="include/sys/mem_blocks.h" declline="249" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1ga03967e8b917a1592638586c9cfbba4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sys_multi_mem_blocks_add_allocator</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, sys_mem_blocks_t *alloc)</argsstring>
        <name>sys_multi_mem_blocks_add_allocator</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="group__mem__blocks__apis_1ga918c841efcf0fb768f24d29f93feed78" kindref="member">sys_mem_blocks_t</ref> *</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
<para>Add an allocator to an allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>This adds a known allocator to an existing multi memory blocks allocator group.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="261" column="6" declfile="include/sys/mem_blocks.h" declline="261" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_multi_mem_blocks_alloc</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, void *cfg, size_t count, void **out_blocks, size_t *blk_size)</argsstring>
        <name>sys_multi_mem_blocks_alloc</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>out_blocks</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>blk_size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from multi memory blocks allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>Just as for <ref refid="group__mem__blocks__apis_1ga3e53a5c65bb0e88fbf20e66b016c1dff" kindref="member">sys_mem_blocks_alloc()</ref>, allocates multiple blocks of memory. Takes an opaque configuration pointer passed to the choice function, which is used by integration code to choose an allocator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque configuration parameter, as for sys_multi_mem_blocks_choice_fn_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array to be populated by pointers to the memory blocks. It must have at least <computeroutput>count</computeroutput> elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">blk_size</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, output the block size of the chosen allocator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied, or no allocator chosen. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Not enough blocks for allocation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="285" column="5" declfile="include/sys/mem_blocks.h" declline="285" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__blocks__apis_1ga8dedc28ed45e9e6350b584b1082b4d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_multi_mem_blocks_free</definition>
        <argsstring>(sys_multi_mem_blocks_t *group, size_t count, void **in_blocks)</argsstring>
        <name>sys_multi_mem_blocks_free</name>
        <param>
          <type><ref refid="group__mem__blocks__apis_1gaa8365b2a833ae71fa5c04727d23cf48d" kindref="member">sys_multi_mem_blocks_t</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>in_blocks</declname>
        </param>
        <briefdescription>
<para>Free memory allocated from multi memory blocks allocator group. </para>
        </briefdescription>
        <detaileddescription>
<para>Free previous allocated memory blocks from <ref refid="group__mem__blocks__apis_1gafa96b1567b57c4466c9640fd1f5408b2" kindref="member">sys_multi_mem_blocks_alloc()</ref>.</para>
<para>Note that all blocks in <computeroutput>in_blocks</computeroutput> must be from the same allocator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi memory blocks allocator structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to free. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array of pointers to the memory blocks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid argument supplied, or no allocator chosen. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid pointer(s) supplied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="305" column="5" declfile="include/sys/mem_blocks.h" declline="305" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__mem__blocks__apis_1gab49fdcd86522d318051ca6a6ddf41c7c" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf_align</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE(name, blk_sz, num_blks, buf_align,)</initializer>
        <briefdescription>
<para>Create a memory block object with a new backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory block buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="159" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__blocks__apis_1gaa6b90846448323837dab3a17c3065359" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE_STATIC</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf_align</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE(name, blk_sz, num_blks, buf_align, static)</initializer>
        <briefdescription>
<para>Create a static memory block object with a new backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory block buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="172" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__blocks__apis_1gae6b688b2925308c9007071bab681dcdd" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name, blk_sz, num_blks, buf,)</initializer>
        <briefdescription>
<para>Create a memory block object with a providing backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Backing buffer of type uint8_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="186" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__blocks__apis_1gaad3cfb34553bd97290b388bec910b8cc" prot="public" static="no">
        <name>SYS_MEM_BLOCKS_DEFINE_STATIC_WITH_EXT_BUF</name>
        <param><defname>name</defname></param>
        <param><defname>blk_sz</defname></param>
        <param><defname>num_blks</defname></param>
        <param><defname>buf</defname></param>
        <initializer>	_SYS_MEM_BLOCKS_DEFINE_WITH_EXT_BUF(name, blk_sz, num_blks, buf, static)</initializer>
        <briefdescription>
<para>Create a static memory block object with a providing backing buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory block object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blks</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Backing buffer of type uint8_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_blocks.h" line="199" column="9" bodyfile="include/sys/mem_blocks.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
