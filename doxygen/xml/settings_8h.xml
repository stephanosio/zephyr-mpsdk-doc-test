<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="settings_8h" kind="file" language="C++">
    <compoundname>settings.h</compoundname>
    <includes refid="lib_2libc_2minimal_2include_2sys_2types_8h" local="no">sys/types.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes refid="slist_8h" local="no">sys/slist.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includedby refid="access_8h" local="no">include/bluetooth/mesh/access.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/settings/settings.h</label>
        <link refid="settings_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="6">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>include/bluetooth/mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/bluetooth/mesh/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/bluetooth/mesh/shell.h</label>
        <link refid="bluetooth_2mesh_2shell_8h"/>
      </node>
      <node id="1">
        <label>include/settings/settings.h</label>
        <link refid="settings_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsettings__handler" prot="public">settings_handler</innerclass>
    <innerclass refid="structsettings__handler__static" prot="public">settings_handler_static</innerclass>
    <innerclass refid="structsettings__store" prot="public">settings_store</innerclass>
    <innerclass refid="structsettings__load__arg" prot="public">settings_load_arg</innerclass>
    <innerclass refid="structsettings__store__itf" prot="public">settings_store_itf</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__settings_1ga2afa32b032e88a188c5263156d9e73e1" prot="public" static="no">
        <name>SETTINGS_MAX_DIR_DEPTH</name>
        <initializer>8	/* max depth of settings tree */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="33" column="9" bodyfile="include/settings/settings.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1gad96357290d7289dd1d7917abd575c4f7" prot="public" static="no">
        <name>SETTINGS_MAX_NAME_LEN</name>
        <initializer>(8 * <ref refid="group__settings_1ga2afa32b032e88a188c5263156d9e73e1" kindref="member">SETTINGS_MAX_DIR_DEPTH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="34" column="9" bodyfile="include/settings/settings.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1gaa9705c71c2d7cfdf3beab49d6b510769" prot="public" static="no">
        <name>SETTINGS_MAX_VAL_LEN</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="35" column="9" bodyfile="include/settings/settings.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1gab66e3bb2f0f5f5e3a20c6702df6a0694" prot="public" static="no">
        <name>SETTINGS_NAME_SEPARATOR</name>
        <initializer>&apos;/&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="36" column="9" bodyfile="include/settings/settings.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1ga41fb7b74ecb502093d4aa5cd6adb4093" prot="public" static="no">
        <name>SETTINGS_NAME_END</name>
        <initializer>&apos;=&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="37" column="9" bodyfile="include/settings/settings.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1ga9f10069ed74c368aef366d659d3a917d" prot="public" static="no">
        <name>SETTINGS_EXTRA_LEN</name>
        <initializer>((<ref refid="group__settings_1ga2afa32b032e88a188c5263156d9e73e1" kindref="member">SETTINGS_MAX_DIR_DEPTH</ref> - 1) + 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="42" column="9" bodyfile="include/settings/settings.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1ga2098bcfc32c6daa13292d937712e476e" prot="public" static="no">
        <name>SETTINGS_STATIC_HANDLER_DEFINE</name>
        <param><defname>_hname</defname></param>
        <param><defname>_tree</defname></param>
        <param><defname>_get</defname></param>
        <param><defname>_set</defname></param>
        <param><defname>_commit</defname></param>
        <param><defname>_export</defname></param>
        <initializer>	const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structsettings__handler__static" kindref="compound">settings_handler_static</ref>,		     \
				      settings_handler_ ## _hname) = {       \
		.name = _tree,						     \
		.h_get = _get,						     \
		.h_set = _set,						     \
		.h_commit = _commit,					     \
		.h_export = _export,					     \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a static handler for settings items</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_hname</parametername>
</parameternamelist>
<parameterdescription>
<para>handler name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_tree</parametername>
</parameternamelist>
<parameterdescription>
<para>subtree name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_get</parametername>
</parameternamelist>
<parameterdescription>
<para>get routine (can be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_set</parametername>
</parameternamelist>
<parameterdescription>
<para>set routine (can be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_commit</parametername>
</parameternamelist>
<parameterdescription>
<para>commit routine (can be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_export</parametername>
</parameternamelist>
<parameterdescription>
<para>export routine (can be NULL)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This creates a variable <emphasis>hname prepended by <ref refid="structsettings__handler" kindref="compound">settings_handler</ref></emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="201" column="9" bodyfile="include/settings/settings.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" prot="public" static="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref>(*</type>
        <definition>typedef ssize_t(* settings_read_cb) (void *cb_arg, void *data, size_t len)</definition>
        <argsstring>)(void *cb_arg, void *data, size_t len)</argsstring>
        <name>settings_read_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function used to read the data from the settings storage in h_set handler implementations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for the read function. Appropriate cb_arg is transferred to h_set handler implementation by the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>positive: Number of bytes read, 0: key-value pair is deleted. On error returns -ERRNO code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="57" column="9" bodyfile="include/settings/settings.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* settings_load_direct_cb) (const char *key, size_t len, settings_read_cb read_cb, void *cb_arg, void *param)</definition>
        <argsstring>)(const char *key, size_t len, settings_read_cb read_cb, void *cb_arg, void *param)</argsstring>
        <name>settings_load_direct_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function used for direct loading. Used by <ref refid="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" kindref="member">settings_load_subtree_direct</ref> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>the name with skipped part that was used as name in handler registration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the data found in the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">read_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>function provided to read the data from the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for the read function provided by the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">param</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter given to the <ref refid="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" kindref="member">settings_load_subtree_direct</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>key[in] the name with skipped part that was used as name in handler registration</para>
</listitem><listitem><para>len[in] the size of the data found in the backend.</para>
</listitem><listitem><para>read_cb[in] function provided to read the data from the backend.</para>
</listitem><listitem><para>cb_arg[in] arguments for the read function provided by the backend.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>When nonzero value is returned, further subtree searching is stopped. Use with care as some settings backends would iterate through old values, and the current value is returned last. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="274" column="9" bodyfile="include/settings/settings.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__settings_1gaf81fad8575840f73a739d16d79613f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_subsys_init</definition>
        <argsstring>(void)</argsstring>
        <name>settings_subsys_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialization of settings and backend</para>
<para>Can be called at application startup. In case the backend is a FS Remember to call it after the FS was mounted. For FCB backend it can be called without such a restriction.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="220" column="5" declfile="include/settings/settings.h" declline="220" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1gab2043a6d799202e177cc3dfa0cbfa531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_register</definition>
        <argsstring>(struct settings_handler *cf)</argsstring>
        <name>settings_register</name>
        <param>
          <type>struct <ref refid="structsettings__handler" kindref="compound">settings_handler</ref> *</type>
          <declname>cf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a handler for settings items stored in RAM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cf</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure containing registration info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="229" column="5" declfile="include/settings/settings.h" declline="229" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga89c6d618df81f197cc5c1a2018b00648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_load</definition>
        <argsstring>(void)</argsstring>
        <name>settings_load</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load serialized items from registered persistence sources. Handlers for serialized item subtrees registered earlier will be called for encountered values.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="238" column="5" declfile="include/settings/settings.h" declline="238" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1gab80e8a21c80243359b652386f7ce2424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_load_subtree</definition>
        <argsstring>(const char *subtree)</argsstring>
        <name>settings_load_subtree</name>
        <param>
          <type>const char *</type>
          <declname>subtree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load limited set of serialized items from registered persistence sources. Handlers for serialized item subtrees registered earlier will be called for encountered values that belong to the subtree.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">subtree</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the subtree to be loaded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="248" column="5" declfile="include/settings/settings.h" declline="248" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_load_subtree_direct</definition>
        <argsstring>(const char *subtree, settings_load_direct_cb cb, void *param)</argsstring>
        <name>settings_load_subtree_direct</name>
        <param>
          <type>const char *</type>
          <declname>subtree</declname>
        </param>
        <param>
          <type><ref refid="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" kindref="member">settings_load_direct_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load limited set of serialized items using given callback.</para>
<para>This function bypasses the normal data workflow in settings module. All the settings values that are found are passed to the given callback.</para>
<para><simplesect kind="note"><para>This function does not call commit function. It works as a blocking function, so it is up to the user to call any kind of commit function when this operation ends.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">subtree</parametername>
</parameternamelist>
<parameterdescription>
<para>subtree name of the subtree to be loaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">param</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter to be passed when callback function is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="298" column="5" declfile="include/settings/settings.h" declline="298" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga789410aa059398d6c8a7851ea6945b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_save</definition>
        <argsstring>(void)</argsstring>
        <name>settings_save</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save currently running serialized items. All serialized items which are different from currently persisted values will be saved.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="309" column="5" declfile="include/settings/settings.h" declline="309" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1gaf22356f0dd01d4cf43a6297fafa86e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_save_one</definition>
        <argsstring>(const char *name, const void *value, size_t val_len)</argsstring>
        <name>settings_save_one</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>val_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a single serialized value to persisted storage (if it has changed value).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name/key of the settings item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the value of the settings item. This value will be transferred to the <ref refid="structsettings__handler_1a30207125407f57a0f117ecaee5a2054a" kindref="member">settings_handler::h_export</ref> handler implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="322" column="5" declfile="include/settings/settings.h" declline="322" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga070b6ad31bca0bee71ec1f1a4d67618d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_delete</definition>
        <argsstring>(const char *name)</argsstring>
        <name>settings_delete</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a single serialized in persisted storage.</para>
<para>Deleting an existing key-value pair in the settings mean to set its value to NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name/key of the settings item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="334" column="5" declfile="include/settings/settings.h" declline="334" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga623c60b89dda3145f9334343748d5954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_commit</definition>
        <argsstring>(void)</argsstring>
        <name>settings_commit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call commit for all settings handler. This should apply all settings which has been set, but not applied yet.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="342" column="5" declfile="include/settings/settings.h" declline="342" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga11523bc43121d78e0ac8ee1443559e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_commit_subtree</definition>
        <argsstring>(const char *subtree)</argsstring>
        <name>settings_commit_subtree</name>
        <param>
          <type>const char *</type>
          <declname>subtree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call commit for settings handler that belong to subtree. This should apply all settings which has been set, but not applied yet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">subtree</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the subtree to be committed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="352" column="5" declfile="include/settings/settings.h" declline="352" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__backend_1gad16bb70588cf69873f8872d7bf90e1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void settings_src_register</definition>
        <argsstring>(struct settings_store *cs)</argsstring>
        <name>settings_src_register</name>
        <param>
          <type>struct <ref refid="structsettings__store" kindref="compound">settings_store</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a backend handler acting as source.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend handler node containing handler information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="460" column="6" declfile="include/settings/settings.h" declline="460" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__backend_1ga37bcada0be44b023cd3759e519e69d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void settings_dst_register</definition>
        <argsstring>(struct settings_store *cs)</argsstring>
        <name>settings_dst_register</name>
        <param>
          <type>struct <ref refid="structsettings__store" kindref="compound">settings_store</ref> *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a backend handler acting as destination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend handler node containing handler information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="468" column="6" declfile="include/settings/settings.h" declline="468" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__backend_1gab03a10ed0b65809369b4b6f220aa3df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structsettings__handler__static" kindref="compound">settings_handler_static</ref> *</type>
        <definition>struct settings_handler_static * settings_parse_and_lookup</definition>
        <argsstring>(const char *name, const char **next)</argsstring>
        <name>settings_parse_and_lookup</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a key to an array of elements and locate corresponding module handler.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>in string format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">next</parametername>
</parameternamelist>
<parameterdescription>
<para>remaining of name after matched handler</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structsettings__handler__static" kindref="compound">settings_handler_static</ref> on success, NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="483" column="30" declfile="include/settings/settings.h" declline="483" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__backend_1gaf94e311eba2b109cdbddd2767e502e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_call_set_handler</definition>
        <argsstring>(const char *name, size_t len, settings_read_cb read_cb, void *read_cb_arg, const struct settings_load_arg *load_arg)</argsstring>
        <name>settings_call_set_handler</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" kindref="member">settings_read_cb</ref></type>
          <declname>read_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>read_cb_arg</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsettings__load__arg" kindref="compound">settings_load_arg</ref> *</type>
          <declname>load_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls settings handler.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the data found in the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data found in the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">read_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function provided to read the data from the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">read_cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments for the read function provided by the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">load_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments for data loading.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or negative error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="499" column="5" declfile="include/settings/settings.h" declline="499" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__name__proc_1ga6d9d36d54a1bfd59bf7729621653edd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_name_steq</definition>
        <argsstring>(const char *name, const char *key, const char **next)</argsstring>
        <name>settings_name_steq</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares the start of name with a key</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>in string format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>comparison string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">next</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to remaining of name, when the remaining part starts with a separator the separator is removed from next</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Some examples: settings_name_steq(&quot;bt/btmesh/iv&quot;, &quot;b&quot;, &amp;next) returns 1, next=&quot;t/btmesh/iv&quot; settings_name_steq(&quot;bt/btmesh/iv&quot;, &quot;bt&quot;, &amp;next) returns 1, next=&quot;btmesh/iv&quot; settings_name_steq(&quot;bt/btmesh/iv&quot;, &quot;bt/&quot;, &amp;next) returns 0, next=NULL settings_name_steq(&quot;bt/btmesh/iv&quot;, &quot;bta&quot;, &amp;next) returns 0, next=NULL</para>
<para>REMARK: This routine could be simplified if the <ref refid="structsettings__handler" kindref="compound">settings_handler</ref> names would include a separator at the end.</para>
<para><simplesect kind="return"><para>0: no match 1: match, next can be used to check if match is full </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="535" column="5" declfile="include/settings/settings.h" declline="535" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__name__proc_1gacf259320845ae83c46df634f93c6d3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_name_next</definition>
        <argsstring>(const char *name, const char **next)</argsstring>
        <name>settings_name_next</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>determine the number of characters before the first separator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>in string format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">next</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to remaining of name (excluding separator)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of the first separator, in case no separator was found this is the size of name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="547" column="5" declfile="include/settings/settings.h" declline="547" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__rt_1gae1b95c47c49774d53b4745af810e881e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_runtime_set</definition>
        <argsstring>(const char *name, const void *data, size_t len)</argsstring>
        <name>settings_runtime_set</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a value with a specific key to a module handler.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Key in string format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Value length in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="570" column="5" declfile="include/settings/settings.h" declline="570" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__rt_1ga99a4714ba8c184afc659c43ec2020844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_runtime_get</definition>
        <argsstring>(const char *name, void *data, size_t len)</argsstring>
        <name>settings_runtime_get</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a value corresponding to a key from a module handler.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Key in string format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned binary value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>requested value length in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of data read on success, negative on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="581" column="5" declfile="include/settings/settings.h" declline="581" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings__rt_1gafa96974170dced7a131bfd5f022483f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_runtime_commit</definition>
        <argsstring>(const char *name)</argsstring>
        <name>settings_runtime_commit</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply settings in a module handler.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Key in string format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="590" column="5" declfile="include/settings/settings.h" declline="590" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Runtime<sp/>Inc</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SETTINGS_SETTINGS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SETTINGS_SETTINGS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="slist_8h" kindref="compound">sys/slist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="group__settings_1ga2afa32b032e88a188c5263156d9e73e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SETTINGS_MAX_DIR_DEPTH<sp/><sp/>8<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>depth<sp/>of<sp/>settings<sp/>tree<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="group__settings_1gad96357290d7289dd1d7917abd575c4f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SETTINGS_MAX_NAME_LEN<sp/><sp/><sp/>(8<sp/>*<sp/>SETTINGS_MAX_DIR_DEPTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="group__settings_1gaa9705c71c2d7cfdf3beab49d6b510769" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SETTINGS_MAX_VAL_LEN<sp/><sp/><sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="group__settings_1gab66e3bb2f0f5f5e3a20c6702df6a0694" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SETTINGS_NAME_SEPARATOR<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__settings_1ga41fb7b74ecb502093d4aa5cd6adb4093" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SETTINGS_NAME_END<sp/>&apos;=&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pleace<sp/>for<sp/>settings<sp/>additions:</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>up<sp/>to<sp/>7<sp/>separators,<sp/>&apos;=&apos;,<sp/>&apos;\0&apos;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__settings_1ga9f10069ed74c368aef366d659d3a917d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SETTINGS_EXTRA_LEN<sp/>((SETTINGS_MAX_DIR_DEPTH<sp/>-<sp/>1)<sp/>+<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/>(*<ref refid="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" kindref="member">settings_read_cb</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb_arg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structsettings__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__handler" kindref="compound">settings_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structsettings__handler_1ab8eee945dc866ec90b272fb526abc646" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler_1ab8eee945dc866ec90b272fb526abc646" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="69" refid="structsettings__handler_1a8d4036babe22872777610e54c4dadf21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler_1a8d4036babe22872777610e54c4dadf21" kindref="member">h_get</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val_len_max);</highlight></codeline>
<codeline lineno="81" refid="structsettings__handler_1a70aa25bf3b53898ab22906e9949963a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler_1a70aa25bf3b53898ab22906e9949963a4" kindref="member">h_set</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" kindref="member">settings_read_cb</ref><sp/>read_cb,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb_arg);</highlight></codeline>
<codeline lineno="96" refid="structsettings__handler_1ad5e23a2acf29bbb2a5a4f249b5f80e0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler_1ad5e23a2acf29bbb2a5a4f249b5f80e0a" kindref="member">h_commit</ref>)(void);</highlight></codeline>
<codeline lineno="103" refid="structsettings__handler_1a30207125407f57a0f117ecaee5a2054a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler_1a30207125407f57a0f117ecaee5a2054a" kindref="member">h_export</ref>)(int<sp/>(*export_func)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler_1ab8eee945dc866ec90b272fb526abc646" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>val_len));</highlight></codeline>
<codeline lineno="121" refid="structsettings__handler_1a6aa2cc76c84341c3d29b679d2cc9c6ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structsettings__handler_1a6aa2cc76c84341c3d29b679d2cc9c6ab" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structsettings__handler__static" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__handler__static" kindref="compound">settings_handler_static</ref><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="135" refid="structsettings__handler__static_1acc65e884503cf7db1276e7777f57fb12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler__static_1acc65e884503cf7db1276e7777f57fb12" kindref="member">h_get</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val_len_max);</highlight></codeline>
<codeline lineno="147" refid="structsettings__handler__static_1a2cf94a6dad3ec35ca58b5ef869c7edae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler__static_1a2cf94a6dad3ec35ca58b5ef869c7edae" kindref="member">h_set</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" kindref="member">settings_read_cb</ref><sp/>read_cb,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cb_arg);</highlight></codeline>
<codeline lineno="162" refid="structsettings__handler__static_1a093ab8346aedd0a9cb06dfaa4387f393" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler__static_1a093ab8346aedd0a9cb06dfaa4387f393" kindref="member">h_commit</ref>)(void);</highlight></codeline>
<codeline lineno="167" refid="structsettings__handler__static_1abb1df3f0f05fb2a57cd08e380bfffa09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__handler__static_1abb1df3f0f05fb2a57cd08e380bfffa09" kindref="member">h_export</ref>)(int<sp/>(*export_func)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>val_len));</highlight></codeline>
<codeline lineno="184"><highlight class="normal">};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="group__settings_1ga2098bcfc32c6daa13292d937712e476e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SETTINGS_STATIC_HANDLER_DEFINE(_hname,<sp/>_tree,<sp/>_get,<sp/>_set,<sp/>_commit,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_export)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>STRUCT_SECTION_ITERABLE(settings_handler_static,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings_handler_<sp/>##<sp/>_hname)<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>_tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.h_get<sp/>=<sp/>_get,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.h_set<sp/>=<sp/>_set,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.h_commit<sp/>=<sp/>_commit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.h_export<sp/>=<sp/>_export,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="group__settings_1gaf81fad8575840f73a739d16d79613f8e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1gaf81fad8575840f73a739d16d79613f8e" kindref="member">settings_subsys_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="group__settings_1gab2043a6d799202e177cc3dfa0cbfa531" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1gab2043a6d799202e177cc3dfa0cbfa531" kindref="member">settings_register</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsettings__handler" kindref="compound">settings_handler</ref><sp/>*cf);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="group__settings_1ga89c6d618df81f197cc5c1a2018b00648" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1ga89c6d618df81f197cc5c1a2018b00648" kindref="member">settings_load</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="group__settings_1gab80e8a21c80243359b652386f7ce2424" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1gab80e8a21c80243359b652386f7ce2424" kindref="member">settings_load_subtree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*subtree);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" kindref="member">settings_load_direct_cb</ref>)(</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" kindref="member">settings_read_cb</ref><sp/>read_cb,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cb_arg,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*param);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" kindref="member">settings_load_subtree_direct</ref>(</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*subtree,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" kindref="member">settings_load_direct_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*param);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="group__settings_1ga789410aa059398d6c8a7851ea6945b55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1ga789410aa059398d6c8a7851ea6945b55" kindref="member">settings_save</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="group__settings_1gaf22356f0dd01d4cf43a6297fafa86e30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1gaf22356f0dd01d4cf43a6297fafa86e30" kindref="member">settings_save_one</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>val_len);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="group__settings_1ga070b6ad31bca0bee71ec1f1a4d67618d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1ga070b6ad31bca0bee71ec1f1a4d67618d" kindref="member">settings_delete</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="group__settings_1ga623c60b89dda3145f9334343748d5954" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1ga623c60b89dda3145f9334343748d5954" kindref="member">settings_commit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="group__settings_1ga11523bc43121d78e0ac8ee1443559e42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings_1ga11523bc43121d78e0ac8ee1443559e42" kindref="member">settings_commit_subtree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*subtree);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>API<sp/>for<sp/>config<sp/>storage</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store__itf" kindref="compound">settings_store_itf</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="structsettings__store" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store" kindref="compound">settings_store</ref><sp/>{</highlight></codeline>
<codeline lineno="375" refid="structsettings__store_1a9f382f4e61737585228a6a3b86e9a38c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structsettings__store_1a9f382f4e61737585228a6a3b86e9a38c" kindref="member">cs_next</ref>;</highlight></codeline>
<codeline lineno="378" refid="structsettings__store_1aaa0f629059f0c49b0f92f278791ce19c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store__itf" kindref="compound">settings_store_itf</ref><sp/>*<ref refid="structsettings__store_1aaa0f629059f0c49b0f92f278791ce19c" kindref="member">cs_itf</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="structsettings__load__arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__load__arg" kindref="compound">settings_load_arg</ref><sp/>{</highlight></codeline>
<codeline lineno="392" refid="structsettings__load__arg_1a0764239993147761b12e8999f860d267" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__load__arg_1a0764239993147761b12e8999f860d267" kindref="member">subtree</ref>;</highlight></codeline>
<codeline lineno="398" refid="structsettings__load__arg_1aec32e51b4a6b61aff2ea415aa80a9987" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" kindref="member">settings_load_direct_cb</ref><sp/><ref refid="structsettings__load__arg_1aec32e51b4a6b61aff2ea415aa80a9987" kindref="member">cb</ref>;</highlight></codeline>
<codeline lineno="404" refid="structsettings__load__arg_1a7cbe713a1e0d2885528644b5a54f27d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__load__arg_1a7cbe713a1e0d2885528644b5a54f27d3" kindref="member">param</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="structsettings__store__itf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store__itf" kindref="compound">settings_store_itf</ref><sp/>{</highlight></codeline>
<codeline lineno="413" refid="structsettings__store__itf_1a8c08da2cd010f5d73689e84d02d12734" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__store__itf_1a8c08da2cd010f5d73689e84d02d12734" kindref="member">csi_load</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store" kindref="compound">settings_store</ref><sp/>*cs,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__load__arg" kindref="compound">settings_load_arg</ref><sp/>*arg);</highlight></codeline>
<codeline lineno="428" refid="structsettings__store__itf_1af6aae0b06cdc935975f19eb4c56eb991" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__store__itf_1af6aae0b06cdc935975f19eb4c56eb991" kindref="member">csi_save_start</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store" kindref="compound">settings_store</ref><sp/>*cs);</highlight></codeline>
<codeline lineno="435" refid="structsettings__store__itf_1af97b8a3e2bdac663dd3872117251f0d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__store__itf_1af97b8a3e2bdac663dd3872117251f0d2" kindref="member">csi_save</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store" kindref="compound">settings_store</ref><sp/>*cs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>val_len);</highlight></codeline>
<codeline lineno="446" refid="structsettings__store__itf_1a90c2506cb06e5d80dffc6c08c6007bce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structsettings__store__itf_1a90c2506cb06e5d80dffc6c08c6007bce" kindref="member">csi_save_end</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__store" kindref="compound">settings_store</ref><sp/>*cs);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">};</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="group__settings__backend_1gad16bb70588cf69873f8872d7bf90e1c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__settings__backend_1gad16bb70588cf69873f8872d7bf90e1c6" kindref="member">settings_src_register</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsettings__store" kindref="compound">settings_store</ref><sp/>*cs);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="group__settings__backend_1ga37bcada0be44b023cd3759e519e69d01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__settings__backend_1ga37bcada0be44b023cd3759e519e69d01" kindref="member">settings_dst_register</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsettings__store" kindref="compound">settings_store</ref><sp/>*cs);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>API<sp/>for<sp/>handler<sp/>lookup</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="group__settings__backend_1gab03a10ed0b65809369b4b6f220aa3df6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsettings__handler__static" kindref="compound">settings_handler_static</ref><sp/>*<ref refid="group__settings__backend_1gab03a10ed0b65809369b4b6f220aa3df6" kindref="member">settings_parse_and_lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**next);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="group__settings__backend_1gaf94e311eba2b109cdbddd2767e502e77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings__backend_1gaf94e311eba2b109cdbddd2767e502e77" kindref="member">settings_call_set_handler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" kindref="member">settings_read_cb</ref><sp/>read_cb,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*read_cb_arg,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsettings__load__arg" kindref="compound">settings_load_arg</ref><sp/>*load_arg);</highlight></codeline>
<codeline lineno="535" refid="group__settings__name__proc_1ga6d9d36d54a1bfd59bf7729621653edd9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings__name__proc_1ga6d9d36d54a1bfd59bf7729621653edd9" kindref="member">settings_name_steq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**next);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="group__settings__name__proc_1gacf259320845ae83c46df634f93c6d3e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings__name__proc_1gacf259320845ae83c46df634f93c6d3e5" kindref="member">settings_name_next</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**next);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SETTINGS_RUNTIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="group__settings__rt_1gae1b95c47c49774d53b4745af810e881e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings__rt_1gae1b95c47c49774d53b4745af810e881e" kindref="member">settings_runtime_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="group__settings__rt_1ga99a4714ba8c184afc659c43ec2020844" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings__rt_1ga99a4714ba8c184afc659c43ec2020844" kindref="member">settings_runtime_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="group__settings__rt_1gafa96974170dced7a131bfd5f022483f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__settings__rt_1gafa96974170dced7a131bfd5f022483f8" kindref="member">settings_runtime_commit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsettings__handler__static_1aa8e57471bd89f4792cfb0689462b6f9b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SETTINGS_RUNTIME<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SETTINGS_SETTINGS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/settings/settings.h"/>
  </compounddef>
</doxygen>
