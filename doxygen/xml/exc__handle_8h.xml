<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="exc__handle_8h" kind="file" language="C++">
    <compoundname>exc_handle.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_EXC_HANDLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_EXC_HANDLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>used<sp/>by<sp/>some<sp/>architectures<sp/>to<sp/>define<sp/>code<sp/>ranges<sp/>which<sp/>may</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>perform<sp/>operations<sp/>that<sp/>could<sp/>generate<sp/>a<sp/>CPU<sp/>exception<sp/>that<sp/>should<sp/>not</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>be<sp/>fatal.<sp/>Instead,<sp/>the<sp/>exception<sp/>should<sp/>return<sp/>but<sp/>set<sp/>the<sp/>program</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>counter<sp/>to<sp/>a<sp/>&apos;fixup&apos;<sp/>memory<sp/>address<sp/>which<sp/>will<sp/>gracefully<sp/>error<sp/>out.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>For<sp/>example,<sp/>in<sp/>the<sp/>case<sp/>where<sp/>user<sp/>mode<sp/>passes<sp/>in<sp/>a<sp/>C<sp/>string<sp/>via</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>system<sp/>call,<sp/>the<sp/>length<sp/>of<sp/>that<sp/>string<sp/>needs<sp/>to<sp/>be<sp/>measured.<sp/>A<sp/>specially</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>written<sp/>assembly<sp/>language<sp/>version<sp/>of<sp/>strlen<sp/>(arch_user_string_len)</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>defines<sp/>start<sp/>and<sp/>end<sp/>symbols<sp/>where<sp/>the<sp/>memory<sp/>in<sp/>the<sp/>string<sp/>is<sp/>examined;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>if<sp/>this<sp/>generates<sp/>a<sp/>fault,<sp/>jumping<sp/>to<sp/>the<sp/>fixup<sp/>symbol<sp/>within<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>function<sp/>will<sp/>return<sp/>an<sp/>error<sp/>result<sp/>to<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>To<sp/>ensure<sp/>precise<sp/>control<sp/>of<sp/>the<sp/>state<sp/>of<sp/>registers<sp/>and<sp/>the<sp/>stack<sp/>pointer,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>these<sp/>functions<sp/>need<sp/>to<sp/>be<sp/>written<sp/>in<sp/>assembly.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>The<sp/>arch-specific<sp/>fault<sp/>handling<sp/>code<sp/>will<sp/>define<sp/>an<sp/>array<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>z_exc_handle<sp/>structures<sp/>and<sp/>return<sp/>from<sp/>the<sp/>exception<sp/>with<sp/>the<sp/>PC<sp/>updated</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>fixup<sp/>address<sp/>if<sp/>a<sp/>match<sp/>is<sp/>found.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_exc_handle<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fixup;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_EXC_HANDLE(name)<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>name<sp/>##<sp/>_fault_start,<sp/>name<sp/>##<sp/>_fault_end,<sp/>name<sp/>##<sp/>_fixup<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_EXC_DECLARE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>name<sp/>##<sp/>_fault_start(void);<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>name<sp/>##<sp/>_fault_end(void);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>name<sp/>##<sp/>_fixup(void)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_EXC_HANDLE_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/exc_handle.h"/>
  </compounddef>
</doxygen>
