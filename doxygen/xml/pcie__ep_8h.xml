<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="pcie__ep_8h" kind="file" language="C++">
    <compoundname>pcie_ep.h</compoundname>
    <includes local="no">device.h</includes>
    <includes refid="init_8h" local="no">init.h</includes>
    <includes local="no">kernel.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <incdepgraph>
      <node id="52">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="40">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="39">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/pcie/endpoint/pcie_ep.h</label>
        <link refid="pcie__ep_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="5">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="23">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="12">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="25">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="15">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="60">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="62">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="14">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="38">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="63">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="55">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="27">
        <label>alloca.h</label>
      </node>
      <node id="42">
        <label>arch/cpu.h</label>
      </node>
      <node id="2">
        <label>device.h</label>
      </node>
      <node id="61">
        <label>kernel.h</label>
      </node>
      <node id="21">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="58">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structpcie__ep__driver__api" prot="public">pcie_ep_driver_api</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" prot="public" static="no" strong="no">
        <type></type>
        <name>pcie_ob_mem_type</name>
        <enumvalue id="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba52b8bd55168f44c7c4a6a3d36824d286" prot="public">
          <name>PCIE_OB_ANYMEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PCIe OB window within any address range </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba5312fb052e8dafaab224a4b554292e74" prot="public">
          <name>PCIE_OB_LOWMEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PCIe OB window within 32-bit address range </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba13da19c9fa1732e72fa8add58da33ebb" prot="public">
          <name>PCIE_OB_HIGHMEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PCIe OB window above 32-bit address range </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="21" column="1" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="enum" id="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800" prot="public" static="no" strong="no">
        <type></type>
        <name>pci_ep_irq_type</name>
        <enumvalue id="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800ad90da0a62096ef8a4fc7d230afd0d44d" prot="public">
          <name>PCIE_EP_IRQ_LEGACY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Raise Legacy interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800a267b658ad2587fd0d57664197daeb318" prot="public">
          <name>PCIE_EP_IRQ_MSI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Raise MSI interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800a55cad2c5812c9c7c14476ff000199ad4" prot="public">
          <name>PCIE_EP_IRQ_MSIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Raise MSIX interrupt </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="27" column="1" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" prot="public" static="no" strong="no">
        <type></type>
        <name>xfer_direction</name>
        <enumvalue id="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458af2c2a8166d85d21e036a4a2015df803e" prot="public">
          <name>HOST_TO_DEVICE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Read from Host </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458a4c419a2c450c4d954c3768631870480a" prot="public">
          <name>DEVICE_TO_HOST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Write to Host </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="33" column="1" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cd" prot="public" static="no" strong="no">
        <type></type>
        <name>pcie_reset</name>
        <enumvalue id="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda532057b4dab53d2e86701394ead62ea7" prot="public">
          <name>PCIE_PERST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Cold reset </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda7d94ae3f1fbdd486102559a450f01dee" prot="public">
          <name>PCIE_PERST_INB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Inband hot reset </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda6dcb2d2f5ad3624bda5ca25d2e38a47a" prot="public">
          <name>PCIE_FLR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Functional Level Reset </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda2c60bd39ac112aad31d1299900f0795a" prot="public">
          <name>PCIE_RESET_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="38" column="1" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="38" bodyend="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pcie__ep_8h_1af83085eb5819572854d919e5813253bf" prot="public" static="no">
        <type>void(*</type>
        <definition>pcie_ep_reset_callback_t</definition>
        <argsstring>)(void *arg)</argsstring>
        <name>pcie_ep_reset_callback_t</name>
        <briefdescription>
<para>Callback API for PCIe reset interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>These callbacks execute in interrupt context. Therefore, use only interrupt-safe APIS. Registration of callbacks is done via <emphasis>pcie_ep_register_reset_cb</emphasis> </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer provided at registration time, later to be passed back as argument to callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="57" column="9" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pcie__ep_8h_1ad35d42579500a959bb3275cd65b04a42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pcie_ep_conf_read</definition>
        <argsstring>(const struct device *dev, uint32_t offset, uint32_t *data)</argsstring>
        <name>pcie_ep_conf_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read PCIe EP configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>This API reads EP&apos;s own configuration space</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within configuration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data read from the offset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="91" column="19" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="91" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1a8d3f4de13956fbd7ed71acbd387f781a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pcie_ep_conf_write</definition>
        <argsstring>(const struct device *dev, uint32_t offset, uint32_t data)</argsstring>
        <name>pcie_ep_conf_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write PCIe EP configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>This API writes EP&apos;s own configuration space</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset within configuration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written at the offset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="110" column="20" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1a7bcff5f22fd32e0b2c3c3c509038b2db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pcie_ep_map_addr</definition>
        <argsstring>(const struct device *dev, uint64_t pcie_addr, uint64_t *mapped_addr, uint32_t size, enum pcie_ob_mem_type ob_mem_type)</argsstring>
        <name>pcie_ep_map_addr</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>pcie_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>mapped_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>enum <ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref></type>
          <declname>ob_mem_type</declname>
        </param>
        <briefdescription>
<para>Map a host memory buffer to PCIe outbound region. </para>
        </briefdescription>
        <detaileddescription>
<para>This API maps a host memory buffer to PCIe outbound region, It is left to EP driver to manage multiple mappings through multiple PCIe outbound regions if supported by SoC</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcie_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Host memory buffer address to be mapped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapped_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Mapped PCIe outbound region address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Host memory buffer size (bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ob_mem_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Hint if lowmem/highmem outbound region has to be used, this is useful in cases where bus master cannot generate more than 32-bit address; it becomes essential to use lowmem outbound region</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mapped size : If mapped size is less than requested size, then requestor has to call the same API again to map the unmapped host buffer after data transfer is done with mapped size. This situation may arise because of the mapping alignment requirements.</para>
</simplesect>
<simplesect kind="return"><para>Negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="144" column="19" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="144" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1a07ee4ed9ceb42462c95da8bbf3dfc8f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pcie_ep_unmap_addr</definition>
        <argsstring>(const struct device *dev, uint64_t mapped_addr)</argsstring>
        <name>pcie_ep_unmap_addr</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>mapped_addr</declname>
        </param>
        <briefdescription>
<para>Remove mapping to PCIe outbound region. </para>
        </briefdescription>
        <detaileddescription>
<para>This API removes mapping to PCIe outbound region. Mapped PCIe outbound region address is given as argument to figure out the outbound region to be unmapped</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapped_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>PCIe outbound region address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="166" column="20" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1aec421e689d4d72b0bf8a34fe8303b103" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pcie_ep_raise_irq</definition>
        <argsstring>(const struct device *dev, enum pci_ep_irq_type irq_type, uint32_t irq_num)</argsstring>
        <name>pcie_ep_raise_irq</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800" kindref="member">pci_ep_irq_type</ref></type>
          <declname>irq_type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>irq_num</declname>
        </param>
        <briefdescription>
<para>Raise interrupt to Host. </para>
        </briefdescription>
        <detaileddescription>
<para>This API raises interrupt to Host</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irq_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of Interrupt be raised (legacy, MSI or MSI-X) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irq_num</parametername>
</parameternamelist>
<parameterdescription>
<para>MSI or MSI-X interrupt number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="187" column="19" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="187" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1a4e9cc8364703bb58e96642d1250dc410" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pcie_ep_register_reset_cb</definition>
        <argsstring>(const struct device *dev, enum pcie_reset reset, pcie_ep_reset_callback_t cb, void *arg)</argsstring>
        <name>pcie_ep_register_reset_cb</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cd" kindref="member">pcie_reset</ref></type>
          <declname>reset</declname>
        </param>
        <param>
          <type><ref refid="pcie__ep_8h_1af83085eb5819572854d919e5813253bf" kindref="member">pcie_ep_reset_callback_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Register callback function for reset interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>If reset interrupts are handled by device, this API can be used to register callback function, which will be executed part of corresponding PCIe reset handler</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>Reset interrupt type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function being registered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to be passed back to callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="211" column="19" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="211" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1a7c450e4f9d65aade3f912b72b38ed04d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pcie_ep_dma_xfer</definition>
        <argsstring>(const struct device *dev, uint64_t mapped_addr, uintptr_t local_addr, uint32_t size, const enum xfer_direction dir)</argsstring>
        <name>pcie_ep_dma_xfer</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>mapped_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>local_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const enum <ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Data transfer between mapped Host memory and device memory with &quot;System DMA&quot;. The term &quot;System DMA&quot; is used to clarify that we are not talking about dedicated &quot;PCIe DMA&quot;; rather the one which does not understand PCIe address directly, and uses the mapped Host memory. </para>
        </briefdescription>
        <detaileddescription>
<para>If DMA controller is available in the EP device, this API can be used to achieve data transfer between mapped Host memory, i.e. outbound memory and EP device&apos;s local memory with DMA</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapped_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Mapped Host memory address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device memory address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>DMA transfer length (bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction of DMA transfer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="246" column="19" bodyfile="include/drivers/pcie/endpoint/pcie_ep.h" bodystart="246" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1ac7e46d51c49ce6cb6b0c7ad7f8010292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pcie_ep_xfer_data_memcpy</definition>
        <argsstring>(const struct device *dev, uint64_t pcie_addr, uintptr_t *local_addr, uint32_t size, enum pcie_ob_mem_type ob_mem_type, enum xfer_direction dir)</argsstring>
        <name>pcie_ep_xfer_data_memcpy</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>pcie_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>local_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>enum <ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref></type>
          <declname>ob_mem_type</declname>
        </param>
        <param>
          <type>enum <ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Data transfer using memcpy. </para>
        </briefdescription>
        <detaileddescription>
<para>Helper API to achieve data transfer with memcpy through PCIe outbound memory</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcie_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Host memory buffer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Local memory buffer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Data transfer size (bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ob_mem_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Hint if lowmem/highmem outbound region has to be used (PCIE_OB_LOWMEM / PCIE_OB_HIGHMEM / PCIE_OB_ANYMEM), should be PCIE_OB_LOWMEM if bus master cannot generate more than 32-bit address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Data transfer direction (HOST_TO_DEVICE / DEVICE_TO_HOST)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="279" column="5" declfile="include/drivers/pcie/endpoint/pcie_ep.h" declline="279" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pcie__ep_8h_1acfe495f60e94341e88cc267a879918fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pcie_ep_xfer_data_dma</definition>
        <argsstring>(const struct device *dev, uint64_t pcie_addr, uintptr_t *local_addr, uint32_t size, enum pcie_ob_mem_type ob_mem_type, enum xfer_direction dir)</argsstring>
        <name>pcie_ep_xfer_data_dma</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>pcie_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>local_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>enum <ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref></type>
          <declname>ob_mem_type</declname>
        </param>
        <param>
          <type>enum <ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Data transfer using system DMA. </para>
        </briefdescription>
        <detaileddescription>
<para>Helper API to achieve data transfer with system DMA through PCIe outbound memory, this API is based off pcie_ep_xfer_data_memcpy, here we use &quot;system dma&quot; instead of memcpy</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcie_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Host memory buffer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Local memory buffer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Data transfer size (bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ob_mem_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Hint if lowmem/highmem outbound region has to be used (PCIE_OB_LOWMEM / PCIE_OB_HIGHMEM / PCIE_OB_ANYMEM) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Data transfer direction (HOST_TO_DEVICE / DEVICE_TO_HOST)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code if failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/endpoint/pcie_ep.h" line="301" column="5" declfile="include/drivers/pcie/endpoint/pcie_ep.h" declline="301" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs for the PCIe EP drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2020<sp/>Broadcom</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_PCIE_EP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_PCIE_EP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="init_8h" kindref="compound">init.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref><sp/>{</highlight></codeline>
<codeline lineno="22" refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba52b8bd55168f44c7c4a6a3d36824d286" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba52b8bd55168f44c7c4a6a3d36824d286" kindref="member">PCIE_OB_ANYMEM</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="23" refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba5312fb052e8dafaab224a4b554292e74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba5312fb052e8dafaab224a4b554292e74" kindref="member">PCIE_OB_LOWMEM</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="24" refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba13da19c9fa1732e72fa8add58da33ebb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510ba13da19c9fa1732e72fa8add58da33ebb" kindref="member">PCIE_OB_HIGHMEM</ref>,<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800" kindref="member">pci_ep_irq_type</ref><sp/>{</highlight></codeline>
<codeline lineno="28" refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800ad90da0a62096ef8a4fc7d230afd0d44d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800ad90da0a62096ef8a4fc7d230afd0d44d" kindref="member">PCIE_EP_IRQ_LEGACY</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29" refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800a267b658ad2587fd0d57664197daeb318" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800a267b658ad2587fd0d57664197daeb318" kindref="member">PCIE_EP_IRQ_MSI</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30" refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800a55cad2c5812c9c7c14476ff000199ad4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800a55cad2c5812c9c7c14476ff000199ad4" kindref="member">PCIE_EP_IRQ_MSIX</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref><sp/>{</highlight></codeline>
<codeline lineno="34" refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458af2c2a8166d85d21e036a4a2015df803e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458af2c2a8166d85d21e036a4a2015df803e" kindref="member">HOST_TO_DEVICE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458a4c419a2c450c4d954c3768631870480a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458a4c419a2c450c4d954c3768631870480a" kindref="member">DEVICE_TO_HOST</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cd" kindref="member">pcie_reset</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda532057b4dab53d2e86701394ead62ea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda532057b4dab53d2e86701394ead62ea7" kindref="member">PCIE_PERST</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40" refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda7d94ae3f1fbdd486102559a450f01dee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda7d94ae3f1fbdd486102559a450f01dee" kindref="member">PCIE_PERST_INB</ref>,<sp/></highlight></codeline>
<codeline lineno="41" refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda6dcb2d2f5ad3624bda5ca25d2e38a47a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda6dcb2d2f5ad3624bda5ca25d2e38a47a" kindref="member">PCIE_FLR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda2c60bd39ac112aad31d1299900f0795a" kindref="member">PCIE_RESET_MAX</ref></highlight></codeline>
<codeline lineno="43" refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cda2c60bd39ac112aad31d1299900f0795a" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="pcie__ep_8h_1af83085eb5819572854d919e5813253bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="pcie__ep_8h_1af83085eb5819572854d919e5813253bf" kindref="member">pcie_ep_reset_callback_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structpcie__ep__driver__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>{</highlight></codeline>
<codeline lineno="60" refid="structpcie__ep__driver__api_1aa5f508a7ab546c862f3aa65b480a45cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structpcie__ep__driver__api_1aa5f508a7ab546c862f3aa65b480a45cc" kindref="member">conf_read</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>offset,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="62" refid="structpcie__ep__driver__api_1acc1262a07dd079842c9c95708a2c6004" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structpcie__ep__driver__api_1acc1262a07dd079842c9c95708a2c6004" kindref="member">conf_write</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>offset,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="64" refid="structpcie__ep__driver__api_1a444198e899d6a1353a7f8e3828f76643" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structpcie__ep__driver__api_1a444198e899d6a1353a7f8e3828f76643" kindref="member">map_addr</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>pcie_addr,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>*mapped_addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>size,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref><sp/>ob_mem_type);</highlight></codeline>
<codeline lineno="67" refid="structpcie__ep__driver__api_1a82d9766067a066d83b25390ad5903534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structpcie__ep__driver__api_1a82d9766067a066d83b25390ad5903534" kindref="member">unmap_addr</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>mapped_addr);</highlight></codeline>
<codeline lineno="68" refid="structpcie__ep__driver__api_1a83ef7d357174e55364660b53924b0017" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structpcie__ep__driver__api_1a83ef7d357174e55364660b53924b0017" kindref="member">raise_irq</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800" kindref="member">pci_ep_irq_type</ref><sp/>irq_type,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>irq_num);</highlight></codeline>
<codeline lineno="71" refid="structpcie__ep__driver__api_1adb5f2ea78cc5e9b0f61461a036c746eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structpcie__ep__driver__api_1adb5f2ea78cc5e9b0f61461a036c746eb" kindref="member">register_reset_cb</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cd" kindref="member">pcie_reset</ref><sp/>reset,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1af83085eb5819572854d919e5813253bf" kindref="member">pcie_ep_reset_callback_t</ref><sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="74" refid="structpcie__ep__driver__api_1ab816f2aad307f0b4a8181a7711d565bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structpcie__ep__driver__api_1ab816f2aad307f0b4a8181a7711d565bc" kindref="member">dma_xfer</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>mapped_addr,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>local_addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>size,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref><sp/>dir);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="pcie__ep_8h_1ad35d42579500a959bb3275cd65b04a42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1ad35d42579500a959bb3275cd65b04a42" kindref="member">pcie_ep_conf_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>offset,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structpcie__ep__driver__api_1aa5f508a7ab546c862f3aa65b480a45cc" kindref="member">conf_read</ref>(dev,<sp/>offset,<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="pcie__ep_8h_1a8d3f4de13956fbd7ed71acbd387f781a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a8d3f4de13956fbd7ed71acbd387f781a" kindref="member">pcie_ep_conf_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>offset,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api-&gt;<ref refid="structpcie__ep__driver__api_1acc1262a07dd079842c9c95708a2c6004" kindref="member">conf_write</ref>(dev,<sp/>offset,<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="pcie__ep_8h_1a7bcff5f22fd32e0b2c3c3c509038b2db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a7bcff5f22fd32e0b2c3c3c509038b2db" kindref="member">pcie_ep_map_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>pcie_addr,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>*mapped_addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>size,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref><sp/>ob_mem_type)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structpcie__ep__driver__api_1a444198e899d6a1353a7f8e3828f76643" kindref="member">map_addr</ref>(dev,<sp/>pcie_addr,<sp/>mapped_addr,<sp/>size,<sp/>ob_mem_type);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="pcie__ep_8h_1a07ee4ed9ceb42462c95da8bbf3dfc8f7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a07ee4ed9ceb42462c95da8bbf3dfc8f7" kindref="member">pcie_ep_unmap_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>mapped_addr)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api-&gt;<ref refid="structpcie__ep__driver__api_1a82d9766067a066d83b25390ad5903534" kindref="member">unmap_addr</ref>(dev,<sp/>mapped_addr);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="pcie__ep_8h_1aec421e689d4d72b0bf8a34fe8303b103" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aec421e689d4d72b0bf8a34fe8303b103" kindref="member">pcie_ep_raise_irq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aba0e572125869b246d4968ee164f3800" kindref="member">pci_ep_irq_type</ref><sp/>irq_type,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>irq_num)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structpcie__ep__driver__api_1a83ef7d357174e55364660b53924b0017" kindref="member">raise_irq</ref>(dev,<sp/>irq_type,<sp/>irq_num);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="pcie__ep_8h_1a4e9cc8364703bb58e96642d1250dc410" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a4e9cc8364703bb58e96642d1250dc410" kindref="member">pcie_ep_register_reset_cb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a7b0f0f4693b7d11b973bfd62ac1b35cd" kindref="member">pcie_reset</ref><sp/>reset,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pcie__ep_8h_1af83085eb5819572854d919e5813253bf" kindref="member">pcie_ep_reset_callback_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;<ref refid="structpcie__ep__driver__api_1adb5f2ea78cc5e9b0f61461a036c746eb" kindref="member">register_reset_cb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structpcie__ep__driver__api_1adb5f2ea78cc5e9b0f61461a036c746eb" kindref="member">register_reset_cb</ref>(dev,<sp/>reset,<sp/>cb,<sp/>arg);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga91457bbf35f0f1085619a99423bb1f33" kindref="member">ENOTSUP</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="pcie__ep_8h_1a7c450e4f9d65aade3f912b72b38ed04d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1a7c450e4f9d65aade3f912b72b38ed04d" kindref="member">pcie_ep_dma_xfer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>mapped_addr,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>local_addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>size,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref><sp/>dir)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpcie__ep__driver__api" kindref="compound">pcie_ep_driver_api</ref><sp/>*)dev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;<ref refid="structpcie__ep__driver__api_1ab816f2aad307f0b4a8181a7711d565bc" kindref="member">dma_xfer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structpcie__ep__driver__api_1ab816f2aad307f0b4a8181a7711d565bc" kindref="member">dma_xfer</ref>(dev,<sp/>mapped_addr,<sp/>local_addr,<sp/>size,<sp/>dir);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga91457bbf35f0f1085619a99423bb1f33" kindref="member">ENOTSUP</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="pcie__ep_8h_1ac7e46d51c49ce6cb6b0c7ad7f8010292" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1ac7e46d51c49ce6cb6b0c7ad7f8010292" kindref="member">pcie_ep_xfer_data_memcpy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>pcie_addr,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>*local_addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>size,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref><sp/>ob_mem_type,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref><sp/>dir);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="pcie__ep_8h_1acfe495f60e94341e88cc267a879918fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1acfe495f60e94341e88cc267a879918fc" kindref="member">pcie_ep_xfer_data_dma</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>pcie_addr,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>*local_addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>size,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1aa7c51648c5a1663dd4dec689727a510b" kindref="member">pcie_ob_mem_type</ref><sp/>ob_mem_type,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pcie__ep_8h_1acd2605f2fb5676ded5f125712681d458" kindref="member">xfer_direction</ref><sp/>dir);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_PCIE_EP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/pcie/endpoint/pcie_ep.h"/>
  </compounddef>
</doxygen>
