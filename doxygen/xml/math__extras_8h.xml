<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="math__extras_8h" kind="file" language="C++">
    <compoundname>math_extras.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="math__extras__impl_8h" local="no">sys/math_extras_impl.h</includes>
    <includedby refid="drivers_2pwm_8h" local="no">include/drivers/pwm.h</includedby>
    <includedby refid="syscall__handler_8h" local="no">include/syscall_handler.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/sys/math_extras.h</label>
        <link refid="math__extras_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/math_extras_impl.h</label>
        <link refid="math__extras__impl_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/drivers/pwm.h</label>
        <link refid="drivers_2pwm_8h"/>
      </node>
      <node id="1">
        <label>include/sys/math_extras.h</label>
        <link refid="math__extras_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="6">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="7">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="8">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="9">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="10">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>Unsigned integer addition with overflow detection.</header>
      <description><para>These functions compute <computeroutput>a + b</computeroutput> and store the result in <computeroutput>*result</computeroutput>, returning true if the operation overflowed. </para>
</description>
      <memberdef kind="function" id="math__extras_8h_1a62d018abdf97551665cab7486b5a519a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool u16_add_overflow</definition>
        <argsstring>(uint16_t a, uint16_t b, uint16_t *result)</argsstring>
        <name>u16_add_overflow</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="31" column="13" declfile="include/sys/math_extras.h" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1a3f36aa272f5595d78c6e8219b2c4dbfb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool u32_add_overflow</definition>
        <argsstring>(uint32_t a, uint32_t b, uint32_t *result)</argsstring>
        <name>u32_add_overflow</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="32" column="13" declfile="include/sys/math_extras.h" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1af98ec1d8b1c00e30382eed01853e3307" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool u64_add_overflow</definition>
        <argsstring>(uint64_t a, uint64_t b, uint64_t *result)</argsstring>
        <name>u64_add_overflow</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="33" column="13" declfile="include/sys/math_extras.h" declline="33" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1a7aaec179564038b540aaf4ab3c9a666d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool size_add_overflow</definition>
        <argsstring>(size_t a, size_t b, size_t *result)</argsstring>
        <name>size_add_overflow</name>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="34" column="13" declfile="include/sys/math_extras.h" declline="34" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Unsigned integer multiplication with overflow detection.</header>
      <description><para>These functions compute <computeroutput>a * b</computeroutput> and store the result in <computeroutput>*result</computeroutput>, returning true if the operation overflowed. </para>
</description>
      <memberdef kind="function" id="math__extras_8h_1a292df7083a9da5525cda13e2546e81ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool u16_mul_overflow</definition>
        <argsstring>(uint16_t a, uint16_t b, uint16_t *result)</argsstring>
        <name>u16_mul_overflow</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="44" column="13" declfile="include/sys/math_extras.h" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1a427e8cd4fcafab244576994acc9b960f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool u32_mul_overflow</definition>
        <argsstring>(uint32_t a, uint32_t b, uint32_t *result)</argsstring>
        <name>u32_mul_overflow</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="45" column="13" declfile="include/sys/math_extras.h" declline="45" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1a366f6606874071677bf9079647d9abce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool u64_mul_overflow</definition>
        <argsstring>(uint64_t a, uint64_t b, uint64_t *result)</argsstring>
        <name>u64_mul_overflow</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="46" column="13" declfile="include/sys/math_extras.h" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1a790b24a5d239afcc08d9e4f66c25ea56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool size_mul_overflow</definition>
        <argsstring>(size_t a, size_t b, size_t *result)</argsstring>
        <name>size_mul_overflow</name>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="47" column="13" declfile="include/sys/math_extras.h" declline="47" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Count leading zeros.</header>
      <description><para>Count the number of leading zero bits in the bitwise representation of <computeroutput>x</computeroutput>. When <computeroutput>x = 0</computeroutput>, this is the size of <computeroutput>x</computeroutput> in bits. </para>
</description>
      <memberdef kind="function" id="math__extras_8h_1a97e8d8a40a45899ab7e5ce718342536b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int u32_count_leading_zeros</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>u32_count_leading_zeros</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="57" column="12" declfile="include/sys/math_extras.h" declline="57" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1af5f31e98f2f675a0b4cc54b7fba6f56c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int u64_count_leading_zeros</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>u64_count_leading_zeros</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="58" column="12" declfile="include/sys/math_extras.h" declline="58" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Count trailing zeros.</header>
      <description><para>Count the number of trailing zero bits in the bitwise representation of <computeroutput>x</computeroutput>. When <computeroutput>x = 0</computeroutput>, this is the size of <computeroutput>x</computeroutput> in bits. </para>
</description>
      <memberdef kind="function" id="math__extras_8h_1a4cb313f98c3fd3b00d6f4db74a9a0076" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int u32_count_trailing_zeros</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>u32_count_trailing_zeros</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="68" column="12" declfile="include/sys/math_extras.h" declline="68" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="math__extras_8h_1a300356629c0388d37958ef026180ea4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int u64_count_trailing_zeros</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>u64_count_trailing_zeros</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/math_extras.h" line="69" column="12" declfile="include/sys/math_extras.h" declline="69" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extra arithmetic and bit manipulation functions. </para>
    </briefdescription>
    <detaileddescription>
<para>This header file provides portable wrapper functions for a number of arithmetic and bit-counting functions that are often provided by compiler builtins. If the compiler does not have an appropriate builtin, a portable C implementation is used instead. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Facebook.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_MATH_EXTRAS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_MATH_EXTRAS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="math__extras_8h_1a62d018abdf97551665cab7486b5a519a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a62d018abdf97551665cab7486b5a519a" kindref="member">u16_add_overflow</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>a,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>b,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="32" refid="math__extras_8h_1a3f36aa272f5595d78c6e8219b2c4dbfb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a3f36aa272f5595d78c6e8219b2c4dbfb" kindref="member">u32_add_overflow</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>a,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>b,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="33" refid="math__extras_8h_1af98ec1d8b1c00e30382eed01853e3307" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1af98ec1d8b1c00e30382eed01853e3307" kindref="member">u64_add_overflow</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>a,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>b,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="34" refid="math__extras_8h_1a7aaec179564038b540aaf4ab3c9a666d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a7aaec179564038b540aaf4ab3c9a666d" kindref="member">size_add_overflow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="44" refid="math__extras_8h_1a292df7083a9da5525cda13e2546e81ba" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a292df7083a9da5525cda13e2546e81ba" kindref="member">u16_mul_overflow</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>a,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>b,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="45" refid="math__extras_8h_1a427e8cd4fcafab244576994acc9b960f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a427e8cd4fcafab244576994acc9b960f" kindref="member">u32_mul_overflow</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>a,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>b,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="46" refid="math__extras_8h_1a366f6606874071677bf9079647d9abce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a366f6606874071677bf9079647d9abce" kindref="member">u64_mul_overflow</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>a,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>b,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="47" refid="math__extras_8h_1a790b24a5d239afcc08d9e4f66c25ea56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a790b24a5d239afcc08d9e4f66c25ea56" kindref="member">size_mul_overflow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="57" refid="math__extras_8h_1a97e8d8a40a45899ab7e5ce718342536b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a97e8d8a40a45899ab7e5ce718342536b" kindref="member">u32_count_leading_zeros</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="58" refid="math__extras_8h_1af5f31e98f2f675a0b4cc54b7fba6f56c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1af5f31e98f2f675a0b4cc54b7fba6f56c" kindref="member">u64_count_leading_zeros</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="68" refid="math__extras_8h_1a4cb313f98c3fd3b00d6f4db74a9a0076" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a4cb313f98c3fd3b00d6f4db74a9a0076" kindref="member">u32_count_trailing_zeros</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="69" refid="math__extras_8h_1a300356629c0388d37958ef026180ea4d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="math__extras_8h_1a300356629c0388d37958ef026180ea4d" kindref="member">u64_count_trailing_zeros</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="math__extras__impl_8h" kindref="compound">sys/math_extras_impl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_MATH_EXTRAS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/math_extras.h"/>
  </compounddef>
</doxygen>
