<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structonoff__sync__service" kind="struct" language="C++" prot="public">
    <compoundname>onoff_sync_service</compoundname>
    <includes refid="onoff_8h" local="no">onoff.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structonoff__sync__service_1ac08d780a80fed2d89c1334cc3c65eeed" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__spinlock" kindref="compound">k_spinlock</ref></type>
        <definition>struct k_spinlock onoff_sync_service::lock</definition>
        <argsstring></argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/onoff.h" line="576" column="17" bodyfile="include/sys/onoff.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structonoff__sync__service_1adff029426035dffb57fda0de44f2abae" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t onoff_sync_service::count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/onoff.h" line="579" column="9" bodyfile="include/sys/onoff.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>State used when a driver uses the on-off service API for synchronous operations. </para>
    </briefdescription>
    <detaileddescription>
<para>This is useful when a subsystem API uses the on-off API to support asynchronous operations but the transitions required by a particular driver are isr-ok and not sleep. It serves as a substitute for <ref refid="structonoff__manager" kindref="compound">onoff_manager</ref>, with locking and persisted state updates supported by <ref refid="group__resource__mgmt__onoff__apis_1ga174cadf7dfa5d3c4dc5c8185994f3825" kindref="member">onoff_sync_lock()</ref> and <ref refid="group__resource__mgmt__onoff__apis_1gae3331bdad9d03309ee78e86c487b7f26" kindref="member">onoff_sync_finalize()</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="1">
        <label>onoff_sync_service</label>
        <link refid="structonoff__sync__service"/>
        <childnode refid="2" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/sys/onoff.h" line="574" column="1" bodyfile="include/sys/onoff.h" bodystart="574" bodyend="580"/>
    <listofallmembers>
      <member refid="structonoff__sync__service_1adff029426035dffb57fda0de44f2abae" prot="public" virt="non-virtual"><scope>onoff_sync_service</scope><name>count</name></member>
      <member refid="structonoff__sync__service_1ac08d780a80fed2d89c1334cc3c65eeed" prot="public" virt="non-virtual"><scope>onoff_sync_service</scope><name>lock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
