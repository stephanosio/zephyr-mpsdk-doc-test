<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__smp__module__tests" kind="group">
    <compoundname>kernel_smp_module_tests</compoundname>
    <title>SMP Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__smp__module__tests_1ga4635d2400f9d3d19a1d5121dccf2a012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_get_cpu</definition>
        <argsstring>(void)</argsstring>
        <name>test_get_cpu</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test get a pointer of CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>To verify architecture layer provides a mechanism to return a pointer to the current kernel CPU record of the running CPU. We call <ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> and get it&apos;s member, both in main and spwaned thread speratively, and compare them. They shall be different in SMP enviornment.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>Interface testing, function and block box testing, dynamic analysis and testing,</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_SMP=y, and the HW platform must support SMP.</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>In main thread, call <ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> to get it&apos;s member &quot;id&quot;,then store it into a variable thread_id.</para>
</listitem><listitem><para>Spawn a thread t2, and pass the stored thread_id to it, then call <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> 50us to wait for thread run and won&apos;t be swapped out.</para>
</listitem><listitem><para>In thread t2, call <ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> to get pointer of current cpu data. Then check if it not NULL.</para>
</listitem><listitem><para>Store the member id via accessing pointer of current cpu data to var cpu_id.</para>
</listitem><listitem><para>Check if cpu_id is not equaled to bsp_id that we pass into thread.</para>
</listitem><listitem><para>Call <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> and loop forever.</para>
</listitem><listitem><para>In main thread, terminate the thread t2 before exit.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The pointer of current cpu data that we got from function call is correct.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if the check of step 3,5 are all passed.</para>
</listitem><listitem><para>Failure if one of the check of step 3,5 is failed.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>This test using for the platform that support SMP, in our current scenario , only x86_64, arc and xtensa supported.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="arc_2arch__inlines_8h_1a3e8a7515c0c3b8de5a037ce5997c73b0" kindref="member">arch_curr_cpu()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="539" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="539" bodyend="555"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
