<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__pipe__avail_8c" kind="file" language="C++">
    <compoundname>test_pipe_avail.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_avail.c</label>
        <link refid="test__pipe__avail_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="group__kernel__pipe__tests_1ga5337edf3b057c982a0fb434cc75e9506" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> <ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> char</type>
        <definition>ZTEST_DMEM unsigned char data[]</definition>
        <argsstring>[]</argsstring>
        <name>data</name>
        <initializer>= &quot;abcdefgh&quot;</initializer>
        <briefdescription>
<para>Tests for the Pipe read / write availability. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="15" column="34" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref></type>
        <definition>struct k_pipe pipe</definition>
        <argsstring></argsstring>
        <name>pipe</name>
        <initializer>= {
	.<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref> = <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>,
	.size = sizeof(<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>) - 1 ,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="16" column="20" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__pipe__tests_1gae4e485dafcd7063842298620b30f2733" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref></type>
        <definition>struct k_pipe bufferless</definition>
        <argsstring></argsstring>
        <name>bufferless</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="21" column="20" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__kernel__pipe__tests_1ga8ad3cc1ffd86f88e50ba27223c17f3fb" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__pipe" kindref="compound">k_pipe</ref></type>
        <definition>struct k_pipe bufferless1</definition>
        <argsstring></argsstring>
        <name>bufferless1</name>
        <initializer>= {
	.<ref refid="group__kernel__mbox__api_1gab659fc0dee01e6639b8b6108addbd046" kindref="member">buffer</ref> = <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>,
	.size = 0,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="23" column="20" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga648e3f0e21e7ca863744932b847c2df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_no_buffer</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_no_buffer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Pipes with no buffer or size 0 should return 0 bytes available. </para>
        </briefdescription>
        <detaileddescription>
<para>Pipes can be created to be bufferless (i.e. <ref refid="structk__pipe_1acb78995d6b7df28a5452f5d2e88b4dfb" kindref="member">k_pipe::buffer</ref> is <computeroutput>NULL</computeroutput> or <ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">k_pipe::size</ref> is 0).</para>
<para>If either of those conditions is true, then <ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref> and <ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref> should return 0.</para>
<para><simplesect kind="note"><para>A distinction can be made between buffered and bufferless pipes in that <ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref> and <ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref> will never simultaneously return 0 for a buffered pipe, but they will both return 0 for an unbuffered pipe. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="43" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="43" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga2c091cd42e8c0c37edc7094aa7d01c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_r_lt_w</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_r_lt_w</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for r &lt; w. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref> is less than <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref>.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is not relevant. <verbatim> r     w
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim> As shown above, the pipe will be able to read 3 bytes without blocking and write 5 bytes without blocking.</para>
<para>Thus r_avail = w - r = 3 would read: a b c d</para>
<para>w_avail = N - (w - r) = 5 would overwrite: e f g h </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="83" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="83" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga32f5729c631bfa4fd8f893bf002ae742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_w_lt_r</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_w_lt_r</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for w &lt; r. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref> is less than <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref>.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is not relevant. <verbatim> w     r
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim></para>
<para>As shown above, the pipe will fbe able to read 5 bytes without blocking and write 3 bytes without blocking.</para>
<para>Thus r_avail = N - (r - w) = 5 would read: e f g h</para>
<para>w_avail = r - w = 3 would overwrite: a b c d </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="122" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga6d93684dce575130daa520d4178e554d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_r_eq_w_empty</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_r_eq_w_empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for <computeroutput>r == w</computeroutput> and an empty buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref> is equal to <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref> and <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is zero.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is relevant because the read and write indeces are equal. <verbatim>       r
       w
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim> Regardless of whether the buffer is full or empty, the following holds: <verbatim>r_avail = bytes_used
w_avail = N - bytes_used
</verbatim> Thus: r_avail = 0 would read:</para>
<para>w_avail = N - 0 = 8 would overwrite: e f g h a b c d </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="165" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="165" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__pipe__tests_1ga49ff4c6fc7350063ed424be560c594f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pipe_avail_r_eq_w_full</definition>
        <argsstring>(void)</argsstring>
        <name>test_pipe_avail_r_eq_w_full</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test available read / write space for <computeroutput>r == w</computeroutput> and a full buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This test case is for buffered <ref refid="structk__pipe" kindref="compound">k_pipe</ref> objects and covers the case where <ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">k_pipe::read_index</ref> is equal to <ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">k_pipe::write_index</ref> and <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is equal to <ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">k_pipe::size</ref>.</para>
<para>In this case, <ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">k_pipe::bytes_used</ref> is relevant because the read and write indeces are equal. <verbatim>       r
       w
|a|b|c|d|e|f|g|h|
|0|1|2|3|4|5|6|7|
</verbatim> Regardless of whether the buffer is full or empty, the following holds: <verbatim>r_avail = bytes_used
w_avail = N - bytes_used
</verbatim> Thus r_avail = N = 8 would read: e f g h a b c d</para>
<para>w_avail = N - 8 = 0 would overwrite: </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" line="208" column="6" bodyfile="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c" bodystart="208" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Friedt<sp/>Professional<sp/>Engineering<sp/>Services,<sp/>Inc</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__aligned(4)<sp/><ref refid="group__kernel__pipe__tests_1ga5337edf3b057c982a0fb434cc75e9506" kindref="member">data</ref>[]<sp/>=<sp/>&quot;abcdefgh&quot;;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">static<sp/>struct<sp/><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structk__pipe_1acb78995d6b7df28a5452f5d2e88b4dfb" kindref="member">buffer</ref><sp/>=<sp/><ref refid="group__kernel__pipe__tests_1ga5337edf3b057c982a0fb434cc75e9506" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__kernel__pipe__tests_1ga5337edf3b057c982a0fb434cc75e9506" kindref="member">data</ref>)<sp/>-<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>&apos;\0&apos;<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/><ref refid="group__kernel__pipe__tests_1gae4e485dafcd7063842298620b30f2733" kindref="member">bufferless</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__pipe" kindref="compound">k_pipe</ref><sp/><ref refid="group__kernel__pipe__tests_1ga8ad3cc1ffd86f88e50ba27223c17f3fb" kindref="member">bufferless1</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structk__pipe_1acb78995d6b7df28a5452f5d2e88b4dfb" kindref="member">buffer</ref><sp/>=<sp/><ref refid="group__kernel__pipe__tests_1ga5337edf3b057c982a0fb434cc75e9506" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__pipe__tests_1ga648e3f0e21e7ca863744932b847c2df9" kindref="member">test_pipe_avail_no_buffer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_avail;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>w_avail;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_avail<sp/>=<sp/><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gae4e485dafcd7063842298620b30f2733" kindref="member">bufferless</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(r_avail,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;read:<sp/>expected:<sp/>0<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>r_avail);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_avail<sp/>=<sp/><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gae4e485dafcd7063842298620b30f2733" kindref="member">bufferless</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(w_avail,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;write:<sp/>expected:<sp/>0<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>w_avail);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_avail<sp/>=<sp/><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1ga8ad3cc1ffd86f88e50ba27223c17f3fb" kindref="member">bufferless1</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(r_avail,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;read:<sp/>expected:<sp/>0<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>r_avail);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_avail<sp/>=<sp/><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1ga8ad3cc1ffd86f88e50ba27223c17f3fb" kindref="member">bufferless1</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(w_avail,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;write:<sp/>expected:<sp/>0<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>w_avail);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__pipe__tests_1ga2c091cd42e8c0c37edc7094aa7d01c7e" kindref="member">test_pipe_avail_r_lt_w</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_avail;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>w_avail;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">read_index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">write_index</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pipe.bytes_used<sp/>is<sp/>irrelevant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_avail<sp/>=<sp/><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(r_avail,<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;read:<sp/>expected:<sp/>3<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>r_avail);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_avail<sp/>=<sp/><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(w_avail,<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;write:<sp/>expected:<sp/>5<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>w_avail);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__pipe__tests_1ga32f5729c631bfa4fd8f893bf002ae742" kindref="member">test_pipe_avail_w_lt_r</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_avail;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>w_avail;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">read_index</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">write_index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pipe.bytes_used<sp/>is<sp/>irrelevant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_avail<sp/>=<sp/><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(r_avail,<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;read:<sp/>expected:<sp/>4<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>r_avail);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_avail<sp/>=<sp/><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(w_avail,<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;write:<sp/>expected:<sp/>4<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>w_avail);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__pipe__tests_1ga6d93684dce575130daa520d4178e554d" kindref="member">test_pipe_avail_r_eq_w_empty</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_avail;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>w_avail;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">read_index</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">write_index</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">bytes_used</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_avail<sp/>=<sp/><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(r_avail,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;read:<sp/>expected:<sp/>0<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>r_avail);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_avail<sp/>=<sp/><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(w_avail,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;write:<sp/>expected:<sp/>8<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>w_avail);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__pipe__tests_1ga49ff4c6fc7350063ed424be560c594f4" kindref="member">test_pipe_avail_r_eq_w_full</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_avail;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>w_avail;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1ae40f81d9c1459fa42f179cbc728aadd0" kindref="member">read_index</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1a8f46bd01da0e52e4ee918d9ebe6ad739" kindref="member">write_index</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1a91bedad65285546734b8724811dc6eb8" kindref="member">bytes_used</ref><sp/>=<sp/><ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>.<ref refid="structk__pipe_1aca3472fb8d68f01af4e26b0b88736d64" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_avail<sp/>=<sp/><ref refid="group__pipe__apis_1ga21849ebf856532de6e3ea38489071220" kindref="member">k_pipe_read_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(r_avail,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;read:<sp/>expected:<sp/>8<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>r_avail);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_avail<sp/>=<sp/><ref refid="group__pipe__apis_1gaff3ed3e93591d72c60a3640d195998c3" kindref="member">k_pipe_write_avail</ref>(&amp;<ref refid="group__kernel__pipe__tests_1gaa4fbc828f262153e0dc676826872c0da" kindref="member">pipe</ref>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(w_avail,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;write:<sp/>expected:<sp/>0<sp/>actual:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>w_avail);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tests/kernel/pipe/pipe_api/src/test_pipe_avail.c"/>
  </compounddef>
</doxygen>
