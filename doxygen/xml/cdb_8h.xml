<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="cdb_8h" kind="file" language="C++">
    <compoundname>cdb.h</compoundname>
    <includes refid="inttypes_8h" local="no">inttypes.h</includes>
    <includes refid="atomic_8h" local="no">sys/atomic.h</includes>
    <includedby refid="mesh_8h" local="no">include/bluetooth/mesh.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/bluetooth/mesh/cdb.h</label>
        <link refid="cdb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="8">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/bluetooth/mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/mesh/cdb.h</label>
        <link refid="cdb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bluetooth/mesh/shell.h</label>
        <link refid="bluetooth_2mesh_2shell_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbt__mesh__cdb__node" prot="public">bt_mesh_cdb_node</innerclass>
    <innerclass refid="structbt__mesh__cdb__subnet" prot="public">bt_mesh_cdb_subnet</innerclass>
    <innerclass refid="structbt__mesh__cdb__app__key" prot="public">bt_mesh_cdb_app_key</innerclass>
    <innerclass refid="structbt__mesh__cdb" prot="public">bt_mesh_cdb</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cdb_8h_1ae49e5e1ae89eef30538ae9f45c772b64" prot="public" static="no">
        <name>NODE_COUNT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="21" column="10" bodyfile="include/bluetooth/mesh/cdb.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cdb_8h_1a5ab07a907049974c089a4b0dd706ef77" prot="public" static="no">
        <name>SUBNET_COUNT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="22" column="9" bodyfile="include/bluetooth/mesh/cdb.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cdb_8h_1aab65f293c17c657d670e802bbfe389d7" prot="public" static="no">
        <name>APP_KEY_COUNT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="23" column="9" bodyfile="include/bluetooth/mesh/cdb.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="cdb_8h_1a3babbf89cae9b856a12864a41506efbd" prot="public" static="no" strong="no">
        <type></type>
        <name>@82</name>
        <enumvalue id="cdb_8h_1a3babbf89cae9b856a12864a41506efbdaab4ca02f1d0d9f6a743bee9f66eeba12" prot="public">
          <name>BT_MESH_CDB_NODE_CONFIGURED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cdb_8h_1a3babbf89cae9b856a12864a41506efbda00449c6d1403f903b115c3de36a2a3bd" prot="public">
          <name>BT_MESH_CDB_NODE_FLAG_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="26" column="1" bodyfile="include/bluetooth/mesh/cdb.h" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84" prot="public" static="no" strong="no">
        <type></type>
        <name>@83</name>
        <enumvalue id="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84ad5a2fc5c15efc200ef31b8876eabc01d" prot="public">
          <name>BT_MESH_CDB_VALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a5d07a0f33a2544be141d1fb4c6130bdd" prot="public">
          <name>BT_MESH_CDB_SUBNET_PENDING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a62fc7baf49a7bf92a3b3c80eb57d8cf8" prot="public">
          <name>BT_MESH_CDB_KEYS_PENDING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a3fe59a5bb698f65be4389345fe63ccc1" prot="public">
          <name>BT_MESH_CDB_NODES_PENDING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a229d9bfcc277ea2cb81e991a1a30ceb6" prot="public">
          <name>BT_MESH_CDB_IVU_IN_PROGRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84abf303893a5d3b399856b3670c4a7fd41" prot="public">
          <name>BT_MESH_CDB_FLAG_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="61" column="1" bodyfile="include/bluetooth/mesh/cdb.h" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="enum" id="cdb_8h_1a634f9f55e799f3052a34590f08100017" prot="public" static="no" strong="no">
        <type></type>
        <name>@84</name>
        <enumvalue id="cdb_8h_1a634f9f55e799f3052a34590f08100017af2362ea16e4733a32e26138a3577e5fb" prot="public">
          <name>BT_MESH_CDB_ITER_STOP</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cdb_8h_1a634f9f55e799f3052a34590f08100017a6b057da4bd763f7c65e41410b7c72218" prot="public">
          <name>BT_MESH_CDB_ITER_CONTINUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="158" column="1" bodyfile="include/bluetooth/mesh/cdb.h" bodystart="158" bodyend="161"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cdb_8h_1ad65e1c2e2ab660f417f6723ff415ef8d" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref>(*</type>
        <definition>bt_mesh_cdb_node_func_t</definition>
        <argsstring>)(struct bt_mesh_cdb_node *node, void *user_data)</argsstring>
        <name>bt_mesh_cdb_node_func_t</name>
        <briefdescription>
<para>Node iterator callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Node found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data given.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BT_MESH_CDB_ITER_CONTINUE to continue to iterate through the nodes or BT_MESH_CDB_ITER_STOP to stop. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="172" column="9" bodyfile="include/bluetooth/mesh/cdb.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cdb_8h_1afa51505628405a3778d1bdb4fd905ca0" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbt__mesh__cdb" kindref="compound">bt_mesh_cdb</ref></type>
        <definition>struct bt_mesh_cdb bt_mesh_cdb</definition>
        <argsstring></argsstring>
        <name>bt_mesh_cdb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="81" column="25" declfile="include/bluetooth/mesh/cdb.h" declline="81" declcolumn="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cdb_8h_1a00490e69b96e88cdf7336ca22e63617d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_cdb_create</definition>
        <argsstring>(const uint8_t key[16])</argsstring>
        <name>bt_mesh_cdb_create</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>key</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
<para>Create the Mesh Configuration Database. </para>
        </briefdescription>
        <detaileddescription>
<para>Create and initialize the Mesh Configuration Database. A primary subnet, ie one with NetIdx 0, will be added and the provided key will be used as NetKey for that subnet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The NetKey to be used for the primary subnet.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="93" column="5" declfile="include/bluetooth/mesh/cdb.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a4bf4f49fbd75ee33876ffd34f6c6f76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_clear</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_cdb_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear the Mesh Configuration Database. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove all nodes, subnets and app-keys stored in the database and mark the database as invalid. The data will be cleared from persistent storage if CONFIG_BT_SETTINGS is enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="101" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1aa6d124339002c43fc35f301a9eef3e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_iv_update</definition>
        <argsstring>(uint32_t iv_index, bool iv_update)</argsstring>
        <name>bt_mesh_cdb_iv_update</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>iv_index</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>iv_update</declname>
        </param>
        <briefdescription>
<para>Set and store the IV Index and IV Update flag. </para>
        </briefdescription>
        <detaileddescription>
<para>The IV Index stored in the CDB will be the one used during provisioning of new nodes. This function is generally only used from inside the stack.</para>
<para>This function will store the data to persistent storage if CONFIG_BT_SETTINGS is enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iv_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The new IV Index to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv_update</parametername>
</parameternamelist>
<parameterdescription>
<para>True if there is an ongoing IV Update procedure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="114" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1ab0dc86dd674f57a820aa3f5cebf77895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref> *</type>
        <definition>struct bt_mesh_cdb_node * bt_mesh_cdb_node_alloc</definition>
        <argsstring>(const uint8_t uuid[16], uint16_t addr, uint8_t num_elem, uint16_t net_idx)</argsstring>
        <name>bt_mesh_cdb_node_alloc</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>uuid</declname>
          <array>[16]</array>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_elem</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <briefdescription>
<para>Allocate a node. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new node in the CDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uuid</parametername>
</parameternamelist>
<parameterdescription>
<para>UUID of the node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the node&apos;s primary element. If 0, the lowest possible address available will be assigned to the node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements that the node has. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>NetIdx that the node was provisioned to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new node or NULL if it cannot be allocated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="128" column="23" declfile="include/bluetooth/mesh/cdb.h" declline="128" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a6d9cc2d360075b6b3e939a4979e08895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_node_del</definition>
        <argsstring>(struct bt_mesh_cdb_node *node, bool store)</argsstring>
        <name>bt_mesh_cdb_node_del</name>
        <param>
          <type>struct <ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Delete a node. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a node from the CDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to be deleted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the node will be cleared from persistent storage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="138" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a3d0034ec500d3964dd4b428e518abfb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref> *</type>
        <definition>struct bt_mesh_cdb_node * bt_mesh_cdb_node_get</definition>
        <argsstring>(uint16_t addr)</argsstring>
        <name>bt_mesh_cdb_node_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get a node by address. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to find the node that has the provided address assigned to one of its elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the element to look for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The node that has an element with address addr or NULL if no such node exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="150" column="23" declfile="include/bluetooth/mesh/cdb.h" declline="150" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1ac775f3d1be745aeba2979b9ae4b42c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_node_store</definition>
        <argsstring>(const struct bt_mesh_cdb_node *node)</argsstring>
        <name>bt_mesh_cdb_node_store</name>
        <param>
          <type>const struct <ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Store node to persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Node to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="156" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1ae8ed0ef1a00e973d864c944c9d9400bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_node_foreach</definition>
        <argsstring>(bt_mesh_cdb_node_func_t func, void *user_data)</argsstring>
        <name>bt_mesh_cdb_node_foreach</name>
        <param>
          <type><ref refid="cdb_8h_1ad65e1c2e2ab660f417f6723ff415ef8d" kindref="member">bt_mesh_cdb_node_func_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Node iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterate nodes in the Mesh Configuration Database. The callback function will only be called for valid, ie allocated, nodes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to pass to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="183" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1aeba4ed506e30ab8d91746b36e7e5f968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref> *</type>
        <definition>struct bt_mesh_cdb_subnet * bt_mesh_cdb_subnet_alloc</definition>
        <argsstring>(uint16_t net_idx)</argsstring>
        <name>bt_mesh_cdb_subnet_alloc</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <briefdescription>
<para>Allocate a subnet. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new subnet in the CDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>NetIdx of the subnet.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new subnet or NULL if it cannot be allocated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="193" column="25" declfile="include/bluetooth/mesh/cdb.h" declline="193" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a66df2f6b6363af595181fe722122996d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_subnet_del</definition>
        <argsstring>(struct bt_mesh_cdb_subnet *sub, bool store)</argsstring>
        <name>bt_mesh_cdb_subnet_del</name>
        <param>
          <type>struct <ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Delete a subnet. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a subnet from the CDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subnet to be deleted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the subnet will be cleared from persistent storage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="202" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="202" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a34dcf031e675235cdcbe0e1f76c00cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref> *</type>
        <definition>struct bt_mesh_cdb_subnet * bt_mesh_cdb_subnet_get</definition>
        <argsstring>(uint16_t net_idx)</argsstring>
        <name>bt_mesh_cdb_subnet_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <briefdescription>
<para>Get a subnet by NetIdx. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to find the subnet with the specified NetIdx.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>NetIdx of the subnet to look for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The subnet with the specified NetIdx or NULL if no such subnet exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="213" column="25" declfile="include/bluetooth/mesh/cdb.h" declline="213" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a59e6b7da8c91df35ce6f8268da35c933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_subnet_store</definition>
        <argsstring>(const struct bt_mesh_cdb_subnet *sub)</argsstring>
        <name>bt_mesh_cdb_subnet_store</name>
        <param>
          <type>const struct <ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Store subnet to persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>Subnet to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="219" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="219" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a121a30fd546ccb887c2c49ceef65c2d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_mesh_cdb_subnet_flags</definition>
        <argsstring>(const struct bt_mesh_cdb_subnet *sub)</argsstring>
        <name>bt_mesh_cdb_subnet_flags</name>
        <param>
          <type>const struct <ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Get the flags for a subnet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subnet to get flags for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags for the subnet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="227" column="9" declfile="include/bluetooth/mesh/cdb.h" declline="227" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1ab82dcdf26d66ea4ab0df34bc23421f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref> *</type>
        <definition>struct bt_mesh_cdb_app_key * bt_mesh_cdb_app_key_alloc</definition>
        <argsstring>(uint16_t net_idx, uint16_t app_idx)</argsstring>
        <name>bt_mesh_cdb_app_key_alloc</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <briefdescription>
<para>Allocate an application key. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new application key in the CDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>NetIdx of NetKey that the application key is bound to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>AppIdx of the application key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new application key or NULL if it cannot be allocated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="239" column="26" declfile="include/bluetooth/mesh/cdb.h" declline="239" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a692c6980c9b0d2da18e8f47d67757f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_app_key_del</definition>
        <argsstring>(struct bt_mesh_cdb_app_key *key, bool store)</argsstring>
        <name>bt_mesh_cdb_app_key_del</name>
        <param>
          <type>struct <ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Delete an application key. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete an application key from the CDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The application key to be deleted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the key will be cleared from persistent storage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="249" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="249" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1ab728a20fdb1535cc7059a39e8490a736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref> *</type>
        <definition>struct bt_mesh_cdb_app_key * bt_mesh_cdb_app_key_get</definition>
        <argsstring>(uint16_t app_idx)</argsstring>
        <name>bt_mesh_cdb_app_key_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <briefdescription>
<para>Get an application key by AppIdx. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to find the application key with the specified AppIdx.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>AppIdx of the application key to look for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The application key with the specified AppIdx or NULL if no such key exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="260" column="26" declfile="include/bluetooth/mesh/cdb.h" declline="260" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="cdb_8h_1a4e9470adfa797be85b7f4df43b63d6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_cdb_app_key_store</definition>
        <argsstring>(const struct bt_mesh_cdb_app_key *key)</argsstring>
        <name>bt_mesh_cdb_app_key_store</name>
        <param>
          <type>const struct <ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Store application key to persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Application key to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cdb.h" line="266" column="6" declfile="include/bluetooth/mesh/cdb.h" declline="266" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Tobias<sp/>Svehagen</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_CDB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_CDB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="inttypes_8h" kindref="compound">inttypes.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">sys/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_BT_MESH_CDB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NODE_COUNT<sp/><sp/><sp/><sp/>CONFIG_BT_MESH_CDB_NODE_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUBNET_COUNT<sp/><sp/>CONFIG_BT_MESH_CDB_SUBNET_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APP_KEY_COUNT<sp/>CONFIG_BT_MESH_CDB_APP_KEY_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="cdb_8h_1ae49e5e1ae89eef30538ae9f45c772b64" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NODE_COUNT<sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="cdb_8h_1a5ab07a907049974c089a4b0dd706ef77" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUBNET_COUNT<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="cdb_8h_1aab65f293c17c657d670e802bbfe389d7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APP_KEY_COUNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27" refid="cdb_8h_1a3babbf89cae9b856a12864a41506efbdaab4ca02f1d0d9f6a743bee9f66eeba12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1a3babbf89cae9b856a12864a41506efbdaab4ca02f1d0d9f6a743bee9f66eeba12" kindref="member">BT_MESH_CDB_NODE_CONFIGURED</ref>,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1a3babbf89cae9b856a12864a41506efbda00449c6d1403f903b115c3de36a2a3bd" kindref="member">BT_MESH_CDB_NODE_FLAG_COUNT</ref></highlight></codeline>
<codeline lineno="30" refid="cdb_8h_1a3babbf89cae9b856a12864a41506efbda00449c6d1403f903b115c3de36a2a3bd" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="structbt__mesh__cdb__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref><sp/>{</highlight></codeline>
<codeline lineno="33" refid="structbt__mesh__cdb__node_1a751671f52c4fdf3f42b6f71193976dd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cdb__node_1a751671f52c4fdf3f42b6f71193976dd5" kindref="member">uuid</ref>[16];</highlight></codeline>
<codeline lineno="34" refid="structbt__mesh__cdb__node_1a8c9941929a8ce6228817d76fe4e2375c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__node_1a8c9941929a8ce6228817d76fe4e2375c" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="35" refid="structbt__mesh__cdb__node_1aa936534676ef7e256670d356eff7ac17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__node_1aa936534676ef7e256670d356eff7ac17" kindref="member">net_idx</ref>;</highlight></codeline>
<codeline lineno="36" refid="structbt__mesh__cdb__node_1a2313e29b756344a493989f39ba1ec726" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cdb__node_1a2313e29b756344a493989f39ba1ec726" kindref="member">num_elem</ref>;</highlight></codeline>
<codeline lineno="37" refid="structbt__mesh__cdb__node_1a59bd0eaa86994fc5ab6bfe58257d7ef0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><ref refid="structbt__mesh__cdb__node_1a59bd0eaa86994fc5ab6bfe58257d7ef0" kindref="member">dev_key</ref>[16];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structbt__mesh__cdb__node_1a90d11839d7ca34ee90e4779bc9e83d6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga249c575db9764486197709b327f7370e" kindref="member">ATOMIC_DEFINE</ref>(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>,<sp/><ref refid="cdb_8h_1a3babbf89cae9b856a12864a41506efbda00449c6d1403f903b115c3de36a2a3bd" kindref="member">BT_MESH_CDB_NODE_FLAG_COUNT</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structbt__mesh__cdb__subnet" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref><sp/>{</highlight></codeline>
<codeline lineno="43" refid="structbt__mesh__cdb__subnet_1a1010965e2030e1bef181920fc5f76116" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__subnet_1a1010965e2030e1bef181920fc5f76116" kindref="member">net_idx</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structbt__mesh__cdb__subnet_1a07fbd0e52571cd9a16e876243483e98a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structbt__mesh__cdb__subnet_1a07fbd0e52571cd9a16e876243483e98a" kindref="member">kr_phase</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48" refid="structbt__mesh__cdb__subnet_1af9602af336413452d2bf699ef8220a3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structbt__mesh__cdb__subnet_1af9602af336413452d2bf699ef8220a3c" kindref="member">net_key</ref>[16];</highlight></codeline>
<codeline lineno="49" refid="structbt__mesh__cdb__subnet_1a8216401f26ec87b1ec236940e0769a6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structbt__mesh__cdb__subnet_1a8216401f26ec87b1ec236940e0769a6b" kindref="member">keys</ref>[2];</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structbt__mesh__cdb__app__key" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="structbt__mesh__cdb__app__key_1afa234a0d5f0fb61513a97afb91986976" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__app__key_1afa234a0d5f0fb61513a97afb91986976" kindref="member">net_idx</ref>;</highlight></codeline>
<codeline lineno="54" refid="structbt__mesh__cdb__app__key_1a2ef7f5d832b36736d3a1811a407b6fa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__app__key_1a2ef7f5d832b36736d3a1811a407b6fa6" kindref="member">app_idx</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57" refid="structbt__mesh__cdb__app__key_1a911460062e4d278393e0a8f99b79f635" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structbt__mesh__cdb__app__key_1a911460062e4d278393e0a8f99b79f635" kindref="member">app_key</ref>[16];</highlight></codeline>
<codeline lineno="58" refid="structbt__mesh__cdb__app__key_1ae74c6a8a290bf354bac6c435af7e3ab5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structbt__mesh__cdb__app__key_1ae74c6a8a290bf354bac6c435af7e3ab5" kindref="member">keys</ref>[2];</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62" refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84ad5a2fc5c15efc200ef31b8876eabc01d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84ad5a2fc5c15efc200ef31b8876eabc01d" kindref="member">BT_MESH_CDB_VALID</ref>,</highlight></codeline>
<codeline lineno="63" refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a5d07a0f33a2544be141d1fb4c6130bdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a5d07a0f33a2544be141d1fb4c6130bdd" kindref="member">BT_MESH_CDB_SUBNET_PENDING</ref>,</highlight></codeline>
<codeline lineno="64" refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a62fc7baf49a7bf92a3b3c80eb57d8cf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a62fc7baf49a7bf92a3b3c80eb57d8cf8" kindref="member">BT_MESH_CDB_KEYS_PENDING</ref>,</highlight></codeline>
<codeline lineno="65" refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a3fe59a5bb698f65be4389345fe63ccc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a3fe59a5bb698f65be4389345fe63ccc1" kindref="member">BT_MESH_CDB_NODES_PENDING</ref>,</highlight></codeline>
<codeline lineno="66" refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a229d9bfcc277ea2cb81e991a1a30ceb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84a229d9bfcc277ea2cb81e991a1a30ceb6" kindref="member">BT_MESH_CDB_IVU_IN_PROGRESS</ref>,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84abf303893a5d3b399856b3670c4a7fd41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84abf303893a5d3b399856b3670c4a7fd41" kindref="member">BT_MESH_CDB_FLAG_COUNT</ref>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structbt__mesh__cdb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb" kindref="compound">bt_mesh_cdb</ref><sp/>{</highlight></codeline>
<codeline lineno="72" refid="structbt__mesh__cdb_1a48b3cf852a42b580f911e193a9764517" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structbt__mesh__cdb_1a48b3cf852a42b580f911e193a9764517" kindref="member">iv_index</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structbt__mesh__cdb_1a7b6cf324481f193aaa4b47c338bac398" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga249c575db9764486197709b327f7370e" kindref="member">ATOMIC_DEFINE</ref>(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>,<sp/><ref refid="cdb_8h_1aa57e16cd48de3b9a989056ff8df26f84abf303893a5d3b399856b3670c4a7fd41" kindref="member">BT_MESH_CDB_FLAG_COUNT</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structbt__mesh__cdb_1a7af2ac65c8919c594b8283ff57b5b7fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref><sp/><ref refid="structbt__mesh__cdb_1a7af2ac65c8919c594b8283ff57b5b7fc" kindref="member">nodes</ref>[<ref refid="cdb_8h_1ae49e5e1ae89eef30538ae9f45c772b64" kindref="member">NODE_COUNT</ref>];</highlight></codeline>
<codeline lineno="77" refid="structbt__mesh__cdb_1ae391c898d11257c484c4e8d1b38fd9dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref><sp/><ref refid="structbt__mesh__cdb_1ae391c898d11257c484c4e8d1b38fd9dc" kindref="member">subnets</ref>[<ref refid="cdb_8h_1a5ab07a907049974c089a4b0dd706ef77" kindref="member">SUBNET_COUNT</ref>];</highlight></codeline>
<codeline lineno="78" refid="structbt__mesh__cdb_1a59a130ffed26c362dc72d57d1ac7d7fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref><sp/><ref refid="structbt__mesh__cdb_1a59a130ffed26c362dc72d57d1ac7d7fd" kindref="member">app_keys</ref>[<ref refid="cdb_8h_1aab65f293c17c657d670e802bbfe389d7" kindref="member">APP_KEY_COUNT</ref>];</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb" kindref="compound">bt_mesh_cdb</ref><sp/><ref refid="structbt__mesh__cdb" kindref="compound">bt_mesh_cdb</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="cdb_8h_1a00490e69b96e88cdf7336ca22e63617d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1a00490e69b96e88cdf7336ca22e63617d" kindref="member">bt_mesh_cdb_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>[16]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="cdb_8h_1a4bf4f49fbd75ee33876ffd34f6c6f76f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1a4bf4f49fbd75ee33876ffd34f6c6f76f" kindref="member">bt_mesh_cdb_clear</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="cdb_8h_1aa6d124339002c43fc35f301a9eef3e7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1aa6d124339002c43fc35f301a9eef3e7c" kindref="member">bt_mesh_cdb_iv_update</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structbt__mesh__cdb_1a48b3cf852a42b580f911e193a9764517" kindref="member">iv_index</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>iv_update);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="cdb_8h_1ab0dc86dd674f57a820aa3f5cebf77895" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref><sp/>*<ref refid="cdb_8h_1ab0dc86dd674f57a820aa3f5cebf77895" kindref="member">bt_mesh_cdb_node_alloc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structbt__mesh__cdb__node_1a751671f52c4fdf3f42b6f71193976dd5" kindref="member">uuid</ref>[16],<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__node_1a8c9941929a8ce6228817d76fe4e2375c" kindref="member">addr</ref>,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structbt__mesh__cdb__node_1a2313e29b756344a493989f39ba1ec726" kindref="member">num_elem</ref>,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__node_1aa936534676ef7e256670d356eff7ac17" kindref="member">net_idx</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="cdb_8h_1a6d9cc2d360075b6b3e939a4979e08895" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1a6d9cc2d360075b6b3e939a4979e08895" kindref="member">bt_mesh_cdb_node_del</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>store);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="cdb_8h_1a3d0034ec500d3964dd4b428e518abfb9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref><sp/>*<ref refid="cdb_8h_1a3d0034ec500d3964dd4b428e518abfb9" kindref="member">bt_mesh_cdb_node_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__node_1a8c9941929a8ce6228817d76fe4e2375c" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="cdb_8h_1ac775f3d1be745aeba2979b9ae4b42c4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1ac775f3d1be745aeba2979b9ae4b42c4f" kindref="member">bt_mesh_cdb_node_store</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref><sp/>*node);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159" refid="cdb_8h_1a634f9f55e799f3052a34590f08100017af2362ea16e4733a32e26138a3577e5fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1a634f9f55e799f3052a34590f08100017af2362ea16e4733a32e26138a3577e5fb" kindref="member">BT_MESH_CDB_ITER_STOP</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="160" refid="cdb_8h_1a634f9f55e799f3052a34590f08100017a6b057da4bd763f7c65e41410b7c72218" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cdb_8h_1a634f9f55e799f3052a34590f08100017a6b057da4bd763f7c65e41410b7c72218" kindref="member">BT_MESH_CDB_ITER_CONTINUE</ref>,</highlight></codeline>
<codeline lineno="161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="cdb_8h_1ad65e1c2e2ab660f417f6723ff415ef8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>(*<ref refid="cdb_8h_1ad65e1c2e2ab660f417f6723ff415ef8d" kindref="member">bt_mesh_cdb_node_func_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__node" kindref="compound">bt_mesh_cdb_node</ref><sp/>*node,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="cdb_8h_1ae8ed0ef1a00e973d864c944c9d9400bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1ae8ed0ef1a00e973d864c944c9d9400bc" kindref="member">bt_mesh_cdb_node_foreach</ref>(<ref refid="cdb_8h_1ad65e1c2e2ab660f417f6723ff415ef8d" kindref="member">bt_mesh_cdb_node_func_t</ref><sp/>func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="cdb_8h_1aeba4ed506e30ab8d91746b36e7e5f968" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref><sp/>*<ref refid="cdb_8h_1aeba4ed506e30ab8d91746b36e7e5f968" kindref="member">bt_mesh_cdb_subnet_alloc</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__subnet_1a1010965e2030e1bef181920fc5f76116" kindref="member">net_idx</ref>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="cdb_8h_1a66df2f6b6363af595181fe722122996d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1a66df2f6b6363af595181fe722122996d" kindref="member">bt_mesh_cdb_subnet_del</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref><sp/>*sub,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>store);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="cdb_8h_1a34dcf031e675235cdcbe0e1f76c00cf3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref><sp/>*<ref refid="cdb_8h_1a34dcf031e675235cdcbe0e1f76c00cf3" kindref="member">bt_mesh_cdb_subnet_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__subnet_1a1010965e2030e1bef181920fc5f76116" kindref="member">net_idx</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="cdb_8h_1a59e6b7da8c91df35ce6f8268da35c933" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1a59e6b7da8c91df35ce6f8268da35c933" kindref="member">bt_mesh_cdb_subnet_store</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref><sp/>*sub);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="cdb_8h_1a121a30fd546ccb887c2c49ceef65c2d6" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="cdb_8h_1a121a30fd546ccb887c2c49ceef65c2d6" kindref="member">bt_mesh_cdb_subnet_flags</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cdb__subnet" kindref="compound">bt_mesh_cdb_subnet</ref><sp/>*sub);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="cdb_8h_1ab82dcdf26d66ea4ab0df34bc23421f39" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref><sp/>*<ref refid="cdb_8h_1ab82dcdf26d66ea4ab0df34bc23421f39" kindref="member">bt_mesh_cdb_app_key_alloc</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__app__key_1afa234a0d5f0fb61513a97afb91986976" kindref="member">net_idx</ref>,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__app__key_1a2ef7f5d832b36736d3a1811a407b6fa6" kindref="member">app_idx</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="cdb_8h_1a692c6980c9b0d2da18e8f47d67757f07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1a692c6980c9b0d2da18e8f47d67757f07" kindref="member">bt_mesh_cdb_app_key_del</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>store);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="cdb_8h_1ab728a20fdb1535cc7059a39e8490a736" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref><sp/>*<ref refid="cdb_8h_1ab728a20fdb1535cc7059a39e8490a736" kindref="member">bt_mesh_cdb_app_key_get</ref>(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structbt__mesh__cdb__app__key_1a2ef7f5d832b36736d3a1811a407b6fa6" kindref="member">app_idx</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="cdb_8h_1a4e9470adfa797be85b7f4df43b63d6d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cdb_8h_1a4e9470adfa797be85b7f4df43b63d6d2" kindref="member">bt_mesh_cdb_app_key_store</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__cdb__app__key" kindref="compound">bt_mesh_cdb_app_key</ref><sp/>*<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_CDB_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/mesh/cdb.h"/>
  </compounddef>
</doxygen>
