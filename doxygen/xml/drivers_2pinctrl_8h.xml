<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="drivers_2pinctrl_8h" kind="file" language="C++">
    <compoundname>pinctrl.h</compoundname>
    <includes local="no">device.h</includes>
    <includes refid="devicetree_8h" local="no">devicetree.h</includes>
    <includes refid="devicetree_2pinctrl_8h" local="no">devicetree/pinctrl.h</includes>
    <includes local="no">pinctrl_soc.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <incdepgraph>
      <node id="3">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="18">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="20">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="16">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="14">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="22">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="23">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="19">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="17">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="21">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/pinctrl.h</label>
        <link refid="drivers_2pinctrl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="7">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="13">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="2">
        <label>device.h</label>
      </node>
      <node id="5">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="4">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="24">
        <label>pinctrl_soc.h</label>
      </node>
      <node id="12">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structpinctrl__state" prot="public">pinctrl_state</innerclass>
    <innerclass refid="structpinctrl__dev__config" prot="public">pinctrl_dev_config</innerclass>
      <sectiondef kind="user-defined">
      <header>Pin control states</header>
      <description><para><anchor id="group__pinctrl__interface_1PINCTRL_STATES"/></para>
</description>
      <memberdef kind="define" id="group__pinctrl__interface_1ga9bc564353cb9b1a7238c9fe8796023e6" prot="public" static="no">
        <name>PINCTRL_STATE_DEFAULT</name>
        <initializer>0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default state (state used when the device is in operational state). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="38" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga2ea5ac271930e0e2e9f77952b2dbea1b" prot="public" static="no">
        <name>PINCTRL_STATE_SLEEP</name>
        <initializer>1U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sleep state (state used when the device is in low power mode). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="40" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga25989d7b48b2d7aa4f8ca6a30d9c9077" prot="public" static="no">
        <name>PINCTRL_STATE_PRIV_START</name>
        <initializer>2U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This and higher values refer to custom private states. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="43" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__pinctrl__interface_1ga6e283a1a1b040323b96227b2ea8f731e" prot="public" static="no">
        <name>PINCTRL_REG_NONE</name>
        <initializer>0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility macro to indicate no register is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="73" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga636656676e81c65e1133607c972d65f4" prot="public" static="no">
        <name>PINCTRL_DT_DEV_CONFIG_DECLARE</name>
        <param><defname>node_id</defname></param>
        <initializer>	extern Z_PINCTRL_DEV_CONFIG_CONST struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref>	       \
	Z_PINCTRL_DEV_CONFIG_NAME(node_id)</initializer>
        <briefdescription>
<para>Declare pin control configuration for a given node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro should be used by tests or applications using runtime pin control to declare the pin control configuration for a device. <ref refid="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" kindref="member">PINCTRL_DT_DEV_CONFIG_GET</ref> can later be used to obtain a reference to such configuration.</para>
<para>Only available if <verbatim>embed:rst:inline :kconfig:option:`CONFIG_PINCTRL_NON_STATIC` </verbatim> is selected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="221" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1gace422fcd4b28e6e6e6fdbbc64b99468f" prot="public" static="no">
        <name>PINCTRL_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga31079a877f7990c552cbfaf10225e37a" kindref="member">UTIL_LISTIFY</ref>(<ref refid="group__devicetree-pinctrl_1gaa2a012ce1d9ba026ee90001ae7f80381" kindref="member">DT_NUM_PINCTRL_STATES</ref>(node_id),			       \
		     Z_PINCTRL_STATE_PINS_DEFINE, node_id)		       \
	Z_PINCTRL_STATES_DEFINE(node_id)				       \
	Z_PINCTRL_DEV_CONFIG_CONST Z_PINCTRL_DEV_CONFIG_STATIC		       \
	struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> Z_PINCTRL_DEV_CONFIG_NAME(node_id) =	       \
	Z_PINCTRL_DEV_CONFIG_INIT(node_id)</initializer>
        <briefdescription>
<para>Define all pin control information for the given node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper macro should be called together with device definition. It defines and initializes the pin control configuration for the device represented by node_id. Each pin control state (pinctrl-0, ..., pinctrl-N) is also defined and initialized. Note that states marked to be skipped will not be defined (refer to Z_PINCTRL_SKIP_STATE for more details).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="237" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga8e984a57fd3c7a04cc921131ce79ac28" prot="public" static="no">
        <name>PINCTRL_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__pinctrl__interface_1gace422fcd4b28e6e6e6fdbbc64b99468f" kindref="member">PINCTRL_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Define all pin control information for the given compatible index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__pinctrl__interface_1gace422fcd4b28e6e6e6fdbbc64b99468f" kindref="member">PINCTRL_DT_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="252" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" prot="public" static="no">
        <name>PINCTRL_DT_DEV_CONFIG_GET</name>
        <param><defname>node_id</defname></param>
        <initializer>&amp;Z_PINCTRL_DEV_CONFIG_NAME(node_id)</initializer>
        <briefdescription>
<para>Obtain a reference to the pin control configuration given a node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="260" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga32748ffc5be4710707c7f1d9380cf93c" prot="public" static="no">
        <name>PINCTRL_DT_INST_DEV_CONFIG_GET</name>
        <param><defname>inst</defname></param>
        <initializer>	<ref refid="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" kindref="member">PINCTRL_DT_DEV_CONFIG_GET</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Obtain a reference to the pin control configuration given current compatible instance number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" kindref="member">PINCTRL_DT_DEV_CONFIG_GET</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="270" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface__dynamic_1ga202dbcf2bcde364733996673dbdf2922" prot="public" static="no">
        <name>PINCTRL_DT_STATE_PINS_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	static const pinctrl_soc_pin_t prop ## _pins[] =		       \
	Z_PINCTRL_STATE_PINS_INIT(node_id, prop);			       \</initializer>
        <briefdescription>
<para>Helper macro to define the pins of a pin control state from Devicetree. </para>
        </briefdescription>
        <detaileddescription>
<para>The name of the defined state pins variable is the same used by <computeroutput>prop</computeroutput>. This macro is expected to be used in conjunction with <ref refid="group__pinctrl__interface__dynamic_1ga6331121c706ba721e5bd43491dcc14d2" kindref="member">PINCTRL_DT_STATE_INIT</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier containing <computeroutput>prop</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>Property within <computeroutput>node_id</computeroutput> containing state configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__pinctrl__interface__dynamic_1ga6331121c706ba721e5bd43491dcc14d2" kindref="member">PINCTRL_DT_STATE_INIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="371" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface__dynamic_1ga6331121c706ba721e5bd43491dcc14d2" prot="public" static="no">
        <name>PINCTRL_DT_STATE_INIT</name>
        <param><defname>prop</defname></param>
        <param><defname>state</defname></param>
        <initializer>	{								       \
		.id = <ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>,						       \
		.pins = prop ## _pins,					       \
		.pin_cnt = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(prop ## _pins)			       \
	}</initializer>
        <briefdescription>
<para>Utility macro to initialize a pin control state. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro should be used in conjunction with <ref refid="group__pinctrl__interface__dynamic_1ga202dbcf2bcde364733996673dbdf2922" kindref="member">PINCTRL_DT_STATE_PINS_DEFINE</ref> when using dynamic pin control to define an alternative state configuration stored in Devicetree.</para>
<para>Example:</para>
<para><programlisting filename=".devicetree"><codeline><highlight class="normal">//<sp/>board.dts</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>zephyr,user<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>uart0_alt_default<sp/>node<sp/>contains<sp/>alternative<sp/>pin<sp/>config</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart0_alt_default<sp/>=<sp/>&lt;&amp;uart0_alt_default&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".c"><codeline><highlight class="comment">//<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__pinctrl__interface__dynamic_1ga202dbcf2bcde364733996673dbdf2922" kindref="member">PINCTRL_DT_STATE_PINS_DEFINE</ref>(<ref refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" kindref="member">DT_PATH</ref>(zephyr_user),<sp/>uart0_alt_default);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>uart0_alt[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__pinctrl__interface__dynamic_1ga6331121c706ba721e5bd43491dcc14d2" kindref="member">PINCTRL_DT_STATE_INIT</ref>(uart0_alt_default,<sp/><ref refid="group__pinctrl__interface_1ga9bc564353cb9b1a7238c9fe8796023e6" kindref="member">PINCTRL_STATE_DEFAULT</ref>)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name in Devicetree containing state configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>State represented by <computeroutput>prop</computeroutput> (see <ref refid="group__pinctrl__interface_1PINCTRL_STATES" kindref="member">PINCTRL_STATES</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__pinctrl__interface__dynamic_1ga202dbcf2bcde364733996673dbdf2922" kindref="member">PINCTRL_DT_STATE_PINS_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="410" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pinctrl__interface_1ga46d7997af7e9231b431c79af34288d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pinctrl_lookup_state</definition>
        <argsstring>(const struct pinctrl_dev_config *config, uint8_t id, const struct pinctrl_state **state)</argsstring>
        <name>pinctrl_lookup_state</name>
        <param>
          <type>const struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref> **</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Find the state configuration for the given state id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin controller configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin controller state id (see <ref refid="group__pinctrl__interface_1PINCTRL_STATES" kindref="member">PINCTRL_STATES</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Found state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If state has been found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>If the state has not been found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="283" column="5" declfile="include/drivers/pinctrl.h" declline="283" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pinctrl__interface_1ga3397507e30eb10e814b793615f80455b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pinctrl_configure_pins</definition>
        <argsstring>(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt, uintptr_t reg)</argsstring>
        <name>pinctrl_configure_pins</name>
        <param>
          <type>const pinctrl_soc_pin_t *</type>
          <declname>pins</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>pin_cnt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Configure a set of pins. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will configure the necessary hardware blocks to make the configuration immediately effective.</para>
<para><simplesect kind="warning"><para>This function must never be used to configure pins used by an instantiated device driver.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pins to be configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of pins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Device register (optional, use <ref refid="group__pinctrl__interface_1ga6e283a1a1b040323b96227b2ea8f731e" kindref="member">PINCTRL_REG_NONE</ref> if not used).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If succeeded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno for other failures. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="302" column="5" declfile="include/drivers/pinctrl.h" declline="302" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pinctrl__interface_1ga3549075e60ccdb743b269d590600d41b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pinctrl_apply_state_direct</definition>
        <argsstring>(const struct pinctrl_dev_config *config, const struct pinctrl_state *state)</argsstring>
        <name>pinctrl_apply_state_direct</name>
        <param>
          <type>const struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Apply a state directly from the provided state configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin control configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>State.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If succeeded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno for other failures. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="314" column="19" bodyfile="include/drivers/pinctrl.h" bodystart="314" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="group__pinctrl__interface_1ga16a9391222345d00dbc5c39c45f429f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pinctrl_apply_state</definition>
        <argsstring>(const struct pinctrl_dev_config *config, uint8_t id)</argsstring>
        <name>pinctrl_apply_state</name>
        <param>
          <type>const struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Apply a state from the given device configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin control configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the state to be applied (see <ref refid="group__pinctrl__interface_1PINCTRL_STATES" kindref="member">PINCTRL_STATES</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>If given state id does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno for other failures. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="339" column="19" bodyfile="include/drivers/pinctrl.h" bodystart="339" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="group__pinctrl__interface__dynamic_1ga647115208cbed7534a98c56d93a517b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pinctrl_update_states</definition>
        <argsstring>(struct pinctrl_dev_config *config, const struct pinctrl_state *states, uint8_t state_cnt)</argsstring>
        <name>pinctrl_update_states</name>
        <param>
          <type>struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref> *</type>
          <declname>states</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>state_cnt</declname>
        </param>
        <briefdescription>
<para>Update states with a new set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In order to guarantee device drivers correct operation the same states have to be provided. For example, if <computeroutput>default</computeroutput> and <computeroutput>sleep</computeroutput> are in the current list of states, it is expected that the new array of states also contains both.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin control configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>New states to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of new states to be set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If the new configuration does not contain the same states as the current active configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If the functionality is not available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="434" column="5" declfile="include/drivers/pinctrl.h" declline="434" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Public APIs for pin control drivers </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_PINCTRL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_PINCTRL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_8h" kindref="compound">devicetree.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_2pinctrl_8h" kindref="compound">devicetree/pinctrl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pinctrl_soc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="group__pinctrl__interface_1ga9bc564353cb9b1a7238c9fe8796023e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_STATE_DEFAULT<sp/>0U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__pinctrl__interface_1ga2ea5ac271930e0e2e9f77952b2dbea1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_STATE_SLEEP<sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__pinctrl__interface_1ga25989d7b48b2d7aa4f8ca6a30d9c9077" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_STATE_PRIV_START<sp/>2U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structpinctrl__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>{</highlight></codeline>
<codeline lineno="50" refid="structpinctrl__state_1a99ceb5bff2b8e50109e5915140eebe76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pinctrl_soc_pin_t<sp/>*<ref refid="structpinctrl__state_1a99ceb5bff2b8e50109e5915140eebe76" kindref="member">pins</ref>;</highlight></codeline>
<codeline lineno="52" refid="structpinctrl__state_1aa015854e6eae7b86fffb282b07652573" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpinctrl__state_1aa015854e6eae7b86fffb282b07652573" kindref="member">pin_cnt</ref>;</highlight></codeline>
<codeline lineno="54" refid="structpinctrl__state_1acae4c7cfc06471533f6d977e1f2ba623" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpinctrl__state_1acae4c7cfc06471533f6d977e1f2ba623" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structpinctrl__dev__config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_PINCTRL_STORE_REG)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structpinctrl__dev__config_1a69db43c310985f38f0802a3e9f82fd62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="structpinctrl__dev__config_1a69db43c310985f38f0802a3e9f82fd62" kindref="member">reg</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(CONFIG_PINCTRL_STORE_REG)<sp/>||<sp/>defined(__DOXYGEN__)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structpinctrl__dev__config_1a57dcdf2f712de95f8e8568e2be4b52e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>*<ref refid="structpinctrl__dev__config_1a57dcdf2f712de95f8e8568e2be4b52e6" kindref="member">states</ref>;</highlight></codeline>
<codeline lineno="69" refid="structpinctrl__dev__config_1a0af0d0115eaa9729c1fe782666ad0e66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpinctrl__dev__config_1a0af0d0115eaa9729c1fe782666ad0e66" kindref="member">state_cnt</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="group__pinctrl__interface_1ga6e283a1a1b040323b96227b2ea8f731e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_REG_NONE<sp/>0U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_PM_DEVICE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_SKIP_SLEEP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_STATE_ID(state_idx,<sp/>node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CONCAT(PINCTRL_STATE_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PINCTRL_IDX_TO_NAME_UPPER_TOKEN(node_id,<sp/>state_idx))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_DEV_CONFIG_NAME(node_id)<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CONCAT(__pinctrl_dev_config,<sp/>DEVICE_DT_NAME_GET(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_STATES_NAME(node_id)<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CONCAT(__pinctrl_states,<sp/>DEVICE_DT_NAME_GET(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_STATE_PINS_NAME(state_idx,<sp/>node_id)<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CONCAT(__pinctrl_state_pins_<sp/>##<sp/>state_idx,<sp/>DEVICE_DT_NAME_GET(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_SKIP_STATE(state_idx,<sp/>node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CONCAT(PINCTRL_SKIP_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PINCTRL_IDX_TO_NAME_UPPER_TOKEN(node_id,<sp/>state_idx))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_STATE_PINS_DEFINE(state_idx,<sp/>node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(Z_PINCTRL_SKIP_STATE(state_idx,<sp/>node_id),<sp/>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(static<sp/>const<sp/>pinctrl_soc_pin_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_STATE_PINS_NAME(state_idx,<sp/>node_id)[]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_STATE_PINS_INIT(node_id,<sp/>pinctrl_<sp/>##<sp/>state_idx);))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_STATE_INIT(state_idx,<sp/>node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(Z_PINCTRL_SKIP_STATE(state_idx,<sp/>node_id),<sp/>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.id<sp/>=<sp/>Z_PINCTRL_STATE_ID(state_idx,<sp/>node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pins<sp/>=<sp/>Z_PINCTRL_STATE_PINS_NAME(state_idx,<sp/>node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pin_cnt<sp/>=<sp/>ARRAY_SIZE(Z_PINCTRL_STATE_PINS_NAME(state_idx,<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_id))<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_STATES_DEFINE(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>pinctrl_state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_STATES_NAME(node_id)[]<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTIL_LISTIFY(DT_NUM_PINCTRL_STATES(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_STATE_INIT,<sp/>node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PINCTRL_STORE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_DEV_CONFIG_INIT(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reg<sp/>=<sp/>DT_REG_ADDR(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.states<sp/>=<sp/>Z_PINCTRL_STATES_NAME(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.state_cnt<sp/>=<sp/>ARRAY_SIZE(Z_PINCTRL_STATES_NAME(node_id)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_DEV_CONFIG_INIT(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.states<sp/>=<sp/>Z_PINCTRL_STATES_NAME(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.state_cnt<sp/>=<sp/>ARRAY_SIZE(Z_PINCTRL_STATES_NAME(node_id)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PINCTRL_NON_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_DEV_CONFIG_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_DEV_CONFIG_STATIC<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PINCTRL_DYNAMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_DEV_CONFIG_CONST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_PINCTRL_DEV_CONFIG_CONST<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_PINCTRL_NON_STATIC)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="group__pinctrl__interface_1ga636656676e81c65e1133607c972d65f4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_DT_DEV_CONFIG_DECLARE(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>Z_PINCTRL_DEV_CONFIG_CONST<sp/>struct<sp/>pinctrl_dev_config<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_DEV_CONFIG_NAME(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(CONFIG_PINCTRL_NON_STATIC)<sp/>||<sp/>defined(__DOXYGEN__)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="group__pinctrl__interface_1gace422fcd4b28e6e6e6fdbbc64b99468f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_DT_DEFINE(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTIL_LISTIFY(DT_NUM_PINCTRL_STATES(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_STATE_PINS_DEFINE,<sp/>node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_STATES_DEFINE(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_DEV_CONFIG_CONST<sp/>Z_PINCTRL_DEV_CONFIG_STATIC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>pinctrl_dev_config<sp/>Z_PINCTRL_DEV_CONFIG_NAME(node_id)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_DEV_CONFIG_INIT(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="group__pinctrl__interface_1ga8e984a57fd3c7a04cc921131ce79ac28" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_DT_INST_DEFINE(inst)<sp/>PINCTRL_DT_DEFINE(DT_DRV_INST(inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_DT_DEV_CONFIG_GET(node_id)<sp/>&amp;Z_PINCTRL_DEV_CONFIG_NAME(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="group__pinctrl__interface_1ga32748ffc5be4710707c7f1d9380cf93c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_DT_INST_DEV_CONFIG_GET(inst)<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PINCTRL_DT_DEV_CONFIG_GET(DT_DRV_INST(inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="group__pinctrl__interface_1ga46d7997af7e9231b431c79af34288d50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface_1ga46d7997af7e9231b431c79af34288d50" kindref="member">pinctrl_lookup_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref><sp/>*config,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>**<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="group__pinctrl__interface_1ga3397507e30eb10e814b793615f80455b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface_1ga3397507e30eb10e814b793615f80455b" kindref="member">pinctrl_configure_pins</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pinctrl_soc_pin_t<sp/>*<ref refid="structpinctrl__state_1a99ceb5bff2b8e50109e5915140eebe76" kindref="member">pins</ref>,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structpinctrl__state_1aa015854e6eae7b86fffb282b07652573" kindref="member">pin_cnt</ref>,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="group__pinctrl__interface_1ga3549075e60ccdb743b269d590600d41b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface_1ga3549075e60ccdb743b269d590600d41b" kindref="member">pinctrl_apply_state_direct</ref>(</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PINCTRL_STORE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref><sp/>=<sp/>config-&gt;<ref refid="structpinctrl__dev__config_1a69db43c310985f38f0802a3e9f82fd62" kindref="member">reg</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref><sp/>=<sp/><ref refid="group__pinctrl__interface_1ga6e283a1a1b040323b96227b2ea8f731e" kindref="member">PINCTRL_REG_NONE</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface_1ga3397507e30eb10e814b793615f80455b" kindref="member">pinctrl_configure_pins</ref>(<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;pins,<sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;pin_cnt,<sp/><ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="group__pinctrl__interface_1ga16a9391222345d00dbc5c39c45f429f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface_1ga16a9391222345d00dbc5c39c45f429f9" kindref="member">pinctrl_apply_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__pinctrl__interface_1ga46d7997af7e9231b431c79af34288d50" kindref="member">pinctrl_lookup_state</ref>(config,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>&amp;<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface_1ga3549075e60ccdb743b269d590600d41b" kindref="member">pinctrl_apply_state_direct</ref>(config,<sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_PINCTRL_DYNAMIC)<sp/>||<sp/>defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="group__pinctrl__interface__dynamic_1ga202dbcf2bcde364733996673dbdf2922" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_DT_STATE_PINS_DEFINE(node_id,<sp/>prop)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>pinctrl_soc_pin_t<sp/>prop<sp/>##<sp/>_pins[]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_PINCTRL_STATE_PINS_INIT(node_id,<sp/>prop);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="group__pinctrl__interface__dynamic_1ga6331121c706ba721e5bd43491dcc14d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINCTRL_DT_STATE_INIT(prop,<sp/>state)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.id<sp/>=<sp/>state,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pins<sp/>=<sp/>prop<sp/>##<sp/>_pins,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pin_cnt<sp/>=<sp/>ARRAY_SIZE(prop<sp/>##<sp/>_pins)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="group__pinctrl__interface__dynamic_1ga647115208cbed7534a98c56d93a517b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface__dynamic_1ga647115208cbed7534a98c56d93a517b8" kindref="member">pinctrl_update_states</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>*states,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>state_cnt);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__pinctrl__interface__dynamic_1ga647115208cbed7534a98c56d93a517b8" kindref="member">pinctrl_update_states</ref>(</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref><sp/>*states,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>state_cnt)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__system__errno_1ga43785b9969e0bd1af532dbde06c5540b" kindref="member">ENOSYS</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(CONFIG_PINCTRL_DYNAMIC)<sp/>||<sp/>defined(__DOXYGEN__)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_PINCTRL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/pinctrl.h"/>
  </compounddef>
</doxygen>
