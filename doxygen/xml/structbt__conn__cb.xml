<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__conn__cb" kind="struct" language="C++" prot="public">
    <compoundname>bt_conn_cb</compoundname>
    <includes refid="conn_8h" local="no">conn.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__conn__cb_1ab3618150bfeea9492095ba27ce978c69" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::connected) (struct bt_conn *conn, uint8_t err)</definition>
        <argsstring>)(struct bt_conn *conn, uint8_t err)</argsstring>
        <name>connected</name>
        <briefdescription>
<para>A new connection has been established. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application of a new connection. In case the err parameter is non-zero it means that the connection establishment failed.</para>
<para><simplesect kind="note"><para>If the connection was established from an advertising set then the advertising set cannot be restarted directly from this callback. Instead use the connected callback of the advertising set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>New connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>HCI error. Zero for success, non-zero otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>err</computeroutput> can mean either of the following:<itemizedlist>
<listitem><para><ref refid="hci__err_8h_1afd68afeb0296e3af363d7d60eaf4e9a1" kindref="member">BT_HCI_ERR_UNKNOWN_CONN_ID</ref> Creating the connection started by <ref refid="group__bt__conn_1ga8d66f3e0262a51279e9fa8b3139252e6" kindref="member">bt_conn_le_create</ref> was canceled either by the user through <ref refid="group__bt__conn_1ga14e7c852b0271781594e742ae509c5d3" kindref="member">bt_conn_disconnect</ref> or by the timeout in the host through <ref refid="structbt__conn__le__create__param" kindref="compound">bt_conn_le_create_param</ref> timeout parameter, which defaults to <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_CREATE_CONN_TIMEOUT` </verbatim> seconds.</para>
</listitem><listitem><para><computeroutput>BT_HCI_ERR_ADV_TIMEOUT</computeroutput> High duty cycle directed connectable advertiser started by <ref refid="group__bt__gap_1gad2e3caef88d52d720e8e4d21df767b02" kindref="member">bt_le_adv_start</ref> failed to be connected within the timeout. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="797" column="1" bodyfile="include/bluetooth/conn.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1a8b8983b5b5b05c9e2dae242485b6c914" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::disconnected) (struct bt_conn *conn, uint8_t reason)</definition>
        <argsstring>)(struct bt_conn *conn, uint8_t reason)</argsstring>
        <name>disconnected</name>
        <briefdescription>
<para>A connection has been disconnected. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that a connection has been disconnected.</para>
<para>When this callback is called the stack still has one reference to the connection object. If the application in this callback tries to start either a connectable advertiser or create a new connection this might fail because there are no free connection objects available. To avoid this issue it is recommended to either start connectable advertise or create a new connection using <ref refid="group__workqueue__apis_1gace61b59575093d7442f39ccb7be686d7" kindref="member">k_work_submit</ref> or increase <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_MAX_CONN` </verbatim>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>BT_HCI_ERR_* reason for the disconnection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="816" column="1" bodyfile="include/bluetooth/conn.h" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1a2c52c2e2798062708c373fae9610fadd" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>bool(* bt_conn_cb::le_param_req) (struct bt_conn *conn, struct bt_le_conn_param *param)</definition>
        <argsstring>)(struct bt_conn *conn, struct bt_le_conn_param *param)</argsstring>
        <name>le_param_req</name>
        <briefdescription>
<para>LE connection parameter update request. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that a remote device is requesting to update the connection parameters. The application accepts the parameters by returning true, or rejects them by returning false. Before accepting, the application may also adjust the parameters to better suit its needs.</para>
<para>It is recommended for an application to have just one of these callbacks for simplicity. However, if an application registers multiple it needs to manage the potentially different requirements for each callback. Each callback gets the parameters as returned by previous callbacks, i.e. they are not necessarily the same ones as the remote originally sent.</para>
<para>If the application does not have this callback then the default is to accept the parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Proposed connection parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true to accept the parameters, or false to reject them. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="842" column="1" bodyfile="include/bluetooth/conn.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1a01582ed3e3801e10c665534eaa991454" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::le_param_updated) (struct bt_conn *conn, uint16_t interval, uint16_t latency, uint16_t timeout)</definition>
        <argsstring>)(struct bt_conn *conn, uint16_t interval, uint16_t latency, uint16_t timeout)</argsstring>
        <name>le_param_updated</name>
        <briefdescription>
<para>The parameters for an LE connection have been updated. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that the connection parameters for an LE connection have been updated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection interval. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latency</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection latency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection supervision timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="855" column="1" bodyfile="include/bluetooth/conn.h" bodystart="855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1aea9b62ab1a1469be97a207a8e07d2f14" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::identity_resolved) (struct bt_conn *conn, const bt_addr_le_t *rpa, const bt_addr_le_t *identity)</definition>
        <argsstring>)(struct bt_conn *conn, const bt_addr_le_t *rpa, const bt_addr_le_t *identity)</argsstring>
        <name>identity_resolved</name>
        <briefdescription>
<para>Remote Identity Address has been resolved. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that a remote Identity Address has been resolved</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rpa</parametername>
</parameternamelist>
<parameterdescription>
<para>Resolvable Private Address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identity</parametername>
</parameternamelist>
<parameterdescription>
<para>Identity Address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="867" column="1" bodyfile="include/bluetooth/conn.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1ae454d5bc2664e90ba2b1e0c867db374e" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::security_changed) (struct bt_conn *conn, bt_security_t level, enum bt_security_err err)</definition>
        <argsstring>)(struct bt_conn *conn, bt_security_t level, enum bt_security_err err)</argsstring>
        <name>security_changed</name>
        <briefdescription>
<para>The security level of a connection has changed. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that the security of a connection has changed.</para>
<para>The security level of the connection can either have been increased or remain unchanged. An increased security level means that the pairing procedure has been performed or the bond information from a previous connection has been applied. If the security level remains unchanged this means that the encryption key has been refreshed for the connection.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>New security level of the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Security error. Zero for success, non-zero otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="888" column="1" bodyfile="include/bluetooth/conn.h" bodystart="888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1af726f004c06b86f770ece263ed6c9ca4" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::remote_info_available) (struct bt_conn *conn, struct bt_conn_remote_info *remote_info)</definition>
        <argsstring>)(struct bt_conn *conn, struct bt_conn_remote_info *remote_info)</argsstring>
        <name>remote_info_available</name>
        <briefdescription>
<para>Remote information procedures has completed. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that the remote information has been retrieved from the remote peer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection information of remote device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="901" column="1" bodyfile="include/bluetooth/conn.h" bodystart="901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1ae02a23d823954a747f8f474fb19276d7" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::le_phy_updated) (struct bt_conn *conn, struct bt_conn_le_phy_info *param)</definition>
        <argsstring>)(struct bt_conn *conn, struct bt_conn_le_phy_info *param)</argsstring>
        <name>le_phy_updated</name>
        <briefdescription>
<para>The PHY of the connection has changed. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that the PHY of the connection has changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection LE PHY information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="914" column="1" bodyfile="include/bluetooth/conn.h" bodystart="914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__conn__cb_1a1142d1861cc0b0058f68ecf537d0cec3" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_conn_cb::le_data_len_updated) (struct bt_conn *conn, struct bt_conn_le_data_len_info *info)</definition>
        <argsstring>)(struct bt_conn *conn, struct bt_conn_le_data_len_info *info)</argsstring>
        <name>le_data_len_updated</name>
        <briefdescription>
<para>The data length parameters of the connection has changed. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that the maximum Link Layer payload length or transmission time has changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection data length information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="927" column="1" bodyfile="include/bluetooth/conn.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Connection callback structure. </para>
    </briefdescription>
    <detaileddescription>
<para>This structure is used for tracking the state of a connection. It is registered with the help of the <ref refid="group__bt__conn_1ga33b35e6457af183e059078aead4562b4" kindref="member">bt_conn_cb_register()</ref> API. It&apos;s permissible to register multiple instances of this <ref refid="structbt__conn__cb" kindref="compound">bt_conn_cb</ref> type, in case different modules of an application are interested in tracking the connection state. If a callback is not of interest for an instance, it may be set to NULL and will as a consequence not be used for that instance. </para>
    </detaileddescription>
    <location file="include/bluetooth/conn.h" line="772" column="1" bodyfile="include/bluetooth/conn.h" bodystart="772" bodyend="943"/>
    <listofallmembers>
      <member refid="structbt__conn__cb_1ab3618150bfeea9492095ba27ce978c69" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>connected</name></member>
      <member refid="structbt__conn__cb_1a8b8983b5b5b05c9e2dae242485b6c914" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>disconnected</name></member>
      <member refid="structbt__conn__cb_1aea9b62ab1a1469be97a207a8e07d2f14" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>identity_resolved</name></member>
      <member refid="structbt__conn__cb_1a1142d1861cc0b0058f68ecf537d0cec3" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>le_data_len_updated</name></member>
      <member refid="structbt__conn__cb_1a2c52c2e2798062708c373fae9610fadd" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>le_param_req</name></member>
      <member refid="structbt__conn__cb_1a01582ed3e3801e10c665534eaa991454" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>le_param_updated</name></member>
      <member refid="structbt__conn__cb_1ae02a23d823954a747f8f474fb19276d7" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>le_phy_updated</name></member>
      <member refid="structbt__conn__cb_1af726f004c06b86f770ece263ed6c9ca4" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>remote_info_available</name></member>
      <member refid="structbt__conn__cb_1ae454d5bc2664e90ba2b1e0c867db374e" prot="public" virt="non-virtual"><scope>bt_conn_cb</scope><name>security_changed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
