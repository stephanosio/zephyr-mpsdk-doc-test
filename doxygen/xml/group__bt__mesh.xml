<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__mesh" kind="group">
    <compoundname>bt_mesh</compoundname>
    <title>Bluetooth mesh</title>
    <innerclass refid="structbt__mesh__lpn__cb" prot="public">bt_mesh_lpn_cb</innerclass>
    <innerclass refid="structbt__mesh__friend__cb" prot="public">bt_mesh_friend_cb</innerclass>
    <innergroup refid="group__bt__mesh__access">Access layer</innergroup>
    <innergroup refid="group__bt__mesh__cfg__cli">Configuration Client Model</innergroup>
    <innergroup refid="group__bt__mesh__cfg__srv">Configuration Server Model</innergroup>
    <innergroup refid="group__bt__mesh__health__cli">Health Client Model</innergroup>
    <innergroup refid="group__bt__mesh__health__srv">Health Server Model</innergroup>
    <innergroup refid="group__bt__mesh__health__faults">Health faults</innergroup>
    <innergroup refid="group__bt__mesh__heartbeat">Heartbeat</innergroup>
    <innergroup refid="group__bt__mesh__msg">Message</innergroup>
    <innergroup refid="group__bt__mesh__prov">Provisioning</innergroup>
    <innergroup refid="group__bt__mesh__proxy">Proxy</innergroup>
    <innergroup refid="group__bt__mesh__cfg">Runtime Configuration</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__mesh_1ga521def6f74467a9bd3f2757c6aabd405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_init</definition>
        <argsstring>(const struct bt_mesh_prov *prov, const struct bt_mesh_comp *comp)</argsstring>
        <name>bt_mesh_init</name>
        <param>
          <type>const struct <ref refid="structbt__mesh__prov" kindref="compound">bt_mesh_prov</ref> *</type>
          <declname>prov</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__mesh__comp" kindref="compound">bt_mesh_comp</ref> *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>Initialize Mesh support. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this API, the node will not automatically advertise as unprovisioned, rather the <ref refid="group__bt__mesh__prov_1ga6c8dc1b09d4cde8738be83c992b860a9" kindref="member">bt_mesh_prov_enable()</ref> API needs to be called to enable unprovisioned advertising on one or more provisioning bearers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prov</parametername>
</parameternamelist>
<parameterdescription>
<para>Node provisioning information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>Node Composition.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="500" column="5" declfile="include/bluetooth/mesh/main.h" declline="500" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1ga69fc65f4e07e6007388473f139e5d8d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_reset</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_reset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset the state of the local Mesh node. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the state of the node, which means that it needs to be reprovisioned to become an active node in a Mesh network again.</para>
<para>After calling this API, the node will not automatically advertise as unprovisioned, rather the <ref refid="group__bt__mesh__prov_1ga6c8dc1b09d4cde8738be83c992b860a9" kindref="member">bt_mesh_prov_enable()</ref> API needs to be called to enable unprovisioned advertising on one or more provisioning bearers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="513" column="6" declfile="include/bluetooth/mesh/main.h" declline="513" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1ga6c209dbad6881f1e9634d9b7d42f2c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_suspend</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_suspend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Suspend the Mesh network temporarily. </para>
        </briefdescription>
        <detaileddescription>
<para>This API can be used for power saving purposes, but the user should be aware that leaving the local node suspended for a long period of time may cause it to become permanently disconnected from the Mesh network. If at all possible, the Friendship feature should be used instead, to make the node into a Low Power Node.</para>
<para><simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="525" column="5" declfile="include/bluetooth/mesh/main.h" declline="525" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1gaa9114ce8941e641dbb23828d7c0451fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_resume</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_resume</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Resume a suspended Mesh network. </para>
        </briefdescription>
        <detaileddescription>
<para>This API resumes the local node, after it has been suspended using the <ref refid="group__bt__mesh_1ga6c209dbad6881f1e9634d9b7d42f2c34" kindref="member">bt_mesh_suspend()</ref> API.</para>
<para><simplesect kind="return"><para>0 on success, or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="534" column="5" declfile="include/bluetooth/mesh/main.h" declline="534" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1ga3fdc601bd036477f6bdf212667c6b0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_iv_update_test</definition>
        <argsstring>(bool enable)</argsstring>
        <name>bt_mesh_iv_update_test</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Toggle the IV Update test mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This API is only available if the IV Update test mode has been enabled in Kconfig. It is needed for passing most of the IV Update qualification test cases.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable IV Update test mode, false to disable it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="544" column="6" declfile="include/bluetooth/mesh/main.h" declline="544" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1gacdf00423b03057fdf3a4207ee579eb74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool bt_mesh_iv_update</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_iv_update</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Toggle the IV Update state. </para>
        </briefdescription>
        <detaileddescription>
<para>This API is only available if the IV Update test mode has been enabled in Kconfig. It is needed for passing most of the IV Update qualification test cases.</para>
<para><simplesect kind="return"><para>true if IV Update In Progress state was entered, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="554" column="6" declfile="include/bluetooth/mesh/main.h" declline="554" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1ga7964f5b1abb7b12728e4ec224c95c849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_lpn_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>bt_mesh_lpn_set</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Toggle the Low Power feature of the local device. </para>
        </briefdescription>
        <detaileddescription>
<para>Enables or disables the Low Power feature of the local device. This is exposed as a run-time feature, since the device might want to change this e.g. based on being plugged into a stable power source or running from a battery power source.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable LPN functionality, false to disable it.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="567" column="5" declfile="include/bluetooth/mesh/main.h" declline="567" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1ga3fd66605950a55e299ca3a7cc697d453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_lpn_poll</definition>
        <argsstring>(void)</argsstring>
        <name>bt_mesh_lpn_poll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Send out a Friend Poll message. </para>
        </briefdescription>
        <detaileddescription>
<para>Send a Friend Poll message to the Friend of this node. If there is no established Friendship the function will return an error.</para>
<para><simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="576" column="5" declfile="include/bluetooth/mesh/main.h" declline="576" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1ga28b9b1d7d732e300be8d4bbffdbad391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_friend_terminate</definition>
        <argsstring>(uint16_t lpn_addr)</argsstring>
        <name>bt_mesh_friend_terminate</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>lpn_addr</declname>
        </param>
        <briefdescription>
<para>Terminate Friendship. </para>
        </briefdescription>
        <detaileddescription>
<para>Terminated Friendship for given LPN.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lpn_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Low Power Node address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="691" column="5" declfile="include/bluetooth/mesh/main.h" declline="691" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh_1ga62f9a72c4e9dc5e4f3f42bd4df4fe452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_mesh_rpl_pending_store</definition>
        <argsstring>(uint16_t addr)</argsstring>
        <name>bt_mesh_rpl_pending_store</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Store pending RPL entry(ies) in the persistent storage. </para>
        </briefdescription>
        <detaileddescription>
<para>This API allows the user to store pending RPL entry(ies) in the persistent storage without waiting for the timeout.</para>
<para><simplesect kind="note"><para>When flash is used as the persistent storage, calling this API too frequently may wear it out.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the node which RPL entry needs to be stored or <ref refid="group__bt__mesh__access_1ga27aafd100b6ccc1de060a75370184620" kindref="member">BT_MESH_ADDR_ALL_NODES</ref> to store all pending RPL entries. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="704" column="6" declfile="include/bluetooth/mesh/main.h" declline="704" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__mesh_1ga0d6985da3c7be76732ee103458b77121" prot="public" static="no">
        <name>BT_MESH_NET_PRIMARY</name>
        <initializer>0x000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="474" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh_1gac588eefe83db94784a420ce063f02b55" prot="public" static="no">
        <name>BT_MESH_FEAT_RELAY</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Relay feature </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="477" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh_1gaee648ce202316c56d4d588cb0ad5aeb4" prot="public" static="no">
        <name>BT_MESH_FEAT_PROXY</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GATT Proxy feature </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="479" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh_1ga8f27086b3bc3c4a6e14621836f9f8e80" prot="public" static="no">
        <name>BT_MESH_FEAT_FRIEND</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Friend feature </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="481" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh_1gaad71a36c82b4e4d3fa334ecff5cc0171" prot="public" static="no">
        <name>BT_MESH_FEAT_LOW_POWER</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low Power Node feature </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="483" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh_1gac337fd8688d70e862974e010ad42a11b" prot="public" static="no">
        <name>BT_MESH_FEAT_SUPPORTED</name>
        <initializer>					     (<ref refid="group__bt__mesh_1gac588eefe83db94784a420ce063f02b55" kindref="member">BT_MESH_FEAT_RELAY</ref> |   \
					     <ref refid="group__bt__mesh_1gaee648ce202316c56d4d588cb0ad5aeb4" kindref="member">BT_MESH_FEAT_PROXY</ref> |   \
					     <ref refid="group__bt__mesh_1ga8f27086b3bc3c4a6e14621836f9f8e80" kindref="member">BT_MESH_FEAT_FRIEND</ref> |  \
					     <ref refid="group__bt__mesh_1gaad71a36c82b4e4d3fa334ecff5cc0171" kindref="member">BT_MESH_FEAT_LOW_POWER</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="484" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh_1gac18d4ce09495a8ade098a6320bb26ec2" prot="public" static="no">
        <name>BT_MESH_LPN_CB_DEFINE</name>
        <param><defname>_name</defname></param>
        <initializer>	static const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structbt__mesh__lpn__cb" kindref="compound">bt_mesh_lpn_cb</ref>,          \
					     _CONCAT(bt_mesh_lpn_cb_, \
						     _name))</initializer>
        <briefdescription>
<para>Register a callback structure for Friendship events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of callback structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="625" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh_1ga4f00fa03af86b39e24140eb09c51ca4c" prot="public" static="no">
        <name>BT_MESH_FRIEND_CB_DEFINE</name>
        <param><defname>_name</defname></param>
        <initializer>	static const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structbt__mesh__friend__cb" kindref="compound">bt_mesh_friend_cb</ref>,          \
					     _CONCAT(bt_mesh_friend_cb_, \
						     _name))</initializer>
        <briefdescription>
<para>Register a callback structure for Friendship events. </para>
        </briefdescription>
        <detaileddescription>
<para>Registers a callback structure that will be called whenever Friendship gets established or terminated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of callback structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="678" column="9" bodyfile="include/bluetooth/mesh/main.h" bodystart="678" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bluetooth mesh. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
