<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="ztress_8h" kind="file" language="C++">
    <compoundname>ztress.h</compoundname>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes local="no">kernel.h</includes>
    <incdepgraph>
      <node id="2">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="3">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="1">
        <label>subsys/testsuite/ztest/include/ztress.h</label>
        <link refid="ztress_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>kernel.h</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structztress__context__data" prot="public">ztress_context_data</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ztress_8h_1a8752d529cfc4d77b1dd71c4572fd63c3" prot="public" static="no">
        <name>ZTRESS_ID_THREAD</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="13" column="9" bodyfile="subsys/testsuite/ztest/include/ztress.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ztress_8h_1a937803e1398db7d0e10ea60c9c9ef642" prot="public" static="no">
        <name>ZTRESS_ID_K_TIMER</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="14" column="9" bodyfile="subsys/testsuite/ztest/include/ztress.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ztress_8h_1abab05b8db44a7024ce23cb34bf999e42" prot="public" static="no">
        <name>ZTRESS_TIMER</name>
        <param><defname>handler</defname></param>
        <param><defname>user_data</defname></param>
        <param><defname>exec_cnt</defname></param>
        <param><defname>init_timeout</defname></param>
        <initializer>	(<ref refid="ztress_8h_1a937803e1398db7d0e10ea60c9c9ef642" kindref="member">ZTRESS_ID_K_TIMER</ref>, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, <ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>, exec_cnt, 0, init_timeout)</initializer>
        <briefdescription>
<para>Descriptor of a k_timer handler execution context. </para>
        </briefdescription>
        <detaileddescription>
<para>The handler is executed in the k_timer handler context which typically means interrupt context. This context will preempt any other used in the set.</para>
<para><simplesect kind="note"><para>There can only be up to one k_timer context in the set and it must be the first argument of <ref refid="ztress_8h_1a6acc3a50e0eff7360873006482f5c8e9" kindref="member">ZTRESS_EXECUTE</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>User handler of type <ref refid="ztress_8h_1a633439263754bf08baee06c37dddab40" kindref="member">ztress_handler</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the <computeroutput>handler</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exec_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of handler executions to complete the test. If 0 then this is not included in completion criteria.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial backoff time base (given in <ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref>). It is adjusted during the test to optimize CPU load. The actual timeout used for the timer is randomized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="35" column="9" bodyfile="subsys/testsuite/ztest/include/ztress.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ztress_8h_1aed561641541e8ced6866f2f1227f21c0" prot="public" static="no">
        <name>ZTRESS_THREAD</name>
        <param><defname>handler</defname></param>
        <param><defname>user_data</defname></param>
        <param><defname>exec_cnt</defname></param>
        <param><defname>preempt_cnt</defname></param>
        <param><defname>init_timeout</defname></param>
        <initializer>	(<ref refid="ztress_8h_1a8752d529cfc4d77b1dd71c4572fd63c3" kindref="member">ZTRESS_ID_THREAD</ref>, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, <ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>, exec_cnt, preempt_cnt, init_timeout)</initializer>
        <briefdescription>
<para>Descriptor of a thread execution context. </para>
        </briefdescription>
        <detaileddescription>
<para>The handler is executed in the thread context. The priority of the thread is determined based on the order in which contexts are listed in <ref refid="ztress_8h_1a6acc3a50e0eff7360873006482f5c8e9" kindref="member">ZTRESS_EXECUTE</ref>.</para>
<para><simplesect kind="note"><para>thread sleeps for random amount of time. Additionally, the thread busy-waits for a random length of time to further increase randomization in the test.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>User handler of type <ref refid="ztress_8h_1a633439263754bf08baee06c37dddab40" kindref="member">ztress_handler</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the <computeroutput>handler</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exec_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of handler executions to complete the test. If 0 then this is not included in completion criteria.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preempt_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of preemptions of that context to complete the test. If 0 then this is not included in completion criteria.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial backoff time base (given in <ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref>). It is adjusted during the test to optimize CPU load. The actual timeout used for sleeping is randomized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="60" column="9" bodyfile="subsys/testsuite/ztest/include/ztress.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ztress_8h_1ab5e8bbcecd77db06e7a90631fc0c202b" prot="public" static="no">
        <name>ZTRESS_CONTEXT_INITIALIZER</name>
        <param><defname>_handler</defname></param>
        <param><defname>_user_data</defname></param>
        <param><defname>_exec_cnt</defname></param>
        <param><defname>_preempt_cnt</defname></param>
        <param><defname>_t</defname></param>
        <initializer>	{ \
		.<ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref> = (_handler), \
		.<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref> = (_user_data), \
		.exec_cnt = (_exec_cnt), \
		.preempt_cnt = (_preempt_cnt), \
		.<ref refid="test__sched__timeslice__and__lock_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref> = (_t) \
	}</initializer>
        <briefdescription>
<para>Initialize context structure. </para>
        </briefdescription>
        <detaileddescription>
<para>For argument types see <ref refid="structztress__context__data" kindref="compound">ztress_context_data</ref>. For more details see <ref refid="ztress_8h_1aed561641541e8ced6866f2f1227f21c0" kindref="member">ZTRESS_THREAD</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_exec_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Execution count limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_preempt_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Preemption count limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="110" column="9" bodyfile="subsys/testsuite/ztest/include/ztress.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ztress_8h_1a6acc3a50e0eff7360873006482f5c8e9" prot="public" static="no">
        <name>ZTRESS_EXECUTE</name>
        <param><defname>...</defname></param>
        <initializer>	do {							\
	Z_ZTRESS_TIMER_CONTEXT_VALIDATE(__VA_ARGS__);					\
	int has_timer = Z_ZTRESS_HAS_TIMER(__VA_ARGS__);				\
	struct <ref refid="structztress__context__data" kindref="compound">ztress_context_data</ref> <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>[] = {						\
		<ref refid="threads_2no-multithreading_2src_2main_8c_1af2de6cd2b60b623046744e6314a5efb6" kindref="member">FOR_EACH</ref>(Z_ZTRESS_GET_HANDLER_DATA, (,), __VA_ARGS__)			\
	};										\
	size_t cnt = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>) - has_timer;					\
	int err = <ref refid="ztress_8h_1af706f1af4c42f5925d7545dadf5548fd" kindref="member">ztress_execute</ref>(has_timer ? &amp;<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>[0] : NULL, &amp;<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>[has_timer], cnt);	\
											\
	<ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(err, 0, &quot;ztress_execute failed (err: %<ref refid="asm-macro-64-bit-gnu_8h_1a6b6a358e951559f7fd95cb1da716005c" kindref="member">d</ref>)&quot;, err);			\
} while (0)</initializer>
        <briefdescription>
<para>Setup and run stress test. </para>
        </briefdescription>
        <detaileddescription>
<para>It initialises all contexts and calls <ref refid="ztress_8h_1af706f1af4c42f5925d7545dadf5548fd" kindref="member">ztress_execute</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of contexts. Contexts are configured using <ref refid="ztress_8h_1abab05b8db44a7024ce23cb34bf999e42" kindref="member">ZTRESS_TIMER</ref> and <ref refid="ztress_8h_1aed561641541e8ced6866f2f1227f21c0" kindref="member">ZTRESS_THREAD</ref> macros. <ref refid="ztress_8h_1abab05b8db44a7024ce23cb34bf999e42" kindref="member">ZTRESS_TIMER</ref> must be the first argument if used. Each thread context has an assigned priority. The priority is assigned in a descending order (first listed thread context has the highest priority). The number of supported thread contexts is configurable in Kconfig. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="155" column="9" bodyfile="subsys/testsuite/ztest/include/ztress.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ztress_8h_1a633439263754bf08baee06c37dddab40" prot="public" static="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>typedef bool(* ztress_handler) (void *user_data, uint32_t cnt, bool last, int prio)</definition>
        <argsstring>)(void *user_data, uint32_t cnt, bool last, int prio)</argsstring>
        <name>ztress_handler</name>
        <briefdescription>
<para>User handler called in one of the configured contexts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data provided in the context descriptor.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Current execution counter. Counted from 0.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag set to true indicates that it is the last execution because completion criteria are met, test timed out or was aborted.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Context priority counting from 0 which indicates the highest priority.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>continue test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>stop executing the current context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="77" column="9" bodyfile="subsys/testsuite/ztest/include/ztress.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ztress_8h_1af706f1af4c42f5925d7545dadf5548fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ztress_execute</definition>
        <argsstring>(struct ztress_context_data *timer_data, struct ztress_context_data *thread_data, size_t cnt)</argsstring>
        <name>ztress_execute</name>
        <param>
          <type>struct <ref refid="structztress__context__data" kindref="compound">ztress_context_data</ref> *</type>
          <declname>timer_data</declname>
        </param>
        <param>
          <type>struct <ref refid="structztress__context__data" kindref="compound">ztress_context_data</ref> *</type>
          <declname>thread_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute contexts.</para>
<para>The test runs until all completion requirements are met or until the test times out (use <ref refid="ztress_8h_1a5b3069bb2aa35ddc64c46c18d2e30091" kindref="member">ztress_set_timeout</ref> to configure timeout) or until the test is aborted (<ref refid="ztress_8h_1a57f171e230fba462b3dea6b2d3cf71f6" kindref="member">ztress_abort</ref>).</para>
<para>on test completion a report is printed (<ref refid="ztress_8h_1af4db2092eee17d863c9810333ba4c870" kindref="member">ztress_report</ref> is called internally).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structtimer__data" kindref="compound">timer_data</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Timer context. NULL if timer context is not used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structthread__data" kindref="compound">thread_data</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>List of thread contexts descriptors in priority descending order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of thread contexts.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If configuration is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if test is successfully performed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="182" column="5" declfile="subsys/testsuite/ztest/include/ztress.h" declline="182" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ztress_8h_1a57f171e230fba462b3dea6b2d3cf71f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztress_abort</definition>
        <argsstring>(void)</argsstring>
        <name>ztress_abort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Abort ongoing stress test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="187" column="6" declfile="subsys/testsuite/ztest/include/ztress.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ztress_8h_1a5b3069bb2aa35ddc64c46c18d2e30091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztress_set_timeout</definition>
        <argsstring>(k_timeout_t t)</argsstring>
        <name>ztress_set_timeout</name>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set test timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>Test is terminated after timeout disregarding completion criteria. Setting is persistent between executions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="196" column="6" declfile="subsys/testsuite/ztest/include/ztress.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ztress_8h_1af4db2092eee17d863c9810333ba4c870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztress_report</definition>
        <argsstring>(void)</argsstring>
        <name>ztress_report</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Print last test report. </para>
        </briefdescription>
        <detaileddescription>
<para>Report contains number of executions and preemptions for each context, initial and adjusted timeouts and CPU load during the test. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="203" column="6" declfile="subsys/testsuite/ztest/include/ztress.h" declline="203" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ztress_8h_1a99eeabcc672fc5ec0b83ce5b8fb4ec5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ztress_exec_count</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>ztress_exec_count</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get number of executions of a given context in the last test. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Context id. 0 means the highest priority.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of executions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="211" column="5" declfile="subsys/testsuite/ztest/include/ztress.h" declline="211" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ztress_8h_1a4406b828d170bc19065aaf65aeb4613e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ztress_preempt_count</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>ztress_preempt_count</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get number of preemptions of a given context in the last test. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Context id. 0 means the highest priority.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of preemptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="219" column="5" declfile="subsys/testsuite/ztest/include/ztress.h" declline="219" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ztress_8h_1acbbdb8e7bad532d6dd20c486b3256e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ztress_optimized_ticks</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>ztress_optimized_ticks</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get optimized timeout base of a given context in the last test. </para>
        </briefdescription>
        <detaileddescription>
<para>Optimized value can be used to update initial value. It will improve the test since optimal CPU load will be reach immediately.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Context id. 0 means the highest priority.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Optimized timeout base. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztress.h" line="230" column="10" declfile="subsys/testsuite/ztest/include/ztress.h" declline="230" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TESTSUITE_ZTEST_INCLUDE_ZTRESS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TESTSUITE_ZTEST_INCLUDE_ZTRESS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="ztress_8h_1a8752d529cfc4d77b1dd71c4572fd63c3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTRESS_ID_THREAD<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="ztress_8h_1a937803e1398db7d0e10ea60c9c9ef642" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTRESS_ID_K_TIMER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="ztress_8h_1abab05b8db44a7024ce23cb34bf999e42" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTRESS_TIMER(handler,<sp/>user_data,<sp/>exec_cnt,<sp/>init_timeout)<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ZTRESS_ID_K_TIMER,<sp/>handler,<sp/>user_data,<sp/>exec_cnt,<sp/>0,<sp/>init_timeout)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="ztress_8h_1aed561641541e8ced6866f2f1227f21c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTRESS_THREAD(handler,<sp/>user_data,<sp/>exec_cnt,<sp/>preempt_cnt,<sp/>init_timeout)<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ZTRESS_ID_THREAD,<sp/>handler,<sp/>user_data,<sp/>exec_cnt,<sp/>preempt_cnt,<sp/>init_timeout)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="ztress_8h_1a633439263754bf08baee06c37dddab40" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref><sp/>(*<ref refid="ztress_8h_1a633439263754bf08baee06c37dddab40" kindref="member">ztress_handler</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>cnt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structztress__context__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztress__context__data" kindref="compound">ztress_context_data</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handler.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="structztress__context__data_1abc27db12d2734fa35bee654b30497108" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ztress_8h_1a633439263754bf08baee06c37dddab40" kindref="member">ztress_handler</ref><sp/><ref refid="structztress__context__data_1abc27db12d2734fa35bee654b30497108" kindref="member">handler</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>User<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structztress__context__data_1a871f79e1717137500d9ee4c1a2ad07ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structztress__context__data_1a871f79e1717137500d9ee4c1a2ad07ef" kindref="member">user_data</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Minimum<sp/>number<sp/>of<sp/>executions<sp/>to<sp/>complete<sp/>the<sp/>test.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structztress__context__data_1ae96b7b02d0c315bb126193a4f0ad2bdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structztress__context__data_1ae96b7b02d0c315bb126193a4f0ad2bdf" kindref="member">exec_cnt</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Minimum<sp/>number<sp/>of<sp/>preemptions<sp/>to<sp/>complete<sp/>the<sp/>test.<sp/>Valid<sp/>only<sp/>for</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>thread<sp/>context.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structztress__context__data_1a17b5f520522cd6fc7024f097f18261ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structztress__context__data_1a17b5f520522cd6fc7024f097f18261ba" kindref="member">preempt_cnt</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initial<sp/>timeout.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structztress__context__data_1a1208baa35d4adc19126d85f45ed78c63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="structztress__context__data_1a1208baa35d4adc19126d85f45ed78c63" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="ztress_8h_1ab5e8bbcecd77db06e7a90631fc0c202b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTRESS_CONTEXT_INITIALIZER(_handler,<sp/>_user_data,<sp/>_exec_cnt,<sp/>_preempt_cnt,<sp/>_t)<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.handler<sp/>=<sp/>(_handler),<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.user_data<sp/>=<sp/>(_user_data),<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.exec_cnt<sp/>=<sp/>(_exec_cnt),<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.preempt_cnt<sp/>=<sp/>(_preempt_cnt),<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.t<sp/>=<sp/>(_t)<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ZTRESS_GET_HANDLER_DATA2(_,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZTRESS_CONTEXT_INITIALIZER(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ZTRESS_GET_HANDLER_DATA(data)<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_ZTRESS_GET_HANDLER_DATA2<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ZTRESS_HAS_TIMER(data,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_ARG_N(1,<sp/>__DEBRACKET<sp/>data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ZTRESS_TIMER_IDX(idx,<sp/>data)<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((GET_ARG_N(1,<sp/>__DEBRACKET<sp/>data))<sp/>==<sp/>ZTRESS_ID_K_TIMER<sp/>?<sp/>idx<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ZTRESS_TIMER_CONTEXT_VALIDATE(...)<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT((FOR_EACH_IDX(Z_ZTRESS_TIMER_IDX,<sp/>(+),<sp/>__VA_ARGS__))<sp/>==<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;There<sp/>can<sp/>only<sp/>be<sp/>up<sp/>to<sp/>one<sp/>ZTRESS_TIMER<sp/>context<sp/>and<sp/>it<sp/>must<sp/>&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;be<sp/>the<sp/>first<sp/>in<sp/>the<sp/>list&quot;)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="ztress_8h_1a6acc3a50e0eff7360873006482f5c8e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTRESS_EXECUTE(...)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_ZTRESS_TIMER_CONTEXT_VALIDATE(__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>has_timer<sp/>=<sp/>Z_ZTRESS_HAS_TIMER(__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>ztress_context_data<sp/>data[]<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOR_EACH(Z_ZTRESS_GET_HANDLER_DATA,<sp/>(,),<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>cnt<sp/>=<sp/>ARRAY_SIZE(data)<sp/>-<sp/>has_timer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>err<sp/>=<sp/>ztress_execute(has_timer<sp/>?<sp/>&amp;data[0]<sp/>:<sp/>NULL,<sp/>&amp;data[has_timer],<sp/>cnt);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zassert_equal(err,<sp/>0,<sp/>&quot;ztress_execute<sp/>failed<sp/>(err:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>err);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="ztress_8h_1af706f1af4c42f5925d7545dadf5548fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ztress_8h_1af706f1af4c42f5925d7545dadf5548fd" kindref="member">ztress_execute</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structztress__context__data" kindref="compound">ztress_context_data</ref><sp/>*<ref refid="structtimer__data" kindref="compound">timer_data</ref>,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structztress__context__data" kindref="compound">ztress_context_data</ref><sp/>*<ref refid="structthread__data" kindref="compound">thread_data</ref>,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cnt);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="ztress_8h_1a57f171e230fba462b3dea6b2d3cf71f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ztress_8h_1a57f171e230fba462b3dea6b2d3cf71f6" kindref="member">ztress_abort</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="ztress_8h_1a5b3069bb2aa35ddc64c46c18d2e30091" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ztress_8h_1a5b3069bb2aa35ddc64c46c18d2e30091" kindref="member">ztress_set_timeout</ref>(<ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="kobject_8c_1a858810a6da56663cf4e01aecb4f6e8aa" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="ztress_8h_1af4db2092eee17d863c9810333ba4c870" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ztress_8h_1af4db2092eee17d863c9810333ba4c870" kindref="member">ztress_report</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="ztress_8h_1a99eeabcc672fc5ec0b83ce5b8fb4ec5b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ztress_8h_1a99eeabcc672fc5ec0b83ce5b8fb4ec5b" kindref="member">ztress_exec_count</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="ztress_8h_1a4406b828d170bc19065aaf65aeb4613e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ztress_8h_1a4406b828d170bc19065aaf65aeb4613e" kindref="member">ztress_preempt_count</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="ztress_8h_1acbbdb8e7bad532d6dd20c486b3256e21" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="ztress_8h_1acbbdb8e7bad532d6dd20c486b3256e21" kindref="member">ztress_optimized_ticks</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>TESTSUITE_ZTEST_INCLUDE_ZTRESS_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="subsys/testsuite/ztest/include/ztress.h"/>
  </compounddef>
</doxygen>
