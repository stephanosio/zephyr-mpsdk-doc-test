<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__log__backend" kind="group">
    <compoundname>log_backend</compoundname>
    <title>Logger backend interface</title>
    <innerclass refid="structlog__backend__api" prot="public">log_backend_api</innerclass>
    <innerclass refid="structlog__backend__control__block" prot="public">log_backend_control_block</innerclass>
    <innerclass refid="structlog__backend" prot="public">log_backend</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__log__backend_1ga57516a7c8a3ee0d4bcda489809c26305" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_put</definition>
        <argsstring>(const struct log_backend *const backend, struct log_msg *msg)</argsstring>
        <name>log_backend_put</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Put message with log entry to the backend. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>DEPRECATED. Use logging v2.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to message with log entry. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="112" column="20" bodyfile="include/logging/log_backend.h" bodystart="112" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1ga65350888a1895bff0d82e1f72ca92467" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_msg2_process</definition>
        <argsstring>(const struct log_backend *const backend, union log_msg2_generic *msg)</argsstring>
        <name>log_backend_msg2_process</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type>union <ref refid="unionlog__msg2__generic" kindref="compound">log_msg2_generic</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Process message. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is used in deferred and immediate mode. On return, message content is processed by the backend and memory can be freed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to message with log entry. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="129" column="20" bodyfile="include/logging/log_backend.h" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1ga66e46c1d9d728acef0610d76e26cc433" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_put_sync_string</definition>
        <argsstring>(const struct log_backend *const backend, struct log_msg_ids src_level, uint32_t timestamp, const char *fmt, va_list ap)</argsstring>
        <name>log_backend_put_sync_string</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref></type>
          <declname>src_level</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Synchronously process log message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>DEPRECATED. Use logging v2.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Message details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Log string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ap</parametername>
</parameternamelist>
<parameterdescription>
<para>Log string arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="150" column="20" bodyfile="include/logging/log_backend.h" bodystart="150" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1ga688fcdb37979327fe8ef1f7a5d2d54e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_put_sync_hexdump</definition>
        <argsstring>(const struct log_backend *const backend, struct log_msg_ids src_level, uint32_t timestamp, const char *metadata, const uint8_t *data, uint32_t len)</argsstring>
        <name>log_backend_put_sync_hexdump</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref></type>
          <declname>src_level</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Synchronously process log hexdump_message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>DEPRECATED. Use logging v2.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Message details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw string associated with the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="176" column="20" bodyfile="include/logging/log_backend.h" bodystart="176" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1gab300348c43168de1e7eaae8c770b6950" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_dropped</definition>
        <argsstring>(const struct log_backend *const backend, uint32_t cnt)</argsstring>
        <name>log_backend_dropped</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
<para>Notify backend about dropped log messages. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is optional.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dropped logs since last notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="198" column="20" bodyfile="include/logging/log_backend.h" bodystart="198" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1gad12906ffa810514c1d43cb26bba5ea4b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_panic</definition>
        <argsstring>(const struct log_backend *const backend)</argsstring>
        <name>log_backend_panic</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <briefdescription>
<para>Reconfigure backend to panic mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="213" column="20" bodyfile="include/logging/log_backend.h" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1ga8f263b24140229e5cf8e98b322501bca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_id_set</definition>
        <argsstring>(const struct log_backend *const backend, uint8_t id)</argsstring>
        <name>log_backend_id_set</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Set backend id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It is used internally by the logger.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="227" column="20" bodyfile="include/logging/log_backend.h" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1gae3e1d6eaf21dcc1d0961e85271d5e5f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t log_backend_id_get</definition>
        <argsstring>(const struct log_backend *const backend)</argsstring>
        <name>log_backend_id_get</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <briefdescription>
<para>Get backend id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It is used internally by the logger.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="242" column="23" bodyfile="include/logging/log_backend.h" bodystart="242" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1gaf419f3590f42893b7091beed57763c7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *</type>
        <definition>static const struct log_backend * log_backend_get</definition>
        <argsstring>(uint32_t idx)</argsstring>
        <name>log_backend_get</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the backend instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="255" column="38" bodyfile="include/logging/log_backend.h" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1gad055c1dc8e0236b604cb553df3e16a52" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int log_backend_count_get</definition>
        <argsstring>(void)</argsstring>
        <name>log_backend_count_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of backends. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of backends. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="265" column="19" bodyfile="include/logging/log_backend.h" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1ga3ef0b88b4118f7ee04749ace2646c99b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_activate</definition>
        <argsstring>(const struct log_backend *const backend, void *ctx)</argsstring>
        <name>log_backend_activate</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Activate backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>User context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="276" column="20" bodyfile="include/logging/log_backend.h" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1ga1534fdfabce1e97c829aa79d57739589" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_backend_deactivate</definition>
        <argsstring>(const struct log_backend *const backend)</argsstring>
        <name>log_backend_deactivate</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <briefdescription>
<para>Deactivate backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="289" column="20" bodyfile="include/logging/log_backend.h" bodystart="289" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1ga54dd06d48edf92ef191dab946aead216" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool log_backend_is_active</definition>
        <argsstring>(const struct log_backend *const backend)</argsstring>
        <name>log_backend_is_active</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *const</type>
          <declname>backend</declname>
        </param>
        <briefdescription>
<para>Check state of the backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if backend is active, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="303" column="20" bodyfile="include/logging/log_backend.h" bodystart="303" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__log__backend_1gac0a4dc476c3b641ab570ca2dd4f2096f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int log_backend_format_set</definition>
        <argsstring>(const struct log_backend *backend, uint32_t log_type)</argsstring>
        <name>log_backend_format_set</name>
        <param>
          <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *</type>
          <declname>backend</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>log_type</declname>
        </param>
        <briefdescription>
<para>Set logging format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Log format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the backend does not support changing format types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If the input is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>for success. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="320" column="19" bodyfile="include/logging/log_backend.h" bodystart="320" bodyend="341"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__log__backend_1ga3a4cc530530d1a8b33dc787842bba119" prot="public" static="no">
        <name>LOG_BACKEND_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_api</defname></param>
        <param><defname>_autostart</defname></param>
        <param><defname>...</defname></param>
        <initializer>	static struct <ref refid="structlog__backend__control__block" kindref="compound">log_backend_control_block</ref> <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(backend_cb_, _name) = \
	{								       \
		<ref refid="group__sys-util_1ga5483ea38af79bc6c4509936288705377" kindref="member">COND_CODE_0</ref>(<ref refid="group__sys-util_1ga8a0e9835e0a8f864ffc2359b9c419cc2" kindref="member">NUM_VA_ARGS_LESS_1</ref>(_, ##__VA_ARGS__),	       \
				(), (.ctx = __VA_ARGS__,))		       \
		.id = 0,						       \
		.active = <ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>,					       \
	};								       \
	static const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structlog__backend" kindref="compound">log_backend</ref>, _name) =	       \
	{								       \
		.api = &amp;_api,						       \
		.cb = &amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(backend_cb_, _name),			       \
		.name = <ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(_name),				       \
		.autostart = _autostart					       \
	}</initializer>
        <briefdescription>
<para>Macro for creating a logger backend instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_api</parametername>
</parameternamelist>
<parameterdescription>
<para>Logger backend API. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_autostart</parametername>
</parameternamelist>
<parameterdescription>
<para>If true backend is initialized and activated together with the logger subsystem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_backend.h" line="87" column="9" bodyfile="include/logging/log_backend.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logger backend interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
