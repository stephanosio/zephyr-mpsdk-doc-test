<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ztest__test" kind="group">
    <compoundname>ztest_test</compoundname>
    <title>Ztest testing macros</title>
    <innerclass refid="structztest__test__rule" prot="public">ztest_test_rule</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ztest__test_1ga2090c493018a95112b89c5f83b5d8162" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ztest_rule_cb) (const struct ztest_unit_test *test, void *data)</definition>
        <argsstring>)(const struct ztest_unit_test *test, void *data)</argsstring>
        <name>ztest_rule_cb</name>
        <briefdescription>
<para>Test rule callback function signature. </para>
        </briefdescription>
        <detaileddescription>
<para>The function signature that can be used to register a test rule&apos;s before/after callback. This provides access to the test and the fixture data (if provided).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the unit test in context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the test&apos;s fixture data (may be NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="266" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref></type>
        <definition>struct k_mem_partition ztest_mem_partition</definition>
        <argsstring></argsstring>
        <name>ztest_mem_partition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="317" column="29" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="317" declcolumn="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ztest__test_1gacd6eb423f54dce8544f7c3b1618c0374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_test_fail</definition>
        <argsstring>(void)</argsstring>
        <name>ztest_test_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Fail the currently running test. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the function called from failed assertions and the like. You probably don&apos;t need to call it yourself. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="163" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1ga085d30a04102ebb8c3f2206020723ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_test_pass</definition>
        <argsstring>(void)</argsstring>
        <name>ztest_test_pass</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Pass the currently running test. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally a test passes just by returning without an assertion failure. However, if the success case for your test involves a fatal fault, you can call this function from k_sys_fatal_error_handler to indicate that the test passed before aborting the thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="173" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="173" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gada3b1fcfa71db1bf7787c03ff45256d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_test_skip</definition>
        <argsstring>(void)</argsstring>
        <name>ztest_test_skip</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Skip the current test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="179" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gaeb99bd1d29675ca8c31b519853cec422" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void unit_test_noop</definition>
        <argsstring>(void)</argsstring>
        <name>unit_test_noop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Do nothing, successfully. </para>
        </briefdescription>
        <detaileddescription>
<para>Unit test / setup function / teardown function that does nothing, successfully. Can be used as a parameter to <ref refid="group__ztest__test__deprecated_1gafb04820b89dbc76bf28cb5e1c98764f8" kindref="member">ztest_unit_test_setup_teardown()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="188" column="20" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gac7ddc33b5a0d11e2ffa0a564019c5e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_simple_1cpu_before</definition>
        <argsstring>(void *data)</argsstring>
        <name>ztest_simple_1cpu_before</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>A &apos;before&apos; function to use in test suites that just need to start 1cpu. </para>
        </briefdescription>
        <detaileddescription>
<para>Ignores data, and calls z_test_1cpu_start()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The test suite&apos;s data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="301" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="301" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gaa53486873430dd8fa978745d8a1d0686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_simple_1cpu_after</definition>
        <argsstring>(void *data)</argsstring>
        <name>ztest_simple_1cpu_after</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>A &apos;after&apos; function to use in test suites that just need to stop 1cpu. </para>
        </briefdescription>
        <detaileddescription>
<para>Ignores data, and calls z_test_1cpu_stop()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The test suite&apos;s data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="310" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="310" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ztest__test_1gac25858f76ea667d07de422a3b489cb15" prot="public" static="no">
        <name>ZTEST</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST(suite, fn, 0)</initializer>
        <briefdescription>
<para>Create and register a new unit test. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this macro will create a new unit test and attach it to the declared <computeroutput>suite</computeroutput>. The <computeroutput>suite</computeroutput> does not need to be defined in the same compilational unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="222" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga7121acc7ee00646cacefa773ff9631c8" prot="public" static="no">
        <name>ZTEST_USER</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST(suite, fn, <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(CONFIG_USERSPACE, (<ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>), (0)))</initializer>
        <briefdescription>
<para>Define a test function that should run as a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro behaves exactly the same as ZTEST, but calls the test function in user space if <computeroutput>CONFIG_USERSPACE</computeroutput> was enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="233" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1gacd3ab522e0e5c8a270e86b0cb6bd81b2" prot="public" static="no">
        <name>ZTEST_F</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST_F(suite, fn, 0)</initializer>
        <briefdescription>
<para>Define a test function. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro behaves exactly the same as <ref refid="group__ztest__test_1gac25858f76ea667d07de422a3b489cb15" kindref="member">ZTEST()</ref>, but the function takes an argument for the fixture of type <computeroutput>struct suite##_fixture*</computeroutput> named <computeroutput>this</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="244" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga12ccce144e577cac6ba763982ad14def" prot="public" static="no">
        <name>ZTEST_USER_F</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST_F(suite, fn, <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(CONFIG_USERSPACE, (<ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>), (0)))</initializer>
        <briefdescription>
<para>Define a test function that should run as a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para>If CONFIG_USERSPACE is not enabled, this is functionally identical to <ref refid="group__ztest__test_1gacd3ab522e0e5c8a270e86b0cb6bd81b2" kindref="member">ZTEST_F()</ref>. The test function takes a single fixture argument of type <computeroutput>struct suite##_fixture*</computeroutput> named <computeroutput>this</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="255" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga2a0a5e3b6e8fa1c9a03e7600895d875f" prot="public" static="no">
        <name>ZTEST_RULE</name>
        <param><defname>name</defname></param>
        <param><defname>before_each_fn</defname></param>
        <param><defname>after_each_fn</defname></param>
        <initializer>	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structztest__test__rule" kindref="compound">ztest_test_rule</ref>, z_ztest_test_rule_##name) = {              \
		.before_each = (before_each_fn),                                                   \
		.after_each = (after_each_fn),                                                     \
	}</initializer>
        <briefdescription>
<para>Define a test rule that will run before/after each unit test. </para>
        </briefdescription>
        <detaileddescription>
<para>Functions defined here will run before/after each unit test for every test suite. Along with the callback, the test functions are provided a pointer to the test being run, and the data. This provides a mechanism for tests to perform custom operations depending on the specific test or the data (for example logging may use the test&apos;s name).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name for the test rule (must be unique within the compilational unit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_each_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call before each test (may be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after_each_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call after each test (may be NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="285" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" prot="public" static="no">
        <name>ZTEST_DMEM</name>
        <initializer><ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM</ref>(<ref refid="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="314" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" prot="public" static="no">
        <name>ZTEST_BMEM</name>
        <initializer><ref refid="threads_2tls_2src_2main_8c_1a7a1968d4832a53406449a3ace7019fa2" kindref="member">K_APP_BMEM</ref>(<ref refid="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="315" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga44777f5011728bbff63fe3639c1b4aa8" prot="public" static="no">
        <name>ZTEST_SECTION</name>
        <initializer><ref refid="app__memdomain_8h_1a81962bb530118ffa13fccdf99f973787" kindref="member">K_APP_DMEM_SECTION</ref>(<ref refid="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="316" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga7f76df4df4bf68a605b923fed8e5465c" prot="public" static="no">
        <name>ztest_run_test_suite</name>
        <param><defname>suite</defname></param>
        <initializer>z_ztest_run_test_suite(<ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(suite))</initializer>
        <briefdescription>
<para>Run the specified test suite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>Test suite to run. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="329" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module eases the testing process by providing helpful macros and other testing structures. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
