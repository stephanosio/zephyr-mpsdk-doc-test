<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mem__slab__apis" kind="group">
    <compoundname>mem_slab_apis</compoundname>
    <title>Memory Slab APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mem__slab__apis_1ga094a8f173f287e29bb287119c26889d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_slab_init</definition>
        <argsstring>(struct k_mem_slab *slab, void *buffer, size_t block_size, uint32_t num_blocks)</argsstring>
        <name>k_mem_slab_init</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>block_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_blocks</declname>
        </param>
        <briefdescription>
<para>Initialize a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes a memory slab, prior to its first use.</para>
<para>The memory slab&apos;s buffer contains <emphasis>slab_num_blocks</emphasis> memory blocks that are <emphasis>slab_block_size</emphasis> bytes long. The buffer must be aligned to an N-byte boundary matching a word boundary, where N is a power of 2 (i.e. 4 on 32-bit systems, 8, 16, ...). To ensure that each memory block is similarly aligned to this boundary, <emphasis>slab_block_size</emphasis> must also be a multiple of N.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer used for the memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of memory blocks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid data supplied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4976" column="12" declfile="include/kernel.h" declline="4976" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_slab_alloc</definition>
        <argsstring>(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)</argsstring>
        <name>k_mem_slab_alloc</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate memory from a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allocates a memory block from a memory slab.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR. </para>
</simplesect>
<simplesect kind="note"><para>When CONFIG_MULTITHREADING=n any <emphasis>timeout</emphasis> is treated as K_NO_WAIT.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to block address area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to wait for operation to complete. Use K_NO_WAIT to return without waiting, or K_FOREVER to wait as long as necessary.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory allocated. The block address area pointed at by <emphasis>mem</emphasis> is set to the starting address of the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid data supplied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5001" column="12" declfile="include/kernel.h" declline="5001" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1ga97915aee5a59e19f8b28185eed93aac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_slab_free</definition>
        <argsstring>(struct k_mem_slab *slab, void **mem)</argsstring>
        <name>k_mem_slab_free</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Free memory allocated from a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine releases a previously allocated memory block back to its associated memory slab.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to block address area (as set by <ref refid="group__mem__slab__apis_1gab16a46d8394aca18de740ad044a8734a" kindref="member">k_mem_slab_alloc()</ref>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5013" column="13" declfile="include/kernel.h" declline="5013" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gac76b96d7055e4ad94765c93530dd0720" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_mem_slab_num_used_get</definition>
        <argsstring>(struct k_mem_slab *slab)</argsstring>
        <name>k_mem_slab_num_used_get</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <briefdescription>
<para>Get the number of used blocks in a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gets the number of memory blocks that are currently allocated in <emphasis>slab</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of allocated memory blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5025" column="24" bodyfile="include/kernel.h" bodystart="5025" bodyend="5028"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gae0e949c1c3476dd57bc0c0ed627d2346" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_mem_slab_max_used_get</definition>
        <argsstring>(struct k_mem_slab *slab)</argsstring>
        <name>k_mem_slab_max_used_get</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <briefdescription>
<para>Get the number of maximum used blocks so far in a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gets the maximum number of memory blocks that were allocated in <emphasis>slab</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum number of allocated memory blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5040" column="24" bodyfile="include/kernel.h" bodystart="5040" bodyend="5048"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__slab__apis_1gae87577e2873cf746db69216a82f94aea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t k_mem_slab_num_free_get</definition>
        <argsstring>(struct k_mem_slab *slab)</argsstring>
        <name>k_mem_slab_num_free_get</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <briefdescription>
<para>Get the number of unused blocks in a memory slab. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine gets the number of memory blocks that are currently unallocated in <emphasis>slab</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the memory slab.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unallocated memory blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5060" column="24" bodyfile="include/kernel.h" bodystart="5060" bodyend="5063"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__mem__slab__apis_1ga60bc92eee58fcc5f121b8e4d82eaa69e" prot="public" static="no">
        <name>K_MEM_SLAB_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>slab_block_size</defname></param>
        <param><defname>slab_num_blocks</defname></param>
        <param><defname>slab_align</defname></param>
        <initializer>	char __noinit_named(k_mem_slab_buf_##name) \
	   __aligned(<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_align)) \
	   _k_mem_slab_buf_##name[(slab_num_blocks) * <ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size)]; \
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_mem_slab, name) = \
		Z_MEM_SLAB_INITIALIZER(name, _k_mem_slab_buf_##name, \
					<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size), slab_num_blocks)</initializer>
        <briefdescription>
<para>Statically define and initialize a memory slab in a public (non-static) scope. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory slab&apos;s buffer contains <emphasis>slab_num_blocks</emphasis> memory blocks that are <emphasis>slab_block_size</emphasis> bytes long. The buffer is aligned to a <emphasis>slab_align</emphasis> -byte boundary. To ensure that each memory block is similarly aligned to this boundary, <emphasis>slab_block_size</emphasis> must also be a multiple of <emphasis>slab_align</emphasis>.</para>
<para>The memory slab can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_mem_slab<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>This macro cannot be used together with a static keyword. If such a use-case is desired, use <ref refid="group__mem__slab__apis_1ga90bdbb15f410991f54ba16025c24bc3c" kindref="member">K_MEM_SLAB_DEFINE_STATIC</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory slab&apos;s buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4925" column="9" bodyfile="include/kernel.h" bodystart="4925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mem__slab__apis_1ga90bdbb15f410991f54ba16025c24bc3c" prot="public" static="no">
        <name>K_MEM_SLAB_DEFINE_STATIC</name>
        <param><defname>name</defname></param>
        <param><defname>slab_block_size</defname></param>
        <param><defname>slab_num_blocks</defname></param>
        <param><defname>slab_align</defname></param>
        <initializer>	static char __noinit_named(k_mem_slab_buf_##name) \
	   __aligned(<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_align)) \
	   _k_mem_slab_buf_##name[(slab_num_blocks) * <ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size)]; \
	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_mem_slab, name) = \
		Z_MEM_SLAB_INITIALIZER(name, _k_mem_slab_buf_##name, \
					<ref refid="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" kindref="member">WB_UP</ref>(slab_block_size), slab_num_blocks)</initializer>
        <briefdescription>
<para>Statically define and initialize a memory slab in a private (static) scope. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory slab&apos;s buffer contains <emphasis>slab_num_blocks</emphasis> memory blocks that are <emphasis>slab_block_size</emphasis> bytes long. The buffer is aligned to a <emphasis>slab_align</emphasis> -byte boundary. To ensure that each memory block is similarly aligned to this boundary, <emphasis>slab_block_size</emphasis> must also be a multiple of <emphasis>slab_align</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the memory slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each memory block (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the memory slab&apos;s buffer (power of 2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4947" column="9" bodyfile="include/kernel.h" bodystart="4947" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
