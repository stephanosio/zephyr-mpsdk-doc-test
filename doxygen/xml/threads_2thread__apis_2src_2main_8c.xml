<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="threads_2thread__apis_2src_2main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="kernel__structs_8h" local="no">kernel_structs.h</includes>
    <includes local="no">kernel.h</includes>
    <includes local="no">kernel_internal.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">ksched.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/threads/thread_apis/src/main.c</label>
        <link refid="threads_2thread__apis_2src_2main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="91">
        <label>kernel_internal.h</label>
      </node>
      <node id="92">
        <label>ksched.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="51" column="9" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="threads_2thread__apis_2src_2main_8c_1ae1b7531986b47f2ed01779960628fadd" prot="public" static="no">
        <name>JOIN_TIMEOUT_MS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="345" column="9" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="threads_2thread__apis_2src_2main_8c_1ad436c5b9f3116862266ea51124e67442" prot="public" static="no">
        <name>WAIT_TO_START_MS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="490" column="9" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="threads_2thread__apis_2src_2main_8c_1a490b45bba42ffbe6f0904b2148b206e5" prot="public" static="no">
        <name>INT_ARRAY_SIZE</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="620" column="9" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="620" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" prot="public" static="no" strong="no">
        <type></type>
        <name>control_method</name>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aad9dee005a3d0f9137b2ac1e0869f89b" prot="public">
          <name>TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ae9600ce48a3c5a29d60e043169f01175" prot="public">
          <name>NO_WAIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7119fb841b81930e34a1771a35a9094e" prot="public">
          <name>SELF_ABORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7d4e149911e1abba8824f8d1019b8d19" prot="public">
          <name>OTHER_ABORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aafe97f0e67852bcda19f43e513132d67" prot="public">
          <name>OTHER_ABORT_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a96fc72016b996a9f1d707f651c3acfbc" prot="public">
          <name>ALREADY_EXIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a82810799f551714932ef4cb831d1c6fd" prot="public">
          <name>ISR_ALREADY_EXIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ac4671a8ffc3279252a268e325ed4b63e" prot="public">
          <name>ISR_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="297" column="1" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="297" bodyend="306"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1aa15baae19d44279cac3d8bf47c9e707f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tdata</definition>
        <argsstring></argsstring>
        <name>tdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="50" column="15" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a2aabb108009ab5918de7644d10d08c17" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t tstack_size</definition>
        <argsstring></argsstring>
        <name>tstack_size</name>
        <initializer>= <ref refid="group__thread__stack__api_1ga775f8e6b4144cfdd24f3261b6db64150" kindref="member">K_THREAD_STACK_SIZEOF</ref>(<ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="53" column="8" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a679f8856482667a61738927ac92a1cfe" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tdata_custom</definition>
        <argsstring></argsstring>
        <name>tdata_custom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="58" column="22" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1ad412a4594fd0dcd728ab03ca7bcaf4bb" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread tdata_name</definition>
        <argsstring></argsstring>
        <name>tdata_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="59" column="22" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a8036fda49ff49fa97681aa7ca0d0f2a3" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int main_prio</definition>
        <argsstring></argsstring>
        <name>main_prio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="61" column="12" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a038cad04dcffd46c89a9ab7de29dee6d" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref> int</type>
        <definition>ZTEST_DMEM int tp</definition>
        <argsstring></argsstring>
        <name>tp</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="62" column="23" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a9e8a546ff352ad471c4e5263b86abb58" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char unreadable_string[64]</definition>
        <argsstring>[64]</argsstring>
        <name>unreadable_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="159" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a9d0e0c87a531d866b568cbb42123dd85" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char not_my_buffer[CONFIG_THREAD_MAX_NAME_LEN]</definition>
        <argsstring>[CONFIG_THREAD_MAX_NAME_LEN]</argsstring>
        <name>not_my_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="160" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a989f6708d698cae205e01a2f6738767f" prot="public" static="no" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem sem</definition>
        <argsstring></argsstring>
        <name>sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="161" column="12" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread join_thread</definition>
        <argsstring></argsstring>
        <name>join_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="291" column="15" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a86251b5c5548fb2a1407cd0fe9743a39" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread control_thread</definition>
        <argsstring></argsstring>
        <name>control_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="294" column="15" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1ab5465f45a91de787e2d99cadd160568f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread deadlock1_thread</definition>
        <argsstring></argsstring>
        <name>deadlock1_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="445" column="15" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="threads_2thread__apis_2src_2main_8c_1a4d195cd3ad60440761a4bf91c1972f8d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread deadlock2_thread</definition>
        <argsstring></argsstring>
        <name>deadlock2_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="448" column="15" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="448" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__thread__tests_1ga343cc5510709b0043c32e026ea423c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_spawn_params</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_spawn_params</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the parameters passed to thread entry function. </para>
        </briefdescription>
        <detaileddescription>
<para>Create an user thread and pass 2 variables and a semaphore to a thread entry function. Check for the correctness of the parameters passed.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="23" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_spawn.c" bodystart="48" bodyend="54" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gaa46408c70fe87c930cdd897d5ee9a8ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_spawn_priority</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_spawn_priority</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Spawn thread with higher priority. </para>
        </briefdescription>
        <detaileddescription>
<para>Create an user thread with priority greater than current thread and check its behavior.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="24" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_spawn.c" bodystart="65" bodyend="72" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="24" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga7eb8d5eb8f05037424a4be7209bc7ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_spawn_delay</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_spawn_delay</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Spawn thread with a delay. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a user thread with delay and check if the thread entry function is executed only after the timeout occurs.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="25" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_spawn.c" bodystart="83" bodyend="96" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gad774bf9c86adc632d19c951abc4a6b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_spawn_forever</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_spawn_forever</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Spawn thread with forever delay and highest priority. </para>
        </briefdescription>
        <detaileddescription>
<para>Create an user thread with forever delay and yield the current thread. Even though the current thread has yielded, the thread will not be put in ready queue since it has forever delay, the thread is explicitly started using <ref refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" kindref="member">k_thread_start()</ref> and checked if thread has started executing.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="26" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_spawn.c" bodystart="110" bodyend="128" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga9456b9b5e98b9b03b4f95099c8938e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_start</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate behavior of multiple calls to <ref refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" kindref="member">k_thread_start()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" kindref="member">k_thread_start()</ref> on an already terminated thread</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" kindref="member">k_thread_start()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="27" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_spawn.c" bodystart="138" bodyend="159" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1ab4359944708c4a89266f1bd69f0e76a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_start_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_start_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="28" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_spawn.c" bodystart="165" bodyend="178" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga8566965d5c6b32bc8f4c10bfa85dd9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_suspend_resume_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_suspend_resume_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the suspend and resume functionality in a cooperative thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread with the priority lower than the current thread which is cooperative and suspend it, make sure it doesn&apos;t gets scheduled, and resume and check if the entry function is executed.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref>, <ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="29" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c" bodystart="54" bodyend="57" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gae417ad0a2b4d1c4c70f3d94206a74def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_suspend_resume_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_suspend_resume_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the suspend and resume functionality in preemptive thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread with the priority lower than the current thread which is preemptive and suspend it, make sure it doesn&apos;t gets scheduled, and resume and check if the entry function is executed.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref>, <ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="30" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c" bodystart="70" bodyend="73" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="30" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gab554bac6421498511eed4354fb144e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_abort_self</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_abort_self</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate <ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> when called by current thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a user thread and let the thread execute. Then call <ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> and check if the thread is terminated. Here the main thread is also a user thread.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: spawned thread executed but abort itself</para>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="31" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c" bodystart="42" bodyend="50" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga77747ae463b19fdc129b2e011f5061f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_abort_others</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_abort_others</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate <ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> when called by other thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a user thread and abort the thread before its execution. Create a another user thread and abort the thread after it has started.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: check not-started thread is aborted</para>
<para>TESTPOINT: check running thread is aborted</para>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="32" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c" bodystart="62" bodyend="83" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gaf2d3f2ac9d1fbb0e3acad6a97fa808bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_abort_repeat</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_abort_repeat</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test abort on a terminated thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="33" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c" bodystart="91" bodyend="105" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="33" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga80b6f4d5311d01a2ed328c12576d15ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_essential_thread_operation</definition>
        <argsstring>(void)</argsstring>
        <name>test_essential_thread_operation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to validate essential flag set/clear. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gad503fbcca905a9266b0e154e3ded258c" kindref="member">K_ESSENTIAL(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="34" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_essential_thread.c" bodystart="41" bodyend="50" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga799a7a8d7e7936b932bace256425d361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_priority_set</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_priority_set</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test the <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref>, <ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="35" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_set_priority.c" bodystart="45" bodyend="102" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="35" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gacbf2a9fe917ec063b9be6767a666daa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_delayed_thread_abort</definition>
        <argsstring>(void)</argsstring>
        <name>test_delayed_thread_abort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test abort on delayed thread before it has started execution. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="36" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c" bodystart="124" bodyend="154" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="36" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga577ab12bd0b4769e5399bb3d699fc8bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_foreach</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_foreach</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test k_thread_foreach API. </para>
        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach()</ref> at the beginning of the test and call it again after creating a thread, See <ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach()</ref> iterates over the newly created thread and calls the user passed callback function.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="37" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_kthread_for_each.c" bodystart="85" bodyend="116" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gabdcfc826ee116f4e4286617dcdb9eee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_foreach_unlocked</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_foreach_unlocked</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test k_thread_foreach_unlock API. </para>
        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" kindref="member">k_thread_foreach_unlocked()</ref> at the beginning of the test and call it again after creating a thread, See <ref refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" kindref="member">k_thread_foreach_unlocked()</ref> iterates over the newly created thread and calls the user passed callback function. In contrast to <ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach()</ref>, <ref refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" kindref="member">k_thread_foreach_unlocked()</ref> allow callback function created or abort threads</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" kindref="member">k_thread_foreach_unlocked()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="38" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_kthread_for_each.c" bodystart="131" bodyend="178" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gab8855ec6f9d9b1991c4678482c3702b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_foreach_null_cb</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_foreach_null_cb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test k_thread_foreach API with null callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach()</ref> with null callback will triger __ASSERT() and this test thread will be aborted by z_fatal_error() <simplesect kind="see"><para><ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="39" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_kthread_for_each.c" bodystart="189" bodyend="192" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="39" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga10341044263044cba59eaea1c67c426b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_foreach_unlocked_null_cb</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_foreach_unlocked_null_cb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test k_thread_foreach_unlocked API with null callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" kindref="member">k_thread_foreach_unlocked()</ref> with null callback will triger __ASSERT() and this test thread will be aborted by z_fatal_error()</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga30ef8b445a6c1b4a82651674dbb737fc" kindref="member">k_thread_foreach_unlocked()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="40" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_kthread_for_each.c" bodystart="204" bodyend="207" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga3dc2a496f5c9f93e437f865b99b84114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_state_str</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_state_str</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test k_thread_state_str API with null callback. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s impossible to sched a thread step by step manually to experence each state from _THREAD_PRESTART to _THREAD_DEAD. To cover each line of function <ref refid="group__thread__apis_1gae36c37d54522fbf8d9a34b93991e51ca" kindref="member">k_thread_state_str()</ref>, set thread_state of tdata1 and check the string this function returns</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gae36c37d54522fbf8d9a34b93991e51ca" kindref="member">k_thread_state_str()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="41" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_kthread_for_each.c" bodystart="220" bodyend="250" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="41" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1aaf6483e123e58b2186cdea5db1c726a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_cpu_mask</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_cpu_mask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="42" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_cpu_mask.c" bodystart="25" bodyend="98" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="42" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gab20cb01e1b51390471dda076ee9227ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_suspend_timeout</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_suspend_timeout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check that <ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> cancels a preexisting thread timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>Suspended threads should not wake up unexpectedly if they happened to have been sleeping when suspended. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="43" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c" bodystart="129" bodyend="148" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="43" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga2cb97f38f00cf31817bfe504f2bb89b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_resume_unsuspend_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_resume_unsuspend_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check resume an unsuspend thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="group__thread__apis_1gae36c37d54522fbf8d9a34b93991e51ca" kindref="member">k_thread_state_str()</ref> to get thread state. Resume an unsuspend thread will not change the thread state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="44" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c" bodystart="157" bodyend="175" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga22c351635c29e98e4b17ae88e7309974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_suspend</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_suspend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check that <ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> is a schedule point when called on the current thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="45" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c" bodystart="92" bodyend="107" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="45" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga2006250ab6237a25a3e47014a5baaf89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_abort_from_isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_abort_from_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that threads can be aborted from interrupt context by itself. </para>
        </briefdescription>
        <detaileddescription>
<para>Spwan a thread, then enter ISR context in child thread and abort the child thread. Check if ISR completed and target thread was aborted.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="46" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c" bodystart="189" bodyend="204" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gae36781d5ef6ff99a27935d1ff3b6490d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_abort_from_isr_not_self</definition>
        <argsstring>(void)</argsstring>
        <name>test_abort_from_isr_not_self</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that threads can be aborted from interrupt context. </para>
        </briefdescription>
        <detaileddescription>
<para>Spwan a thread, then enter ISR context in main thread and abort the child thread. Check if ISR completed and target thread was aborted.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="47" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c" bodystart="230" bodyend="248" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga55716449c1fa7ab547b33d19346e89bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_essential_thread_abort</definition>
        <argsstring>(void)</argsstring>
        <name>test_essential_thread_abort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Abort an essential thread. </para>
        </briefdescription>
        <detaileddescription>
<para>The kernel shall raise a fatal system error if an essential thread aborts, implement k_sys_fatal_error_handler to handle this error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gad503fbcca905a9266b0e154e3ded258c" kindref="member">K_ESSENTIAL(x)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="48" column="13" bodyfile="tests/kernel/threads/thread_apis/src/test_essential_thread.c" bodystart="86" bodyend="96" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a3e6b65a6d59086025e05164fc2c45504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(tstack,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref></type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="52" column="1" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1aa453d86ba2fec0cda98f7494d0aefd5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static K_THREAD_STACK_DEFINE</definition>
        <argsstring>(tstack_custom,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>tstack_custom</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="56" column="8" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="56" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a3c5ff2243cc84a4c37955c7945423b16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static K_THREAD_STACK_DEFINE</definition>
        <argsstring>(tstack_name,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>tstack_name</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="57" column="8" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="57" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1gabe47de065adaebbe9400359493c3b3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_systhreads_main</definition>
        <argsstring>(void)</argsstring>
        <name>test_systhreads_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify main thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="68" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga2531099398db9aa32f4a54156927d70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_systhreads_idle</definition>
        <argsstring>(void)</argsstring>
        <name>test_systhreads_idle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify idle thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: check working thread priority should</para>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="77" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="77" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1acf96ff2ba2a2c7c381f335b609360d47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void customdata_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>customdata_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: custom data comparison</para>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="85" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="85" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga79538830a3db1f56ccfcb27a8599c57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_customdata_get_set_coop</definition>
        <argsstring>(void)</argsstring>
        <name>test_customdata_get_set_coop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>test thread custom data get/set from coop thread </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga19af063cff7b306ba28062996922740d" kindref="member">k_thread_custom_data_get()</ref>, <ref refid="group__thread__apis_1ga4834d9b81ed60c00eee77b0d4f8ab9e4" kindref="member">k_thread_custom_data_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="106" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="106" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a37f21f404b120340ad0f994b72bb967f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread_name_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>thread_name_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="118" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga158919fa3d2d7071a815c9d41bc94a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_name_get_set</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_name_get_set</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>test thread name get/set from supervisor thread </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gadebf45da56dee393164569742459dc0a" kindref="member">k_thread_name_get()</ref>, <ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy()</ref>, <ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="128" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="128" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga2cdda772bf35ca82a1f25a81c1400719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_name_user_get_set</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_name_user_get_set</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>test thread name get/set from user thread </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy()</ref>, <ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="169" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="169" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga42cc694be4d6c3388c6f8aef09cc923d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_customdata_get_set_preempt</definition>
        <argsstring>(void)</argsstring>
        <name>test_customdata_get_set_preempt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>test thread custom data get/set from preempt thread </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga19af063cff7b306ba28062996922740d" kindref="member">k_thread_custom_data_get()</ref>, <ref refid="group__thread__apis_1ga4834d9b81ed60c00eee77b0d4f8ab9e4" kindref="member">k_thread_custom_data_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: custom data of preempt thread</para>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="238" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="238" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a3eb27274d3e441470c8b48b64b14323e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void umode_entry</definition>
        <argsstring>(void *thread_id, void *p2, void *p3)</argsstring>
        <name>umode_entry</name>
        <param>
          <type>void *</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="251" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="251" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__thread__tests_1ga42561f974da6f8588a5f8a4294ab28a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void enter_user_mode_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>enter_user_mode_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter()</ref> to cover when userspace is not supported/enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="271" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="271" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1af4cee0c1dbfb5af0646dcfe93e507181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_user_mode</definition>
        <argsstring>(void)</argsstring>
        <name>test_user_mode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="282" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="282" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1ae9ba1a55596ec6ebca05c037f9b75e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(join_stack,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>join_stack</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="292" column="1" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1abc954fc07e0365d5d0360f66710a6db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(control_stack,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>control_stack</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="295" column="1" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="295" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a92af6316c9f041c095becad0eedbd455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void join_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>join_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="308" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="308" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a2d4664a82642f48c832f0c3e88b4d54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void control_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>control_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="329" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="329" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a529265f23ef5146b3851929b977c4d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void do_join_from_isr</definition>
        <argsstring>(const void *arg)</argsstring>
        <name>do_join_from_isr</name>
        <param>
          <type>const void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="335" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="335" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a39a0f10e41629439399134b20427ff6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int join_scenario_interval</definition>
        <argsstring>(enum control_method m, int64_t *interval)</argsstring>
        <name>join_scenario_interval</name>
        <param>
          <type>enum <ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" kindref="member">control_method</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref> *</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="347" column="5" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="347" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int join_scenario</definition>
        <argsstring>(enum control_method m)</argsstring>
        <name>join_scenario</name>
        <param>
          <type>enum <ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" kindref="member">control_method</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="411" column="19" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a0fd188223606973be92c19a6b5504a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_join</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_join</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="416" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="416" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a13d2d7c4476d73faef93acd8395f12da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_join_isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_join_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="439" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="439" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a0f9557cd0b39f0f2e580c4bff657ed75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(deadlock1_stack,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>deadlock1_stack</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="446" column="1" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="446" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a5d50cba2ca6b0cf1dee95280ab91a711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_DEFINE</definition>
        <argsstring>(deadlock2_stack,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>deadlock2_stack</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="449" column="1" declfile="tests/kernel/threads/thread_apis/src/main.c" declline="449" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1ad71fdcafef9d4b234f41f9aea9b45700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deadlock1_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>deadlock1_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="451" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="451" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a530c32306865aa0ee85cc65491fda167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deadlock2_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>deadlock2_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="461" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="461" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1ada5f3fc129a03fc4cb491e2d0b85622d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_join_deadlock</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_join_deadlock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="471" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="471" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1af82ba2d7a980c8c1c7a36090d2cbc3c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void user_start_thread</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>user_start_thread</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="496" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a5d891f76af33082d22cc12e19415522b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_timeout_remaining_expires</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_timeout_remaining_expires</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="500" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="500" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1ac8f8c9f5aab650e43509a8b816cd6211" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void foreach_callback</definition>
        <argsstring>(const struct k_thread *thread, void *user_data)</argsstring>
        <name>foreach_callback</name>
        <param>
          <type>const struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="530" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="530" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a29a5f129dabab808390b4bf5b86884c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_runtime_stats_get</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_runtime_stats_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="554" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="554" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a6ec12c0c67a6d150a73f3a9c92331b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_busy_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_busy_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="570" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="570" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1ae3fed81d0dd0e9b889da712cd8653911" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tp_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>tp_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="597" column="13" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a2e60be1ed3eef579c6cadc4de44201bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_busy_wait_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_busy_wait_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="602" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="602" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a6e88ce0abc80de3496a26ad83ecef1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int large_stack</definition>
        <argsstring>(size_t *space)</argsstring>
        <name>large_stack</name>
        <param>
          <type>size_t *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="621" column="5" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="621" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a514cc45a6e8a6fbfaa7410588921c7a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int small_stack</definition>
        <argsstring>(size_t *space)</argsstring>
        <name>small_stack</name>
        <param>
          <type>size_t *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="632" column="5" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a332b51e49b7a7c8a1c91a371c0432795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_stack_space_get_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_stack_space_get_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="641" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="641" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="threads_2thread__apis_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_main</definition>
        <argsstring>(void)</argsstring>
        <name>test_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test case main entry </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/threads/thread_apis/src/main.c" line="655" column="6" bodyfile="tests/kernel/threads/thread_apis/src/main.c" bodystart="655" bodyend="715"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="kernel__structs_8h" kindref="compound">kernel_structs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel_internal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ksched.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga343cc5510709b0043c32e026ea423c8d" kindref="member">test_threads_spawn_params</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gaa46408c70fe87c930cdd897d5ee9a8ed" kindref="member">test_threads_spawn_priority</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga7eb8d5eb8f05037424a4be7209bc7ee1" kindref="member">test_threads_spawn_delay</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gad774bf9c86adc632d19c951abc4a6b3a" kindref="member">test_threads_spawn_forever</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga9456b9b5e98b9b03b4f95099c8938e83" kindref="member">test_thread_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ab4359944708c4a89266f1bd69f0e76a0" kindref="member">test_thread_start_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga8566965d5c6b32bc8f4c10bfa85dd9a0" kindref="member">test_threads_suspend_resume_cooperative</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gae417ad0a2b4d1c4c70f3d94206a74def" kindref="member">test_threads_suspend_resume_preemptible</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gab554bac6421498511eed4354fb144e6d" kindref="member">test_threads_abort_self</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga77747ae463b19fdc129b2e011f5061f0" kindref="member">test_threads_abort_others</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gaf2d3f2ac9d1fbb0e3acad6a97fa808bf" kindref="member">test_threads_abort_repeat</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga80b6f4d5311d01a2ed328c12576d15ba" kindref="member">test_essential_thread_operation</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga799a7a8d7e7936b932bace256425d361" kindref="member">test_threads_priority_set</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gacbf2a9fe917ec063b9be6767a666daa9" kindref="member">test_delayed_thread_abort</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga577ab12bd0b4769e5399bb3d699fc8bc" kindref="member">test_k_thread_foreach</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gabdcfc826ee116f4e4286617dcdb9eee5" kindref="member">test_k_thread_foreach_unlocked</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gab8855ec6f9d9b1991c4678482c3702b8" kindref="member">test_k_thread_foreach_null_cb</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga10341044263044cba59eaea1c67c426b" kindref="member">test_k_thread_foreach_unlocked_null_cb</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga3dc2a496f5c9f93e437f865b99b84114" kindref="member">test_k_thread_state_str</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1aaf6483e123e58b2186cdea5db1c726a9" kindref="member">test_threads_cpu_mask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gab20cb01e1b51390471dda076ee9227ac" kindref="member">test_threads_suspend_timeout</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga2cb97f38f00cf31817bfe504f2bb89b9" kindref="member">test_resume_unsuspend_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga22c351635c29e98e4b17ae88e7309974" kindref="member">test_threads_suspend</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga2006250ab6237a25a3e47014a5baaf89" kindref="member">test_abort_from_isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gae36781d5ef6ff99a27935d1ff3b6490d" kindref="member">test_abort_from_isr_not_self</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga55716449c1fa7ab547b33d19346e89bb" kindref="member">test_essential_thread_abort</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="msgq_2msgq__api_2src_2main_8c_1aa15baae19d44279cac3d8bf47c9e707f" kindref="member">tdata</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(<ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a2aabb108009ab5918de7644d10d08c17" kindref="member">tstack_size</ref><sp/>=<sp/><ref refid="group__thread__stack__api_1ga775f8e6b4144cfdd24f3261b6db64150" kindref="member">K_THREAD_STACK_SIZEOF</ref>(<ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*local<sp/>variables*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(tstack_custom,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(tstack_name,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a679f8856482667a61738927ac92a1cfe" kindref="member">tdata_custom</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ad412a4594fd0dcd728ab03ca7bcaf4bb" kindref="member">tdata_name</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a8036fda49ff49fa97681aa7ca0d0f2a3" kindref="member">main_prio</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1ga2c7d0aa85e7f320d582395c5ded90133" kindref="member">ZTEST_DMEM</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a038cad04dcffd46c89a9ab7de29dee6d" kindref="member">tp</ref><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1gabe47de065adaebbe9400359493c3b3a0" kindref="member">test_systhreads_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a8036fda49ff49fa97681aa7ca0d0f2a3" kindref="member">main_prio</ref><sp/>==<sp/>CONFIG_MAIN_THREAD_PRIORITY,<sp/>NULL);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga2531099398db9aa32f4a54156927d70a" kindref="member">test_systhreads_idle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(100);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>())<sp/>&lt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1a8f3f1d910dd847f0b223a4aa00788fa2" kindref="member">K_IDLE_PRIO</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1acf96ff2ba2a2c7c381f335b609360d47" kindref="member">customdata_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lifo_2lifo__usage_2src_2main_8c_1a26a93d0e90402ec4ab7fef93dedf21fb" kindref="member">data</ref><sp/>=<sp/>1U;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" kindref="member">zassert_is_null</ref>(<ref refid="group__thread__apis_1ga19af063cff7b306ba28062996922740d" kindref="member">k_thread_custom_data_get</ref>(),<sp/>NULL);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga4834d9b81ed60c00eee77b0d4f8ab9e4" kindref="member">k_thread_custom_data_set</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="lifo_2lifo__usage_2src_2main_8c_1a26a93d0e90402ec4ab7fef93dedf21fb" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>relinguish<sp/>cpu<sp/>for<sp/>a<sp/>while<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(50);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="lifo_2lifo__usage_2src_2main_8c_1a26a93d0e90402ec4ab7fef93dedf21fb" kindref="member">data</ref>,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<ref refid="group__thread__apis_1ga19af063cff7b306ba28062996922740d" kindref="member">k_thread_custom_data_get</ref>(),<sp/>NULL);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lifo_2lifo__usage_2src_2main_8c_1a26a93d0e90402ec4ab7fef93dedf21fb" kindref="member">data</ref>++;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga79538830a3db1f56ccfcb27a8599c57e" kindref="member">test_customdata_get_set_coop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a679f8856482667a61738927ac92a1cfe" kindref="member">tdata_custom</ref>,<sp/>tstack_custom,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1acf96ff2ba2a2c7c381f335b609360d47" kindref="member">customdata_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1ac145d4747518572acfc8ee1579007d54" kindref="member">K_PRIO_COOP</ref>(1),<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(500);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>environment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a37f21f404b120340ad0f994b72bb967f" kindref="member">thread_name_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>nothing<sp/>and<sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga158919fa3d2d7071a815c9d41bc94a89" kindref="member">test_thread_name_get_set</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*thread_name;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>thread_buf[CONFIG_THREAD_MAX_NAME_LEN];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>and<sp/>get<sp/>current<sp/>thread&apos;s<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(NULL,<sp/></highlight><highlight class="stringliteral">&quot;parent_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;k_thread_name_set()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_name<sp/>=<sp/><ref refid="group__thread__apis_1gadebf45da56dee393164569742459dc0a" kindref="member">k_thread_name_get</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(thread_name<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;thread<sp/>name<sp/>was<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" kindref="member">strcmp</ref>(thread_name,<sp/></highlight><highlight class="stringliteral">&quot;parent_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;parent<sp/>thread<sp/>name<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>and<sp/>get<sp/>child<sp/>thread&apos;s<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1ad412a4594fd0dcd728ab03ca7bcaf4bb" kindref="member">tdata_name</ref>,<sp/>tstack_name,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a37f21f404b120340ad0f994b72bb967f" kindref="member">thread_name_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/></highlight><highlight class="stringliteral">&quot;customdata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;k_thread_name_set()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/>thread_buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(thread_buf));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>get<sp/>copied<sp/>thread<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" kindref="member">strcmp</ref>(thread_buf,<sp/></highlight><highlight class="stringliteral">&quot;customdata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;child<sp/>thread<sp/>name<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>environment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a9e8a546ff352ad471c4e5263b86abb58" kindref="member">unreadable_string</ref>[64];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a9d0e0c87a531d866b568cbb42123dd85" kindref="member">not_my_buffer</ref>[CONFIG_THREAD_MAX_NAME_LEN];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a989f6708d698cae205e01a2f6738767f" kindref="member">sem</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_USERSPACE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga2cdda772bf35ca82a1f25a81c1400719" kindref="member">test_thread_name_user_get_set</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>thread_name[CONFIG_THREAD_MAX_NAME_LEN];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>too_small[2];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Some<sp/>memory-related<sp/>error<sp/>cases<sp/>for<sp/>k_thread_name_set()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Non-Secure<sp/>images<sp/>cannot<sp/>normally<sp/>access<sp/>memory<sp/>outside<sp/>the<sp/>image</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>flash<sp/>and<sp/>ram.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(NULL,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)0xFFFFFFF0);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga3f317946e043623f9d6b93dbf60e6316" kindref="member">EFAULT</ref>,<sp/></highlight><highlight class="stringliteral">&quot;accepted<sp/>nonsense<sp/>string<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(NULL,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a9e8a546ff352ad471c4e5263b86abb58" kindref="member">unreadable_string</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga3f317946e043623f9d6b93dbf60e6316" kindref="member">EFAULT</ref>,<sp/></highlight><highlight class="stringliteral">&quot;accepted<sp/>unreadable<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*)&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a989f6708d698cae205e01a2f6738767f" kindref="member">sem</ref>,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;accepted<sp/>non-thread<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(&amp;z_main_thread,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>permission<sp/>on<sp/>thread<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>and<sp/>get<sp/>current<sp/>thread&apos;s<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(NULL,<sp/></highlight><highlight class="stringliteral">&quot;parent_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;k_thread_name_set()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>thread_name,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(thread_name));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;k_thread_name_copy()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" kindref="member">strcmp</ref>(thread_name,<sp/></highlight><highlight class="stringliteral">&quot;parent_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;parent<sp/>thread<sp/>name<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memory-related<sp/>cases<sp/>for<sp/>k_thread_name_get()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>too_small,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(too_small));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga088abe8bad2df798edad3053d719b937" kindref="member">ENOSPC</ref>,<sp/></highlight><highlight class="stringliteral">&quot;wrote<sp/>to<sp/>too-small<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a9d0e0c87a531d866b568cbb42123dd85" kindref="member">not_my_buffer</ref>,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="threads_2thread__apis_2src_2main_8c_1a9d0e0c87a531d866b568cbb42123dd85" kindref="member">not_my_buffer</ref>));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga3f317946e043623f9d6b93dbf60e6316" kindref="member">EFAULT</ref>,<sp/></highlight><highlight class="stringliteral">&quot;wrote<sp/>to<sp/>buffer<sp/>without<sp/>permission&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*)&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a989f6708d698cae205e01a2f6738767f" kindref="member">sem</ref>,<sp/>thread_name,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(thread_name));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>a<sp/>thread<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>(&amp;z_main_thread,<sp/>thread_name,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(thread_name));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>get<sp/>main<sp/>thread<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;Main<sp/>thread<sp/>name<sp/>is<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>thread_name);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>and<sp/>get<sp/>child<sp/>thread&apos;s<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1ad412a4594fd0dcd728ab03ca7bcaf4bb" kindref="member">tdata_name</ref>,<sp/>tstack_name,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a37f21f404b120340ad0f994b72bb967f" kindref="member">thread_name_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/></highlight><highlight class="stringliteral">&quot;customdata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;k_thread_name_set()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga07b59ade055c69929ccdc08a14361794" kindref="member">k_thread_name_copy</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>,<sp/>thread_name,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(thread_name));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>get<sp/>copied<sp/>thread<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" kindref="member">strcmp</ref>(thread_name,<sp/></highlight><highlight class="stringliteral">&quot;customdata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;child<sp/>thread<sp/>name<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>environment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_USERSPACE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga42cc694be4d6c3388c6f8aef09cc923d" kindref="member">test_customdata_get_set_preempt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a679f8856482667a61738927ac92a1cfe" kindref="member">tdata_custom</ref>,<sp/>tstack_custom,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1acf96ff2ba2a2c7c381f335b609360d47" kindref="member">customdata_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(0),<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(500);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>environment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a3eb27274d3e441470c8b48b64b14323e" kindref="member">umode_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*thread_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p2);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p3);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z_is_thread_essential()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>()<sp/>==<sp/>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref>)thread_id))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga085d30a04102ebb8c3f2206020723ee0" kindref="member">ztest_test_pass</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" kindref="member">zassert_unreachable</ref>(</highlight><highlight class="stringliteral">&quot;User<sp/>thread<sp/>is<sp/>essential<sp/>or<sp/>thread&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>structure<sp/>is<sp/>corrupted\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__thread__tests_1ga42561f974da6f8588a5f8a4294ab28a3" kindref="member">enter_user_mode_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_thread_essential_set();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(z_is_thread_essential(),<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>isn&apos;t<sp/>set&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>as<sp/>essential\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter</ref>((<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)<ref refid="threads_2thread__apis_2src_2main_8c_1a3eb27274d3e441470c8b48b64b14323e" kindref="member">umode_entry</ref>,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1af4cee0c1dbfb5af0646dcfe93e507181" kindref="member">test_user_mode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1aa15baae19d44279cac3d8bf47c9e707f" kindref="member">tdata</ref>,<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__thread__tests_1ga42561f974da6f8588a5f8a4294ab28a3" kindref="member">enter_user_mode_entry</ref>,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a8036fda49ff49fa97681aa7ca0d0f2a3" kindref="member">main_prio</ref>,<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(100);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(join_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a86251b5c5548fb2a1407cd0fe9743a39" kindref="member">control_thread</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(control_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" kindref="member">control_method</ref><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aad9dee005a3d0f9137b2ac1e0869f89b" kindref="member">TIMEOUT</ref>,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ae9600ce48a3c5a29d60e043169f01175" kindref="member">NO_WAIT</ref>,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7119fb841b81930e34a1771a35a9094e" kindref="member">SELF_ABORT</ref>,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7d4e149911e1abba8824f8d1019b8d19" kindref="member">OTHER_ABORT</ref>,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aafe97f0e67852bcda19f43e513132d67" kindref="member">OTHER_ABORT_TIMEOUT</ref>,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a96fc72016b996a9f1d707f651c3acfbc" kindref="member">ALREADY_EXIT</ref>,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a82810799f551714932ef4cb831d1c6fd" kindref="member">ISR_ALREADY_EXIT</ref>,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ac4671a8ffc3279252a268e325ed4b63e" kindref="member">ISR_RUNNING</ref></highlight></codeline>
<codeline lineno="306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92af6316c9f041c095becad0eedbd455" kindref="member">join_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" kindref="member">control_method</ref><sp/>m<sp/>=<sp/>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" kindref="member">control_method</ref>)(<ref refid="stdint_8h_1a0bd5dec00e345e69027427f8621d6a6c" kindref="member">intptr_t</ref>)p1;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aad9dee005a3d0f9137b2ac1e0869f89b" kindref="member">TIMEOUT</ref>:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ae9600ce48a3c5a29d60e043169f01175" kindref="member">NO_WAIT</ref>:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7d4e149911e1abba8824f8d1019b8d19" kindref="member">OTHER_ABORT</ref>:</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aafe97f0e67852bcda19f43e513132d67" kindref="member">OTHER_ABORT_TIMEOUT</ref>:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ac4671a8ffc3279252a268e325ed4b63e" kindref="member">ISR_RUNNING</ref>:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;join_thread:<sp/>sleeping<sp/>forever\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7119fb841b81930e34a1771a35a9094e" kindref="member">SELF_ABORT</ref>:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a96fc72016b996a9f1d707f651c3acfbc" kindref="member">ALREADY_EXIT</ref>:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a82810799f551714932ef4cb831d1c6fd" kindref="member">ISR_ALREADY_EXIT</ref>:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;join_thread:<sp/>self-exiting\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a2d4664a82642f48c832f0c3e88b4d54c" kindref="member">control_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;control_thread:<sp/>killing<sp/>join<sp/>thread\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a529265f23ef5146b3851929b977c4d8a" kindref="member">do_join_from_isr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)arg;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="group__isr__apis_1ga8482b0dd2283d12677a9ebe321667d16" kindref="member">k_is_in_isr</ref>(),<sp/>NULL);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;isr:<sp/>joining<sp/>join_thread\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;isr:<sp/>k_thread_join()<sp/>returned<sp/>with<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>*<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JOIN_TIMEOUT_MS<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a39a0f10e41629439399134b20427ff6f" kindref="member">join_scenario_interval</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" kindref="member">control_method</ref><sp/>m,<sp/><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref><sp/>*interval)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref><sp/>=<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;ztest_thread:<sp/>method<sp/>%d,<sp/>create<sp/>join_thread\n&quot;</highlight><highlight class="normal">,<sp/>m);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>,<sp/>join_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92af6316c9f041c095becad0eedbd455" kindref="member">join_entry</ref>,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)m,<sp/>NULL,<sp/>NULL,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a96fc72016b996a9f1d707f651c3acfbc" kindref="member">ALREADY_EXIT</ref>:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a82810799f551714932ef4cb831d1c6fd" kindref="member">ISR_ALREADY_EXIT</ref>:</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let<sp/>join_thread<sp/>run<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(50);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aafe97f0e67852bcda19f43e513132d67" kindref="member">OTHER_ABORT_TIMEOUT</ref>:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref><sp/>=<sp/><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1ae1b7531986b47f2ed01779960628fadd" kindref="member">JOIN_TIMEOUT_MS</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__fallthrough;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7d4e149911e1abba8824f8d1019b8d19" kindref="member">OTHER_ABORT</ref>:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;ztest_thread:<sp/>create<sp/>control_thread\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a86251b5c5548fb2a1407cd0fe9743a39" kindref="member">control_thread</ref>,<sp/>control_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a2d4664a82642f48c832f0c3e88b4d54c" kindref="member">control_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(2),</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aad9dee005a3d0f9137b2ac1e0869f89b" kindref="member">TIMEOUT</ref>:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref><sp/>=<sp/><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(50);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ae9600ce48a3c5a29d60e043169f01175" kindref="member">NO_WAIT</ref>:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref><sp/>=<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a82810799f551714932ef4cb831d1c6fd" kindref="member">ISR_ALREADY_EXIT</ref><sp/>||<sp/>m<sp/>==<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ac4671a8ffc3279252a268e325ed4b63e" kindref="member">ISR_RUNNING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="irq__offload_8h_1a429859dd7ac3d88a4b7ae858835847ce" kindref="member">irq_offload</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a529265f23ef5146b3851929b977c4d8a" kindref="member">do_join_from_isr</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;ztest_thread:<sp/>joining<sp/>join_thread\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*interval<sp/>=<sp/><ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get</ref>();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>,<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*interval<sp/>=<sp/><ref refid="group__clock__apis_1gae3e992cd3257c23d5b26d765fcbb2b69" kindref="member">k_uptime_get</ref>()<sp/>-<sp/>*interval;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;ztest_thread:<sp/>k_thread_join()<sp/>returned<sp/>with<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7d4e149911e1abba8824f8d1019b8d19" kindref="member">OTHER_ABORT</ref><sp/>||<sp/>m<sp/>==<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aafe97f0e67852bcda19f43e513132d67" kindref="member">OTHER_ABORT_TIMEOUT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a86251b5c5548fb2a1407cd0fe9743a39" kindref="member">control_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7" kindref="member">control_method</ref><sp/>m)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a39a0f10e41629439399134b20427ff6f" kindref="member">join_scenario_interval</ref>(m,<sp/>NULL);</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a0fd188223606973be92c19a6b5504a66" kindref="member">test_thread_join</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref><sp/>interval;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scenario:<sp/>thread<sp/>never<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>),<sp/>0,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>case<sp/>thread<sp/>never<sp/>started&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aad9dee005a3d0f9137b2ac1e0869f89b" kindref="member">TIMEOUT</ref>),<sp/>-<ref refid="group__system__errno_1gaf0fac1cea1165b4debec7f686edf3313" kindref="member">EAGAIN</ref>,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>timeout<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ae9600ce48a3c5a29d60e043169f01175" kindref="member">NO_WAIT</ref>),<sp/>-<ref refid="group__system__errno_1ga8368025077a0385849d6817b2007c095" kindref="member">EBUSY</ref>,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>no-wait<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7119fb841b81930e34a1771a35a9094e" kindref="member">SELF_ABORT</ref>),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>self-abort<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a7d4e149911e1abba8824f8d1019b8d19" kindref="member">OTHER_ABORT</ref>),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>other-abort<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a39a0f10e41629439399134b20427ff6f" kindref="member">join_scenario_interval</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7aafe97f0e67852bcda19f43e513132d67" kindref="member">OTHER_ABORT_TIMEOUT</ref>,<sp/>&amp;interval),</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>other-abort<sp/>case<sp/>with<sp/>timeout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(interval<sp/>&lt;<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ae1b7531986b47f2ed01779960628fadd" kindref="member">JOIN_TIMEOUT_MS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;join<sp/>took<sp/>too<sp/>long<sp/>(%lld<sp/>ms)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interval);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a96fc72016b996a9f1d707f651c3acfbc" kindref="member">ALREADY_EXIT</ref>),<sp/>0,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>already<sp/>exit<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a13d2d7c4476d73faef93acd8395f12da" kindref="member">test_thread_join_isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7ac4671a8ffc3279252a268e325ed4b63e" kindref="member">ISR_RUNNING</ref>),<sp/>-<ref refid="group__system__errno_1ga8368025077a0385849d6817b2007c095" kindref="member">EBUSY</ref>,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>isr<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aad00200049517a469c9b80b35d83bf00" kindref="member">join_scenario</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a92f68ea047b86f3b3f0bf2cd53086fc7a82810799f551714932ef4cb831d1c6fd" kindref="member">ISR_ALREADY_EXIT</ref>),<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>isr<sp/>exited&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ab5465f45a91de787e2d99cadd160568f" kindref="member">deadlock1_thread</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(deadlock1_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a4d195cd3ad60440761a4bf91c1972f8d" kindref="member">deadlock2_thread</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><ref refid="condvar_2condvar__api_2src_2main_8c_1abb291232121138c783bcbd0addb9a4f3" kindref="member">K_THREAD_STACK_DEFINE</ref>(deadlock2_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ad71fdcafef9d4b234f41f9aea9b45700" kindref="member">deadlock1_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(500);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a4d195cd3ad60440761a4bf91c1972f8d" kindref="member">deadlock2_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>-<ref refid="group__system__errno_1ga55cc70ce0ba661298f3c412095dfeeb6" kindref="member">EDEADLK</ref>,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>mutual<sp/>join<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a530c32306865aa0ee85cc65491fda167" kindref="member">deadlock2_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deadlock1_thread<sp/>is<sp/>active<sp/>but<sp/>currently<sp/>sleeping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1ab5465f45a91de787e2d99cadd160568f" kindref="member">deadlock1_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>join<sp/>deadlock2_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ada5f3fc129a03fc4cb491e2d0b85622d" kindref="member">test_thread_join_deadlock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deadlock<sp/>scenarios<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>),<sp/>-<ref refid="group__system__errno_1ga55cc70ce0ba661298f3c412095dfeeb6" kindref="member">EDEADLK</ref>,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>self-deadlock<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1ab5465f45a91de787e2d99cadd160568f" kindref="member">deadlock1_thread</ref>,<sp/>deadlock1_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ad71fdcafef9d4b234f41f9aea9b45700" kindref="member">deadlock1_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a4d195cd3ad60440761a4bf91c1972f8d" kindref="member">deadlock2_thread</ref>,<sp/>deadlock2_stack,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a530c32306865aa0ee85cc65491fda167" kindref="member">deadlock2_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1),<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1ab5465f45a91de787e2d99cadd160568f" kindref="member">deadlock1_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>),<sp/>0,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>join<sp/>deadlock1_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a4d195cd3ad60440761a4bf91c1972f8d" kindref="member">deadlock2_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>),<sp/>0,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>join<sp/>deadlock2_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WAIT_TO_START_MS<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>entry<sp/>for<sp/>a<sp/>delayed<sp/>thread,<sp/>do<sp/>nothing.<sp/>After<sp/>the<sp/>thread<sp/>is<sp/>created,</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>just<sp/>check<sp/>how<sp/>many<sp/>ticks<sp/>expires<sp/>and<sp/>how<sp/>many<sp/>ticks<sp/>remain<sp/>before</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>the<sp/>trhead<sp/>start</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1af82ba2d7a980c8c1c7a36090d2cbc3c8" kindref="member">user_start_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a5d891f76af33082d22cc12e19415522b" kindref="member">test_thread_timeout_remaining_expires</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga9832cb0adc2d1866420e5c370a0863e2" kindref="member">k_ticks_t</ref><sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>,<sp/>e,<sp/>r1,<sp/>ticks,<sp/>expected_expires_ticks;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticks<sp/>=<sp/><ref refid="time__units_8h_1adb979ca17d5a910b2d287522256e7872" kindref="member">k_ms_to_ticks_ceil32</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1ad436c5b9f3116862266ea51124e67442" kindref="member">WAIT_TO_START_MS</ref>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_expires_ticks<sp/>=<sp/><ref refid="group__clock__apis_1ga8f143af2ee4ad42d9f7817ef161cbd13" kindref="member">k_uptime_ticks</ref>()<sp/>+<sp/>ticks;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1aa15baae19d44279cac3d8bf47c9e707f" kindref="member">tdata</ref>,<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1af82ba2d7a980c8c1c7a36090d2cbc3c8" kindref="member">user_start_thread</ref>,<sp/><ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>NULL,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0,<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1ad436c5b9f3116862266ea51124e67442" kindref="member">WAIT_TO_START_MS</ref>));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(10);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/><ref refid="group__thread__apis_1ga80013f10d12ccdffbbd88cee048f1c21" kindref="member">k_thread_timeout_expires_ticks</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC_PRINT(</highlight><highlight class="stringliteral">&quot;thread_expires_ticks:<sp/>%d,<sp/>expect:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)e,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)expected_expires_ticks);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(e<sp/>&gt;=<sp/>expected_expires_ticks,<sp/>NULL);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(10);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga4cb4126c8e4f62bd44f3dd03f2e4a423" kindref="member">k_thread_timeout_remaining_ticks</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>&lt;<sp/>ticks,<sp/>NULL);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>=<sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(10);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga4cb4126c8e4f62bd44f3dd03f2e4a423" kindref="member">k_thread_timeout_remaining_ticks</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="asm-macro-32-bit-gnu_8h_1af16d2973cfd145a2ebdbf9528d5d9ae2" kindref="member">r</ref><sp/>&lt;<sp/>r1,<sp/>NULL);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ac8f8c9f5aab650e43509a8b816cd6211" kindref="member">foreach_callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread__runtime__stats" kindref="compound">k_thread_runtime_stats_t</ref><sp/>stats;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z_is_idle_thread_object((<ref refid="structk__thread" kindref="compound">k_tid_t</ref>)<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>))<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>NULL<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" kindref="member">k_thread_runtime_stats_get</ref>(NULL,<sp/>&amp;stats);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>==<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" kindref="member">k_thread_runtime_stats_get</ref>((<ref refid="structk__thread" kindref="compound">k_tid_t</ref>)<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>==<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" kindref="member">k_thread_runtime_stats_get</ref>((<ref refid="structk__thread" kindref="compound">k_tid_t</ref>)<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>,<sp/>&amp;stats);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="structk__thread__runtime__stats" kindref="compound">k_thread_runtime_stats_t</ref><sp/>*)<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)-&gt;execution_cycles<sp/>+=</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.execution_cycles;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>case<sp/>accumulates<sp/>every<sp/>threath&apos;s<sp/>execution_cycles<sp/>first,<sp/>then</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>get<sp/>the<sp/>total<sp/>execution_cycles<sp/>from<sp/>a<sp/>global</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>k_thread_runtime_stats_t<sp/>to<sp/>see<sp/>that<sp/>all<sp/>time<sp/>is<sp/>reflected<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>total.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a29a5f129dabab808390b4bf5b86884c5" kindref="member">test_thread_runtime_stats_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread__runtime__stats" kindref="compound">k_thread_runtime_stats_t</ref><sp/>stats,<sp/>stats_all;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.execution_cycles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gae2596d56800769b06fc03c194a126a97" kindref="member">k_thread_foreach</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1ac8f8c9f5aab650e43509a8b816cd6211" kindref="member">foreach_callback</ref>,<sp/>&amp;stats);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>NULL<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>=<sp/><ref refid="include_2kernel_8h_1abd855bb83b3be393b46833e7854a193e" kindref="member">k_thread_runtime_stats_all_get</ref>(NULL);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="mem__protect_2stackprot_2src_2main_8c_1a32d6d77f170c7ee130ad8d8c32f928e1" kindref="member">ret</ref><sp/>==<sp/>-<ref refid="group__system__errno_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1abd855bb83b3be393b46833e7854a193e" kindref="member">k_thread_runtime_stats_all_get</ref>(&amp;stats_all);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(stats.execution_cycles<sp/>&lt;=<sp/>stats_all.execution_cycles,<sp/>NULL);</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2no-multithreading_2src_2main_8c_1a6ec12c0c67a6d150a73f3a9c92331b13" kindref="member">test_k_busy_wait</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>cycles,<sp/>dt;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread__runtime__stats" kindref="compound">k_thread_runtime_stats_t</ref><sp/>test_stats;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" kindref="member">k_thread_runtime_stats_get</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>&amp;test_stats);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cycles<sp/>=<sp/>test_stats.execution_cycles;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(0);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" kindref="member">k_thread_runtime_stats_get</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>&amp;test_stats);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>execution_cycles<sp/>doesn&apos;t<sp/>increase<sp/>significantly<sp/>after<sp/>0</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>usec<sp/>(10ms<sp/>slop<sp/>experimentally<sp/>determined,</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>non-deterministic<sp/>software<sp/>emulators<sp/>are<sp/>VERY<sp/>slow<sp/>wrt</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>their<sp/>cycle<sp/>rate)</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>test_stats.execution_cycles<sp/>-<sp/>cycles;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(dt<sp/>&lt;<sp/><ref refid="time__units_8h_1a0963f760a8720d7dd0aa4941173fd2df" kindref="member">k_ms_to_cyc_ceil64</ref>(10),<sp/>NULL);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cycles<sp/>=<sp/>test_stats.execution_cycles;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(100);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1a82d886a1c911b39c1b47c32200cedac6" kindref="member">k_thread_runtime_stats_get</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>&amp;test_stats);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>execution_cycles<sp/>increases<sp/>correctly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>test_stats.execution_cycles<sp/>-<sp/>cycles;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(dt<sp/>&gt;=<sp/><ref refid="time__units_8h_1a64bae6b91d2761c2d7a32ef614eb7b05" kindref="member">k_us_to_cyc_floor64</ref>(100),<sp/>NULL);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ae3fed81d0dd0e9b889da712cd8653911" kindref="member">tp_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a038cad04dcffd46c89a9ab7de29dee6d" kindref="member">tp</ref><sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a2e60be1ed3eef579c6cadc4de44201bc" kindref="member">test_k_busy_wait_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref><sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1aa15baae19d44279cac3d8bf47c9e707f" kindref="member">tdata</ref>,<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,<sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1ae3fed81d0dd0e9b889da712cd8653911" kindref="member">tp_entry</ref>,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>0,<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(1000);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>a<sp/>1cpu<sp/>test<sp/>case,<sp/>the<sp/>new<sp/>thread<sp/>has<sp/>no<sp/>chance<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>scheduled<sp/>and<sp/>value<sp/>of<sp/>tp<sp/>not<sp/>changed</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a038cad04dcffd46c89a9ab7de29dee6d" kindref="member">tp</ref><sp/>==<sp/>100,<sp/>NULL);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>give<sp/>up<sp/>cpu,<sp/>the<sp/>new<sp/>thread<sp/>will<sp/>change<sp/>value<sp/>of<sp/>tp<sp/>to<sp/>100<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga51307cdfe153ab3e918b18755d97c5d9" kindref="member">k_msleep</ref>(100);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a038cad04dcffd46c89a9ab7de29dee6d" kindref="member">tp</ref><sp/>==<sp/>100,<sp/>NULL);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INT_ARRAY_SIZE<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6e88ce0abc80de3496a26ad83ecef1b7" kindref="member">large_stack</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*space)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>&quot;volatile&quot;<sp/>to<sp/>protect<sp/>this<sp/>varaible<sp/>from<sp/>being<sp/>optimized<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[<ref refid="threads_2thread__apis_2src_2main_8c_1a490b45bba42ffbe6f0904b2148b206e5" kindref="member">INT_ARRAY_SIZE</ref>];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>avoid<sp/>unused<sp/>varaible<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k_thread_stack_space_get(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>space);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a514cc45a6e8a6fbfaa7410588921c7a2" kindref="member">small_stack</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*space)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k_thread_stack_space_get(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>space);</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>test<sp/>k_thread_stack_sapce_get(),<sp/>unused<sp/>stack<sp/>space<sp/>in<sp/>large_stack_space()</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>is<sp/>samller<sp/>than<sp/>that<sp/>in<sp/>small_stack()<sp/>because<sp/>the<sp/>former<sp/>function<sp/>has<sp/>a</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>large<sp/>local<sp/>variable</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a332b51e49b7a7c8a1c91a371c0432795" kindref="member">test_k_thread_stack_space_get_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a,<sp/>b;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a514cc45a6e8a6fbfaa7410588921c7a2" kindref="member">small_stack</ref>(&amp;a);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a6e88ce0abc80de3496a26ad83ecef1b7" kindref="member">large_stack</ref>(&amp;b);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Ideally,<sp/>the<sp/>follow<sp/>condition<sp/>will<sp/>assert<sp/>true:</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(a<sp/>-<sp/>b)<sp/>==<sp/>INT_ARRAY_SIZE<sp/>*<sp/>sizeof(int)</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>it<sp/>is<sp/>not<sp/>the<sp/>case<sp/>in<sp/>native_posix,<sp/>qemu_leon3<sp/>and</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>qemu_cortex_a53.<sp/>Relax<sp/>check<sp/>condition<sp/>here</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(b<sp/>&lt;=<sp/>a,<sp/>NULL);</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_2src_2main_8c_1a8a4533f287d99bb2d7c24c0e29c9a449" kindref="member">test_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>(),<sp/>&amp;<ref refid="msgq_2msgq__api_2src_2main_8c_1aa15baae19d44279cac3d8bf47c9e707f" kindref="member">tdata</ref>,<sp/><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a679f8856482667a61738927ac92a1cfe" kindref="member">tdata_custom</ref>,<sp/>tstack_custom,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1ad412a4594fd0dcd728ab03ca7bcaf4bb" kindref="member">tdata_name</ref>,<sp/>tstack_name,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1aea1ae67f96aea079968aea2fc4f4c732" kindref="member">join_thread</ref>,<sp/>join_stack,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a86251b5c5548fb2a1407cd0fe9743a39" kindref="member">control_thread</ref>,<sp/>control_stack,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1ab5465f45a91de787e2d99cadd160568f" kindref="member">deadlock1_thread</ref>,<sp/>deadlock1_stack,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="threads_2thread__apis_2src_2main_8c_1a4d195cd3ad60440761a4bf91c1972f8d" kindref="member">deadlock2_thread</ref>,<sp/>deadlock2_stack);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="threads_2thread__apis_2src_2main_8c_1a8036fda49ff49fa97681aa7ca0d0f2a3" kindref="member">main_prio</ref><sp/>=<sp/><ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get</ref>(<ref refid="group__thread__apis_1ga7ef1ed0fb9513df8096ede1e52fc76b2" kindref="member">k_current_get</ref>());</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1aa7003ae2e637e6eb92a4c5e7523848a5" kindref="member">strncpy</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a9e8a546ff352ad471c4e5263b86abb58" kindref="member">unreadable_string</ref>,<sp/></highlight><highlight class="stringliteral">&quot;unreadable<sp/>string&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="threads_2thread__apis_2src_2main_8c_1a9e8a546ff352ad471c4e5263b86abb58" kindref="member">unreadable_string</ref>));</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga2ad3ecbbedb04310c6a4ac997a8d3550" kindref="member">ztest_test_suite</ref>(threads_lifecycle,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a29a5f129dabab808390b4bf5b86884c5" kindref="member">test_thread_runtime_stats_get</ref>),</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a332b51e49b7a7c8a1c91a371c0432795" kindref="member">test_k_thread_stack_space_get_user</ref>),</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga343cc5510709b0043c32e026ea423c8d" kindref="member">test_threads_spawn_params</ref>),</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gaa46408c70fe87c930cdd897d5ee9a8ed" kindref="member">test_threads_spawn_priority</ref>),</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga7eb8d5eb8f05037424a4be7209bc7ee1" kindref="member">test_threads_spawn_delay</ref>),</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gad774bf9c86adc632d19c951abc4a6b3a" kindref="member">test_threads_spawn_forever</ref>),</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1ab4359944708c4a89266f1bd69f0e76a0" kindref="member">test_thread_start_user</ref>),</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga9456b9b5e98b9b03b4f95099c8938e83" kindref="member">test_thread_start</ref>),</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga8566965d5c6b32bc8f4c10bfa85dd9a0" kindref="member">test_threads_suspend_resume_cooperative</ref>),</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gae417ad0a2b4d1c4c70f3d94206a74def" kindref="member">test_threads_suspend_resume_preemptible</ref>),</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga799a7a8d7e7936b932bace256425d361" kindref="member">test_threads_priority_set</ref>),</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gab554bac6421498511eed4354fb144e6d" kindref="member">test_threads_abort_self</ref>),</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga77747ae463b19fdc129b2e011f5061f0" kindref="member">test_threads_abort_others</ref>),</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gaf2d3f2ac9d1fbb0e3acad6a97fa808bf" kindref="member">test_threads_abort_repeat</ref>),</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gacbf2a9fe917ec063b9be6767a666daa9" kindref="member">test_delayed_thread_abort</ref>),</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga80b6f4d5311d01a2ed328c12576d15ba" kindref="member">test_essential_thread_operation</ref>),</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga55716449c1fa7ab547b33d19346e89bb" kindref="member">test_essential_thread_abort</ref>),</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gabe47de065adaebbe9400359493c3b3a0" kindref="member">test_systhreads_main</ref>),</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga2531099398db9aa32f4a54156927d70a" kindref="member">test_systhreads_idle</ref>),</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga79538830a3db1f56ccfcb27a8599c57e" kindref="member">test_customdata_get_set_coop</ref>),</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gab5438441a57724ddf51e6dda62e2681b" kindref="member">ztest_1cpu_user_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga42cc694be4d6c3388c6f8aef09cc923d" kindref="member">test_customdata_get_set_preempt</ref>),</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga577ab12bd0b4769e5399bb3d699fc8bc" kindref="member">test_k_thread_foreach</ref>),</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gabdcfc826ee116f4e4286617dcdb9eee5" kindref="member">test_k_thread_foreach_unlocked</ref>),</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gab8855ec6f9d9b1991c4678482c3702b8" kindref="member">test_k_thread_foreach_null_cb</ref>),</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga10341044263044cba59eaea1c67c426b" kindref="member">test_k_thread_foreach_unlocked_null_cb</ref>),</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga3dc2a496f5c9f93e437f865b99b84114" kindref="member">test_k_thread_state_str</ref>),</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga158919fa3d2d7071a815c9d41bc94a89" kindref="member">test_thread_name_get_set</ref>),</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga2cdda772bf35ca82a1f25a81c1400719" kindref="member">test_thread_name_user_get_set</ref>),</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1af4cee0c1dbfb5af0646dcfe93e507181" kindref="member">test_user_mode</ref>),</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6bec709a2a48c6065e6f5e01fea69685" kindref="member">ztest_1cpu_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1aaf6483e123e58b2186cdea5db1c726a9" kindref="member">test_threads_cpu_mask</ref>),</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gab20cb01e1b51390471dda076ee9227ac" kindref="member">test_threads_suspend_timeout</ref>),</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga2cb97f38f00cf31817bfe504f2bb89b9" kindref="member">test_resume_unsuspend_thread</ref>),</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga22c351635c29e98e4b17ae88e7309974" kindref="member">test_threads_suspend</ref>),</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a0fd188223606973be92c19a6b5504a66" kindref="member">test_thread_join</ref>),</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a13d2d7c4476d73faef93acd8395f12da" kindref="member">test_thread_join_isr</ref>),</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1ada5f3fc129a03fc4cb491e2d0b85622d" kindref="member">test_thread_join_deadlock</ref>),</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1ga2006250ab6237a25a3e47014a5baaf89" kindref="member">test_abort_from_isr</ref>),</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="group__kernel__thread__tests_1gae36781d5ef6ff99a27935d1ff3b6490d" kindref="member">test_abort_from_isr_not_self</ref>),</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga6a7a2f0d98c31455701a282b8e1862cb" kindref="member">ztest_user_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a5d891f76af33082d22cc12e19415522b" kindref="member">test_thread_timeout_remaining_expires</ref>),</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gaf19dfe9baa08c481c11fd0470e30bc3f" kindref="member">ztest_unit_test</ref>(<ref refid="threads_2no-multithreading_2src_2main_8c_1a6ec12c0c67a6d150a73f3a9c92331b13" kindref="member">test_k_busy_wait</ref>),</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gab5438441a57724ddf51e6dda62e2681b" kindref="member">ztest_1cpu_user_unit_test</ref>(<ref refid="threads_2thread__apis_2src_2main_8c_1a2e60be1ed3eef579c6cadc4de44201bc" kindref="member">test_k_busy_wait_user</ref>)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1ga7f76df4df4bf68a605b923fed8e5465c" kindref="member">ztest_run_test_suite</ref>(threads_lifecycle);</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/threads/thread_apis/src/main.c"/>
  </compounddef>
</doxygen>
