<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mem__domain_8c" kind="file" language="C++">
    <compoundname>mem_domain.c</compoundname>
    <includes refid="mem__protect_8h" local="yes">mem_protect.h</includes>
    <includes local="no">kernel_internal.h</includes>
    <incdepgraph>
      <node id="18">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="67">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="66">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="30">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="37">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="39">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="35">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="33">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="41">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="42">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="38">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="36">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="40">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="76">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="46">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="52">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="29">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="43">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="24">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="6">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="20">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="87">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="88">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="14">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="10">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="12">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="65">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="89">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="82">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="4">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="16">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_domain.c</label>
        <link refid="mem__domain_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>alloca.h</label>
      </node>
      <node id="69">
        <label>arch/cpu.h</label>
      </node>
      <node id="32">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="31">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="44">
        <label>kernel.h</label>
      </node>
      <node id="94">
        <label>kernel_internal.h</label>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="85">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="93">
        <label>syscalls/mem_protect.h</label>
      </node>
      <node id="90">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="91">
        <label>tc_util.h</label>
      </node>
      <node id="3">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mem__domain_8c_1af8246c2cbae09d2fe43ef2bcf42ac958" prot="public" static="no">
        <name>PARTS_USED</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="16" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__domain_8c_1a27e9c68a2e91b4e4c03bc5c9393f0213" prot="public" static="no">
        <name>NUM_RW_PARTS</name>
        <initializer>(CONFIG_MAX_DOMAIN_PARTITIONS - <ref refid="mem__domain_8c_1af8246c2cbae09d2fe43ef2bcf42ac958" kindref="member">PARTS_USED</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="18" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__domain_8c_1aef8f07401842218539bdd0f689991002" prot="public" static="no">
        <name>PRIO</name>
        <initializer><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(1)</initializer>
        <briefdescription>
<para>Show that moving a thread from one domain to another works. </para>
        </briefdescription>
        <detaileddescription>
<para>Start a thread and have it spin. Then while it is spinning, show that adding it to another memory domain doesn&apos;t cause any faults.</para>
<para>This test is of particular importance on SMP systems where the child thread is spinning on a different CPU concurrently with the migration operation.</para>
<para><simplesect kind="see"><para><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="318" column="10" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="318" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread child_thread</definition>
        <argsstring></argsstring>
        <name>child_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="10" column="22" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref></type>
        <definition>struct k_mem_domain test_domain</definition>
        <argsstring></argsstring>
        <name>test_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="14" column="26" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" prot="public" static="no" mutable="no">
        <type><ref refid="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref> int</type>
        <definition>ZTEST_BMEM int num_rw_parts</definition>
        <argsstring></argsstring>
        <name>num_rw_parts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="21" column="16" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1a603493b7d2fac82e9fb630fc4d0036ab" prot="public" static="yes" mutable="no">
        <type>volatile <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>volatile uint8_t rw_bufs[(CONFIG_MAX_DOMAIN_PARTITIONS - 2)][MEM_REGION_ALLOC]</definition>
        <argsstring>[(CONFIG_MAX_DOMAIN_PARTITIONS - 2)][MEM_REGION_ALLOC]</argsstring>
        <name>rw_bufs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="25" column="1" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref></type>
        <definition>struct k_mem_partition rw_parts[(CONFIG_MAX_DOMAIN_PARTITIONS - 2)]</definition>
        <argsstring>[(CONFIG_MAX_DOMAIN_PARTITIONS - 2)]</argsstring>
        <name>rw_parts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="26" column="29" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" prot="public" static="yes" mutable="no">
        <type>volatile <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>volatile uint8_t ro_buf[MEM_REGION_ALLOC]</definition>
        <argsstring>[MEM_REGION_ALLOC]</argsstring>
        <name>ro_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="29" column="26" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1ac905df8721c705a5bfac643eabda4ca7" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref></type>
        <definition>struct k_mem_domain no_access_domain</definition>
        <argsstring></argsstring>
        <name>no_access_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="208" column="26" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1a74fbfc23bc4970156e602cc6595bea11" prot="public" static="yes" mutable="no">
        <type>volatile <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>volatile uint8_t no_access_buf[MEM_REGION_ALLOC]</definition>
        <argsstring>[MEM_REGION_ALLOC]</argsstring>
        <name>no_access_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="212" column="1" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1a0b27a3cb9132dfdcf9f8b1034b73c1d0" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref> volatile <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>ZTEST_BMEM volatile bool spin_done</definition>
        <argsstring></argsstring>
        <name>spin_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="286" column="33" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" prot="public" static="yes" mutable="no">
        <type><ref refid="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref> <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>ZTEST_BMEM bool need_recover_spinlock</definition>
        <argsstring></argsstring>
        <name>need_recover_spinlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="404" column="24" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1aa522d3a795e160ccead6d7bbe96ae8ab" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref></type>
        <definition>struct k_mem_domain test_domain_fail</definition>
        <argsstring></argsstring>
        <name>test_domain_fail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="406" column="26" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1a83823cc94f64e4011e24c2f39e394f2b" prot="public" static="yes" mutable="no">
        <type>volatile <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>volatile uint8_t exceed_buf[MEM_REGION_ALLOC]</definition>
        <argsstring>[MEM_REGION_ALLOC]</argsstring>
        <name>exceed_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="418" column="1" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mem__domain_8c_1aefd4bbb286054032c6a70eb93dd4b6fc" prot="public" static="yes" mutable="no">
        <type>volatile <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>volatile uint8_t nosize_buf[MEM_REGION_ALLOC]</definition>
        <argsstring>[MEM_REGION_ALLOC]</argsstring>
        <name>nosize_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="525" column="26" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="525" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mem__domain_8c_1ab0f88d1f02b18cf58a1366b57d176bd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static K_THREAD_STACK_DEFINE</definition>
        <argsstring>(child_stack, 512+CONFIG_TEST_EXTRA_STACKSIZE)</argsstring>
        <name>K_THREAD_STACK_DEFINE</name>
        <param>
          <type>child_stack</type>
        </param>
        <param>
          <type>512+</type>
          <declname>CONFIG_TEST_EXTRA_STACKSIZE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="11" column="8" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="11" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_MEM_PARTITION_DEFINE</definition>
        <argsstring>(ro_part, ro_buf, sizeof(ro_buf), K_MEM_PARTITION_P_RO_U_RO)</argsstring>
        <name>K_MEM_PARTITION_DEFINE</name>
        <param>
          <type>ro_part</type>
        </param>
        <param>
          <type><ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref></type>
        </param>
        <param>
          <type>sizeof(<ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>)</type>
        </param>
        <param>
          <type><ref refid="mmustructs_8h_1a708338371e91b5a3f2d44f9ae48849db" kindref="member">K_MEM_PARTITION_P_RO_U_RO</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="30" column="1" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1aa14bd2ae9bb6e6ed065e453485a2db8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_MEM_PARTITION_DEFINE</definition>
        <argsstring>(overlap_part, ro_buf, sizeof(ro_buf), K_MEM_PARTITION_P_RW_U_RW)</argsstring>
        <name>K_MEM_PARTITION_DEFINE</name>
        <param>
          <type>overlap_part</type>
        </param>
        <param>
          <type><ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref></type>
        </param>
        <param>
          <type>sizeof(<ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>)</type>
        </param>
        <param>
          <type><ref refid="mmustructs_8h_1a9b7cc3c51f518517031d76807470aa10" kindref="member">K_MEM_PARTITION_P_RW_U_RW</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="33" column="1" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a55d5bea1c8b48c052fee104eb3b29f66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void zzz_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>zzz_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="37" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1ae16bdc540346b278eb277d0a881eef44" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static K_THREAD_DEFINE</definition>
        <argsstring>(zzz_thread, 256+CONFIG_TEST_EXTRA_STACKSIZE, zzz_entry, NULL, NULL, NULL, 0, 0, 0)</argsstring>
        <name>K_THREAD_DEFINE</name>
        <param>
          <type>zzz_thread</type>
        </param>
        <param>
          <type>256+</type>
          <declname>CONFIG_TEST_EXTRA_STACKSIZE</declname>
        </param>
        <param>
          <type><ref refid="mem__domain_8c_1a55d5bea1c8b48c052fee104eb3b29f66" kindref="member">zzz_entry</ref></type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="42" column="8" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="42" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a8b8b2ddc3a475613ecd0c5aced042058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_setup</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_setup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="45" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="45" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spawn_child_thread</definition>
        <argsstring>(k_thread_entry_t entry, struct k_mem_domain *domain, bool should_fault)</argsstring>
        <name>spawn_child_thread</name>
        <param>
          <type><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref></type>
          <declname>entry</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref> *</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>should_fault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="83" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="83" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1ab16bf92e059c6d273052193cdcebb9c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rw_part_access</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>rw_part_access</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="109" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="109" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a259fc0a739bb72a9ed589a2fd42bcaca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ro_part_access</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>ro_part_access</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="124" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a96d5cbe43cd11a1b38290b311f764811" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ro_write_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>ro_write_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="133" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1af89e0b7de5bd61950c2eacca2e950af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_valid_access</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_valid_access</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the mem_domain is configured and accessible for userspace. </para>
        </briefdescription>
        <detaileddescription>
<para>Join a memory domain with a read-write memory partition and a read-only partition within it, and show that the data in the partition is accessible as expected by the permissions provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="148" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a2d423ef303187c3e57dc8a5f5164fbbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_invalid_access</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_invalid_access</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that a user thread can&apos;t touch partitions not in its domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="159" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a334678a0007fe2d5e8366da7e77407e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_no_writes_to_ro</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_no_writes_to_ro</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that a read-only partition can&apos;t be written to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="171" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1ab2d95932f1b7fd8def90d788f0b704c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_remove_add_partition</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_remove_add_partition</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that adding/removing partitions works. </para>
        </briefdescription>
        <detaileddescription>
<para>Show that removing a partition doesn&apos;t affect access to other partitions. Show that removing a partition generates a fault if its data is accessed. Show that adding a partition back restores access from a user thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="186" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="186" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1aa17777b182bd8d2f72767e9b375783ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_MEM_PARTITION_DEFINE</definition>
        <argsstring>(no_access_part, no_access_buf, sizeof(no_access_buf), K_MEM_PARTITION_P_RW_U_RW)</argsstring>
        <name>K_MEM_PARTITION_DEFINE</name>
        <param>
          <type>no_access_part</type>
        </param>
        <param>
          <type><ref refid="mem__domain_8c_1a74fbfc23bc4970156e602cc6595bea11" kindref="member">no_access_buf</ref></type>
        </param>
        <param>
          <type>sizeof(<ref refid="mem__domain_8c_1a74fbfc23bc4970156e602cc6595bea11" kindref="member">no_access_buf</ref>)</type>
        </param>
        <param>
          <type><ref refid="mmustructs_8h_1a9b7cc3c51f518517031d76807470aa10" kindref="member">K_MEM_PARTITION_P_RW_U_RW</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="213" column="1" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="213" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a4d410bfd955f5ee72ebdccacb449be5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mem_domain_init_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>mem_domain_init_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="216" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a55b22bce99751d620dfbfa801ff7996e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mem_domain_add_partition_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>mem_domain_add_partition_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="223" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a3bdb8a23b4407bebdfd93da8546203a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mem_domain_remove_partition_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>mem_domain_remove_partition_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="230" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="230" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a94cc6b3d2ed3b55ffb2a6443401987e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mem_domain_add_thread_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>mem_domain_add_thread_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="237" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a9cea68be4e91c450e75aabec206aaacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_api_supervisor_only</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_api_supervisor_only</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access memory domain APIs allowed to supervisor threads only. </para>
        </briefdescription>
        <detaileddescription>
<para>Show that invoking any of the memory domain APIs from user mode leads to a fault.</para>
<para><simplesect kind="see"><para><ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init()</ref>, <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref>, <ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition()</ref>, <ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="253" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="253" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a135b7b7054cf989f021cc001a060c837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_boot_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_boot_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that boot threads belong to the default memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Static threads and the main thread are supposed to start as members of the default memory domain. Prove this is the case by examining the memory domain membership of z_main_thread and a static thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="271" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="271" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a33fdf2d1958bcc4f290fc46c1f92b4eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static K_SEM_DEFINE</definition>
        <argsstring>(spin_sem, 0, 1)</argsstring>
        <name>K_SEM_DEFINE</name>
        <param>
          <type>spin_sem</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="287" column="8" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="287" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a474a2968004221b2e9c0cd39fd0b75ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void spin_entry</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>spin_entry</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="289" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="289" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a66695f107be50be6b6811e12f99d997a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_migration</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_migration</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: add to existing domain will do nothing</para>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="321" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="321" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a8c452aa931d8d68d2c43ddaf1bc1aef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_overlap</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_overlap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test system assert when new partition overlaps the existing partition. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Test assertion if the new partition overlaps existing partition in domain</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>System testing</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Define testing memory partition overlap_part with the same start ro_buf as has the existing memory partition ro_part</para>
</listitem><listitem><para>Try to add overlap_part to the memory domain. When adding the new partition to the memory domain the system will assert that new partition overlaps with the existing partition ro_part .</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>Must happen an assertion error indicating that the new partition overlaps the existing one.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Success if the overlap assertion will happen.</para>
</listitem><listitem><para>Failure if the overlap assertion will not happen.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="393" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="393" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a9c973fd8fa4cd6371dfd07db6a93065f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void post_fatal_error_handler</definition>
        <argsstring>(unsigned int reason, const z_arch_esf_t *pEsf)</argsstring>
        <name>post_fatal_error_handler</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const z_arch_esf_t *</type>
          <declname>pEsf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="408" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="408" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1af5a00ccfce16736e3fa8f6ed519745e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_MEM_PARTITION_DEFINE</definition>
        <argsstring>(exceed_part, exceed_buf, sizeof(exceed_buf), K_MEM_PARTITION_P_RW_U_RW)</argsstring>
        <name>K_MEM_PARTITION_DEFINE</name>
        <param>
          <type>exceed_part</type>
        </param>
        <param>
          <type><ref refid="mem__domain_8c_1a83823cc94f64e4011e24c2f39e394f2b" kindref="member">exceed_buf</ref></type>
        </param>
        <param>
          <type>sizeof(<ref refid="mem__domain_8c_1a83823cc94f64e4011e24c2f39e394f2b" kindref="member">exceed_buf</ref>)</type>
        </param>
        <param>
          <type><ref refid="mmustructs_8h_1a9b7cc3c51f518517031d76807470aa10" kindref="member">K_MEM_PARTITION_P_RW_U_RW</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="420" column="1" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="420" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a385e2c5dad5a5d6e17305449fec5d06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_assert_add_overmax</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_assert_add_overmax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test system assert when adding memory partitions more than possible. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Add memory partitions one by one and more than architecture allows to add.</para>
</listitem><listitem><para>When partitions added more than it is allowed by architecture, test that <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> returns non-zero. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="433" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="433" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a0cdcc251c234fb2c7150df5e56fa5b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_remove_part_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_remove_part_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="479" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1aae1379b152838b79bbf8be04938a8173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_init_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_init_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of initializing memory domain fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to initialize a domain with invalid partition. <ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init()</ref> should return non-zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="493" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="493" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a83f139a28d365568e4bb04c65cebf12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_add_error_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_add_error_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of adding null memory partition fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to add a null partition to memory domain. <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> should return error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="515" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="515" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a146e6964806097acbca857a27347d430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_MEM_PARTITION_DEFINE</definition>
        <argsstring>(nonsize_part, nosize_buf, sizeof(nosize_buf), K_MEM_PARTITION_P_RO_U_RO)</argsstring>
        <name>K_MEM_PARTITION_DEFINE</name>
        <param>
          <type>nonsize_part</type>
        </param>
        <param>
          <type><ref refid="mem__domain_8c_1aefd4bbb286054032c6a70eb93dd4b6fc" kindref="member">nosize_buf</ref></type>
        </param>
        <param>
          <type>sizeof(<ref refid="mem__domain_8c_1aefd4bbb286054032c6a70eb93dd4b6fc" kindref="member">nosize_buf</ref>)</type>
        </param>
        <param>
          <type><ref refid="mmustructs_8h_1a708338371e91b5a3f2d44f9ae48849db" kindref="member">K_MEM_PARTITION_P_RO_U_RO</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="526" column="1" declfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" declline="526" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a29f1f2f86632556046daf12d6a985a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_add_error_zerosize</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_add_error_zerosize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of adding zero sized memory partition fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to add a zero sized partition to memory domain. <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> should return error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="537" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="537" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a1d1a65d9e3abd4b508f0ca9b1f6910df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_error_wraparound</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_error_wraparound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of memory partition address wraparound. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to add a partition whose adddress is wraparound. <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> should return error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="559" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="559" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="mem__domain_8c_1a71142b3b74ff9d1f32e25c4a4b763591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_remove_error_zerosize</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_remove_error_zerosize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of removing memory partition fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to remove a partition size mismatched will result in <ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition()</ref> returning error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" line="585" column="6" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="585" bodyend="606"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017,<sp/>2020<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mem__protect_8h" kindref="compound">mem_protect.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel_internal.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>z_main_thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1ab0f88d1f02b18cf58a1366b57d176bd5" kindref="member">K_THREAD_STACK_DEFINE</ref>(child_stack,<sp/>512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACKSIZE);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Special<sp/>memory<sp/>domain<sp/>for<sp/>test<sp/>case<sp/>purposes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/><ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PARTS_USED<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>number<sp/>of<sp/>allowable<sp/>memory<sp/>partitions<sp/>defined<sp/>by<sp/>the<sp/>build<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_RW_PARTS<sp/><sp/><sp/><sp/>(CONFIG_MAX_DOMAIN_PARTITIONS<sp/>-<sp/>PARTS_USED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Max<sp/>number<sp/>of<sp/>allowable<sp/>partitions,<sp/>derived<sp/>at<sp/>runtime.<sp/>Might<sp/>be<sp/>less.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="group__ztest__test__deprecated_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" kindref="member">num_rw_parts</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>of<sp/>read-write<sp/>buffers<sp/>each<sp/>in<sp/>their<sp/>own<sp/>partition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>__aligned(MEM_REGION_ALLOC)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a603493b7d2fac82e9fb630fc4d0036ab" kindref="member">rw_bufs</ref>[<ref refid="mem__domain_8c_1a27e9c68a2e91b4e4c03bc5c9393f0213" kindref="member">NUM_RW_PARTS</ref>][MEM_REGION_ALLOC];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/><ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[<ref refid="mem__domain_8c_1a27e9c68a2e91b4e4c03bc5c9393f0213" kindref="member">NUM_RW_PARTS</ref>];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>single<sp/>read-only<sp/>partition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>__aligned(MEM_REGION_ALLOC)<sp/><ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>[MEM_REGION_ALLOC];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(ro_part,<sp/><ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a708338371e91b5a3f2d44f9ae48849db" kindref="member">K_MEM_PARTITION_P_RO_U_RO</ref>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>partition<sp/>to<sp/>test<sp/>overlap<sp/>that<sp/>has<sp/>same<sp/>ro_buf<sp/>as<sp/>a<sp/>partition<sp/>ro_part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(overlap_part,<sp/><ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a9b7cc3c51f518517031d76807470aa10" kindref="member">K_MEM_PARTITION_P_RW_U_RW</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Static<sp/>thread,<sp/>used<sp/>by<sp/>a<sp/>couple<sp/>tests<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a55d5bea1c8b48c052fee104eb3b29f66" kindref="member">zzz_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep</ref>(<ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1ae16bdc540346b278eb277d0a881eef44" kindref="member">K_THREAD_DEFINE</ref>(zzz_thread,<sp/>256<sp/>+<sp/>CONFIG_TEST_EXTRA_STACKSIZE,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a55d5bea1c8b48c052fee104eb3b29f66" kindref="member">zzz_entry</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a8b8b2ddc3a475613ecd0c5aced042058" kindref="member">test_mem_domain_setup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_parts<sp/>=<sp/><ref refid="group__arch-userspace_1ga71542fcc679a94ad9ea60d7ac46da361" kindref="member">arch_mem_domain_max_partitions_get</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/>*parts[]<sp/>=<sp/>{<sp/>&amp;ro_part,<sp/>&amp;<ref refid="group__ztest__test__deprecated_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref><sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" kindref="member">num_rw_parts</ref><sp/>=<sp/>max_parts<sp/>-<sp/><ref refid="mem__domain_8c_1af8246c2cbae09d2fe43ef2bcf42ac958" kindref="member">PARTS_USED</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" kindref="member">num_rw_parts</ref><sp/>&lt;=<sp/><ref refid="mem__domain_8c_1a27e9c68a2e91b4e4c03bc5c9393f0213" kindref="member">NUM_RW_PARTS</ref>,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CONFIG_MAX_DOMAIN_PARTITIONS<sp/>incorrectly<sp/>tuned,<sp/>%d<sp/>should<sp/>be<sp/>at<sp/>least<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONFIG_MAX_DOMAIN_PARTITIONS,<sp/>max_parts);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" kindref="member">num_rw_parts</ref><sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>free<sp/>memory<sp/>partitions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/><ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(parts),<sp/>parts),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>initialize<sp/>memory<sp/>domain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" kindref="member">num_rw_parts</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[i].<ref refid="structk__mem__partition_1a654d19bfd6a1154f410ac6f3c481c5b7" kindref="member">start</ref><sp/>=<sp/>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)&amp;<ref refid="mem__domain_8c_1a603493b7d2fac82e9fb630fc4d0036ab" kindref="member">rw_bufs</ref>[i];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[i].<ref refid="structk__mem__partition_1ab3cb68302158f3dced41dbff4cbb226c" kindref="member">size</ref><sp/>=<sp/>MEM_REGION_ALLOC;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[i].<ref refid="structk__mem__partition_1ada951ba1ec9429c98c16761e3093eedb" kindref="member">attr</ref><sp/>=<sp/><ref refid="arm__mpu__v7m_8h_1a9b7cc3c51f518517031d76807470aa10" kindref="member">K_MEM_PARTITION_P_RW_U_RW</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MEM_REGION_ALLOC;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a603493b7d2fac82e9fb630fc4d0036ab" kindref="member">rw_bufs</ref>[i][j]<sp/>=<sp/>(j<sp/>%<sp/>256U);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[i]),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MEM_REGION_ALLOC;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>[j]<sp/>=<sp/>(j<sp/>%<sp/>256U);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>function;<sp/>run<sp/>a<sp/>function<sp/>under<sp/>a<sp/>child<sp/>user<sp/>thread.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>If<sp/>domain<sp/>is<sp/>not<sp/>NULL,<sp/>add<sp/>the<sp/>child<sp/>thread<sp/>to<sp/>that<sp/>domain,<sp/>instead<sp/>of</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>whatever<sp/>it<sp/>would<sp/>inherit.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref><sp/>entry,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/>*domain,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_fault)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(should_fault);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>,<sp/>child_stack,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__stack__api_1ga775f8e6b4144cfdd24f3261b6db64150" kindref="member">K_THREAD_STACK_SIZEOF</ref>(child_stack),<sp/>entry,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>0,<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>,<sp/></highlight><highlight class="stringliteral">&quot;child_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread</ref>(domain,<sp/>&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" kindref="member">k_thread_start</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_fault<sp/>&amp;&amp;<sp/><ref refid="common_8c_1a28aca6d3b211daaff499bbaac87c3ef1" kindref="member">valid_fault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>valid_fault<sp/>gets<sp/>cleared<sp/>if<sp/>an<sp/>expected<sp/>exception</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>took<sp/>place</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>function<sp/>%p<sp/>was<sp/>supposed<sp/>to<sp/>fault<sp/>but<sp/>didn&apos;t\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ztest__assert_8h_1acd6eb423f54dce8544f7c3b1618c0374" kindref="member">ztest_test_fail</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>read<sp/>and<sp/>write<sp/>to<sp/>all<sp/>the<sp/>rw_parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1ab16bf92e059c6d273052193cdcebb9c1" kindref="member">rw_part_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" kindref="member">num_rw_parts</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MEM_REGION_ALLOC;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__domain_8c_1a603493b7d2fac82e9fb630fc4d0036ab" kindref="member">rw_bufs</ref>[i][j],<sp/>j<sp/>%<sp/>256U,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>data<sp/>in<sp/>rw_buf[%d][%d]&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>j);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>writes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a603493b7d2fac82e9fb630fc4d0036ab" kindref="member">rw_bufs</ref>[i][j]++;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a603493b7d2fac82e9fb630fc4d0036ab" kindref="member">rw_bufs</ref>[i][j]--;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>ro_part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a259fc0a739bb72a9ed589a2fd42bcaca" kindref="member">ro_part_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MEM_REGION_ALLOC;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>[i],<sp/>i<sp/>%<sp/>256U,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>data<sp/>in<sp/>ro_buf[%d]&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>to<sp/>ro_part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a96d5cbe43cd11a1b38290b311f764811" kindref="member">ro_write_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>fault<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1ae973dc0b616b9c700ef4aa89d5ff41be" kindref="member">ro_buf</ref>[0]<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1af89e0b7de5bd61950c2eacca2e950af3" kindref="member">test_mem_domain_valid_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1ab16bf92e059c6d273052193cdcebb9c1" kindref="member">rw_part_access</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a259fc0a739bb72a9ed589a2fd42bcaca" kindref="member">ro_part_access</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a2d423ef303187c3e57dc8a5f5164fbbc" kindref="member">test_mem_domain_invalid_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>child<sp/>not<sp/>added<sp/>to<sp/>test_domain,<sp/>will<sp/>fault<sp/>for<sp/>both<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1ab16bf92e059c6d273052193cdcebb9c1" kindref="member">rw_part_access</ref>,<sp/>NULL,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a259fc0a739bb72a9ed589a2fd42bcaca" kindref="member">ro_part_access</ref>,<sp/>NULL,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a334678a0007fe2d5e8366da7e77407e8" kindref="member">test_mem_domain_no_writes_to_ro</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Show<sp/>that<sp/>trying<sp/>to<sp/>write<sp/>to<sp/>a<sp/>read-only<sp/>partition<sp/>causes<sp/>a<sp/>fault<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a96d5cbe43cd11a1b38290b311f764811" kindref="member">ro_write_entry</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1ab2d95932f1b7fd8def90d788f0b704c3" kindref="member">test_mem_domain_remove_add_partition</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[0]),</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>remove<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>still<sp/>work,<sp/>we<sp/>didn&apos;t<sp/>remove<sp/>ro_part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a259fc0a739bb72a9ed589a2fd42bcaca" kindref="member">ro_part_access</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>fault,<sp/>we<sp/>removed<sp/>one<sp/>of<sp/>the<sp/>rw_part<sp/>from<sp/>the<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1ab16bf92e059c6d273052193cdcebb9c1" kindref="member">rw_part_access</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Restore<sp/>test_domain<sp/>contents<sp/>so<sp/>we<sp/>don&apos;t<sp/>mess<sp/>up<sp/>other<sp/>tests<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[0]),</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>work<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1ab16bf92e059c6d273052193cdcebb9c1" kindref="member">rw_part_access</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>user<sp/>mode<sp/>will<sp/>attempt<sp/>to<sp/>initialize<sp/>this<sp/>and<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/><ref refid="mem__domain_8c_1ac905df8721c705a5bfac643eabda4ca7" kindref="member">no_access_domain</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extra<sp/>partition<sp/>that<sp/>a<sp/>user<sp/>thread<sp/>can&apos;t<sp/>add<sp/>to<sp/>a<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>__aligned(MEM_REGION_ALLOC)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a74fbfc23bc4970156e602cc6595bea11" kindref="member">no_access_buf</ref>[MEM_REGION_ALLOC];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(no_access_part,<sp/><ref refid="mem__domain_8c_1a74fbfc23bc4970156e602cc6595bea11" kindref="member">no_access_buf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="mem__domain_8c_1a74fbfc23bc4970156e602cc6595bea11" kindref="member">no_access_buf</ref>),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a9b7cc3c51f518517031d76807470aa10" kindref="member">K_MEM_PARTITION_P_RW_U_RW</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a4d410bfd955f5ee72ebdccacb449be5b" kindref="member">mem_domain_init_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init</ref>(&amp;<ref refid="mem__domain_8c_1ac905df8721c705a5bfac643eabda4ca7" kindref="member">no_access_domain</ref>,<sp/>0,<sp/>NULL),</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>initialize<sp/>memory<sp/>domain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a55b22bce99751d620dfbfa801ff7996e" kindref="member">mem_domain_add_partition_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;no_access_part),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a3bdb8a23b4407bebdfd93da8546203a0" kindref="member">mem_domain_remove_partition_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;ro_part),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>remove<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a94cc6b3d2ed3b55ffb2a6443401987e0" kindref="member">mem_domain_add_thread_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>zzz_thread);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a9cea68be4e91c450e75aabec206aaacd" kindref="member">test_mem_domain_api_supervisor_only</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>of<sp/>these<sp/>should<sp/>fault<sp/>when<sp/>invoked<sp/>from<sp/>a<sp/>user<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a4d410bfd955f5ee72ebdccacb449be5b" kindref="member">mem_domain_init_entry</ref>,<sp/>NULL,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a55b22bce99751d620dfbfa801ff7996e" kindref="member">mem_domain_add_partition_entry</ref>,<sp/>NULL,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a3bdb8a23b4407bebdfd93da8546203a0" kindref="member">mem_domain_remove_partition_entry</ref>,<sp/>NULL,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a1e83c255ad6f3191ba021b4b65f2ba9b" kindref="member">spawn_child_thread</ref>(<ref refid="mem__domain_8c_1a94cc6b3d2ed3b55ffb2a6443401987e0" kindref="member">mem_domain_add_thread_entry</ref>,<sp/>NULL,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a135b7b7054cf989f021cc001a060c837" kindref="member">test_mem_domain_boot_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>a<sp/>static<sp/>thread<sp/>got<sp/>put<sp/>in<sp/>the<sp/>default<sp/>memory<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(zzz_thread-&gt;mem_domain_info.mem_domain<sp/>==</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" kindref="member">k_mem_domain_default</ref>,<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>mem<sp/>domain<sp/>%p&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zzz_thread-&gt;mem_domain_info.mem_domain);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>main<sp/>thread<sp/>is<sp/>also<sp/>a<sp/>member<sp/>of<sp/>the<sp/>default<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(z_main_thread.mem_domain_info.mem_domain<sp/>==</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" kindref="member">k_mem_domain_default</ref>,<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>mem<sp/>domain<sp/>%p&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_main_thread.mem_domain_info.mem_domain);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga1f44bb0307bea7a97227764ecd7bf963" kindref="member">k_thread_abort</ref>(zzz_thread);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a0b27a3cb9132dfdcf9f8b1034b73c1d0" kindref="member">spin_done</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a33fdf2d1958bcc4f290fc46c1f92b4eb" kindref="member">K_SEM_DEFINE</ref>(spin_sem,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a474a2968004221b2e9c0cd39fd0b75ea" kindref="member">spin_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;spin<sp/>thread<sp/>entry\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__semaphore__apis_1gab9be3cf1988af2cd6afdace52d497c84" kindref="member">k_sem_give</ref>(&amp;spin_sem);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="mem__domain_8c_1a0b27a3cb9132dfdcf9f8b1034b73c1d0" kindref="member">spin_done</ref>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(1);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;spin<sp/>thread<sp/>completed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CONFIG_MP_NUM_CPUS<sp/>&gt;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRIO<sp/><sp/><sp/><sp/>K_PRIO_COOP(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRIO<sp/><sp/><sp/><sp/>K_PRIO_PREEMPT(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a66695f107be50be6b6811e12f99d997a" kindref="member">test_mem_domain_migration</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>,<sp/>child_stack,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__stack__api_1ga775f8e6b4144cfdd24f3261b6db64150" kindref="member">K_THREAD_STACK_SIZEOF</ref>(child_stack),<sp/><ref refid="mem__domain_8c_1a474a2968004221b2e9c0cd39fd0b75ea" kindref="member">spin_entry</ref>,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1aef8f07401842218539bdd0f689991002" kindref="member">PRIO</ref>,<sp/><ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref><sp/>|<sp/><ref refid="group__thread__apis_1gaa1788a413a055745d1de71b4da7c2eb2" kindref="member">K_INHERIT_PERMS</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga23107333f134b9c9a8b692374211e841" kindref="member">k_thread_name_set</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>,<sp/></highlight><highlight class="stringliteral">&quot;child_thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__usermode__apis_1ga94087bedf96fe2a2bea437d3d585ca22" kindref="member">k_object_access_grant</ref>(&amp;spin_sem,<sp/>&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga88031bd9fcfcd4305bae4029a4d8416f" kindref="member">k_thread_start</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>that<sp/>the<sp/>child<sp/>thread<sp/>has<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__semaphore__apis_1gac71e2383c1920dddc45a561cacfef090" kindref="member">k_sem_take</ref>(&amp;spin_sem,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;k_sem_take<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>move<sp/>it<sp/>to<sp/>test_domain.<sp/>This<sp/>domain<sp/>also<sp/>has<sp/>the<sp/>ztest<sp/>partition,</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>the<sp/>child<sp/>thread<sp/>should<sp/>keep<sp/>running<sp/>and<sp/>not<sp/>explode</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;migrate<sp/>to<sp/>new<sp/>domain\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>spin_done<sp/>so<sp/>the<sp/>child<sp/>thread<sp/>completes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a768a7dff8592b69f327a08f96b00fa54" kindref="member">printk</ref>(</highlight><highlight class="stringliteral">&quot;set<sp/>test<sp/>completion\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a0b27a3cb9132dfdcf9f8b1034b73c1d0" kindref="member">spin_done</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(&amp;<ref refid="mem__domain_8c_1a15a127467b6a19f4cb0d47df2c636b82" kindref="member">child_thread</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a8c452aa931d8d68d2c43ddaf1bc1aef2" kindref="member">test_mem_part_overlap</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;overlap_part),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/>z_mem_domain_lock;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test__deprecated_1gac3de5965061b1164a8033712c9094e23" kindref="member">ZTEST_BMEM</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" kindref="member">need_recover_spinlock</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/><ref refid="mem__domain_8c_1aa522d3a795e160ccead6d7bbe96ae8ab" kindref="member">test_domain_fail</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a9c973fd8fa4cd6371dfd07db6a93065f" kindref="member">post_fatal_error_handler</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reason,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>z_arch_esf_t<sp/>*pEsf)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" kindref="member">need_recover_spinlock</ref>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__spinlock__apis_1ga0380368fc016ee2a757ad02e1b6804b0" kindref="member">k_spin_release</ref>(&amp;z_mem_domain_lock);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" kindref="member">need_recover_spinlock</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>__aligned(MEM_REGION_ALLOC)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a83823cc94f64e4011e24c2f39e394f2b" kindref="member">exceed_buf</ref>[MEM_REGION_ALLOC];</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(exceed_part,<sp/><ref refid="mem__domain_8c_1a83823cc94f64e4011e24c2f39e394f2b" kindref="member">exceed_buf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="mem__domain_8c_1a83823cc94f64e4011e24c2f39e394f2b" kindref="member">exceed_buf</ref>),</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a9b7cc3c51f518517031d76807470aa10" kindref="member">K_MEM_PARTITION_P_RW_U_RW</ref>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a385e2c5dad5a5d6e17305449fec5d06b" kindref="member">test_mem_part_assert_add_overmax</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_parts<sp/>=<sp/><ref refid="mem__domain_8c_1a4c8de5c111a318ccc18a0d1457d76b84" kindref="member">num_rw_parts</ref><sp/>+<sp/><ref refid="mem__domain_8c_1af8246c2cbae09d2fe43ef2bcf42ac958" kindref="member">PARTS_USED</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>partitions<sp/>of<sp/>the<sp/>domain<sp/>is<sp/>full,<sp/>used<sp/>in</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>previous<sp/>test<sp/>cases.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(max_parts,<sp/><ref refid="group__arch-userspace_1ga71542fcc679a94ad9ea60d7ac46da361" kindref="member">arch_mem_domain_max_partitions_get</ref>(),</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;domain<sp/>still<sp/>have<sp/>room<sp/>of<sp/>partitions(%d).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_parts);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" kindref="member">need_recover_spinlock</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>one<sp/>more<sp/>partition<sp/>will<sp/>fail<sp/>due<sp/>to<sp/>exceeding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;exceed_part),</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_ASSERT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>__aligned(MEM_REGION_ALLOC)<sp/>misc_buf[MEM_REGION_ALLOC];</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(find_no_part,<sp/>misc_buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(misc_buf),</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a708338371e91b5a3f2d44f9ae48849db" kindref="member">K_MEM_PARTITION_P_RO_U_RO</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a0cdcc251c234fb2c7150df5e56fa5b78" kindref="member">test_mem_domain_remove_part_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/>*no_parts<sp/>=<sp/>&amp;find_no_part;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" kindref="member">need_recover_spinlock</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>no_parts),</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>remove<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a0cdcc251c234fb2c7150df5e56fa5b78" kindref="member">test_mem_domain_remove_part_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>();</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1aae1379b152838b79bbf8be04938a8173" kindref="member">test_mem_domain_init_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/>*no_parts[]<sp/>=<sp/>{&amp;ro_part,<sp/>0};</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>init<sp/>another<sp/>domain<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" kindref="member">need_recover_spinlock</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init</ref>(&amp;<ref refid="mem__domain_8c_1aa522d3a795e160ccead6d7bbe96ae8ab" kindref="member">test_domain_fail</ref>,<sp/><ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(no_parts),</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no_parts),</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>initialize<sp/>memory<sp/>domain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a83f139a28d365568e4bb04c65cebf12a" kindref="member">test_mem_part_add_error_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>partition<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1aa522d3a795e160ccead6d7bbe96ae8ab" kindref="member">test_domain_fail</ref>,<sp/>NULL),</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>__aligned(MEM_REGION_ALLOC)<sp/><ref refid="mem__domain_8c_1aefd4bbb286054032c6a70eb93dd4b6fc" kindref="member">nosize_buf</ref>[MEM_REGION_ALLOC];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(nonsize_part,<sp/><ref refid="mem__domain_8c_1aefd4bbb286054032c6a70eb93dd4b6fc" kindref="member">nosize_buf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="mem__domain_8c_1aefd4bbb286054032c6a70eb93dd4b6fc" kindref="member">nosize_buf</ref>),</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a708338371e91b5a3f2d44f9ae48849db" kindref="member">K_MEM_PARTITION_P_RO_U_RO</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a29f1f2f86632556046daf12d6a985a6e" kindref="member">test_mem_part_add_error_zerosize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/>*nosize_part<sp/>=<sp/>&amp;nonsize_part;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nosize_part-&gt;<ref refid="structk__mem__partition_1ab3cb68302158f3dced41dbff4cbb226c" kindref="member">size</ref><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>partition<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1aa522d3a795e160ccead6d7bbe96ae8ab" kindref="member">test_domain_fail</ref>,<sp/>nosize_part),</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a1d1a65d9e3abd4b508f0ca9b1f6910df" kindref="member">test_mem_part_error_wraparound</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_64BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(wraparound_part,<sp/>0xfffffffffffff800,<sp/>2048,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a708338371e91b5a3f2d44f9ae48849db" kindref="member">K_MEM_PARTITION_P_RO_U_RO</ref>);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1af5c0ed38bf50cb22e5afab4ed78de3e6" kindref="member">K_MEM_PARTITION_DEFINE</ref>(wraparound_part,<sp/>0xfffff800,<sp/>2048,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arm__mpu__v7m_8h_1a708338371e91b5a3f2d44f9ae48849db" kindref="member">K_MEM_PARTITION_P_RO_U_RO</ref>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>partition<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1aa522d3a795e160ccead6d7bbe96ae8ab" kindref="member">test_domain_fail</ref>,<sp/>&amp;wraparound_part),</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__domain_8c_1a71142b3b74ff9d1f32e25c4a4b763591" kindref="member">test_mem_part_remove_error_zerosize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/>*no_parts<sp/>=<sp/>&amp;find_no_part;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>&amp;<ref refid="mem__domain_8c_1a411b388558d31c5884fdc4cc73d5fd02" kindref="member">rw_parts</ref>[0]),</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>remove<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>no_parts),</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>add<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no_parts-&gt;<ref refid="structk__mem__partition_1ab3cb68302158f3dced41dbff4cbb226c" kindref="member">size</ref><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>partition<sp/>fail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__domain_8c_1a031138819a34eb0da963bc66d9d83e3c" kindref="member">need_recover_spinlock</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition</ref>(&amp;<ref refid="mem__domain_8c_1ad08cfcece8b7eafa06e89d92e095a6d0" kindref="member">test_domain</ref>,<sp/>no_parts),</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail<sp/>to<sp/>remove<sp/>memory<sp/>partition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/mem_protect/mem_protect/src/mem_domain.c"/>
  </compounddef>
</doxygen>
