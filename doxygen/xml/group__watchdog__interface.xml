<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__watchdog__interface" kind="group">
    <compoundname>watchdog_interface</compoundname>
    <title>Watchdog Interface</title>
    <innerclass refid="structwdt__window" prot="public">wdt_window</innerclass>
    <innerclass refid="structwdt__timeout__cfg" prot="public">wdt_timeout_cfg</innerclass>
      <sectiondef kind="user-defined">
      <header>Watchdog Reset Behavior.</header>
      <description><para>Reset behavior after timeout. </para>
</description>
      <memberdef kind="define" id="group__watchdog__interface_1ga46a9d878848572cacde89a777977c86b" prot="public" static="no">
        <name>WDT_FLAG_RESET_NONE</name>
        <initializer>(0 &lt;&lt; <ref refid="group__watchdog__interface_1gac589b265f9d508ff22faf997c73dd4e6" kindref="member">WDT_FLAG_RESET_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No reset </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="56" column="9" bodyfile="include/drivers/watchdog.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__watchdog__interface_1ga24e1f60628198d8e763cf7ec14afed2e" prot="public" static="no">
        <name>WDT_FLAG_RESET_CPU_CORE</name>
        <initializer>(1 &lt;&lt; <ref refid="group__watchdog__interface_1gac589b265f9d508ff22faf997c73dd4e6" kindref="member">WDT_FLAG_RESET_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CPU core reset </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="58" column="9" bodyfile="include/drivers/watchdog.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__watchdog__interface_1ga71845f454594fac290599f3537d563c9" prot="public" static="no">
        <name>WDT_FLAG_RESET_SOC</name>
        <initializer>(2 &lt;&lt; <ref refid="group__watchdog__interface_1gac589b265f9d508ff22faf997c73dd4e6" kindref="member">WDT_FLAG_RESET_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Global SoC reset </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="60" column="9" bodyfile="include/drivers/watchdog.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__watchdog__interface_1ga11a942c8e7ee7ceae87c4601dbea8486" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* wdt_callback_t) (const struct device *dev, int channel_id)</definition>
        <argsstring>)(const struct device *dev, int channel_id)</argsstring>
        <name>wdt_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Watchdog callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="84" column="9" bodyfile="include/drivers/watchdog.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__watchdog__interface_1gaeb1a64f8c7f986bf864de0306ba429fd" prot="public" static="no">
        <type>int(*</type>
        <definition>wdt_api_setup</definition>
        <argsstring>)(const struct device *dev, uint8_t options)</argsstring>
        <name>wdt_api_setup</name>
        <briefdescription>
<para>Callback API for setting up watchdog instance. See <ref refid="group__watchdog__interface_1ga822239f3d73585e2d01312657dbbb782" kindref="member">wdt_setup()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="113" column="9" bodyfile="include/drivers/watchdog.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__watchdog__interface_1ga2b1afca95837fb2355e4c42f99508cb4" prot="public" static="no">
        <type>int(*</type>
        <definition>wdt_api_disable</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>wdt_api_disable</name>
        <briefdescription>
<para>Callback API for disabling watchdog instance. See <ref refid="group__watchdog__interface_1ga32c32cc911e6a0e20cb2dfdd3945be4e" kindref="member">wdt_disable()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="120" column="9" bodyfile="include/drivers/watchdog.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__watchdog__interface_1gacfc97bea9c13ec073396fa62241dd6ce" prot="public" static="no">
        <type>int(*</type>
        <definition>wdt_api_install_timeout</definition>
        <argsstring>)(const struct device *dev, const struct wdt_timeout_cfg *cfg)</argsstring>
        <name>wdt_api_install_timeout</name>
        <briefdescription>
<para>Callback API for installing new timeout. See <ref refid="group__watchdog__interface_1ga5be7aa7f1987be0e69c74b62d1c126a5" kindref="member">wdt_install_timeout()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="127" column="9" bodyfile="include/drivers/watchdog.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__watchdog__interface_1ga87d42ebd21a4e72e08666d04dde4f5ef" prot="public" static="no">
        <type>int(*</type>
        <definition>wdt_api_feed</definition>
        <argsstring>)(const struct device *dev, int channel_id)</argsstring>
        <name>wdt_api_feed</name>
        <briefdescription>
<para>Callback API for feeding specified watchdog timeout. See (wdt_feed) for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="135" column="9" bodyfile="include/drivers/watchdog.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__watchdog__interface_1ga822239f3d73585e2d01312657dbbb782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wdt_setup</definition>
        <argsstring>(const struct device *dev, uint8_t options)</argsstring>
        <name>wdt_setup</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Set up watchdog instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used for configuring global watchdog settings that affect all timeouts. It should be called after installing timeouts. After successful return, all installed timeouts are valid and must be serviced periodically by calling <ref refid="group__watchdog__interface_1ga87265e8988e928eaa380ea29afb6eabe" kindref="member">wdt_feed()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration options as defined by the WDT_OPT_* constants</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If any of the set options is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If watchdog instance has been already setup. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="163" column="6" declfile="include/drivers/watchdog.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__watchdog__interface_1ga32c32cc911e6a0e20cb2dfdd3945be4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wdt_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>wdt_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable watchdog instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the watchdog instance and automatically uninstalls all timeouts. To set up a new watchdog, install timeouts and call <ref refid="group__watchdog__interface_1ga822239f3d73585e2d01312657dbbb782" kindref="member">wdt_setup()</ref> again. Not all watchdogs can be restarted after they are disabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>If watchdog instance is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>If watchdog can not be disabled directly by application code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="186" column="6" declfile="include/drivers/watchdog.h" declline="186" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__watchdog__interface_1ga5be7aa7f1987be0e69c74b62d1c126a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int wdt_install_timeout</definition>
        <argsstring>(const struct device *dev, const struct wdt_timeout_cfg *cfg)</argsstring>
        <name>wdt_install_timeout</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structwdt__timeout__cfg" kindref="compound">wdt_timeout_cfg</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Install new timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>This function must be used before <ref refid="group__watchdog__interface_1ga822239f3d73585e2d01312657dbbb782" kindref="member">wdt_setup()</ref>. Changes applied here have no effects until <ref refid="group__watchdog__interface_1ga822239f3d73585e2d01312657dbbb782" kindref="member">wdt_setup()</ref> is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to timeout configuration structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful, a non-negative value indicating the index of the channel to which the timeout was assigned. This value is supposed to be used as the parameter in calls to <ref refid="group__watchdog__interface_1ga87265e8988e928eaa380ea29afb6eabe" kindref="member">wdt_feed()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If timeout can not be installed while watchdog has already been setup. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>If no more timeouts can be installed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If any of the set flags is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If any of the window timeout value is out of possible range. This value is also returned if watchdog supports only one timeout value for all timeouts and the supplied timeout window differs from windows for alarms installed so far. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="218" column="19" bodyfile="include/drivers/watchdog.h" bodystart="218" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__watchdog__interface_1ga87265e8988e928eaa380ea29afb6eabe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wdt_feed</definition>
        <argsstring>(const struct device *dev, int channel_id)</argsstring>
        <name>wdt_feed</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Feed specified watchdog timeout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the fed channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>If completing the feed operation would stall the caller, for example due to an in-progress watchdog operation such as a previous <computeroutput><ref refid="group__watchdog__interface_1ga87265e8988e928eaa380ea29afb6eabe" kindref="member">wdt_feed()</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If there is no installed timeout for supplied channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="239" column="6" declfile="include/drivers/watchdog.h" declline="239" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__watchdog__interface_1gafe8472573a7d77a283974cd3843c3c01" prot="public" static="no">
        <name>WDT_OPT_PAUSE_IN_SLEEP</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
<para>Pause watchdog timer when CPU is in sleep state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="34" column="9" bodyfile="include/drivers/watchdog.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__watchdog__interface_1ga6d6e1b7cd126a6ca55a955b783962339" prot="public" static="no">
        <name>WDT_OPT_PAUSE_HALTED_BY_DBG</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
<para>Pause watchdog timer when CPU is halted by the debugger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="39" column="9" bodyfile="include/drivers/watchdog.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__watchdog__interface_1gac589b265f9d508ff22faf997c73dd4e6" prot="public" static="no">
        <name>WDT_FLAG_RESET_SHIFT</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Watchdog reset flag bit field mask shift. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="44" column="9" bodyfile="include/drivers/watchdog.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__watchdog__interface_1ga959a6242486cc104be96e6295a008e42" prot="public" static="no">
        <name>WDT_FLAG_RESET_MASK</name>
        <initializer>(0x3 &lt;&lt; <ref refid="group__watchdog__interface_1gac589b265f9d508ff22faf997c73dd4e6" kindref="member">WDT_FLAG_RESET_SHIFT</ref>)</initializer>
        <briefdescription>
<para>Watchdog reset flag bit field mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/watchdog.h" line="48" column="9" bodyfile="include/drivers/watchdog.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Watchdog Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
