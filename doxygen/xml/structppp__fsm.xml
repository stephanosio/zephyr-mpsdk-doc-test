<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structppp__fsm" kind="struct" language="C++" prot="public">
    <compoundname>ppp_fsm</compoundname>
    <includes refid="ppp_8h" local="no">ppp.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structppp__fsm_1ae033ee41d66ec568dc4244115730114a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref></type>
        <definition>struct k_work_delayable ppp_fsm::timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timeout timer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="226" column="23" bodyfile="include/net/ppp.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a42bb4a40d88893d461d93202c4ad8e2a" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ppp_fsm::config_info_ack) (struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length)</definition>
        <argsstring>)(struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length)</argsstring>
        <name>config_info_ack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acknowledge Configuration Information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="230" column="1" bodyfile="include/net/ppp.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a5a3c96319ec906968701c3eb72ce3d24" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *(*</type>
        <definition>struct net_pkt *(* ppp_fsm::config_info_add) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>config_info_add</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add Configuration Information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="230" column="1" bodyfile="include/net/ppp.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a099cc834fc5e2d062ee4410a1de729c2" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ppp_fsm::config_info_len) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>config_info_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of Configuration Information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="238" column="1" bodyfile="include/net/ppp.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1ad0967edee7fee72368732876ca6bc5e7" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ppp_fsm::config_info_nack) (struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length, bool rejected)</definition>
        <argsstring>)(struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length, bool rejected)</argsstring>
        <name>config_info_nack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Negative Acknowledge Configuration Information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="241" column="1" bodyfile="include/net/ppp.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1ab430e0240f35718f6eaf8f9052a4edde" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ppp_fsm::config_info_req) (struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length, struct net_pkt *ret_pkt)</definition>
        <argsstring>)(struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length, struct net_pkt *ret_pkt)</argsstring>
        <name>config_info_req</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request peer&apos;s Configuration Information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="247" column="1" bodyfile="include/net/ppp.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a90dad2f780b4573559c76e6a67e44f4c" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ppp_fsm::config_info_rej) (struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length)</definition>
        <argsstring>)(struct ppp_fsm *fsm, struct net_pkt *pkt, uint16_t length)</argsstring>
        <name>config_info_rej</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reject Configuration Information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="253" column="1" bodyfile="include/net/ppp.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1afb0296b0d8e9b60594781cfd5f8acee3" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ppp_fsm::config_info_reset) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>config_info_reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset Configuration Information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="258" column="1" bodyfile="include/net/ppp.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1aa1ca37605ab7934c16a5260d531efa00" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ppp_fsm::up) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FSM goes to OPENED state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="261" column="1" bodyfile="include/net/ppp.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a2ba52396156dd1ec63d67dc6ae0a2d5a" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ppp_fsm::down) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FSM leaves OPENED state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="264" column="1" bodyfile="include/net/ppp.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1ad7f2d5d09acb298d29ebc60b4f748478" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ppp_fsm::starting) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>starting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starting this protocol </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="267" column="1" bodyfile="include/net/ppp.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1aecdcdfa2f7264c7b1b2202a23327fa3b" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ppp_fsm::finished) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>finished</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quitting this protocol </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="270" column="1" bodyfile="include/net/ppp.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1ae4f68c11709ab03445b853c12c11c787" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ppp_fsm::proto_reject) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>proto_reject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We received Protocol-Reject </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="273" column="1" bodyfile="include/net/ppp.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1ae0c0b33d5e51a01a63b5afbf5012c0f5" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ppp_fsm::retransmit) (struct ppp_fsm *fsm)</definition>
        <argsstring>)(struct ppp_fsm *fsm)</argsstring>
        <name>retransmit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retransmit </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="276" column="1" bodyfile="include/net/ppp.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1aa302cfe79c73fe081d2642cf54d1d3cf" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref>(*</type>
        <definition>enum net_verdict(* ppp_fsm::proto_extension) (struct ppp_fsm *fsm, enum ppp_packet_type code, uint8_t id, struct net_pkt *pkt)</definition>
        <argsstring>)(struct ppp_fsm *fsm, enum ppp_packet_type code, uint8_t id, struct net_pkt *pkt)</argsstring>
        <name>proto_extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Any code that is not understood by PPP is passed to this FSM for further processing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="276" column="1" bodyfile="include/net/ppp.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1aecaca58bdfec36fee0f2f992e0830bbe" prot="public" static="no" mutable="no">
        <type>struct ppp_fsm::@186</type>
        <definition>struct ppp_fsm::@186 ppp_fsm::cb</definition>
        <argsstring></argsstring>
        <name>cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="285" column="4"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a117a5df8fed62b57a59580a2513fc1c3" prot="public" static="no" mutable="no">
        <type>const struct ppp_my_option_info *</type>
        <definition>const struct ppp_my_option_info* ppp_fsm::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Options information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="289" column="31" bodyfile="include/net/ppp.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a64330e89597eac2b8b841d0f95389473" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structppp__my__option__data" kindref="compound">ppp_my_option_data</ref> *</type>
        <definition>struct ppp_my_option_data* ppp_fsm::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Options negotiation data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="292" column="25" bodyfile="include/net/ppp.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a7e125f9011a9377d18dc523b1f84964f" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t ppp_fsm::count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of negotiated options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="295" column="8" bodyfile="include/net/ppp.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a4e500109683650d2b8648ef88d37625e" prot="public" static="no" mutable="no">
        <type>struct ppp_fsm::@187</type>
        <definition>struct ppp_fsm::@187 ppp_fsm::my_options</definition>
        <argsstring></argsstring>
        <name>my_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="296" column="12"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a489c2d992e03e126ba2d1bbfe7a71b85" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ppp_fsm::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Option bits </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="299" column="10" bodyfile="include/net/ppp.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a31d84f3fa6246bd70d664dbae6845c4b" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ppp_fsm::retransmits</definition>
        <argsstring></argsstring>
        <name>retransmits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of re-transmissions left </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="302" column="10" bodyfile="include/net/ppp.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a0a0523fe16fe45a756615b62e8673828" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ppp_fsm::nack_loops</definition>
        <argsstring></argsstring>
        <name>nack_loops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of NACK loops since last ACK </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="305" column="10" bodyfile="include/net/ppp.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a55c0fe60eb84f33386ec90691ee0f707" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ppp_fsm::recv_nack_loops</definition>
        <argsstring></argsstring>
        <name>recv_nack_loops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of NACKs received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="308" column="10" bodyfile="include/net/ppp.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a054fd1e61e667072a552eadf54634ffc" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char ppp_fsm::terminate_reason[32]</definition>
        <argsstring>[32]</argsstring>
        <name>terminate_reason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reason for closing protocol </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="311" column="6" bodyfile="include/net/ppp.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a2032a922d2e356155c5a4c86cf48ff3d" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ppp_fsm::protocol</definition>
        <argsstring></argsstring>
        <name>protocol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PPP protocol number for this FSM </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="314" column="10" bodyfile="include/net/ppp.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1ab955d11b75231e94ec1613d5c8c027e1" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__ppp_1ga6d4283a0ae63a227933d12d42318cf7c" kindref="member">ppp_state</ref></type>
        <definition>enum ppp_state ppp_fsm::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current state of PPP link </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="317" column="15" bodyfile="include/net/ppp.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a9192c71ef82436c519ac3b8ccd38a089" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* ppp_fsm::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol/layer name of this FSM (for debugging) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="320" column="12" bodyfile="include/net/ppp.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a844c8747b299d3614e5ccff892b45d5c" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t ppp_fsm::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="323" column="9" bodyfile="include/net/ppp.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a8fe52ffe2a17c03ff0432e36c9d43578" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t ppp_fsm::req_id</definition>
        <argsstring></argsstring>
        <name>req_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current request id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="326" column="9" bodyfile="include/net/ppp.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structppp__fsm_1a42777bc7c5f904cbac6bb0b16615fb02" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t ppp_fsm::ack_received</definition>
        <argsstring></argsstring>
        <name>ack_received</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Have received valid Ack, Nack or Reject to a Request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ppp.h" line="329" column="9" bodyfile="include/net/ppp.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Generic PPP Finite State Machine </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>__thread_entry</label>
      </node>
      <node id="8">
        <label>_callee_saved</label>
      </node>
      <node id="12">
        <label>_mem_domain_info</label>
      </node>
      <node id="18">
        <label>_slist</label>
      </node>
      <node id="4">
        <label>_snode</label>
      </node>
      <node id="17">
        <label>_thread_arch</label>
      </node>
      <node id="7">
        <label>_thread_base</label>
      </node>
      <node id="11">
        <label>_thread_stack_info</label>
      </node>
      <node id="19">
        <label>_timeout</label>
      </node>
      <node id="9">
        <label>_wait_q_t</label>
      </node>
      <node id="29">
        <label>device</label>
        <link refid="structdevice"/>
        <childnode refid="30" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>device_state</label>
        <link refid="structdevice__state"/>
      </node>
      <node id="14">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="15" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>k_mutex</label>
        <link refid="structk__mutex"/>
        <childnode refid="9" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="6">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="7" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="4" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>k_work_delayable</label>
        <link refid="structk__work__delayable"/>
        <childnode refid="3" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="6" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>net_buf</label>
        <link refid="structnet__buf"/>
        <childnode refid="4" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>b</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>net_buf_simple</label>
        <link refid="structnet__buf__simple"/>
      </node>
      <node id="24">
        <label>net_context</label>
        <link refid="structnet__context"/>
        <childnode refid="25" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>remote</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>connect_cb</edgelabel>
          <edgelabel>recv_cb</edgelabel>
          <edgelabel>send_cb</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>net_if</label>
        <link refid="structnet__if"/>
        <childnode refid="28" relation="usage">
          <edgelabel>if_dev</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>net_if_config</label>
        <link refid="structnet__if__config"/>
        <childnode refid="34" relation="usage">
          <edgelabel>ip</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>net_if_dev</label>
        <link refid="structnet__if__dev"/>
        <childnode refid="29" relation="usage">
          <edgelabel>dev</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>l2</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>link_addr</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>net_if_ip</label>
        <link refid="structnet__if__ip"/>
      </node>
      <node id="31">
        <label>net_l2</label>
        <link refid="structnet__l2"/>
      </node>
      <node id="32">
        <label>net_linkaddr</label>
        <link refid="structnet__linkaddr"/>
      </node>
      <node id="20">
        <label>net_pkt</label>
        <link refid="structnet__pkt"/>
        <childnode refid="21" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>cursor</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>context</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>iface</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>net_pkt_cursor</label>
        <link refid="structnet__pkt__cursor"/>
        <childnode refid="21" relation="usage">
          <edgelabel>buf</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ppp_fsm</label>
        <link refid="structppp__fsm"/>
        <childnode refid="2" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>config_info_add</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>ppp_my_option_data</label>
        <link refid="structppp__my__option__data"/>
      </node>
      <node id="26">
        <label>sockaddr</label>
        <link refid="structsockaddr"/>
      </node>
      <node id="15">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="13">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/net/ppp.h" line="224" column="1" bodyfile="include/net/ppp.h" bodystart="224" bodyend="330"/>
    <listofallmembers>
      <member refid="structppp__fsm_1a42777bc7c5f904cbac6bb0b16615fb02" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>ack_received</name></member>
      <member refid="structppp__fsm_1aecaca58bdfec36fee0f2f992e0830bbe" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>cb</name></member>
      <member refid="structppp__fsm_1a42bb4a40d88893d461d93202c4ad8e2a" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>config_info_ack</name></member>
      <member refid="structppp__fsm_1a5a3c96319ec906968701c3eb72ce3d24" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>config_info_add</name></member>
      <member refid="structppp__fsm_1a099cc834fc5e2d062ee4410a1de729c2" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>config_info_len</name></member>
      <member refid="structppp__fsm_1ad0967edee7fee72368732876ca6bc5e7" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>config_info_nack</name></member>
      <member refid="structppp__fsm_1a90dad2f780b4573559c76e6a67e44f4c" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>config_info_rej</name></member>
      <member refid="structppp__fsm_1ab430e0240f35718f6eaf8f9052a4edde" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>config_info_req</name></member>
      <member refid="structppp__fsm_1afb0296b0d8e9b60594781cfd5f8acee3" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>config_info_reset</name></member>
      <member refid="structppp__fsm_1a7e125f9011a9377d18dc523b1f84964f" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>count</name></member>
      <member refid="structppp__fsm_1a64330e89597eac2b8b841d0f95389473" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>data</name></member>
      <member refid="structppp__fsm_1a2ba52396156dd1ec63d67dc6ae0a2d5a" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>down</name></member>
      <member refid="structppp__fsm_1aecdcdfa2f7264c7b1b2202a23327fa3b" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>finished</name></member>
      <member refid="structppp__fsm_1a489c2d992e03e126ba2d1bbfe7a71b85" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>flags</name></member>
      <member refid="structppp__fsm_1a844c8747b299d3614e5ccff892b45d5c" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>id</name></member>
      <member refid="structppp__fsm_1a117a5df8fed62b57a59580a2513fc1c3" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>info</name></member>
      <member refid="structppp__fsm_1a4e500109683650d2b8648ef88d37625e" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>my_options</name></member>
      <member refid="structppp__fsm_1a0a0523fe16fe45a756615b62e8673828" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>nack_loops</name></member>
      <member refid="structppp__fsm_1a9192c71ef82436c519ac3b8ccd38a089" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>name</name></member>
      <member refid="structppp__fsm_1aa302cfe79c73fe081d2642cf54d1d3cf" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>proto_extension</name></member>
      <member refid="structppp__fsm_1ae4f68c11709ab03445b853c12c11c787" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>proto_reject</name></member>
      <member refid="structppp__fsm_1a2032a922d2e356155c5a4c86cf48ff3d" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>protocol</name></member>
      <member refid="structppp__fsm_1a55c0fe60eb84f33386ec90691ee0f707" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>recv_nack_loops</name></member>
      <member refid="structppp__fsm_1a8fe52ffe2a17c03ff0432e36c9d43578" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>req_id</name></member>
      <member refid="structppp__fsm_1ae0c0b33d5e51a01a63b5afbf5012c0f5" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>retransmit</name></member>
      <member refid="structppp__fsm_1a31d84f3fa6246bd70d664dbae6845c4b" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>retransmits</name></member>
      <member refid="structppp__fsm_1ad7f2d5d09acb298d29ebc60b4f748478" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>starting</name></member>
      <member refid="structppp__fsm_1ab955d11b75231e94ec1613d5c8c027e1" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>state</name></member>
      <member refid="structppp__fsm_1a054fd1e61e667072a552eadf54634ffc" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>terminate_reason</name></member>
      <member refid="structppp__fsm_1ae033ee41d66ec568dc4244115730114a" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>timer</name></member>
      <member refid="structppp__fsm_1aa1ca37605ab7934c16a5260d531efa00" prot="public" virt="non-virtual"><scope>ppp_fsm</scope><name>up</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
