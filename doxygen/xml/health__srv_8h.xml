<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="health__srv_8h" kind="file" language="C++">
    <compoundname>health_srv.h</compoundname>
    <includedby refid="mesh_8h" local="no">include/bluetooth/mesh.h</includedby>
    <invincdepgraph>
      <node id="2">
        <label>include/bluetooth/mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/mesh/health_srv.h</label>
        <link refid="health__srv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bluetooth/mesh/shell.h</label>
        <link refid="bluetooth_2mesh_2shell_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbt__mesh__health__srv__cb" prot="public">bt_mesh_health_srv_cb</innerclass>
    <innerclass refid="structbt__mesh__health__srv" prot="public">bt_mesh_health_srv</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__mesh__health__srv_1ga35c500e915092ec365862b11e76f92ad" prot="public" static="no">
        <name>BT_MESH_HEALTH_PUB_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_max_faults</defname></param>
        <initializer>	<ref refid="group__bt__mesh__access_1ga8334ff2da1f0dc3ab2fc914059c33622" kindref="member">BT_MESH_MODEL_PUB_DEFINE</ref>(_name, NULL, (1 + 3 + (_max_faults)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper to define a health publication context</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name given to the publication context variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_max_faults</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of faults the element can have. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="144" column="9" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__mesh__health__srv_1ga0b1dbf65d378d563fb90a867ea857b99" prot="public" static="no">
        <name>BT_MESH_MODEL_HEALTH_SRV</name>
        <param><defname>srv</defname></param>
        <param><defname>pub</defname></param>
        <initializer>	<ref refid="group__bt__mesh__access_1gac062c101b7310020e11a527de9c40d3a" kindref="member">BT_MESH_MODEL_CB</ref>(<ref refid="group__bt__mesh__access_1ga6416216348d7186f91175ca50bb8c903" kindref="member">BT_MESH_MODEL_ID_HEALTH_SRV</ref>, bt_mesh_health_srv_op,   \
			 pub, srv, &amp;<ref refid="structbt__mesh__health__srv__cb" kindref="compound">bt_mesh_health_srv_cb</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a new health server model. Note that this API needs to be repeated for each element that the application wants to have a health server model on. Each instance also needs a unique <ref refid="structbt__mesh__health__srv" kindref="compound">bt_mesh_health_srv</ref> and <ref refid="structbt__mesh__model__pub" kindref="compound">bt_mesh_model_pub</ref> context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srv</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a unique struct <ref refid="structbt__mesh__health__srv" kindref="compound">bt_mesh_health_srv</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a unique struct <ref refid="structbt__mesh__model__pub" kindref="compound">bt_mesh_model_pub</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New mesh model instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="171" column="9" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__mesh__health__srv_1ga8151e159cf8cd9dcf3b1f2de6b57d404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mesh_fault_update</definition>
        <argsstring>(struct bt_mesh_elem *elem)</argsstring>
        <name>bt_mesh_fault_update</name>
        <param>
          <type>struct <ref refid="structbt__mesh__elem" kindref="compound">bt_mesh_elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Notify the stack that the fault array state of the given element has changed. </para>
        </briefdescription>
        <detaileddescription>
<para>This prompts the Health server on this element to publish the current fault array if periodic publishing is disabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to update the fault state of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="185" column="5" declfile="include/bluetooth/mesh/health_srv.h" declline="185" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Health Server Model APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_HEALTH_SRV_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_HEALTH_SRV_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structbt__mesh__health__srv__cb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__health__srv__cb" kindref="compound">bt_mesh_health_srv_cb</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="structbt__mesh__health__srv__cb_1a7171b951cb671bdd2df7b0d9c81ac0ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structbt__mesh__health__srv__cb_1a7171b951cb671bdd2df7b0d9c81ac0ec" kindref="member">fault_get_cur</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*model,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*test_id,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*company_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*faults,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*fault_count);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structbt__mesh__health__srv__cb_1ae5c2238699eca2a2e9dabbc73b06b5ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structbt__mesh__health__srv__cb_1ae5c2238699eca2a2e9dabbc73b06b5ff" kindref="member">fault_get_reg</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*model,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>company_id,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*test_id,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*faults,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*fault_count);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structbt__mesh__health__srv__cb_1a0517646cb257e5a87faa7c9634de661d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structbt__mesh__health__srv__cb_1a0517646cb257e5a87faa7c9634de661d" kindref="member">fault_clear</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*model,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>company_id);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structbt__mesh__health__srv__cb_1a3662081648b75993be5257a45bf34768" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structbt__mesh__health__srv__cb_1a3662081648b75993be5257a45bf34768" kindref="member">fault_test</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*model,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>test_id,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>company_id);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structbt__mesh__health__srv__cb_1aa5669eb8b88beb1a9d87183fe537a1fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__health__srv__cb_1aa5669eb8b88beb1a9d87183fe537a1fe" kindref="member">attn_on</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*model);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="structbt__mesh__health__srv__cb_1a2aab487d56e43464b2937e222f98bb05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbt__mesh__health__srv__cb_1a2aab487d56e43464b2937e222f98bb05" kindref="member">attn_off</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*model);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="group__bt__mesh__health__srv_1ga35c500e915092ec365862b11e76f92ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_HEALTH_PUB_DEFINE(_name,<sp/>_max_faults)<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_MODEL_PUB_DEFINE(_name,<sp/>NULL,<sp/>(1<sp/>+<sp/>3<sp/>+<sp/>(_max_faults)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="structbt__mesh__health__srv" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__health__srv" kindref="compound">bt_mesh_health_srv</ref><sp/>{</highlight></codeline>
<codeline lineno="150" refid="structbt__mesh__health__srv_1a3768c03f37cc064a1f9e3fb99fcff77d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model" kindref="compound">bt_mesh_model</ref><sp/>*<ref refid="structbt__mesh__health__srv_1a3768c03f37cc064a1f9e3fb99fcff77d" kindref="member">model</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structbt__mesh__health__srv_1a4d316010b2737eca7bad3aef6774d52b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__health__srv__cb" kindref="compound">bt_mesh_health_srv_cb</ref><sp/>*<ref refid="structbt__mesh__health__srv_1a4d316010b2737eca7bad3aef6774d52b" kindref="member">cb</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="structbt__mesh__health__srv_1a8df7f6c7e434cb717b9b51a3167b5e86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref><sp/><ref refid="structbt__mesh__health__srv_1a8df7f6c7e434cb717b9b51a3167b5e86" kindref="member">attn_timer</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="group__bt__mesh__health__srv_1ga0b1dbf65d378d563fb90a867ea857b99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_MESH_MODEL_HEALTH_SRV(srv,<sp/>pub)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_MESH_MODEL_CB(BT_MESH_MODEL_ID_HEALTH_SRV,<sp/>bt_mesh_health_srv_op,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pub,<sp/>srv,<sp/>&amp;bt_mesh_health_srv_cb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="group__bt__mesh__health__srv_1ga8151e159cf8cd9dcf3b1f2de6b57d404" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__mesh__health__srv_1ga8151e159cf8cd9dcf3b1f2de6b57d404" kindref="member">bt_mesh_fault_update</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mesh__elem" kindref="compound">bt_mesh_elem</ref><sp/>*elem);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model__op" kindref="compound">bt_mesh_model_op</ref><sp/>bt_mesh_health_srv_op[];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mesh__model__cb" kindref="compound">bt_mesh_model_cb</ref><sp/><ref refid="structbt__mesh__health__srv__cb" kindref="compound">bt_mesh_health_srv_cb</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_BLUETOOTH_MESH_HEALTH_SRV_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/mesh/health_srv.h"/>
  </compounddef>
</doxygen>
