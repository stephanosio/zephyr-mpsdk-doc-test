<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__smp__tests" kind="group">
    <compoundname>kernel_smp_tests</compoundname>
    <title>SMP Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__smp__tests_1gaf8cf612155ec7e770ff78b2b2382f1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_smp_coop_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_smp_coop_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify SMP with 2 cooperative threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Multi processing is verified by checking whether 2 cooperative threads run simultaneously at different cores </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="119" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="119" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga1cda346f65b3b6c992bafc671d76d176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_cpu_id_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_cpu_id_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify CPU IDs of threads in SMP. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify whether thread running on other core is parent thread from child thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="172" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="172" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1gac4422c09831ed94cf646359a171f6c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_coop_resched_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_coop_resched_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test cooperative threads non-preemption. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn cooperative threads equal to number of cores supported. Main thread will already be running on 1 core. Check if the last thread created preempts any threads already running. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="270" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="270" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga5c924585e8f9e2c70ff679d9f98c7531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_preempt_resched_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_preempt_resched_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test preemptness of preemptive thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create preemptive thread and let it run on another core and verify if it gets preempted if another thread of higher priority is spawned </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="309" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="309" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1gaa932b5f20a1a0eef142d78a41321e7ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_yield_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_yield_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate behavior of thread when it yields. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn cooperative threads equal to number of cores, so last thread would be pending, call yield() from main thread. Now, all threads must be executed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="340" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="340" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga30622d86cf0516a56650d4352fa1abb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sleep_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_sleep_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test behavior of thread when it sleeps. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn cooperative thread and call <ref refid="unistd_8h_1aaa1de6debea33c41fbfaa909e813c2f4" kindref="member">sleep()</ref> from main thread. After timeout, all threads has to be scheduled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="371" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="371" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga378e5d369380f633a0f3c599d107d265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_wakeup_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_wakeup_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test behavior of wakeup() in SMP case. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn number of threads equal to number of remaining cores and let them sleep for a while. Call wakeup() of those threads from parent thread and check if they are all running </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="451" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="451" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga8719df83a2203b64766f7dd612dfc09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_smp_release_global_lock</definition>
        <argsstring>(void)</argsstring>
        <name>test_smp_release_global_lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test scenairo that a thread release the global lock. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate the scenario that make the internal APIs of SMP z_smp_release_global_lock() to be called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="766" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="766" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga73abecc7cec1174adc97734c85086c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_inc_concurrency</definition>
        <argsstring>(void)</argsstring>
        <name>test_inc_concurrency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test if the concurrency of SMP works or not. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate the global lock and unlock API of SMP are thread-safe. We make 3 thread to increase the global count in differenet cpu and they both do locking then unlocking for LOOP_COUNT times. It shall be no deadlock happened and total global count shall be 3 * LOOP COUNT.</para>
<para>We show the 4 kinds of scenairo:<itemizedlist>
<listitem><para>No any lock used</para>
</listitem><listitem><para>Use global irq lock</para>
</listitem><listitem><para>Use semaphore</para>
</listitem><listitem><para>Use mutex </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="940" column="6" bodyfile="tests/kernel/smp/src/main.c" bodystart="940" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__smp__tests_1ga814d53aaddece1a47f29b91b49073ceb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void process_events</definition>
        <argsstring>(void *arg0, void *arg1, void *arg2)</argsstring>
        <name>process_events</name>
        <param>
          <type>void *</type>
          <declname>arg0</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>Torture test for context switching code. </para>
        </briefdescription>
        <detaileddescription>
<para>Leverage the polling API to stress test the context switching code. This test will hammer all the CPUs with thread swapping requests. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/smp/src/main.c" line="963" column="13" bodyfile="tests/kernel/smp/src/main.c" bodystart="963" bodyend="979"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for SMP. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
