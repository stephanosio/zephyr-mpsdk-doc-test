<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__mesh__cfg__app" kind="group">
    <compoundname>bt_mesh_cfg_app</compoundname>
    <title>Application Configuration</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__mesh__cfg__app_1ga0110ef750489af49a156a259c5a95c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_mesh_app_key_add</definition>
        <argsstring>(uint16_t app_idx, uint16_t net_idx, const uint8_t key[16])</argsstring>
        <name>bt_mesh_app_key_add</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>key</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
<para>Add an Application key. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the Application with the given index to the list of known applications. Allows the node to send and receive model messages encrypted with this Application key.</para>
<para>Every Application is bound to a specific Subnet. The node must know the Subnet the Application is bound to before it can add the Application.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index the Application is bound to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Application key value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>STATUS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The Application was successfully added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_INVALID_NETKEY</parametername>
</parameternamelist>
<parameterdescription>
<para>The NetIdx is unknown. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_INSUFF_RESOURCES</parametername>
</parameternamelist>
<parameterdescription>
<para>There&apos;s no room for storing this Application. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_INVALID_BINDING</parametername>
</parameternamelist>
<parameterdescription>
<para>This AppIdx is already bound to another Subnet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_IDX_ALREADY_STORED</parametername>
</parameternamelist>
<parameterdescription>
<para>This AppIdx is already stored with a different key value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_CANNOT_SET</parametername>
</parameternamelist>
<parameterdescription>
<para>Cannot set the Application key for some reason. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg.h" line="400" column="9" declfile="include/bluetooth/mesh/cfg.h" declline="400" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__app_1ga5ae73ef766f0e1c38c0414c0a34e4053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_mesh_app_key_update</definition>
        <argsstring>(uint16_t app_idx, uint16_t net_idx, const uint8_t key[16])</argsstring>
        <name>bt_mesh_app_key_update</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>key</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
<para>Update an Application key. </para>
        </briefdescription>
        <detaileddescription>
<para>Update an Application with a second Application key, as part of the Key Refresh procedure of the bound Subnet. The node will continue transmitting with the old application key (but receiving on both) until the Subnet enters Key Refresh phase 2. Once the Subnet enters Key Refresh phase 3, the old application key will be deleted.</para>
<para><simplesect kind="note"><para>The Application key can only be updated if the bound Subnet is in Key Refresh phase 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index the Application is bound to, or <ref refid="group__bt__mesh__access_1ga7718cce0713be98a08420c7eab1b40ee" kindref="member">BT_MESH_KEY_ANY</ref> to skip the binding check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>New key value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>STATUS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The Application key was successfully updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_INVALID_NETKEY</parametername>
</parameternamelist>
<parameterdescription>
<para>The NetIdx is unknown. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_INVALID_BINDING</parametername>
</parameternamelist>
<parameterdescription>
<para>This AppIdx is not bound to the given NetIdx. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_CANNOT_UPDATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The Application key cannot be updated for some reason. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_IDX_ALREADY_STORED</parametername>
</parameternamelist>
<parameterdescription>
<para>This AppIdx is already updated with a different key value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg.h" line="427" column="9" declfile="include/bluetooth/mesh/cfg.h" declline="427" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__app_1gaa0e80a19c14d47808fc11459bf5ea2eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_mesh_app_key_del</definition>
        <argsstring>(uint16_t app_idx, uint16_t net_idx)</argsstring>
        <name>bt_mesh_app_key_del</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <briefdescription>
<para>Delete an Application key. </para>
        </briefdescription>
        <detaileddescription>
<para>All models bound to this application will remove this binding. All models publishing with this application will stop publishing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>STATUS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The Application key was successfully deleted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_INVALID_NETKEY</parametername>
</parameternamelist>
<parameterdescription>
<para>The NetIdx is unknown. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATUS_INVALID_BINDING</parametername>
</parameternamelist>
<parameterdescription>
<para>This AppIdx is not bound to the given NetIdx. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg.h" line="442" column="9" declfile="include/bluetooth/mesh/cfg.h" declline="442" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__app_1ga42c46a936e589460225a1fa69598a1ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool bt_mesh_app_key_exists</definition>
        <argsstring>(uint16_t app_idx)</argsstring>
        <name>bt_mesh_app_key_exists</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idx</declname>
        </param>
        <briefdescription>
<para>Check if an Application key is known. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>app_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Application index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the Application is known, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg.h" line="450" column="6" declfile="include/bluetooth/mesh/cfg.h" declline="450" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__mesh__cfg__app_1gad7a949a0a814f6c9a26816c076d8b92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t bt_mesh_app_keys_get</definition>
        <argsstring>(uint16_t net_idx, uint16_t app_idxs[], size_t max, off_t skip)</argsstring>
        <name>bt_mesh_app_keys_get</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>net_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>app_idxs</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>max</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
<para>Get a list of all known Application key indexes. </para>
        </briefdescription>
        <detaileddescription>
<para>Builds a list of all Application indexes for the given network index in the <computeroutput>app_idxs</computeroutput> array. If the <computeroutput>app_idxs</computeroutput> array cannot fit all bound Applications, this function fills all available entries and returns <computeroutput>-ENOMEM</computeroutput>. In this case, the next <computeroutput>max</computeroutput> entries of the list can be read out by calling <programlisting><codeline><highlight class="normal">bt_mesh_app_keys_get(net_idx,<sp/>list,<sp/>max,<sp/>max);</highlight></codeline>
</programlisting></para>
<para>Note that any changes to the Application key list between calls to this function could change the order and number of entries in the list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Network Index to get the Applications of, or <ref refid="group__bt__mesh__access_1ga7718cce0713be98a08420c7eab1b40ee" kindref="member">BT_MESH_KEY_ANY</ref> to get all Applications. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>app_idxs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Max number of indexes to return. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indexes to skip. Enables batched processing of the list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of indexes added to the <computeroutput>app_idxs</computeroutput> array, or <computeroutput>-ENOMEM</computeroutput> if the number of known Applications exceeds the <computeroutput>max</computeroutput> parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/cfg.h" line="476" column="9" declfile="include/bluetooth/mesh/cfg.h" declline="476" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Application Configuration. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
