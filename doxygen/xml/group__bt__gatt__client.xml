<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__gatt__client" kind="group">
    <compoundname>bt_gatt_client</compoundname>
    <title>GATT Client APIs</title>
    <innerclass refid="structbt__gatt__exchange__params" prot="public">bt_gatt_exchange_params</innerclass>
    <innerclass refid="structbt__gatt__discover__params" prot="public">bt_gatt_discover_params</innerclass>
    <innerclass refid="structbt__gatt__read__params" prot="public">bt_gatt_read_params</innerclass>
    <innerclass refid="structbt__gatt__write__params" prot="public">bt_gatt_write_params</innerclass>
    <innerclass refid="structbt__gatt__subscribe__params" prot="public">bt_gatt_subscribe_params</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__bt__gatt__client_1ga9e93d8eae633734dfeb29e24a1f3a7c0" prot="public" static="no" strong="no">
        <type></type>
        <name>@67</name>
        <enumvalue id="group__bt__gatt__client_1gga9e93d8eae633734dfeb29e24a1f3a7c0ada9ac33aa77f6043da8133dcf269478f" prot="public">
          <name>BT_GATT_DISCOVER_PRIMARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Discover Primary Services. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1gga9e93d8eae633734dfeb29e24a1f3a7c0a21be62548b816c7960a54dd6e3b37a97" prot="public">
          <name>BT_GATT_DISCOVER_SECONDARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Discover Secondary Services. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1gga9e93d8eae633734dfeb29e24a1f3a7c0a80afff1c83bb5ebb5603af699f2c26da" prot="public">
          <name>BT_GATT_DISCOVER_INCLUDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Discover Included Services. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1gga9e93d8eae633734dfeb29e24a1f3a7c0a71355dfe0bf30c88f9fe2f7da1ba10ae" prot="public">
          <name>BT_GATT_DISCOVER_CHARACTERISTIC</name>
          <briefdescription>
<para>Discover Characteristic Values. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    Discover Characteristic Value and its properties.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1gga9e93d8eae633734dfeb29e24a1f3a7c0a0ccb2587aa8f21361c5d73847a33ecbe" prot="public">
          <name>BT_GATT_DISCOVER_DESCRIPTOR</name>
          <briefdescription>
<para>Discover Descriptors. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    Discover Attributes which are not services or characteristics.

    @note The use of this type of discover is not recommended for
          discovering in ranges across multiple services/characteristics
          as it may incur in extra round trips.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1gga9e93d8eae633734dfeb29e24a1f3a7c0afe2167b873b848935d56f6ee7f2c444c" prot="public">
          <name>BT_GATT_DISCOVER_ATTRIBUTE</name>
          <briefdescription>
<para>Discover Attributes. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    Discover Attributes of any type.

    @note The use of this type of discover is not recommended for
          discovering in ranges across multiple services/characteristics
          as it may incur in more round trips.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1gga9e93d8eae633734dfeb29e24a1f3a7c0a81a1f8737c415544a0f793f4e626bb61" prot="public">
          <name>BT_GATT_DISCOVER_STD_CHAR_DESC</name>
          <briefdescription>
<para>Discover standard characteristic descriptor values. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    Discover standard characterestic descriptor values and their
    properties.
    Supported descriptors:
     - Characteristic Extended Properties
     - Client Characteristic Configuration
     - Server Characteristic Configuration
     - Characteristic Presentation Format
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GATT Discover types </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1275" column="1" bodyfile="include/bluetooth/gatt.h" bodystart="1275" bodyend="1316"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__gatt__client_1gaeb8e1c282570d629a6b603a94a4650d6" prot="public" static="no" strong="no">
        <type></type>
        <name>@68</name>
        <enumvalue id="group__bt__gatt__client_1ggaeb8e1c282570d629a6b603a94a4650d6aecdcb3baa850505f459523091c92a1cb" prot="public">
          <name>BT_GATT_SUBSCRIBE_FLAG_VOLATILE</name>
          <briefdescription>
<para>Persistence flag. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    If set, indicates that the subscription is not saved
    on the GATT server side. Therefore, upon disconnection,
    the subscription will be automatically removed
    from the client&apos;s subscriptions list and
    when the client reconnects, it will have to
    issue a new subscription.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1ggaeb8e1c282570d629a6b603a94a4650d6a30bfd3fb4bf4f17653ba00942ba2b2e6" prot="public">
          <name>BT_GATT_SUBSCRIBE_FLAG_NO_RESUB</name>
          <briefdescription>
<para>No resubscribe flag. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    By default when BT_GATT_SUBSCRIBE_FLAG_VOLATILE is unset, the
    subscription will be automatically renewed when the client
    reconnects, as a workaround for GATT servers that do not persist
    subscriptions.

    This flag will disable the automatic resubscription. It is useful
    if the application layer knows that the GATT server remembers
    subscriptions from previous connections and wants to avoid renewing
    the subscriptions.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1ggaeb8e1c282570d629a6b603a94a4650d6afe1c3dc9380c33debd32a275d5bce8ad" prot="public">
          <name>BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING</name>
          <briefdescription>
<para>Write pending flag. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    If set, indicates write operation is pending waiting remote end to
    respond.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__gatt__client_1ggaeb8e1c282570d629a6b603a94a4650d6a5640a1e06740a89859c5f4b183d58e79" prot="public">
          <name>BT_GATT_SUBSCRIBE_NUM_FLAGS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subscription flags </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1618" column="1" bodyfile="include/bluetooth/gatt.h" bodystart="1618" bodyend="1652"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__gatt__client_1ga293c512555f2677f3c1b82c80f6fcfff" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref>(*</type>
        <definition>bt_gatt_discover_func_t</definition>
        <argsstring>)(struct bt_conn *conn, const struct bt_gatt_attr *attr, struct bt_gatt_discover_params *params)</argsstring>
        <name>bt_gatt_discover_func_t</name>
        <briefdescription>
<para>Discover attribute callback function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute found, or NULL if not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Discovery parameters given.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If discovery procedure has completed this callback will be called with attr set to NULL. This will not happen if procedure was stopped by returning BT_GATT_ITER_STOP.</para>
<para>The attribute object as well as its UUID and value objects are temporary and must be copied to in order to cache its information. Only the following fields of the attribute contains valid information:<itemizedlist>
<listitem><para>uuid UUID representing the type of attribute.</para>
</listitem><listitem><para>handle Handle in the remote database.</para>
</listitem><listitem><para>user_data The value of the attribute. Will be NULL when discovering descriptors</para>
</listitem></itemizedlist>
</para>
<para>To be able to read the value of the discovered attribute the user_data must be cast to an appropriate type.<itemizedlist>
<listitem><para><ref refid="structbt__gatt__service__val" kindref="compound">bt_gatt_service_val</ref> when UUID is <ref refid="group__bt__uuid_1ga6e87ce1575494eb90358e074e8dbe276" kindref="member">BT_UUID_GATT_PRIMARY</ref> or <ref refid="group__bt__uuid_1gad084d3658e663b6b8e200be256c54cdb" kindref="member">BT_UUID_GATT_SECONDARY</ref>.</para>
</listitem><listitem><para><ref refid="structbt__gatt__include" kindref="compound">bt_gatt_include</ref> when UUID is <ref refid="group__bt__uuid_1ga995596ff7374ebcb44d4706bc16234e4" kindref="member">BT_UUID_GATT_INCLUDE</ref>.</para>
</listitem><listitem><para><ref refid="structbt__gatt__chrc" kindref="compound">bt_gatt_chrc</ref> when UUID is <ref refid="group__bt__uuid_1gadcedbbe1c432c4ac737e54b318e01a0f" kindref="member">BT_UUID_GATT_CHRC</ref>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>BT_GATT_ITER_CONTINUE to continue discovery procedure. </para>
</simplesect>
<simplesect kind="return"><para>BT_GATT_ITER_STOP to stop discovery procedure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1270" column="9" bodyfile="include/bluetooth/gatt.h" bodystart="1270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__client_1ga6961aab3df8b42f02f546516e15a0ad0" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref>(*</type>
        <definition>bt_gatt_read_func_t</definition>
        <argsstring>)(struct bt_conn *conn, uint8_t err, struct bt_gatt_read_params *params, const void *data, uint16_t length)</argsstring>
        <name>bt_gatt_read_func_t</name>
        <briefdescription>
<para>Read callback function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT error code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Read parameters used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute value data. NULL means read has completed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute value length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BT_GATT_ITER_CONTINUE if should continue to the next attribute. </para>
</simplesect>
<simplesect kind="return"><para>BT_GATT_ITER_STOP to stop. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1398" column="9" bodyfile="include/bluetooth/gatt.h" bodystart="1398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__client_1gaf70aa5f9a87d1edb1a7c50cd1f7ab234" prot="public" static="no">
        <type>void(*</type>
        <definition>bt_gatt_write_func_t</definition>
        <argsstring>)(struct bt_conn *conn, uint8_t err, struct bt_gatt_write_params *params)</argsstring>
        <name>bt_gatt_write_func_t</name>
        <briefdescription>
<para>Write callback function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT error code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Write parameters used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1486" column="9" bodyfile="include/bluetooth/gatt.h" bodystart="1486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__client_1gad38ed6884a40271e77b58632172674d5" prot="public" static="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref>(*</type>
        <definition>bt_gatt_notify_func_t</definition>
        <argsstring>)(struct bt_conn *conn, struct bt_gatt_subscribe_params *params, const void *data, uint16_t length)</argsstring>
        <name>bt_gatt_notify_func_t</name>
        <briefdescription>
<para>Notification callback function. </para>
        </briefdescription>
        <detaileddescription>
<para>In the case of an empty notification, the <computeroutput>data</computeroutput> pointer will be non-NULL while the <computeroutput>length</computeroutput> will be 0, which is due to the special case where a <computeroutput>data</computeroutput> NULL pointer means unsubscribed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. May be NULL, indicating that the peer is being unpaired </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscription parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute value data. If NULL then subscription was removed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute value length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BT_GATT_ITER_CONTINUE to continue receiving value notifications. BT_GATT_ITER_STOP to unsubscribe from value notifications. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1613" column="9" bodyfile="include/bluetooth/gatt.h" bodystart="1613" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__gatt__client_1ga0f41da23c6559a8254b04295aff8198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_exchange_mtu</definition>
        <argsstring>(struct bt_conn *conn, struct bt_gatt_exchange_params *params)</argsstring>
        <name>bt_gatt_exchange_mtu</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__gatt__exchange__params" kindref="compound">bt_gatt_exchange_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Exchange MTU. </para>
        </briefdescription>
        <detaileddescription>
<para>This client procedure can be used to set the MTU to the maximum possible size the buffers can hold.</para>
<para><simplesect kind="note"><para>Shall only be used once per connection.</para>
</simplesect>
The Response comes in callback <computeroutput>params-&gt;func</computeroutput>. The callback is run from the BT RX thread. <computeroutput>params</computeroutput> must remain valid until start of callback.</para>
<para>This function will block while the ATT request queue is full, except when called from the BT RX thread, as this would cause a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Exchange MTU parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request. Will call <computeroutput>params-&gt;func</computeroutput> on resolution.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside the BT RX thread to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1236" column="5" declfile="include/bluetooth/gatt.h" declline="1236" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1gac06a945e5f7939b6716bc4f2cea781bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_discover</definition>
        <argsstring>(struct bt_conn *conn, struct bt_gatt_discover_params *params)</argsstring>
        <name>bt_gatt_discover</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__gatt__discover__params" kindref="compound">bt_gatt_discover_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>GATT Discover function. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to discover attributes on a server.</para>
<para>Primary Service Discovery: Procedure allows to discover specific Primary Service based on UUID. Include Service Discovery: Procedure allows to discover all Include Services within specified range. Characteristic Discovery: Procedure allows to discover all characteristics within specified handle range as well as discover characteristics with specified UUID. Descriptors Discovery: Procedure allows to discover all characteristic descriptors within specified range.</para>
<para>For each attribute found the callback is called which can then decide whether to continue discovering or stop.</para>
<para>The Response comes in callback <computeroutput>params-&gt;func</computeroutput>. The callback is run from the BT RX thread. <computeroutput>params</computeroutput> must remain valid until start of callback where iter <computeroutput>attr</computeroutput> is <computeroutput>NULL</computeroutput> or callback will return <computeroutput>BT_GATT_ITER_STOP</computeroutput>.</para>
<para>This function will block while the ATT request queue is full, except when called from the BT RX thread, as this would cause a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Discover parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request. Will call <computeroutput>params-&gt;func</computeroutput> on resolution.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside the BT RX thread to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1381" column="5" declfile="include/bluetooth/gatt.h" declline="1381" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga1a18dd726ab960a88d7f85f2a014141a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_read</definition>
        <argsstring>(struct bt_conn *conn, struct bt_gatt_read_params *params)</argsstring>
        <name>bt_gatt_read</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__gatt__read__params" kindref="compound">bt_gatt_read_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Read Attribute Value by handle. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure read the attribute value and return it to the callback.</para>
<para>When reading attributes by UUID the callback can be called multiple times depending on how many instances of given the UUID exists with the start_handle being updated for each instance.</para>
<para>If an instance does contain a long value which cannot be read entirely the caller will need to read the remaining data separately using the handle and offset.</para>
<para>The Response comes in callback <computeroutput>params-&gt;func</computeroutput>. The callback is run from the BT RX thread. <computeroutput>params</computeroutput> must remain valid until start of callback.</para>
<para>This function will block while the ATT request queue is full, except when called from the BT RX thread, as this would cause a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Read parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request. Will call <computeroutput>params-&gt;func</computeroutput> on resolution.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside the BT RX thread to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1475" column="5" declfile="include/bluetooth/gatt.h" declline="1475" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga843a42e68e0497d88d3f655f8ffd58d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_write</definition>
        <argsstring>(struct bt_conn *conn, struct bt_gatt_write_params *params)</argsstring>
        <name>bt_gatt_write</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__gatt__write__params" kindref="compound">bt_gatt_write_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Write Attribute Value by handle. </para>
        </briefdescription>
        <detaileddescription>
<para>The Response comes in callback <computeroutput>params-&gt;func</computeroutput>. The callback is run from the BT RX thread. <computeroutput>params</computeroutput> must remain valid until start of callback.</para>
<para>This function will block while the ATT request queue is full, except when called from Bluetooth event context. When called from Bluetooth context, this function will instead instead return <computeroutput>-ENOMEM</computeroutput> if it would block to avoid a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Write parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request. Will call <computeroutput>params-&gt;func</computeroutput> on resolution.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside Bluetooth event context to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1524" column="5" declfile="include/bluetooth/gatt.h" declline="1524" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga49439413d12b5a8a1c68735e961ab6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_write_without_response_cb</definition>
        <argsstring>(struct bt_conn *conn, uint16_t handle, const void *data, uint16_t length, bool sign, bt_gatt_complete_func_t func, void *user_data)</argsstring>
        <name>bt_gatt_write_without_response_cb</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>sign</declname>
        </param>
        <param>
          <type><ref refid="group__bt__gatt__server_1gac55832607b95f394d26a64ed1cfe5bba" kindref="member">bt_gatt_complete_func_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Write Attribute Value by handle without response with callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This function works in the same way as <ref refid="group__bt__gatt__client_1ga9fc78e32230637a6f092da2400c50fe7" kindref="member">bt_gatt_write_without_response</ref>. With the addition that after sending the write the callback function will be called.</para>
<para>The callback is run from System Workqueue context. When called from the System Workqueue context this API will not wait for resources for the callback but instead return an error. The number of pending callbacks can be increased with the <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_CONN_TX_MAX` </verbatim> option.</para>
<para><simplesect kind="note"><para>By using a callback it also disable the internal flow control which would prevent sending multiple commands without waiting for their transmissions to complete, so if that is required the caller shall not submit more data until the callback is called.</para>
</simplesect>
This function will block while the ATT request queue is full, except when called from the BT RX thread, as this would cause a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to sign data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmission complete callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to be passed back to callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside the BT RX thread to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1561" column="5" declfile="include/bluetooth/gatt.h" declline="1561" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga9fc78e32230637a6f092da2400c50fe7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_gatt_write_without_response</definition>
        <argsstring>(struct bt_conn *conn, uint16_t handle, const void *data, uint16_t length, bool sign)</argsstring>
        <name>bt_gatt_write_without_response</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>sign</declname>
        </param>
        <briefdescription>
<para>Write Attribute Value by handle without response. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure write the attribute value without requiring an acknowledgment that the write was successfully performed</para>
<para>This function will block while the ATT request queue is full, except when called from the BT RX thread, as this would cause a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to sign data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside the BT RX thread to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1587" column="19" bodyfile="include/bluetooth/gatt.h" bodystart="1587" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga7d4a8e18f51ba6476886a15f81f48e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_subscribe</definition>
        <argsstring>(struct bt_conn *conn, struct bt_gatt_subscribe_params *params)</argsstring>
        <name>bt_gatt_subscribe</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__gatt__subscribe__params" kindref="compound">bt_gatt_subscribe_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Subscribe Attribute Value Notification. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure subscribe to value notification using the Client Characteristic Configuration handle. If notification received subscribe value callback is called to return notified value. One may then decide whether to unsubscribe directly from this callback. Notification callback with NULL data will not be called if subscription was removed by this method.</para>
<para>The Response comes in callback <computeroutput>params-&gt;func</computeroutput>. The callback is run from the BT RX thread. <computeroutput>params</computeroutput> must remain valid until start of callback. The Notification callback <computeroutput>params-&gt;notify</computeroutput> is also called from the BT RX thread.</para>
<para><simplesect kind="note"><para>Notifications are asynchronous therefore the parameters need to remain valid while subscribed.</para>
</simplesect>
This function will block while the ATT request queue is full, except when called from the BT RX thread, as this would cause a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscribe parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request. Will call <computeroutput>params-&gt;write</computeroutput> on resolution.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside the BT RX thread to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1709" column="5" declfile="include/bluetooth/gatt.h" declline="1709" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga791b8bb8a4c085b022fafc0535a63511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_resubscribe</definition>
        <argsstring>(uint8_t id, const bt_addr_le_t *peer, struct bt_gatt_subscribe_params *params)</argsstring>
        <name>bt_gatt_resubscribe</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__gatt__subscribe__params" kindref="compound">bt_gatt_subscribe_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Resubscribe Attribute Value Notification subscription. </para>
        </briefdescription>
        <detaileddescription>
<para>Resubscribe to Attribute Value Notification when already subscribed from a previous connection. The GATT server will remember subscription from previous connections when bonded, so resubscribing can be done without performing a new subscribe procedure after a power cycle.</para>
<para><simplesect kind="note"><para>Notifications are asynchronous therefore the parameters need to remain valid while subscribed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Local identity (in most cases BT_ID_DEFAULT). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscribe parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1728" column="5" declfile="include/bluetooth/gatt.h" declline="1728" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga56509c9b8f73f729cfa5e75be22d79ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_gatt_unsubscribe</definition>
        <argsstring>(struct bt_conn *conn, struct bt_gatt_subscribe_params *params)</argsstring>
        <name>bt_gatt_unsubscribe</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__gatt__subscribe__params" kindref="compound">bt_gatt_subscribe_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Unsubscribe Attribute Value Notification. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure unsubscribe to value notification using the Client Characteristic Configuration handle. Notification callback with NULL data will be called if subscription was removed by this call, until then the parameters cannot be reused.</para>
<para>The Response comes in callback <computeroutput>params-&gt;func</computeroutput>. The callback is run from the BT RX thread.</para>
<para>This function will block while the ATT request queue is full, except when called from the BT RX thread, as this would cause a deadlock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Subscribe parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully queued request. Will call <computeroutput>params-&gt;write</computeroutput> on resolution.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>ATT request queue is full and blocking would cause deadlock. Allow a pending request to resolve before retrying, or call this function outside the BT RX thread to get blocking behavior. Queue size is controlled by <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_L2CAP_TX_BUF_COUNT` </verbatim>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1755" column="5" declfile="include/bluetooth/gatt.h" declline="1755" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__client_1ga5193dea59a016692f94cf950d6b4f4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_gatt_cancel</definition>
        <argsstring>(struct bt_conn *conn, void *params)</argsstring>
        <name>bt_gatt_cancel</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Try to cancel the first pending request identified by <computeroutput>params</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does not release <computeroutput>params</computeroutput> for reuse. The usual callbacks for the request still apply. A successful cancel simulates a <ref refid="att_8h_1a992baa1f0d763a00f314bdcf59965bdd" kindref="member">BT_ATT_ERR_UNLIKELY</ref> response from the server.</para>
<para>This function can cancel the following request functions:<itemizedlist>
<listitem><para><ref refid="group__bt__gatt__client_1ga0f41da23c6559a8254b04295aff8198d" kindref="member">bt_gatt_exchange_mtu</ref></para>
</listitem><listitem><para><ref refid="group__bt__gatt__client_1gac06a945e5f7939b6716bc4f2cea781bd" kindref="member">bt_gatt_discover</ref></para>
</listitem><listitem><para><ref refid="group__bt__gatt__client_1ga1a18dd726ab960a88d7f85f2a014141a" kindref="member">bt_gatt_read</ref></para>
</listitem><listitem><para><ref refid="group__bt__gatt__client_1ga843a42e68e0497d88d3f655f8ffd58d4" kindref="member">bt_gatt_write</ref></para>
</listitem><listitem><para><ref refid="group__bt__gatt__client_1ga7d4a8e18f51ba6476886a15f81f48e5c" kindref="member">bt_gatt_subscribe</ref></para>
</listitem><listitem><para><ref refid="group__bt__gatt__client_1ga56509c9b8f73f729cfa5e75be22d79ae" kindref="member">bt_gatt_unsubscribe</ref></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection the request was issued on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>The address <computeroutput>params</computeroutput> used in the request function call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/gatt.h" line="1775" column="6" declfile="include/bluetooth/gatt.h" declline="1775" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
