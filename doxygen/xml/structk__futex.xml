<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structk__futex" kind="struct" language="C++" prot="public">
    <compoundname>k_futex</compoundname>
    <includes refid="include_2kernel_8h" local="no">kernel.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structk__futex_1a454ad1b595b899306c8e9c8e1431e7a7" prot="public" static="no" mutable="no">
        <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref></type>
        <definition>atomic_t k_futex::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1924" column="10" bodyfile="include/kernel.h" bodystart="1924" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>futex structure </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="structk__futex" kindref="compound">k_futex</ref> is a lightweight mutual exclusion primitive designed to minimize kernel involvement. Uncontended operation relies only on atomic access to shared memory. <ref refid="structk__futex" kindref="compound">k_futex</ref> are tracked as kernel objects and can live in user memory so that any access bypasses the kernel object permission management mechanism. </para>
    </detaileddescription>
    <location file="include/kernel.h" line="1923" column="1" bodyfile="include/kernel.h" bodystart="1923" bodyend="1925"/>
    <listofallmembers>
      <member refid="structk__futex_1a454ad1b595b899306c8e9c8e1431e7a7" prot="public" virt="non-virtual"><scope>k_futex</scope><name>val</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
