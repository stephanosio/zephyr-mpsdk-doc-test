<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__usb__hid__device__api" kind="group">
    <compoundname>usb_hid_device_api</compoundname>
    <title>HID class USB specific definitions</title>
    <innerclass refid="structhid__ops" prot="public">hid_ops</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__usb__hid__device__api_1ga04ec088255198d1597df8d70db6257ee" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* hid_cb_t) (const struct device *dev, struct usb_setup_packet *setup, int32_t *len, uint8_t **data)</definition>
        <argsstring>)(const struct device *dev, struct usb_setup_packet *setup, int32_t *len, uint8_t **data)</argsstring>
        <name>hid_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="35" column="9" bodyfile="include/usb/class/usb_hid.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__usb__hid__device__api_1gaed433e24f8487d4e451d9f9daa08c5b0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* hid_int_ready_callback) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>hid_int_ready_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="38" column="9" bodyfile="include/usb/class/usb_hid.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__usb__hid__device__api_1gae3d308c55f5594cc0c926b52aaa28fc7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* hid_protocol_cb_t) (const struct device *dev, uint8_t protocol)</definition>
        <argsstring>)(const struct device *dev, uint8_t protocol)</argsstring>
        <name>hid_protocol_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="39" column="9" bodyfile="include/usb/class/usb_hid.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__usb__hid__device__api_1ga61b4facfbfb729159135f5c7534ca593" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* hid_idle_cb_t) (const struct device *dev, uint16_t report_id)</definition>
        <argsstring>)(const struct device *dev, uint16_t report_id)</argsstring>
        <name>hid_idle_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="40" column="9" bodyfile="include/usb/class/usb_hid.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__usb__hid__device__api_1ga8b08b633472ceb1323f09ef81176520f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usb_hid_register_device</definition>
        <argsstring>(const struct device *dev, const uint8_t *desc, size_t size, const struct hid_ops *op)</argsstring>
        <name>usb_hid_register_device</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const struct <ref refid="structhid__ops" kindref="compound">hid_ops</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Register HID device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USB HID device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to HID report descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of HID report descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USB HID device interrupt struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="70" column="6" declfile="include/usb/class/usb_hid.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__hid__device__api_1ga9d82d48c9c6c94ad90e01f44c1f0e72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hid_int_ep_write</definition>
        <argsstring>(const struct device *dev, const uint8_t *data, uint32_t data_len, uint32_t *bytes_ret)</argsstring>
        <name>hid_int_ep_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>bytes_ret</declname>
        </param>
        <briefdescription>
<para>Write to USB HID interrupt endpoint buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USB HID device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytes_ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes written to the EP buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="85" column="5" declfile="include/usb/class/usb_hid.h" declline="85" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__hid__device__api_1ga7d1b97dd70c25c816a2c78447be13c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hid_int_ep_read</definition>
        <argsstring>(const struct device *dev, uint8_t *data, uint32_t max_data_len, uint32_t *ret_bytes)</argsstring>
        <name>hid_int_ep_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>ret_bytes</declname>
        </param>
        <briefdescription>
<para>Read from USB HID interrupt endpoint buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USB HID device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length of data to copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ret_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to copy. If data is NULL and ret_bytes is 0 the number of bytes available in the buffer will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="102" column="5" declfile="include/usb/class/usb_hid.h" declline="102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__hid__device__api_1gafb6073889bf17eb6a93bb8f182cd3f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_hid_set_proto_code</definition>
        <argsstring>(const struct device *dev, uint8_t proto_code)</argsstring>
        <name>usb_hid_set_proto_code</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>proto_code</declname>
        </param>
        <briefdescription>
<para>Set USB HID class Protocol Code. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be called before <ref refid="group__usb__hid__device__api_1ga88c23fc42f45f4ac05d9b2c1f6d7ec9b" kindref="member">usb_hid_init()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USB HID device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">proto_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Protocol Code to be used for bInterfaceProtocol</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="117" column="5" declfile="include/usb/class/usb_hid.h" declline="117" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__usb__hid__device__api_1ga88c23fc42f45f4ac05d9b2c1f6d7ec9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_hid_init</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>usb_hid_init</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Initialize USB HID class support. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USB HID device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/class/usb_hid.h" line="126" column="5" declfile="include/usb/class/usb_hid.h" declline="126" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
