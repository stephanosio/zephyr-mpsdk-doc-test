<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mm__drv__apis" kind="group">
    <compoundname>mm_drv_apis</compoundname>
    <title>Memory Management Driver APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mm__drv__apis_1ga7097d4d8880cb0c3d5db7623ffc11b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_map_page</definition>
        <argsstring>(void *virt, uintptr_t phys, uint32_t flags)</argsstring>
        <name>sys_mm_drv_map_page</name>
        <param>
          <type>void *</type>
          <declname>virt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>phys</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Map one physical page into the virtual address space. </para>
        </briefdescription>
        <detaileddescription>
<para>This maps one physical page into the virtual address space. Behavior when providing unaligned address is undefined, this is assumed to be page aligned.</para>
<para>The memory range itself is never accessed by this operation.</para>
<para>This API must be safe to call in ISRs or exception handlers. Calls to this API are assumed to be serialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned destination virtual address to map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phys</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned source physical address to map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Caching, access and control flags, see SYS_MM_MEM_* macros</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if virtual address has already been mapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="82" column="5" declfile="include/drivers/mm/system_mm.h" declline="82" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1ga1186a31d55b24791d800e8f0aef311da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_map_region</definition>
        <argsstring>(void *virt, uintptr_t phys, size_t size, uint32_t flags)</argsstring>
        <name>sys_mm_drv_map_region</name>
        <param>
          <type>void *</type>
          <declname>virt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>phys</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Map a region of physical memory into the virtual address space. </para>
        </briefdescription>
        <detaileddescription>
<para>This maps a region of physical memory into the virtual address space. Behavior when providing unaligned addresses/sizes is undefined, these are assumed to be page aligned.</para>
<para>The memory range itself is never accessed by this operation.</para>
<para>This API must be safe to call in ISRs or exception handlers. Calls to this API are assumed to be serialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned destination virtual address to map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phys</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned source physical address to map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned size of the mapped memory region in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Caching, access and control flags, see SYS_MM_MEM_* macros</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if any virtual addresses have already been mapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="105" column="5" declfile="include/drivers/mm/system_mm.h" declline="105" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1gab36baa1ed134e5a69ea16451991b920e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_map_array</definition>
        <argsstring>(void *virt, uintptr_t *phys, size_t cnt, uint32_t flags)</argsstring>
        <name>sys_mm_drv_map_array</name>
        <param>
          <type>void *</type>
          <declname>virt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>phys</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Map an array of physical memory into the virtual address space. </para>
        </briefdescription>
        <detaileddescription>
<para>This maps an array of physical pages into a continuous virtual address space. Behavior when providing unaligned addresses is undefined, these are assumed to be page aligned.</para>
<para>The physical memory pages are never accessed by this operation.</para>
<para>This API must be safe to call in ISRs or exception handlers. Calls to this API are assumed to be serialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned destination virtual address to map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phys</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pge-aligned source physical address to map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the physical page array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Caching, access and control flags, see SYS_MM_MEM_* macros</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if any virtual addresses have already been mapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="129" column="5" declfile="include/drivers/mm/system_mm.h" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1gab78668dd05ab1d4d17ca5bbe3182b0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_unmap_page</definition>
        <argsstring>(void *virt)</argsstring>
        <name>sys_mm_drv_unmap_page</name>
        <param>
          <type>void *</type>
          <declname>virt</declname>
        </param>
        <briefdescription>
<para>Remove mapping for one page of the provided virtual address. </para>
        </briefdescription>
        <detaileddescription>
<para>This unmaps one page from the virtual address space.</para>
<para>When this completes, the relevant translation table entrie will be updated as if no mapping was ever made for that memory page. No previous context needs to be preserved. This function must update mapping in all active translation tables.</para>
<para>Behavior when providing unaligned address is undefined, this is assumed to be page aligned.</para>
<para>Implementations must invalidate translation caching as necessary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned virtual address to un-map</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if virtual address is not mapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="153" column="5" declfile="include/drivers/mm/system_mm.h" declline="153" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1gadc3ed78e29aef49b7578b9090dcaacbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_unmap_region</definition>
        <argsstring>(void *virt, size_t size)</argsstring>
        <name>sys_mm_drv_unmap_region</name>
        <param>
          <type>void *</type>
          <declname>virt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Remove mappings for a provided virtual address range. </para>
        </briefdescription>
        <detaileddescription>
<para>This unmaps pages in the provided virtual address range.</para>
<para>When this completes, the relevant translation table entries will be updated as if no mapping was ever made for that memory range. No previous context needs to be preserved. This function must update mappings in all active translation tables.</para>
<para>Behavior when providing unaligned address is undefined, this is assumed to be page aligned.</para>
<para>Implementations must invalidate translation caching as necessary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base virtual address to un-map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned region size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if virtual addresses have already been mapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="177" column="5" declfile="include/drivers/mm/system_mm.h" declline="177" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1gaabbc2184a44f8c5c8cd98bf09a2cdc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_page_phys_get</definition>
        <argsstring>(void *virt, uintptr_t *phys)</argsstring>
        <name>sys_mm_drv_page_phys_get</name>
        <param>
          <type>void *</type>
          <declname>virt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>phys</declname>
        </param>
        <briefdescription>
<para>Get the mapped physical memory address from virtual address. </para>
        </briefdescription>
        <detaileddescription>
<para>The function queries the translation tables to find the physical memory address of a mapped virtual address.</para>
<para>Behavior when providing unaligned address is undefined, this is assumed to be page aligned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned virtual address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">phys</parametername>
</parameternamelist>
<parameterdescription>
<para>Mapped physical address (can be NULL if only checking if virtual address is mapped)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if mapping is found and valid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if virtual address is not mapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="196" column="5" declfile="include/drivers/mm/system_mm.h" declline="196" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1gae46a4189560e314e96f8bee80b55b40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_remap_region</definition>
        <argsstring>(void *virt_old, size_t size, void *virt_new)</argsstring>
        <name>sys_mm_drv_remap_region</name>
        <param>
          <type>void *</type>
          <declname>virt_old</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>virt_new</declname>
        </param>
        <briefdescription>
<para>Remap virtual pages into new address. </para>
        </briefdescription>
        <detaileddescription>
<para>This remaps a virtual memory region starting at <computeroutput>virt_old</computeroutput> of size <computeroutput>size</computeroutput> into a new virtual memory region starting at <computeroutput>virt_new</computeroutput>. In other words, physical memory at <computeroutput>virt_old</computeroutput> is remapped to appear at <computeroutput>virt_new</computeroutput>. Both addresses must be page aligned and valid.</para>
<para>Note that the virtual memory at both the old and new addresses must be unmapped in the memory domains of any runnable Zephyr thread as this does not deal with memory domains.</para>
<para>Note that overlapping of old and new virtual memory regions is usually not supported for simplier implementation. Refer to the actual driver to make sure if overlapping is allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt_old</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base virtual address of existing memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned size of the mapped memory region in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base virtual address to which to remap the memory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if old virtual addresses are not all mapped or new virtual addresses are not all unmapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="225" column="5" declfile="include/drivers/mm/system_mm.h" declline="225" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1ga3b2e4b2b359d4fcba104e43866d30d14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_move_region</definition>
        <argsstring>(void *virt_old, size_t size, void *virt_new, uintptr_t phys_new)</argsstring>
        <name>sys_mm_drv_move_region</name>
        <param>
          <type>void *</type>
          <declname>virt_old</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>virt_new</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>phys_new</declname>
        </param>
        <briefdescription>
<para>Physically move memory, with copy. </para>
        </briefdescription>
        <detaileddescription>
<para>This maps a region of physical memory into the new virtual address space (<computeroutput>virt_new</computeroutput>), and copy region of size <computeroutput>size</computeroutput> from the old virtual address space (<computeroutput>virt_old</computeroutput>). The new virtual memory region is mapped from physical memory starting at <computeroutput>phys_new</computeroutput> of size <computeroutput>size</computeroutput>.</para>
<para>Behavior when providing unaligned addresses/sizes is undefined, these are assumed to be page aligned.</para>
<para>Note that the virtual memory at both the old and new addresses must be unmapped in the memory domains of any runnable Zephyr thread as this does not deal with memory domains.</para>
<para>Note that overlapping of old and new virtual memory regions is usually not supported for simplier implementation. Refer to the actual driver to make sure if overlapping is allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt_old</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base virtual address of existing memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned size of the mapped memory region in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base virtual address to which to map new physical pages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phys_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base physical address to contain the moved memory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if old virtual addresses are not all mapped or new virtual addresses are not all unmapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="258" column="5" declfile="include/drivers/mm/system_mm.h" declline="258" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mm__drv__apis_1gab172793104608d2a5acae0eb40c50177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_mm_drv_move_array</definition>
        <argsstring>(void *virt_old, size_t size, void *virt_new, uintptr_t *phys_new, size_t phys_cnt)</argsstring>
        <name>sys_mm_drv_move_array</name>
        <param>
          <type>void *</type>
          <declname>virt_old</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>virt_new</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>phys_new</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>phys_cnt</declname>
        </param>
        <briefdescription>
<para>Physically move memory, with copy. </para>
        </briefdescription>
        <detaileddescription>
<para>This maps a region of physical memory into the new virtual address space (<computeroutput>virt_new</computeroutput>), and copy region of size <computeroutput>size</computeroutput> from the old virtual address space (<computeroutput>virt_old</computeroutput>). The new virtual memory region is mapped from an array of physical pages.</para>
<para>Behavior when providing unaligned addresses/sizes is undefined, these are assumed to be page aligned.</para>
<para>Note that the virtual memory at both the old and new addresses must be unmapped in the memory domains of any runnable Zephyr thread as this does not deal with memory domains.</para>
<para>Note that overlapping of old and new virtual memory regions is usually not supported for simplier implementation. Refer to the actual driver to make sure if overlapping is allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt_old</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base virtual address of existing memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned size of the mapped memory region in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virt_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned base virtual address to which to map new physical pages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phys_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of page-aligned physical address to contain the moved memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phys_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the physical page array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid arguments are provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>if old virtual addresses are not all mapped or new virtual addresses are not all unmapped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="293" column="5" declfile="include/drivers/mm/system_mm.h" declline="293" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__mm__drv__apis_1gafe1b7f8b4075da1b461f2a74d3142e49" prot="public" static="no">
        <name>SYS_MM_MEM_CACHE_NONE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No caching </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="37" column="9" bodyfile="include/drivers/mm/system_mm.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mm__drv__apis_1gaed12cd6841eb0fd0af1cefe1d7a6b5aa" prot="public" static="no">
        <name>SYS_MM_MEM_CACHE_WT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write-through caching </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="40" column="9" bodyfile="include/drivers/mm/system_mm.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mm__drv__apis_1gad0859fb79c8da1d1af0f38ea63064b8c" prot="public" static="no">
        <name>SYS_MM_MEM_CACHE_WB</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Full write-back caching </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="43" column="9" bodyfile="include/drivers/mm/system_mm.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mm__drv__apis_1ga43050af5740a0449da7998b48f540817" prot="public" static="no">
        <name>SYS_MM_MEM_CACHE_MASK</name>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reserved bits for cache modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="46" column="9" bodyfile="include/drivers/mm/system_mm.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mm__drv__apis_1ga8547ea32c40b038daa34ee76cbaee275" prot="public" static="no">
        <name>SYS_MM_MEM_PERM_RW</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Region will have read/write access (and not read-only) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="54" column="9" bodyfile="include/drivers/mm/system_mm.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mm__drv__apis_1gac564b8d2148bd7c0ac07313f0fa9861c" prot="public" static="no">
        <name>SYS_MM_MEM_PERM_EXEC</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Region will be executable (normally forbidden) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="57" column="9" bodyfile="include/drivers/mm/system_mm.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mm__drv__apis_1gad86f6d8cbb3102ad3e8375d10cb4551c" prot="public" static="no">
        <name>SYS_MM_MEM_PERM_USER</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Region will be accessible to user mode (normally supervisor-only) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mm/system_mm.h" line="60" column="9" bodyfile="include/drivers/mm/system_mm.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Memory Management Driver APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
