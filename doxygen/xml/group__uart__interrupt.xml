<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__uart__interrupt" kind="group">
    <compoundname>uart_interrupt</compoundname>
    <title>Interrupt-driven UART API</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__uart__interrupt_1gad7a26b1a1d6212d7d39c05c8ad4ec926" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* uart_irq_callback_user_data_t) (const struct device *dev, void *user_data)</definition>
        <argsstring>)(const struct device *dev, void *user_data)</argsstring>
        <name>uart_irq_callback_user_data_t</name>
        <briefdescription>
<para>Define the application callback function signature for <ref refid="group__uart__interrupt_1gaef0210c791ac400d149dc0b67420eec5" kindref="member">uart_irq_callback_user_data_set()</ref> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary user data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="142" column="9" bodyfile="include/drivers/uart.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interrupt_1ga6750414923953c84fb1e19177ec74ae0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* uart_irq_config_func_t) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>uart_irq_config_func_t</name>
        <briefdescription>
<para>For configuring IRQ on each individual UART device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="150" column="9" bodyfile="include/drivers/uart.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__uart__interrupt_1gafe42e4719eada7e25904bc9ebfe87791" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_fifo_fill</definition>
        <argsstring>(const struct device *dev, const uint8_t *tx_data, int size)</argsstring>
        <name>uart_fifo_fill</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Fill FIFO with data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is expected to be called from UART interrupt handler (ISR), if <ref refid="group__uart__interrupt_1ga5e126b5f19549eb7f5b785b98ebe7638" kindref="member">uart_irq_tx_ready()</ref> returns true. Result of calling this function not from an ISR is undefined (hardware-dependent). Likewise, <emphasis>not</emphasis> calling this function from an ISR if <ref refid="group__uart__interrupt_1ga5e126b5f19549eb7f5b785b98ebe7638" kindref="member">uart_irq_tx_ready()</ref> returns true may lead to undefined behavior, e.g. infinite interrupt loops. It&apos;s mandatory to test return value of this function, as different hardware has different FIFO depth (oftentimes just 1).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to send.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes sent. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if this function is not supported </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="691" column="19" bodyfile="include/drivers/uart.h" bodystart="691" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gaa89f58818d8428ad6a11abf692c54c0d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_fifo_fill_u16</definition>
        <argsstring>(const struct device *dev, const uint16_t *tx_data, int size)</argsstring>
        <name>uart_fifo_fill_u16</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Fill FIFO with wide data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is expected to be called from UART interrupt handler (ISR), if <ref refid="group__uart__interrupt_1ga5e126b5f19549eb7f5b785b98ebe7638" kindref="member">uart_irq_tx_ready()</ref> returns true. Result of calling this function not from an ISR is undefined (hardware-dependent). Likewise, <emphasis>not</emphasis> calling this function from an ISR if <ref refid="group__uart__interrupt_1ga5e126b5f19549eb7f5b785b98ebe7638" kindref="member">uart_irq_tx_ready()</ref> returns true may lead to undefined behavior, e.g. infinite interrupt loops. It&apos;s mandatory to test return value of this function, as different hardware has different FIFO depth (oftentimes just 1).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide data to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of datum to send.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of datum sent. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="729" column="19" bodyfile="include/drivers/uart.h" bodystart="729" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gab10942076ac47ecff29e924098049398" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_fifo_read</definition>
        <argsstring>(const struct device *dev, uint8_t *rx_data, const int size)</argsstring>
        <name>uart_fifo_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>rx_data</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data from FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is expected to be called from UART interrupt handler (ISR), if <ref refid="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" kindref="member">uart_irq_rx_ready()</ref> returns true. Result of calling this function not from an ISR is undefined (hardware-dependent). It&apos;s unspecified whether &quot;RX ready&quot; condition as returned by <ref refid="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" kindref="member">uart_irq_rx_ready()</ref> is level- or edge- triggered. That means that once <ref refid="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" kindref="member">uart_irq_rx_ready()</ref> is detected, <ref refid="group__uart__interrupt_1gab10942076ac47ecff29e924098049398" kindref="member">uart_fifo_read()</ref> must be called until it reads all available data in the FIFO (i.e. until it returns less data than was requested).</para>
<para>Note that the calling context only applies to physical UARTs and no to the virtual ones found in USB CDC ACM code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data container. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Container size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="771" column="19" bodyfile="include/drivers/uart.h" bodystart="771" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1ga4a3c25dad2290f1f40e4b847e3b83f64" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_fifo_read_u16</definition>
        <argsstring>(const struct device *dev, uint16_t *rx_data, const int size)</argsstring>
        <name>uart_fifo_read_u16</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>rx_data</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read wide data from FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is expected to be called from UART interrupt handler (ISR), if <ref refid="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" kindref="member">uart_irq_rx_ready()</ref> returns true. Result of calling this function not from an ISR is undefined (hardware-dependent). It&apos;s unspecified whether &quot;RX ready&quot; condition as returned by <ref refid="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" kindref="member">uart_irq_rx_ready()</ref> is level- or edge- triggered. That means that once <ref refid="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" kindref="member">uart_irq_rx_ready()</ref> is detected, <ref refid="group__uart__interrupt_1gab10942076ac47ecff29e924098049398" kindref="member">uart_fifo_read()</ref> must be called until it reads all available data in the FIFO (i.e. until it returns less data than was requested).</para>
<para>Note that the calling context only applies to physical UARTs and no to the virtual ones found in USB CDC ACM code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide data container. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Container size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of datum read. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="812" column="19" bodyfile="include/drivers/uart.h" bodystart="812" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1ga9cbd6e33dce6a5b06233cf10077e19cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_irq_tx_enable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_tx_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Enable TX interrupt in IER. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="835" column="7" declfile="include/drivers/uart.h" declline="835" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gaf8a5bc26cd7c32e7bc6516c6f873c45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_irq_tx_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_tx_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable TX interrupt in IER. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="854" column="7" declfile="include/drivers/uart.h" declline="854" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1ga5e126b5f19549eb7f5b785b98ebe7638" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_irq_tx_ready</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_tx_ready</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if UART TX buffer can accept a new char. </para>
        </briefdescription>
        <detaileddescription>
<para>Check if UART TX buffer can accept at least one character for transmission (i.e. <ref refid="group__uart__interrupt_1gafe42e4719eada7e25904bc9ebfe87791" kindref="member">uart_fifo_fill()</ref> will succeed and return non-zero). This function must be called in a UART interrupt handler, or its result is undefined. Before calling this function in the interrupt handler, <ref refid="group__uart__interrupt_1gac5241e000d482c40b2a4856c58c106a6" kindref="member">uart_irq_update()</ref> must be called once per the handler invocation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If TX interrupt is enabled and at least one char can be written to UART. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is not ready to write a new byte. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="886" column="19" bodyfile="include/drivers/uart.h" bodystart="886" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1ga4ec3ae3974da2b3ab94ae7b835d17bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_irq_rx_enable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_rx_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Enable RX interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="907" column="7" declfile="include/drivers/uart.h" declline="907" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gaa759d7935fdd9ab6ca0761f161389a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_irq_rx_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_rx_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable RX interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="926" column="7" declfile="include/drivers/uart.h" declline="926" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1ga917935a13bf6a5d1e32ef34339e96455" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_irq_tx_complete</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_tx_complete</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if UART TX block finished transmission. </para>
        </briefdescription>
        <detaileddescription>
<para>Check if any outgoing data buffered in UART TX block was fully transmitted and TX block is idle. When this condition is true, UART device (or whole system) can be power off. Note that this function is <emphasis>not</emphasis> useful to check if UART TX can accept more data, use <ref refid="group__uart__interrupt_1ga5e126b5f19549eb7f5b785b98ebe7638" kindref="member">uart_irq_tx_ready()</ref> for that. This function must be called in a UART interrupt handler, or its result is undefined. Before calling this function in the interrupt handler, <ref refid="group__uart__interrupt_1gac5241e000d482c40b2a4856c58c106a6" kindref="member">uart_irq_update()</ref> must be called once per the handler invocation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If nothing remains to be transmitted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If transmission is not completed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="959" column="19" bodyfile="include/drivers/uart.h" bodystart="959" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_irq_rx_ready</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_rx_ready</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if UART RX buffer has a received char. </para>
        </briefdescription>
        <detaileddescription>
<para>Check if UART RX buffer has at least one pending character (i.e. <ref refid="group__uart__interrupt_1gab10942076ac47ecff29e924098049398" kindref="member">uart_fifo_read()</ref> will succeed and return non-zero). This function must be called in a UART interrupt handler, or its result is undefined. Before calling this function in the interrupt handler, <ref refid="group__uart__interrupt_1gac5241e000d482c40b2a4856c58c106a6" kindref="member">uart_irq_update()</ref> must be called once per the handler invocation. It&apos;s unspecified whether condition as returned by this function is level- or edge- triggered (i.e. if this function returns true when RX FIFO is non-empty, or when a new char was received since last call to it). See description of <ref refid="group__uart__interrupt_1gab10942076ac47ecff29e924098049398" kindref="member">uart_fifo_read()</ref> for implication of this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If a received char is ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If a received char is not ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="994" column="19" bodyfile="include/drivers/uart.h" bodystart="994" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1ga7c24daae3326bc2959ea13a2be79969f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_irq_err_enable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_err_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Enable error interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1013" column="7" declfile="include/drivers/uart.h" declline="1013" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gaaf8a88361807e204f7227fbd1d0e75b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_irq_err_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_err_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable error interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1032" column="7" declfile="include/drivers/uart.h" declline="1032" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1ga11ccae917c8b5fd76aaabdb047125f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_irq_is_pending</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_is_pending</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check if any IRQs is pending. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If an IRQ is pending. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If an IRQ is not pending. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1056" column="6" declfile="include/drivers/uart.h" declline="1056" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gac5241e000d482c40b2a4856c58c106a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_irq_update</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_irq_update</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Start processing interrupts in ISR. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called the first thing in the ISR. Calling <ref refid="group__uart__interrupt_1gad04073b1b8e3de13b43ae1194561377b" kindref="member">uart_irq_rx_ready()</ref>, <ref refid="group__uart__interrupt_1ga5e126b5f19549eb7f5b785b98ebe7638" kindref="member">uart_irq_tx_ready()</ref>, <ref refid="group__uart__interrupt_1ga917935a13bf6a5d1e32ef34339e96455" kindref="member">uart_irq_tx_complete()</ref> allowed only after this.</para>
<para>The purpose of this function is:</para>
<para><itemizedlist>
<listitem><para>For devices with auto-acknowledge of interrupt status on register read to cache the value of this register (rx_ready, etc. then use this case).</para>
</listitem><listitem><para>For devices with explicit acknowledgment of interrupts, to ack any pending interrupts and likewise to cache the original value.</para>
</listitem><listitem><para>For devices with implicit acknowledgment, this function will be empty. But the ISR must perform the actions needs to ack the interrupts (usually, call <ref refid="group__uart__interrupt_1gab10942076ac47ecff29e924098049398" kindref="member">uart_fifo_read()</ref> on rx_ready, and <ref refid="group__uart__interrupt_1gafe42e4719eada7e25904bc9ebfe87791" kindref="member">uart_fifo_fill()</ref> on tx_ready).</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1097" column="6" declfile="include/drivers/uart.h" declline="1097" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gaef0210c791ac400d149dc0b67420eec5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_irq_callback_user_data_set</definition>
        <argsstring>(const struct device *dev, uart_irq_callback_user_data_t cb, void *user_data)</argsstring>
        <name>uart_irq_callback_user_data_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interrupt_1gad7a26b1a1d6212d7d39c05c8ad4ec926" kindref="member">uart_irq_callback_user_data_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Set the IRQ callback function pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This sets up the callback for IRQ. When an IRQ is triggered, the specified function will be called with specified user data. See description of <ref refid="group__uart__interrupt_1gac5241e000d482c40b2a4856c58c106a6" kindref="member">uart_irq_update()</ref> for the requirements on ISR.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to pass to callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1124" column="20" bodyfile="include/drivers/uart.h" bodystart="1124" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interrupt_1gac896825681a3febf24bb3cba5178f39f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_irq_callback_set</definition>
        <argsstring>(const struct device *dev, uart_irq_callback_user_data_t cb)</argsstring>
        <name>uart_irq_callback_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interrupt_1gad7a26b1a1d6212d7d39c05c8ad4ec926" kindref="member">uart_irq_callback_user_data_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Set the IRQ callback function pointer (legacy). </para>
        </briefdescription>
        <detaileddescription>
<para>This sets up the callback for IRQ. When an IRQ is triggered, the specified function will be called with the device pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1147" column="20" bodyfile="include/drivers/uart.h" bodystart="1147" bodyend="1151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
