<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="devicetree_8h" kind="file" language="C++">
    <compoundname>devicetree.h</compoundname>
    <includes local="no">devicetree_unfixed.h</includes>
    <includes local="no">devicetree_fixups.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes refid="io-channels_8h" local="no">devicetree/io-channels.h</includes>
    <includes refid="clocks_8h" local="no">devicetree/clocks.h</includes>
    <includes refid="devicetree_2gpio_8h" local="no">devicetree/gpio.h</includes>
    <includes refid="devicetree_2spi_8h" local="no">devicetree/spi.h</includes>
    <includes refid="devicetree_2dma_8h" local="no">devicetree/dma.h</includes>
    <includes refid="pwms_8h" local="no">devicetree/pwms.h</includes>
    <includes refid="fixed-partitions_8h" local="no">devicetree/fixed-partitions.h</includes>
    <includes refid="devicetree_2zephyr_8h" local="no">devicetree/zephyr.h</includes>
    <includes refid="ordinals_8h" local="no">devicetree/ordinals.h</includes>
    <includes refid="devicetree_2pinctrl_8h" local="no">devicetree/pinctrl.h</includes>
    <includedby refid="arc_2arch_8h" local="no">include/arch/arc/arch.h</includedby>
    <includedby refid="arm_2aarch32_2arch_8h" local="no">include/arch/arm/aarch32/arch.h</includedby>
    <includedby refid="nvic_8h" local="no">include/arch/arm/aarch32/cortex_m/nvic.h</includedby>
    <includedby refid="arm64_2arch_8h" local="no">include/arch/arm64/arch.h</includedby>
    <includedby refid="mips_2arch_8h" local="no">include/arch/mips/arch.h</includedby>
    <includedby refid="nios2_2arch_8h" local="no">include/arch/nios2/arch.h</includedby>
    <includedby refid="posix_2arch_8h" local="no">include/arch/posix/arch.h</includedby>
    <includedby refid="riscv_2arch_8h" local="no">include/arch/riscv/arch.h</includedby>
    <includedby refid="sparc_2arch_8h" local="no">include/arch/sparc/arch.h</includedby>
    <includedby refid="x86_2arch_8h" local="no">include/arch/x86/arch.h</includedby>
    <includedby refid="xtensa_2arch_8h" local="no">include/arch/xtensa/arch.h</includedby>
    <includedby refid="gpio__esp32_8h" local="no">include/drivers/gpio/gpio_esp32.h</includedby>
    <includedby refid="drivers_2pinctrl_8h" local="no">include/drivers/pinctrl.h</includedby>
    <includedby refid="pinctrl__soc__gd32__common_8h" local="no">include/drivers/pinctrl/pinctrl_soc_gd32_common.h</includedby>
    <includedby refid="devicetree__reserved_8h" local="no">include/linker/devicetree_reserved.h</includedby>
    <includedby refid="linker-defs_8h" local="no">include/linker/linker-defs.h</includedby>
    <includedby refid="state_8h" local="no">include/pm/state.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="16">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="18">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="14">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="12">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="20">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="21">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="17">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="15">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="19">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="4">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="5">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="11">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="3">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="2">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="10">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="20">
        <label>include/app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/arch/arc/arch.h</label>
        <link refid="arc_2arch_8h"/>
      </node>
      <node id="3">
        <label>include/arch/arm/aarch32/arch.h</label>
        <link refid="arm_2aarch32_2arch_8h"/>
      </node>
      <node id="5">
        <label>include/arch/arm/aarch32/cortex_m/cmsis.h</label>
        <link refid="cortex__m_2cmsis_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/arch/arm/aarch32/cortex_m/nvic.h</label>
        <link refid="nvic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/arch/arm/aarch32/mpu/arm_mpu_v8m.h</label>
        <link refid="arm__mpu__v8m_8h"/>
      </node>
      <node id="7">
        <label>include/arch/arm64/arch.h</label>
        <link refid="arm64_2arch_8h"/>
      </node>
      <node id="8">
        <label>include/arch/mips/arch.h</label>
        <link refid="mips_2arch_8h"/>
      </node>
      <node id="9">
        <label>include/arch/nios2/arch.h</label>
        <link refid="nios2_2arch_8h"/>
      </node>
      <node id="10">
        <label>include/arch/posix/arch.h</label>
        <link refid="posix_2arch_8h"/>
      </node>
      <node id="11">
        <label>include/arch/riscv/arch.h</label>
        <link refid="riscv_2arch_8h"/>
      </node>
      <node id="12">
        <label>include/arch/sparc/arch.h</label>
        <link refid="sparc_2arch_8h"/>
      </node>
      <node id="13">
        <label>include/arch/x86/arch.h</label>
        <link refid="x86_2arch_8h"/>
      </node>
      <node id="193">
        <label>include/arch/x86/ia32/arch.h</label>
        <link refid="x86_2ia32_2arch_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/arch/xtensa/arch.h</label>
        <link refid="xtensa_2arch_8h"/>
      </node>
      <node id="1">
        <label>include/devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/drivers/gpio/gpio_esp32.h</label>
        <link refid="gpio__esp32_8h"/>
      </node>
      <node id="16">
        <label>include/drivers/pinctrl.h</label>
        <link refid="drivers_2pinctrl_8h"/>
      </node>
      <node id="17">
        <label>include/drivers/pinctrl/pinctrl_soc_gd32_common.h</label>
        <link refid="pinctrl__soc__gd32__common_8h"/>
      </node>
      <node id="18">
        <label>include/linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="192">
        <label>include/pm/pm.h</label>
        <link refid="pm_8h"/>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
      </node>
      <node id="194">
        <label>include/pm/policy.h</label>
        <link refid="policy_8h"/>
      </node>
      <node id="191">
        <label>include/pm/state.h</label>
        <link refid="state_8h"/>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>subsys/testsuite/ztest/include/ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>subsys/testsuite/ztest/include/ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>subsys/testsuite/ztest/include/ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>subsys/testsuite/ztest/include/ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>subsys/testsuite/ztest/include/ztest_test_new.h</label>
        <link refid="ztest__test__new_8h"/>
      </node>
      <node id="25">
        <label>tests/kernel/common/src/atomic.c</label>
        <link refid="atomic_8c"/>
      </node>
      <node id="26">
        <label>tests/kernel/common/src/bitarray.c</label>
        <link refid="bitarray_8c"/>
      </node>
      <node id="27">
        <label>tests/kernel/common/src/bitfield.c</label>
        <link refid="bitfield_8c"/>
      </node>
      <node id="28">
        <label>tests/kernel/common/src/boot_delay.c</label>
        <link refid="boot__delay_8c"/>
      </node>
      <node id="29">
        <label>tests/kernel/common/src/byteorder.c</label>
        <link refid="byteorder_8c"/>
      </node>
      <node id="30">
        <label>tests/kernel/common/src/clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="31">
        <label>tests/kernel/common/src/errno.c</label>
        <link refid="errno_8c"/>
      </node>
      <node id="32">
        <label>tests/kernel/common/src/irq_offload.c</label>
        <link refid="irq__offload_8c"/>
      </node>
      <node id="33">
        <label>tests/kernel/common/src/main.c</label>
        <link refid="common_2src_2main_8c"/>
      </node>
      <node id="34">
        <label>tests/kernel/common/src/multilib.c</label>
        <link refid="multilib_8c"/>
      </node>
      <node id="35">
        <label>tests/kernel/common/src/printk.c</label>
        <link refid="printk_8c"/>
      </node>
      <node id="36">
        <label>tests/kernel/common/src/timeout_order.c</label>
        <link refid="timeout__order_8c"/>
      </node>
      <node id="37">
        <label>tests/kernel/condvar/condvar_api/src/main.c</label>
        <link refid="condvar_2condvar__api_2src_2main_8c"/>
      </node>
      <node id="38">
        <label>tests/kernel/context/src/main.c</label>
        <link refid="context_2src_2main_8c"/>
      </node>
      <node id="39">
        <label>tests/kernel/device/src/abstract_driver.c</label>
        <link refid="abstract__driver_8c"/>
      </node>
      <node id="40">
        <label>tests/kernel/device/src/abstract_driver.h</label>
        <link refid="abstract__driver_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>tests/kernel/device/src/main.c</label>
        <link refid="device_2src_2main_8c"/>
      </node>
      <node id="42">
        <label>tests/kernel/device/src/mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="43">
        <label>tests/kernel/device/src/test_driver_init.c</label>
        <link refid="test__driver__init_8c"/>
      </node>
      <node id="44">
        <label>tests/kernel/early_sleep/src/main.c</label>
        <link refid="early__sleep_2src_2main_8c"/>
      </node>
      <node id="45">
        <label>tests/kernel/events/event_api/src/main.c</label>
        <link refid="events_2event__api_2src_2main_8c"/>
      </node>
      <node id="46">
        <label>tests/kernel/events/event_api/src/test_event_apis.c</label>
        <link refid="test__event__apis_8c"/>
      </node>
      <node id="47">
        <label>tests/kernel/events/sys_event/src/main.c</label>
        <link refid="events_2sys__event_2src_2main_8c"/>
      </node>
      <node id="48">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="49">
        <label>tests/kernel/fatal/no-multithreading/src/main.c</label>
        <link refid="fatal_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="50">
        <label>tests/kernel/fifo/fifo_api/src/main.c</label>
        <link refid="fifo_2fifo__api_2src_2main_8c"/>
      </node>
      <node id="51">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo.h</label>
        <link refid="test__fifo_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_cancel.c</label>
        <link refid="test__fifo__cancel_8c"/>
      </node>
      <node id="53">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c</label>
        <link refid="test__fifo__contexts_8c"/>
      </node>
      <node id="54">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_fail.c</label>
        <link refid="test__fifo__fail_8c"/>
      </node>
      <node id="55">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_loop.c</label>
        <link refid="test__fifo__loop_8c"/>
      </node>
      <node id="56">
        <label>tests/kernel/fifo/fifo_timeout/src/main.c</label>
        <link refid="fifo_2fifo__timeout_2src_2main_8c"/>
      </node>
      <node id="57">
        <label>tests/kernel/fifo/fifo_usage/src/main.c</label>
        <link refid="fifo_2fifo__usage_2src_2main_8c"/>
      </node>
      <node id="58">
        <label>tests/kernel/fpu_sharing/float_disable/src/k_float_disable.c</label>
        <link refid="k__float__disable_8c"/>
      </node>
      <node id="59">
        <label>tests/kernel/fpu_sharing/float_disable/src/main.c</label>
        <link refid="fpu__sharing_2float__disable_2src_2main_8c"/>
      </node>
      <node id="60">
        <label>tests/kernel/fpu_sharing/generic/src/load_store.c</label>
        <link refid="load__store_8c"/>
      </node>
      <node id="61">
        <label>tests/kernel/fpu_sharing/generic/src/main.c</label>
        <link refid="fpu__sharing_2generic_2src_2main_8c"/>
      </node>
      <node id="62">
        <label>tests/kernel/fpu_sharing/generic/src/pi.c</label>
        <link refid="pi_8c"/>
      </node>
      <node id="63">
        <label>tests/kernel/gen_isr_table/src/main.c</label>
        <link refid="gen__isr__table_2src_2main_8c"/>
      </node>
      <node id="64">
        <label>tests/kernel/interrupt/src/direct_isr.c</label>
        <link refid="direct__isr_8c"/>
      </node>
      <node id="65">
        <label>tests/kernel/interrupt/src/dynamic_isr.c</label>
        <link refid="dynamic__isr_8c"/>
      </node>
      <node id="66">
        <label>tests/kernel/interrupt/src/interrupt_offload.c</label>
        <link refid="interrupt__offload_8c"/>
      </node>
      <node id="67">
        <label>tests/kernel/interrupt/src/main.c</label>
        <link refid="interrupt_2src_2main_8c"/>
      </node>
      <node id="68">
        <label>tests/kernel/interrupt/src/nested_irq.c</label>
        <link refid="nested__irq_8c"/>
      </node>
      <node id="69">
        <label>tests/kernel/interrupt/src/prevent_irq.c</label>
        <link refid="prevent__irq_8c"/>
      </node>
      <node id="70">
        <label>tests/kernel/interrupt/src/regular_isr.c</label>
        <link refid="regular__isr_8c"/>
      </node>
      <node id="71">
        <label>tests/kernel/lifo/lifo_api/src/main.c</label>
        <link refid="lifo_2lifo__api_2src_2main_8c"/>
      </node>
      <node id="72">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo.h</label>
        <link refid="test__lifo_8h"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_contexts.c</label>
        <link refid="test__lifo__contexts_8c"/>
      </node>
      <node id="74">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_fail.c</label>
        <link refid="test__lifo__fail_8c"/>
      </node>
      <node id="75">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_loop.c</label>
        <link refid="test__lifo__loop_8c"/>
      </node>
      <node id="76">
        <label>tests/kernel/lifo/lifo_usage/src/main.c</label>
        <link refid="lifo_2lifo__usage_2src_2main_8c"/>
      </node>
      <node id="77">
        <label>tests/kernel/mbox/mbox_api/src/main.c</label>
        <link refid="mbox_2mbox__api_2src_2main_8c"/>
      </node>
      <node id="78">
        <label>tests/kernel/mbox/mbox_api/src/test_mbox_api.c</label>
        <link refid="test__mbox__api_8c"/>
      </node>
      <node id="79">
        <label>tests/kernel/mbox/mbox_usage/src/main.c</label>
        <link refid="mbox_2mbox__usage_2src_2main_8c"/>
      </node>
      <node id="80">
        <label>tests/kernel/mem_heap/k_heap_api/src/main.c</label>
        <link refid="mem__heap_2k__heap__api_2src_2main_8c"/>
      </node>
      <node id="81">
        <label>tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c</label>
        <link refid="test__kheap__api_8c"/>
      </node>
      <node id="82">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/main.c</label>
        <link refid="mem__heap_2mheap__api__concept_2src_2main_8c"/>
      </node>
      <node id="83">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</label>
        <link refid="test__mheap__api_8c"/>
      </node>
      <node id="84">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c</label>
        <link refid="test__mheap__concept_8c"/>
      </node>
      <node id="85">
        <label>tests/kernel/mem_heap/shared_multi_heap/src/main.c</label>
        <link refid="mem__heap_2shared__multi__heap_2src_2main_8c"/>
      </node>
      <node id="86">
        <label>tests/kernel/mem_protect/demand_paging/src/main.c</label>
        <link refid="mem__protect_2demand__paging_2src_2main_8c"/>
      </node>
      <node id="87">
        <label>tests/kernel/mem_protect/futex/src/main.c</label>
        <link refid="mem__protect_2futex_2src_2main_8c"/>
      </node>
      <node id="88">
        <label>tests/kernel/mem_protect/mem_map/src/main.c</label>
        <link refid="mem__protect_2mem__map_2src_2main_8c"/>
      </node>
      <node id="89">
        <label>tests/kernel/mem_protect/mem_protect/src/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="92">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="93">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="90">
        <label>tests/kernel/mem_protect/mem_protect/src/main.c</label>
        <link refid="mem__protect_2mem__protect_2src_2main_8c"/>
      </node>
      <node id="94">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_domain.c</label>
        <link refid="mem__domain_8c"/>
      </node>
      <node id="95">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_partition.c</label>
        <link refid="mem__partition_8c"/>
      </node>
      <node id="91">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="97">
        <label>tests/kernel/mem_protect/protection/src/main.c</label>
        <link refid="mem__protect_2protection_2src_2main_8c"/>
      </node>
      <node id="98">
        <label>tests/kernel/mem_protect/stack_random/src/main.c</label>
        <link refid="mem__protect_2stack__random_2src_2main_8c"/>
      </node>
      <node id="99">
        <label>tests/kernel/mem_protect/stackprot/src/main.c</label>
        <link refid="mem__protect_2stackprot_2src_2main_8c"/>
      </node>
      <node id="100">
        <label>tests/kernel/mem_protect/sys_sem/src/main.c</label>
        <link refid="mem__protect_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="101">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="102">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="103">
        <label>tests/kernel/mem_slab/mslab/src/main.c</label>
        <link refid="mem__slab_2mslab_2src_2main_8c"/>
      </node>
      <node id="104">
        <label>tests/kernel/mem_slab/mslab_api/src/main.c</label>
        <link refid="mem__slab_2mslab__api_2src_2main_8c"/>
      </node>
      <node id="105">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c</label>
        <link refid="test__mslab__api_8c"/>
      </node>
      <node id="106">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_extern.c</label>
        <link refid="test__mslab__extern_8c"/>
      </node>
      <node id="107">
        <label>tests/kernel/mem_slab/mslab_concept/src/main.c</label>
        <link refid="mem__slab_2mslab__concept_2src_2main_8c"/>
      </node>
      <node id="108">
        <label>tests/kernel/mem_slab/mslab_concept/src/test_mslab_alloc_wait.c</label>
        <link refid="test__mslab__alloc__wait_8c"/>
      </node>
      <node id="109">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/main.c</label>
        <link refid="mem__slab_2mslab__threadsafe_2src_2main_8c"/>
      </node>
      <node id="110">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/test_mslab_threadsafe.c</label>
        <link refid="test__mslab__threadsafe_8c"/>
      </node>
      <node id="111">
        <label>tests/kernel/mp/src/main.c</label>
        <link refid="mp_2src_2main_8c"/>
      </node>
      <node id="112">
        <label>tests/kernel/msgq/msgq_api/src/main.c</label>
        <link refid="msgq_2msgq__api_2src_2main_8c"/>
      </node>
      <node id="113">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq.h</label>
        <link refid="test__msgq_8h"/>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_attrs.c</label>
        <link refid="test__msgq__attrs_8c"/>
      </node>
      <node id="115">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_contexts.c</label>
        <link refid="test__msgq__contexts_8c"/>
      </node>
      <node id="116">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_fail.c</label>
        <link refid="test__msgq__fail_8c"/>
      </node>
      <node id="117">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_purge.c</label>
        <link refid="test__msgq__purge_8c"/>
      </node>
      <node id="118">
        <label>tests/kernel/msgq/msgq_usage/src/main.c</label>
        <link refid="msgq_2msgq__usage_2src_2main_8c"/>
      </node>
      <node id="119">
        <label>tests/kernel/mutex/mutex_api/src/test_mutex_apis.c</label>
        <link refid="test__mutex__apis_8c"/>
      </node>
      <node id="120">
        <label>tests/kernel/mutex/mutex_error_case/src/test_mutex_error.c</label>
        <link refid="test__mutex__error_8c"/>
      </node>
      <node id="121">
        <label>tests/kernel/mutex/sys_mutex/src/main.c</label>
        <link refid="mutex_2sys__mutex_2src_2main_8c"/>
      </node>
      <node id="122">
        <label>tests/kernel/mutex/sys_mutex/src/thread_competition.c</label>
        <link refid="thread__competition_8c"/>
      </node>
      <node id="123">
        <label>tests/kernel/obj_tracking/src/main.c</label>
        <link refid="obj__tracking_2src_2main_8c"/>
      </node>
      <node id="124">
        <label>tests/kernel/pending/src/main.c</label>
        <link refid="pending_2src_2main_8c"/>
      </node>
      <node id="125">
        <label>tests/kernel/pipe/pipe/src/main.c</label>
        <link refid="pipe_2pipe_2src_2main_8c"/>
      </node>
      <node id="126">
        <label>tests/kernel/pipe/pipe/src/test_pipe.c</label>
        <link refid="test__pipe_8c"/>
      </node>
      <node id="127">
        <label>tests/kernel/pipe/pipe_api/src/main.c</label>
        <link refid="pipe_2pipe__api_2src_2main_8c"/>
      </node>
      <node id="128">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_avail.c</label>
        <link refid="test__pipe__avail_8c"/>
      </node>
      <node id="129">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c</label>
        <link refid="test__pipe__contexts_8c"/>
      </node>
      <node id="130">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_fail.c</label>
        <link refid="test__pipe__fail_8c"/>
      </node>
      <node id="131">
        <label>tests/kernel/poll/src/main.c</label>
        <link refid="poll_2src_2main_8c"/>
      </node>
      <node id="132">
        <label>tests/kernel/poll/src/test_poll.c</label>
        <link refid="test__poll_8c"/>
      </node>
      <node id="133">
        <label>tests/kernel/poll/src/test_poll_fail.c</label>
        <link refid="test__poll__fail_8c"/>
      </node>
      <node id="134">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="135">
        <label>tests/kernel/queue/src/main.c</label>
        <link refid="queue_2src_2main_8c"/>
      </node>
      <node id="136">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>tests/kernel/queue/src/test_queue_contexts.c</label>
        <link refid="test__queue__contexts_8c"/>
      </node>
      <node id="138">
        <label>tests/kernel/queue/src/test_queue_fail.c</label>
        <link refid="test__queue__fail_8c"/>
      </node>
      <node id="139">
        <label>tests/kernel/queue/src/test_queue_loop.c</label>
        <link refid="test__queue__loop_8c"/>
      </node>
      <node id="140">
        <label>tests/kernel/queue/src/test_queue_user.c</label>
        <link refid="test__queue__user_8c"/>
      </node>
      <node id="141">
        <label>tests/kernel/sched/deadline/src/main.c</label>
        <link refid="sched_2deadline_2src_2main_8c"/>
      </node>
      <node id="142">
        <label>tests/kernel/sched/metairq/src/main.c</label>
        <link refid="sched_2metairq_2src_2main_8c"/>
      </node>
      <node id="143">
        <label>tests/kernel/sched/preempt/src/main.c</label>
        <link refid="sched_2preempt_2src_2main_8c"/>
      </node>
      <node id="146">
        <label>tests/kernel/sched/schedule_api/src/main.c</label>
        <link refid="sched_2schedule__api_2src_2main_8c"/>
      </node>
      <node id="144">
        <label>tests/kernel/sched/schedule_api/src/test_priority_scheduling.c</label>
        <link refid="test__priority__scheduling_8c"/>
      </node>
      <node id="145">
        <label>tests/kernel/sched/schedule_api/src/test_sched.h</label>
        <link refid="test__sched_8h"/>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c</label>
        <link refid="test__sched__is__preempt__thread_8c"/>
      </node>
      <node id="148">
        <label>tests/kernel/sched/schedule_api/src/test_sched_priority.c</label>
        <link refid="test__sched__priority_8c"/>
      </node>
      <node id="149">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c</label>
        <link refid="test__sched__timeslice__and__lock_8c"/>
      </node>
      <node id="150">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c</label>
        <link refid="test__sched__timeslice__reset_8c"/>
      </node>
      <node id="151">
        <label>tests/kernel/sched/schedule_api/src/test_slice_scheduling.c</label>
        <link refid="test__slice__scheduling_8c"/>
      </node>
      <node id="152">
        <label>tests/kernel/sched/schedule_api/src/user_api.c</label>
        <link refid="user__api_8c"/>
      </node>
      <node id="153">
        <label>tests/kernel/semaphore/semaphore/src/main.c</label>
        <link refid="semaphore_2semaphore_2src_2main_8c"/>
      </node>
      <node id="154">
        <label>tests/kernel/semaphore/sys_sem/src/main.c</label>
        <link refid="semaphore_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="155">
        <label>tests/kernel/sleep/src/main.c</label>
        <link refid="sleep_2src_2main_8c"/>
      </node>
      <node id="156">
        <label>tests/kernel/sleep/src/usleep.c</label>
        <link refid="usleep_8c"/>
      </node>
      <node id="157">
        <label>tests/kernel/smp/src/main.c</label>
        <link refid="smp_2src_2main_8c"/>
      </node>
      <node id="158">
        <label>tests/kernel/smp_boot_delay/src/main.c</label>
        <link refid="smp__boot__delay_2src_2main_8c"/>
      </node>
      <node id="159">
        <label>tests/kernel/spinlock/src/main.c</label>
        <link refid="spinlock_2src_2main_8c"/>
      </node>
      <node id="160">
        <label>tests/kernel/spinlock/src/spinlock_error_case.c</label>
        <link refid="spinlock__error__case_8c"/>
      </node>
      <node id="161">
        <label>tests/kernel/stack/stack/src/main.c</label>
        <link refid="stack_2stack_2src_2main_8c"/>
      </node>
      <node id="162">
        <label>tests/kernel/stack/stack/src/test_stack_contexts.c</label>
        <link refid="test__stack__contexts_8c"/>
      </node>
      <node id="163">
        <label>tests/kernel/stack/stack/src/test_stack_fail.c</label>
        <link refid="test__stack__fail_8c"/>
      </node>
      <node id="164">
        <label>tests/kernel/threads/dynamic_thread/src/main.c</label>
        <link refid="threads_2dynamic__thread_2src_2main_8c"/>
      </node>
      <node id="165">
        <label>tests/kernel/threads/no-multithreading/src/main.c</label>
        <link refid="threads_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="166">
        <label>tests/kernel/threads/thread_apis/src/main.c</label>
        <link refid="threads_2thread__apis_2src_2main_8c"/>
      </node>
      <node id="167">
        <label>tests/kernel/threads/thread_apis/src/test_essential_thread.c</label>
        <link refid="test__essential__thread_8c"/>
      </node>
      <node id="168">
        <label>tests/kernel/threads/thread_apis/src/test_kthread_for_each.c</label>
        <link refid="test__kthread__for__each_8c"/>
      </node>
      <node id="169">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c</label>
        <link refid="test__threads__cancel__abort_8c"/>
      </node>
      <node id="170">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cpu_mask.c</label>
        <link refid="test__threads__cpu__mask_8c"/>
      </node>
      <node id="171">
        <label>tests/kernel/threads/thread_apis/src/test_threads_set_priority.c</label>
        <link refid="test__threads__set__priority_8c"/>
      </node>
      <node id="172">
        <label>tests/kernel/threads/thread_apis/src/test_threads_spawn.c</label>
        <link refid="test__threads__spawn_8c"/>
      </node>
      <node id="173">
        <label>tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c</label>
        <link refid="test__threads__suspend__resume_8c"/>
      </node>
      <node id="174">
        <label>tests/kernel/threads/thread_error_case/src/main.c</label>
        <link refid="threads_2thread__error__case_2src_2main_8c"/>
      </node>
      <node id="175">
        <label>tests/kernel/threads/thread_init/src/main.c</label>
        <link refid="threads_2thread__init_2src_2main_8c"/>
      </node>
      <node id="176">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
      <node id="177">
        <label>tests/kernel/threads/tls/src/main.c</label>
        <link refid="threads_2tls_2src_2main_8c"/>
      </node>
      <node id="178">
        <label>tests/kernel/tickless/tickless_concept/src/main.c</label>
        <link refid="tickless_2tickless__concept_2src_2main_8c"/>
      </node>
      <node id="179">
        <label>tests/kernel/timer/cycle64/src/main.c</label>
        <link refid="timer_2cycle64_2src_2main_8c"/>
      </node>
      <node id="180">
        <label>tests/kernel/timer/starve/src/main.c</label>
        <link refid="timer_2starve_2src_2main_8c"/>
      </node>
      <node id="181">
        <label>tests/kernel/timer/timer_api/src/main.c</label>
        <link refid="timer_2timer__api_2src_2main_8c"/>
      </node>
      <node id="182">
        <label>tests/kernel/timer/timer_api/src/timer_convert.c</label>
        <link refid="timer__convert_8c"/>
      </node>
      <node id="183">
        <label>tests/kernel/timer/timer_error_case/src/main.c</label>
        <link refid="timer_2timer__error__case_2src_2main_8c"/>
      </node>
      <node id="184">
        <label>tests/kernel/timer/timer_monotonic/src/main.c</label>
        <link refid="timer_2timer__monotonic_2src_2main_8c"/>
      </node>
      <node id="185">
        <label>tests/kernel/workq/critical/src/main.c</label>
        <link refid="workq_2critical_2src_2main_8c"/>
      </node>
      <node id="186">
        <label>tests/kernel/workq/user_work/src/main.c</label>
        <link refid="workq_2user__work_2src_2main_8c"/>
      </node>
      <node id="187">
        <label>tests/kernel/workq/work/src/main.c</label>
        <link refid="workq_2work_2src_2main_8c"/>
      </node>
      <node id="188">
        <label>tests/kernel/workq/work_queue/src/main.c</label>
        <link refid="workq_2work__queue_2src_2main_8c"/>
      </node>
      <node id="189">
        <label>tests/kernel/xip/src/main.c</label>
        <link refid="xip_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" prot="public" static="no">
        <name>DT_INVALID_NODE</name>
        <initializer>_</initializer>
        <briefdescription>
<para>Name for an invalid node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>This supports cases where factored macros can be invoked from paths where devicetree data may or may not be available. It is a preprocessor identifier that does not match any valid devicetree node identifier. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="76" column="9" bodyfile="include/devicetree.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1gad65aa36621281687b22fa5d72db33e86" prot="public" static="no">
        <name>DT_ROOT</name>
        <initializer>DT_N</initializer>
        <briefdescription>
<para>Node identifier for the root node in the devicetree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="81" column="9" bodyfile="include/devicetree.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" prot="public" static="no">
        <name>DT_PATH</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="devicetree_8h_1af51e66f69742fc2f083097682e9049a4" kindref="member">DT_PATH_INTERNAL</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Get a node identifier for a devicetree path. </para>
        </briefdescription>
        <detaileddescription>
<para>(This macro returns a node identifier from path components. To get a path string from a node identifier, use <ref refid="group__devicetree-generic-id_1gacd79818b99724d834e3bb7ae74ee02cf" kindref="member">DT_NODE_PATH()</ref> instead.)</para>
<para>The arguments to this macro are the names of non-root nodes in the tree required to reach the desired node, starting from the root. Non-alphanumeric characters in each name must be converted to underscores to form valid C tokens, and letters must be lowercased.</para>
<para>Example devicetree fragment: <verbatim>/ {
        soc {
                serial1: serial@40001000 {
                        status = &quot;okay&quot;;
                        current-speed = &lt;115200&gt;;
                        ...
                };
        };
};
</verbatim> You can use <ref refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" kindref="member">DT_PATH(soc, serial_40001000)</ref> to get a node identifier for the serial@40001000 node. Node labels like &quot;serial1&quot; cannot be used as <ref refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" kindref="member">DT_PATH()</ref> arguments; use <ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL()</ref> for those instead.</para>
<para>Example usage with <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref> to get the current-speed property: <verbatim>DT_PROP(DT_PATH(soc, serial_40001000), current_speed) // 115200
</verbatim> (The current-speed property is also in &quot;lowercase-and-underscores&quot; form when used with this API.)</para>
<para>When determining arguments to <ref refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" kindref="member">DT_PATH()</ref>:</para>
<para><itemizedlist>
<listitem><para>the first argument corresponds to a child node of the root (&quot;soc&quot; above)</para>
</listitem><listitem><para>a second argument corresponds to a child of the first argument (&quot;serial_40001000&quot; above, from the node name &quot;serial@40001000&quot; after lowercasing and changing &quot;@&quot; to &quot;_&quot;)</para>
</listitem><listitem><para>and so on for deeper nodes in the desired node&apos;s path</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores node names along the node&apos;s path, with each name given as a separate argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the node with that path </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="129" column="9" bodyfile="include/devicetree.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" prot="public" static="no">
        <name>DT_NODELABEL</name>
        <param><defname>label</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(DT_N_NODELABEL_, label)</initializer>
        <briefdescription>
<para>Get a node identifier for a node label. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert non-alphanumeric characters in the node label to underscores to form valid C tokens, and lowercase all letters. Note that node labels are not the same thing as label properties.</para>
<para>Example devicetree fragment: <verbatim>serial1: serial@40001000 {
        label = &quot;UART_0&quot;;
        status = &quot;okay&quot;;
        current-speed = &lt;115200&gt;;
        ...
};
</verbatim> The only node label in this example is &quot;serial1&quot;.</para>
<para>The string &quot;UART_0&quot; is <emphasis>not</emphasis> a node label; it&apos;s the value of a property named label.</para>
<para>You can use <ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL(serial1)</ref> to get a node identifier for the serial@40001000 node. Example usage with <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref> to get the current-speed property: <verbatim>DT_PROP(DT_NODELABEL(serial1), current_speed) // 115200
</verbatim> Another example devicetree fragment: <verbatim>cpu@0 {
       L2_0: l2-cache {
               cache-level = &lt;2&gt;;
               ...
       };
};
</verbatim> Example usage to get the cache-level property: <verbatim>DT_PROP(DT_NODELABEL(l2_0), cache_level) // 2
</verbatim> Notice how &quot;L2_0&quot; in the devicetree is lowercased to &quot;l2_0&quot; in the <ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL()</ref> argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores node label name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the node with that label </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="177" column="9" bodyfile="include/devicetree.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1gaa49e19bbc39dc0d6f16b78a5d02482c9" prot="public" static="no">
        <name>DT_ALIAS</name>
        <param><defname>alias</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(DT_N_ALIAS_, alias)</initializer>
        <briefdescription>
<para>Get a node identifier from /aliases. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro&apos;s argument is a property of the /aliases node. It returns a node identifier for the node which is aliased. Convert non-alphanumeric characters in the alias property to underscores to form valid C tokens, and lowercase all letters.</para>
<para>Example devicetree fragment: <verbatim>/ {
        aliases {
                my-serial = &amp;serial1;
        };

        soc {
                serial1: serial@40001000 {
                        status = &quot;okay&quot;;
                        current-speed = &lt;115200&gt;;
                        ...
                };
        };
};
</verbatim> You can use <ref refid="group__devicetree-generic-id_1gaa49e19bbc39dc0d6f16b78a5d02482c9" kindref="member">DT_ALIAS(my_serial)</ref> to get a node identifier for the serial@40001000 node. Notice how my-serial in the devicetree becomes my_serial in the <ref refid="group__devicetree-generic-id_1gaa49e19bbc39dc0d6f16b78a5d02482c9" kindref="member">DT_ALIAS()</ref> argument. Example usage with <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref> to get the current-speed property: <verbatim>DT_PROP(DT_ALIAS(my_serial), current_speed) // 115200
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores alias name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the node with that alias </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="213" column="9" bodyfile="include/devicetree.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" prot="public" static="no">
        <name>DT_INST</name>
        <param><defname>inst</defname></param>
        <param><defname>compat</defname></param>
        <initializer><ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_N_INST, <ref refid="devicetree_8h_1af3f0bb55f6155a5188345d5ba6caf992" kindref="member">DT_DASH</ref>(inst, compat))</initializer>
        <briefdescription>
<para>Get a node identifier for an instance of a compatible. </para>
        </briefdescription>
        <detaileddescription>
<para>All nodes with a particular compatible property value are assigned instance numbers, which are zero-based indexes specific to that compatible. You can get a node identifier for these nodes by passing <ref refid="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" kindref="member">DT_INST()</ref> an instance number, &quot;inst&quot;, along with the lowercase-and-underscores version of the compatible, &quot;compat&quot;.</para>
<para>Instance numbers have the following properties:</para>
<para><itemizedlist>
<listitem><para>for each compatible, instance numbers start at 0 and are contiguous</para>
</listitem><listitem><para>exactly one instance number is assigned for each node with a compatible, <bold>including disabled nodes</bold></para>
</listitem><listitem><para>enabled nodes (status property is &quot;okay&quot; or missing) are assigned the instance numbers starting from 0, and disabled nodes have instance numbers which are greater than those of any enabled node</para>
</listitem></itemizedlist>
</para>
<para>No other guarantees are made. In particular:</para>
<para><itemizedlist>
<listitem><para>instance numbers <bold>in no way reflect</bold> any numbering scheme that might exist in SoC documentation, node labels or unit addresses, or properties of the /aliases node (use <ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL()</ref> or <ref refid="group__devicetree-generic-id_1gaa49e19bbc39dc0d6f16b78a5d02482c9" kindref="member">DT_ALIAS()</ref> for those)</para>
</listitem><listitem><para>there <bold>is no general guarantee</bold> that the same node will have the same instance number between builds, even if you are building the same application again in the same build directory</para>
</listitem></itemizedlist>
</para>
<para>Example devicetree fragment: <verbatim>serial1: serial@40001000 {
        compatible = &quot;vnd,soc-serial&quot;;
        status = &quot;disabled&quot;;
        current-speed = &lt;9600&gt;;
        ...
};

serial2: serial@40002000 {
        compatible = &quot;vnd,soc-serial&quot;;
        status = &quot;okay&quot;;
        current-speed = &lt;57600&gt;;
        ...
};

serial3: serial@40003000 {
        compatible = &quot;vnd,soc-serial&quot;;
        current-speed = &lt;115200&gt;;
        ...
};
</verbatim> Assuming no other nodes in the devicetree have compatible &quot;vnd,soc-serial&quot;, that compatible has nodes with instance numbers 0, 1, and 2.</para>
<para>The nodes serial@40002000 and serial@40003000 are both enabled, so their instance numbers are 0 and 1, but no guarantees are made regarding which node has which instance number.</para>
<para>Since serial@40001000 is the only disabled node, it has instance number 2, since disabled nodes are assigned the largest instance numbers. Therefore: <verbatim>// Could be 57600 or 115200. There is no way to be sure:
// either serial@40002000 or serial@40003000 could
// have instance number 0, so this could be the current-speed
// property of either of those nodes.
DT_PROP(DT_INST(0, vnd_soc_serial), current_speed)

// Could be 57600 or 115200, for the same reason.
// If the above expression expands to 57600, then
// this expands to 115200, and vice-versa.
DT_PROP(DT_INST(1, vnd_soc_serial), current_speed)

// 9600, because there is only one disabled node, and
// disabled nodes are &quot;at the the end&quot; of the instance
// number &quot;list&quot;.
DT_PROP(DT_INST(2, vnd_soc_serial), current_speed)
</verbatim> Notice how &quot;vnd,soc-serial&quot; in the devicetree becomes vnd_soc_serial (without quotes) in the <ref refid="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" kindref="member">DT_INST()</ref> arguments. (As usual, current-speed in the devicetree becomes current_speed as well.)</para>
<para>Nodes whose &quot;compatible&quot; property has multiple values are assigned independent instance numbers for each compatible.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number for compatible &quot;compat&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores compatible, without quotes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the node with that instance number and compatible </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="305" column="9" bodyfile="include/devicetree.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1ga3ac56d491510275ee1321446796ab63b" prot="public" static="no">
        <name>DT_PARENT</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(node_id, _PARENT)</initializer>
        <briefdescription>
<para>Get a node identifier for a parent node. </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree fragment: <verbatim>parent: parent-node {
        child: child-node {
                ...
        };
};
</verbatim> The following are equivalent ways to get the same node identifier: <verbatim>DT_NODELABEL(parent)
DT_PARENT(DT_NODELABEL(child))
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node&apos;s parent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="326" column="9" bodyfile="include/devicetree.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1ga176760ce1a019020b5465eebd4f44ff5" prot="public" static="no">
        <name>DT_INST_PARENT</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-generic-id_1ga3ac56d491510275ee1321446796ab63b" kindref="member">DT_PARENT</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT parent&apos;s node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the instance&apos;s parent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="333" column="9" bodyfile="include/devicetree.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1gaa4eccf276a426cbbc6e440d72b692753" prot="public" static="no">
        <name>DT_GPARENT</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__devicetree-generic-id_1ga3ac56d491510275ee1321446796ab63b" kindref="member">DT_PARENT</ref>(<ref refid="group__devicetree-generic-id_1ga3ac56d491510275ee1321446796ab63b" kindref="member">DT_PARENT</ref>(node_id))</initializer>
        <briefdescription>
<para>Get a node identifier for a grandparent node. </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree fragment: <verbatim>gparent: grandparent-node {
        parent: parent-node {
                child: child-node { ... }
        };
};
</verbatim> The following are equivalent ways to get the same node identifier: <verbatim>DT_GPARENT(DT_NODELABEL(child))
DT_PARENT(DT_PARENT(DT_NODELABEL(child))
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node&apos;s parent&apos;s parent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="354" column="9" bodyfile="include/devicetree.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1ga88259608f4e9083ccc2e9ca5ec2c212e" prot="public" static="no">
        <name>DT_CHILD</name>
        <param><defname>node_id</defname></param>
        <param><defname>child</defname></param>
        <initializer><ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(node_id, <ref refid="devicetree_8h_1a1dfb7bf7a80265200b90122e7bc79fd5" kindref="member">DT_S_PREFIX</ref>(child))</initializer>
        <briefdescription>
<para>Get a node identifier for a child node. </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree fragment: <verbatim>/ {
        soc-label: soc {
                serial1: serial@40001000 {
                        status = &quot;okay&quot;;
                        current-speed = &lt;115200&gt;;
                        ...
                };
        };
};
</verbatim> Example usage with <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref> to get the status of the serial@40001000 node: <verbatim>#define SOC_NODE DT_NODELABEL(soc_label)
DT_PROP(DT_CHILD(SOC_NODE, serial_40001000), status) // &quot;okay&quot;
</verbatim> Node labels like &quot;serial1&quot; cannot be used as the &quot;child&quot; argument to this macro. Use <ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL()</ref> for that instead.</para>
<para>You can also use <ref refid="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" kindref="member">DT_FOREACH_CHILD()</ref> to iterate over node identifiers for all of a node&apos;s children.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores child node name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the node with the name referred to by &apos;child&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="387" column="9" bodyfile="include/devicetree.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1ga4858c378b098dcb7c35de1db25442acc" prot="public" static="no">
        <name>DT_COMPAT_GET_ANY_STATUS_OKAY</name>
        <param><defname>compat</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),	\
		    (<ref refid="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" kindref="member">DT_INST</ref>(0, compat)),		\
		    (<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>))</initializer>
        <briefdescription>
<para>Get a node identifier for a status &quot;okay&quot; node with a compatible. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this if you want to get an arbitrary enabled node with a given compatible, and you do not care which one you get. If any enabled nodes with the given compatible exist, a node identifier for one of them is returned. Otherwise, <computeroutput>DT_INVALID_NODE</computeroutput> is returned.</para>
<para>Example devicetree fragment: <verbatim> node-a {
    compatible = &quot;vnd,device&quot;;
    status = &quot;okay&quot;;
 };

 node-b {
    compatible = &quot;vnd,device&quot;;
    status = &quot;okay&quot;;
 };

 node-c {
    compatible = &quot;vnd,device&quot;;
    status = &quot;disabled&quot;;
 };
</verbatim> Example usage: <verbatim>DT_COMPAT_GET_ANY_STATUS_OKAY(vnd_device)
</verbatim> This expands to a node identifier for either <computeroutput>node-a</computeroutput> or <computeroutput>node-b</computeroutput>. It will not expand to a node identifier for <computeroutput>node-c</computeroutput>, because that node does not have status &quot;okay&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores compatible, without quotes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for a node with that compatible, or DT_INVALID_NODE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="425" column="9" bodyfile="include/devicetree.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1gacd79818b99724d834e3bb7ae74ee02cf" prot="public" static="no">
        <name>DT_NODE_PATH</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _PATH)</initializer>
        <briefdescription>
<para>Get a devicetree node&apos;s full path as a string literal. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns the path to a node from a node identifier. To get a node identifier from path components instead, use <ref refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" kindref="member">DT_PATH()</ref>.</para>
<para>Example devicetree fragment: <verbatim>/ {
        soc {
                node: my-node@12345678 { ... };
        };
};
</verbatim> Example usage:</para>
<para><ref refid="group__devicetree-generic-id_1gacd79818b99724d834e3bb7ae74ee02cf" kindref="member">DT_NODE_PATH(DT_NODELABEL(node))</ref> // &quot;/soc/my-node@12345678&quot; <ref refid="group__devicetree-generic-id_1gacd79818b99724d834e3bb7ae74ee02cf" kindref="member">DT_NODE_PATH(DT_PATH(soc))</ref> // &quot;/soc&quot; <ref refid="group__devicetree-generic-id_1gacd79818b99724d834e3bb7ae74ee02cf" kindref="member">DT_NODE_PATH(DT_ROOT)</ref> // &quot;/&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the node&apos;s full path in the devicetree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="453" column="9" bodyfile="include/devicetree.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1ga8a8ab5d12fe59787433d1add94fb1667" prot="public" static="no">
        <name>DT_NODE_FULL_NAME</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FULL_NAME)</initializer>
        <briefdescription>
<para>Get a devicetree node&apos;s name with unit-address as a string literal. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns the node name and unit-address from a node identifier.</para>
<para>Example devicetree fragment: <verbatim>/ {
        soc {
                node: my-node@12345678 { ... };
        };
};
</verbatim> Example usage:</para>
<para><ref refid="group__devicetree-generic-id_1ga8a8ab5d12fe59787433d1add94fb1667" kindref="member">DT_NODE_FULL_NAME(DT_NODELABEL(node))</ref> // &quot;my-node@12345678&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the node&apos;s name with unit-address as a string in the devicetree </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="475" column="9" bodyfile="include/devicetree.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-id_1ga977d0ad58626e3ab906064fdcdace5e6" prot="public" static="no">
        <name>DT_SAME_NODE</name>
        <param><defname>node_id1</defname></param>
        <param><defname>node_id2</defname></param>
        <initializer>	(<ref refid="group__devicetree-dep-ord_1ga5b96dccfd349dd0ddba1812aa942c1bd" kindref="member">DT_DEP_ORD</ref>(node_id1) == (<ref refid="group__devicetree-dep-ord_1ga5b96dccfd349dd0ddba1812aa942c1bd" kindref="member">DT_DEP_ORD</ref>(node_id2)))</initializer>
        <briefdescription>
<para>Do node_id1 and node_id2 refer to the same node? </para>
        </briefdescription>
        <detaileddescription>
<para>Both &quot;node_id1&quot; and &quot;node_id2&quot; must be node identifiers for nodes that exist in the devicetree (if unsure, you can check with <ref refid="group__devicetree-generic-exist_1ga9d5cf40051d042b853f6b0088fd4500a" kindref="member">DT_NODE_EXISTS()</ref>).</para>
<para>The expansion evaluates to 0 or 1, but may not be a literal integer 0 or 1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id1</parametername>
</parameternamelist>
<parameterdescription>
<para>first node identifer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_id2</parametername>
</parameternamelist>
<parameterdescription>
<para>second node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an expression that evaluates to 1 if the node identifiers refer to the same node, and evaluates to 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="492" column="9" bodyfile="include/devicetree.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" prot="public" static="no">
        <name>DT_PROP</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _P_##prop)</initializer>
        <briefdescription>
<para>Get a devicetree property value. </para>
        </briefdescription>
        <detaileddescription>
<para>For properties whose bindings have the following types, this macro expands to:</para>
<para><itemizedlist>
<listitem><para>string: a string literal</para>
</listitem><listitem><para>boolean: 0 if the property is false, or 1 if it is true</para>
</listitem><listitem><para>int: the property&apos;s value as an integer literal</para>
</listitem><listitem><para>array, uint8-array, string-array: an initializer expression in braces, whose elements are integer or string literals (like {0, 1, 2}, {&quot;hello&quot;, &quot;world&quot;}, etc.)</para>
</listitem><listitem><para>phandle: a node identifier for the node with that phandle</para>
</listitem></itemizedlist>
</para>
<para>A property&apos;s type is usually defined by its binding. In some special cases, it has an assumed type defined by the devicetree specification even when no binding is available: &quot;compatible&quot; has type string-array, &quot;status&quot; and &quot;label&quot; have type string, and &quot;interrupt-controller&quot; has type boolean.</para>
<para>For other properties or properties with unknown type due to a missing binding, behavior is undefined.</para>
<para>For usage examples, see <ref refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" kindref="member">DT_PATH()</ref>, <ref refid="group__devicetree-generic-id_1gaa49e19bbc39dc0d6f16b78a5d02482c9" kindref="member">DT_ALIAS()</ref>, <ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL()</ref>, and <ref refid="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" kindref="member">DT_INST()</ref> above.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a representation of the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="538" column="9" bodyfile="include/devicetree.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" prot="public" static="no">
        <name>DT_PROP_LEN</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop##_LEN)</initializer>
        <briefdescription>
<para>Get a property&apos;s logical length. </para>
        </briefdescription>
        <detaileddescription>
<para>Here, &quot;length&quot; is a number of elements, which may differ from the property&apos;s size in bytes.</para>
<para>The return value depends on the property&apos;s type:</para>
<para><itemizedlist>
<listitem><para>for types array, string-array, and uint8-array, this expands to the number of elements in the array</para>
</listitem><listitem><para>for type phandles, this expands to the number of phandles</para>
</listitem><listitem><para>for type phandle-array, this expands to the number of phandle and specifier blocks in the property</para>
</listitem></itemizedlist>
</para>
<para>These properties are handled as special cases:</para>
<para><itemizedlist>
<listitem><para>reg property: use <ref refid="group__devicetree-reg-prop_1ga6cdd22b6a2881b09ed63d9d262566a0a" kindref="member">DT_NUM_REGS(node_id)</ref> instead</para>
</listitem><listitem><para>interrupts property: use <ref refid="group__devicetree-interrupts-prop_1ga2985e5d55d2d9dbbbe93ba855d5db320" kindref="member">DT_NUM_IRQS(node_id)</ref> instead</para>
</listitem></itemizedlist>
</para>
<para>It is an error to use this macro with the ranges, dma-ranges, reg or interrupts properties.</para>
<para>For other properties, behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>a lowercase-and-underscores property with a logical length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="568" column="9" bodyfile="include/devicetree.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gabd2d8a9242818c7a9bf981114c912d75" prot="public" static="no">
        <name>DT_PROP_LEN_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(node_id, prop), \
		    (<ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN</ref>(node_id, prop)), (default_value))</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the property is defined (as determined by <ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP()</ref>), this expands to <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, prop)</ref>. The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>a lowercase-and-underscores property with a logical length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s length or the given default value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="584" column="9" bodyfile="include/devicetree.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga479dfc704087eea7e7c5af42ae98576c" prot="public" static="no">
        <name>DT_PROP_HAS_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1ac806173a3b422212ed11c59639ac174c" kindref="member">DT_CAT6</ref>(node_id, _P_, prop, _IDX_, idx, _EXISTS))</initializer>
        <briefdescription>
<para>Is index &quot;idx&quot; valid for an array type property? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-generic-prop_1ga52ad691ea4cae633ca702020e939d461" kindref="member">DT_PROP_BY_IDX(node_id, prop, idx)</ref> or <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX(node_id, prop, idx, ...)</ref> are valid at index &quot;idx&quot;. If it returns 0, it is an error to use those macros with that index.</para>
<para>These properties are handled as special cases:</para>
<para><itemizedlist>
<listitem><para>reg property: use <ref refid="group__devicetree-reg-prop_1ga59aa43231678d08eeac6e5b344048f02" kindref="member">DT_REG_HAS_IDX(node_id, idx)</ref> instead</para>
</listitem><listitem><para>interrupts property: use <ref refid="group__devicetree-interrupts-prop_1ga238a290dc6cea9479104ff8f95de1c4c" kindref="member">DT_IRQ_HAS_IDX(node_id, idx)</ref> instead</para>
</listitem></itemizedlist>
</para>
<para>It is an error to use this macro with the reg or interrupts properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>a lowercase-and-underscores property with a logical length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression which evaluates to 1 if &quot;idx&quot; is a valid index into the given property, and 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="608" column="9" bodyfile="include/devicetree.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga52ad691ea4cae633ca702020e939d461" prot="public" static="no">
        <name>DT_PROP_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop##_IDX_##idx)</initializer>
        <briefdescription>
<para>Get the value at index &quot;idx&quot; in an array type property. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;property[index]&quot;.</para>
<para>When the property&apos;s binding has type array, string-array, uint8-array, or phandles, this expands to the idx-th array element as an integer, string literal, or node identifier respectively.</para>
<para>These properties are handled as special cases:</para>
<para><itemizedlist>
<listitem><para>reg property: use <ref refid="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" kindref="member">DT_REG_ADDR_BY_IDX()</ref> or <ref refid="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" kindref="member">DT_REG_SIZE_BY_IDX()</ref> instead</para>
</listitem><listitem><para>interrupts property: use <ref refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" kindref="member">DT_IRQ_BY_IDX()</ref> instead</para>
</listitem></itemizedlist>
</para>
<para>For non-array properties, behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a representation of the idx-th element of the property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="633" column="9" bodyfile="include/devicetree.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" prot="public" static="no">
        <name>DT_PROP_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(node_id, prop), \
		    (<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop)), (default_value))</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP(node_id, prop)</ref>. The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="648" column="9" bodyfile="include/devicetree.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga89070ef089930290ce31788b5b3b84e5" prot="public" static="no">
        <name>DT_LABEL</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, label)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP(node_id, label)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience for the Zephyr device API, which uses label properties as <ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref> arguments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node&apos;s label property value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="660" column="9" bodyfile="include/devicetree.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" prot="public" static="no">
        <name>DT_ENUM_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop##_ENUM_IDX)</initializer>
        <briefdescription>
<para>Get a property value&apos;s index into its enumeration values. </para>
        </briefdescription>
        <detaileddescription>
<para>The return values start at zero.</para>
<para>Example devicetree fragment: <verbatim>usb1: usb@12340000 {
        maximum-speed = &quot;full-speed&quot;;
};
usb2: usb@12341000 {
        maximum-speed = &quot;super-speed&quot;;
};
</verbatim> Example bindings fragment: <verbatim>properties:
  maximum-speed:
    type: string
    enum:
       - &quot;low-speed&quot;
       - &quot;full-speed&quot;
       - &quot;high-speed&quot;
       - &quot;super-speed&quot;
</verbatim> Example usage: <verbatim>DT_ENUM_IDX(DT_NODELABEL(usb1), maximum_speed) // 1
DT_ENUM_IDX(DT_NODELABEL(usb2), maximum_speed) // 3
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index of the property&apos;s value in its enum: list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="696" column="9" bodyfile="include/devicetree.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gac3616e3aa1a025235032786de8d31576" prot="public" static="no">
        <name>DT_ENUM_IDX_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_idx_value</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(node_id, prop), \
		    (<ref refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" kindref="member">DT_ENUM_IDX</ref>(node_id, prop)), (default_idx_value))</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" kindref="member">DT_ENUM_IDX()</ref>, but with a fallback to a default enum index. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to its zero based index value thanks to <ref refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" kindref="member">DT_ENUM_IDX(node_id, prop)</ref>.</para>
<para>Otherwise, this expands to provided default index enum value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_idx_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback index value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index of the property&apos;s value in its enum if present, default_idx_value ohterwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="712" column="9" bodyfile="include/devicetree.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" prot="public" static="no">
        <name>DT_STRING_TOKEN</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _STRING_TOKEN)</initializer>
        <briefdescription>
<para>Get a string property&apos;s value as a token. </para>
        </briefdescription>
        <detaileddescription>
<para>This removes &quot;the quotes&quot; from string-valued properties, and converts non-alphanumeric characters to underscores. That can be useful, for example, when programmatically using the value to form a C variable or code.</para>
<para><ref refid="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" kindref="member">DT_STRING_TOKEN()</ref> can only be used for properties with string type.</para>
<para>It is an error to use <ref refid="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" kindref="member">DT_STRING_TOKEN()</ref> in other circumstances.</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        prop = &quot;foo&quot;;
};
n2: node-2 {
        prop = &quot;FOO&quot;;
}
n3: node-3 {
        prop = &quot;123 foo&quot;;
};
</verbatim> Example bindings fragment: <verbatim>properties:
  prop:
    type: string
</verbatim> Example usage: <verbatim>DT_STRING_TOKEN(DT_NODELABEL(n1), prop) // foo
DT_STRING_TOKEN(DT_NODELABEL(n2), prop) // FOO
DT_STRING_TOKEN(DT_NODELABEL(n3), prop) // 123_foo
</verbatim> Notice how:</para>
<para><itemizedlist>
<listitem><para>Unlike C identifiers, the property values may begin with a number. It&apos;s the user&apos;s responsibility not to use such values as the name of a C identifier.</para>
</listitem><listitem><para>The uppercased &quot;FOO&quot; in the DTS remains <computeroutput>FOO</computeroutput> as a token. It is <emphasis>not</emphasis> converted to <computeroutput>foo</computeroutput>.</para>
</listitem><listitem><para>The whitespace in the DTS &quot;123 foo&quot; string is converted to <computeroutput>123_foo</computeroutput> as a token.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property string name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of <computeroutput>prop</computeroutput> as a token, i.e. without any quotes and with special characters converted to underscores </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="768" column="9" bodyfile="include/devicetree.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gae0b5e2b6633a98ead17ec20d3494658f" prot="public" static="no">
        <name>DT_STRING_UPPER_TOKEN</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _STRING_UPPER_TOKEN)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" kindref="member">DT_STRING_TOKEN()</ref>, but uppercased. </para>
        </briefdescription>
        <detaileddescription>
<para>This removes &quot;the quotes and capitalize&quot; from string-valued properties, and converts non-alphanumeric characters to underscores. That can be useful, for example, when programmatically using the value to form a C variable or code.</para>
<para><ref refid="group__devicetree-generic-prop_1gae0b5e2b6633a98ead17ec20d3494658f" kindref="member">DT_STRING_UPPER_TOKEN()</ref> can only be used for properties with string type.</para>
<para>It is an error to use <ref refid="group__devicetree-generic-prop_1gae0b5e2b6633a98ead17ec20d3494658f" kindref="member">DT_STRING_UPPER_TOKEN()</ref> in other circumstances.</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        prop = &quot;foo&quot;;
};
n2: node-2 {
        prop = &quot;123 foo&quot;;
};
</verbatim> Example bindings fragment: <verbatim>properties:
  prop:
    type: string
</verbatim> Example usage: <verbatim>DT_STRING_UPPER_TOKEN(DT_NODELABEL(n1), prop) // FOO
DT_STRING_UPPER_TOKEN(DT_NODELABEL(n2), prop) // 123_FOO
</verbatim> Notice how:</para>
<para><itemizedlist>
<listitem><para>Unlike C identifiers, the property values may begin with a number. It&apos;s the user&apos;s responsibility not to use such values as the name of a C identifier.</para>
</listitem><listitem><para>The lowercased &quot;foo&quot; in the DTS becomes <computeroutput>FOO</computeroutput> as a token, i.e. it is uppercased.</para>
</listitem><listitem><para>The whitespace in the DTS &quot;123 foo&quot; string is converted to <computeroutput>123_FOO</computeroutput> as a token, i.e. it is uppercased and whitespace becomes an underscore.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property string name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of <computeroutput>prop</computeroutput> as a token, i.e. without any quotes and with special characters converted to underscores </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="820" column="9" bodyfile="include/devicetree.h" bodystart="820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" prot="public" static="no">
        <name>DT_PROP_BY_PHANDLE_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>phs</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(<ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX</ref>(node_id, phs, idx), prop)</initializer>
        <briefdescription>
<para>Get a property value from a phandle in a property. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shorthand for: <verbatim>DT_PROP(DT_PHANDLE_BY_IDX(node_id, phs, idx), prop)
</verbatim> That is, &quot;prop&quot; is a property of the phandle&apos;s node, not a property of &quot;node_id&quot;.</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        foo = &lt;&amp;n2 &amp;n3&gt;;
};

n2: node-2 {
        bar = &lt;42&gt;;
};

n3: node-3 {
        baz = &lt;43&gt;;
};
</verbatim> Example usage: <verbatim>#define N1 DT_NODELABEL(n1)

DT_PROP_BY_PHANDLE_IDX(N1, foo, 0, bar) // 42
DT_PROP_BY_PHANDLE_IDX(N1, foo, 1, baz) // 43
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phs</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle&quot;, &quot;phandles&quot;, or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;phs&quot;, which must be zero if &quot;phs&quot; has type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="870" column="9" bodyfile="include/devicetree.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gad1c6a6544eac7bc77c1ed4aebd15df2b" prot="public" static="no">
        <name>DT_PROP_BY_PHANDLE_IDX_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>phs</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(<ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX</ref>(node_id, phs, idx), prop, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" kindref="member">DT_PROP_BY_PHANDLE_IDX()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to DT_PROP_BY_PHANDLE_IDX(node_id, phs, idx, prop). The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phs</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle&quot;, &quot;phandles&quot;, or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;phs&quot;, which must be zero if &quot;phs&quot; has type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="892" column="9" bodyfile="include/devicetree.h" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gabc1b099dda97fb03a9259a8b21fc04d2" prot="public" static="no">
        <name>DT_PROP_BY_PHANDLE</name>
        <param><defname>node_id</defname></param>
        <param><defname>ph</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" kindref="member">DT_PROP_BY_PHANDLE_IDX</ref>(node_id, ph, 0, prop)</initializer>
        <briefdescription>
<para>Get a property value from a phandle&apos;s node. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <ref refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" kindref="member">DT_PROP_BY_PHANDLE_IDX(node_id, ph, 0, prop)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ph</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of &quot;node_id&quot; with type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="906" column="9" bodyfile="include/devicetree.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" prot="public" static="no">
        <name>DT_PHA_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, pha##_IDX_##idx##_VAL_##cell)</initializer>
        <briefdescription>
<para>Get a phandle-array specifier cell value at an index. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;phandle_array[index].cell&quot;. That is, the cell value is in the &quot;pha&quot; property of &quot;node_id&quot;, inside the specifier at index &quot;idx&quot;.</para>
<para>Example devicetree fragment: <verbatim>gpio0: gpio@... {
        #gpio-cells = &lt;2&gt;;
};

gpio1: gpio@... {
        #gpio-cells = &lt;2&gt;;
};

led: led_0 {
        gpios = &lt;&amp;gpio0 17 0x1&gt;, &lt;&amp;gpio1 5 0x3&gt;;
};
</verbatim> Bindings fragment for the gpio0 and gpio1 nodes: <verbatim>gpio-cells:
  - pin
  - flags
</verbatim> Above, &quot;gpios&quot; has two elements:</para>
<para><itemizedlist>
<listitem><para>index 0 has specifier &lt;17 0x1&gt;, so its &quot;pin&quot; cell is 17, and its &quot;flags&quot; cell is 0x1</para>
</listitem><listitem><para>index 1 has specifier &lt;5 0x3&gt;, so &quot;pin&quot; is 5 and &quot;flags&quot; is 0x3</para>
</listitem></itemizedlist>
</para>
<para>Example usage: <verbatim>#define LED DT_NODELABEL(led)

DT_PHA_BY_IDX(LED, gpios, 0, pin)   // 17
DT_PHA_BY_IDX(LED, gpios, 1, flags) // 0x3
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name within the specifier at &quot;pha&quot; index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="957" column="9" bodyfile="include/devicetree.h" bodystart="957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gad830ed96dbc4f7dac3455153e0a944d6" prot="public" static="no">
        <name>DT_PHA_BY_IDX_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, pha##_IDX_##idx##_VAL_##cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to DT_PHA_BY_IDX(node_id, pha, idx, cell). The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name within the specifier at &quot;pha&quot; index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value or &quot;default_value&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="977" column="9" bodyfile="include/devicetree.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gacef5921973a55433161fe0be3f8f628d" prot="public" static="no">
        <name>DT_PHA</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX</ref>(node_id, pha, 0, cell)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX(node_id, pha, 0, cell)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="991" column="9" bodyfile="include/devicetree.h" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga886559b058b24164b62ab95215d860bd" prot="public" static="no">
        <name>DT_PHA_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gad830ed96dbc4f7dac3455153e0a944d6" kindref="member">DT_PHA_BY_IDX_OR</ref>(node_id, pha, 0, cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gacef5921973a55433161fe0be3f8f628d" kindref="member">DT_PHA()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to <ref refid="group__devicetree-generic-prop_1gacef5921973a55433161fe0be3f8f628d" kindref="member">DT_PHA(node_id, pha, cell)</ref>. The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1007" column="9" bodyfile="include/devicetree.h" bodystart="1007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gae469615356a867c49416da15bdc44a26" prot="public" static="no">
        <name>DT_PHA_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, pha##_NAME_##name##_VAL_##cell)</initializer>
        <briefdescription>
<para>Get a value within a phandle-array specifier by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX()</ref>, except it treats &quot;pha&quot; as a structure where each array element has a name.</para>
<para>It might help to read the argument order as being similar to &quot;node-&gt;phandle_struct.name.cell&quot;. That is, the cell value is in the &quot;pha&quot; property of &quot;node_id&quot;, treated as a data structure where each array element has a name.</para>
<para>Example devicetree fragment: <verbatim>n: node {
        io-channels = &lt;&amp;adc1 10&gt;, &lt;&amp;adc2 20&gt;;
        io-channel-names = &quot;SENSOR&quot;, &quot;BANDGAP&quot;;
};
</verbatim> Bindings fragment for the &quot;adc1&quot; and &quot;adc2&quot; nodes: <verbatim>io-channel-cells:
  - input
</verbatim> Example usage: <verbatim>DT_PHA_BY_NAME(DT_NODELABEL(n), io_channels, sensor, input)  // 10
DT_PHA_BY_NAME(DT_NODELABEL(n), io_channels, bandgap, input) // 20
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a specifier in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name in the named specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1044" column="9" bodyfile="include/devicetree.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga79cda6ca70cc1e27b034ad096d4f4401" prot="public" static="no">
        <name>DT_PHA_BY_NAME_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, pha##_NAME_##name##_VAL_##cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gae469615356a867c49416da15bdc44a26" kindref="member">DT_PHA_BY_NAME()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to DT_PHA_BY_NAME(node_id, pha, name, cell). The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a specifier in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name in the named specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1062" column="9" bodyfile="include/devicetree.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga65c90d2d96255b8569c5b869b637c2fd" prot="public" static="no">
        <name>DT_PHANDLE_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, pha##_NAME_##name##_PH)</initializer>
        <briefdescription>
<para>Get a phandle&apos;s node identifier from a phandle array by name. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;phandle_struct.name.phandle&quot;. That is, the phandle array is treated as a structure with named elements. The return value is the node identifier for a phandle inside the structure.</para>
<para>Example devicetree fragment: <verbatim>adc1: adc@... {
        label = &quot;ADC_1&quot;;
};

adc2: adc@... {
        label = &quot;ADC_2&quot;;
};

n: node {
        io-channels = &lt;&amp;adc1 10&gt;, &lt;&amp;adc2 20&gt;;
        io-channel-names = &quot;SENSOR&quot;, &quot;BANDGAP&quot;;
};
</verbatim> Above, &quot;io-channels&quot; has two elements:</para>
<para><itemizedlist>
<listitem><para>the element named &quot;SENSOR&quot; has phandle &amp;adc1</para>
</listitem><listitem><para>the element named &quot;BANDGAP&quot; has phandle &amp;adc2</para>
</listitem></itemizedlist>
</para>
<para>Example usage: <verbatim>#define NODE DT_NODELABEL(n)

DT_LABEL(DT_PHANDLE_BY_NAME(NODE, io_channels, sensor))  // &quot;ADC_1&quot;
DT_LABEL(DT_PHANDLE_BY_NAME(NODE, io_channels, bandgap)) // &quot;ADC_2&quot;
</verbatim> Notice how devicetree properties and names are lowercased, and non-alphanumeric characters are converted to underscores.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of an element in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node with that phandle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1112" column="9" bodyfile="include/devicetree.h" bodystart="1112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" prot="public" static="no">
        <name>DT_PHANDLE_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1ac806173a3b422212ed11c59639ac174c" kindref="member">DT_CAT6</ref>(node_id, _P_, prop, _IDX_, idx, _PH)</initializer>
        <briefdescription>
<para>Get a node identifier for a phandle in a property. </para>
        </briefdescription>
        <detaileddescription>
<para>When a node&apos;s value at a logical index contains a phandle, this macro returns a node identifier for the node with that phandle.</para>
<para>Therefore, if &quot;prop&quot; has type &quot;phandle&quot;, &quot;idx&quot; must be zero. (A &quot;phandle&quot; type is treated as a &quot;phandles&quot; with a fixed length of 1).</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        foo = &lt;&amp;n2 &amp;n3&gt;;
};

n2: node-2 { ... };
n3: node-3 { ... };
</verbatim> Above, &quot;foo&quot; has type phandles and has two elements:</para>
<para><itemizedlist>
<listitem><para>index 0 has phandle &amp;n2, which is node-2&apos;s phandle</para>
</listitem><listitem><para>index 1 has phandle &amp;n3, which is node-3&apos;s phandle</para>
</listitem></itemizedlist>
</para>
<para>Example usage: <verbatim>#define N1 DT_NODELABEL(n1)

DT_PHANDLE_BY_IDX(N1, foo, 0) // node identifier for node-2
DT_PHANDLE_BY_IDX(N1, foo, 1) // node identifier for node-3
</verbatim> Behavior is analogous for phandle-arrays.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name in &quot;node_id&quot; with type &quot;phandle&quot;, &quot;phandles&quot; or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into &quot;prop&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the node with the phandle at that index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1154" column="9" bodyfile="include/devicetree.h" bodystart="1154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga7bd77c49472ba4547d87f00f40fd7171" prot="public" static="no">
        <name>DT_PHANDLE</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX</ref>(node_id, prop, 0)</initializer>
        <briefdescription>
<para>Get a node identifier for a phandle property&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX(node_id, prop, 0)</ref>. Its primary benefit is readability when &quot;prop&quot; has type &quot;phandle&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of &quot;node_id&quot; with type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node pointed to by &quot;ph&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1173" column="9" bodyfile="include/devicetree.h" bodystart="1173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga784cff5ee4c0439c429cc3c26c4410fc" prot="public" static="no">
        <name>DT_NUM_RANGES</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _RANGES_NUM)</initializer>
        <briefdescription>
<para>Get the number of range blocks in the ranges property. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this instead of <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, ranges)</ref>.</para>
<para>Example devicetree fragment: <verbatim>pcie0: pcie@0 {
        compatible = &quot;intel,pcie&quot;;
        reg = &lt;0 1&gt;;
        #address-cells = &lt;3&gt;;
        #size-cells = &lt;2&gt;;

        ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                 &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                 &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
};

other: other@1 {
        reg = &lt;1 1&gt;;

        ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                 &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
};
</verbatim> Example usage: <verbatim>DT_NUM_RANGES(DT_NODELABEL(pcie0)) // 3
DT_NUM_RANGES(DT_NODELABEL(other)) // 2
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1217" column="9" bodyfile="include/devicetree.h" bodystart="1217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1gac6f54058c58b06935bd2deae9f1ec2db" prot="public" static="no">
        <name>DT_RANGES_HAS_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _EXISTS))</initializer>
        <briefdescription>
<para>Is &quot;idx&quot; a valid range block index? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" kindref="member">DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(node_id, idx)</ref>, <ref refid="group__devicetree-ranges-prop_1ga48d493ad616438ace2396c0312a242ba" kindref="member">DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(node_id, idx)</ref> or <ref refid="group__devicetree-ranges-prop_1ga52677a5bc86f9132a09b6bc37153afb2" kindref="member">DT_RANGES_LENGTH_BY_IDX(node_id, idx)</ref> are valid. For <ref refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" kindref="member">DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(node_id, idx)</ref> the return value of <ref refid="group__devicetree-ranges-prop_1ga3730c9176911bd8cc762f447eb020ecd" kindref="member">DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(node_id, idx)</ref> will indicate validity. If it returns 0, it is an error to use those macros with index &quot;idx&quot;, including <ref refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" kindref="member">DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(node_id, idx)</ref>.</para>
<para>Example devicetree fragment:</para>
<para><verbatim>pcie0: pcie@0 {
        compatible = &quot;intel,pcie&quot;;
        reg = &lt;0 1&gt;;
        #address-cells = &lt;3&gt;;
        #size-cells = &lt;2&gt;;

        ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                 &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                 &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
};

other: other@1 {
        reg = &lt;1 1&gt;;

        ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                 &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
};
</verbatim> Example usage: <verbatim>DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 0) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 1) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 2) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(pcie0), 3) // 0
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 0) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 1) // 1
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 2) // 0
DT_RANGES_HAS_IDX(DT_NODELABEL(other), 3) // 0
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;idx&quot; is a valid register block index, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1268" column="9" bodyfile="include/devicetree.h" bodystart="1268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga3730c9176911bd8cc762f447eb020ecd" prot="public" static="no">
        <name>DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_CHILD_BUS_FLAGS_EXISTS))</initializer>
        <briefdescription>
<para>Does a ranges property have child bus flags at index? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" kindref="member">DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(node_id, idx)</ref> is valid. If it returns 0, it is an error to use this macro with index &quot;idx&quot;. This macro only returns 1 for PCIe buses (i.e. nodes whose bindings specify they are &quot;pcie&quot; bus nodes.)</para>
<para>Example devicetree fragment: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 0) // 1
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 1) // 1
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 2) // 1
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(pcie0), 3) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 0) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 1) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 2) // 0
DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(DT_NODELABEL(other), 3) // 0
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;idx&quot; is a valid child bus flags index, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1319" column="9" bodyfile="include/devicetree.h" bodystart="1319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" prot="public" static="no">
        <name>DT_RANGES_CHILD_BUS_FLAGS_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_CHILD_BUS_FLAGS)</initializer>
        <briefdescription>
<para>Get the ranges property child bus flags at index. </para>
        </briefdescription>
        <detaileddescription>
<para>When the node is a PCIe bus, the Child Bus Address has an extra cell used to store some flags, thus this cell is extracted from the Child Bus Address as Child Bus Flags field.</para>
<para>Example devicetree fragments: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(DT_NODELABEL(pcie0), 0) // 0x1000000
DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x2000000
DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x3000000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range child bus flags field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1355" column="9" bodyfile="include/devicetree.h" bodystart="1355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" prot="public" static="no">
        <name>DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_CHILD_BUS_ADDRESS)</initializer>
        <briefdescription>
<para>Get the ranges property child bus address at index. </para>
        </briefdescription>
        <detaileddescription>
<para>When the node is a PCIe bus, the Child Bus Address has an extra cell used to store some flags, thus this cell is removed from the Child Bus Address.</para>
<para>Example devicetree fragments: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 0) // 0
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x10000000
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x8000000000
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 0) // 0
DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 1) // 0x10000000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range child bus address field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1400" column="9" bodyfile="include/devicetree.h" bodystart="1400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga48d493ad616438ace2396c0312a242ba" prot="public" static="no">
        <name>DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_PARENT_BUS_ADDRESS)</initializer>
        <briefdescription>
<para>Get the ranges property parent bus address at index. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarly to <ref refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" kindref="member">DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX()</ref>, this properly accounts for child bus flags cells when the node is a PCIe bus.</para>
<para>Example devicetree fragment: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 0) // 0x3eff0000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x10000000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x8000000000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 0) // 0x3eff0000
DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(DT_NODELABEL(other), 1) // 0x10000000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range parent bus address field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1445" column="9" bodyfile="include/devicetree.h" bodystart="1445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga52677a5bc86f9132a09b6bc37153afb2" prot="public" static="no">
        <name>DT_RANGES_LENGTH_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _RANGES_IDX_, idx, _VAL_LENGTH)</initializer>
        <briefdescription>
<para>Get the ranges property length at index. </para>
        </briefdescription>
        <detaileddescription>
<para>Similarly to <ref refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" kindref="member">DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX()</ref>, this properly accounts for child bus flags cells when the node is a PCIe bus.</para>
<para>Example devicetree fragment: <verbatim>parent {
        #address-cells = &lt;2&gt;;

        pcie0: pcie@0 {
                compatible = &quot;intel,pcie&quot;;
                reg = &lt;0 0 1&gt;;
                #address-cells = &lt;3&gt;;
                #size-cells = &lt;2&gt;;

                ranges = &lt;0x1000000 0 0 0 0x3eff0000 0 0x10000&gt;,
                         &lt;0x2000000 0 0x10000000 0 0x10000000 0 0x2eff0000&gt;,
                         &lt;0x3000000 0x80 0 0x80 0 0x80 0&gt;;
        };

        other: other@1 {
                reg = &lt;0 1 1&gt;;

                ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                         &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
        };
};
</verbatim> Example usage: <verbatim>DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(pcie0), 0) // 0x10000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(pcie0), 1) // 0x2eff0000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(pcie0), 2) // 0x8000000000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(other), 0) // 0x10000
DT_RANGES_LENGTH_BY_IDX(DT_NODELABEL(other), 1) // 0x2eff0000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the ranges array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>range length field at idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1490" column="9" bodyfile="include/devicetree.h" bodystart="1490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-ranges-prop_1ga4c71a8adcfe6c53b480775510c92a632" prot="public" static="no">
        <name>DT_FOREACH_RANGE</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_RANGE)(fn)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each entry of &quot;node_id&quot; ranges property. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take two parameters, &quot;node_id&quot; which will be the node identifier of the node with the ranges property and &quot;idx&quot; the index of the ranges block.</para>
<para>Example devicetree fragment: <verbatim>n: node@0 {
        reg = &lt;0 0 1&gt;;

        ranges = &lt;0x0 0x0 0x0 0x3eff0000 0x10000&gt;,
                 &lt;0x0 0x10000000 0x0 0x10000000 0x2eff0000&gt;;
};
</verbatim> Example usage: <verbatim>#define RANGE_LENGTH(node_id, idx) DT_RANGES_LENGTH_BY_IDX(node_id, idx),

const uint64_t *ranges_length[] = {
        DT_FOREACH_RANGE(DT_NODELABEL(n), RANGE_LENGTH)
};
</verbatim> This expands to: <verbatim>const char *ranges_length[] = {
    0x10000, 0x2eff0000,
};
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1526" column="9" bodyfile="include/devicetree.h" bodystart="1526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1ga6cdd22b6a2881b09ed63d9d262566a0a" prot="public" static="no">
        <name>DT_NUM_REGS</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _REG_NUM)</initializer>
        <briefdescription>
<para>Get the number of register blocks in the reg property. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this instead of <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, reg)</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of register blocks in the node&apos;s &quot;reg&quot; property. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1546" column="9" bodyfile="include/devicetree.h" bodystart="1546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1ga59aa43231678d08eeac6e5b344048f02" prot="public" static="no">
        <name>DT_REG_HAS_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _REG_IDX_##idx##_EXISTS))</initializer>
        <briefdescription>
<para>Is &quot;idx&quot; a valid register block index? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" kindref="member">DT_REG_ADDR_BY_IDX(node_id, idx)</ref> or <ref refid="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" kindref="member">DT_REG_SIZE_BY_IDX(node_id, idx)</ref> are valid. If it returns 0, it is an error to use those macros with index &quot;idx&quot;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;idx&quot; is a valid register block index, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1559" column="9" bodyfile="include/devicetree.h" bodystart="1559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" prot="public" static="no">
        <name>DT_REG_ADDR_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _REG_IDX_##idx##_VAL_ADDRESS)</initializer>
        <briefdescription>
<para>Get the base address of the register block at index &quot;idx&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the register whose address to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the idx-th register block </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1568" column="9" bodyfile="include/devicetree.h" bodystart="1568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" prot="public" static="no">
        <name>DT_REG_SIZE_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _REG_IDX_##idx##_VAL_SIZE)</initializer>
        <briefdescription>
<para>Get the size of the register block at index &quot;idx&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the size of an individual register block, not the total number of register blocks in the property; use <ref refid="group__devicetree-reg-prop_1ga6cdd22b6a2881b09ed63d9d262566a0a" kindref="member">DT_NUM_REGS()</ref> for that.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the register whose size to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of the idx-th register block </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1582" column="9" bodyfile="include/devicetree.h" bodystart="1582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1gac6d8279c32351ced4c0ac7f32270974e" prot="public" static="no">
        <name>DT_REG_ADDR</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" kindref="member">DT_REG_ADDR_BY_IDX</ref>(node_id, 0)</initializer>
        <briefdescription>
<para>Get a node&apos;s (only) register block address. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" kindref="member">DT_REG_ADDR_BY_IDX(node_id, 0)</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node&apos;s register block address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1592" column="9" bodyfile="include/devicetree.h" bodystart="1592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1gad223efc6c77d008e55c3588953e85bfb" prot="public" static="no">
        <name>DT_REG_SIZE</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" kindref="member">DT_REG_SIZE_BY_IDX</ref>(node_id, 0)</initializer>
        <briefdescription>
<para>Get a node&apos;s (only) register block size. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" kindref="member">DT_REG_SIZE_BY_IDX(node_id, 0)</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node&apos;s only register block&apos;s size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1601" column="9" bodyfile="include/devicetree.h" bodystart="1601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1gaeb5863e878bbd3a362e17616403da692" prot="public" static="no">
        <name>DT_REG_ADDR_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _REG_NAME_##name##_VAL_ADDRESS)</initializer>
        <briefdescription>
<para>Get a register block&apos;s base address by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores register specifier name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the register block specified by name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1609" column="9" bodyfile="include/devicetree.h" bodystart="1609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-reg-prop_1ga042988feb27e58989baa7abb4930409e" prot="public" static="no">
        <name>DT_REG_SIZE_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _REG_NAME_##name##_VAL_SIZE)</initializer>
        <briefdescription>
<para>Get a register block&apos;s size by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores register specifier name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of the register block specified by name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1618" column="9" bodyfile="include/devicetree.h" bodystart="1618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1ga2985e5d55d2d9dbbbe93ba855d5db320" prot="public" static="no">
        <name>DT_NUM_IRQS</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _IRQ_NUM)</initializer>
        <briefdescription>
<para>Get the number of interrupt sources for the node. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this instead of <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, interrupts)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of interrupt specifiers in the node&apos;s &quot;interrupts&quot; property. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1639" column="9" bodyfile="include/devicetree.h" bodystart="1639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1ga238a290dc6cea9479104ff8f95de1c4c" prot="public" static="no">
        <name>DT_IRQ_HAS_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _IRQ_IDX_##idx##_EXISTS))</initializer>
        <briefdescription>
<para>Is &quot;idx&quot; a valid interrupt index? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" kindref="member">DT_IRQ_BY_IDX(node_id, idx)</ref> is valid. If it returns 0, it is an error to use that macro with this index. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the idx is valid for the interrupt property 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1651" column="9" bodyfile="include/devicetree.h" bodystart="1651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1ga739ebdd4bd01d6b7beb75d915174206f" prot="public" static="no">
        <name>DT_IRQ_HAS_CELL_AT_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _IRQ_IDX_##idx##_VAL_##cell##_EXISTS))</initializer>
        <briefdescription>
<para>Does an interrupts property have a named cell specifier at an index? If this returns 1, then <ref refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" kindref="member">DT_IRQ_BY_IDX(node_id, idx, cell)</ref> is valid. If it returns 0, it is an error to use that macro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>named cell value whose existence to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the interrupt specifier at index idx 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1664" column="9" bodyfile="include/devicetree.h" bodystart="1664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1gab9c94ee39db7913598a755c6172fe036" prot="public" static="no">
        <name>DT_IRQ_HAS_CELL</name>
        <param><defname>node_id</defname></param>
        <param><defname>cell</defname></param>
        <initializer><ref refid="group__devicetree-interrupts-prop_1ga739ebdd4bd01d6b7beb75d915174206f" kindref="member">DT_IRQ_HAS_CELL_AT_IDX</ref>(node_id, 0, cell)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__devicetree-interrupts-prop_1ga739ebdd4bd01d6b7beb75d915174206f" kindref="member">DT_IRQ_HAS_CELL_AT_IDX(node_id, 0, cell)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>named cell value whose existence to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the interrupt specifier at index 0 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1674" column="9" bodyfile="include/devicetree.h" bodystart="1674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1ga1c757ff5e4d15f1b3020b30f72c0dd5d" prot="public" static="no">
        <name>DT_IRQ_HAS_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _IRQ_NAME_##name##_VAL_irq_EXISTS))</initializer>
        <briefdescription>
<para>Does an interrupts property have a named specifier value at an index? If this returns 1, then <ref refid="group__devicetree-interrupts-prop_1ga904917c0a407343ef0185e9e6fe96812" kindref="member">DT_IRQ_BY_NAME(node_id, name, cell)</ref> is valid. If it returns 0, it is an error to use that macro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores interrupt specifier name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;name&quot; is a valid named specifier 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1685" column="9" bodyfile="include/devicetree.h" bodystart="1685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" prot="public" static="no">
        <name>DT_IRQ_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _IRQ_IDX_##idx##_VAL_##cell)</initializer>
        <briefdescription>
<para>Get a value within an interrupt specifier at an index. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;interrupts[index].cell&quot;.</para>
<para>This can be used to get information about an individual interrupt when a device generates more than one.</para>
<para>Example devicetree fragment: <verbatim>my-serial: serial@... {
        interrupts = &lt; 33 0 &gt;, &lt; 34 1 &gt;;
};
</verbatim> Assuming the node&apos;s interrupt domain has &quot;#interrupt-cells = &lt;2&gt;;&quot; and the individual cells in each interrupt specifier are named &quot;irq&quot; and &quot;priority&quot; by the node&apos;s binding, here are some examples: <verbatim>#define SERIAL DT_NODELABEL(my_serial)

Example usage                       Value
-------------                       -----
DT_IRQ_BY_IDX(SERIAL, 0, irq)          33
DT_IRQ_BY_IDX(SERIAL, 0, priority)      0
DT_IRQ_BY_IDX(SERIAL, 1, irq,          34
DT_IRQ_BY_IDX(SERIAL, 1, priority)      1
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the interrupt specifier array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>cell name specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the named value at the specifier given by the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1721" column="9" bodyfile="include/devicetree.h" bodystart="1721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1ga904917c0a407343ef0185e9e6fe96812" prot="public" static="no">
        <name>DT_IRQ_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _IRQ_NAME_##name##_VAL_##cell)</initializer>
        <briefdescription>
<para>Get a value within an interrupt specifier by name. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;interrupts.name.cell&quot;.</para>
<para>This can be used to get information about an individual interrupt when a device generates more than one, if the bindings give each interrupt specifier a name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores interrupt specifier name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>cell name specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the named value at the specifier given by the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1739" column="9" bodyfile="include/devicetree.h" bodystart="1739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1gabf60fbd528d300a26c0b4e66fe80a53f" prot="public" static="no">
        <name>DT_IRQ</name>
        <param><defname>node_id</defname></param>
        <param><defname>cell</defname></param>
        <initializer><ref refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" kindref="member">DT_IRQ_BY_IDX</ref>(node_id, 0, cell)</initializer>
        <briefdescription>
<para>Get an interrupt specifier&apos;s value Equivalent to <ref refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" kindref="member">DT_IRQ_BY_IDX(node_id, 0, cell)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>cell name specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the named value at that index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1749" column="9" bodyfile="include/devicetree.h" bodystart="1749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-interrupts-prop_1ga5e00c208388736ce9b5bc0088a77cd95" prot="public" static="no">
        <name>DT_IRQN</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__devicetree-interrupts-prop_1gabf60fbd528d300a26c0b4e66fe80a53f" kindref="member">DT_IRQ</ref>(node_id, irq)</initializer>
        <briefdescription>
<para>Get a node&apos;s (only) irq number. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="group__devicetree-interrupts-prop_1gabf60fbd528d300a26c0b4e66fe80a53f" kindref="member">DT_IRQ(node_id, irq)</ref>. This is provided as a convenience for the common case where a node generates exactly one interrupt, and the IRQ number is in a cell named &quot;irq&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the interrupt number for the node&apos;s only interrupt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1761" column="9" bodyfile="include/devicetree.h" bodystart="1761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-chosen_1ga3412d0acecffa828984cf9e2c89889ed" prot="public" static="no">
        <name>DT_CHOSEN</name>
        <param><defname>prop</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(DT_CHOSEN_, prop)</initializer>
        <briefdescription>
<para>Get a node identifier for a /chosen node property. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only valid to call if <ref refid="group__devicetree-generic-chosen_1ga9df6bacab5f579284f5f3c1e4856cd15" kindref="member">DT_HAS_CHOSEN(prop)</ref> is 1. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name for the /chosen node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the chosen node property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1781" column="9" bodyfile="include/devicetree.h" bodystart="1781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-chosen_1ga9df6bacab5f579284f5f3c1e4856cd15" prot="public" static="no">
        <name>DT_HAS_CHOSEN</name>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(DT_CHOSEN_##prop##_EXISTS)</initializer>
        <briefdescription>
<para>Test if the devicetree has a /chosen node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores devicetree property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the chosen property exists and refers to a node, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1789" column="9" bodyfile="include/devicetree.h" bodystart="1789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" prot="public" static="no">
        <name>DT_FOREACH_CHILD</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD)(fn)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each child of &quot;node_id&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take one parameter, which will be the node identifier of a child node of &quot;node_id&quot;.</para>
<para>Example devicetree fragment: <verbatim>n: node {
        child-1 {
                label = &quot;foo&quot;;
        };
        child-2 {
                label = &quot;bar&quot;;
        };
};
</verbatim> Example usage: <verbatim>#define LABEL_AND_COMMA(node_id) DT_LABEL(node_id),

const char *child_labels[] = {
    DT_FOREACH_CHILD(DT_NODELABEL(n), LABEL_AND_COMMA)
};
</verbatim> This expands to: <verbatim>const char *child_labels[] = {
    &quot;foo&quot;, &quot;bar&quot;,
};
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1835" column="9" bodyfile="include/devicetree.h" bodystart="1835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1gae7461e9fa4687bf88cdd7c76f30986de" prot="public" static="no">
        <name>DT_FOREACH_CHILD_VARGS</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD_VARGS)(fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each child of &quot;node_id&quot; with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; takes multiple arguments. The first should be the node identifier for the child node. The remaining are passed-in by the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" kindref="member">DT_FOREACH_CHILD</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1850" column="9" bodyfile="include/devicetree.h" bodystart="1850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1gae907df926b94f1da52b1ab701392f3bd" prot="public" static="no">
        <name>DT_FOREACH_CHILD_STATUS_OKAY</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD_STATUS_OKAY)(fn)</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on the child nodes with status &quot;okay&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; should take one argument, which is the node identifier for the child node.</para>
<para>As usual, both a missing status and an &quot;ok&quot; status are treated as &quot;okay&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1865" column="9" bodyfile="include/devicetree.h" bodystart="1865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga8bbf6992e5f90d8a28035ea6211dd2a3" prot="public" static="no">
        <name>DT_FOREACH_CHILD_STATUS_OKAY_VARGS</name>
        <param><defname>node_id</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _FOREACH_CHILD_STATUS_OKAY_VARGS)(fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on the child nodes with status &quot;okay&quot; with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; takes multiple arguments. The first should be the node identifier for the child node. The remaining are passed-in by the caller.</para>
<para>As usual, both a missing status and an &quot;ok&quot; status are treated as &quot;okay&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1gae907df926b94f1da52b1ab701392f3bd" kindref="member">DT_FOREACH_CHILD_STATUS_OKAY</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1884" column="9" bodyfile="include/devicetree.h" bodystart="1884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga118a0477ab297a1bda9e16acf556babc" prot="public" static="no">
        <name>DT_FOREACH_PROP_ELEM</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _FOREACH_PROP_ELEM)(fn)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each element in the value of property &quot;prop&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take three parameters: fn(node_id, prop, idx). &quot;node_id&quot; and &quot;prop&quot; are the same as what is passed to DT_FOREACH_PROP_ELEM, and &quot;idx&quot; is the current index into the array. The &quot;idx&quot; values are integer literals starting from 0.</para>
<para>Example devicetree fragment: <verbatim>n: node {
        my-ints = &lt;1 2 3&gt;;
};
</verbatim> Example usage: <verbatim>#define TIMES_TWO(node_id, prop, idx) \
        (2 * DT_PROP_BY_IDX(node_id, prop, idx)),

int array[] = {
        DT_FOREACH_PROP_ELEM(DT_NODELABEL(n), my_ints, TIMES_TWO)
};
</verbatim> This expands to: <verbatim>int array[] = {
        (2 * 1), (2 * 2), (2 * 3),
};
</verbatim> In general, this macro expands to: <verbatim>fn(node_id, prop, 0) fn(node_id, prop, 1) [...] fn(node_id, prop, n-1)
</verbatim> where &quot;n&quot; is the number of elements in &quot;prop&quot;, as it would be returned by <computeroutput><ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, prop)</ref></computeroutput>.</para>
<para>The &quot;prop&quot; argument must refer to a property with type string, array, uint8-array, string-array, phandles, or phandle-array. It is an error to use this macro with properties of other types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1931" column="9" bodyfile="include/devicetree.h" bodystart="1931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1gaae36970d49c860414374c76e136a9607" prot="public" static="no">
        <name>DT_FOREACH_PROP_ELEM_VARGS</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _FOREACH_PROP_ELEM_VARGS)(fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each element in the value of property &quot;prop&quot; with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; must take multiple parameters: fn(node_id, prop, idx, ...). &quot;node_id&quot; and &quot;prop&quot; are the same as what is passed to DT_FOREACH_PROP_ELEM, and &quot;idx&quot; is the current index into the array. The &quot;idx&quot; values are integer literals starting from 0. The remaining arguments are passed-in by the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1ga118a0477ab297a1bda9e16acf556babc" kindref="member">DT_FOREACH_PROP_ELEM</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1951" column="9" bodyfile="include/devicetree.h" bodystart="1951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga52b34316d269cc8d8ef2244d3ca460b8" prot="public" static="no">
        <name>DT_FOREACH_STATUS_OKAY</name>
        <param><defname>compat</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),			\
		    (<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_FOREACH_OKAY_, compat)(fn)),	\
		    ())</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each status &quot;okay&quot; node of a compatible. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro expands to: <verbatim>fn(node_id_1) fn(node_id_2) ... fn(node_id_n)
</verbatim> where each &quot;node_id_&lt;i&gt;&quot; is a node identifier for some node with compatible &quot;compat&quot; and status &quot;okay&quot;. Whitespace is added between expansions as shown above.</para>
<para>Example devicetree fragment: <verbatim>/ {
        a {
                compatible = &quot;foo&quot;;
                status = &quot;okay&quot;;
        };
        b {
                compatible = &quot;foo&quot;;
                status = &quot;disabled&quot;;
        };
        c {
                compatible = &quot;foo&quot;;
        };
};
</verbatim> Example usage: <verbatim>DT_FOREACH_STATUS_OKAY(foo, DT_NODE_PATH)
</verbatim> This expands to one of the following: <verbatim>&quot;/a&quot; &quot;/c&quot;
&quot;/c&quot; &quot;/a&quot;
</verbatim> &quot;One of the following&quot; is because no guarantees are made about the order that node identifiers are passed to &quot;fn&quot; in the expansion.</para>
<para>(The &quot;/c&quot; string literal is present because a missing status property is always treated as if the status were set to &quot;okay&quot;.)</para>
<para>Note also that &quot;fn&quot; is responsible for adding commas, semicolons, or other terminators as needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores devicetree compatible </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to call for each enabled node. Must accept a node_id as its only parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2003" column="9" bodyfile="include/devicetree.h" bodystart="2003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-foreach_1ga99cf30d6cf4847ed99ba7d81ad2b49d0" prot="public" static="no">
        <name>DT_FOREACH_STATUS_OKAY_VARGS</name>
        <param><defname>compat</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),			\
		    (<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_FOREACH_OKAY_VARGS_,			\
			      compat)(fn, __VA_ARGS__)),		\
		    ())</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each status &quot;okay&quot; node of a compatible with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__devicetree-generic-foreach_1ga52b34316d269cc8d8ef2244d3ca460b8" kindref="member">DT_FOREACH_STATUS_OKAY()</ref> except you can also pass additional arguments to &quot;fn&quot;.</para>
<para>Example devicetree fragment: <verbatim>/ {
        a {
                compatible = &quot;foo&quot;;
                val = &lt;3&gt;;
        };
        b {
                compatible = &quot;foo&quot;;
                val = &lt;4&gt;;
        };
};
</verbatim> Example usage: <verbatim>#define MY_FN(node_id, operator) DT_PROP(node_id, val) operator
x = DT_FOREACH_STATUS_OKAY_VARGS(foo, MY_FN, +) 0;
</verbatim> This expands to one of the following: <verbatim>x = 3 + 4 + 0;
x = 4 + 3 + 0;
</verbatim> i.e. it sets x to 7. As with <ref refid="group__devicetree-generic-foreach_1ga52b34316d269cc8d8ef2244d3ca460b8" kindref="member">DT_FOREACH_STATUS_OKAY()</ref>, there are no guarantees about the order nodes appear in the expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores devicetree compatible </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to call for each enabled node. Must accept a node_id as its only parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments to pass to &quot;fn&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2046" column="9" bodyfile="include/devicetree.h" bodystart="2046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1ga9d5cf40051d042b853f6b0088fd4500a" prot="public" static="no">
        <name>DT_NODE_EXISTS</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _EXISTS))</initializer>
        <briefdescription>
<para>Does a node identifier refer to a node? </para>
        </briefdescription>
        <detaileddescription>
<para>Tests whether a node identifier refers to a node which exists, i.e. is defined in the devicetree.</para>
<para>It doesn&apos;t matter whether or not the node has a matching binding, or what the node&apos;s status value is. This is purely a check of whether the node exists at all.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>a node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the node identifier refers to a node, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2076" column="9" bodyfile="include/devicetree.h" bodystart="2076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1ga3b769d8105c7679e1d0575a1e7f1f653" prot="public" static="no">
        <name>DT_NODE_HAS_STATUS</name>
        <param><defname>node_id</defname></param>
        <param><defname>status</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a8f87097097e3bf344188106ec1cdccbc" kindref="member">DT_NODE_HAS_STATUS_INTERNAL</ref>(node_id, status)</initializer>
        <briefdescription>
<para>Does a node identifier refer to a node with a status? </para>
        </briefdescription>
        <detaileddescription>
<para>Example uses: <verbatim>DT_NODE_HAS_STATUS(DT_PATH(soc, i2c_12340000), okay)
DT_NODE_HAS_STATUS(DT_PATH(soc, i2c_12340000), disabled)
</verbatim> Tests whether a node identifier refers to a node which:</para>
<para><itemizedlist>
<listitem><para>exists in the devicetree, and</para>
</listitem><listitem><para>has a status property matching the second argument (except that either a missing status or an &quot;ok&quot; status in the devicetree is treated as if it were &quot;okay&quot; instead)</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>a node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>a status as one of the tokens okay or disabled, not a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the node has the given status, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2097" column="9" bodyfile="include/devicetree.h" bodystart="2097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" prot="public" static="no">
        <name>DT_HAS_COMPAT_STATUS_OKAY</name>
        <param><defname>compat</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(DT_COMPAT_HAS_OKAY_, compat))</initializer>
        <briefdescription>
<para>Does the devicetree have a status &quot;okay&quot; node with a compatible? </para>
        </briefdescription>
        <detaileddescription>
<para>Test for whether the devicetree has any nodes with status &quot;okay&quot; and the given compatible. That is, this returns 1 if and only if there is at least one &quot;node_id&quot; for which both of these expressions return 1: <verbatim>DT_NODE_HAS_STATUS(node_id, okay)
DT_NODE_HAS_COMPAT(node_id, compat)
</verbatim> As usual, both a missing status and an &quot;ok&quot; status are treated as &quot;okay&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores compatible, without quotes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if both of the above conditions are met, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2117" column="9" bodyfile="include/devicetree.h" bodystart="2117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1ga45c268d7f0d604a72dc0bcf5cd0733b0" prot="public" static="no">
        <name>DT_NUM_INST_STATUS_OKAY</name>
        <param><defname>compat</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga26179b776b4a03143e8be1612ef6d853" kindref="member">UTIL_AND</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),		\
		 <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_N_INST, <ref refid="devicetree_8h_1af3f0bb55f6155a5188345d5ba6caf992" kindref="member">DT_DASH</ref>(compat, NUM_OKAY)))</initializer>
        <briefdescription>
<para>Get the number of instances of a given compatible with status &quot;okay&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores compatible, without quotes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of instances with status &quot;okay&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2126" column="9" bodyfile="include/devicetree.h" bodystart="2126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1gad8912ba5db980713e72257472ded3ced" prot="public" static="no">
        <name>DT_NODE_HAS_COMPAT</name>
        <param><defname>node_id</defname></param>
        <param><defname>compat</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _COMPAT_MATCHES_##compat))</initializer>
        <briefdescription>
<para>Does a devicetree node match a compatible? </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree fragment: <verbatim>n: node {
        compatible = &quot;vnd,specific-device&quot;, &quot;generic-device&quot;;
}
</verbatim> Example usages which evaluate to 1: <verbatim>DT_NODE_HAS_COMPAT(DT_NODELABEL(n), vnd_specific_device)
DT_NODE_HAS_COMPAT(DT_NODELABEL(n), generic_device)
</verbatim> This macro only uses the value of the compatible property. Whether or not a particular compatible has a matching binding has no effect on its value, nor does the node&apos;s status.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores compatible, without quotes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the node&apos;s compatible property contains compat, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2153" column="9" bodyfile="include/devicetree.h" bodystart="2153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1ga9bf6258fbeb0c5cd1fd15b9c9be9228a" prot="public" static="no">
        <name>DT_NODE_HAS_COMPAT_STATUS</name>
        <param><defname>node_id</defname></param>
        <param><defname>compat</defname></param>
        <param><defname>status</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-exist_1gad8912ba5db980713e72257472ded3ced" kindref="member">DT_NODE_HAS_COMPAT</ref>(node_id, compat) &amp;&amp; <ref refid="group__devicetree-generic-exist_1ga3b769d8105c7679e1d0575a1e7f1f653" kindref="member">DT_NODE_HAS_STATUS</ref>(node_id, status)</initializer>
        <briefdescription>
<para>Does a devicetree node have a compatible and status? </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>(DT_NODE_HAS_COMPAT(node_id, compat) &amp;&amp;
 DT_NODE_HAS_STATUS(node_id, status))
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores compatible, without quotes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>okay or disabled as a token, not a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2168" column="9" bodyfile="include/devicetree.h" bodystart="2168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" prot="public" static="no">
        <name>DT_NODE_HAS_PROP</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _P_##prop##_EXISTS))</initializer>
        <briefdescription>
<para>Does a devicetree node have a property? </para>
        </briefdescription>
        <detaileddescription>
<para>Tests whether a devicetree node has a property defined.</para>
<para>This tests whether the property is defined at all, not whether a boolean property is true or false. To get a boolean property&apos;s truth value, use <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP(node_id, prop)</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the node has the property, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2184" column="9" bodyfile="include/devicetree.h" bodystart="2184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1gacfbd6a2cb3038e5aba1e2216d65ebc78" prot="public" static="no">
        <name>DT_PHA_HAS_CELL_AT_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id,                                 \
			   pha##_IDX_##idx##_VAL_##cell##_EXISTS))</initializer>
        <briefdescription>
<para>Does a phandle array have a named cell specifier at an index? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then the phandle-array property &quot;pha&quot; has a cell named &quot;cell&quot; at index &quot;idx&quot;, and therefore DT_PHA_BY_IDX(node_id, pha, idx, cell) is valid. If it returns 0, it&apos;s an error to use <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX()</ref> with the same arguments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check within &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name whose existence to check at index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the specifier at index idx, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2204" column="9" bodyfile="include/devicetree.h" bodystart="2204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-exist_1gaece280102681cbadf318c5dabfb3d719" prot="public" static="no">
        <name>DT_PHA_HAS_CELL</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-exist_1gacfbd6a2cb3038e5aba1e2216d65ebc78" kindref="member">DT_PHA_HAS_CELL_AT_IDX</ref>(node_id, pha, 0, cell)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__devicetree-generic-exist_1gacfbd6a2cb3038e5aba1e2216d65ebc78" kindref="member">DT_PHA_HAS_CELL_AT_IDX(node_id, pha, 0, cell)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name whose existence to check at index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the specifier at index 0, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2217" column="9" bodyfile="include/devicetree.h" bodystart="2217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" prot="public" static="no">
        <name>DT_BUS</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _BUS)</initializer>
        <briefdescription>
<para>Node&apos;s bus controller. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the node identifier of the node&apos;s bus controller. This can be used with <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref> to get properties of the bus controller.</para>
<para>It is an error to use this with nodes which do not have bus controllers.</para>
<para>Example devicetree fragment: <verbatim>i2c@deadbeef {
        label = &quot;I2C_CTLR&quot;;
        status = &quot;okay&quot;;
        clock-frequency = &lt; 100000 &gt;;

        i2c_device: accelerometer@12 {
                ...
        };
};
</verbatim> Example usage: <verbatim>DT_PROP(DT_BUS(DT_NODELABEL(i2c_device)), clock_frequency) // 100000
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node&apos;s bus controller </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2258" column="9" bodyfile="include/devicetree.h" bodystart="2258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-bus_1gafad22db654acc60d743571832533aa9c" prot="public" static="no">
        <name>DT_BUS_LABEL</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(<ref refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" kindref="member">DT_BUS</ref>(node_id), label)</initializer>
        <briefdescription>
<para>Node&apos;s bus controller&apos;s label property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the label property of the node&apos;s bus controller <ref refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" kindref="member">DT_BUS(node)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2265" column="9" bodyfile="include/devicetree.h" bodystart="2265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-bus_1gabe5eea44ff838c11dc5b75f9ec2a9317" prot="public" static="no">
        <name>DT_ON_BUS</name>
        <param><defname>node_id</defname></param>
        <param><defname>bus</defname></param>
        <initializer><ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _BUS_##bus))</initializer>
        <briefdescription>
<para>Is a node on a bus of a given type? </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree overlay: <verbatim>&amp;i2c0 {
       temp: temperature-sensor@76 {
                compatible = &quot;vnd,some-sensor&quot;;
                reg = &lt;0x76&gt;;
       };
};
</verbatim> Example usage, assuming &quot;i2c0&quot; is an I2C bus controller node, and therefore &quot;temp&quot; is on an I2C bus: <verbatim>DT_ON_BUS(DT_NODELABEL(temp), i2c) // 1
DT_ON_BUS(DT_NODELABEL(temp), spi) // 0
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bus</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores bus type as a C token (i.e. without quotes) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the node is on a bus of the given type, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2291" column="9" bodyfile="include/devicetree.h" bodystart="2291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" prot="public" static="no">
        <name>DT_DRV_INST</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" kindref="member">DT_INST</ref>(inst, <ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT</ref>)</initializer>
        <briefdescription>
<para>Node identifier for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node with DT_DRV_COMPAT compatible and instance number &quot;inst&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2309" column="9" bodyfile="include/devicetree.h" bodystart="2309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga98f3fccc6f3004f72c3602a5f2b3a08e" prot="public" static="no">
        <name>DT_INST_FOREACH_CHILD</name>
        <param><defname>inst</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" kindref="member">DT_FOREACH_CHILD</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), fn)</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on all child nodes of <ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST(inst)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; should take one argument, which is the node identifier for the child node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke on each child node identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" kindref="member">DT_FOREACH_CHILD</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2322" column="9" bodyfile="include/devicetree.h" bodystart="2322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga455cb42d31b575d79f8cbbebbd353651" prot="public" static="no">
        <name>DT_INST_FOREACH_CHILD_VARGS</name>
        <param><defname>inst</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-foreach_1gae7461e9fa4687bf88cdd7c76f30986de" kindref="member">DT_FOREACH_CHILD_VARGS</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on all child nodes of <ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST(inst)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The macro &quot;fn&quot; takes multiple arguments. The first should be the node identifier for the child node. The remaining are passed-in by the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke on each child node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" kindref="member">DT_FOREACH_CHILD</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2337" column="9" bodyfile="include/devicetree.h" bodystart="2337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga866d6c28eb7a72ba9831c7ee1ecb98d2" prot="public" static="no">
        <name>DT_INST_ENUM_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" kindref="member">DT_ENUM_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT value&apos;s index into its enumeration values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index of the property&apos;s value in its enum: list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2346" column="9" bodyfile="include/devicetree.h" bodystart="2346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gafbf64148f9171ffd322f7689297e0da8" prot="public" static="no">
        <name>DT_INST_ENUM_IDX_OR</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_idx_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gac3616e3aa1a025235032786de8d31576" kindref="member">DT_ENUM_IDX_OR</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, default_idx_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-inst_1ga866d6c28eb7a72ba9831c7ee1ecb98d2" kindref="member">DT_INST_ENUM_IDX()</ref>, but with a fallback to a default enum index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_idx_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback index value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index of the property&apos;s value in its enum if present, default_idx_value ohterwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2357" column="9" bodyfile="include/devicetree.h" bodystart="2357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga9dce2e631b2a94804e8f2bcc76c6eff8" prot="public" static="no">
        <name>DT_INST_PROP</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a representation of the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2366" column="9" bodyfile="include/devicetree.h" bodystart="2366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga9471df75ff3c4f8d2298bb69c581b365" prot="public" static="no">
        <name>DT_INST_PROP_LEN</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT property length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>logical length of the property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2374" column="9" bodyfile="include/devicetree.h" bodystart="2374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga2c51745f8d51b1d9cdfb1cde69911d48" prot="public" static="no">
        <name>DT_INST_PROP_HAS_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga479dfc704087eea7e7c5af42ae98576c" kindref="member">DT_PROP_HAS_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, idx)</initializer>
        <briefdescription>
<para>Is index &quot;idx&quot; valid for an array type property on a DT_DRV_COMPAT instance? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;idx&quot; is a valid index into the given property, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2385" column="9" bodyfile="include/devicetree.h" bodystart="2385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga5b60f4ed4f5dadc5dd425f5905f23b00" prot="public" static="no">
        <name>DT_INST_PROP_BY_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga52ad691ea4cae633ca702020e939d461" kindref="member">DT_PROP_BY_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, idx)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT element value in an array property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a representation of the idx-th element of the property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2395" column="9" bodyfile="include/devicetree.h" bodystart="2395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaa51bd8f5b016244e0256b3ed9aceee7f" prot="public" static="no">
        <name>DT_INST_PROP_OR</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-inst_1ga9dce2e631b2a94804e8f2bcc76c6eff8" kindref="member">DT_INST_PROP()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__devicetree-inst_1ga9dce2e631b2a94804e8f2bcc76c6eff8" kindref="member">DT_INST_PROP(inst, prop)</ref> or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2405" column="9" bodyfile="include/devicetree.h" bodystart="2405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaeb831ef33bb82335027cc762ecf5dfb1" prot="public" static="no">
        <name>DT_INST_LABEL</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-inst_1ga9dce2e631b2a94804e8f2bcc76c6eff8" kindref="member">DT_INST_PROP</ref>(inst, label)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s &quot;label&quot; property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>instance&apos;s label property value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2413" column="9" bodyfile="include/devicetree.h" bodystart="2413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga1f26b1c5b6c7a8c3c02c09d72a00afa5" prot="public" static="no">
        <name>DT_INST_PROP_BY_PHANDLE</name>
        <param><defname>inst</defname></param>
        <param><defname>ph</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-inst_1gad027963bdf159942cf6fb28b04e8d48e" kindref="member">DT_INST_PROP_BY_PHANDLE_IDX</ref>(inst, ph, 0, prop)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s property value from a phandle&apos;s node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ph</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of &quot;inst&quot; with type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of &quot;prop&quot; as described in the <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref> documentation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2423" column="9" bodyfile="include/devicetree.h" bodystart="2423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gad027963bdf159942cf6fb28b04e8d48e" prot="public" static="no">
        <name>DT_INST_PROP_BY_PHANDLE_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>phs</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" kindref="member">DT_PROP_BY_PHANDLE_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), phs, idx, prop)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s property value from a phandle in a property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phs</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle&quot;, &quot;phandles&quot;, or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;phs&quot;, which must be zero if &quot;phs&quot; has type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of &quot;prop&quot; as described in the <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref> documentation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2437" column="9" bodyfile="include/devicetree.h" bodystart="2437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaac886e11906d628acad1d73ed3a64018" prot="public" static="no">
        <name>DT_INST_PHA_BY_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), pha, idx, cell)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s phandle-array specifier value at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the property &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>binding&apos;s cell name within the specifier at index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the cell inside the specifier at index &quot;idx&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2448" column="9" bodyfile="include/devicetree.h" bodystart="2448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga3db4c00e072bd93fa92e36907b2b5e86" prot="public" static="no">
        <name>DT_INST_PHA_BY_IDX_OR</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gad830ed96dbc4f7dac3455153e0a944d6" kindref="member">DT_PHA_BY_IDX_OR</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), pha, idx, cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-inst_1gaac886e11906d628acad1d73ed3a64018" kindref="member">DT_INST_PHA_BY_IDX()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the property &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>binding&apos;s cell name within the specifier at index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__devicetree-inst_1gaac886e11906d628acad1d73ed3a64018" kindref="member">DT_INST_PHA_BY_IDX(inst, pha, idx, cell)</ref> or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2460" column="9" bodyfile="include/devicetree.h" bodystart="2460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga0de189f14fa7dd38a99382b7f2adbff8" prot="public" static="no">
        <name>DT_INST_PHA</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <initializer><ref refid="group__devicetree-inst_1gaac886e11906d628acad1d73ed3a64018" kindref="member">DT_INST_PHA_BY_IDX</ref>(inst, pha, 0, cell)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s phandle-array specifier value Equivalent to <ref refid="group__devicetree-inst_1gaac886e11906d628acad1d73ed3a64018" kindref="member">DT_INST_PHA_BY_IDX(inst, pha, 0, cell)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>binding&apos;s cell name for the specifier at &quot;pha&quot; index 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2471" column="9" bodyfile="include/devicetree.h" bodystart="2471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga491ad421602e41c4295bac61b595fc94" prot="public" static="no">
        <name>DT_INST_PHA_OR</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-inst_1ga3db4c00e072bd93fa92e36907b2b5e86" kindref="member">DT_INST_PHA_BY_IDX_OR</ref>(inst, pha, 0, cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-inst_1ga0de189f14fa7dd38a99382b7f2adbff8" kindref="member">DT_INST_PHA()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>binding&apos;s cell name for the specifier at &quot;pha&quot; index 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__devicetree-inst_1ga0de189f14fa7dd38a99382b7f2adbff8" kindref="member">DT_INST_PHA(inst, pha, cell)</ref> or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2481" column="9" bodyfile="include/devicetree.h" bodystart="2481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga25418914c5190df10c842744aa967dc8" prot="public" static="no">
        <name>DT_INST_PHA_BY_NAME</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gae469615356a867c49416da15bdc44a26" kindref="member">DT_PHA_BY_NAME</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), pha, name, cell)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s value within a phandle-array specifier by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a specifier in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>binding&apos;s cell name for the named specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2493" column="9" bodyfile="include/devicetree.h" bodystart="2493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaaebc5c643b60319f7e767e46ca226729" prot="public" static="no">
        <name>DT_INST_PHA_BY_NAME_OR</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga79cda6ca70cc1e27b034ad096d4f4401" kindref="member">DT_PHA_BY_NAME_OR</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), pha, name, cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-inst_1ga25418914c5190df10c842744aa967dc8" kindref="member">DT_INST_PHA_BY_NAME()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a specifier in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>binding&apos;s cell name for the named specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__devicetree-inst_1ga25418914c5190df10c842744aa967dc8" kindref="member">DT_INST_PHA_BY_NAME(inst, pha, name, cell)</ref> or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2505" column="9" bodyfile="include/devicetree.h" bodystart="2505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga64d8ddaad8b2d3852e30686d3adf6551" prot="public" static="no">
        <name>DT_INST_PHANDLE_BY_NAME</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga65c90d2d96255b8569c5b869b637c2fd" kindref="member">DT_PHANDLE_BY_NAME</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), pha, name) \</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s phandle node identifier from a phandle array by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of an element in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the phandle at the element named &quot;name&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2516" column="9" bodyfile="include/devicetree.h" bodystart="2516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga10d93a1f9a9f5e225508c4c383654b1c" prot="public" static="no">
        <name>DT_INST_PHANDLE_BY_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, idx)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s node identifier for a phandle in a property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name in &quot;inst&quot; with type &quot;phandle&quot;, &quot;phandles&quot; or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into &quot;prop&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the phandle at index &quot;idx&quot; in &quot;prop&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2528" column="9" bodyfile="include/devicetree.h" bodystart="2528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga81c10f478c86e5a4c18eb7a990447137" prot="public" static="no">
        <name>DT_INST_PHANDLE</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-inst_1ga10d93a1f9a9f5e225508c4c383654b1c" kindref="member">DT_INST_PHANDLE_BY_IDX</ref>(inst, prop, 0)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s node identifier for a phandle property&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of &quot;inst&quot; with type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node pointed to by &quot;ph&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2539" column="9" bodyfile="include/devicetree.h" bodystart="2539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga26bbff9ebaed549140d2530a0b99e8a4" prot="public" static="no">
        <name>DT_INST_REG_HAS_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__devicetree-reg-prop_1ga59aa43231678d08eeac6e5b344048f02" kindref="member">DT_REG_HAS_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), idx)</initializer>
        <briefdescription>
<para>is &quot;idx&quot; a valid register block index on a DT_DRV_COMPAT instance? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;idx&quot; is a valid register block index, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2548" column="9" bodyfile="include/devicetree.h" bodystart="2548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga0fe0403821883598da6cfad4f3962115" prot="public" static="no">
        <name>DT_INST_REG_ADDR_BY_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" kindref="member">DT_REG_ADDR_BY_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), idx)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s idx-th register block&apos;s address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the register whose address to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the instance&apos;s idx-th register block </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2556" column="9" bodyfile="include/devicetree.h" bodystart="2556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gab1152c9f069c69b0269c1a4e744b9dd9" prot="public" static="no">
        <name>DT_INST_REG_SIZE_BY_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" kindref="member">DT_REG_SIZE_BY_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), idx)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT instance&apos;s idx-th register block&apos;s size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the register whose size to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of the instance&apos;s idx-th register block </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2564" column="9" bodyfile="include/devicetree.h" bodystart="2564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga722d6f7b97136aa9229242e4ba7dd25c" prot="public" static="no">
        <name>DT_INST_REG_ADDR_BY_NAME</name>
        <param><defname>inst</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-reg-prop_1gaeb5863e878bbd3a362e17616403da692" kindref="member">DT_REG_ADDR_BY_NAME</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), name)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT&apos;s register block address by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores register specifier name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the register block with the given name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2573" column="9" bodyfile="include/devicetree.h" bodystart="2573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaf82457c5dcfef7eeba074afb95d48714" prot="public" static="no">
        <name>DT_INST_REG_SIZE_BY_NAME</name>
        <param><defname>inst</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-reg-prop_1ga042988feb27e58989baa7abb4930409e" kindref="member">DT_REG_SIZE_BY_NAME</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), name)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT&apos;s register block size by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores register specifier name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of the register block with the given name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2582" column="9" bodyfile="include/devicetree.h" bodystart="2582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" prot="public" static="no">
        <name>DT_INST_REG_ADDR</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-inst_1ga0fe0403821883598da6cfad4f3962115" kindref="member">DT_INST_REG_ADDR_BY_IDX</ref>(inst, 0)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT&apos;s (only) register block address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>instance&apos;s register block address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2590" column="9" bodyfile="include/devicetree.h" bodystart="2590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaa7cea29435e1db59470302abb5ee88dd" prot="public" static="no">
        <name>DT_INST_REG_SIZE</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-inst_1gab1152c9f069c69b0269c1a4e744b9dd9" kindref="member">DT_INST_REG_SIZE_BY_IDX</ref>(inst, 0)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT&apos;s (only) register block size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>instance&apos;s register block size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2597" column="9" bodyfile="include/devicetree.h" bodystart="2597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gad0d69a61ad842aa1dc3a5d4a304c3f2f" prot="public" static="no">
        <name>DT_INST_IRQ_BY_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" kindref="member">DT_IRQ_BY_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), idx, cell)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT interrupt specifier value at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the interrupt specifier array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>cell name specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the named value at the specifier given by the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2606" column="9" bodyfile="include/devicetree.h" bodystart="2606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga1ff6f24f9c97d4b611e4bf50ce5175d3" prot="public" static="no">
        <name>DT_INST_IRQ_BY_NAME</name>
        <param><defname>inst</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-interrupts-prop_1ga904917c0a407343ef0185e9e6fe96812" kindref="member">DT_IRQ_BY_NAME</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), name, cell)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT interrupt specifier value by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores interrupt specifier name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>cell name specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the named value at the specifier given by the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2616" column="9" bodyfile="include/devicetree.h" bodystart="2616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga789eb58422bab7b3a79b487c4a8a82d6" prot="public" static="no">
        <name>DT_INST_IRQ</name>
        <param><defname>inst</defname></param>
        <param><defname>cell</defname></param>
        <initializer><ref refid="group__devicetree-inst_1gad0d69a61ad842aa1dc3a5d4a304c3f2f" kindref="member">DT_INST_IRQ_BY_IDX</ref>(inst, 0, cell)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT interrupt specifier&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>cell name specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the named value at that index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2625" column="9" bodyfile="include/devicetree.h" bodystart="2625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga4e5a5f20f5dd9ea4cfda61def2c16ed3" prot="public" static="no">
        <name>DT_INST_IRQN</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-inst_1ga789eb58422bab7b3a79b487c4a8a82d6" kindref="member">DT_INST_IRQ</ref>(inst, irq)</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT&apos;s (only) irq number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the interrupt number for the node&apos;s only interrupt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2632" column="9" bodyfile="include/devicetree.h" bodystart="2632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gacecb46743315738dcd9a0765ea78276a" prot="public" static="no">
        <name>DT_INST_BUS</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" kindref="member">DT_BUS</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT&apos;s bus node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the instance&apos;s bus node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2639" column="9" bodyfile="include/devicetree.h" bodystart="2639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga84075816197097491784f0cabbd07b76" prot="public" static="no">
        <name>DT_INST_BUS_LABEL</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__devicetree-generic-bus_1gafad22db654acc60d743571832533aa9c" kindref="member">DT_BUS_LABEL</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Get a DT_DRV_COMPAT&apos;s bus node&apos;s label property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the label property of the instance&apos;s bus controller </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2646" column="9" bodyfile="include/devicetree.h" bodystart="2646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga7a29bda946b399a7af92ec9cd09b4e98" prot="public" static="no">
        <name>DT_INST_ON_BUS</name>
        <param><defname>inst</defname></param>
        <param><defname>bus</defname></param>
        <initializer><ref refid="group__devicetree-generic-bus_1gabe5eea44ff838c11dc5b75f9ec2a9317" kindref="member">DT_ON_BUS</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), bus)</initializer>
        <briefdescription>
<para>Test if a DT_DRV_COMPAT&apos;s bus type is a given type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bus</parametername>
</parameternamelist>
<parameterdescription>
<para>a binding&apos;s bus type as a C token, lowercased and without quotes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the given instance is on a bus of the given type, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2655" column="9" bodyfile="include/devicetree.h" bodystart="2655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaa4ff1fe4242399fbd667fbee7e98040a" prot="public" static="no">
        <name>DT_ANY_INST_ON_BUS_STATUS_OKAY</name>
        <param><defname>bus</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a9ebb36e1f68f40bc4c7883859f739c50" kindref="member">DT_COMPAT_ON_BUS_INTERNAL</ref>(<ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT</ref>, bus)</initializer>
        <briefdescription>
<para>Test if any DT_DRV_COMPAT node is on a bus of a given type and has status okay. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a special-purpose macro which can be useful when writing drivers for devices which can appear on multiple buses. One example is a sensor device which may be wired on an I2C or SPI bus.</para>
<para>Example devicetree overlay: <verbatim>&amp;i2c0 {
       temp: temperature-sensor@76 {
                compatible = &quot;vnd,some-sensor&quot;;
                reg = &lt;0x76&gt;;
       };
};
</verbatim> Example usage, assuming &quot;i2c0&quot; is an I2C bus controller node, and therefore &quot;temp&quot; is on an I2C bus: <verbatim>#define DT_DRV_COMPAT vnd_some_sensor

DT_ANY_INST_ON_BUS_STATUS_OKAY(i2c) // 1
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bus</parametername>
</parameternamelist>
<parameterdescription>
<para>a binding&apos;s bus type as a C token, lowercased and without quotes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if any enabled node with that compatible is on that bus type, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2685" column="9" bodyfile="include/devicetree.h" bodystart="2685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaeac7ed0f4a6820a6e5d7dadb6d62d6e7" prot="public" static="no">
        <name>DT_INST_FOREACH_STATUS_OKAY</name>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(<ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT</ref>),	\
		    (<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_FOREACH_OKAY_INST_,		\
			      <ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT</ref>)(fn)),		\
		    ())</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on all nodes with compatible DT_DRV_COMPAT and status &quot;okay&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro calls &quot;fn(inst)&quot; on each &quot;inst&quot; number that refers to a node with status &quot;okay&quot;. Whitespace is added between invocations.</para>
<para>Example devicetree fragment: <verbatim>a {
        compatible = &quot;vnd,device&quot;;
        status = &quot;okay&quot;;
        label = &quot;DEV_A&quot;;
};

b {
        compatible = &quot;vnd,device&quot;;
        status = &quot;okay&quot;;
        label = &quot;DEV_B&quot;;
};

c {
        compatible = &quot;vnd,device&quot;;
        status = &quot;disabled&quot;;
        label = &quot;DEV_C&quot;;
};
</verbatim> Example usage: <verbatim>#define DT_DRV_COMPAT vnd_device
#define MY_FN(inst) DT_INST_LABEL(inst),

DT_INST_FOREACH_STATUS_OKAY(MY_FN)
</verbatim> This expands to: <verbatim>MY_FN(0) MY_FN(1)
</verbatim> and from there, to either this: <verbatim>&quot;DEV_A&quot;, &quot;DEV_B&quot;,
</verbatim> or this: <verbatim>&quot;DEV_B&quot;, &quot;DEV_A&quot;,
</verbatim> No guarantees are made about the order that a and b appear in the expansion.</para>
<para>Note that &quot;fn&quot; is responsible for adding commas, semicolons, or other separators or terminators.</para>
<para>Device drivers should use this macro whenever possible to instantiate a struct device for each enabled node in the devicetree of the driver&apos;s compatible DT_DRV_COMPAT.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to call for each enabled node. Must accept an instance number as its only parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2747" column="9" bodyfile="include/devicetree.h" bodystart="2747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga1b9fd4b9c37a23e52e69ea23f7aedb38" prot="public" static="no">
        <name>DT_INST_FOREACH_STATUS_OKAY_VARGS</name>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(<ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT</ref>),	\
		    (<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(DT_FOREACH_OKAY_INST_VARGS_,	\
			      <ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT</ref>)(fn, __VA_ARGS__)),	\
		    ())</initializer>
        <briefdescription>
<para>Call &quot;fn&quot; on all nodes with compatible DT_DRV_COMPAT and status &quot;okay&quot; with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to call for each enabled node. Must accept an instance number as its only parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-inst_1gaeac7ed0f4a6820a6e5d7dadb6d62d6e7" kindref="member">DT_INST_FOREACH_STATUS_OKAY</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2764" column="9" bodyfile="include/devicetree.h" bodystart="2764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaf163f2f85b3893ca46c87f0fcbe65255" prot="public" static="no">
        <name>DT_INST_FOREACH_PROP_ELEM</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>fn</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-foreach_1ga118a0477ab297a1bda9e16acf556babc" kindref="member">DT_FOREACH_PROP_ELEM</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, fn)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each element of property &quot;prop&quot; for a DT_DRV_COMPAT instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="group__devicetree-generic-foreach_1ga118a0477ab297a1bda9e16acf556babc" kindref="member">DT_FOREACH_PROP_ELEM(DT_DRV_INST(inst), prop, fn)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2780" column="9" bodyfile="include/devicetree.h" bodystart="2780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1ga31b9022f7add3d77417b78ed67d544e3" prot="public" static="no">
        <name>DT_INST_FOREACH_PROP_ELEM_VARGS</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>fn</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-foreach_1gaae36970d49c860414374c76e136a9607" kindref="member">DT_FOREACH_PROP_ELEM_VARGS</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop, fn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Invokes &quot;fn&quot; for each element of property &quot;prop&quot; for a DT_DRV_COMPAT instance with multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to DT_FOREACH_PROP_ELEM_VARGS(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST(inst)</ref>, prop, fn, <bold>VA_ARGS</bold>)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>variable number of arguments to pass to fn</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__devicetree-inst_1gaf163f2f85b3893ca46c87f0fcbe65255" kindref="member">DT_INST_FOREACH_PROP_ELEM</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2797" column="9" bodyfile="include/devicetree.h" bodystart="2797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaa03419e2d9c887a81e16e96b5947bccb" prot="public" static="no">
        <name>DT_INST_NODE_HAS_PROP</name>
        <param><defname>inst</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), prop)</initializer>
        <briefdescription>
<para>Does a DT_DRV_COMPAT instance have a property? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the instance has the property, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2806" column="9" bodyfile="include/devicetree.h" bodystart="2806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gae054b89701ec9fae577320fb7b9cae1e" prot="public" static="no">
        <name>DT_INST_PHA_HAS_CELL_AT_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-exist_1gacfbd6a2cb3038e5aba1e2216d65ebc78" kindref="member">DT_PHA_HAS_CELL_AT_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), pha, idx, cell)</initializer>
        <briefdescription>
<para>Does a phandle array have a named cell specifier at an index for a DT_DRV_COMPAT instance? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>named cell value whose existence to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the specifier at index idx, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2819" column="9" bodyfile="include/devicetree.h" bodystart="2819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gab8083dae430aeb93a967bbf98aa9eefc" prot="public" static="no">
        <name>DT_INST_PHA_HAS_CELL</name>
        <param><defname>inst</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-inst_1gae054b89701ec9fae577320fb7b9cae1e" kindref="member">DT_INST_PHA_HAS_CELL_AT_IDX</ref>(inst, pha, 0, cell)</initializer>
        <briefdescription>
<para>Does a phandle array have a named cell specifier at index 0 for a DT_DRV_COMPAT instance? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>named cell value whose existence to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the specifier at index 0, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2831" column="9" bodyfile="include/devicetree.h" bodystart="2831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gabb45132ef78818512c02bdf1f5a38068" prot="public" static="no">
        <name>DT_INST_IRQ_HAS_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__devicetree-interrupts-prop_1ga238a290dc6cea9479104ff8f95de1c4c" kindref="member">DT_IRQ_HAS_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), idx)</initializer>
        <briefdescription>
<para>is index valid for interrupt property on a DT_DRV_COMPAT instance? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into the interrupt specifier array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the idx is valid for the interrupt property 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2841" column="9" bodyfile="include/devicetree.h" bodystart="2841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gab176ff07912cea915c811406e8f5e386" prot="public" static="no">
        <name>DT_INST_IRQ_HAS_CELL_AT_IDX</name>
        <param><defname>inst</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-interrupts-prop_1ga739ebdd4bd01d6b7beb75d915174206f" kindref="member">DT_IRQ_HAS_CELL_AT_IDX</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), idx, cell)</initializer>
        <briefdescription>
<para>Does a DT_DRV_COMPAT instance have an interrupt named cell specifier? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>named cell value whose existence to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the interrupt specifier at index idx 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2851" column="9" bodyfile="include/devicetree.h" bodystart="2851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gabec43df3451bd917120b283d76c57054" prot="public" static="no">
        <name>DT_INST_IRQ_HAS_CELL</name>
        <param><defname>inst</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-inst_1gab176ff07912cea915c811406e8f5e386" kindref="member">DT_INST_IRQ_HAS_CELL_AT_IDX</ref>(inst, 0, cell)</initializer>
        <briefdescription>
<para>Does a DT_DRV_COMPAT instance have an interrupt value? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>named cell value whose existence to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the named cell exists in the interrupt specifier at index 0 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2861" column="9" bodyfile="include/devicetree.h" bodystart="2861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-inst_1gaa038ffc9b4f5c897a4a9e6d0e9836ffd" prot="public" static="no">
        <name>DT_INST_IRQ_HAS_NAME</name>
        <param><defname>inst</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-interrupts-prop_1ga1c757ff5e4d15f1b3020b30f72c0dd5d" kindref="member">DT_IRQ_HAS_NAME</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), name)</initializer>
        <briefdescription>
<para>Does a DT_DRV_COMPAT instance have an interrupt value? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores interrupt specifier name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if &quot;name&quot; is a valid named specifier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2870" column="9" bodyfile="include/devicetree.h" bodystart="2870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1af51e66f69742fc2f083097682e9049a4" prot="public" static="no">
        <name>DT_PATH_INTERNAL</name>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(<ref refid="group__devicetree-generic-id_1gad65aa36621281687b22fa5d72db33e86" kindref="member">DT_ROOT</ref>, <ref refid="group__sys-util_1gaf82371bd6bf317add5276fc6cbd66662" kindref="member">MACRO_MAP_CAT</ref>(<ref refid="devicetree_8h_1a1dfb7bf7a80265200b90122e7bc79fd5" kindref="member">DT_S_PREFIX</ref>, __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2878" column="9" bodyfile="include/devicetree.h" bodystart="2878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1a1dfb7bf7a80265200b90122e7bc79fd5" prot="public" static="no">
        <name>DT_S_PREFIX</name>
        <param><defname>name</defname></param>
        <initializer>_S_##name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2881" column="9" bodyfile="include/devicetree.h" bodystart="2881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" prot="public" static="no">
        <name>DT_CAT</name>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <initializer>a1 ## a2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2897" column="9" bodyfile="include/devicetree.h" bodystart="2897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1aa96a6f2d948ab4c0118cb63a148d324f" prot="public" static="no">
        <name>DT_CAT3</name>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <initializer>a1 ## a2 ## a3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2899" column="9" bodyfile="include/devicetree.h" bodystart="2899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" prot="public" static="no">
        <name>DT_CAT4</name>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <param><defname>a4</defname></param>
        <initializer>a1 ## a2 ## a3 ## a4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2901" column="9" bodyfile="include/devicetree.h" bodystart="2901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1acd15db1bd8afb89346ef74f07fdbd6a7" prot="public" static="no">
        <name>DT_CAT5</name>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <param><defname>a4</defname></param>
        <param><defname>a5</defname></param>
        <initializer>a1 ## a2 ## a3 ## a4 ## a5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2903" column="9" bodyfile="include/devicetree.h" bodystart="2903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1ac806173a3b422212ed11c59639ac174c" prot="public" static="no">
        <name>DT_CAT6</name>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <param><defname>a4</defname></param>
        <param><defname>a5</defname></param>
        <param><defname>a6</defname></param>
        <initializer>a1 ## a2 ## a3 ## a4 ## a5 ## a6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2905" column="9" bodyfile="include/devicetree.h" bodystart="2905" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1af3f0bb55f6155a5188345d5ba6caf992" prot="public" static="no">
        <name>DT_DASH</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="group__sys-util_1gaf82371bd6bf317add5276fc6cbd66662" kindref="member">MACRO_MAP_CAT</ref>(<ref refid="devicetree_8h_1a99fc4c6963e8e3cc1516bc281bf15ab5" kindref="member">DT_DASH_PREFIX</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2912" column="9" bodyfile="include/devicetree.h" bodystart="2912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1a99fc4c6963e8e3cc1516bc281bf15ab5" prot="public" static="no">
        <name>DT_DASH_PREFIX</name>
        <param><defname>name</defname></param>
        <initializer>_##name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2914" column="9" bodyfile="include/devicetree.h" bodystart="2914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1a8f87097097e3bf344188106ec1cdccbc" prot="public" static="no">
        <name>DT_NODE_HAS_STATUS_INTERNAL</name>
        <param><defname>node_id</defname></param>
        <param><defname>status</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _STATUS_ ## status))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2916" column="9" bodyfile="include/devicetree.h" bodystart="2916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="devicetree_8h_1a9ebb36e1f68f40bc4c7883859f739c50" prot="public" static="no">
        <name>DT_COMPAT_ON_BUS_INTERNAL</name>
        <param><defname>compat</defname></param>
        <param><defname>bus</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(<ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(DT_COMPAT_, compat), _BUS_##bus))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="2919" column="9" bodyfile="include/devicetree.h" bodystart="2919" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Devicetree main header. </para>
    </briefdescription>
    <detaileddescription>
<para>API for accessing the current application&apos;s devicetree macros. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Nordic<sp/>Semiconductor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>Linaro<sp/>Ltd.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Not<sp/>a<sp/>generated<sp/>file.<sp/>Feel<sp/>free<sp/>to<sp/>modify.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEVICETREE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICETREE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;devicetree_unfixed.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;devicetree_fixups.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Property<sp/>suffixes</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>-----------------</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>These<sp/>are<sp/>the<sp/>optional<sp/>parts<sp/>that<sp/>come<sp/>after<sp/>the<sp/>_P_&lt;property&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>part<sp/>in<sp/>DT_N_&lt;path-id&gt;_P_&lt;property-id&gt;<sp/>macros,<sp/>or<sp/>the<sp/>&quot;prop-suf&quot;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>nonterminal<sp/>in<sp/>the<sp/>DT<sp/>guide&apos;s<sp/>macros.bnf<sp/>file.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>Before<sp/>adding<sp/>new<sp/>ones,<sp/>check<sp/>this<sp/>list<sp/>to<sp/>avoid<sp/>conflicts.<sp/>If<sp/>any</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>are<sp/>missing<sp/>from<sp/>this<sp/>list,<sp/>please<sp/>add<sp/>them.<sp/>It<sp/>should<sp/>be<sp/>complete.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>_ENUM_IDX:<sp/>property&apos;s<sp/>value<sp/>as<sp/>an<sp/>index<sp/>into<sp/>bindings<sp/>enum</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>_ENUM_TOKEN:<sp/>property&apos;s<sp/>value<sp/>as<sp/>a<sp/>token<sp/>into<sp/>bindings<sp/>enum<sp/>(string</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enum<sp/>values<sp/>are<sp/>identifiers)<sp/>[deprecated,<sp/>use<sp/>_STRING_TOKEN]</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>_ENUM_UPPER_TOKEN:<sp/>like<sp/>_ENUM_TOKEN,<sp/>but<sp/>uppercased<sp/>[deprecated,<sp/>use</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_STRING_UPPER_TOKEN]</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>_EXISTS:<sp/>property<sp/>is<sp/>defined</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>_FOREACH_PROP_ELEM:<sp/>helper<sp/>for<sp/>&quot;iterating&quot;<sp/>over<sp/>values<sp/>in<sp/>the<sp/>property</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>_FOREACH_PROP_ELEM_VARGS:<sp/>foreach<sp/>functions<sp/>with<sp/>variable<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>_IDX_&lt;i&gt;:<sp/>logical<sp/>index<sp/>into<sp/>property</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>_IDX_&lt;i&gt;_EXISTS:<sp/>logical<sp/>index<sp/>into<sp/>property<sp/>is<sp/>defined</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>_IDX_&lt;i&gt;_PH:<sp/>phandle<sp/>array&apos;s<sp/>phandle<sp/>by<sp/>index<sp/>(or<sp/>phandle,<sp/>phandles)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>_IDX_&lt;i&gt;_VAL_&lt;val&gt;:<sp/>phandle<sp/>array&apos;s<sp/>specifier<sp/>value<sp/>by<sp/>index</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>_IDX_&lt;i&gt;_VAL_&lt;val&gt;_EXISTS:<sp/>cell<sp/>value<sp/>exists,<sp/>by<sp/>index</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>_LEN:<sp/>property<sp/>logical<sp/>length</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>_NAME_&lt;name&gt;_PH:<sp/>phandle<sp/>array&apos;s<sp/>phandle<sp/>by<sp/>name</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>_NAME_&lt;name&gt;_VAL_&lt;val&gt;:<sp/>phandle<sp/>array&apos;s<sp/>property<sp/>specifier<sp/>by<sp/>name</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>_NAME_&lt;name&gt;_VAL_&lt;val&gt;_EXISTS:<sp/>cell<sp/>value<sp/>exists,<sp/>by<sp/>name</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>_STRING_TOKEN:<sp/>string<sp/>property&apos;s<sp/>value<sp/>as<sp/>a<sp/>token</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>_STRING_UPPER_TOKEN:<sp/>like<sp/>_STRING_TOKEN,<sp/>but<sp/>uppercased</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INVALID_NODE<sp/>_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="group__devicetree-generic-id_1gad65aa36621281687b22fa5d72db33e86" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_ROOT<sp/>DT_N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PATH(...)<sp/>DT_PATH_INTERNAL(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODELABEL(label)<sp/>DT_CAT(DT_N_NODELABEL_,<sp/>label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="group__devicetree-generic-id_1gaa49e19bbc39dc0d6f16b78a5d02482c9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_ALIAS(alias)<sp/>DT_CAT(DT_N_ALIAS_,<sp/>alias)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST(inst,<sp/>compat)<sp/>UTIL_CAT(DT_N_INST,<sp/>DT_DASH(inst,<sp/>compat))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="group__devicetree-generic-id_1ga3ac56d491510275ee1321446796ab63b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PARENT(node_id)<sp/>UTIL_CAT(node_id,<sp/>_PARENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="group__devicetree-generic-id_1ga176760ce1a019020b5465eebd4f44ff5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PARENT(inst)<sp/>DT_PARENT(DT_DRV_INST(inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="group__devicetree-generic-id_1gaa4eccf276a426cbbc6e440d72b692753" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_GPARENT(node_id)<sp/>DT_PARENT(DT_PARENT(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="group__devicetree-generic-id_1ga88259608f4e9083ccc2e9ca5ec2c212e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_CHILD(node_id,<sp/>child)<sp/>UTIL_CAT(node_id,<sp/>DT_S_PREFIX(child))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="group__devicetree-generic-id_1ga4858c378b098dcb7c35de1db25442acc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_COMPAT_GET_ANY_STATUS_OKAY(compat)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_HAS_COMPAT_STATUS_OKAY(compat),<sp/><sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DT_INST(0,<sp/>compat)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DT_INVALID_NODE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="group__devicetree-generic-id_1gacd79818b99724d834e3bb7ae74ee02cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_PATH(node_id)<sp/>DT_CAT(node_id,<sp/>_PATH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="group__devicetree-generic-id_1ga8a8ab5d12fe59787433d1add94fb1667" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_FULL_NAME(node_id)<sp/>DT_CAT(node_id,<sp/>_FULL_NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="group__devicetree-generic-id_1ga977d0ad58626e3ab906064fdcdace5e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_SAME_NODE(node_id1,<sp/>node_id2)<sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DT_DEP_ORD(node_id1)<sp/>==<sp/>(DT_DEP_ORD(node_id2)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Implementation<sp/>note:<sp/>distinct<sp/>nodes<sp/>have<sp/>distinct<sp/>node<sp/>identifiers.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>See<sp/>include/devicetree/ordinals.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP(node_id,<sp/>prop)<sp/>DT_CAT(node_id,<sp/>_P_##prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_LEN(node_id,<sp/>prop)<sp/>DT_PROP(node_id,<sp/>prop##_LEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="group__devicetree-generic-prop_1gabd2d8a9242818c7a9bf981114c912d75" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_LEN_OR(node_id,<sp/>prop,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_HAS_PROP(node_id,<sp/>prop),<sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DT_PROP_LEN(node_id,<sp/>prop)),<sp/>(default_value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="group__devicetree-generic-prop_1ga479dfc704087eea7e7c5af42ae98576c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_HAS_IDX(node_id,<sp/>prop,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT6(node_id,<sp/>_P_,<sp/>prop,<sp/>_IDX_,<sp/>idx,<sp/>_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="633" refid="group__devicetree-generic-prop_1ga52ad691ea4cae633ca702020e939d461" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_BY_IDX(node_id,<sp/>prop,<sp/>idx)<sp/>DT_PROP(node_id,<sp/>prop##_IDX_##idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="648" refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_OR(node_id,<sp/>prop,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_HAS_PROP(node_id,<sp/>prop),<sp/>\</highlight></codeline>
<codeline lineno="650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DT_PROP(node_id,<sp/>prop)),<sp/>(default_value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="660" refid="group__devicetree-generic-prop_1ga89070ef089930290ce31788b5b3b84e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_LABEL(node_id)<sp/>DT_PROP(node_id,<sp/>label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_ENUM_IDX(node_id,<sp/>prop)<sp/>DT_PROP(node_id,<sp/>prop##_ENUM_IDX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="group__devicetree-generic-prop_1gac3616e3aa1a025235032786de8d31576" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_ENUM_IDX_OR(node_id,<sp/>prop,<sp/>default_idx_value)<sp/>\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_HAS_PROP(node_id,<sp/>prop),<sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DT_ENUM_IDX(node_id,<sp/>prop)),<sp/>(default_idx_value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_STRING_TOKEN(node_id,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_P_,<sp/>prop,<sp/>_STRING_TOKEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="820" refid="group__devicetree-generic-prop_1gae0b5e2b6633a98ead17ec20d3494658f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_STRING_UPPER_TOKEN(node_id,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_P_,<sp/>prop,<sp/>_STRING_UPPER_TOKEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>phandle<sp/>properties</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>These<sp/>are<sp/>special-cased<sp/>to<sp/>manage<sp/>the<sp/>impedance<sp/>mismatch<sp/>between</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>phandles,<sp/>which<sp/>are<sp/>just<sp/>uint32_t<sp/>node<sp/>properties<sp/>that<sp/>only<sp/>make<sp/>sense</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>within<sp/>the<sp/>tree<sp/>itself,<sp/>and<sp/>C<sp/>values.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_BY_PHANDLE_IDX(node_id,<sp/>phs,<sp/>idx,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="871"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP(DT_PHANDLE_BY_IDX(node_id,<sp/>phs,<sp/>idx),<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="892" refid="group__devicetree-generic-prop_1gad1c6a6544eac7bc77c1ed4aebd15df2b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_BY_PHANDLE_IDX_OR(node_id,<sp/>phs,<sp/>idx,<sp/>prop,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_OR(DT_PHANDLE_BY_IDX(node_id,<sp/>phs,<sp/>idx),<sp/>prop,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="906" refid="group__devicetree-generic-prop_1gabc1b099dda97fb03a9259a8b21fc04d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PROP_BY_PHANDLE(node_id,<sp/>ph,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="907"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_BY_PHANDLE_IDX(node_id,<sp/>ph,<sp/>0,<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA_BY_IDX(node_id,<sp/>pha,<sp/>idx,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="958"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP(node_id,<sp/>pha##_IDX_##idx##_VAL_##cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="group__devicetree-generic-prop_1gad830ed96dbc4f7dac3455153e0a944d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA_BY_IDX_OR(node_id,<sp/>pha,<sp/>idx,<sp/>cell,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_OR(node_id,<sp/>pha##_IDX_##idx##_VAL_##cell,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Implementation<sp/>note:<sp/>the<sp/>_IDX_##idx##_VAL_##cell##_EXISTS</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*<sp/>macros<sp/>are<sp/>defined,<sp/>so<sp/>it&apos;s<sp/>safe<sp/>to<sp/>use<sp/>DT_PROP_OR()<sp/>here,<sp/>because</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/>*<sp/>that<sp/>uses<sp/>an<sp/>IS_ENABLED()<sp/>on<sp/>the<sp/>_EXISTS<sp/>macro.</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="991" refid="group__devicetree-generic-prop_1gacef5921973a55433161fe0be3f8f628d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA(node_id,<sp/>pha,<sp/>cell)<sp/>DT_PHA_BY_IDX(node_id,<sp/>pha,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007" refid="group__devicetree-generic-prop_1ga886559b058b24164b62ab95215d860bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA_OR(node_id,<sp/>pha,<sp/>cell,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="1008"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHA_BY_IDX_OR(node_id,<sp/>pha,<sp/>0,<sp/>cell,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="group__devicetree-generic-prop_1gae469615356a867c49416da15bdc44a26" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA_BY_NAME(node_id,<sp/>pha,<sp/>name,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="1045"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP(node_id,<sp/>pha##_NAME_##name##_VAL_##cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="group__devicetree-generic-prop_1ga79cda6ca70cc1e27b034ad096d4f4401" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA_BY_NAME_OR(node_id,<sp/>pha,<sp/>name,<sp/>cell,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_OR(node_id,<sp/>pha##_NAME_##name##_VAL_##cell,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Implementation<sp/>note:<sp/>the<sp/>_NAME_##name##_VAL_##cell##_EXISTS</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/>*<sp/>macros<sp/>are<sp/>defined,<sp/>so<sp/>it&apos;s<sp/>safe<sp/>to<sp/>use<sp/>DT_PROP_OR()<sp/>here,<sp/>because</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/>*<sp/>that<sp/>uses<sp/>an<sp/>IS_ENABLED()<sp/>on<sp/>the<sp/>_EXISTS<sp/>macro.</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112" refid="group__devicetree-generic-prop_1ga65c90d2d96255b8569c5b869b637c2fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHANDLE_BY_NAME(node_id,<sp/>pha,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP(node_id,<sp/>pha##_NAME_##name##_PH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154" refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHANDLE_BY_IDX(node_id,<sp/>prop,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT6(node_id,<sp/>_P_,<sp/>prop,<sp/>_IDX_,<sp/>idx,<sp/>_PH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>note:<sp/>using<sp/>DT_CAT6<sp/>above<sp/>defers<sp/>concatenation<sp/>until</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/>*<sp/>after<sp/>expansion<sp/>of<sp/>each<sp/>parameter.<sp/>This<sp/>is<sp/>important<sp/>when<sp/>&apos;idx&apos;<sp/>is</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/>*<sp/>expandable<sp/>to<sp/>a<sp/>number,<sp/>but<sp/>it<sp/>isn&apos;t<sp/>one<sp/>&quot;yet&quot;.</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173" refid="group__devicetree-generic-prop_1ga7bd77c49472ba4547d87f00f40fd7171" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHANDLE(node_id,<sp/>prop)<sp/>DT_PHANDLE_BY_IDX(node_id,<sp/>prop,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217" refid="group__devicetree-ranges-prop_1ga784cff5ee4c0439c429cc3c26c4410fc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NUM_RANGES(node_id)<sp/>DT_CAT(node_id,<sp/>_RANGES_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268" refid="group__devicetree-ranges-prop_1gac6f54058c58b06935bd2deae9f1ec2db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_RANGES_HAS_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT4(node_id,<sp/>_RANGES_IDX_,<sp/>idx,<sp/>_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319" refid="group__devicetree-ranges-prop_1ga3730c9176911bd8cc762f447eb020ecd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_RANGES_HAS_CHILD_BUS_FLAGS_AT_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT4(node_id,<sp/>_RANGES_IDX_,<sp/>idx,<sp/>_VAL_CHILD_BUS_FLAGS_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355" refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_RANGES_CHILD_BUS_FLAGS_BY_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_RANGES_IDX_,<sp/>idx,<sp/>_VAL_CHILD_BUS_FLAGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400" refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_RANGES_IDX_,<sp/>idx,<sp/>_VAL_CHILD_BUS_ADDRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445" refid="group__devicetree-ranges-prop_1ga48d493ad616438ace2396c0312a242ba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_RANGES_IDX_,<sp/>idx,<sp/>_VAL_PARENT_BUS_ADDRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490" refid="group__devicetree-ranges-prop_1ga52677a5bc86f9132a09b6bc37153afb2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_RANGES_LENGTH_BY_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_RANGES_IDX_,<sp/>idx,<sp/>_VAL_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526" refid="group__devicetree-ranges-prop_1ga4c71a8adcfe6c53b480775510c92a632" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_RANGE(node_id,<sp/>fn)<sp/>\</highlight></codeline>
<codeline lineno="1527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_FOREACH_RANGE)(fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546" refid="group__devicetree-reg-prop_1ga6cdd22b6a2881b09ed63d9d262566a0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NUM_REGS(node_id)<sp/>DT_CAT(node_id,<sp/>_REG_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559" refid="group__devicetree-reg-prop_1ga59aa43231678d08eeac6e5b344048f02" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_REG_HAS_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_REG_IDX_##idx##_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568" refid="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_REG_ADDR_BY_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_REG_IDX_##idx##_VAL_ADDRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582" refid="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_REG_SIZE_BY_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_REG_IDX_##idx##_VAL_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592" refid="group__devicetree-reg-prop_1gac6d8279c32351ced4c0ac7f32270974e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_REG_ADDR(node_id)<sp/>DT_REG_ADDR_BY_IDX(node_id,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601" refid="group__devicetree-reg-prop_1gad223efc6c77d008e55c3588953e85bfb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_REG_SIZE(node_id)<sp/>DT_REG_SIZE_BY_IDX(node_id,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609" refid="group__devicetree-reg-prop_1gaeb5863e878bbd3a362e17616403da692" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_REG_ADDR_BY_NAME(node_id,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="1610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_REG_NAME_##name##_VAL_ADDRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618" refid="group__devicetree-reg-prop_1ga042988feb27e58989baa7abb4930409e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_REG_SIZE_BY_NAME(node_id,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="1619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_REG_NAME_##name##_VAL_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639" refid="group__devicetree-interrupts-prop_1ga2985e5d55d2d9dbbbe93ba855d5db320" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NUM_IRQS(node_id)<sp/>DT_CAT(node_id,<sp/>_IRQ_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651" refid="group__devicetree-interrupts-prop_1ga238a290dc6cea9479104ff8f95de1c4c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQ_HAS_IDX(node_id,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="1652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_IRQ_IDX_##idx##_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664" refid="group__devicetree-interrupts-prop_1ga739ebdd4bd01d6b7beb75d915174206f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQ_HAS_CELL_AT_IDX(node_id,<sp/>idx,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="1665"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_IRQ_IDX_##idx##_VAL_##cell##_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674" refid="group__devicetree-interrupts-prop_1gab9c94ee39db7913598a755c6172fe036" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQ_HAS_CELL(node_id,<sp/>cell)<sp/>DT_IRQ_HAS_CELL_AT_IDX(node_id,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685" refid="group__devicetree-interrupts-prop_1ga1c757ff5e4d15f1b3020b30f72c0dd5d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQ_HAS_NAME(node_id,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="1686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_IRQ_NAME_##name##_VAL_irq_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721" refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQ_BY_IDX(node_id,<sp/>idx,<sp/>cell)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1722"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_IRQ_IDX_##idx##_VAL_##cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739" refid="group__devicetree-interrupts-prop_1ga904917c0a407343ef0185e9e6fe96812" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQ_BY_NAME(node_id,<sp/>name,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="1740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_IRQ_NAME_##name##_VAL_##cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749" refid="group__devicetree-interrupts-prop_1gabf60fbd528d300a26c0b4e66fe80a53f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQ(node_id,<sp/>cell)<sp/>DT_IRQ_BY_IDX(node_id,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761" refid="group__devicetree-interrupts-prop_1ga5e00c208388736ce9b5bc0088a77cd95" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_IRQN(node_id)<sp/>DT_IRQ(node_id,<sp/>irq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781" refid="group__devicetree-generic-chosen_1ga3412d0acecffa828984cf9e2c89889ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_CHOSEN(prop)<sp/>DT_CAT(DT_CHOSEN_,<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789" refid="group__devicetree-generic-chosen_1ga9df6bacab5f579284f5f3c1e4856cd15" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_HAS_CHOSEN(prop)<sp/>IS_ENABLED(DT_CHOSEN_##prop##_EXISTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835" refid="group__devicetree-generic-foreach_1ga2f4eead8e8190110f5c0eb353e6a408f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_CHILD(node_id,<sp/>fn)<sp/>\</highlight></codeline>
<codeline lineno="1836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_FOREACH_CHILD)(fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850" refid="group__devicetree-generic-foreach_1gae7461e9fa4687bf88cdd7c76f30986de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_CHILD_VARGS(node_id,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_FOREACH_CHILD_VARGS)(fn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865" refid="group__devicetree-generic-foreach_1gae907df926b94f1da52b1ab701392f3bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_CHILD_STATUS_OKAY(node_id,<sp/>fn)<sp/>\</highlight></codeline>
<codeline lineno="1866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_FOREACH_CHILD_STATUS_OKAY)(fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884" refid="group__devicetree-generic-foreach_1ga8bbf6992e5f90d8a28035ea6211dd2a3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_CHILD_STATUS_OKAY_VARGS(node_id,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1885"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT(node_id,<sp/>_FOREACH_CHILD_STATUS_OKAY_VARGS)(fn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931" refid="group__devicetree-generic-foreach_1ga118a0477ab297a1bda9e16acf556babc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_PROP_ELEM(node_id,<sp/>prop,<sp/>fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1932"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_P_,<sp/>prop,<sp/>_FOREACH_PROP_ELEM)(fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951" refid="group__devicetree-generic-foreach_1gaae36970d49c860414374c76e136a9607" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_PROP_ELEM_VARGS(node_id,<sp/>prop,<sp/>fn,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1952"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CAT4(node_id,<sp/>_P_,<sp/>prop,<sp/>_FOREACH_PROP_ELEM_VARGS)(fn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003" refid="group__devicetree-generic-foreach_1ga52b34316d269cc8d8ef2244d3ca460b8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_STATUS_OKAY(compat,<sp/>fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2004"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_HAS_COMPAT_STATUS_OKAY(compat),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2005"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UTIL_CAT(DT_FOREACH_OKAY_,<sp/>compat)(fn)),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2006"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046" refid="group__devicetree-generic-foreach_1ga99cf30d6cf4847ed99ba7d81ad2b49d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_FOREACH_STATUS_OKAY_VARGS(compat,<sp/>fn,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2047"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_HAS_COMPAT_STATUS_OKAY(compat),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2048"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UTIL_CAT(DT_FOREACH_OKAY_VARGS_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2049"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compat)(fn,<sp/>__VA_ARGS__)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2050"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076" refid="group__devicetree-generic-exist_1ga9d5cf40051d042b853f6b0088fd4500a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_EXISTS(node_id)<sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097" refid="group__devicetree-generic-exist_1ga3b769d8105c7679e1d0575a1e7f1f653" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_HAS_STATUS(node_id,<sp/>status)<sp/>\</highlight></codeline>
<codeline lineno="2098"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_NODE_HAS_STATUS_INTERNAL(node_id,<sp/>status)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117" refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_HAS_COMPAT_STATUS_OKAY(compat)<sp/>\</highlight></codeline>
<codeline lineno="2118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(DT_COMPAT_HAS_OKAY_,<sp/>compat))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126" refid="group__devicetree-generic-exist_1ga45c268d7f0d604a72dc0bcf5cd0733b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NUM_INST_STATUS_OKAY(compat)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTIL_AND(DT_HAS_COMPAT_STATUS_OKAY(compat),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTIL_CAT(DT_N_INST,<sp/>DT_DASH(compat,<sp/>NUM_OKAY)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153" refid="group__devicetree-generic-exist_1gad8912ba5db980713e72257472ded3ced" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_HAS_COMPAT(node_id,<sp/>compat)<sp/>\</highlight></codeline>
<codeline lineno="2154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_COMPAT_MATCHES_##compat))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168" refid="group__devicetree-generic-exist_1ga9bf6258fbeb0c5cd1fd15b9c9be9228a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_HAS_COMPAT_STATUS(node_id,<sp/>compat,<sp/>status)<sp/>\</highlight></codeline>
<codeline lineno="2169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_NODE_HAS_COMPAT(node_id,<sp/>compat)<sp/>&amp;&amp;<sp/>DT_NODE_HAS_STATUS(node_id,<sp/>status)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184" refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_HAS_PROP(node_id,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="2185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_P_##prop##_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204" refid="group__devicetree-generic-exist_1gacfbd6a2cb3038e5aba1e2216d65ebc78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA_HAS_CELL_AT_IDX(node_id,<sp/>pha,<sp/>idx,<sp/>cell)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_PROP(node_id,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pha##_IDX_##idx##_VAL_##cell##_EXISTS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217" refid="group__devicetree-generic-exist_1gaece280102681cbadf318c5dabfb3d719" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PHA_HAS_CELL(node_id,<sp/>pha,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHA_HAS_CELL_AT_IDX(node_id,<sp/>pha,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258" refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_BUS(node_id)<sp/>DT_CAT(node_id,<sp/>_BUS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265" refid="group__devicetree-generic-bus_1gafad22db654acc60d743571832533aa9c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_BUS_LABEL(node_id)<sp/>DT_PROP(DT_BUS(node_id),<sp/>label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291" refid="group__devicetree-generic-bus_1gabe5eea44ff838c11dc5b75f9ec2a9317" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_ON_BUS(node_id,<sp/>bus)<sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_BUS_##bus))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309" refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_DRV_INST(inst)<sp/>DT_INST(inst,<sp/>DT_DRV_COMPAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322" refid="group__devicetree-inst_1ga98f3fccc6f3004f72c3602a5f2b3a08e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_FOREACH_CHILD(inst,<sp/>fn)<sp/>\</highlight></codeline>
<codeline lineno="2323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_FOREACH_CHILD(DT_DRV_INST(inst),<sp/>fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2337" refid="group__devicetree-inst_1ga455cb42d31b575d79f8cbbebbd353651" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_FOREACH_CHILD_VARGS(inst,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="2338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_FOREACH_CHILD_VARGS(DT_DRV_INST(inst),<sp/>fn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346" refid="group__devicetree-inst_1ga866d6c28eb7a72ba9831c7ee1ecb98d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_ENUM_IDX(inst,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="2347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_ENUM_IDX(DT_DRV_INST(inst),<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357" refid="group__devicetree-inst_1gafbf64148f9171ffd322f7689297e0da8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_ENUM_IDX_OR(inst,<sp/>prop,<sp/>default_idx_value)<sp/>\</highlight></codeline>
<codeline lineno="2358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_ENUM_IDX_OR(DT_DRV_INST(inst),<sp/>prop,<sp/>default_idx_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366" refid="group__devicetree-inst_1ga9dce2e631b2a94804e8f2bcc76c6eff8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PROP(inst,<sp/>prop)<sp/>DT_PROP(DT_DRV_INST(inst),<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2374" refid="group__devicetree-inst_1ga9471df75ff3c4f8d2298bb69c581b365" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PROP_LEN(inst,<sp/>prop)<sp/>DT_PROP_LEN(DT_DRV_INST(inst),<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385" refid="group__devicetree-inst_1ga2c51745f8d51b1d9cdfb1cde69911d48" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PROP_HAS_IDX(inst,<sp/>prop,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="2386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_HAS_IDX(DT_DRV_INST(inst),<sp/>prop,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395" refid="group__devicetree-inst_1ga5b60f4ed4f5dadc5dd425f5905f23b00" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PROP_BY_IDX(inst,<sp/>prop,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="2396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_BY_IDX(DT_DRV_INST(inst),<sp/>prop,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405" refid="group__devicetree-inst_1gaa51bd8f5b016244e0256b3ed9aceee7f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PROP_OR(inst,<sp/>prop,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="2406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_OR(DT_DRV_INST(inst),<sp/>prop,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413" refid="group__devicetree-inst_1gaeb831ef33bb82335027cc762ecf5dfb1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_LABEL(inst)<sp/>DT_INST_PROP(inst,<sp/>label)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423" refid="group__devicetree-inst_1ga1f26b1c5b6c7a8c3c02c09d72a00afa5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PROP_BY_PHANDLE(inst,<sp/>ph,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="2424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_INST_PROP_BY_PHANDLE_IDX(inst,<sp/>ph,<sp/>0,<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437" refid="group__devicetree-inst_1gad027963bdf159942cf6fb28b04e8d48e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PROP_BY_PHANDLE_IDX(inst,<sp/>phs,<sp/>idx,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="2438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_BY_PHANDLE_IDX(DT_DRV_INST(inst),<sp/>phs,<sp/>idx,<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448" refid="group__devicetree-inst_1gaac886e11906d628acad1d73ed3a64018" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA_BY_IDX(inst,<sp/>pha,<sp/>idx,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHA_BY_IDX(DT_DRV_INST(inst),<sp/>pha,<sp/>idx,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460" refid="group__devicetree-inst_1ga3db4c00e072bd93fa92e36907b2b5e86" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA_BY_IDX_OR(inst,<sp/>pha,<sp/>idx,<sp/>cell,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="2461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHA_BY_IDX_OR(DT_DRV_INST(inst),<sp/>pha,<sp/>idx,<sp/>cell,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471" refid="group__devicetree-inst_1ga0de189f14fa7dd38a99382b7f2adbff8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA(inst,<sp/>pha,<sp/>cell)<sp/>DT_INST_PHA_BY_IDX(inst,<sp/>pha,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481" refid="group__devicetree-inst_1ga491ad421602e41c4295bac61b595fc94" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA_OR(inst,<sp/>pha,<sp/>cell,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="2482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_INST_PHA_BY_IDX_OR(inst,<sp/>pha,<sp/>0,<sp/>cell,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493" refid="group__devicetree-inst_1ga25418914c5190df10c842744aa967dc8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA_BY_NAME(inst,<sp/>pha,<sp/>name,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHA_BY_NAME(DT_DRV_INST(inst),<sp/>pha,<sp/>name,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505" refid="group__devicetree-inst_1gaaebc5c643b60319f7e767e46ca226729" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA_BY_NAME_OR(inst,<sp/>pha,<sp/>name,<sp/>cell,<sp/>default_value)<sp/>\</highlight></codeline>
<codeline lineno="2506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHA_BY_NAME_OR(DT_DRV_INST(inst),<sp/>pha,<sp/>name,<sp/>cell,<sp/>default_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516" refid="group__devicetree-inst_1ga64d8ddaad8b2d3852e30686d3adf6551" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHANDLE_BY_NAME(inst,<sp/>pha,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="2517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHANDLE_BY_NAME(DT_DRV_INST(inst),<sp/>pha,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="2518"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528" refid="group__devicetree-inst_1ga10d93a1f9a9f5e225508c4c383654b1c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHANDLE_BY_IDX(inst,<sp/>prop,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="2529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHANDLE_BY_IDX(DT_DRV_INST(inst),<sp/>prop,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539" refid="group__devicetree-inst_1ga81c10f478c86e5a4c18eb7a990447137" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHANDLE(inst,<sp/>prop)<sp/>DT_INST_PHANDLE_BY_IDX(inst,<sp/>prop,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548" refid="group__devicetree-inst_1ga26bbff9ebaed549140d2530a0b99e8a4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_REG_HAS_IDX(inst,<sp/>idx)<sp/>DT_REG_HAS_IDX(DT_DRV_INST(inst),<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556" refid="group__devicetree-inst_1ga0fe0403821883598da6cfad4f3962115" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_REG_ADDR_BY_IDX(inst,<sp/>idx)<sp/>DT_REG_ADDR_BY_IDX(DT_DRV_INST(inst),<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564" refid="group__devicetree-inst_1gab1152c9f069c69b0269c1a4e744b9dd9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_REG_SIZE_BY_IDX(inst,<sp/>idx)<sp/>\</highlight></codeline>
<codeline lineno="2565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REG_SIZE_BY_IDX(DT_DRV_INST(inst),<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573" refid="group__devicetree-inst_1ga722d6f7b97136aa9229242e4ba7dd25c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_REG_ADDR_BY_NAME(inst,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="2574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REG_ADDR_BY_NAME(DT_DRV_INST(inst),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582" refid="group__devicetree-inst_1gaf82457c5dcfef7eeba074afb95d48714" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_REG_SIZE_BY_NAME(inst,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="2583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REG_SIZE_BY_NAME(DT_DRV_INST(inst),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590" refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_REG_ADDR(inst)<sp/>DT_INST_REG_ADDR_BY_IDX(inst,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597" refid="group__devicetree-inst_1gaa7cea29435e1db59470302abb5ee88dd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_REG_SIZE(inst)<sp/>DT_INST_REG_SIZE_BY_IDX(inst,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606" refid="group__devicetree-inst_1gad0d69a61ad842aa1dc3a5d4a304c3f2f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQ_BY_IDX(inst,<sp/>idx,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2607"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_IRQ_BY_IDX(DT_DRV_INST(inst),<sp/>idx,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616" refid="group__devicetree-inst_1ga1ff6f24f9c97d4b611e4bf50ce5175d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQ_BY_NAME(inst,<sp/>name,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2617"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_IRQ_BY_NAME(DT_DRV_INST(inst),<sp/>name,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625" refid="group__devicetree-inst_1ga789eb58422bab7b3a79b487c4a8a82d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQ(inst,<sp/>cell)<sp/>DT_INST_IRQ_BY_IDX(inst,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632" refid="group__devicetree-inst_1ga4e5a5f20f5dd9ea4cfda61def2c16ed3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQN(inst)<sp/>DT_INST_IRQ(inst,<sp/>irq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639" refid="group__devicetree-inst_1gacecb46743315738dcd9a0765ea78276a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_BUS(inst)<sp/>DT_BUS(DT_DRV_INST(inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646" refid="group__devicetree-inst_1ga84075816197097491784f0cabbd07b76" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_BUS_LABEL(inst)<sp/>DT_BUS_LABEL(DT_DRV_INST(inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655" refid="group__devicetree-inst_1ga7a29bda946b399a7af92ec9cd09b4e98" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_ON_BUS(inst,<sp/>bus)<sp/>DT_ON_BUS(DT_DRV_INST(inst),<sp/>bus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685" refid="group__devicetree-inst_1gaa4ff1fe4242399fbd667fbee7e98040a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_ANY_INST_ON_BUS_STATUS_OKAY(bus)<sp/>\</highlight></codeline>
<codeline lineno="2686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_COMPAT_ON_BUS_INTERNAL(DT_DRV_COMPAT,<sp/>bus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747" refid="group__devicetree-inst_1gaeac7ed0f4a6820a6e5d7dadb6d62d6e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_FOREACH_STATUS_OKAY(fn)<sp/>\</highlight></codeline>
<codeline lineno="2748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UTIL_CAT(DT_FOREACH_OKAY_INST_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_DRV_COMPAT)(fn)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2764" refid="group__devicetree-inst_1ga1b9fd4b9c37a23e52e69ea23f7aedb38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_FOREACH_STATUS_OKAY_VARGS(fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="2765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2766"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UTIL_CAT(DT_FOREACH_OKAY_INST_VARGS_,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_DRV_COMPAT)(fn,<sp/>__VA_ARGS__)),<sp/>\</highlight></codeline>
<codeline lineno="2768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780" refid="group__devicetree-inst_1gaf163f2f85b3893ca46c87f0fcbe65255" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_FOREACH_PROP_ELEM(inst,<sp/>prop,<sp/>fn)<sp/>\</highlight></codeline>
<codeline lineno="2781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_FOREACH_PROP_ELEM(DT_DRV_INST(inst),<sp/>prop,<sp/>fn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797" refid="group__devicetree-inst_1ga31b9022f7add3d77417b78ed67d544e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_FOREACH_PROP_ELEM_VARGS(inst,<sp/>prop,<sp/>fn,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="2798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_FOREACH_PROP_ELEM_VARGS(DT_DRV_INST(inst),<sp/>prop,<sp/>fn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2806" refid="group__devicetree-inst_1gaa03419e2d9c887a81e16e96b5947bccb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_NODE_HAS_PROP(inst,<sp/>prop)<sp/>\</highlight></codeline>
<codeline lineno="2807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_NODE_HAS_PROP(DT_DRV_INST(inst),<sp/>prop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819" refid="group__devicetree-inst_1gae054b89701ec9fae577320fb7b9cae1e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA_HAS_CELL_AT_IDX(inst,<sp/>pha,<sp/>idx,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PHA_HAS_CELL_AT_IDX(DT_DRV_INST(inst),<sp/>pha,<sp/>idx,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831" refid="group__devicetree-inst_1gab8083dae430aeb93a967bbf98aa9eefc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_PHA_HAS_CELL(inst,<sp/>pha,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_INST_PHA_HAS_CELL_AT_IDX(inst,<sp/>pha,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841" refid="group__devicetree-inst_1gabb45132ef78818512c02bdf1f5a38068" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQ_HAS_IDX(inst,<sp/>idx)<sp/>DT_IRQ_HAS_IDX(DT_DRV_INST(inst),<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2851" refid="group__devicetree-inst_1gab176ff07912cea915c811406e8f5e386" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQ_HAS_CELL_AT_IDX(inst,<sp/>idx,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_IRQ_HAS_CELL_AT_IDX(DT_DRV_INST(inst),<sp/>idx,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2861" refid="group__devicetree-inst_1gabec43df3451bd917120b283d76c57054" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQ_HAS_CELL(inst,<sp/>cell)<sp/>\</highlight></codeline>
<codeline lineno="2862"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_INST_IRQ_HAS_CELL_AT_IDX(inst,<sp/>0,<sp/>cell)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870" refid="group__devicetree-inst_1gaa038ffc9b4f5c897a4a9e6d0e9836ffd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_INST_IRQ_HAS_NAME(inst,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="2871"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_IRQ_HAS_NAME(DT_DRV_INST(inst),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878" refid="devicetree_8h_1af51e66f69742fc2f083097682e9049a4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_PATH_INTERNAL(...)<sp/>\</highlight></codeline>
<codeline lineno="2879"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTIL_CAT(DT_ROOT,<sp/>MACRO_MAP_CAT(DT_S_PREFIX,<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881" refid="devicetree_8h_1a1dfb7bf7a80265200b90122e7bc79fd5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_S_PREFIX(name)<sp/>_S_##name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897" refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_CAT(a1,<sp/>a2)<sp/>a1<sp/>##<sp/>a2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899" refid="devicetree_8h_1aa96a6f2d948ab4c0118cb63a148d324f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_CAT3(a1,<sp/>a2,<sp/>a3)<sp/>a1<sp/>##<sp/>a2<sp/>##<sp/>a3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901" refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_CAT4(a1,<sp/>a2,<sp/>a3,<sp/>a4)<sp/>a1<sp/>##<sp/>a2<sp/>##<sp/>a3<sp/>##<sp/>a4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903" refid="devicetree_8h_1acd15db1bd8afb89346ef74f07fdbd6a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_CAT5(a1,<sp/>a2,<sp/>a3,<sp/>a4,<sp/>a5)<sp/>a1<sp/>##<sp/>a2<sp/>##<sp/>a3<sp/>##<sp/>a4<sp/>##<sp/>a5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905" refid="devicetree_8h_1ac806173a3b422212ed11c59639ac174c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_CAT6(a1,<sp/>a2,<sp/>a3,<sp/>a4,<sp/>a5,<sp/>a6)<sp/>a1<sp/>##<sp/>a2<sp/>##<sp/>a3<sp/>##<sp/>a4<sp/>##<sp/>a5<sp/>##<sp/>a6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2907"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>need<sp/>to<sp/>define<sp/>a<sp/>bigger<sp/>DT_CATN(),<sp/>do<sp/>so<sp/>here.<sp/>Don&apos;t<sp/>leave</highlight></codeline>
<codeline lineno="2908"><highlight class="comment"><sp/>*<sp/>any<sp/>&quot;holes&quot;<sp/>of<sp/>undefined<sp/>macros,<sp/>please.</highlight></codeline>
<codeline lineno="2909"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912" refid="devicetree_8h_1af3f0bb55f6155a5188345d5ba6caf992" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_DASH(...)<sp/>MACRO_MAP_CAT(DT_DASH_PREFIX,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914" refid="devicetree_8h_1a99fc4c6963e8e3cc1516bc281bf15ab5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_DASH_PREFIX(name)<sp/>_##name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916" refid="devicetree_8h_1a8f87097097e3bf344188106ec1cdccbc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_NODE_HAS_STATUS_INTERNAL(node_id,<sp/>status)<sp/>\</highlight></codeline>
<codeline lineno="2917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(DT_CAT(node_id,<sp/>_STATUS_<sp/>##<sp/>status))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919" refid="devicetree_8h_1a9ebb36e1f68f40bc4c7883859f739c50" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_COMPAT_ON_BUS_INTERNAL(compat,<sp/>bus)<sp/>\</highlight></codeline>
<codeline lineno="2920"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IS_ENABLED(UTIL_CAT(DT_CAT(DT_COMPAT_,<sp/>compat),<sp/>_BUS_##bus))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>have<sp/>these<sp/>last<sp/>so<sp/>they<sp/>have<sp/>access<sp/>to<sp/>all<sp/>previously<sp/>defined<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="io-channels_8h" kindref="compound">devicetree/io-channels.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="clocks_8h" kindref="compound">devicetree/clocks.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_2gpio_8h" kindref="compound">devicetree/gpio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_2spi_8h" kindref="compound">devicetree/spi.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_2dma_8h" kindref="compound">devicetree/dma.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pwms_8h" kindref="compound">devicetree/pwms.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fixed-partitions_8h" kindref="compound">devicetree/fixed-partitions.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_2zephyr_8h" kindref="compound">devicetree/zephyr.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ordinals_8h" kindref="compound">devicetree/ordinals.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="devicetree_2pinctrl_8h" kindref="compound">devicetree/pinctrl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICETREE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/devicetree.h"/>
  </compounddef>
</doxygen>
