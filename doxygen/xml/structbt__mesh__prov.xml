<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__mesh__prov" kind="struct" language="C++" prot="public">
    <compoundname>bt_mesh_prov</compoundname>
    <includes refid="main_8h" local="no">main.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__mesh__prov_1a1152d77c4c4d9271bbd72514d94052f2" prot="public" static="no" mutable="no">
        <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>const uint8_t* bt_mesh_prov::uuid</definition>
        <argsstring></argsstring>
        <name>uuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The UUID that&apos;s used when advertising as unprovisioned </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="96" column="15" bodyfile="include/bluetooth/mesh/main.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a6a11cc0d36ca2f4c5aee67a023c295a2" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* bt_mesh_prov::uri</definition>
        <argsstring></argsstring>
        <name>uri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional URI. This will be advertised separately from the unprovisioned beacon, however the unprovisioned beacon will contain a hash of it so the two can be associated by the provisioner. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="103" column="12" bodyfile="include/bluetooth/mesh/main.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a6ed61556291f7f9d9a32062d588b8f2a" prot="public" static="no" mutable="no">
        <type><ref refid="group__bt__mesh__prov_1gaf93f7b49dada5c3f7accc54663648e48" kindref="member">bt_mesh_prov_oob_info_t</ref></type>
        <definition>bt_mesh_prov_oob_info_t bt_mesh_prov::oob_info</definition>
        <argsstring></argsstring>
        <name>oob_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Out of Band information field. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="106" column="25" bodyfile="include/bluetooth/mesh/main.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a1261ba69e785f005d5834ac49da00778" prot="public" static="no" mutable="no">
        <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>const uint8_t* bt_mesh_prov::public_key_be</definition>
        <argsstring></argsstring>
        <name>public_key_be</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to Public Key in big-endian for OOB public key type support.</para>
<para>Remember to enable <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_MESH_PROV_OOB_PUBLIC_KEY` </verbatim> when initializing this parameter.</para>
<para>Must be used together with <ref refid="structbt__mesh__prov_1a1ab714e9be35242e02099884c3af45f5" kindref="member">bt_mesh_prov::private_key_be</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="115" column="15" bodyfile="include/bluetooth/mesh/main.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a1ab714e9be35242e02099884c3af45f5" prot="public" static="no" mutable="no">
        <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>const uint8_t* bt_mesh_prov::private_key_be</definition>
        <argsstring></argsstring>
        <name>private_key_be</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to Private Key in big-endian for OOB public key type support.</para>
<para>Remember to enable <verbatim>embed:rst:inline :kconfig:`CONFIG_BT_MESH_PROV_OOB_PUBLIC_KEY` </verbatim> when initializing this parameter.</para>
<para>Must be used together with <ref refid="structbt__mesh__prov_1a1261ba69e785f005d5834ac49da00778" kindref="member">bt_mesh_prov::public_key_be</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="123" column="15" bodyfile="include/bluetooth/mesh/main.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a97cf41cf857479c8eefee640f7b66788" prot="public" static="no" mutable="no">
        <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>const uint8_t* bt_mesh_prov::static_val</definition>
        <argsstring></argsstring>
        <name>static_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static OOB value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="126" column="15" bodyfile="include/bluetooth/mesh/main.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a97394dded5fd55b553364a566a2441e8" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_mesh_prov::static_val_len</definition>
        <argsstring></argsstring>
        <name>static_val_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static OOB value length </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="128" column="16" bodyfile="include/bluetooth/mesh/main.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a4c51aa8e5887b3364d9480c92da3a0a0" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_mesh_prov::output_size</definition>
        <argsstring></argsstring>
        <name>output_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of Output OOB supported </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="131" column="16" bodyfile="include/bluetooth/mesh/main.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a8b88959c5eef7f47591468e9c9768b7c" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t bt_mesh_prov::output_actions</definition>
        <argsstring></argsstring>
        <name>output_actions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Supported Output OOB Actions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="133" column="16" bodyfile="include/bluetooth/mesh/main.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1ab9044f6dbf9780b3237f18270b2c8582" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_mesh_prov::input_size</definition>
        <argsstring></argsstring>
        <name>input_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of Input OOB supported </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="136" column="16" bodyfile="include/bluetooth/mesh/main.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1af928a9419f684bcbda0563dda2c34d76" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t bt_mesh_prov::input_actions</definition>
        <argsstring></argsstring>
        <name>input_actions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Supported Input OOB Actions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="138" column="16" bodyfile="include/bluetooth/mesh/main.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1afbc65bb8be99f7dc37ecc911f4ac2151" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::capabilities) (const struct bt_mesh_dev_capabilities *cap)</definition>
        <argsstring>)(const struct bt_mesh_dev_capabilities *cap)</argsstring>
        <name>capabilities</name>
        <briefdescription>
<para>Provisioning Capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that the provisioning capabilities of the unprovisioned device has been received.</para>
<para>The application can consequently call bt_mesh_auth_method_set_&lt;*&gt; to select suitable provisioning oob authentication method.</para>
<para>When this callback returns, the provisioner will start authentication with the chosen method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cap</parametername>
</parameternamelist>
<parameterdescription>
<para>capabilities supported by device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="153" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1af5c30f061ba8b0a713a3d54068dd68cc" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_mesh_prov::output_number) (bt_mesh_output_action_t act, uint32_t num)</definition>
        <argsstring>)(bt_mesh_output_action_t act, uint32_t num)</argsstring>
        <name>output_number</name>
        <briefdescription>
<para>Output of a number is requested. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that it should output the given number using the given action.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>act</parametername>
</parameternamelist>
<parameterdescription>
<para>Action for outputting the number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be outputted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="165" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a28284efee6478637446702d7839f6b8c" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_mesh_prov::output_string) (const char *str)</definition>
        <argsstring>)(const char *str)</argsstring>
        <name>output_string</name>
        <briefdescription>
<para>Output of a string is requested. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that it should display the given string to the user.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be displayed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="176" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a31eff9c903ac721bbca7ab586dda9e80" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_mesh_prov::input) (bt_mesh_input_action_t act, uint8_t size)</definition>
        <argsstring>)(bt_mesh_input_action_t act, uint8_t size)</argsstring>
        <name>input</name>
        <briefdescription>
<para>Input is requested. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that it should request input from the user using the given action. The requested input will either be a string or a number, and the application needs to consequently call the <ref refid="group__bt__mesh__prov_1ga2592abf429b40ef9242bce26f5bd085e" kindref="member">bt_mesh_input_string()</ref> or <ref refid="group__bt__mesh__prov_1gace8cbf2a6e9144d3118054f234de02ef" kindref="member">bt_mesh_input_number()</ref> functions once the data has been acquired from the user.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>act</parametername>
</parameternamelist>
<parameterdescription>
<para>Action for inputting data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of the inputted data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="192" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a2717ddf38465b95452724078f780f9e5" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::input_complete) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>input_complete</name>
        <briefdescription>
<para>The other device finished their OOB input. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that it should stop displaying its output OOB value, as the other party finished their OOB input. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="200" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a8142a3b8120b1686f68513caeac09497" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::unprovisioned_beacon) (uint8_t uuid[16], bt_mesh_prov_oob_info_t oob_info, uint32_t *uri_hash)</definition>
        <argsstring>)(uint8_t uuid[16], bt_mesh_prov_oob_info_t oob_info, uint32_t *uri_hash)</argsstring>
        <name>unprovisioned_beacon</name>
        <briefdescription>
<para>Unprovisioned beacon has been received. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that an unprovisioned beacon has been received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uuid</parametername>
</parameternamelist>
<parameterdescription>
<para>UUID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oob_info</parametername>
</parameternamelist>
<parameterdescription>
<para>OOB Information </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to URI Hash value. NULL if no hash was present in the beacon. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="212" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a44efea3e9221c182cbcacce8219ef6b7" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::link_open) (bt_mesh_prov_bearer_t bearer)</definition>
        <argsstring>)(bt_mesh_prov_bearer_t bearer)</argsstring>
        <name>link_open</name>
        <briefdescription>
<para>Provisioning link has been opened. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that a provisioning link has been opened on the given provisioning bearer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bearer</parametername>
</parameternamelist>
<parameterdescription>
<para>Provisioning bearer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="223" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1a0183cef77dda3978ef8a40ce7aad043a" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::link_close) (bt_mesh_prov_bearer_t bearer)</definition>
        <argsstring>)(bt_mesh_prov_bearer_t bearer)</argsstring>
        <name>link_close</name>
        <briefdescription>
<para>Provisioning link has been closed. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that a provisioning link has been closed on the given provisioning bearer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bearer</parametername>
</parameternamelist>
<parameterdescription>
<para>Provisioning bearer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="232" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1ad55abc2b1632455bb23fbd8b03df85ea" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::complete) (uint16_t net_idx, uint16_t addr)</definition>
        <argsstring>)(uint16_t net_idx, uint16_t addr)</argsstring>
        <name>complete</name>
        <briefdescription>
<para>Provisioning is complete. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that provisioning has been successfully completed, and that the local node has been assigned the specified NetKeyIndex and primary element address.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>NetKeyIndex given during provisioning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Primary element address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="243" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1aaa49675e358ea4cba7552b3e855befba" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::node_added) (uint16_t net_idx, uint8_t uuid[16], uint16_t addr, uint8_t num_elem)</definition>
        <argsstring>)(uint16_t net_idx, uint8_t uuid[16], uint16_t addr, uint8_t num_elem)</argsstring>
        <name>node_added</name>
        <briefdescription>
<para>A new node has been added to the provisioning database. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that provisioning has been successfully completed, and that a node has been assigned the specified NetKeyIndex and primary element address.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>net_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>NetKeyIndex given during provisioning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uuid</parametername>
</parameternamelist>
<parameterdescription>
<para>UUID of the added node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Primary element address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements that this node has. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="256" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__prov_1ae87570de25c89e74bece2516ff957779" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_prov::reset) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Node has been reset. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback notifies the application that the local node has been reset and needs to be reprovisioned. The node will not automatically advertise as unprovisioned, rather the <ref refid="group__bt__mesh__prov_1ga6c8dc1b09d4cde8738be83c992b860a9" kindref="member">bt_mesh_prov_enable()</ref> API needs to be called to enable unprovisioned advertising on one or more provisioning bearers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/main.h" line="267" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Provisioning properties &amp; capabilities. </para>
    </detaileddescription>
    <location file="include/bluetooth/mesh/main.h" line="94" column="1" bodyfile="include/bluetooth/mesh/main.h" bodystart="94" bodyend="268"/>
    <listofallmembers>
      <member refid="structbt__mesh__prov_1afbc65bb8be99f7dc37ecc911f4ac2151" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>capabilities</name></member>
      <member refid="structbt__mesh__prov_1ad55abc2b1632455bb23fbd8b03df85ea" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>complete</name></member>
      <member refid="structbt__mesh__prov_1a31eff9c903ac721bbca7ab586dda9e80" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>input</name></member>
      <member refid="structbt__mesh__prov_1af928a9419f684bcbda0563dda2c34d76" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>input_actions</name></member>
      <member refid="structbt__mesh__prov_1a2717ddf38465b95452724078f780f9e5" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>input_complete</name></member>
      <member refid="structbt__mesh__prov_1ab9044f6dbf9780b3237f18270b2c8582" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>input_size</name></member>
      <member refid="structbt__mesh__prov_1a0183cef77dda3978ef8a40ce7aad043a" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>link_close</name></member>
      <member refid="structbt__mesh__prov_1a44efea3e9221c182cbcacce8219ef6b7" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>link_open</name></member>
      <member refid="structbt__mesh__prov_1aaa49675e358ea4cba7552b3e855befba" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>node_added</name></member>
      <member refid="structbt__mesh__prov_1a6ed61556291f7f9d9a32062d588b8f2a" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>oob_info</name></member>
      <member refid="structbt__mesh__prov_1a8b88959c5eef7f47591468e9c9768b7c" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>output_actions</name></member>
      <member refid="structbt__mesh__prov_1af5c30f061ba8b0a713a3d54068dd68cc" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>output_number</name></member>
      <member refid="structbt__mesh__prov_1a4c51aa8e5887b3364d9480c92da3a0a0" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>output_size</name></member>
      <member refid="structbt__mesh__prov_1a28284efee6478637446702d7839f6b8c" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>output_string</name></member>
      <member refid="structbt__mesh__prov_1a1ab714e9be35242e02099884c3af45f5" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>private_key_be</name></member>
      <member refid="structbt__mesh__prov_1a1261ba69e785f005d5834ac49da00778" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>public_key_be</name></member>
      <member refid="structbt__mesh__prov_1ae87570de25c89e74bece2516ff957779" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>reset</name></member>
      <member refid="structbt__mesh__prov_1a97cf41cf857479c8eefee640f7b66788" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>static_val</name></member>
      <member refid="structbt__mesh__prov_1a97394dded5fd55b553364a566a2441e8" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>static_val_len</name></member>
      <member refid="structbt__mesh__prov_1a8142a3b8120b1686f68513caeac09497" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>unprovisioned_beacon</name></member>
      <member refid="structbt__mesh__prov_1a6a11cc0d36ca2f4c5aee67a023c295a2" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>uri</name></member>
      <member refid="structbt__mesh__prov_1a1152d77c4c4d9271bbd72514d94052f2" prot="public" virt="non-virtual"><scope>bt_mesh_prov</scope><name>uuid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
