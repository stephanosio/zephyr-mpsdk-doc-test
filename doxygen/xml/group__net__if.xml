<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__net__if" kind="group">
    <compoundname>net_if</compoundname>
    <title>Network Interface abstraction layer</title>
    <innerclass refid="structnet__if__addr" prot="public">net_if_addr</innerclass>
    <innerclass refid="structnet__if__mcast__addr" prot="public">net_if_mcast_addr</innerclass>
    <innerclass refid="structnet__if__ipv6__prefix" prot="public">net_if_ipv6_prefix</innerclass>
    <innerclass refid="structnet__if__router" prot="public">net_if_router</innerclass>
    <innerclass refid="structnet__if__ipv6" prot="public">net_if_ipv6</innerclass>
    <innerclass refid="structnet__if__ipv4" prot="public">net_if_ipv4</innerclass>
    <innerclass refid="structnet__if__ip" prot="public">net_if_ip</innerclass>
    <innerclass refid="structnet__if__config" prot="public">net_if_config</innerclass>
    <innerclass refid="structnet__traffic__class" prot="public">net_traffic_class</innerclass>
    <innerclass refid="structnet__if__dev" prot="public">net_if_dev</innerclass>
    <innerclass refid="structnet__if" prot="public">net_if</innerclass>
    <innerclass refid="structnet__if__mcast__monitor" prot="public">net_if_mcast_monitor</innerclass>
    <innerclass refid="structnet__if__link__cb" prot="public">net_if_link_cb</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__net__if_1gae691e5537917ffce27ad0db82c730371" prot="public" static="no" strong="no">
        <type></type>
        <name>net_if_flag</name>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371ab0ab7393d643354c46c3437d74c15840" prot="public">
          <name>NET_IF_UP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interface is up/ready to receive and transmit </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371a3256ef2d537c85b4c2b33b92935e1009" prot="public">
          <name>NET_IF_POINTOPOINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interface is pointopoint </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371a700d92a5b0de3c779e59806137b35141" prot="public">
          <name>NET_IF_PROMISC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interface is in promiscuous mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371a0babb762301878eaf8ef8a05213ecf05" prot="public">
          <name>NET_IF_NO_AUTO_START</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Do not start the interface immediately after initialization. This requires that either the device driver or some other entity will need to manually take the interface up when needed. For example for Ethernet this will happen when the driver calls the <ref refid="group__ethernet_1gabeb21cb06b18674b73fbd0f42ee726f0" kindref="member">net_eth_carrier_on()</ref> function. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371aaaeafc62e61ec120609205770c8b54f0" prot="public">
          <name>NET_IF_SUSPENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Power management specific: interface is being suspended </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371a581971c9d93a910c4c607da45aa2e4ac" prot="public">
          <name>NET_IF_FORWARD_MULTICASTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flag defines if received multicasts of other interface are forwarded on this interface. This activates multicast routing / forwarding for this interface. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371a67d2c0fe390ab16f347ee2dc0a056329" prot="public">
          <name>NET_IF_IPV4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interface supports IPv4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__net__if_1ggae691e5537917ffce27ad0db82c730371aab31a9e1e8c02159f45efc4e0455a4d6" prot="public">
          <name>NET_IF_IPV6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interface supports IPv6 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="163" column="1" bodyfile="include/net/net_if.h" bodystart="163" bodyend="200"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__net__if_1ga75f634841e145d2997e9b83b6a4b14af" prot="public" static="no">
        <type>void(*</type>
        <definition>net_if_mcast_callback_t</definition>
        <argsstring>)(struct net_if *iface, const struct net_addr *addr, bool is_joined)</argsstring>
        <name>net_if_mcast_callback_t</name>
        <briefdescription>
<para>Define callback that is called whenever IPv6 multicast address group is joined or left. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a struct <ref refid="structnet__if" kindref="compound">net_if</ref> to which the multicast address is attached. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IP multicast address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_joined</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the address is joined, false if left. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1049" column="9" bodyfile="include/net/net_if.h" bodystart="1049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__net__if_1ga397d65b7b9aef56e3bdee80a92681178" prot="public" static="no">
        <type>void(*</type>
        <definition>net_if_link_callback_t</definition>
        <argsstring>)(struct net_if *iface, struct net_linkaddr *dst, int status)</argsstring>
        <name>net_if_link_callback_t</name>
        <briefdescription>
<para>Define callback that is called after a network packet has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a struct <ref refid="structnet__if" kindref="compound">net_if</ref> to which the the <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> was sent to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Link layer address of the destination where the network packet was sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Send status, 0 is ok, &lt; 0 error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1898" column="9" bodyfile="include/net/net_if.h" bodystart="1898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__net__if_1gaec4ea72fa3f7e23904899697e1aad6ff" prot="public" static="no">
        <type>void(*</type>
        <definition>net_if_cb_t</definition>
        <argsstring>)(struct net_if *iface, void *user_data)</argsstring>
        <name>net_if_cb_t</name>
        <briefdescription>
<para>Callback used while iterating over network interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to current network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer to user data or NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1995" column="9" bodyfile="include/net/net_if.h" bodystart="1995" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__if_1ga52f9fca13e9f836799e0e40f581744d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_flag_set</definition>
        <argsstring>(struct net_if *iface, enum net_if_flag value)</argsstring>
        <name>net_if_flag_set</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__net__if_1gae691e5537917ffce27ad0db82c730371" kindref="member">net_if_flag</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a value in network interface flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="495" column="20" bodyfile="include/net/net_if.h" bodystart="495" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga42e7482191a92007960601f8bb621dca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_flag_test_and_set</definition>
        <argsstring>(struct net_if *iface, enum net_if_flag value)</argsstring>
        <name>net_if_flag_test_and_set</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__net__if_1gae691e5537917ffce27ad0db82c730371" kindref="member">net_if_flag</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Test and set a value in network interface flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the bit was set, false if it wasn&apos;t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="511" column="20" bodyfile="include/net/net_if.h" bodystart="511" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaff751b6a92b0c608ecfc50e8c0587fd3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_flag_clear</definition>
        <argsstring>(struct net_if *iface, enum net_if_flag value)</argsstring>
        <name>net_if_flag_clear</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__net__if_1gae691e5537917ffce27ad0db82c730371" kindref="member">net_if_flag</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Clear a value in network interface flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="525" column="20" bodyfile="include/net/net_if.h" bodystart="525" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gae1f373ddd61c18a81481d8ddcfb12543" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_flag_is_set</definition>
        <argsstring>(struct net_if *iface, enum net_if_flag value)</argsstring>
        <name>net_if_flag_is_set</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__net__if_1gae691e5537917ffce27ad0db82c730371" kindref="member">net_if_flag</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Check if a value in network interface flags is set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the value is set, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="541" column="20" bodyfile="include/net/net_if.h" bodystart="541" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gada0398d757eab28d16a129692c309f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref></type>
        <definition>enum net_verdict net_if_send_data</definition>
        <argsstring>(struct net_if *iface, struct net_pkt *pkt)</argsstring>
        <name>net_if_send_data</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Send a packet through a net iface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a net packet to send</para>
</parameterdescription>
</parameteritem>
</parameterlist>
return verdict about the packet </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="559" column="17" declfile="include/net/net_if.h" declline="559" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga34d03b01e2bcb09efd4ce390108d4572" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structnet__l2" kindref="compound">net_l2</ref> *const</type>
        <definition>static const struct net_l2 *const net_if_l2</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_l2</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the interface L2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer to a network interface structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the iface L2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="568" column="40" bodyfile="include/net/net_if.h" bodystart="568" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga72ed21ca0cb220199f5a2070137c7fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref></type>
        <definition>enum net_verdict net_if_recv_data</definition>
        <argsstring>(struct net_if *iface, struct net_pkt *pkt)</argsstring>
        <name>net_if_recv_data</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Input a packet through a net iface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a net packet to input</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>verdict about the packet </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="585" column="17" declfile="include/net/net_if.h" declline="585" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga3cad2d51fc9cc225619585e06e252db0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_if_l2_data</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_l2_data</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the interface L2 private data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer to a network interface structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the iface L2 data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="594" column="20" bodyfile="include/net/net_if.h" bodystart="594" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaeb8c703f273bc07ae9bb7a0d8bfe6f3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>static const struct device * net_if_get_device</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_get_device</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get an network interface&apos;s device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the device driver instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="606" column="33" bodyfile="include/net/net_if.h" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga56c4d37edcea540be09ebcdf97265aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_queue_tx</definition>
        <argsstring>(struct net_if *iface, struct net_pkt *pkt)</argsstring>
        <name>net_if_queue_tx</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Queue a packet to the net interface TX queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a net packet to queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="617" column="6" declfile="include/net/net_if.h" declline="617" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga6bfa5f84a2127bbad27a0a3b319526a1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_is_ip_offloaded</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_is_ip_offloaded</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return the IP offload status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if IP offlining is active, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="626" column="20" bodyfile="include/net/net_if.h" bodystart="626" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga520939e94620ca75475a71f153df6d4a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct net_offload *</type>
        <definition>static struct net_offload * net_if_offload</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_offload</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return the IP offload plugin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if there is no offload plugin defined, valid pointer otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="644" column="32" bodyfile="include/net/net_if.h" bodystart="644" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaf308baf2241fa455b50b439b7fab3f1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_is_socket_offloaded</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_is_socket_offloaded</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return the socket offload status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if socket offloading is active, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="662" column="20" bodyfile="include/net/net_if.h" bodystart="662" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga467186e964bf721e14fed38392f21872" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref> *</type>
        <definition>static struct net_linkaddr * net_if_get_link_addr</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_get_link_addr</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get an network interface&apos;s link address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the network link address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="680" column="33" bodyfile="include/net/net_if.h" bodystart="680" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gae271e0e4dcb031a83d9908e597a45048" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__if__config" kindref="compound">net_if_config</ref> *</type>
        <definition>static struct net_if_config * net_if_get_config</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_get_config</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return network configuration for this network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to configuration </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="692" column="34" bodyfile="include/net/net_if.h" bodystart="692" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga9655c010ccbf989e9328271f5dbcc685" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_start_dad</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_start_dad</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Start duplicate address detection procedure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="705" column="20" bodyfile="include/net/net_if.h" bodystart="705" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gab9bdb7f8a9eeed4d9b70965b8af82cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_start_rs</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_start_rs</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Start neighbor discovery and send router solicitation message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="716" column="6" declfile="include/net/net_if.h" declline="716" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gab0195bb2151a1ba722a0b11d81066988" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_stop_rs</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_stop_rs</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Stop neighbor discovery. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="727" column="20" bodyfile="include/net/net_if.h" bodystart="727" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga52b41b2f8b7d3405338a0539542677a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_if_set_link_addr</definition>
        <argsstring>(struct net_if *iface, uint8_t *addr, uint8_t len, enum net_link_type type)</argsstring>
        <name>net_if_set_link_addr</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>enum <ref refid="group__net__linkaddr_1ga1312c2322bc4a4f1c3b76d6466806b24" kindref="member">net_link_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set a network interface&apos;s link address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a uint8_t buffer representing the address. The buffer must remain valid throughout interface lifetime. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the address buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>network bearer type of this link address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="768" column="19" bodyfile="include/net/net_if.h" bodystart="768" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gacddc98531c5748db5a34f5c3a3e96e86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t net_if_get_mtu</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_get_mtu</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get an network interface&apos;s MTU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the MTU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="786" column="24" bodyfile="include/net/net_if.h" bodystart="786" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga76b140c6fc39b94ff4102e08e3a58e81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_set_mtu</definition>
        <argsstring>(struct net_if *iface, uint16_t mtu)</argsstring>
        <name>net_if_set_mtu</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>mtu</declname>
        </param>
        <briefdescription>
<para>Set an network interface&apos;s MTU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a network interface structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>New MTU, note that we store only 16 bit mtu value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="801" column="20" bodyfile="include/net/net_if.h" bodystart="801" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gae66f6e7bd31545e6161fcd4600fe5842" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_addr_set_lf</definition>
        <argsstring>(struct net_if_addr *ifaddr, bool is_infinite)</argsstring>
        <name>net_if_addr_set_lf</name>
        <param>
          <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
          <declname>ifaddr</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>is_infinite</declname>
        </param>
        <briefdescription>
<para>Set the infinite status of the network interface address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifaddr</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address for network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_infinite</parametername>
</parameternamelist>
<parameterdescription>
<para>Infinite status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="817" column="20" bodyfile="include/net/net_if.h" bodystart="817" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga1b058361dc9bcac7d842bb49846a0c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_if_get_by_link_addr</definition>
        <argsstring>(struct net_linkaddr *ll_addr)</argsstring>
        <name>net_if_get_by_link_addr</name>
        <param>
          <type>struct <ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref> *</type>
          <declname>ll_addr</declname>
        </param>
        <briefdescription>
<para>Get an interface according to link layer address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Link layer address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network interface or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="830" column="13" declfile="include/net/net_if.h" declline="830" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gadbb8be32caa896bdcdeee19425134827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_if_lookup_by_dev</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>net_if_lookup_by_dev</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Find an interface from it&apos;s related device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid struct device pointer to relate with an interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a valid struct <ref refid="structnet__if" kindref="compound">net_if</ref> pointer on success, NULL otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="839" column="13" declfile="include/net/net_if.h" declline="839" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gae2323a72714e29836d8296dfc330f7fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__if__config" kindref="compound">net_if_config</ref> *</type>
        <definition>static struct net_if_config * net_if_config_get</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_config_get</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get network interface IP config. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if not found or pointer to correct config settings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="848" column="34" bodyfile="include/net/net_if.h" bodystart="848" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gadc87242eb7205362a308b3c4437bf76d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_router_rm</definition>
        <argsstring>(struct net_if_router *router)</argsstring>
        <name>net_if_router_rm</name>
        <param>
          <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
          <declname>router</declname>
        </param>
        <briefdescription>
<para>Remove a router from the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>router</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to existing router </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="858" column="6" declfile="include/net/net_if.h" declline="858" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga55214771e462cbd4930ffa738813cb87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_if_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>net_if_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the default network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Default interface or NULL if no interfaces are configured. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="865" column="13" declfile="include/net/net_if.h" declline="865" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga762337e8b66874a0fbf59bdbeba173f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_if_get_first_by_type</definition>
        <argsstring>(const struct net_l2 *l2)</argsstring>
        <name>net_if_get_first_by_type</name>
        <param>
          <type>const struct <ref refid="structnet__l2" kindref="compound">net_l2</ref> *</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
<para>Get the first network interface according to its type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l2</parametername>
</parameternamelist>
<parameterdescription>
<para>Layer 2 type of the network interface.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>First network interface of a given type or NULL if no such interfaces was found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="875" column="13" declfile="include/net/net_if.h" declline="875" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga56c9aef19bc9827d9ec96c00e10840fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_config_ipv6_get</definition>
        <argsstring>(struct net_if *iface, struct net_if_ipv6 **ipv6)</argsstring>
        <name>net_if_config_ipv6_get</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if__ipv6" kindref="compound">net_if_ipv6</ref> **</type>
          <declname>ipv6</declname>
        </param>
        <briefdescription>
<para>Allocate network interface IPv6 config. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will allocate new IPv6 config.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipv6</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocated IPv6 struct is returned to caller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="900" column="5" declfile="include/net/net_if.h" declline="900" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga8af1400b354c42a64795cdb1a600ddd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_config_ipv6_put</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_config_ipv6_put</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Release network interface IPv6 config. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="910" column="5" declfile="include/net/net_if.h" declline="910" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga13b5a26fc672d15697f99e85543184bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv6_addr_lookup</definition>
        <argsstring>(const struct in6_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_addr_lookup</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if this IPv6 address belongs to one of the interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to interface is returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface address, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="920" column="18" declfile="include/net/net_if.h" declline="920" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gab53eabb540a4487d83f27c8e319c736a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv6_addr_lookup_by_iface</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_addr_lookup_by_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if this IPv6 address belongs to this specific interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface address, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="931" column="18" declfile="include/net/net_if.h" declline="931" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga1527872e5285790d50028a183608ac02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_ipv6_addr_lookup_by_index</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_addr_lookup_by_index</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if this IPv6 address belongs to one of the interface indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;0 if address was found in given network interface index, all other values mean address was not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="942" column="6" declfile="include/net/net_if.h" declline="942" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gae00484a7fe32671a4ca04ff525e640c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv6_addr_add</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr, enum net_addr_type addr_type, uint32_t vlifetime)</argsstring>
        <name>net_if_ipv6_addr_add</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" kindref="member">net_addr_type</ref></type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>vlifetime</declname>
        </param>
        <briefdescription>
<para>Add a IPv6 address to an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_type</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vlifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Validity time for this address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface address, NULL if cannot be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="954" column="18" declfile="include/net/net_if.h" declline="954" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga980bffb649ed48775bdc6cb2a0caef15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv6_addr_add_by_index</definition>
        <argsstring>(int index, struct in6_addr *addr, enum net_addr_type addr_type, uint32_t vlifetime)</argsstring>
        <name>net_if_ipv6_addr_add_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" kindref="member">net_addr_type</ref></type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>vlifetime</declname>
        </param>
        <briefdescription>
<para>Add a IPv6 address to an interface by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_type</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vlifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Validity time for this address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if ok, false if address could not be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="969" column="7" declfile="include/net/net_if.h" declline="969" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaef8a6752a201f81636c4ffc1ebba4a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv6_addr_update_lifetime</definition>
        <argsstring>(struct net_if_addr *ifaddr, uint32_t vlifetime)</argsstring>
        <name>net_if_ipv6_addr_update_lifetime</name>
        <param>
          <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
          <declname>ifaddr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>vlifetime</declname>
        </param>
        <briefdescription>
<para>Update validity lifetime time of an IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifaddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Network IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vlifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Validity time for this address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="980" column="6" declfile="include/net/net_if.h" declline="980" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga614e1458fa28d26c26f447e9fbcc2cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv6_addr_rm</definition>
        <argsstring>(struct net_if *iface, const struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_addr_rm</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Remove an IPv6 address from an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="991" column="6" declfile="include/net/net_if.h" declline="991" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gac159e3b0fbf558d5fb09774141da7d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv6_addr_rm_by_index</definition>
        <argsstring>(int index, const struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_addr_rm_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Remove an IPv6 address from an interface by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1001" column="7" declfile="include/net/net_if.h" declline="1001" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga7ae82a491193dfea9b92cb9cbaf26f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
        <definition>struct net_if_mcast_addr * net_if_ipv6_maddr_add</definition>
        <argsstring>(struct net_if *iface, const struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_maddr_add</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Add a IPv6 multicast address to an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 multicast address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface multicast address, NULL if cannot be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1012" column="24" declfile="include/net/net_if.h" declline="1012" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaf0ce126bb5019ff5f5ff0876b9712ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv6_maddr_rm</definition>
        <argsstring>(struct net_if *iface, const struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_maddr_rm</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Remove an IPv6 multicast address from an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 multicast address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1023" column="6" declfile="include/net/net_if.h" declline="1023" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gadb4031153c4fef86110879befa6b9975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
        <definition>struct net_if_mcast_addr * net_if_ipv6_maddr_lookup</definition>
        <argsstring>(const struct in6_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_maddr_lookup</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if this IPv6 multicast address belongs to a specific interface or one of the interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>If *iface is null, then pointer to interface is returned, otherwise the *iface value needs to be matched.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface multicast address, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1035" column="24" declfile="include/net/net_if.h" declline="1035" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga8fdd0665ed76db6055777e395ca60255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_mcast_mon_register</definition>
        <argsstring>(struct net_if_mcast_monitor *mon, struct net_if *iface, net_if_mcast_callback_t cb)</argsstring>
        <name>net_if_mcast_mon_register</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__monitor" kindref="compound">net_if_mcast_monitor</ref> *</type>
          <declname>mon</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="group__net__if_1ga75f634841e145d2997e9b83b6a4b14af" kindref="member">net_if_mcast_callback_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register a multicast monitor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mon</parametername>
</parameternamelist>
<parameterdescription>
<para>Monitor handle. This is a pointer to a monitor storage structure which should be allocated by caller, but does not need to be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Monitor callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1080" column="6" declfile="include/net/net_if.h" declline="1080" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad323732fe3d178a5dfdf0900e5cb5683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_mcast_mon_unregister</definition>
        <argsstring>(struct net_if_mcast_monitor *mon)</argsstring>
        <name>net_if_mcast_mon_unregister</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__monitor" kindref="compound">net_if_mcast_monitor</ref> *</type>
          <declname>mon</declname>
        </param>
        <briefdescription>
<para>Unregister a multicast monitor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mon</parametername>
</parameternamelist>
<parameterdescription>
<para>Monitor handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1089" column="6" declfile="include/net/net_if.h" declline="1089" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga372ef131263269cd65586d87997df745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_mcast_monitor</definition>
        <argsstring>(struct net_if *iface, const struct net_addr *addr, bool is_joined)</argsstring>
        <name>net_if_mcast_monitor</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct net_addr *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>is_joined</declname>
        </param>
        <briefdescription>
<para>Call registered multicast monitors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Multicast address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_joined</parametername>
</parameternamelist>
<parameterdescription>
<para>Is this multicast address joined (true) or not (false) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1098" column="6" declfile="include/net/net_if.h" declline="1098" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga934abf4002ee07ef656f3baf8599faaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv6_maddr_join</definition>
        <argsstring>(struct net_if_mcast_addr *addr)</argsstring>
        <name>net_if_ipv6_maddr_join</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Mark a given multicast address to be joined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 multicast address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1106" column="6" declfile="include/net/net_if.h" declline="1106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gabe2c16a378a35a22d008bff9142e5449" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_ipv6_maddr_is_joined</definition>
        <argsstring>(struct net_if_mcast_addr *addr)</argsstring>
        <name>net_if_ipv6_maddr_is_joined</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if given multicast address is joined or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 multicast address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is joined, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1115" column="20" bodyfile="include/net/net_if.h" bodystart="1115" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad4dc2d0cfea89140b829dc742f91bdb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv6_maddr_leave</definition>
        <argsstring>(struct net_if_mcast_addr *addr)</argsstring>
        <name>net_if_ipv6_maddr_leave</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Mark a given multicast address to be left. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 multicast address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1127" column="6" declfile="include/net/net_if.h" declline="1127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga57ee087a53b59381ecb739a62e0e17d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__ipv6__prefix" kindref="compound">net_if_ipv6_prefix</ref> *</type>
        <definition>struct net_if_ipv6_prefix * net_if_ipv6_prefix_get</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_prefix_get</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Return prefix that corresponds to this IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to prefix, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1137" column="25" declfile="include/net/net_if.h" declline="1137" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaaf9af457b97c0d432b6f9f9fdd184834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__ipv6__prefix" kindref="compound">net_if_ipv6_prefix</ref> *</type>
        <definition>struct net_if_ipv6_prefix * net_if_ipv6_prefix_lookup</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr, uint8_t len)</argsstring>
        <name>net_if_ipv6_prefix_lookup</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Check if this IPv6 prefix belongs to this interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix length</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to prefix, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1149" column="25" declfile="include/net/net_if.h" declline="1149" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga2f0c98b16b090d9aea07941c64cbe035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__ipv6__prefix" kindref="compound">net_if_ipv6_prefix</ref> *</type>
        <definition>struct net_if_ipv6_prefix * net_if_ipv6_prefix_add</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *prefix, uint8_t len, uint32_t lifetime)</argsstring>
        <name>net_if_ipv6_prefix_add</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>lifetime</declname>
        </param>
        <briefdescription>
<para>Add a IPv6 prefix to an network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix lifetime in seconds</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to prefix, NULL if the prefix was not added. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1163" column="25" declfile="include/net/net_if.h" declline="1163" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga36f18c7a3ff1777006290170b726deed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv6_prefix_rm</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr, uint8_t len)</argsstring>
        <name>net_if_ipv6_prefix_rm</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Remove an IPv6 prefix from an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 prefix address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix length</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1177" column="6" declfile="include/net/net_if.h" declline="1177" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaa3c711e814fb6a4e552b4ef723d0baa0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_ipv6_prefix_set_lf</definition>
        <argsstring>(struct net_if_ipv6_prefix *prefix, bool is_infinite)</argsstring>
        <name>net_if_ipv6_prefix_set_lf</name>
        <param>
          <type>struct <ref refid="structnet__if__ipv6__prefix" kindref="compound">net_if_ipv6_prefix</ref> *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>is_infinite</declname>
        </param>
        <briefdescription>
<para>Set the infinite status of the prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_infinite</parametername>
</parameternamelist>
<parameterdescription>
<para>Infinite status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1186" column="20" bodyfile="include/net/net_if.h" bodystart="1186" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga68cffe343c518bad7f7f152e30f7f9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv6_prefix_set_timer</definition>
        <argsstring>(struct net_if_ipv6_prefix *prefix, uint32_t lifetime)</argsstring>
        <name>net_if_ipv6_prefix_set_timer</name>
        <param>
          <type>struct <ref refid="structnet__if__ipv6__prefix" kindref="compound">net_if_ipv6_prefix</ref> *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>lifetime</declname>
        </param>
        <briefdescription>
<para>Set the prefix lifetime timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix lifetime in seconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1198" column="6" declfile="include/net/net_if.h" declline="1198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga2d68cb6dcfcffd3f87bbfb3dfce791ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv6_prefix_unset_timer</definition>
        <argsstring>(struct net_if_ipv6_prefix *prefix)</argsstring>
        <name>net_if_ipv6_prefix_unset_timer</name>
        <param>
          <type>struct <ref refid="structnet__if__ipv6__prefix" kindref="compound">net_if_ipv6_prefix</ref> *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Unset the prefix lifetime timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1206" column="6" declfile="include/net/net_if.h" declline="1206" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga25d6e2253c1d361553d478f7c948a28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv6_addr_onlink</definition>
        <argsstring>(struct net_if **iface, struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_addr_onlink</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if this IPv6 address is part of the subnet of our network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface. This is returned to the caller. The iface can be NULL in which case we check all the interfaces. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is part of our subnet, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1218" column="6" declfile="include/net/net_if.h" declline="1218" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gadbf1538003473d448ff0808896b732a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
        <definition>static struct in6_addr * net_if_router_ipv6</definition>
        <argsstring>(struct net_if_router *router)</argsstring>
        <name>net_if_router_ipv6</name>
        <param>
          <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
          <declname>router</declname>
        </param>
        <briefdescription>
<para>Get the IPv6 address of the given router. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>router</parametername>
</parameternamelist>
<parameterdescription>
<para>a network router</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the IPv6 address, or NULL if none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1232" column="29" bodyfile="include/net/net_if.h" bodystart="1232" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gacece4ee588082259b3b5cfcd5ac1d552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
        <definition>struct net_if_router * net_if_ipv6_router_lookup</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_router_lookup</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if IPv6 address is one of the routers configured in the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to router information, NULL if cannot be found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1251" column="20" declfile="include/net/net_if.h" declline="1251" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga36dab2a8fd9120ebc9c8b18f1875ccfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
        <definition>struct net_if_router * net_if_ipv6_router_find_default</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_router_find_default</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Find default router for this IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface. This can be NULL in which case we go through all the network interfaces to find a suitable router. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to router information, NULL if cannot be found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1263" column="20" declfile="include/net/net_if.h" declline="1263" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaadba4957802dc376ef011590c91c6af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv6_router_update_lifetime</definition>
        <argsstring>(struct net_if_router *router, uint16_t lifetime)</argsstring>
        <name>net_if_ipv6_router_update_lifetime</name>
        <param>
          <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
          <declname>router</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>lifetime</declname>
        </param>
        <briefdescription>
<para>Update validity lifetime time of a router. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>router</parametername>
</parameternamelist>
<parameterdescription>
<para>Network IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Lifetime of this router. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1272" column="6" declfile="include/net/net_if.h" declline="1272" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga9c766ed70ada6eb551ac6542d7ac1ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
        <definition>struct net_if_router * net_if_ipv6_router_add</definition>
        <argsstring>(struct net_if *iface, struct in6_addr *addr, uint16_t router_lifetime)</argsstring>
        <name>net_if_ipv6_router_add</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>router_lifetime</declname>
        </param>
        <briefdescription>
<para>Add IPv6 router to the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>router_lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Lifetime of the router</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to router information, NULL if could not be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1284" column="20" declfile="include/net/net_if.h" declline="1284" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga1d108aa0b54c072e0aa9d0c049f02807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv6_router_rm</definition>
        <argsstring>(struct net_if_router *router)</argsstring>
        <name>net_if_ipv6_router_rm</name>
        <param>
          <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
          <declname>router</declname>
        </param>
        <briefdescription>
<para>Remove IPv6 router from the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>router</parametername>
</parameternamelist>
<parameterdescription>
<para>Router information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1295" column="6" declfile="include/net/net_if.h" declline="1295" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga54b200a4c4f09678298bf1b8f5da2ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t net_if_ipv6_get_hop_limit</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_ipv6_get_hop_limit</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get IPv6 hop limit specified for a given interface. This is the default value but can be overridden by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hop limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1305" column="9" declfile="include/net/net_if.h" declline="1305" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gac93d2fceb813fc8639c640d98a4ae84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_ipv6_set_hop_limit</definition>
        <argsstring>(struct net_if *iface, uint8_t hop_limit)</argsstring>
        <name>net_ipv6_set_hop_limit</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>hop_limit</declname>
        </param>
        <briefdescription>
<para>Set the default IPv6 hop limit of a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hop_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>New hop limit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1313" column="6" declfile="include/net/net_if.h" declline="1313" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gab3939d735b660f8f02124df656ceba2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_ipv6_set_base_reachable_time</definition>
        <argsstring>(struct net_if *iface, uint32_t reachable_time)</argsstring>
        <name>net_if_ipv6_set_base_reachable_time</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>reachable_time</declname>
        </param>
        <briefdescription>
<para>Set IPv6 reachable time for a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reachable_time</parametername>
</parameternamelist>
<parameterdescription>
<para>New reachable time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1321" column="20" bodyfile="include/net/net_if.h" bodystart="1321" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga9dd1f91edbb519a6a079f363c33efacf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_if_ipv6_get_reachable_time</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_ipv6_get_reachable_time</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get IPv6 reachable timeout specified for a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reachable timeout </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1340" column="24" bodyfile="include/net/net_if.h" bodystart="1340" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gab1861b5cefa73b4eefbb447cb1438cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_if_ipv6_calc_reachable_time</definition>
        <argsstring>(struct net_if_ipv6 *ipv6)</argsstring>
        <name>net_if_ipv6_calc_reachable_time</name>
        <param>
          <type>struct <ref refid="structnet__if__ipv6" kindref="compound">net_if_ipv6</ref> *</type>
          <declname>ipv6</declname>
        </param>
        <briefdescription>
<para>Calculate next reachable time value for IPv6 reachable time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipv6</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reachable time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1360" column="10" declfile="include/net/net_if.h" declline="1360" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga8328266b870fd200660cb2becaab3de4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_ipv6_set_reachable_time</definition>
        <argsstring>(struct net_if_ipv6 *ipv6)</argsstring>
        <name>net_if_ipv6_set_reachable_time</name>
        <param>
          <type>struct <ref refid="structnet__if__ipv6" kindref="compound">net_if_ipv6</ref> *</type>
          <declname>ipv6</declname>
        </param>
        <briefdescription>
<para>Set IPv6 reachable time for a given interface. This requires that base reachable time is set for the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipv6</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1368" column="20" bodyfile="include/net/net_if.h" bodystart="1368" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad74566e5a34f447d2ac63d2c0e82eeff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_if_ipv6_set_retrans_timer</definition>
        <argsstring>(struct net_if *iface, uint32_t retrans_timer)</argsstring>
        <name>net_if_ipv6_set_retrans_timer</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>retrans_timer</declname>
        </param>
        <briefdescription>
<para>Set IPv6 retransmit timer for a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retrans_timer</parametername>
</parameternamelist>
<parameterdescription>
<para>New retransmit timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1381" column="20" bodyfile="include/net/net_if.h" bodystart="1381" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaddbf5a6ba412e6bdb7e31568fe827bd0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_if_ipv6_get_retrans_timer</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_ipv6_get_retrans_timer</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get IPv6 retransmit timer specified for a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retransmit timer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1400" column="24" bodyfile="include/net/net_if.h" bodystart="1400" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga50689a1afdb37a7087bf47a12cc50438" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
        <definition>static const struct in6_addr * net_if_ipv6_select_src_addr</definition>
        <argsstring>(struct net_if *iface, const struct in6_addr *dst)</argsstring>
        <name>net_if_ipv6_select_src_addr</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Get a IPv6 source address that should be used when sending network data to destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface that was used when packet was received. If the interface is not known, then NULL can be given. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 destination address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv6 address to use, NULL if no IPv6 address could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1428" column="35" bodyfile="include/net/net_if.h" bodystart="1428" bodyend="1435"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gae1495ac9e743be54b8d90bd4ff4700ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>static struct net_if * net_if_ipv6_select_src_iface</definition>
        <argsstring>(const struct in6_addr *dst)</argsstring>
        <name>net_if_ipv6_select_src_iface</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Get a network interface that should be used when sending IPv6 network data to destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 destination address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to network interface to use, NULL if no suitable interface could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1450" column="27" bodyfile="include/net/net_if.h" bodystart="1450" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad6f3e1e349e281887352652f6f32274e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
        <definition>struct in6_addr * net_if_ipv6_get_ll</definition>
        <argsstring>(struct net_if *iface, enum net_addr_state addr_state)</argsstring>
        <name>net_if_ipv6_get_ll</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" kindref="member">net_addr_state</ref></type>
          <declname>addr_state</declname>
        </param>
        <briefdescription>
<para>Get a IPv6 link local address in a given state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. Must be a valid pointer to an interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_state</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address state (preferred, tentative, deprecated)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to link local IPv6 address, NULL if no proper IPv6 address could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1468" column="15" declfile="include/net/net_if.h" declline="1468" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga85b7a923d46d36ecd63f9930bd8970c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
        <definition>struct in6_addr * net_if_ipv6_get_ll_addr</definition>
        <argsstring>(enum net_addr_state state, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_get_ll_addr</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" kindref="member">net_addr_state</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return link local IPv6 address from the first interface that has a link local address matching give state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address state (ANY, TENTATIVE, PREFERRED, DEPRECATED) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to interface is returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv6 address, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1480" column="15" declfile="include/net/net_if.h" declline="1480" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga1dd53d92f803cff3be4826ddfb6b7211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv6_dad_failed</definition>
        <argsstring>(struct net_if *iface, const struct in6_addr *addr)</argsstring>
        <name>net_if_ipv6_dad_failed</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Stop IPv6 Duplicate Address Detection (DAD) procedure if we find out that our IPv6 address is already in use. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface where the DAD was running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address that failed DAD </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1490" column="6" declfile="include/net/net_if.h" declline="1490" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaca7d686c772deac13a027cc046333126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
        <definition>struct in6_addr * net_if_ipv6_get_global_addr</definition>
        <argsstring>(enum net_addr_state state, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_get_global_addr</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" kindref="member">net_addr_state</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return global IPv6 address from the first interface that has a global IPv6 address matching the given state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address state (ANY, TENTATIVE, PREFERRED, DEPRECATED) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller can give an interface to check. If iface is set to NULL, then all the interfaces are checked. Pointer to interface where the IPv6 address is defined is returned to the caller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv6 address, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1503" column="15" declfile="include/net/net_if.h" declline="1503" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga3390e248249b28f2c80e2ca0bc79d236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_config_ipv4_get</definition>
        <argsstring>(struct net_if *iface, struct net_if_ipv4 **ipv4)</argsstring>
        <name>net_if_config_ipv4_get</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if__ipv4" kindref="compound">net_if_ipv4</ref> **</type>
          <declname>ipv4</declname>
        </param>
        <briefdescription>
<para>Allocate network interface IPv4 config. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will allocate new IPv4 config.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipv4</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocated IPv4 struct is returned to caller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1516" column="5" declfile="include/net/net_if.h" declline="1516" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga88c13a45617480a665c7f9f589ec8e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_config_ipv4_put</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_config_ipv4_put</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Release network interface IPv4 config. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1526" column="5" declfile="include/net/net_if.h" declline="1526" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga7e1fd28dbcf1164d056296b4df782e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t net_if_ipv4_get_ttl</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_ipv4_get_ttl</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get IPv4 time-to-live value specified for a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time-to-live </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1535" column="9" declfile="include/net/net_if.h" declline="1535" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga5544374d7ebea26a239d561083f0203d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv4_set_ttl</definition>
        <argsstring>(struct net_if *iface, uint8_t ttl)</argsstring>
        <name>net_if_ipv4_set_ttl</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ttl</declname>
        </param>
        <briefdescription>
<para>Set IPv4 time-to-live value specified to a given interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttl</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-to-live value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1543" column="6" declfile="include/net/net_if.h" declline="1543" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga04a8f21d173d51bdcc092b92ed949e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv4_addr_lookup</definition>
        <argsstring>(const struct in_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv4_addr_lookup</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if this IPv4 address belongs to one of the interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface is returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface address, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1553" column="18" declfile="include/net/net_if.h" declline="1553" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga7190958f740cac56de3a13fe688b3b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv4_addr_add</definition>
        <argsstring>(struct net_if *iface, struct in_addr *addr, enum net_addr_type addr_type, uint32_t vlifetime)</argsstring>
        <name>net_if_ipv4_addr_add</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" kindref="member">net_addr_type</ref></type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>vlifetime</declname>
        </param>
        <briefdescription>
<para>Add a IPv4 address to an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_type</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vlifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Validity time for this address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface address, NULL if cannot be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1566" column="18" declfile="include/net/net_if.h" declline="1566" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga4433304d46b6559604486b828e7d9dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_addr_rm</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_addr_rm</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Remove a IPv4 address from an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1579" column="6" declfile="include/net/net_if.h" declline="1579" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga0a22661727316517685afcd551e7b38e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_ipv4_addr_lookup_by_index</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_addr_lookup_by_index</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if this IPv4 address belongs to one of the interface indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;0 if address was found in given network interface index, all other values mean address was not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1589" column="6" declfile="include/net/net_if.h" declline="1589" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad140a69cf510ad99a8a8c770bab95bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_addr_add_by_index</definition>
        <argsstring>(int index, struct in_addr *addr, enum net_addr_type addr_type, uint32_t vlifetime)</argsstring>
        <name>net_if_ipv4_addr_add_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" kindref="member">net_addr_type</ref></type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>vlifetime</declname>
        </param>
        <briefdescription>
<para>Add a IPv4 address to an interface by network interface index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_type</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vlifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Validity time for this address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if ok, false if the address could not be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1601" column="7" declfile="include/net/net_if.h" declline="1601" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gac5bf15f948ab195cecce98d1b40bda37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_addr_rm_by_index</definition>
        <argsstring>(int index, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_addr_rm_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Remove a IPv4 address from an interface by interface index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1614" column="7" declfile="include/net/net_if.h" declline="1614" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaa43fa83711703f8737e50b639e11b16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
        <definition>struct net_if_mcast_addr * net_if_ipv4_maddr_add</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_maddr_add</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Add a IPv4 multicast address to an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 multicast address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface multicast address, NULL if cannot be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1625" column="24" declfile="include/net/net_if.h" declline="1625" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga1d9273e10ab089d0f02b2b17d10a9e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_maddr_rm</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_maddr_rm</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Remove an IPv4 multicast address from an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 multicast address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1636" column="6" declfile="include/net/net_if.h" declline="1636" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gadc1514a0d6852de9dbce043bc99d4eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
        <definition>struct net_if_mcast_addr * net_if_ipv4_maddr_lookup</definition>
        <argsstring>(const struct in_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv4_maddr_lookup</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if this IPv4 multicast address belongs to a specific interface or one of the interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>If *iface is null, then pointer to interface is returned, otherwise the *iface value needs to be matched.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface multicast address, NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1648" column="24" declfile="include/net/net_if.h" declline="1648" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaf63bfb263382a589deb563fc9a43dafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv4_maddr_join</definition>
        <argsstring>(struct net_if_mcast_addr *addr)</argsstring>
        <name>net_if_ipv4_maddr_join</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Mark a given multicast address to be joined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 multicast address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1656" column="6" declfile="include/net/net_if.h" declline="1656" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaa30769fc8016f1a7496b3ede277d8d8a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_ipv4_maddr_is_joined</definition>
        <argsstring>(struct net_if_mcast_addr *addr)</argsstring>
        <name>net_if_ipv4_maddr_is_joined</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if given multicast address is joined or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 multicast address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is joined, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1665" column="20" bodyfile="include/net/net_if.h" bodystart="1665" bodyend="1670"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga2df022f0999c01c7e183b781dc517c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv4_maddr_leave</definition>
        <argsstring>(struct net_if_mcast_addr *addr)</argsstring>
        <name>net_if_ipv4_maddr_leave</name>
        <param>
          <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Mark a given multicast address to be left. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 multicast address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1677" column="6" declfile="include/net/net_if.h" declline="1677" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga2a48e13941c91ddb9bbc63d014729be1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>static struct in_addr * net_if_router_ipv4</definition>
        <argsstring>(struct net_if_router *router)</argsstring>
        <name>net_if_router_ipv4</name>
        <param>
          <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
          <declname>router</declname>
        </param>
        <briefdescription>
<para>Get the IPv4 address of the given router. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>router</parametername>
</parameternamelist>
<parameterdescription>
<para>a network router</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the IPv4 address, or NULL if none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1691" column="28" bodyfile="include/net/net_if.h" bodystart="1691" bodyend="1698"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga01f995b00248ad5da734e4d58a4353aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
        <definition>struct net_if_router * net_if_ipv4_router_lookup</definition>
        <argsstring>(struct net_if *iface, struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_router_lookup</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if IPv4 address is one of the routers configured in the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to router information, NULL if cannot be found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1710" column="20" declfile="include/net/net_if.h" declline="1710" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga25672516d7f383807e7dd9ce5f46a94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
        <definition>struct net_if_router * net_if_ipv4_router_find_default</definition>
        <argsstring>(struct net_if *iface, struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_router_find_default</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Find default router for this IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface. This can be NULL in which case we go through all the network interfaces to find a suitable router. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to router information, NULL if cannot be found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1722" column="20" declfile="include/net/net_if.h" declline="1722" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga44984001411077c7a2ef68afb361b40f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
        <definition>struct net_if_router * net_if_ipv4_router_add</definition>
        <argsstring>(struct net_if *iface, struct in_addr *addr, bool is_default, uint16_t router_lifetime)</argsstring>
        <name>net_if_ipv4_router_add</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>is_default</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>router_lifetime</declname>
        </param>
        <briefdescription>
<para>Add IPv4 router to the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_default</parametername>
</parameternamelist>
<parameterdescription>
<para>Is this router the default one </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>router_lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>Lifetime of the router</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to router information, NULL if could not be added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1734" column="20" declfile="include/net/net_if.h" declline="1734" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga6be14f5307bc63ce87ff0a3fad7c7f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_router_rm</definition>
        <argsstring>(struct net_if_router *router)</argsstring>
        <name>net_if_ipv4_router_rm</name>
        <param>
          <type>struct <ref refid="structnet__if__router" kindref="compound">net_if_router</ref> *</type>
          <declname>router</declname>
        </param>
        <briefdescription>
<para>Remove IPv4 router from the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>router</parametername>
</parameternamelist>
<parameterdescription>
<para>Router information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successfully removed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1746" column="6" declfile="include/net/net_if.h" declline="1746" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga558b31e556a1a4b8d1e68a78f3f755ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_addr_mask_cmp</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_addr_mask_cmp</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv4 address belongs to local subnet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. Must be a valid pointer to an interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is part of local subnet, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1756" column="6" declfile="include/net/net_if.h" declline="1756" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga8f93179138c1942bc1a099102a4314cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_is_addr_bcast</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_is_addr_bcast</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv4 address is a broadcast address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. Must be a valid pointer to an interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address, this should be in network byte order</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is a broadcast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1767" column="6" declfile="include/net/net_if.h" declline="1767" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gafea1a35f452ad8168855852cbfdf0024" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>static struct net_if * net_if_ipv4_select_src_iface</definition>
        <argsstring>(const struct in_addr *dst)</argsstring>
        <name>net_if_ipv4_select_src_iface</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Get a network interface that should be used when sending IPv4 network data to destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 destination address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to network interface to use, NULL if no suitable interface could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1782" column="27" bodyfile="include/net/net_if.h" bodystart="1782" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad6ec091f61ba3055be60c77ce085522f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>static const struct in_addr * net_if_ipv4_select_src_addr</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *dst)</argsstring>
        <name>net_if_ipv4_select_src_addr</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Get a IPv4 source address that should be used when sending network data to destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use when sending the packet. If the interface is not known, then NULL can be given. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 destination address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv4 address to use, NULL if no IPv4 address could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1806" column="34" bodyfile="include/net/net_if.h" bodystart="1806" bodyend="1813"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad2ffe8df3d5ccca5094daecf3b9a8508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>struct in_addr * net_if_ipv4_get_ll</definition>
        <argsstring>(struct net_if *iface, enum net_addr_state addr_state)</argsstring>
        <name>net_if_ipv4_get_ll</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" kindref="member">net_addr_state</ref></type>
          <declname>addr_state</declname>
        </param>
        <briefdescription>
<para>Get a IPv4 link local address in a given state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. Must be a valid pointer to an interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_state</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address state (preferred, tentative, deprecated)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to link local IPv4 address, NULL if no proper IPv4 address could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1825" column="14" declfile="include/net/net_if.h" declline="1825" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad791780f25d19acfe49d5272eae2d019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>struct in_addr * net_if_ipv4_get_global_addr</definition>
        <argsstring>(struct net_if *iface, enum net_addr_state addr_state)</argsstring>
        <name>net_if_ipv4_get_global_addr</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" kindref="member">net_addr_state</ref></type>
          <declname>addr_state</declname>
        </param>
        <briefdescription>
<para>Get a IPv4 global address in a given state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. Must be a valid pointer to an interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_state</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address state (preferred, tentative, deprecated)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to link local IPv4 address, NULL if no proper IPv4 address could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1837" column="14" declfile="include/net/net_if.h" declline="1837" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gad599bd11663fefa7d785b9fc5d52caf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv4_set_netmask</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *netmask)</argsstring>
        <name>net_if_ipv4_set_netmask</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>netmask</declname>
        </param>
        <briefdescription>
<para>Set IPv4 netmask for an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>netmask</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 netmask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1846" column="6" declfile="include/net/net_if.h" declline="1846" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga94f2d2e69548609dd329c7e6b21e8958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_set_netmask_by_index</definition>
        <argsstring>(int index, const struct in_addr *netmask)</argsstring>
        <name>net_if_ipv4_set_netmask_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>netmask</declname>
        </param>
        <briefdescription>
<para>Set IPv4 netmask for an interface index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>netmask</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 netmask</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if netmask was added, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1857" column="7" declfile="include/net/net_if.h" declline="1857" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga310ccbd9b37629422ca8e32836362724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_ipv4_set_gw</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *gw)</argsstring>
        <name>net_if_ipv4_set_gw</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>gw</declname>
        </param>
        <briefdescription>
<para>Set IPv4 gateway for an interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gw</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address of an gateway </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1866" column="6" declfile="include/net/net_if.h" declline="1866" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gadef49124c331817165475c69fb9104e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_set_gw_by_index</definition>
        <argsstring>(int index, const struct in_addr *gw)</argsstring>
        <name>net_if_ipv4_set_gw_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>gw</declname>
        </param>
        <briefdescription>
<para>Set IPv4 gateway for an interface index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gw</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address of an gateway</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if gateway was added, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1876" column="7" declfile="include/net/net_if.h" declline="1876" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga001b1cdde5febcf3970848c7c185c81c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_if_select_src_iface</definition>
        <argsstring>(const struct sockaddr *dst)</argsstring>
        <name>net_if_select_src_iface</name>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Get a network interface that should be used when sending IPv6 or IPv4 network data to destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 or IPv4 destination address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to network interface to use. Note that the function will return the default network interface if the best network interface is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1888" column="13" declfile="include/net/net_if.h" declline="1888" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaa81b7d9ed8dc05da3391265dbc89b665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_register_link_cb</definition>
        <argsstring>(struct net_if_link_cb *link, net_if_link_callback_t cb)</argsstring>
        <name>net_if_register_link_cb</name>
        <param>
          <type>struct <ref refid="structnet__if__link__cb" kindref="compound">net_if_link_cb</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type><ref refid="group__net__if_1ga397d65b7b9aef56e3bdee80a92681178" kindref="member">net_if_link_callback_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register a link callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller specified handler for the callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1924" column="6" declfile="include/net/net_if.h" declline="1924" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga6ba64fac6e8d846ae7be5990f49a8293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_unregister_link_cb</definition>
        <argsstring>(struct net_if_link_cb *link)</argsstring>
        <name>net_if_unregister_link_cb</name>
        <param>
          <type>struct <ref refid="structnet__if__link__cb" kindref="compound">net_if_link_cb</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Unregister a link callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller specified handler for the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1932" column="6" declfile="include/net/net_if.h" declline="1932" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gaaa64aa4391a85760bb2daf600ac4d898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_call_link_cb</definition>
        <argsstring>(struct net_if *iface, struct net_linkaddr *lladdr, int status)</argsstring>
        <name>net_if_call_link_cb</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref> *</type>
          <declname>lladdr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Call a link callback function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lladdr</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination link layer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>0 is ok, &lt; 0 error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1941" column="6" declfile="include/net/net_if.h" declline="1941" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga7743d516edec5b80215553699712a98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_need_calc_rx_checksum</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_need_calc_rx_checksum</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if received network packet checksum calculation can be avoided or not. For example many ethernet devices support network packet offloading in which case the IP stack does not need to calculate the checksum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if checksum needs to be calculated, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1953" column="6" declfile="include/net/net_if.h" declline="1953" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga230228c3249838b8b847ecc1b4ee11aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_need_calc_tx_checksum</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_need_calc_tx_checksum</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if network packet checksum calculation can be avoided or not when sending the packet. For example many ethernet devices support network packet offloading in which case the IP stack does not need to calculate the checksum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if checksum needs to be calculated, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1965" column="6" declfile="include/net/net_if.h" declline="1965" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga72708cdb7f133fe5d7edf819756c3516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_if_get_by_index</definition>
        <argsstring>(int index)</argsstring>
        <name>net_if_get_by_index</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get interface according to index. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a syscall only to provide access to the object for purposes of assigning permissions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to interface or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1977" column="14" declfile="include/net/net_if.h" declline="1977" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga02445f6c61f0d29f56ac0ef59e025630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_get_by_iface</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_get_by_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Get interface index according to pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="1986" column="5" declfile="include/net/net_if.h" declline="1986" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga96b198fd9df4a985b0dde84dd7152815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_foreach</definition>
        <argsstring>(net_if_cb_t cb, void *user_data)</argsstring>
        <name>net_if_foreach</name>
        <param>
          <type><ref refid="group__net__if_1gaec4ea72fa3f7e23904899697e1aad6ff" kindref="member">net_if_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Go through all the network interfaces and call callback for each interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>User-supplied callback function to call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User specified data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2004" column="6" declfile="include/net/net_if.h" declline="2004" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga02644cc623fc7a8878c17d54984e4210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_up</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_up</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Bring interface up. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2013" column="5" declfile="include/net/net_if.h" declline="2013" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga7e9b368d4abf9da5656140df70cfa334" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_is_up</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_is_up</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if interface is up. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if interface is up, False if it is down. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2022" column="20" bodyfile="include/net/net_if.h" bodystart="2022" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga2187650062d6139b9f4b81745a206803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_down</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_down</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Bring interface down. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2036" column="5" declfile="include/net/net_if.h" declline="2036" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gab70c3cc13eb615b96712a73f9d8ea0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_if_set_promisc</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_set_promisc</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Set network interface into promiscuous mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that not all network technologies will support this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2120" column="5" declfile="include/net/net_if.h" declline="2120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga22d60d7b674490e4131cce3d7431bc85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_if_unset_promisc</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_unset_promisc</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Set network interface into normal mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2127" column="6" declfile="include/net/net_if.h" declline="2127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1gabf217c79a27bd63b57bba1dfe4781168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_is_promisc</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_is_promisc</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if promiscuous mode is set or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if interface is in promisc mode, False if interface is not in in promiscuous mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2137" column="6" declfile="include/net/net_if.h" declline="2137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__if_1ga3cddda628eca248246f9aa3b81938f95" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_if_are_pending_tx_packets</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_if_are_pending_tx_packets</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Check if there are any pending TX network data for a given network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if there are pending TX network packets for this network interface, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2148" column="20" bodyfile="include/net/net_if.h" bodystart="2148" bodyend="2157"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__net__if_1gafbbc526114fa94c5249642044e2ed483" prot="public" static="no">
        <name>NET_DEVICE_INIT</name>
        <param><defname>dev_name</defname></param>
        <param><defname>drv_name</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>l2</defname></param>
        <param><defname>l2_ctx_type</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_DEVICE_INIT(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name, drv_name, init_fn,	\
			pm_action_cb, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio, api, l2,	\
			l2_ctx_type, mtu)</initializer>
        <briefdescription>
<para>Create a network interface and bind it to network device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Network device name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name this instance of the driver exposes to the system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2</parametername>
</parameternamelist>
<parameterdescription>
<para>Network L2 layer for this network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2_ctx_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of L2 context data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2284" column="9" bodyfile="include/net/net_if.h" bodystart="2282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1ga185773bd14b276342f8744413ce31aae" prot="public" static="no">
        <name>NET_DEVICE_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>l2</defname></param>
        <param><defname>l2_ctx_type</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_DEVICE_INIT(node_id, Z_DEVICE_DT_DEV_NAME(node_id),	\
			  <ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, label, &quot;&quot;), init_fn,	\
			  pm_action_cb, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio, api, l2,	\
			  l2_ctx_type, mtu)</initializer>
        <briefdescription>
<para>Like NET_DEVICE_INIT but taking metadata from a devicetree node. Create a network interface and bind it to network device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2</parametername>
</parameternamelist>
<parameterdescription>
<para>Network L2 layer for this network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2_ctx_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of L2 context data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2310" column="9" bodyfile="include/net/net_if.h" bodystart="2309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1ga7edd8bc59444d92cad0371c36f9949b7" prot="public" static="no">
        <name>NET_DEVICE_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__net__if_1ga185773bd14b276342f8744413ce31aae" kindref="member">NET_DEVICE_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like NET_DEVICE_DT_DEFINE for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number. This is replaced by <computeroutput><ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT(inst)</ref></computeroutput> in the call to NET_DEVICE_DT_DEFINE.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>other parameters as expected by NET_DEVICE_DT_DEFINE. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2326" column="9" bodyfile="include/net/net_if.h" bodystart="2326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1gacbdc99d2d09e05d03e8da15af5056b42" prot="public" static="no">
        <name>NET_DEVICE_INIT_INSTANCE</name>
        <param><defname>dev_name</defname></param>
        <param><defname>drv_name</defname></param>
        <param><defname>instance</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>l2</defname></param>
        <param><defname>l2_ctx_type</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_DEVICE_INIT_INSTANCE(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name, drv_name,	\
				   instance, init_fn, pm_action_cb,	\
				   <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio, api, l2,		\
				   l2_ctx_type, mtu)</initializer>
        <briefdescription>
<para>Create multiple network interfaces and bind them to network device. If your network device needs more than one instance of a network interface, use this macro below and provide a different instance suffix each time (0, 1, 2, ... or a, b, c ... whatever works for you) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Network device name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name this instance of the driver exposes to the system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2</parametername>
</parameternamelist>
<parameterdescription>
<para>Network L2 layer for this network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2_ctx_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of L2 context data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2367" column="9" bodyfile="include/net/net_if.h" bodystart="2365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1ga4b38f1d85edc12d34e3f0dce5335fabb" prot="public" static="no">
        <name>NET_DEVICE_DT_DEFINE_INSTANCE</name>
        <param><defname>node_id</defname></param>
        <param><defname>instance</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>l2</defname></param>
        <param><defname>l2_ctx_type</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_DEVICE_INIT_INSTANCE(node_id,				\
				   Z_DEVICE_DT_DEV_NAME(node_id),	\
				   <ref refid="group__devicetree-generic-prop_1ga89070ef089930290ce31788b5b3b84e5" kindref="member">DT_LABEL</ref>(node_id), instance,		\
				   pm_action_cb, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio, api,	\
				   l2, l2_ctx_type, mtu)</initializer>
        <briefdescription>
<para>Like NET_DEVICE_OFFLOAD_INIT but taking metadata from a devicetree. Create multiple network interfaces and bind them to network device. If your network device needs more than one instance of a network interface, use this macro below and provide a different instance suffix each time (0, 1, 2, ... or a, b, c ... whatever works for you) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2</parametername>
</parameternamelist>
<parameterdescription>
<para>Network L2 layer for this network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l2_ctx_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of L2 context data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2399" column="9" bodyfile="include/net/net_if.h" bodystart="2397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1gabe4b8589996a53cbc50b76c8ea15aa0c" prot="public" static="no">
        <name>NET_DEVICE_DT_INST_DEFINE_INSTANCE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__net__if_1ga4b38f1d85edc12d34e3f0dce5335fabb" kindref="member">NET_DEVICE_DT_DEFINE_INSTANCE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like NET_DEVICE_DT_DEFINE_INSTANCE for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number. This is replaced by <computeroutput><ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT(inst)</ref></computeroutput> in the call to NET_DEVICE_DT_DEFINE_INSTANCE.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>other parameters as expected by NET_DEVICE_DT_DEFINE_INSTANCE. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2417" column="9" bodyfile="include/net/net_if.h" bodystart="2417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1ga15670dc82728ea116cd5436c83c18611" prot="public" static="no">
        <name>NET_DEVICE_OFFLOAD_INIT</name>
        <param><defname>dev_name</defname></param>
        <param><defname>drv_name</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_DEVICE_OFFLOAD_INIT(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name, drv_name,	\
				init_fn, pm_action_cb, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio,\
				api, mtu)</initializer>
        <briefdescription>
<para>Create a offloaded network interface and bind it to network device. The offloaded network interface is implemented by a device vendor HAL or similar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Network device name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name this instance of the driver exposes to the system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2451" column="9" bodyfile="include/net/net_if.h" bodystart="2450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1ga64bcc15bbd3ad5c94c428899e681c47b" prot="public" static="no">
        <name>NET_DEVICE_DT_OFFLOAD_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_DEVICE_OFFLOAD_INIT(node_id, Z_DEVICE_DT_DEV_NAME(node_id), \
				  <ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, label, NULL),	\
				  init_fn, pm_action_cb, <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg,	\
				  prio, api, mtu)</initializer>
        <briefdescription>
<para>Like NET_DEVICE_OFFLOAD_INIT but taking metadata from a devicetree node. Create a offloaded network interface and bind it to network device. The offloaded network interface is implemented by a device vendor HAL or similar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2477" column="9" bodyfile="include/net/net_if.h" bodystart="2476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__if_1ga1cab6943a28e3d3754e36623834b93fd" prot="public" static="no">
        <name>NET_DEVICE_DT_INST_OFFLOAD_DEFINE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__net__if_1ga64bcc15bbd3ad5c94c428899e681c47b" kindref="member">NET_DEVICE_DT_OFFLOAD_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like NET_DEVICE_DT_OFFLOAD_DEFINE for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number. This is replaced by <computeroutput><ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT(inst)</ref></computeroutput> in the call to NET_DEVICE_DT_OFFLOAD_DEFINE.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>other parameters as expected by NET_DEVICE_DT_OFFLOAD_DEFINE. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_if.h" line="2494" column="9" bodyfile="include/net/net_if.h" bodystart="2494" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Network Interface abstraction layer. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
