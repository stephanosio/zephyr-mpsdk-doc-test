<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mbox__interface" kind="group">
    <compoundname>mbox_interface</compoundname>
    <title>MBOX Interface</title>
    <innerclass refid="structmbox__msg" prot="public">mbox_msg</innerclass>
    <innerclass refid="structmbox__channel" prot="public">mbox_channel</innerclass>
    <innerclass refid="structmbox__driver__api" prot="public">mbox_driver_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__mbox__interface_1ga4cb393b04d8c3ee01f795bc98ddde2ae" prot="public" static="no">
        <type>void(*</type>
        <definition>mbox_callback_t</definition>
        <argsstring>)(const struct device *dev, uint32_t channel, void *user_data, struct mbox_msg *data)</argsstring>
        <name>mbox_callback_t</name>
        <briefdescription>
<para>Callback API for incoming MBOX messages. </para>
        </briefdescription>
        <detaileddescription>
<para>These callbacks execute in interrupt context. Therefore, use only interrupt-safe APIS. Registration of callbacks is done via <emphasis><ref refid="group__mbox__interface_1gad48e48c984e70348336a896bb2835c77" kindref="member">mbox_register_callback()</ref></emphasis> </para>
<para>The data parameter must be NULL in signalling mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to some private data provided at registration time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Message struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="214" column="9" bodyfile="include/drivers/mbox.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mbox__interface_1ga1a79bcdd1ed7612de9fbc72c5af35e3e" prot="public" static="no">
        <type>int(*</type>
        <definition>mbox_send_t</definition>
        <argsstring>)(const struct device *dev, uint32_t channel, const struct mbox_msg *msg)</argsstring>
        <name>mbox_send_t</name>
        <briefdescription>
<para>Callback API to send MBOX messages. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__mbox__interface_1ga18828e5c28201ad838ed9ba7c0afabfe" kindref="member">mbox_send()</ref></emphasis> for function description</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See return values for <emphasis><ref refid="group__mbox__interface_1ga18828e5c28201ad838ed9ba7c0afabfe" kindref="member">mbox_send()</ref></emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="230" column="9" bodyfile="include/drivers/mbox.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mbox__interface_1ga6c5390b649b1a510672c8c109f0f363c" prot="public" static="no">
        <type>int(*</type>
        <definition>mbox_mtu_get_t</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>mbox_mtu_get_t</name>
        <briefdescription>
<para>Callback API to get maximum data size. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__mbox__interface_1ga82d9def1b5c31c574d2114abcce2eb1f" kindref="member">mbox_mtu_get()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="240" column="9" bodyfile="include/drivers/mbox.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mbox__interface_1ga14a2af82968f9185f13d39bd709abcbb" prot="public" static="no">
        <type>int(*</type>
        <definition>mbox_register_callback_t</definition>
        <argsstring>)(const struct device *dev, uint32_t channel, mbox_callback_t cb, void *user_data)</argsstring>
        <name>mbox_register_callback_t</name>
        <briefdescription>
<para>Callback API upon registration. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__mbox__interface_1gad48e48c984e70348336a896bb2835c77" kindref="member">mbox_register_callback()</ref></emphasis> for function description</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to execute on incoming message interrupts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application-specific data pointer which will be passed to the callback function when executed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See return values for <emphasis><ref refid="group__mbox__interface_1gad48e48c984e70348336a896bb2835c77" kindref="member">mbox_register_callback()</ref></emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="257" column="9" bodyfile="include/drivers/mbox.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mbox__interface_1ga85d77860581e68d036cccaf17981b1c9" prot="public" static="no">
        <type>int(*</type>
        <definition>mbox_set_enabled_t</definition>
        <argsstring>)(const struct device *dev, uint32_t channel, bool enable)</argsstring>
        <name>mbox_set_enabled_t</name>
        <briefdescription>
<para>Callback API upon enablement of interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__mbox__interface_1ga563c6c0e2199b0608b2cd0606c46fc81" kindref="member">mbox_set_enabled()</ref></emphasis> for function description</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to 0 to disable and to nonzero to enable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See return values for <emphasis><ref refid="group__mbox__interface_1ga563c6c0e2199b0608b2cd0606c46fc81" kindref="member">mbox_set_enabled()</ref></emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="275" column="9" bodyfile="include/drivers/mbox.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__mbox__interface_1gaa2ba0939cd872198dd8ff4fd348f195f" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>(*</type>
        <definition>mbox_max_channels_get_t</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>mbox_max_channels_get_t</name>
        <briefdescription>
<para>Callback API to get maximum number of channels. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__mbox__interface_1gaf2f8adbd5e4f7f5972b2d34cfce68bdb" kindref="member">mbox_max_channels_get()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="284" column="9" bodyfile="include/drivers/mbox.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mbox__interface_1ga70253c432c8064a2760731f1d237f2b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbox_init_channel</definition>
        <argsstring>(struct mbox_channel *channel, const struct device *dev, uint32_t ch_id)</argsstring>
        <name>mbox_init_channel</name>
        <param>
          <type>struct <ref refid="structmbox__channel" kindref="compound">mbox_channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>ch_id</declname>
        </param>
        <briefdescription>
<para>Initialize a channel struct. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize an <computeroutput><ref refid="structmbox__channel" kindref="compound">mbox_channel</ref></computeroutput> passed by the user with a provided MBOX device and channel ID. This function is needed when the information about the device and the channel ID is not in the DT. In the DT case <ref refid="group__mbox__interface_1ga9e02e3a523a63ff564ce2bb42c03aa1f" kindref="member">MBOX_DT_CHANNEL_GET()</ref> must be used instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the channel struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="306" column="20" bodyfile="include/drivers/mbox.h" bodystart="306" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="group__mbox__interface_1ga18828e5c28201ad838ed9ba7c0afabfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbox_send</definition>
        <argsstring>(const struct mbox_channel *channel, const struct mbox_msg *msg)</argsstring>
        <name>mbox_send</name>
        <param>
          <type>const struct <ref refid="structmbox__channel" kindref="compound">mbox_channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmbox__msg" kindref="compound">mbox_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Try to send a message over the MBOX device. </para>
        </briefdescription>
        <detaileddescription>
<para>Send a message over an <computeroutput><ref refid="structmbox__channel" kindref="compound">mbox_channel</ref></computeroutput>. The msg parameter must be NULL when the driver is used for signalling.</para>
<para>If the msg parameter is not NULL, this data is expected to be delivered on the receiving side using the data parameter of the receiving callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel instance pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the message struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If the remote hasn&apos;t yet read the last data sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EMSGSIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the supplied data size is unsupported by the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If there was a bad parameter, such as: too-large channel descriptor or the device isn&apos;t an outbound MBOX channel.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, negative value on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="332" column="6" declfile="include/drivers/mbox.h" declline="332" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mbox__interface_1gad48e48c984e70348336a896bb2835c77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbox_register_callback</definition>
        <argsstring>(const struct mbox_channel *channel, mbox_callback_t cb, void *user_data)</argsstring>
        <name>mbox_register_callback</name>
        <param>
          <type>const struct <ref refid="structmbox__channel" kindref="compound">mbox_channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__mbox__interface_1ga4cb393b04d8c3ee01f795bc98ddde2ae" kindref="member">mbox_callback_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Register a callback function on a channel for incoming messages. </para>
        </briefdescription>
        <detaileddescription>
<para>This function doesn&apos;t assume anything concerning the status of the interrupts. Use <emphasis><ref refid="group__mbox__interface_1ga563c6c0e2199b0608b2cd0606c46fc81" kindref="member">mbox_set_enabled()</ref></emphasis> to enable or to disable the interrupts if needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel instance pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to execute on incoming message interrupts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application-specific data pointer which will be passed to the callback function when executed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, negative value on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="360" column="19" bodyfile="include/drivers/mbox.h" bodystart="360" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="group__mbox__interface_1ga82d9def1b5c31c574d2114abcce2eb1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbox_mtu_get</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>mbox_mtu_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Return the maximum number of bytes possible in an outbound message. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the actual number of bytes that it is possible to send through an outgoing channel.</para>
<para>This number can be 0 when the driver only supports signalling or when on the receiving side the content and size of the message must be retrieved in an indirect way (i.e. probing some other peripheral, reading memory regions, etc...).</para>
<para>If this function returns 0, the msg parameter in <emphasis><ref refid="group__mbox__interface_1ga18828e5c28201ad838ed9ba7c0afabfe" kindref="member">mbox_send()</ref></emphasis> is expected to be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum possible size of a message in bytes, 0 for signalling, negative value on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="393" column="6" declfile="include/drivers/mbox.h" declline="393" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mbox__interface_1ga563c6c0e2199b0608b2cd0606c46fc81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbox_set_enabled</definition>
        <argsstring>(const struct mbox_channel *channel, bool enable)</argsstring>
        <name>mbox_set_enabled</name>
        <param>
          <type>const struct <ref refid="structmbox__channel" kindref="compound">mbox_channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable (disable) interrupts and callbacks for inbound channels. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable interrupt for the channel when the parameter &apos;enable&apos; is set to true. Disable it otherwise.</para>
<para>Immediately after calling this function with &apos;enable&apos; set to true, the channel is considered enabled and ready to receive signal and messages (even already pending), so the user must take care of installing a proper callback (if needed) using <emphasis><ref refid="group__mbox__interface_1gad48e48c984e70348336a896bb2835c77" kindref="member">mbox_register_callback()</ref></emphasis> on the channel before enabling it. For this reason it is recommended that all the channels are disabled at probe time.</para>
<para>Enabling a channel for which there is no installed callback is considered undefined behavior (in general the driver must take care of gracefully handling spurious interrupts with no installed callback).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel instance pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to 0 to disable and to nonzero to enable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If it isn&apos;t an inbound channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="430" column="6" declfile="include/drivers/mbox.h" declline="430" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mbox__interface_1gaf2f8adbd5e4f7f5972b2d34cfce68bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t mbox_max_channels_get</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>mbox_max_channels_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Return the maximum number of channels. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the maximum number of channels supported by the hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum possible number of supported channels on success, negative value on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="454" column="11" declfile="include/drivers/mbox.h" declline="454" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__mbox__interface_1ga9e02e3a523a63ff564ce2bb42c03aa1f" prot="public" static="no">
        <name>MBOX_DT_CHANNEL_GET</name>
        <param><defname>node_id</defname></param>
        <param><defname>name</defname></param>
        <initializer>	{									\
		.dev = <ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__mbox__interface_1gac232c8a5efbfc04dc35e7b09f4522dfc" kindref="member">MBOX_DT_CTLR_BY_NAME</ref>(node_id, name)),	\
		.id = <ref refid="group__mbox__interface_1ga509da4cf8e02135a49a8369af1a65d79" kindref="member">MBOX_DT_CHANNEL_ID_BY_NAME</ref>(node_id, name),		\
	}</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structmbox__channel" kindref="compound">mbox_channel</ref> from devicetree. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper macro expands to a static initializer for a <computeroutput><ref refid="structmbox__channel" kindref="compound">mbox_channel</ref></computeroutput> by reading the relevant device controller and channel number from the devicetree.</para>
<para>Example devicetree fragment: <verbatim>mbox1: mbox-controller@... { ... };

n: node {
        mboxes = &lt;&amp;mbox1 8&gt;,
                 &lt;&amp;mbox1 9&gt;;
        mbox-names = &quot;tx&quot;, &quot;rx&quot;;
};
</verbatim> Example usage: <verbatim>const struct mbox_channel channel = MBOX_DT_CHANNEL_GET(DT_NODELABEL(n), tx);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node identifier for the MBOX device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of the mboxes element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="124" column="9" bodyfile="include/drivers/mbox.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mbox__interface_1gac232c8a5efbfc04dc35e7b09f4522dfc" prot="public" static="no">
        <name>MBOX_DT_CTLR_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga65c90d2d96255b8569c5b869b637c2fd" kindref="member">DT_PHANDLE_BY_NAME</ref>(node_id, mboxes, name)</initializer>
        <briefdescription>
<para>Get the node identifier for the MBOX controller from a mboxes property by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree fragment: <verbatim>mbox1: mbox-controller@... { ... };

n: node {
        mboxes = &lt;&amp;mbox1 8&gt;,
                 &lt;&amp;mbox1 9&gt;;
        mbox-names = &quot;tx&quot;, &quot;rx&quot;;
};
</verbatim> Example usage: <verbatim>MBOX_DT_CTLR_BY_NAME(DT_NODELABEL(n), tx) // DT_NODELABEL(mbox1)
MBOX_DT_CTLR_BY_NAME(DT_NODELABEL(n), rx) // DT_NODELABEL(mbox1)
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier for a node with a mboxes property </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a mboxes element as defined by the node&apos;s mbox-names property</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the node identifier for the MBOX controller in the named element</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-prop_1ga65c90d2d96255b8569c5b869b637c2fd" kindref="member">DT_PHANDLE_BY_NAME()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="157" column="9" bodyfile="include/drivers/mbox.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__mbox__interface_1ga509da4cf8e02135a49a8369af1a65d79" prot="public" static="no">
        <name>MBOX_DT_CHANNEL_ID_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga79cda6ca70cc1e27b034ad096d4f4401" kindref="member">DT_PHA_BY_NAME_OR</ref>(node_id, mboxes, name, channel, 0)</initializer>
        <briefdescription>
<para>Get a MBOX channel value by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Example devicetree fragment: <verbatim>mbox1: mbox@... {
        #mbox-cells = &lt;1&gt;;
};

n: node {
    mboxes = &lt;&amp;mbox1 1&gt;,
             &lt;&amp;mbox1 6&gt;;
    mbox-names = &quot;tx&quot;, &quot;rx&quot;;
};
</verbatim> Bindings fragment for the mbox compatible: <verbatim>mbox-cells:
  - channel
</verbatim> Example usage: <verbatim>MBOX_DT_CHANNEL_ID_BY_NAME(DT_NODELABEL(n), tx) // 1
MBOX_DT_CHANNEL_ID_BY_NAME(DT_NODELABEL(n), rx) // 6
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier for a node with a mboxes property </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a mboxes element as defined by the node&apos;s mbox-names property</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the channel value in the specifier at the named element or 0 if no channels are supported</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__devicetree-generic-prop_1ga79cda6ca70cc1e27b034ad096d4f4401" kindref="member">DT_PHA_BY_NAME_OR()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/mbox.h" line="194" column="9" bodyfile="include/drivers/mbox.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>MBOX Interface. </para>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".unparsed"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CPU<sp/>#1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+----------+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+----------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+---TX9----+<sp/><sp/><sp/>+--------+--RX8---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>dev<sp/>A<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>CPU<sp/>#2<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;---RX8--+<sp/>|<sp/><sp/><sp/>|<sp/>+------+--TX9---&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+----------+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>|<sp/><sp/><sp/>|<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+----------+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+--+-v---v-+--+<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>MBOX<sp/>dev<sp/><sp/>|<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+--+-^---^--+-+<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+----------+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>|<sp/><sp/><sp/>|<sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+----------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;---RX2--+<sp/>|<sp/><sp/><sp/>|<sp/><sp/>+-----+--TX3---&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>dev<sp/>B<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>CPU<sp/>#3<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+---TX3----+<sp/><sp/><sp/>+--------+--RX2---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+----------+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+----------+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
</programlisting></para>
<para>An MBOX device is a peripheral capable of passing signals (and data depending on the peripheral) between CPUs and clusters in the system. Each MBOX instance is providing one or more channels, each one targeting one other CPU cluster (multiple channels can target the same cluster).</para>
<para>For example in the plot the device &apos;dev A&apos; is using the TX channel 9 to signal (or send data to) the CPU #2 and it&apos;s expecting data or signals on the RX channel 8. Thus it can send the message through the channel 9, and it can register a callback on the channel 8 of the MBOX device.</para>
<para>This API supports two modes: signalling mode and data transfer mode.</para>
<para>In signalling mode:<itemizedlist>
<listitem><para><ref refid="group__mbox__interface_1ga82d9def1b5c31c574d2114abcce2eb1f" kindref="member">mbox_mtu_get()</ref> must return 0</para>
</listitem><listitem><para><ref refid="group__mbox__interface_1ga18828e5c28201ad838ed9ba7c0afabfe" kindref="member">mbox_send()</ref> must have (msg == NULL)</para>
</listitem><listitem><para>the callback must be called with (data == NULL)</para>
</listitem></itemizedlist>
</para>
<para>In data transfer mode:<itemizedlist>
<listitem><para><ref refid="group__mbox__interface_1ga82d9def1b5c31c574d2114abcce2eb1f" kindref="member">mbox_mtu_get()</ref> must return a (value != 0)</para>
</listitem><listitem><para><ref refid="group__mbox__interface_1ga18828e5c28201ad838ed9ba7c0afabfe" kindref="member">mbox_send()</ref> must have (msg != NULL)</para>
</listitem><listitem><para>the callback must be called with (data != NULL)</para>
</listitem><listitem><para>The msg content must be the same between sender and receiver </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
