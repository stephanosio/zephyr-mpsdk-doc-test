<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__sched_8h" kind="file" language="C++">
    <compoundname>test_sched.h</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includedby refid="sched_2schedule__api_2src_2main_8c" local="yes">tests/kernel/sched/schedule_api/src/main.c</includedby>
    <includedby refid="test__priority__scheduling_8c" local="yes">tests/kernel/sched/schedule_api/src/test_priority_scheduling.c</includedby>
    <includedby refid="test__sched__is__preempt__thread_8c" local="yes">tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c</includedby>
    <includedby refid="test__sched__priority_8c" local="yes">tests/kernel/sched/schedule_api/src/test_sched_priority.c</includedby>
    <includedby refid="test__sched__timeslice__and__lock_8c" local="yes">tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c</includedby>
    <includedby refid="test__sched__timeslice__reset_8c" local="yes">tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c</includedby>
    <includedby refid="test__slice__scheduling_8c" local="yes">tests/kernel/sched/schedule_api/src/test_slice_scheduling.c</includedby>
    <includedby refid="user__api_8c" local="yes">tests/kernel/sched/schedule_api/src/user_api.c</includedby>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="3">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/sched/schedule_api/src/test_sched.h</label>
        <link refid="test__sched_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>tests/kernel/sched/schedule_api/src/main.c</label>
        <link refid="sched_2schedule__api_2src_2main_8c"/>
      </node>
      <node id="3">
        <label>tests/kernel/sched/schedule_api/src/test_priority_scheduling.c</label>
        <link refid="test__priority__scheduling_8c"/>
      </node>
      <node id="1">
        <label>tests/kernel/sched/schedule_api/src/test_sched.h</label>
        <link refid="test__sched_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c</label>
        <link refid="test__sched__is__preempt__thread_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/sched/schedule_api/src/test_sched_priority.c</label>
        <link refid="test__sched__priority_8c"/>
      </node>
      <node id="6">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c</label>
        <link refid="test__sched__timeslice__and__lock_8c"/>
      </node>
      <node id="7">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c</label>
        <link refid="test__sched__timeslice__reset_8c"/>
      </node>
      <node id="8">
        <label>tests/kernel/sched/schedule_api/src/test_slice_scheduling.c</label>
        <link refid="test__slice__scheduling_8c"/>
      </node>
      <node id="9">
        <label>tests/kernel/sched/schedule_api/src/user_api.c</label>
        <link refid="user__api_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structthread__data" prot="public">thread_data</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__sched_8h_1a009eccc38d82ae14211b7cbe51a879a5" prot="public" static="no">
        <name>MAX_NUM_THREAD</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="13" column="9" bodyfile="tests/kernel/sched/schedule_api/src/test_sched.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__sched_8h_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(640 + CONFIG_TEST_EXTRA_STACKSIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="14" column="9" bodyfile="tests/kernel/sched/schedule_api/src/test_sched.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__sched_8h_1ad930fce335daadb13978925297e53bbf" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread user_thread</definition>
        <argsstring></argsstring>
        <name>user_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="18" column="22" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="13" bodyend="-1" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="18" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="test__sched_8h_1a7cac2b600bbcd5d0c27deae1199d16ba" prot="public" static="no" mutable="no">
        <type>struct k_sem</type>
        <definition>struct k_sem user_sem</definition>
        <argsstring></argsstring>
        <name>user_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="19" column="19" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="19" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__sched_8h_1a054df7538d0e837a101abf426065940a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_EXTERN</definition>
        <argsstring>(tstack)</argsstring>
        <name>K_THREAD_STACK_EXTERN</name>
        <param>
          <type><ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="16" column="1" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__sched_8h_1a6ead519f314b9fb3b12ef7e3bff44ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>K_THREAD_STACK_ARRAY_EXTERN</definition>
        <argsstring>(tstacks, 10,(640+CONFIG_TEST_EXTRA_STACKSIZE))</argsstring>
        <name>K_THREAD_STACK_ARRAY_EXTERN</name>
        <param>
          <type>tstacks</type>
        </param>
        <param>
          <type>10</type>
        </param>
        <param>
          <type>(640+CONFIG_TEST_EXTRA_STACKSIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="17" column="1" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test__sched_8h_1ad21e6386a1ffc76ea1379e2233c6bb71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spin_for_ms</definition>
        <argsstring>(int ticks)</argsstring>
        <name>spin_for_ms</name>
        <param>
          <type>int</type>
          <declname>ticks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="27" column="6" bodyfile="tests/kernel/sched/schedule_api/src/main.c" bodystart="16" bodyend="28" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gadcaa67e72a6c021339110eb4ff1242e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate that the cooperative thread will not be preempted. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a cooperative thread with priority higher than the current cooperative thread. Make sure that the higher priority thread will not preempt the lower priority cooperative thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="29" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="47" bodyend="70" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gac04ad4372fb87d1c0cfa525ef5cb6940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate preemptiveness of preemptive thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a preemptive thread which is of priority lower than current thread. Current thread is made has preemptive. Make sure newly created thread is not preempted. Now create a preemptive thread which is of priority higher than current thread. Make sure newly created thread is preempted </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="30" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="83" bodyend="112" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga25b3cd1ed71cdb636f8d02f2b9f058d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_preemptible_wait_prio</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_preemptible_wait_prio</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate scheduling sequence of preemptive threads with start delay. </para>
        </briefdescription>
        <detaileddescription>
<para>Create four preemptive threads which are of priority higher than current thread. Make sure that the highest priority and longest waiting thread is scheduled first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="31" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="123" bodyend="172" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga06468ec560826bb502b6d94712278cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bad_priorities</definition>
        <argsstring>(void)</argsstring>
        <name>test_bad_priorities</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validate checking priority values</para>
<para>Our test cases don&apos;t cover every outcome of whether a priority is valid, do so here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="32" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="184" bodyend="209" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga224c79245d2b7fff8648fa4d94b75c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_yield_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_yield_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the behavior of cooperative thread when it yields. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads of priority -2, -1 and 0. Yield the main thread which is cooperative. Check if all the threads gets executed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="33" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="99" bodyend="116" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga0035834d2e4db3813ad4e8183e65fe32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sleep_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_sleep_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the behavior of cooperative thread when it sleeps. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads of priority -2, -1 and 0. Put the main thread in timeout queue by calling <ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep()</ref> which is cooperative. Check if all the threads gets executed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="34" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="126" bodyend="141" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__sched_8h_1a44baee856381f7b386368889abad43b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_busy_wait_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_busy_wait_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="35" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="143" bodyend="157" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga2154e8dce668a294824c0a13edfc3739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sleep_wakeup_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_sleep_wakeup_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads with main thread with priority 0 and other threads with -1, 0 ,+1 priority. Now -1 priority thread gets executed and it is made to sleep for 10 sec. Now, wake up the -1 priority thread and check if it starts executing.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="36" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="172" bodyend="187" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gaf7dddee86d5a24ec7f8db1b0381c8970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pending_thread_wakeup</definition>
        <argsstring>(void)</argsstring>
        <name>test_pending_thread_wakeup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> behavior on pending thread. </para>
        </briefdescription>
        <detaileddescription>
<para>The test creates a cooperative thread and let it wait for semaphore. Then calls <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref>. The <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> call should return gracefully without waking up the thread</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="37" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="207" bodyend="231" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga29c073bdfd6c751628afe7ba9eda7502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_time_slicing_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_time_slicing_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate preemptive thread behavior with time slice. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads with -1, 0, and 1 as priority, setup time slice for threads with priority 0. Make sure the threads with equal priorities are executed in time slice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="38" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="242" bodyend="266" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gabb7c9c0f75ed7b62f3e03a4e267e65f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_time_slicing_disable_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_time_slicing_disable_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the behavior of preemptive thread with <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads with -1, 0, and 1 as priority, setup time slice for threads with priority 0. Make sure the threads with equal priorities are executed in time slice. Also run <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> for 5 secs and check if other threads are not executed at that time.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="39" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="281" bodyend="302" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga5747d604fdb0a85e0d45c6530058ef24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_lock_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_lock_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the scheduler when preemptive threads are running. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads and lock the scheduler. Make sure that the threads are not executed. Call <ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep()</ref> and check if the threads have executed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="40" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="313" bodyend="335" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga7b6a31f45b525d56ad33131daaf8adee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_unlock_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_unlock_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate <ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref> and <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Lock the scheduler and create 3 threads. Check that the threads are not executed. Call <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> and check if the threads have executed.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref>, <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="41" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="348" bodyend="371" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga4fcc88261fe2fb8292a5d8c059ce82ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_unlock_nested_sched_lock</definition>
        <argsstring>(void)</argsstring>
        <name>test_unlock_nested_sched_lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate nested <ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref> and <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>In a preemptive thread, lock the scheduler twice and create a cooperative thread. Call <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> and check the cooperative thread haven&apos;t executed. Unlock it again to see the thread have executed this time.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref>, <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="42" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="385" bodyend="422" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga0c8ecd714cfe8b18c43a9c7b50e1f713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sched_is_preempt_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_sched_is_preempt_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the correctness of <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Create a preemptive thread, lock the scheduler and call <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref>. Unlock the scheduler and call <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> again. Create a cooperative thread and lock the scheduler <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> and unlock the scheduler and call <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="43" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c" bodystart="68" bodyend="88" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__sched_8h_1ae7916513acd5ff9613b2daefb0afddfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_slice_reset</definition>
        <argsstring>(void)</argsstring>
        <name>test_slice_reset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="44" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c" bodystart="197" bodyend="200" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__sched_8h_1a84eda7a4613d01c9172c17beaa0204de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_slice_scheduling</definition>
        <argsstring>(void)</argsstring>
        <name>test_slice_scheduling</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="45" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_slice_scheduling.c" bodystart="140" bodyend="143" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga43f9fb9bd47c18d171883a37f51d4d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_scheduling</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_scheduling</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the behavior of preemptive threads with different priorities. </para>
        </briefdescription>
        <detaileddescription>
<para>Create multiple threads of different priorities - all are preemptive, current thread is also made preemptive. Check how the threads get chance to execute based on their priorities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="46" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_priority_scheduling.c" bodystart="68" bodyend="109" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gab015586c36d9616495578d57be339631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_wakeup_expired_timer_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_wakeup_expired_timer_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>validate <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> in some corner scenario </para>
        </briefdescription>
        <detaileddescription>
<para>trigger a timer and after expiration of timer call <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref>, even the thread is not in sleep state neither in pending state</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="47" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="434" bodyend="443" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__sched_8h_1a529fbc28fa9343fa89fbd102c7a137f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_user_k_wakeup</definition>
        <argsstring>(void)</argsstring>
        <name>test_user_k_wakeup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="48" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="32" bodyend="43" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__sched_8h_1a3ed6486b5187dd6660acf5067e75fab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_user_k_is_preempt</definition>
        <argsstring>(void)</argsstring>
        <name>test_user_k_is_preempt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="49" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="55" bodyend="90" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga6a2dd1ce9277d13299bbcf4edfece202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_suspend_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_suspend_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> input param to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="50" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="116" bodyend="125" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga0031bfdb3c5051c053fd98ac4cd2424e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_resume_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_resume_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> input param to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="51" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="153" bodyend="162" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga280a0acbd9dea9af67ee56b05fc4639d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_get_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_get_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set thread_k_thread_priority_get() param input to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para>thread_k_thread_priority_get() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="52" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="190" bodyend="199" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga8c5f191cc509c98818f332daea80c7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_set_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_set_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> param input to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="53" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="227" bodyend="236" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gac6dc9abbe00729f2054f72348b5a7e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_set_overmax</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_set_overmax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Check input param range overmax in userspace test.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="54" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="265" bodyend="274" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga3beb62b6bd5c58af01c51bfd844da87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_set_upgrade</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_set_upgrade</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Check input param range fail in userspace test.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="55" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="305" bodyend="314" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga2530535cc5b87a91008bb5fb6f519629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_wakeup_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_wakeup_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> input param to NULL will trigger a fatal error</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched.h" line="56" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="342" bodyend="351" declfile="tests/kernel/sched/schedule_api/src/test_sched.h" declline="56" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__TEST_SCHED_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__TEST_SCHED_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="test__sched_8h_1a009eccc38d82ae14211b7cbe51a879a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_NUM_THREAD<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="test__sched_8h_1a6423a880df59733d2d9b509c7718d3a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(640<sp/>+<sp/>CONFIG_TEST_EXTRA_STACKSIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="test__sched_8h_1a054df7538d0e837a101abf426065940a" refkind="member"><highlight class="normal"><ref refid="test__sched_8h_1a054df7538d0e837a101abf426065940a" kindref="member">K_THREAD_STACK_EXTERN</ref>(<ref refid="pipe_2pipe__api_2src_2main_8c_1a8b6a52348bfbfba409bf38688d31b8a8" kindref="member">tstack</ref>);</highlight></codeline>
<codeline lineno="17" refid="test__sched_8h_1a6ead519f314b9fb3b12ef7e3bff44ec6" refkind="member"><highlight class="normal"><ref refid="test__sched_8h_1a6ead519f314b9fb3b12ef7e3bff44ec6" kindref="member">K_THREAD_STACK_ARRAY_EXTERN</ref>(tstacks,<sp/><ref refid="test__sched_8h_1a009eccc38d82ae14211b7cbe51a879a5" kindref="member">MAX_NUM_THREAD</ref>,<sp/><ref refid="test__sched_8h_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="test__sched_8h_1ad930fce335daadb13978925297e53bbf" kindref="member">user_thread</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="test__sched_8h_1a7cac2b600bbcd5d0c27deae1199d16ba" kindref="member">user_sem</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structthread__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structthread__data" kindref="compound">thread_data</ref><sp/>{</highlight></codeline>
<codeline lineno="22" refid="structthread__data_1afd5f89c8eea492338c140f794643f3b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="structthread__data_1afd5f89c8eea492338c140f794643f3b9" kindref="member">tid</ref>;</highlight></codeline>
<codeline lineno="23" refid="structthread__data_1ae6b7130c98646b61e108dcf53c3501e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structthread__data_1ae6b7130c98646b61e108dcf53c3501e0" kindref="member">priority</ref>;</highlight></codeline>
<codeline lineno="24" refid="structthread__data_1a235f54d704f19618551742108fe09978" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structthread__data_1a235f54d704f19618551742108fe09978" kindref="member">executed</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__sched_8h_1ad21e6386a1ffc76ea1379e2233c6bb71" kindref="member">spin_for_ms</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ticks);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1gadcaa67e72a6c021339110eb4ff1242e4" kindref="member">test_priority_cooperative</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1gac04ad4372fb87d1c0cfa525ef5cb6940" kindref="member">test_priority_preemptible</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga25b3cd1ed71cdb636f8d02f2b9f058d3" kindref="member">test_priority_preemptible_wait_prio</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga06468ec560826bb502b6d94712278cbe" kindref="member">test_bad_priorities</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga224c79245d2b7fff8648fa4d94b75c46" kindref="member">test_yield_cooperative</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga0035834d2e4db3813ad4e8183e65fe32" kindref="member">test_sleep_cooperative</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__sched_8h_1a44baee856381f7b386368889abad43b2" kindref="member">test_busy_wait_cooperative</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga2154e8dce668a294824c0a13edfc3739" kindref="member">test_sleep_wakeup_preemptible</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1gaf7dddee86d5a24ec7f8db1b0381c8970" kindref="member">test_pending_thread_wakeup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga29c073bdfd6c751628afe7ba9eda7502" kindref="member">test_time_slicing_preemptible</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1gabb7c9c0f75ed7b62f3e03a4e267e65f2" kindref="member">test_time_slicing_disable_preemptible</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga5747d604fdb0a85e0d45c6530058ef24" kindref="member">test_lock_preemptible</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga7b6a31f45b525d56ad33131daaf8adee" kindref="member">test_unlock_preemptible</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga4fcc88261fe2fb8292a5d8c059ce82ef" kindref="member">test_unlock_nested_sched_lock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga0c8ecd714cfe8b18c43a9c7b50e1f713" kindref="member">test_sched_is_preempt_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__sched_8h_1ae7916513acd5ff9613b2daefb0afddfc" kindref="member">test_slice_reset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__sched_8h_1a84eda7a4613d01c9172c17beaa0204de" kindref="member">test_slice_scheduling</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga43f9fb9bd47c18d171883a37f51d4d02" kindref="member">test_priority_scheduling</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1gab015586c36d9616495578d57be339631" kindref="member">test_wakeup_expired_timer_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__sched_8h_1a529fbc28fa9343fa89fbd102c7a137f4" kindref="member">test_user_k_wakeup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__sched_8h_1a3ed6486b5187dd6660acf5067e75fab0" kindref="member">test_user_k_is_preempt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga6a2dd1ce9277d13299bbcf4edfece202" kindref="member">test_k_thread_suspend_init_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga0031bfdb3c5051c053fd98ac4cd2424e" kindref="member">test_k_thread_resume_init_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga280a0acbd9dea9af67ee56b05fc4639d" kindref="member">test_k_thread_priority_get_init_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga8c5f191cc509c98818f332daea80c7fe" kindref="member">test_k_thread_priority_set_init_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1gac6dc9abbe00729f2054f72348b5a7e4d" kindref="member">test_k_thread_priority_set_overmax</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga3beb62b6bd5c58af01c51bfd844da87b" kindref="member">test_k_thread_priority_set_upgrade</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__sched__tests_1ga2530535cc5b87a91008bb5fb6f519629" kindref="member">test_k_wakeup_init_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__TEST_SCHED_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="tests/kernel/sched/schedule_api/src/test_sched.h"/>
  </compounddef>
</doxygen>
