<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__queue__apis" kind="group">
    <compoundname>queue_apis</compoundname>
    <title>Queue APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_init</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_init</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Initialize a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a queue object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1669" column="7" declfile="include/kernel.h" declline="1669" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_cancel_wait</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_cancel_wait</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Cancel waiting on a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine causes first thread pending on <emphasis>queue</emphasis>, if any, to return from <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> call with NULL value (as if timeout expired). If the queue is being waited on by <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>, it will return with -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> will return NULL).</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1684" column="7" declfile="include/kernel.h" declline="1684" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_append</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_append</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Append an element to the end of a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine appends a data item to <emphasis>queue</emphasis>. A queue data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1698" column="13" declfile="include/kernel.h" declline="1698" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_queue_alloc_append</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_alloc_append</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Append an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine appends a data item to <emphasis>queue</emphasis>. There is an implicit memory allocation to create an additional temporary bookkeeping data structure from the calling thread&apos;s resource pool, which is automatically freed when the item is removed. The data itself is not copied.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t sufficient RAM in the caller&apos;s resource pool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1716" column="10" declfile="include/kernel.h" declline="1716" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga8ce013d8a037d4be5078797e0050e9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_prepend</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_prepend</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepend an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine prepends a data item to <emphasis>queue</emphasis>. A queue data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1730" column="13" declfile="include/kernel.h" declline="1730" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_queue_alloc_prepend</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_alloc_prepend</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepend an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine prepends a data item to <emphasis>queue</emphasis>. There is an implicit memory allocation to create an additional temporary bookkeeping data structure from the calling thread&apos;s resource pool, which is automatically freed when the item is removed. The data itself is not copied.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t sufficient RAM in the caller&apos;s resource pool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1748" column="10" declfile="include/kernel.h" declline="1748" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_queue_insert</definition>
        <argsstring>(struct k_queue *queue, void *prev, void *data)</argsstring>
        <name>k_queue_insert</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts an element to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine inserts a data item to <emphasis>queue</emphasis> after previous item. A queue data item must be aligned on a word boundary, and the first word of the item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the previous data item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1763" column="13" declfile="include/kernel.h" declline="1763" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_queue_append_list</definition>
        <argsstring>(struct k_queue *queue, void *head, void *tail)</argsstring>
        <name>k_queue_append_list</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
<para>Atomically append a list of elements to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>queue</emphasis> in one operation. The data items must be in a singly-linked list, with the first word in each data item pointing to the next data item; the list must be NULL-terminated.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to first node in singly-linked list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to last node in singly-linked list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>on invalid supplied data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1783" column="12" declfile="include/kernel.h" declline="1783" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_queue_merge_slist</definition>
        <argsstring>(struct k_queue *queue, sys_slist_t *list)</argsstring>
        <name>k_queue_merge_slist</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Atomically add a list of elements to a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a list of data items to <emphasis>queue</emphasis> in one operation. The data items must be in a singly-linked list implemented using a sys_slist_t object. Upon completion, the original list is empty.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sys_slist_t object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>on invalid data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1800" column="12" declfile="include/kernel.h" declline="1800" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_queue_get</definition>
        <argsstring>(struct k_queue *queue, k_timeout_t timeout)</argsstring>
        <name>k_queue_get</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get an element from a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes first data item from <emphasis>queue</emphasis>. The first word of the data item is reserved for the kernel&apos;s use.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to obtain a data item or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the data item if successful; NULL if returned without waiting, or waiting period timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1820" column="7" declfile="include/kernel.h" declline="1820" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_queue_remove</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_remove</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Remove an element from a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes data item from <emphasis>queue</emphasis>. The first word of the data item is reserved for the kernel&apos;s use. Removing elements from k_queue rely on sys_slist_find_and_remove which is not a constant time operation.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if data item was removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1838" column="6" declfile="include/kernel.h" declline="1838" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_queue_unique_append</definition>
        <argsstring>(struct k_queue *queue, void *data)</argsstring>
        <name>k_queue_unique_append</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Append an element to a queue only if it&apos;s not present already. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine appends data item to <emphasis>queue</emphasis>. The first word of the data item is reserved for the kernel&apos;s use. Appending elements to k_queue relies on sys_slist_is_node_in_list which is not a constant time operation.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if data item was added, false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1854" column="6" declfile="include/kernel.h" declline="1854" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_queue_is_empty</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_is_empty</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Query a queue to see if it has data available. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the data might be already gone by the time this function returns if other threads are also trying to read from the queue.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the queue is empty. </para>
</simplesect>
<simplesect kind="return"><para>0 if data is available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1869" column="6" declfile="include/kernel.h" declline="1869" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_queue_peek_head</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_peek_head</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Peek element at the head of queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the head of queue without removing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Head element, or NULL if queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1885" column="7" declfile="include/kernel.h" declline="1885" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_queue_peek_tail</definition>
        <argsstring>(struct k_queue *queue)</argsstring>
        <name>k_queue_peek_tail</name>
        <param>
          <type>struct k_queue *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Peek element at the tail of queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Return element from the tail of queue without removing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tail element, or NULL if queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1896" column="7" declfile="include/kernel.h" declline="1896" declcolumn="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__queue__apis_1gacd0bc309f0147d4669f65fafa87e0e70" prot="public" static="no">
        <name>K_QUEUE_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_queue, name) = \
		Z_QUEUE_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The queue can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_queue<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="1907" column="9" bodyfile="include/kernel.h" bodystart="1907" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
