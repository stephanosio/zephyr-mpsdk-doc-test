<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mem__protect_8h" kind="file" language="C++">
    <compoundname>mem_protect.h</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="kernel__structs_8h" local="no">kernel_structs.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="stdlib_8h" local="no">stdlib.h</includes>
    <includes local="no">syscalls/mem_protect.h</includes>
    <includedby refid="inherit_8c" local="yes">tests/kernel/mem_protect/mem_protect/src/inherit.c</includedby>
    <includedby refid="kobject_8c" local="yes">tests/kernel/mem_protect/mem_protect/src/kobject.c</includedby>
    <includedby refid="mem__protect_2mem__protect_2src_2main_8c" local="yes">tests/kernel/mem_protect/mem_protect/src/main.c</includedby>
    <includedby refid="mem__domain_8c" local="yes">tests/kernel/mem_protect/mem_protect/src/mem_domain.c</includedby>
    <includedby refid="mem__partition_8c" local="yes">tests/kernel/mem_protect/mem_protect/src/mem_partition.c</includedby>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="3">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="92">
        <label>syscalls/mem_protect.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="3">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="4">
        <label>tests/kernel/mem_protect/mem_protect/src/main.c</label>
        <link refid="mem__protect_2mem__protect_2src_2main_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_domain.c</label>
        <link refid="mem__domain_8c"/>
      </node>
      <node id="6">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_partition.c</label>
        <link refid="mem__partition_8c"/>
      </node>
      <node id="1">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mem__protect_8h_1a8ee979cf43e9512235b230adb4ed40e5" prot="public" static="no">
        <name>INHERIT_STACK_SIZE</name>
        <initializer>CONFIG_MAIN_STACK_SIZE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="90" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a460c3954e5b249407aa0de9dad360025" prot="public" static="no">
        <name>SEMAPHORE_MAX_COUNT</name>
        <initializer>(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="91" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a19e7f3a6c7e2273e89f49db644350c55" prot="public" static="no">
        <name>SEMAPHORE_INIT_COUNT</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="92" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a2f50e6fe0315f662fe667f106efbaac1" prot="public" static="no">
        <name>SYNC_SEM_MAX_COUNT</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="93" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1af7a7f5603ec3a32e67a6613cbf495b1d" prot="public" static="no">
        <name>SYNC_SEM_INIT_COUNT</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="94" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1ad26bfccbdcf95b9f58ac00c02999c2ea" prot="public" static="no">
        <name>MSG_Q_SIZE</name>
        <initializer>(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="95" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a7f4e9e375c31bec11cf35f99a965bf2b" prot="public" static="no">
        <name>MSG_Q_MAX_NUM_MSGS</name>
        <initializer>(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="96" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1aa5428a7edeec43ef8e686940f221e780" prot="public" static="no">
        <name>MSG_Q_ALIGN</name>
        <initializer>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="97" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a25e7852941475e51c875632ac1985d8a" prot="public" static="no">
        <name>PRIORITY</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="98" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="99" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1abf2f644fd3fbae3f1262ece9914b49cf" prot="public" static="no">
        <name>BLK_SIZE_MIN</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="100" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a75341588e628cc8059088830880e11ce" prot="public" static="no">
        <name>BLK_SIZE_MAX</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="101" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a5b36f40d28e57c40d7a56e926f36c8f1" prot="public" static="no">
        <name>BLK_NUM_MIN</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="102" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a178957a5641420997da764653ff30bc4" prot="public" static="no">
        <name>BLK_NUM_MAX</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="103" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a66edaa498a82de98246e8be258cb0e06" prot="public" static="no">
        <name>BLK_ALIGN</name>
        <initializer><ref refid="mem__protect_8h_1abf2f644fd3fbae3f1262ece9914b49cf" kindref="member">BLK_SIZE_MIN</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="104" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a1921ee8629c4482331e5a78d5dfc21d3" prot="public" static="no">
        <name>SEM_INIT_VAL</name>
        <initializer>(0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="105" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a40245d4b511683879535bdf5d95e855e" prot="public" static="no">
        <name>SEM_MAX_VAL</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="106" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1aa8e10e0e22bcc93afc08ac2031d63555" prot="public" static="no">
        <name>MEM_DOMAIN_STACK_SIZE</name>
        <initializer>CONFIG_MAIN_STACK_SIZE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="109" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a5a88b28b35bec9cbd6a4afcf1960e1b4" prot="public" static="no">
        <name>MEM_PARTITION_INIT_NUM</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="110" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a74e0f8753e36d617a287cc2562824a3b" prot="public" static="no">
        <name>BLK_SIZE_MIN_MD</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="111" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a65a6eabed6ecde9f1eaf57639fdc3a24" prot="public" static="no">
        <name>BLK_SIZE_MAX_MD</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="112" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a03ce2723018ac78067b43dc5fceaf91a" prot="public" static="no">
        <name>BLK_NUM_MAX_MD</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="113" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a9a76ba46a2904c02ac67761ba748d842" prot="public" static="no">
        <name>BLK_ALIGN_MD</name>
        <initializer><ref refid="mem__protect_8h_1a74e0f8753e36d617a287cc2562824a3b" kindref="member">BLK_SIZE_MIN_MD</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="114" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a550a75944350b926760a1bf0c553d87f" prot="public" static="no">
        <name>DESC_SIZE</name>
        <initializer>sizeof(struct sys_mem_pool_block)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="115" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a7c85443c1df20cf27ebfcb90abb5f9a5" prot="public" static="no">
        <name>STACK_SIZE_MD</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="116" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a31b01494975bd3ea9792063fa6e4853c" prot="public" static="no">
        <name>PRIORITY_MD</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="117" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a3c2d0d295d142e2ad1dcfd544fd64ad9" prot="public" static="no">
        <name>MEM_DOMAIN_ALIGNMENT</name>
        <initializer>__aligned(MEM_REGION_ALLOC)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="132" column="12" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1aa7f7c04898e26208c8e5a091e99e699e" prot="public" static="no">
        <name>KOBJECT_STACK_SIZE</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="135" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a0a7ca37d14b7525d6ae43b12ee16bfda" prot="public" static="no">
        <name>TEST_HEAP_SIZE</name>
        <initializer>(2 &lt;&lt; CONFIG_MAX_THREAD_BYTES) * 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="144" column="10" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mem__protect_8h_1a8e497c59a3362df6102c893a8498acd0" prot="public" static="no">
        <name>MAX_OBJ</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="145" column="9" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mem__protect_8h_1a8c886bf9632d5b647c673e1cc7af9620" prot="public" static="no" mutable="no">
        <type>volatile <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>volatile bool valid_fault</definition>
        <argsstring></argsstring>
        <name>valid_fault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="77" column="22" bodyfile="tests/kernel/mem_protect/mem_protect/src/common.c" bodystart="9" bodyend="-1" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="77" declcolumn="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mem__protect_8h_1a56ba85a91402ebff75f322475724d219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_permission_inheritance</definition>
        <argsstring>(void)</argsstring>
        <name>test_permission_inheritance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test object permission inheritance except of the parent thread object. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>To the parent current thread grant permissions on kernel objects.</para>
</listitem><listitem><para>Create a child thread and check that it inherited permissions on that kernel objects.</para>
</listitem><listitem><para>Then check child thread can&apos;t access to the parent thread object using API command <ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get()</ref></para>
</listitem><listitem><para>At the same moment that test verifies that child thread was granted permission on a kernel objects. That meanis child user thread caller already has permission on the thread objects being granted.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init()</ref>, <ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread()</ref>, <ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="13" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/inherit.c" bodystart="101" bodyend="129" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="13" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ab37f929ccd6c4a6ec2b2f8d60606e100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_inherit_resource_pool</definition>
        <argsstring>(void)</argsstring>
        <name>test_inherit_resource_pool</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test child thread inherits parent&apos;s thread resource pool. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Create a memory heap heap_mem for the parent thread.</para>
</listitem><listitem><para>Then special system call <ref refid="mem__protect_8h_1a9b9a62d7516d3a56eaf2c6110dd9072d" kindref="member">ret_resource_pool_ptr()</ref> returns pointer to the resource pool of the current thread.</para>
</listitem><listitem><para>Call it in the <ref refid="inherit_8c_1aa064a141bd93ade496fabf7c81980166" kindref="member">parent_handler()</ref> and in the <ref refid="inherit_8c_1a5336c771f806e7d16a7af1288a5a30a1" kindref="member">child_handler()</ref></para>
</listitem><listitem><para>Then in the main test function <ref refid="inherit_8c_1ab37f929ccd6c4a6ec2b2f8d60606e100" kindref="member">test_inherit_resource_pool()</ref> compare returned addresses</para>
</listitem><listitem><para>If the addresses are the same, it means that child thread inherited resource pool of the parent&apos;s thread -test passed.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para>z_thread_heap_assign() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="14" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/inherit.c" bodystart="177" bodyend="191" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="14" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a8b8b2ddc3a475613ecd0c5aced042058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_setup</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_setup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="16" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="45" bodyend="77" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="16" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1af89e0b7de5bd61950c2eacca2e950af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_valid_access</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_valid_access</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if the mem_domain is configured and accessible for userspace. </para>
        </briefdescription>
        <detaileddescription>
<para>Join a memory domain with a read-write memory partition and a read-only partition within it, and show that the data in the partition is accessible as expected by the permissions provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="17" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="148" bodyend="152" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="17" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a2d423ef303187c3e57dc8a5f5164fbbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_invalid_access</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_invalid_access</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that a user thread can&apos;t touch partitions not in its domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="18" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="159" bodyend="164" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a334678a0007fe2d5e8366da7e77407e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_no_writes_to_ro</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_no_writes_to_ro</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that a read-only partition can&apos;t be written to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="19" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="171" bodyend="175" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ab2d95932f1b7fd8def90d788f0b704c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_remove_add_partition</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_remove_add_partition</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that adding/removing partitions works. </para>
        </briefdescription>
        <detaileddescription>
<para>Show that removing a partition doesn&apos;t affect access to other partitions. Show that removing a partition generates a fault if its data is accessed. Show that adding a partition back restores access from a user thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="20" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="186" bodyend="205" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a9cea68be4e91c450e75aabec206aaacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_api_supervisor_only</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_api_supervisor_only</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access memory domain APIs allowed to supervisor threads only. </para>
        </briefdescription>
        <detaileddescription>
<para>Show that invoking any of the memory domain APIs from user mode leads to a fault.</para>
<para><simplesect kind="see"><para><ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init()</ref>, <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref>, <ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition()</ref>, <ref refid="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" kindref="member">k_mem_domain_add_thread()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="21" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="253" bodyend="260" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="21" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a135b7b7054cf989f021cc001a060c837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_boot_threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_boot_threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show that boot threads belong to the default memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Static threads and the main thread are supposed to start as members of the default memory domain. Prove this is the case by examining the memory domain membership of z_main_thread and a static thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="22" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="271" bodyend="284" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="22" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a66695f107be50be6b6811e12f99d997a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_migration</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_migration</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: add to existing domain will do nothing</para>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="23" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="321" bodyend="353" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1aae1379b152838b79bbf8be04938a8173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_init_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_init_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of initializing memory domain fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to initialize a domain with invalid partition. <ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init()</ref> should return non-zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="24" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="493" bodyend="505" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="24" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a0cdcc251c234fb2c7150df5e56fa5b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_domain_remove_part_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_domain_remove_part_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="25" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="479" bodyend="482" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a83f139a28d365568e4bb04c65cebf12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_add_error_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_add_error_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of adding null memory partition fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to add a null partition to memory domain. <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> should return error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="26" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="515" bodyend="523" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a29f1f2f86632556046daf12d6a985a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_add_error_zerosize</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_add_error_zerosize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of adding zero sized memory partition fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to add a zero sized partition to memory domain. <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> should return error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="27" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="537" bodyend="549" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a1d1a65d9e3abd4b508f0ca9b1f6910df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_error_wraparound</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_error_wraparound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of memory partition address wraparound. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to add a partition whose adddress is wraparound. <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> should return error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="28" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="559" bodyend="575" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a71142b3b74ff9d1f32e25c4a4b763591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_remove_error_zerosize</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_remove_error_zerosize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test error case of removing memory partition fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Try to remove a partition size mismatched will result in <ref refid="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" kindref="member">k_mem_domain_remove_partition()</ref> returning error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="29" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="585" bodyend="606" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a0bd2840440ac5b91e50ad5bf1657770b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_macros_obtain_names_data_bss</definition>
        <argsstring>(void)</argsstring>
        <name>test_macros_obtain_names_data_bss</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="31" column="13" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a753447ccb1fb2c8f1bc1569140a00458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_assign_bss_vars_zero</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_assign_bss_vars_zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="32" column="13" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1aec712917793d457c9f5b82ec1dd0724f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_auto_determ_size</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_auto_determ_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="33" column="13" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="33" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1aab672980aad65c6fc2f4f9b76fa9da2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_grant</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_grant</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access to a invalid semaphore who&apos;s address is NULL. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref>, <ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="35" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="41" bodyend="54" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="35" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1aff41de862979fb5a6296a2ae07df6b6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_syscall_invalid_kobject</definition>
        <argsstring>(void)</argsstring>
        <name>test_syscall_invalid_kobject</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test syscall can take a different type of kobject. </para>
        </briefdescription>
        <detaileddescription>
<para>Test syscall can take a different type of kobject and syscall will generate fatal error if check fails.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="36" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="158" bodyend="168" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="36" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a624a2a75324b61c1cf8c2ae6e18323ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_without_kobject_permission</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_without_kobject_permission</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test user thread can access a k_object without grant. </para>
        </briefdescription>
        <detaileddescription>
<para>The kernel will fail system call on kernel object that tracks thread permissions, on thread that don&apos;t have permission granted on the object.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref>, <ref refid="group__thread__apis_1ga3fbe1c8a5f3ef1c25382c7d6fca35764" kindref="member">k_thread_user_mode_enter()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="37" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="189" bodyend="199" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a2ac642c55538df6d6f07448764d1345e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_revoke_access</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_revoke_access</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access revoke. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref>, <ref refid="group__usermode__apis_1gab70fe65497da1347cc4b7bf7ca2daf22" kindref="member">k_object_access_revoke()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="38" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="220" bodyend="245" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a3f824f076eba7b5faba313968345ce19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_grant_access_kobj</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_grant_access_kobj</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access revoke. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref>, <ref refid="group__usermode__apis_1gab70fe65497da1347cc4b7bf7ca2daf22" kindref="member">k_object_access_revoke()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="39" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="267" bodyend="290" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="39" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1aa9f5c6f6c41ffbe8243064bcf26a722d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_grant_access_kobj_invalid</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_grant_access_kobj_invalid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access grant between threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Test access grant to thread B from thread A which doesn&apos;t have required permissions.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="40" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="313" bodyend="327" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ab6477e3d247de7d00760029682b92cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_release_from_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_release_from_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test revoke permission of a k_object from userspace. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref>, <ref refid="group__usermode__apis_1ga3cb1a024c0178918def2dd0186e565b3" kindref="member">k_object_release()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="41" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="347" bodyend="362" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="41" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a518d6ad7708e28d34a7ff6300e6a7ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_all_grant</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_all_grant</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test supervisor thread grants kernel objects all access public status. </para>
        </briefdescription>
        <detaileddescription>
<para>System makes kernel object kobject_public_sem public to all threads Test the access to that kernel object by creating two new user threads.</para>
<para><simplesect kind="see"><para><ref refid="group__usermode__apis_1gababc731e98a6378323c0d633b2abaa6a" kindref="member">k_object_access_all_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="42" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="402" bodyend="423" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="42" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a1d079fd39b0030a5aa0ffa0bc14762c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_has_residual_permissions</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_has_residual_permissions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access permission of a terminated thread. </para>
        </briefdescription>
        <detaileddescription>
<para>If a deleted thread with some permissions is recreated with the same tid, check if it still has the permissions.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="43" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="451" bodyend="475" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="43" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a524bff5a2453bf920bf69e45fc0974ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_grant_to_invalid_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_grant_to_invalid_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test grant access to a valid kobject but invalid thread id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__usermode__apis_1ga94087bedf96fe2a2bea437d3d585ca22" kindref="member">k_object_access_grant()</ref>, <ref refid="group__usermode__apis_1gab70fe65497da1347cc4b7bf7ca2daf22" kindref="member">k_object_access_revoke()</ref>, z_object_find() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="44" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="486" bodyend="497" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a2744c81a11d9bd2363cf25066fe94ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_invalid_kobject</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_invalid_kobject</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Object validation checks. </para>
        </briefdescription>
        <detaileddescription>
<para>Test syscall on a kobject which is not present in the hash table. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="45" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="507" bodyend="514" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="45" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ad72a838230c633930d7cd230794be891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_access_kobject_without_init_access</definition>
        <argsstring>(void)</argsstring>
        <name>test_access_kobject_without_init_access</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Object validation checks without init access. </para>
        </briefdescription>
        <detaileddescription>
<para>Test syscall on a kobject which is not initialized and has no access </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="46" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="525" bodyend="532" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ace6c401dbb827ce99780f219d4965e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_access_kobject_without_init_with_access</definition>
        <argsstring>(void)</argsstring>
        <name>test_access_kobject_without_init_with_access</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test syscall on a kobject which is not initialized and has access. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="47" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="550" bodyend="565" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1acc771c03532adf85548caeae755363da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_reinitialize_thread_kobj</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_reinitialize_thread_kobj</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to reinitialize the <ref refid="structk__thread" kindref="compound">k_thread</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="48" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="593" bodyend="605" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a2f2155ae5900fafb5178abf5ed564f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_thread_from_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_thread_from_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test thread create from a user thread and check permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Test user thread can create new thread.</para>
</listitem><listitem><para>Verify that given thread and thread stack permissions to the user thread, allow to create new user thread.</para>
</listitem><listitem><para>Veify that new created user thread have access to its own thread object by aborting itself. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="49" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="639" bodyend="655" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="49" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ad1d257f149e9427648fce5868a12b40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_new_user_thread_with_in_use_stack_obj</definition>
        <argsstring>(void)</argsstring>
        <name>test_new_user_thread_with_in_use_stack_obj</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test create new user thread from a user thread with in-use stack obj. </para>
        </briefdescription>
        <detaileddescription>
<para>The kernel must prevent new user threads to use initiliazed (in-use) stack objects. In that case extra_thread is going to be create with in-use stack object child_stack. That will generate error, showing that kernel memory protection is working correctly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="50" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="689" bodyend="706" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a882d2d56884634274a8b9cc2c02b86f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_thread_from_user_no_access_stack</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_thread_from_user_no_access_stack</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test creates new thread from usermode without stack access. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread from user and the user doesn&apos;t have access to the stack region of new thread. _handler_k_thread_create validation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="51" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="733" bodyend="747" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="51" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ad6d3f3e1d8c3c49a71d3a03fce075b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_thread_from_user_invalid_stacksize</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_thread_from_user_invalid_stacksize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to validate user thread spawning with stack overflow. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread from user and use a huge stack size which overflows. This is _handler_k_thread_create validation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="52" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="777" bodyend="792" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="52" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ad84b40a95979d504eb717e3e6c660a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_thread_from_user_huge_stacksize</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_thread_from_user_huge_stacksize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to check stack overflow from user thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread from user and use a stack bigger than allowed size. This is_handler_k_thread_create validation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="53" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="831" bodyend="847" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="53" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a8a9a77c0d8d7a50fc5570ded11f7e025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_supervisor_thread_from_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_supervisor_thread_from_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to create a new supervisor thread from user. </para>
        </briefdescription>
        <detaileddescription>
<para>The system kernel must prevent user threads from creating supervisor threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="54" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="885" bodyend="901" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="54" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ad8f4c029e42dac2b3ea85ab31c12d447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_essential_thread_from_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_essential_thread_from_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new essential thread from user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="55" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="929" bodyend="944" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="55" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a22cfe948c18142ba6ade01c596c531d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_higher_prio_thread_from_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_higher_prio_thread_from_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Thread creation with prority is higher than current thread. </para>
        </briefdescription>
        <detaileddescription>
<para>_handler_k_thread_create validation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="56" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="975" bodyend="991" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="56" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a512b3074a78a25a27ea3437e54aad2ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_create_new_invalid_prio_thread_from_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_create_new_invalid_prio_thread_from_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new thread whose prority is invalid. </para>
        </briefdescription>
        <detaileddescription>
<para>_handler_k_thread_create validation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="57" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1022" bodyend="1038" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="57" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ad348dd28e2c74cebfada973fc66415b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mark_thread_exit_uninitialized</definition>
        <argsstring>(void)</argsstring>
        <name>test_mark_thread_exit_uninitialized</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test when thread exits, kernel marks stack objects uninitialized. </para>
        </briefdescription>
        <detaileddescription>
<para>When thread exits, the kernel upon thread exit, should mark the exiting thread and thread stack object as uninitialized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="58" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1065" bodyend="1093" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="58" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ab8e9b3bf08f16b2c2366333930a3cc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_krnl_obj_static_alloc_build_time</definition>
        <argsstring>(void)</argsstring>
        <name>test_krnl_obj_static_alloc_build_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="59" column="13" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="59" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a8c452aa931d8d68d2c43ddaf1bc1aef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_overlap</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_overlap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test system assert when new partition overlaps the existing partition. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Test assertion if the new partition overlaps existing partition in domain</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>System testing</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Define testing memory partition overlap_part with the same start ro_buf as has the existing memory partition ro_part</para>
</listitem><listitem><para>Try to add overlap_part to the memory domain. When adding the new partition to the memory domain the system will assert that new partition overlaps with the existing partition ro_part .</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>Must happen an assertion error indicating that the new partition overlaps the existing one.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Success if the overlap assertion will happen.</para>
</listitem><listitem><para>Failure if the overlap assertion will not happen.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="60" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="393" bodyend="400" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="60" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a385e2c5dad5a5d6e17305449fec5d06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mem_part_assert_add_overmax</definition>
        <argsstring>(void)</argsstring>
        <name>test_mem_part_assert_add_overmax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test system assert when adding memory partitions more than possible. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Add memory partitions one by one and more than architecture allows to add.</para>
</listitem><listitem><para>When partitions added more than it is allowed by architecture, test that <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> returns non-zero. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="61" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_domain.c" bodystart="433" bodyend="451" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="61" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a530595eadfda40cd5573c76438462d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_grant_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_grant_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test grant access of given NULL kobject. </para>
        </briefdescription>
        <detaileddescription>
<para>Call function with a NULL parameter in supervisor mode, nothing happened.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="62" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="66" bodyend="69" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="62" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a7d8f29ca26ce7acc8ecdce55528ea47b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_grant_error_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_grant_error_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test grant access of given NULL thread in usermode. </para>
        </briefdescription>
        <detaileddescription>
<para>Call function with NULL parameter, an expected fault happened.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="63" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="81" bodyend="100" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ad63f4c0189ae388a36ebd1d4bb19030f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_grant_error_user_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_grant_error_user_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test grant access of given NULL kobject in usermode. </para>
        </briefdescription>
        <detaileddescription>
<para>Call function with a NULL parameter, an expected fault happened.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="64" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="112" bodyend="117" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="64" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a4da6c03cb47564b4d536cceb3c4a9cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_access_all_grant_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_access_all_grant_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test grant access to all the kobject for thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Call function with a NULL parameter, an expected fault happened.</para>
<para><simplesect kind="see"><para>k_thread_access_all_grant() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="65" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="129" bodyend="134" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="65" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ae9e91c1692620931cd2395b4f0ed3f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_invalid</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_invalid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test release and access grant an invaild kobject. </para>
        </briefdescription>
        <detaileddescription>
<para>Validate release and access grant an invalid kernel object.</para>
<para><simplesect kind="see"><para><ref refid="group__usermode__apis_1ga3cb1a024c0178918def2dd0186e565b3" kindref="member">k_object_release()</ref>, <ref refid="group__usermode__apis_1gababc731e98a6378323c0d633b2abaa6a" kindref="member">k_object_access_all_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="66" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="373" bodyend="379" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="66" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a889b929c625e0771fdadd67e626e23ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_free_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_free_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test free an invalid kernel object. </para>
        </briefdescription>
        <detaileddescription>
<para>Spawn a thread free a NULL, an expected fault happened.</para>
<para><simplesect kind="see"><para><ref refid="group__usermode__apis_1gaf66c8cbe6e0a387551c5bebb6634bde2" kindref="member">k_object_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="67" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1114" bodyend="1129" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="67" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a7b558210687290ff24f6e010fe8f0c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_init_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_init_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test alloc an invalid kernel object. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate invalid kernel objects, then no alloction will be returned.</para>
<para><simplesect kind="see"><para>k_object_alloc() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="68" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1141" bodyend="1152" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="68" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1ac1d4b3ad22703d4cb2d0433f7446e7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobj_create_out_of_memory</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobj_create_out_of_memory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test kernel object until out of memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a dynamic kernel object repeatedly until run out of all heap memory, an expected out of memory error generated.</para>
<para><simplesect kind="see"><para>k_object_alloc() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="69" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1164" bodyend="1190" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="69" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a31212ba731f42b9b3754ac0a8d19ce5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_thread_alloc_out_of_idx</definition>
        <argsstring>(void)</argsstring>
        <name>test_thread_alloc_out_of_idx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="70" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1207" bodyend="1247" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a74d76fe246f3e3c35c6935f165e294b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_alloc_kobjects</definition>
        <argsstring>(void)</argsstring>
        <name>test_alloc_kobjects</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test kernel object allocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate all kinds of kernel object and do permission operation functions.</para>
<para><simplesect kind="see"><para>k_object_alloc() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="71" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1259" bodyend="1322" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="71" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a1014f7d22ce3b5ebf4e52694d14539d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_kobject_perm_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_kobject_perm_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test grant access failed in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Before grant access of static kobject to user thread, any grant access to this thread, will trigger an expected thread permission error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1gafec540511e6d2e0a074a5bfb515c53b0" kindref="member">k_thread_access_grant()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="72" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1357" bodyend="1385" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="72" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a879c91ce7cd3d820a1c19c8843875624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_all_kobjects_str</definition>
        <argsstring>(void)</argsstring>
        <name>test_all_kobjects_str</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test get all kernel object list. </para>
        </briefdescription>
        <detaileddescription>
<para>Get all of the kernel object in kobject list. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="73" column="13" bodyfile="tests/kernel/mem_protect/mem_protect/src/kobject.c" bodystart="1396" bodyend="1414" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void set_fault_valid</definition>
        <argsstring>(bool valid)</argsstring>
        <name>set_fault_valid</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>valid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="79" column="20" bodyfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" bodystart="79" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="mem__protect_8h_1a9b9a62d7516d3a56eaf2c6110dd9072d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
        <definition>struct k_heap * ret_resource_pool_ptr</definition>
        <argsstring>(void)</argsstring>
        <name>ret_resource_pool_ptr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" line="151" column="14" declfile="tests/kernel/mem_protect/mem_protect/src/mem_protect.h" declline="151" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017,<sp/>2020<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="kernel__structs_8h" kindref="compound">kernel_structs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdlib_8h" kindref="compound">stdlib.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a56ba85a91402ebff75f322475724d219" kindref="member">test_permission_inheritance</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ab37f929ccd6c4a6ec2b2f8d60606e100" kindref="member">test_inherit_resource_pool</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a8b8b2ddc3a475613ecd0c5aced042058" kindref="member">test_mem_domain_setup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1af89e0b7de5bd61950c2eacca2e950af3" kindref="member">test_mem_domain_valid_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a2d423ef303187c3e57dc8a5f5164fbbc" kindref="member">test_mem_domain_invalid_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a334678a0007fe2d5e8366da7e77407e8" kindref="member">test_mem_domain_no_writes_to_ro</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ab2d95932f1b7fd8def90d788f0b704c3" kindref="member">test_mem_domain_remove_add_partition</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a9cea68be4e91c450e75aabec206aaacd" kindref="member">test_mem_domain_api_supervisor_only</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a135b7b7054cf989f021cc001a060c837" kindref="member">test_mem_domain_boot_threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a66695f107be50be6b6811e12f99d997a" kindref="member">test_mem_domain_migration</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1aae1379b152838b79bbf8be04938a8173" kindref="member">test_mem_domain_init_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a0cdcc251c234fb2c7150df5e56fa5b78" kindref="member">test_mem_domain_remove_part_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a83f139a28d365568e4bb04c65cebf12a" kindref="member">test_mem_part_add_error_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a29f1f2f86632556046daf12d6a985a6e" kindref="member">test_mem_part_add_error_zerosize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a1d1a65d9e3abd4b508f0ca9b1f6910df" kindref="member">test_mem_part_error_wraparound</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a71142b3b74ff9d1f32e25c4a4b763591" kindref="member">test_mem_part_remove_error_zerosize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="mem__protect_8h_1a0bd2840440ac5b91e50ad5bf1657770b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a0bd2840440ac5b91e50ad5bf1657770b" kindref="member">test_macros_obtain_names_data_bss</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32" refid="mem__protect_8h_1a753447ccb1fb2c8f1bc1569140a00458" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a753447ccb1fb2c8f1bc1569140a00458" kindref="member">test_mem_part_assign_bss_vars_zero</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33" refid="mem__protect_8h_1aec712917793d457c9f5b82ec1dd0724f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1aec712917793d457c9f5b82ec1dd0724f" kindref="member">test_mem_part_auto_determ_size</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1aab672980aad65c6fc2f4f9b76fa9da2f" kindref="member">test_kobject_access_grant</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1aff41de862979fb5a6296a2ae07df6b6b" kindref="member">test_syscall_invalid_kobject</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a624a2a75324b61c1cf8c2ae6e18323ff" kindref="member">test_thread_without_kobject_permission</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a2ac642c55538df6d6f07448764d1345e" kindref="member">test_kobject_revoke_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a3f824f076eba7b5faba313968345ce19" kindref="member">test_kobject_grant_access_kobj</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1aa9f5c6f6c41ffbe8243064bcf26a722d" kindref="member">test_kobject_grant_access_kobj_invalid</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ab6477e3d247de7d00760029682b92cfd" kindref="member">test_kobject_release_from_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a518d6ad7708e28d34a7ff6300e6a7ae5" kindref="member">test_kobject_access_all_grant</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a1d079fd39b0030a5aa0ffa0bc14762c2" kindref="member">test_thread_has_residual_permissions</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a524bff5a2453bf920bf69e45fc0974ab" kindref="member">test_kobject_access_grant_to_invalid_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a2744c81a11d9bd2363cf25066fe94ce6" kindref="member">test_kobject_access_invalid_kobject</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ad72a838230c633930d7cd230794be891" kindref="member">test_access_kobject_without_init_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ace6c401dbb827ce99780f219d4965e19" kindref="member">test_access_kobject_without_init_with_access</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1acc771c03532adf85548caeae755363da" kindref="member">test_kobject_reinitialize_thread_kobj</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a2f2155ae5900fafb5178abf5ed564f2d" kindref="member">test_create_new_thread_from_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ad1d257f149e9427648fce5868a12b40e" kindref="member">test_new_user_thread_with_in_use_stack_obj</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a882d2d56884634274a8b9cc2c02b86f8" kindref="member">test_create_new_thread_from_user_no_access_stack</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ad6d3f3e1d8c3c49a71d3a03fce075b1e" kindref="member">test_create_new_thread_from_user_invalid_stacksize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ad84b40a95979d504eb717e3e6c660a87" kindref="member">test_create_new_thread_from_user_huge_stacksize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a8a9a77c0d8d7a50fc5570ded11f7e025" kindref="member">test_create_new_supervisor_thread_from_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ad8f4c029e42dac2b3ea85ab31c12d447" kindref="member">test_create_new_essential_thread_from_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a22cfe948c18142ba6ade01c596c531d9" kindref="member">test_create_new_higher_prio_thread_from_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a512b3074a78a25a27ea3437e54aad2ce" kindref="member">test_create_new_invalid_prio_thread_from_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ad348dd28e2c74cebfada973fc66415b4" kindref="member">test_mark_thread_exit_uninitialized</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59" refid="mem__protect_8h_1ab8e9b3bf08f16b2c2366333930a3cc1c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ab8e9b3bf08f16b2c2366333930a3cc1c" kindref="member">test_krnl_obj_static_alloc_build_time</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a8c452aa931d8d68d2c43ddaf1bc1aef2" kindref="member">test_mem_part_overlap</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a385e2c5dad5a5d6e17305449fec5d06b" kindref="member">test_mem_part_assert_add_overmax</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a530595eadfda40cd5573c76438462d24" kindref="member">test_kobject_access_grant_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a7d8f29ca26ce7acc8ecdce55528ea47b" kindref="member">test_kobject_access_grant_error_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ad63f4c0189ae388a36ebd1d4bb19030f" kindref="member">test_kobject_access_grant_error_user_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a4da6c03cb47564b4d536cceb3c4a9cae" kindref="member">test_kobject_access_all_grant_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ae9e91c1692620931cd2395b4f0ed3f42" kindref="member">test_kobject_invalid</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a889b929c625e0771fdadd67e626e23ab" kindref="member">test_kobject_free_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a7b558210687290ff24f6e010fe8f0c09" kindref="member">test_kobject_init_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1ac1d4b3ad22703d4cb2d0433f7446e7fe" kindref="member">test_kobj_create_out_of_memory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a31212ba731f42b9b3754ac0a8d19ce5c" kindref="member">test_thread_alloc_out_of_idx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a74d76fe246f3e3c35c6935f165e294b3" kindref="member">test_alloc_kobjects</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a1014f7d22ce3b5ebf4e52694d14539d4" kindref="member">test_kobject_perm_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a879c91ce7cd3d820a1c19c8843875624" kindref="member">test_all_kobjects_str</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flag<sp/>needed<sp/>to<sp/>figure<sp/>out<sp/>if<sp/>the<sp/>fault<sp/>was<sp/>expected<sp/>or<sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a8c886bf9632d5b647c673e1cc7af9620" kindref="member">valid_fault</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mem__protect_8h_1a6bc9c5485934a1cb634735eebe320cfe" kindref="member">set_fault_valid</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mem__protect_8h_1a8c886bf9632d5b647c673e1cc7af9620" kindref="member">valid_fault</ref><sp/>=<sp/>valid;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>a<sp/>barrier<sp/>here,<sp/>such<sp/>that<sp/>no<sp/>instructions<sp/>get<sp/>ordered<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compiler<sp/>before<sp/>we<sp/>set<sp/>valid_fault.<sp/>This<sp/>can<sp/>happen<sp/>with<sp/>expansion</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>inline<sp/>syscall<sp/>invocation<sp/>functions.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler_barrier();</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>inherit.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="mem__protect_8h_1a8ee979cf43e9512235b230adb4ed40e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INHERIT_STACK_SIZE<sp/>CONFIG_MAIN_STACK_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="mem__protect_8h_1a460c3954e5b249407aa0de9dad360025" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_MAX_COUNT<sp/>(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="mem__protect_8h_1a19e7f3a6c7e2273e89f49db644350c55" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_INIT_COUNT<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="mem__protect_8h_1a2f50e6fe0315f662fe667f106efbaac1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNC_SEM_MAX_COUNT<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="mem__protect_8h_1af7a7f5603ec3a32e67a6613cbf495b1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNC_SEM_INIT_COUNT<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="mem__protect_8h_1ad26bfccbdcf95b9f58ac00c02999c2ea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSG_Q_SIZE<sp/>(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="mem__protect_8h_1a7f4e9e375c31bec11cf35f99a965bf2b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSG_Q_MAX_NUM_MSGS<sp/>(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="mem__protect_8h_1aa5428a7edeec43ef8e686940f221e780" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSG_Q_ALIGN<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="mem__protect_8h_1a25e7852941475e51c875632ac1985d8a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRIORITY<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="mem__protect_8h_1a6423a880df59733d2d9b509c7718d3a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="mem__protect_8h_1abf2f644fd3fbae3f1262ece9914b49cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_SIZE_MIN<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="mem__protect_8h_1a75341588e628cc8059088830880e11ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_SIZE_MAX<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="mem__protect_8h_1a5b36f40d28e57c40d7a56e926f36c8f1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_NUM_MIN<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="mem__protect_8h_1a178957a5641420997da764653ff30bc4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_NUM_MAX<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="mem__protect_8h_1a66edaa498a82de98246e8be258cb0e06" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_ALIGN<sp/>BLK_SIZE_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="mem__protect_8h_1a1921ee8629c4482331e5a78d5dfc21d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEM_INIT_VAL<sp/>(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="mem__protect_8h_1a40245d4b511683879535bdf5d95e855e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEM_MAX_VAL<sp/>(1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>mem_domain.c<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="mem__protect_8h_1aa8e10e0e22bcc93afc08ac2031d63555" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_DOMAIN_STACK_SIZE<sp/>CONFIG_MAIN_STACK_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="mem__protect_8h_1a5a88b28b35bec9cbd6a4afcf1960e1b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_PARTITION_INIT_NUM<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="mem__protect_8h_1a74e0f8753e36d617a287cc2562824a3b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_SIZE_MIN_MD<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="mem__protect_8h_1a65a6eabed6ecde9f1eaf57639fdc3a24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_SIZE_MAX_MD<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="mem__protect_8h_1a03ce2723018ac78067b43dc5fceaf91a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_NUM_MAX_MD<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="mem__protect_8h_1a9a76ba46a2904c02ac67761ba748d842" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLK_ALIGN_MD<sp/>BLK_SIZE_MIN_MD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="mem__protect_8h_1a550a75944350b926760a1bf0c553d87f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DESC_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(struct<sp/>sys_mem_pool_block)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="mem__protect_8h_1a7c85443c1df20cf27ebfcb90abb5f9a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE_MD<sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="mem__protect_8h_1a31b01494975bd3ea9792063fa6e4853c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRIORITY_MD<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_X86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_REGION_ALLOC<sp/>(4096)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_REGION_ALLOC<sp/>(Z_ARC_MPU_ALIGN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_REGION_ALLOC<sp/>(4096)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_REGION_ALLOC<sp/>(Z_THREAD_MIN_STACK_ALIGN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CONFIG_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_REGION_ALLOC<sp/>(Z_RISCV_PMP_ALIGN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Test<sp/>suite<sp/>not<sp/>compatible<sp/>for<sp/>the<sp/>given<sp/>architecture&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="mem__protect_8h_1a3c2d0d295d142e2ad1dcfd544fd64ad9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEM_DOMAIN_ALIGNMENT<sp/>__aligned(MEM_REGION_ALLOC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>kobject.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="mem__protect_8h_1aa7f7c04898e26208c8e5a091e99e699e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KOBJECT_STACK_SIZE<sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CONFIG_X86_64)<sp/>||<sp/>defined(CONFIG_ARM64)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(defined(CONFIG_RISCV)<sp/>&amp;&amp;<sp/>defined(CONFIG_64BIT)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_HEAP_SIZE<sp/><sp/>(2<sp/>&lt;&lt;<sp/>CONFIG_MAX_THREAD_BYTES)<sp/>*<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_OBJ<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="mem__protect_8h_1a0a7ca37d14b7525d6ae43b12ee16bfda" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_HEAP_SIZE<sp/><sp/>(2<sp/>&lt;&lt;<sp/>CONFIG_MAX_THREAD_BYTES)<sp/>*<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="mem__protect_8h_1a8e497c59a3362df6102c893a8498acd0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_OBJ<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_TEST_SYSCALLS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_TEST_SYSCALLS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="mem__protect_8h_1a9b9a62d7516d3a56eaf2c6110dd9072d" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/>*<ref refid="mem__protect_8h_1a9b9a62d7516d3a56eaf2c6110dd9072d" kindref="member">ret_resource_pool_ptr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/mem_protect.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_TEST_SYSCALLS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="tests/kernel/mem_protect/mem_protect/src/mem_protect.h"/>
  </compounddef>
</doxygen>
