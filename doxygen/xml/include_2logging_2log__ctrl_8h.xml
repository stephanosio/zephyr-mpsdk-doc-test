<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="include_2logging_2log__ctrl_8h" kind="file" language="C++">
    <compoundname>log_ctrl.h</compoundname>
    <includes local="no">kernel.h</includes>
    <includes refid="log__backend_8h" local="no">logging/log_backend.h</includes>
    <includes refid="log__msg_8h" local="no">logging/log_msg.h</includes>
    <includes refid="log__internal_8h" local="no">logging/log_internal.h</includes>
    <includes refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__ctrl_8h" local="no">syscalls/log_ctrl.h</includes>
    <incdepgraph>
      <node id="3">
        <label>logging/log_backend.h</label>
        <link refid="log__backend_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>logging/log_core.h</label>
        <link refid="include_2logging_2log__core_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/logging/log_ctrl.h</label>
        <link refid="include_2logging_2log__ctrl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>logging/log_instance.h</label>
        <link refid="log__instance_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>logging/log_internal.h</label>
        <link refid="log__internal_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>logging/log_output.h</label>
        <link refid="log__output_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="20">
        <label>sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="23">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sys/mpsc_packet.h</label>
        <link refid="mpsc__packet_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="11">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="9">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="10">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="22">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>syscalls/log_core.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__core_8h"/>
      </node>
      <node id="38">
        <label>syscalls/log_ctrl.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__ctrl_8h"/>
      </node>
      <node id="29">
        <label>syscalls/log_msg2.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__msg2_8h"/>
      </node>
      <node id="28">
        <label>alloca.h</label>
      </node>
      <node id="2">
        <label>kernel.h</label>
      </node>
      <node id="21">
        <label>stdarg.h</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="36">
        <label>syscall.h</label>
      </node>
      <node id="26">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__log__ctrl_1gabb1d00fe08bc48ed4d352ce61b0e0582" prot="public" static="no">
        <name>LOG_CORE_INIT</name>
        <param></param>
        <initializer>do { } while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="272" column="10" bodyfile="include/logging/log_ctrl.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__ctrl_1ga062ce2496c8e47adec91c0d11744a7a7" prot="public" static="no">
        <name>LOG_INIT</name>
        <param></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="273" column="9" bodyfile="include/logging/log_ctrl.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__ctrl_1ga9ee5a99e0487e3f1e6d289b12c19ad5a" prot="public" static="no">
        <name>LOG_PANIC</name>
        <param></param>
        <initializer>/* Empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="274" column="9" bodyfile="include/logging/log_ctrl.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__ctrl_1gacd14d69929496cea19c699509eb5ea1b" prot="public" static="no">
        <name>LOG_PROCESS</name>
        <param></param>
        <initializer><ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="275" column="9" bodyfile="include/logging/log_ctrl.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__log__ctrl_1gae7aaa810aabda4aed6226a85f28d6fbb" prot="public" static="no">
        <type><ref refid="include_2logging_2log__msg2_8h_1acbc134e9ee5f3768a534d95a4c8335e8" kindref="member">log_timestamp_t</ref>(*</type>
        <definition>typedef log_timestamp_t(* log_timestamp_get_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>log_timestamp_get_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="33" column="9" bodyfile="include/logging/log_ctrl.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__log__ctrl_1ga338338de3c3e3ce6d3ea7ca6a6fa83e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_core_init</definition>
        <argsstring>(void)</argsstring>
        <name>log_core_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function system initialization of the logger. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is called during start up to allow logging before user can explicitly initialize the logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="40" column="6" declfile="include/logging/log_ctrl.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga2508fad025e49f9746b6c178dce6917e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_init</definition>
        <argsstring>(void)</argsstring>
        <name>log_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for user initialization of the logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="46" column="6" declfile="include/logging/log_ctrl.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga5f58516c3c155dde0f44ea9cc7cd8b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_thread_set</definition>
        <argsstring>(k_tid_t process_tid)</argsstring>
        <name>log_thread_set</name>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>process_tid</declname>
        </param>
        <briefdescription>
<para>Function for providing thread which is processing logs. </para>
        </briefdescription>
        <detaileddescription>
<para>See CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD.</para>
<para><simplesect kind="note"><para>Function has asserts and has no effect when CONFIG_LOG_PROCESS_THREAD is set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>process_tid</parametername>
</parameternamelist>
<parameterdescription>
<para>Process thread id. Used to wake up the thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="57" column="6" declfile="include/logging/log_ctrl.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1gaea92150610f900ab1258cbce65662ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int log_set_timestamp_func</definition>
        <argsstring>(log_timestamp_get_t timestamp_getter, uint32_t freq)</argsstring>
        <name>log_set_timestamp_func</name>
        <param>
          <type><ref refid="group__log__ctrl_1gae7aaa810aabda4aed6226a85f28d6fbb" kindref="member">log_timestamp_get_t</ref></type>
          <declname>timestamp_getter</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>freq</declname>
        </param>
        <briefdescription>
<para>Function for providing timestamp function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timestamp_getter</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamping frequency.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="67" column="5" declfile="include/logging/log_ctrl.h" declline="67" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga6a4d408fc9d7c55366cd7a02850b03f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_panic</definition>
        <argsstring>(void)</argsstring>
        <name>log_panic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Switch the logger subsystem to the panic mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns immediately if the logger is already in the panic mode.</para>
<para>On panic the logger subsystem informs all backends about panic mode. Backends must switch to blocking mode or halt. All pending logs are flushed after switching to panic mode. In panic mode, all log messages must be processed in the context of the call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="80" column="7" declfile="include/logging/log_ctrl.h" declline="80" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga47a27bdcc8675f51dde7ff18fb0284e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool log_process</definition>
        <argsstring>(bool bypass)</argsstring>
        <name>log_process</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>bypass</declname>
        </param>
        <briefdescription>
<para>Process one pending log message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bypass</parametername>
</parameternamelist>
<parameterdescription>
<para>If true message is released without being processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>There is more messages pending to be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No messages pending. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="90" column="7" declfile="include/logging/log_ctrl.h" declline="90" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1gab6785b1f77080bbaf9f5ac3bfe0fd23c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_buffered_cnt</definition>
        <argsstring>(void)</argsstring>
        <name>log_buffered_cnt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return number of buffered log messages. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of currently buffered log messages. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="97" column="11" declfile="include/logging/log_ctrl.h" declline="97" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga10b12f5c462f3d0f1cb8d60ead802c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_src_cnt_get</definition>
        <argsstring>(uint32_t domain_id)</argsstring>
        <name>log_src_cnt_get</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>domain_id</declname>
        </param>
        <briefdescription>
<para>Get number of independent logger sources (modules and instances) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain ID.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sources. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="105" column="10" declfile="include/logging/log_ctrl.h" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga7047a91d157b329362cff22784472c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * log_source_name_get</definition>
        <argsstring>(uint32_t domain_id, uint32_t source_id)</argsstring>
        <name>log_source_name_get</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>domain_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>source_id</declname>
        </param>
        <briefdescription>
<para>Get name of the source (module or instance). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Source ID.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Source name or NULL if invalid arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="115" column="12" declfile="include/logging/log_ctrl.h" declline="115" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1gac20a57745d0a10e6cf100eb47eb9561d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * log_domain_name_get</definition>
        <argsstring>(uint32_t domain_id)</argsstring>
        <name>log_domain_name_get</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>domain_id</declname>
        </param>
        <briefdescription>
<para>Get name of the domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain ID.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Domain name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="123" column="12" declfile="include/logging/log_ctrl.h" declline="123" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga83b8fe6d2592f02fe8a73faed819c3ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_filter_get</definition>
        <argsstring>(struct log_backend const *const backend, uint32_t domain_id, int16_t source_id, bool runtime)</argsstring>
        <name>log_filter_get</name>
        <param>
          <type>struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> const *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>domain_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1afe270aee8d96ad7f279a4020b9d58bdf" kindref="member">int16_t</ref></type>
          <declname>source_id</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>runtime</declname>
        </param>
        <briefdescription>
<para>Get source filter for the provided backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Source (module or instance) ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runtime</parametername>
</parameternamelist>
<parameterdescription>
<para>True for runtime filter or false for compiled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Severity level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="135" column="10" declfile="include/logging/log_ctrl.h" declline="135" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga32956e4ba4ed92e5e5aeb5503be0047e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_filter_set</definition>
        <argsstring>(struct log_backend const *const backend, uint32_t domain_id, int16_t source_id, uint32_t level)</argsstring>
        <name>log_filter_set</name>
        <param>
          <type>struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> const *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>domain_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1afe270aee8d96ad7f279a4020b9d58bdf" kindref="member">int16_t</ref></type>
          <declname>source_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set filter on given source for the provided backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend instance. NULL for all backends. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Source (module or instance) ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Severity level.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Actual level set which may be limited by compiled level. If filter was set for all backends then maximal level that was set is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="149" column="11" declfile="include/logging/log_ctrl.h" declline="149" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1gadbd0b5dd8c459c6ef85f9fef4f2bdebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_backend_enable</definition>
        <argsstring>(struct log_backend const *const backend, void *ctx, uint32_t level)</argsstring>
        <name>log_backend_enable</name>
        <param>
          <type>struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> const *const</type>
          <declname>backend</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Enable backend with initial maximum filtering level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>User context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Severity level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="161" column="6" declfile="include/logging/log_ctrl.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1gaf5d428f18b00138fd2ccca190981191d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_backend_disable</definition>
        <argsstring>(struct log_backend const *const backend)</argsstring>
        <name>log_backend_disable</name>
        <param>
          <type>struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> const *const</type>
          <declname>backend</declname>
        </param>
        <briefdescription>
<para>Disable backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Backend instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="171" column="6" declfile="include/logging/log_ctrl.h" declline="171" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga8c374e83492b221eeaf2c2b0f38e3b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *</type>
        <definition>const struct log_backend * log_backend_get_by_name</definition>
        <argsstring>(const char *backend_name)</argsstring>
        <name>log_backend_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>backend_name</declname>
        </param>
        <briefdescription>
<para>Get backend by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">backend_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the backend as defined by the LOG_BACKEND_DEFINE.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to the backend instance if found, NULL if backend is not found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="180" column="24" declfile="include/logging/log_ctrl.h" declline="180" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1gaeaaaa2e68877837a4af20fa172fc2f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structlog__backend" kindref="compound">log_backend</ref> *</type>
        <definition>const struct log_backend * log_format_set_all_active_backends</definition>
        <argsstring>(size_t log_type)</argsstring>
        <name>log_format_set_all_active_backends</name>
        <param>
          <type>size_t</type>
          <declname>log_type</declname>
        </param>
        <briefdescription>
<para>Sets logging format for all active backends. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Log format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to the last backend that failed, NULL for success. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="188" column="24" declfile="include/logging/log_ctrl.h" declline="188" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga58c62e37b9fe470e0b0fc22967fa164d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_get_strdup_pool_current_utilization</definition>
        <argsstring>(void)</argsstring>
        <name>log_get_strdup_pool_current_utilization</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get current number of allocated buffers for string duplicates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="193" column="10" declfile="include/logging/log_ctrl.h" declline="193" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga0f5f78bf165604a1e1008a54f04dc85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_get_strdup_pool_utilization</definition>
        <argsstring>(void)</argsstring>
        <name>log_get_strdup_pool_utilization</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get maximal number of simultaneously allocated buffers for string duplicates. </para>
        </briefdescription>
        <detaileddescription>
<para>Value can be used to determine pool size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="201" column="10" declfile="include/logging/log_ctrl.h" declline="201" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga098c342ec5c975a6c2dd2fbada365f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t log_get_strdup_longest_string</definition>
        <argsstring>(void)</argsstring>
        <name>log_get_strdup_longest_string</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get length of the longest string duplicated. </para>
        </briefdescription>
        <detaileddescription>
<para>Value can be used to determine buffer size in the string duplicates pool. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="208" column="10" declfile="include/logging/log_ctrl.h" declline="208" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga6d6c48ddd4b6739e34fde2098ad61731" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool log_data_pending</definition>
        <argsstring>(void)</argsstring>
        <name>log_data_pending</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if there is pending data to be processed by the logging subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para>Function can be used to determine if all logs have been flushed. Function returns false when deferred mode is not enabled.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>There is pending data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No pending data to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="219" column="20" bodyfile="include/logging/log_ctrl.h" bodystart="219" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga58499087f61cc377615311498eedf1ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int log_set_tag</definition>
        <argsstring>(const char *tag)</argsstring>
        <name>log_set_tag</name>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Configure tag used to prefix each message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Tag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on successful operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if feature is disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if string is longer than the buffer capacity. Tag will be trimmed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="238" column="5" declfile="include/logging/log_ctrl.h" declline="238" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga5f3487ab08e421ae7ce8a8b80310a338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int log_mem_get_usage</definition>
        <argsstring>(uint32_t *buf_size, uint32_t *usage)</argsstring>
        <name>log_mem_get_usage</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>usage</declname>
        </param>
        <briefdescription>
<para>Get current memory usage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Capacity of the buffer used for storing log messages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">usage</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes currently containing pending log messages.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if logging mode does not use the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>successfully collected usage data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="249" column="5" declfile="include/logging/log_ctrl.h" declline="249" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__log__ctrl_1ga2d3f29bf2783e70242c8608a20a934ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int log_mem_get_max_usage</definition>
        <argsstring>(uint32_t *max)</argsstring>
        <name>log_mem_get_max_usage</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Get maximum memory usage. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires CONFIG_LOG_MEM_UTILIZATION option.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes used for pending log messages.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if logging mode does not use the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if instrumentation is not enabled. not been enabled.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>successfully collected usage data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_ctrl.h" line="264" column="5" declfile="include/logging/log_ctrl.h" declline="264" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_CTRL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_CTRL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log__backend_8h" kindref="compound">logging/log_backend.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log__msg_8h" kindref="compound">logging/log_msg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log__internal_8h" kindref="compound">logging/log_internal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="group__log__ctrl_1gae7aaa810aabda4aed6226a85f28d6fbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="include_2logging_2log__msg2_8h_1acbc134e9ee5f3768a534d95a4c8335e8" kindref="member">log_timestamp_t</ref><sp/>(*<ref refid="group__log__ctrl_1gae7aaa810aabda4aed6226a85f28d6fbb" kindref="member">log_timestamp_get_t</ref>)(void);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__log__ctrl_1ga338338de3c3e3ce6d3ea7ca6a6fa83e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga338338de3c3e3ce6d3ea7ca6a6fa83e0" kindref="member">log_core_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group__log__ctrl_1ga2508fad025e49f9746b6c178dce6917e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga2508fad025e49f9746b6c178dce6917e" kindref="member">log_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group__log__ctrl_1ga5f58516c3c155dde0f44ea9cc7cd8b37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga5f58516c3c155dde0f44ea9cc7cd8b37" kindref="member">log_thread_set</ref>(<ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/>process_tid);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="group__log__ctrl_1gaea92150610f900ab1258cbce65662ae6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1gaea92150610f900ab1258cbce65662ae6" kindref="member">log_set_timestamp_func</ref>(<ref refid="group__log__ctrl_1gae7aaa810aabda4aed6226a85f28d6fbb" kindref="member">log_timestamp_get_t</ref><sp/>timestamp_getter,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>freq);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="group__log__ctrl_1ga6a4d408fc9d7c55366cd7a02850b03f5" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga6a4d408fc9d7c55366cd7a02850b03f5" kindref="member">log_panic</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="group__log__ctrl_1ga47a27bdcc8675f51dde7ff18fb0284e2" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga47a27bdcc8675f51dde7ff18fb0284e2" kindref="member">log_process</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bypass);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="group__log__ctrl_1gab6785b1f77080bbaf9f5ac3bfe0fd23c" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__log__ctrl_1gab6785b1f77080bbaf9f5ac3bfe0fd23c" kindref="member">log_buffered_cnt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="group__log__ctrl_1ga10b12f5c462f3d0f1cb8d60ead802c9a" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__log__ctrl_1ga10b12f5c462f3d0f1cb8d60ead802c9a" kindref="member">log_src_cnt_get</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>domain_id);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="group__log__ctrl_1ga7047a91d157b329362cff22784472c83" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__log__ctrl_1ga7047a91d157b329362cff22784472c83" kindref="member">log_source_name_get</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>domain_id,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>source_id);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="group__log__ctrl_1gac20a57745d0a10e6cf100eb47eb9561d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__log__ctrl_1gac20a57745d0a10e6cf100eb47eb9561d" kindref="member">log_domain_name_get</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>domain_id);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="group__log__ctrl_1ga83b8fe6d2592f02fe8a73faed819c3ce" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__log__ctrl_1ga83b8fe6d2592f02fe8a73faed819c3ce" kindref="member">log_filter_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__backend" kindref="compound">log_backend</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>backend,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>domain_id,<sp/><ref refid="stdint_8h_1afe270aee8d96ad7f279a4020b9d58bdf" kindref="member">int16_t</ref><sp/>source_id,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>runtime);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="group__log__ctrl_1ga32956e4ba4ed92e5e5aeb5503be0047e" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__log__ctrl_1ga32956e4ba4ed92e5e5aeb5503be0047e" kindref="member">log_filter_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__backend" kindref="compound">log_backend</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>backend,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>domain_id,<sp/><ref refid="stdint_8h_1afe270aee8d96ad7f279a4020b9d58bdf" kindref="member">int16_t</ref><sp/>source_id,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>level);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="group__log__ctrl_1gadbd0b5dd8c459c6ef85f9fef4f2bdebf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1gadbd0b5dd8c459c6ef85f9fef4f2bdebf" kindref="member">log_backend_enable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__backend" kindref="compound">log_backend</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>backend,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>level);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="group__log__ctrl_1gaf5d428f18b00138fd2ccca190981191d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1gaf5d428f18b00138fd2ccca190981191d" kindref="member">log_backend_disable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__backend" kindref="compound">log_backend</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>backend);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="group__log__ctrl_1ga8c374e83492b221eeaf2c2b0f38e3b42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__backend" kindref="compound">log_backend</ref><sp/>*<ref refid="group__log__ctrl_1ga8c374e83492b221eeaf2c2b0f38e3b42" kindref="member">log_backend_get_by_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*backend_name);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="group__log__ctrl_1gaeaaaa2e68877837a4af20fa172fc2f06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__backend" kindref="compound">log_backend</ref><sp/>*<ref refid="group__log__ctrl_1gaeaaaa2e68877837a4af20fa172fc2f06" kindref="member">log_format_set_all_active_backends</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>log_type);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="group__log__ctrl_1ga58c62e37b9fe470e0b0fc22967fa164d" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__log__ctrl_1ga58c62e37b9fe470e0b0fc22967fa164d" kindref="member">log_get_strdup_pool_current_utilization</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="group__log__ctrl_1ga0f5f78bf165604a1e1008a54f04dc85b" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__log__ctrl_1ga0f5f78bf165604a1e1008a54f04dc85b" kindref="member">log_get_strdup_pool_utilization</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="group__log__ctrl_1ga098c342ec5c975a6c2dd2fbada365f6e" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__log__ctrl_1ga098c342ec5c975a6c2dd2fbada365f6e" kindref="member">log_get_strdup_longest_string</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="group__log__ctrl_1ga6d6c48ddd4b6739e34fde2098ad61731" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga6d6c48ddd4b6739e34fde2098ad61731" kindref="member">log_data_pending</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_LOG_MODE_DEFERRED))<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_LOG2)<sp/>?</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_log_msg2_pending()<sp/>:<sp/>(<ref refid="group__log__msg_1gaaf81fbf7786167d3c22074df83636f0e" kindref="member">log_msg_mem_get_used</ref>()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="group__log__ctrl_1ga58499087f61cc377615311498eedf1ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga58499087f61cc377615311498eedf1ae" kindref="member">log_set_tag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="timer_2starve_2src_2main_8c_1aa7eccd3911dd697c8b39d08273f3e64e" kindref="member">tag</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="group__log__ctrl_1ga5f3487ab08e421ae7ce8a8b80310a338" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga5f3487ab08e421ae7ce8a8b80310a338" kindref="member">log_mem_get_usage</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*buf_size,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*usage);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="group__log__ctrl_1ga2d3f29bf2783e70242c8608a20a934ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__log__ctrl_1ga2d3f29bf2783e70242c8608a20a934ee" kindref="member">log_mem_get_max_usage</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*max);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_LOG)<sp/>&amp;&amp;<sp/>!defined(CONFIG_LOG_MODE_MINIMAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_CORE_INIT()<sp/>log_core_init()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INIT()<sp/>log_init()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_PANIC()<sp/>log_panic()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_PROCESS()<sp/>log_process(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="group__log__ctrl_1gabb1d00fe08bc48ed4d352ce61b0e0582" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_CORE_INIT()<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="group__log__ctrl_1ga062ce2496c8e47adec91c0d11744a7a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INIT()<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="group__log__ctrl_1ga9ee5a99e0487e3f1e6d289b12c19ad5a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_PANIC()<sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="group__log__ctrl_1gacd14d69929496cea19c699509eb5ea1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_PROCESS()<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__ctrl_8h" kindref="compound">syscalls/log_ctrl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_CTRL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/logging/log_ctrl.h"/>
  </compounddef>
</doxygen>
