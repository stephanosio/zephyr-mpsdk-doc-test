<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="addr_8h" kind="file" language="C++">
    <compoundname>addr.h</compoundname>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="printk_8h" local="no">sys/printk.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includedby refid="bluetooth_8h" local="no">include/bluetooth/bluetooth.h</includedby>
    <includedby refid="conn_8h" local="no">include/bluetooth/conn.h</includedby>
    <includedby refid="hci_8h" local="no">include/bluetooth/hci.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/bluetooth/addr.h</label>
        <link refid="addr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="9">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="2">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="19">
        <label>include/bluetooth/a2dp.h</label>
        <link refid="a2dp_8h"/>
      </node>
      <node id="1">
        <label>include/bluetooth/addr.h</label>
        <link refid="addr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/bluetooth/att.h</label>
        <link refid="att_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bluetooth/audio/aics.h</label>
        <link refid="aics_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/bluetooth/audio/audio.h</label>
        <link refid="audio_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/bluetooth/audio/capabilities.h</label>
        <link refid="capabilities_8h"/>
      </node>
      <node id="13">
        <label>include/bluetooth/audio/csis.h</label>
        <link refid="csis_8h"/>
      </node>
      <node id="7">
        <label>include/bluetooth/audio/mcc.h</label>
        <link refid="mcc_8h"/>
      </node>
      <node id="6">
        <label>include/bluetooth/audio/media_proxy.h</label>
        <link refid="media__proxy_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/bluetooth/audio/mics.h</label>
        <link refid="mics_8h"/>
      </node>
      <node id="5">
        <label>include/bluetooth/audio/vcs.h</label>
        <link refid="vcs_8h"/>
      </node>
      <node id="18">
        <label>include/bluetooth/avdtp.h</label>
        <link refid="avdtp_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/bluetooth/bluetooth.h</label>
        <link refid="bluetooth_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/bluetooth/buf.h</label>
        <link refid="bluetooth_2buf_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/bluetooth/conn.h</label>
        <link refid="conn_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/bluetooth/gatt.h</label>
        <link refid="gatt_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/bluetooth/hci.h</label>
        <link refid="hci_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>include/bluetooth/hci_vs.h</label>
        <link refid="hci__vs_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>include/bluetooth/hfp_hf.h</label>
        <link refid="hfp__hf_8h"/>
      </node>
      <node id="16">
        <label>include/bluetooth/iso.h</label>
        <link refid="iso_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/bluetooth/l2cap.h</label>
        <link refid="l2cap_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/bluetooth/rfcomm.h</label>
        <link refid="rfcomm_8h"/>
      </node>
      <node id="23">
        <label>include/bluetooth/sdp.h</label>
        <link refid="sdp_8h"/>
      </node>
      <node id="24">
        <label>include/bluetooth/services/ots.h</label>
        <link refid="ots_8h"/>
      </node>
      <node id="21">
        <label>include/drivers/bluetooth/hci_driver.h</label>
        <link refid="hci__driver_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbt__addr__t" prot="public">bt_addr_t</innerclass>
    <innerclass refid="structbt__addr__le__t" prot="public">bt_addr_le_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__addr_1ga1717d2b4e61b28637be8a5f78685a3c4" prot="public" static="no">
        <name>BT_ADDR_LE_PUBLIC</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="28" column="9" bodyfile="include/bluetooth/addr.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga6e81e967527b5418ee6cbc6d72c5aef9" prot="public" static="no">
        <name>BT_ADDR_LE_RANDOM</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="29" column="9" bodyfile="include/bluetooth/addr.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga1fd60d5eb4c8a6d8f4df06eaba85fb96" prot="public" static="no">
        <name>BT_ADDR_LE_PUBLIC_ID</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="30" column="9" bodyfile="include/bluetooth/addr.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gafdf2572991427d95bb44d1a5ee2ad85a" prot="public" static="no">
        <name>BT_ADDR_LE_RANDOM_ID</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="31" column="9" bodyfile="include/bluetooth/addr.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gad02c40564a140300efda28ecb15674be" prot="public" static="no">
        <name>BT_ADDR_LE_UNRESOLVED</name>
        <initializer>				      0xFE /* Resolvable Private Address
				      * (Controller unable to resolve)
				      */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="34" column="9" bodyfile="include/bluetooth/addr.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gab2ddd85c5972a53da0aee3974edc0258" prot="public" static="no">
        <name>BT_ADDR_LE_ANONYMOUS</name>
        <initializer>				      0xFF /* No address provided
				      * (anonymous advertisement)
				      */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="37" column="9" bodyfile="include/bluetooth/addr.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga6b6f56325b5136d2719f02eecc780d49" prot="public" static="no">
        <name>BT_ADDR_SIZE</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length in bytes of a standard Bluetooth address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="40" column="9" bodyfile="include/bluetooth/addr.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga2656b9a936bf8cb9f1cc86668fca6108" prot="public" static="no">
        <name>BT_ADDR_LE_SIZE</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length in bytes of an LE Bluetooth address. Not packed, so no sizeof() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="49" column="9" bodyfile="include/bluetooth/addr.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga40ddc9769e38b7537bbb4e8002de592a" prot="public" static="no">
        <name>BT_ADDR_ANY</name>
        <initializer>((<ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref>[]) { { { 0, 0, 0, 0, 0, 0 } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth device &quot;any&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="58" column="9" bodyfile="include/bluetooth/addr.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gacb24d83ded350176fc96dfc0f5dde6be" prot="public" static="no">
        <name>BT_ADDR_NONE</name>
        <initializer>			 ((<ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref>[]) { { \
			 { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth device &quot;none&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="60" column="9" bodyfile="include/bluetooth/addr.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga17e9efacd50c682b2f709c217e920d48" prot="public" static="no">
        <name>BT_ADDR_LE_ANY</name>
        <initializer>((<ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref>[]) { { 0, { { 0, 0, 0, 0, 0, 0 } } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth LE device &quot;any&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="63" column="9" bodyfile="include/bluetooth/addr.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gadfcc0281e453cba990b623631c26f80b" prot="public" static="no">
        <name>BT_ADDR_LE_NONE</name>
        <initializer>			 ((<ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref>[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bluetooth LE device &quot;none&quot; address, not a valid address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="65" column="9" bodyfile="include/bluetooth/addr.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga32abc1a2e827542efea5b9cb05a57fbc" prot="public" static="no">
        <name>BT_ADDR_IS_RPA</name>
        <param><defname>a</defname></param>
        <initializer>(((a)-&gt;val[5] &amp; 0xc0) == 0x40)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a Bluetooth LE random address is resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="113" column="9" bodyfile="include/bluetooth/addr.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gaa8745bff73c42a693cb76e42755b2bf9" prot="public" static="no">
        <name>BT_ADDR_IS_NRPA</name>
        <param><defname>a</defname></param>
        <initializer>(((a)-&gt;val[5] &amp; 0xc0) == 0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a Bluetooth LE random address is a non-resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="116" column="9" bodyfile="include/bluetooth/addr.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga0cb3aa4d48cf41d8485b570ef0e7447a" prot="public" static="no">
        <name>BT_ADDR_IS_STATIC</name>
        <param><defname>a</defname></param>
        <initializer>(((a)-&gt;val[5] &amp; 0xc0) == 0xc0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a Bluetooth LE random address is a static address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="118" column="9" bodyfile="include/bluetooth/addr.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga52a0bd596e726dff39b247dfbc58406d" prot="public" static="no">
        <name>BT_ADDR_SET_RPA</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;val[5] = (((a)-&gt;val[5] &amp; 0x3f) | 0x40))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a Bluetooth LE random address as a resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="121" column="9" bodyfile="include/bluetooth/addr.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga6b23035316e9bdd071e10ecc803fcdbc" prot="public" static="no">
        <name>BT_ADDR_SET_NRPA</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;val[5] &amp;= 0x3f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a Bluetooth LE random address as a non-resolvable private address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="123" column="9" bodyfile="include/bluetooth/addr.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gaa6261bf0b96099b58f0a0c3674ce5713" prot="public" static="no">
        <name>BT_ADDR_SET_STATIC</name>
        <param><defname>a</defname></param>
        <initializer>((a)-&gt;val[5] |= 0xc0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a Bluetooth LE random address as a static address. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="125" column="9" bodyfile="include/bluetooth/addr.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1ga8097c3b80a5647b0b951d29aa30a397d" prot="public" static="no">
        <name>BT_ADDR_STR_LEN</name>
        <initializer>18</initializer>
        <briefdescription>
<para>Recommended length of user string buffer for Bluetooth address. </para>
        </briefdescription>
        <detaileddescription>
<para>The recommended length guarantee the output of address conversion will not lose valuable information about address being processed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="175" column="9" bodyfile="include/bluetooth/addr.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__addr_1gae0df0067c55eb4388625bb62f3d7e235" prot="public" static="no">
        <name>BT_ADDR_LE_STR_LEN</name>
        <initializer>30</initializer>
        <briefdescription>
<para>Recommended length of user string buffer for Bluetooth LE address. </para>
        </briefdescription>
        <detaileddescription>
<para>The recommended length guarantee the output of address conversion will not lose valuable information about address being processed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="185" column="9" bodyfile="include/bluetooth/addr.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__addr_1ga41ff9419098728f037c3e97d29c30ba9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_cmp</definition>
        <argsstring>(const bt_addr_t *a, const bt_addr_t *b)</argsstring>
        <name>bt_addr_cmp</name>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compare Bluetooth device addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First Bluetooth device address to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second Bluetooth device address to compare</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>negative value if <emphasis>a</emphasis> &lt; <emphasis>b</emphasis>, 0 if <emphasis>a</emphasis> == <emphasis>b</emphasis>, else positive </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="71" column="19" bodyfile="include/bluetooth/addr.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga588d392f51372ff2951c3ff39da22f12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_le_cmp</definition>
        <argsstring>(const bt_addr_le_t *a, const bt_addr_le_t *b)</argsstring>
        <name>bt_addr_le_cmp</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compare Bluetooth LE device addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First Bluetooth LE device address to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second Bluetooth LE device address to compare</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>negative value if <emphasis>a</emphasis> &lt; <emphasis>b</emphasis>, 0 if <emphasis>a</emphasis> == <emphasis>b</emphasis>, else positive </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="83" column="19" bodyfile="include/bluetooth/addr.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga5a8284cf34d0835d725dab31d710ea4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_addr_copy</definition>
        <argsstring>(bt_addr_t *dst, const bt_addr_t *src)</argsstring>
        <name>bt_addr_copy</name>
        <param>
          <type><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy Bluetooth device address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth device address destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth device address source buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="93" column="20" bodyfile="include/bluetooth/addr.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gac6c9b20f17936efaa082fe63aedc2138" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_addr_le_copy</definition>
        <argsstring>(bt_addr_le_t *dst, const bt_addr_le_t *src)</argsstring>
        <name>bt_addr_le_copy</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy Bluetooth LE device address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address source buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="103" column="20" bodyfile="include/bluetooth/addr.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gaf2d38888131c9e8bdbc820b415c14082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_le_create_nrpa</definition>
        <argsstring>(bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_create_nrpa</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create a Bluetooth LE random non-resolvable private address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="124" column="5" declfile="include/bluetooth/addr.h" declline="124" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gad1b43f2f0ab58ec2c5ceaaa0d2cbc444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_le_create_static</definition>
        <argsstring>(bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_create_static</name>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create a Bluetooth LE random static address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="127" column="5" declfile="include/bluetooth/addr.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga42bcee6b5aadde7ccdbe243df25043bc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool bt_addr_le_is_rpa</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_is_rpa</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if a Bluetooth LE address is a random private resolvable address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if address is a random private resolvable address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="136" column="20" bodyfile="include/bluetooth/addr.h" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga7a6acc7a9267ae2645aeee38e553b8b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool bt_addr_le_is_identity</definition>
        <argsstring>(const bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_is_identity</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if a Bluetooth LE address is valid identity address. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid Bluetooth LE identity addresses are either public address or random static address.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth LE device address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if address is a valid identity address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="154" column="20" bodyfile="include/bluetooth/addr.h" bodystart="154" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga151bdd0ada8635acfebd60f0e203cde2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_to_str</definition>
        <argsstring>(const bt_addr_t *addr, char *str, size_t len)</argsstring>
        <name>bt_addr_to_str</name>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Converts binary Bluetooth address to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer containing binary Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of user buffer with enough room to store formatted string containing binary address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be copied to user string buffer. Refer to BT_ADDR_STR_LEN about recommended value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of successfully formatted bytes from binary address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="193" column="19" bodyfile="include/bluetooth/addr.h" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga74a644cd3de081a353a281d80b32b91e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int bt_addr_le_to_str</definition>
        <argsstring>(const bt_addr_le_t *addr, char *str, size_t len)</argsstring>
        <name>bt_addr_le_to_str</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Converts binary LE Bluetooth address to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer containing binary LE Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of user buffer with enough room to store formatted string containing binary LE address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be copied to user string buffer. Refer to BT_ADDR_LE_STR_LEN about recommended value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of successfully formatted bytes from binary address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="210" column="19" bodyfile="include/bluetooth/addr.h" bodystart="210" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1gad93410d0161ca84939f4bf983da29c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_from_str</definition>
        <argsstring>(const char *str, bt_addr_t *addr)</argsstring>
        <name>bt_addr_from_str</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Convert Bluetooth address from string to binary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of a Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer to store the Bluetooth address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="245" column="5" declfile="include/bluetooth/addr.h" declline="245" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__addr_1ga2539a1ac8774587fb75702aac66f8e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_addr_le_from_str</definition>
        <argsstring>(const char *str, const char *type, bt_addr_le_t *addr)</argsstring>
        <name>bt_addr_le_from_str</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Convert LE Bluetooth address from string to binary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of an LE Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of the LE Bluetooth address type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of buffer to store the LE Bluetooth address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/addr.h" line="256" column="5" declfile="include/bluetooth/addr.h" declline="256" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bluetooth device address definitions and utilities. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_BLUETOOTH_ADDR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_BLUETOOTH_ADDR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="printk_8h" kindref="compound">sys/printk.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="group__bt__addr_1ga1717d2b4e61b28637be8a5f78685a3c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_PUBLIC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="group__bt__addr_1ga6e81e967527b5418ee6cbc6d72c5aef9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_RANDOM<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="group__bt__addr_1ga1fd60d5eb4c8a6d8f4df06eaba85fb96" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_PUBLIC_ID<sp/><sp/><sp/><sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="group__bt__addr_1gafdf2572991427d95bb44d1a5ee2ad85a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_RANDOM_ID<sp/><sp/><sp/><sp/>0x03</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="group__bt__addr_1gad02c40564a140300efda28ecb15674be" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_UNRESOLVED<sp/><sp/><sp/>0xFE<sp/></highlight><highlight class="comment">/*<sp/>Resolvable<sp/>Private<sp/>Address</highlight></codeline>
<codeline lineno="33" refid="group__bt__addr_1gab2ddd85c5972a53da0aee3974edc0258" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(Controller<sp/>unable<sp/>to<sp/>resolve)</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_ANONYMOUS<sp/><sp/><sp/><sp/>0xFF<sp/></highlight><highlight class="comment">/*<sp/>No<sp/>address<sp/>provided</highlight></codeline>
<codeline lineno="36" refid="group__bt__addr_1ga6b6f56325b5136d2719f02eecc780d49" refkind="member"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(anonymous<sp/>advertisement)</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_SIZE<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/>val[<ref refid="group__bt__addr_1ga6b6f56325b5136d2719f02eecc780d49" kindref="member">BT_ADDR_SIZE</ref>];</highlight></codeline>
<codeline lineno="45" refid="group__bt__addr_1ga2656b9a936bf8cb9f1cc86668fca6108" refkind="member"><highlight class="normal">}<sp/><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structbt__addr__le__t_1aa4ede005c57893383a21983bc3e47958" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_SIZE<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="54" refid="group__bt__addr_1ga40ddc9769e38b7537bbb4e8002de592a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref><sp/>a;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref>;</highlight></codeline>
<codeline lineno="56" refid="group__bt__addr_1gacb24d83ded350176fc96dfc0f5dde6be" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_ANY<sp/><sp/><sp/><sp/><sp/>((bt_addr_t[])<sp/>{<sp/>{<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>}<sp/>}<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_NONE<sp/><sp/><sp/><sp/>((bt_addr_t[])<sp/>{<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="61" refid="group__bt__addr_1gadfcc0281e453cba990b623631c26f80b" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff<sp/>}<sp/>}<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_ANY<sp/><sp/>((bt_addr_le_t[])<sp/>{<sp/>{<sp/>0,<sp/>{<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>}<sp/>}<sp/>}<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_NONE<sp/>((bt_addr_le_t[])<sp/>{<sp/>{<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff<sp/>}<sp/>}<sp/>}<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga41ff9419098728f037c3e97d29c30ba9" kindref="member">bt_addr_cmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref><sp/>*b)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(a,<sp/>b,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga588d392f51372ff2951c3ff39da22f12" kindref="member">bt_addr_le_cmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*b)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(a,<sp/>b,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a));</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga5a8284cf34d0835d725dab31d710ea4c" kindref="member">bt_addr_copy</ref>(<ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref><sp/>*src)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(dst,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dst));</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1gac6c9b20f17936efaa082fe63aedc2138" kindref="member">bt_addr_le_copy</ref>(<ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*src)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109" refid="group__bt__addr_1ga32abc1a2e827542efea5b9cb05a57fbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(dst,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dst));</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_IS_RPA(a)<sp/><sp/><sp/><sp/><sp/>(((a)-&gt;val[5]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x40)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_IS_NRPA(a)<sp/><sp/><sp/><sp/>(((a)-&gt;val[5]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_IS_STATIC(a)<sp/><sp/>(((a)-&gt;val[5]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0xc0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="group__bt__addr_1ga6b23035316e9bdd071e10ecc803fcdbc" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="group__bt__addr_1gaa6261bf0b96099b58f0a0c3674ce5713" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_SET_RPA(a)<sp/><sp/><sp/><sp/>((a)-&gt;val[5]<sp/>=<sp/>(((a)-&gt;val[5]<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x40))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_SET_NRPA(a)<sp/><sp/><sp/>((a)-&gt;val[5]<sp/>&amp;=<sp/>0x3f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_SET_STATIC(a)<sp/>((a)-&gt;val[5]<sp/>|=<sp/>0xc0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1gaf2d38888131c9e8bdbc820b415c14082" kindref="member">bt_addr_le_create_nrpa</ref>(<ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*addr);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1gad1b43f2f0ab58ec2c5ceaaa0d2cbc444" kindref="member">bt_addr_le_create_static</ref>(<ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*addr);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga42bcee6b5aadde7ccdbe243df25043bc" kindref="member">bt_addr_le_is_rpa</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr-&gt;<ref refid="structbt__addr__le__t_1aa4ede005c57893383a21983bc3e47958" kindref="member">type</ref><sp/>!=<sp/><ref refid="group__bt__addr_1ga6e81e967527b5418ee6cbc6d72c5aef9" kindref="member">BT_ADDR_LE_RANDOM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga32abc1a2e827542efea5b9cb05a57fbc" kindref="member">BT_ADDR_IS_RPA</ref>(&amp;addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga7a6acc7a9267ae2645aeee38e553b8b3" kindref="member">bt_addr_le_is_identity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr-&gt;<ref refid="structbt__addr__le__t_1aa4ede005c57893383a21983bc3e47958" kindref="member">type</ref><sp/>==<sp/><ref refid="group__bt__addr_1ga1717d2b4e61b28637be8a5f78685a3c4" kindref="member">BT_ADDR_LE_PUBLIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga0cb3aa4d48cf41d8485b570ef0e7447a" kindref="member">BT_ADDR_IS_STATIC</ref>(&amp;addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_STR_LEN<sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_ADDR_LE_STR_LEN<sp/>30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga151bdd0ada8635acfebd60f0e203cde2" kindref="member">bt_addr_to_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref><sp/>*addr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="printk_8h_1a0b0af71688f7e9170103d771d4e1eab2" kindref="member">snprintk</ref>(str,<sp/>len,<sp/></highlight><highlight class="stringliteral">&quot;%02X:%02X:%02X:%02X:%02X:%02X&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[5],<sp/>addr-&gt;<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[4],<sp/>addr-&gt;<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[3],</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[2],<sp/>addr-&gt;<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[1],<sp/>addr-&gt;<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[0]);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga74a644cd3de081a353a281d80b32b91e" kindref="member">bt_addr_le_to_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*addr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type[10];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(addr-&gt;<ref refid="structbt__addr__le__t_1aa4ede005c57893383a21983bc3e47958" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga1717d2b4e61b28637be8a5f78685a3c4" kindref="member">BT_ADDR_LE_PUBLIC</ref>:</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a6d729a7b6396b8508060821c56f4adbc" kindref="member">strcpy</ref>(type,<sp/></highlight><highlight class="stringliteral">&quot;public&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga6e81e967527b5418ee6cbc6d72c5aef9" kindref="member">BT_ADDR_LE_RANDOM</ref>:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a6d729a7b6396b8508060821c56f4adbc" kindref="member">strcpy</ref>(type,<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga1fd60d5eb4c8a6d8f4df06eaba85fb96" kindref="member">BT_ADDR_LE_PUBLIC_ID</ref>:</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a6d729a7b6396b8508060821c56f4adbc" kindref="member">strcpy</ref>(type,<sp/></highlight><highlight class="stringliteral">&quot;public-id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1gafdf2572991427d95bb44d1a5ee2ad85a" kindref="member">BT_ADDR_LE_RANDOM_ID</ref>:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a6d729a7b6396b8508060821c56f4adbc" kindref="member">strcpy</ref>(type,<sp/></highlight><highlight class="stringliteral">&quot;random-id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printk_8h_1a0b0af71688f7e9170103d771d4e1eab2" kindref="member">snprintk</ref>(type,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(type),<sp/></highlight><highlight class="stringliteral">&quot;0x%02x&quot;</highlight><highlight class="normal">,<sp/>addr-&gt;<ref refid="structbt__addr__le__t_1aa4ede005c57893383a21983bc3e47958" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="printk_8h_1a0b0af71688f7e9170103d771d4e1eab2" kindref="member">snprintk</ref>(str,<sp/>len,<sp/></highlight><highlight class="stringliteral">&quot;%02X:%02X:%02X:%02X:%02X:%02X<sp/>(%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>.<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[5],<sp/>addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>.<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[4],<sp/>addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>.<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[3],</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>.<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[2],<sp/>addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>.<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[1],<sp/>addr-&gt;<ref refid="structbt__addr__le__t_1aacada5fc5b04ff22a02518e6f59387ed" kindref="member">a</ref>.<ref refid="structbt__addr__t_1a59e03c3fd06d16dc41132fd21ac42952" kindref="member">val</ref>[0],<sp/>type);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1gad93410d0161ca84939f4bf983da29c14" kindref="member">bt_addr_from_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref><sp/>*addr);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__addr_1ga2539a1ac8774587fb75702aac66f8e19" kindref="member">bt_addr_le_from_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/><ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref><sp/>*addr);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_BLUETOOTH_ADDR_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/addr.h"/>
  </compounddef>
</doxygen>
