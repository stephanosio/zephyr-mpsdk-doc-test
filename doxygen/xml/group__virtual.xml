<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__virtual" kind="group">
    <compoundname>virtual</compoundname>
    <title>Virtual Network Interface Support Functions</title>
    <innerclass refid="structvirtual__interface__api" prot="public">virtual_interface_api</innerclass>
    <innerclass refid="structvirtual__interface__context" prot="public">virtual_interface_context</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__virtual_1ga8f188f5c2f19960d7113da52aefe8091" prot="public" static="no" strong="no">
        <type></type>
        <name>virtual_interface_caps</name>
        <enumvalue id="group__virtual_1gga8f188f5c2f19960d7113da52aefe8091a097c314c36dc5f7129f1c8bb1e110071" prot="public">
          <name>VIRTUAL_INTERFACE_IPIP</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPIP tunnel </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual interface capabilities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="37" column="1" bodyfile="include/net/virtual.h" bodystart="37" bodyend="47"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__virtual_1ga5cba6ff65402b591a0e42d05f258671f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_virtual_interface_attach</definition>
        <argsstring>(struct net_if *virtual_iface, struct net_if *iface)</argsstring>
        <name>net_virtual_interface_attach</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>virtual_iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Attach virtual network interface to the given network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virtual_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface we are attached to. This can be NULL, if we want to detach.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if attaching failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="165" column="5" declfile="include/net/virtual.h" declline="165" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1gabadf14eaa02978cde7030c99ddd3e279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * net_virtual_get_iface</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>net_virtual_get_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Return network interface related to this virtual network interface. The returned network interface is below this virtual network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network interface related to this virtual interface or NULL if no such interface exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="177" column="13" declfile="include/net/virtual.h" declline="177" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1gaa7ff8ebb83fe98a1dfd23f319317a8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * net_virtual_get_name</definition>
        <argsstring>(struct net_if *iface, char *buf, size_t len)</argsstring>
        <name>net_virtual_get_name</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Return the name of the virtual network interface L2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Max buffer length</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of the virtual network interface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="188" column="6" declfile="include/net/virtual.h" declline="188" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1ga2aaba616ed4fecc27138d5aae58a634f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_virtual_set_name</definition>
        <argsstring>(struct net_if *iface, const char *name)</argsstring>
        <name>net_virtual_set_name</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the name of the virtual network interface L2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the virtual L2 layer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="196" column="6" declfile="include/net/virtual.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1ga30f92f519a6f204ebeccd6053f17eaf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref></type>
        <definition>enum net_l2_flags net_virtual_set_flags</definition>
        <argsstring>(struct net_if *iface, enum net_l2_flags flags)</argsstring>
        <name>net_virtual_set_flags</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>enum <ref refid="group__net__l2_1gac7db0cc6c56d371a5803873074ec2516" kindref="member">net_l2_flags</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set the L2 flags of the virtual network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual network interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>L2 flags to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous flags that were set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="206" column="18" declfile="include/net/virtual.h" declline="206" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__virtual_1ga6c63773925ef7d96b0ba03d8978fd499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref></type>
        <definition>enum net_verdict net_virtual_input</definition>
        <argsstring>(struct net_if *input_iface, struct net_addr *remote_addr, struct net_pkt *pkt)</argsstring>
        <name>net_virtual_input</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>input_iface</declname>
        </param>
        <param>
          <type>struct net_addr *</type>
          <declname>remote_addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Feed the IP pkt to stack if tunneling is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface receiving the pkt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address of the sender. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Verdict what to do with the packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="218" column="17" declfile="include/net/virtual.h" declline="218" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__virtual_1ga4c1e6f8afb017c6f9db3cf8f271554ca" prot="public" static="no">
        <name>NET_VIRTUAL_INTERFACE_INIT</name>
        <param><defname>dev_name</defname></param>
        <param><defname>drv_name</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_action_cb</defname></param>
        <param><defname>data</defname></param>
        <param><defname>cfg</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api</defname></param>
        <param><defname>mtu</defname></param>
        <initializer>	Z_NET_VIRTUAL_INTERFACE_INIT(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name,		\
				     drv_name, init_fn, pm_action_cb,	\
				     <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>, cfg, prio, api, mtu)</initializer>
        <briefdescription>
<para>Create a virtual network interface. Binding to another interface is done at runtime by calling <ref refid="group__virtual_1ga5cba6ff65402b591a0e42d05f258671f" kindref="member">net_virtual_interface_attach()</ref>. The attaching is done automatically when setting up tunneling when peer IP address is set in IP tunneling driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Network device name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name this instance of the driver exposes to the system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the init function of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_action_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to PM action callback. Can be NULL if not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level at which configuration occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transfer unit in bytes for this network interface. This is the default value and its value can be tweaked at runtime. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/virtual.h" line="310" column="9" bodyfile="include/net/virtual.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Virtual network interface support functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
