<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="atomic_8c" kind="file" language="C++">
    <compoundname>atomic.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="atomic_8h" local="no">sys/atomic.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/common/src/atomic.c</label>
        <link refid="atomic_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" prot="public" static="no">
        <name>ATOMIC_WORD</name>
        <param><defname>val_if_64</defname></param>
        <param><defname>val_if_32</defname></param>
        <initializer>	((<ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref>)((sizeof(void *) == sizeof(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref>)) ? (val_if_64) : (val_if_32)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="11" column="9" bodyfile="tests/kernel/common/src/atomic.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="atomic_8c_1af4e00364d8957bd37d5f641879ecc37a" prot="public" static="no">
        <name>NUM_FLAG_BITS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="15" column="9" bodyfile="tests/kernel/common/src/atomic.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="atomic_8c_1a2477c12659a70e565a2e0c6cc032f769" prot="public" static="no">
        <name>TEST_CYCLE</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="18" column="9" bodyfile="tests/kernel/common/src/atomic.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="atomic_8c_1a51e2e876217651c49f5dda708e3c54f3" prot="public" static="no">
        <name>THREADS_NUM</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="20" column="9" bodyfile="tests/kernel/common/src/atomic.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="atomic_8c_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(512 + CONFIG_TEST_EXTRA_STACK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="22" column="9" bodyfile="tests/kernel/common/src/atomic.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref></type>
        <definition>struct k_thread thread[2]</definition>
        <argsstring>[2]</argsstring>
        <name>thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="26" column="22" bodyfile="tests/kernel/common/src/atomic.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="atomic_8c_1a4deb20180e7643b11a7448a34246a539" prot="public" static="no" mutable="no">
        <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref></type>
        <definition>atomic_t total_atomic</definition>
        <argsstring></argsstring>
        <name>total_atomic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="28" column="10" bodyfile="tests/kernel/common/src/atomic.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="atomic_8c_1a704875c50db3f469f4a18dbc94de9231" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static K_THREAD_STACK_ARRAY_DEFINE</definition>
        <argsstring>(stack, 2,(512+CONFIG_TEST_EXTRA_STACK_SIZE))</argsstring>
        <name>K_THREAD_STACK_ARRAY_DEFINE</name>
        <param>
          <type><ref refid="test__stack__fail_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref></type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>(512+CONFIG_TEST_EXTRA_STACK_SIZE)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="24" column="8" declfile="tests/kernel/common/src/atomic.c" declline="24" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga674b21994cf9148555e16f401d63c9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_atomic</definition>
        <argsstring>(void)</argsstring>
        <name>test_atomic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify atomic functionalities. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Test the function of the atomic operation API is correct.</para>
</listitem></itemizedlist>
</para>
<para>Test techniques:<itemizedlist>
<listitem><para>Dynamic analysis and testing</para>
</listitem><listitem><para>Functional and black box testing</para>
</listitem><listitem><para>Interface testing</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Call the API interface of the following atomic operations in turn, judge the change of function return value and target operands.</para>
</listitem></orderedlist>
<itemizedlist>
<listitem><para><ref refid="atomic__xtensa_8h_1a6c96fd0f67a7e091035ab989e2cbbfb1" kindref="member">atomic_cas()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1ad949b788f6573e626a03e7b38fbd5645" kindref="member">atomic_ptr_cas()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a734abed45962c79745a48b6468c499f1" kindref="member">atomic_add()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a59692f87d456173352f4ae3f777eb1b6" kindref="member">atomic_sub()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1aae47a9cbe5a6534967b417f602b37ac2" kindref="member">atomic_inc()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1ac260f0efbd970717eae4ac3bb493a0c4" kindref="member">atomic_dec()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a70641cc94157f8d7be8f7fc2ebb72e02" kindref="member">atomic_get()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a6271fb71dfdcdc389f6703d8ffb3f99e" kindref="member">atomic_ptr_get()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a5da5d59cfe0071203119b4881c2edf25" kindref="member">atomic_set()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a1448d2fb67f55f6084114dfd17f18b5f" kindref="member">atomic_ptr_set()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1a879b5f540c25fd09f1b84563e3dc8a91" kindref="member">atomic_clear()</ref></para>
</listitem><listitem><para><ref refid="atomic__arch_8h_1a7dca81028baa3f371ef487d683745762" kindref="member">atomic_ptr_clear()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1ae81ba87f31b1b2deee0da61697711b48" kindref="member">atomic_or()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1ab9c8fddee80b212bfe3d5da8d8fd09f1" kindref="member">atomic_xor()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1a41fc4b2cdd3fa7a407c2e28a9be581ac" kindref="member">atomic_and()</ref></para>
</listitem><listitem><para><ref refid="atomic__xtensa_8h_1acc0cbd2fd07f3d25b6e9366e0c01829a" kindref="member">atomic_nand()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga53159437721084da0ec8ee70ec212472" kindref="member">atomic_test_and_clear_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga7ff45e13aa5f8be5d7a550e49f5c720b" kindref="member">atomic_test_and_set_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" kindref="member">atomic_clear_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1ga17a3961ba7610ad6e595e602f70344a0" kindref="member">atomic_set_bit()</ref></para>
</listitem><listitem><para><ref refid="group__atomic__apis_1gad749f16ca51ffc26e7303988de1b8dbf" kindref="member">atomic_set_bit_to()</ref></para>
</listitem><listitem><para>ATOMIC_DEFINE</para>
</listitem></itemizedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>The change of function return value and target operands is correct.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="atomic__xtensa_8h_1a6c96fd0f67a7e091035ab989e2cbbfb1" kindref="member">atomic_cas()</ref>, <ref refid="atomic__xtensa_8h_1a734abed45962c79745a48b6468c499f1" kindref="member">atomic_add()</ref>, <ref refid="atomic__xtensa_8h_1a59692f87d456173352f4ae3f777eb1b6" kindref="member">atomic_sub()</ref>, <ref refid="atomic__arch_8h_1aae47a9cbe5a6534967b417f602b37ac2" kindref="member">atomic_inc()</ref>, <ref refid="atomic__arch_8h_1ac260f0efbd970717eae4ac3bb493a0c4" kindref="member">atomic_dec()</ref>, <ref refid="atomic__xtensa_8h_1a70641cc94157f8d7be8f7fc2ebb72e02" kindref="member">atomic_get()</ref>, <ref refid="atomic__xtensa_8h_1a5da5d59cfe0071203119b4881c2edf25" kindref="member">atomic_set()</ref>, <ref refid="atomic__arch_8h_1a879b5f540c25fd09f1b84563e3dc8a91" kindref="member">atomic_clear()</ref>, <ref refid="atomic__xtensa_8h_1ae81ba87f31b1b2deee0da61697711b48" kindref="member">atomic_or()</ref>, <ref refid="atomic__xtensa_8h_1a41fc4b2cdd3fa7a407c2e28a9be581ac" kindref="member">atomic_and()</ref>, <ref refid="atomic__xtensa_8h_1ab9c8fddee80b212bfe3d5da8d8fd09f1" kindref="member">atomic_xor()</ref>, <ref refid="atomic__xtensa_8h_1acc0cbd2fd07f3d25b6e9366e0c01829a" kindref="member">atomic_nand()</ref>, <ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit()</ref>, <ref refid="group__atomic__apis_1ga53159437721084da0ec8ee70ec212472" kindref="member">atomic_test_and_clear_bit()</ref>, <ref refid="group__atomic__apis_1ga7ff45e13aa5f8be5d7a550e49f5c720b" kindref="member">atomic_test_and_set_bit()</ref>, <ref refid="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" kindref="member">atomic_clear_bit()</ref>, <ref refid="group__atomic__apis_1ga17a3961ba7610ad6e595e602f70344a0" kindref="member">atomic_set_bit()</ref>, <ref refid="group__atomic__apis_1ga249c575db9764486197709b327f7370e" kindref="member">ATOMIC_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="97" column="6" bodyfile="tests/kernel/common/src/atomic.c" bodystart="97" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1ga103fe8057e7e23a7136fe05f1e055237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atomic_handler</definition>
        <argsstring>(void *p1, void *p2, void *p3)</argsstring>
        <name>atomic_handler</name>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="292" column="6" bodyfile="tests/kernel/common/src/atomic.c" bodystart="292" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__common__tests_1gae4f64eff153f6d061c63f74df3e70bf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_threads_access_atomic</definition>
        <argsstring>(void)</argsstring>
        <name>test_threads_access_atomic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify atomic operation with threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Creat two preempt threads with equal priority to atomiclly access the same atomic value. Because these preempt threads are of equal priority, so enable time slice to make them scheduled. The thread will execute for some time. In this time, the two sub threads will be scheduled separately according to the time slice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/common/src/atomic.c" line="317" column="6" bodyfile="tests/kernel/common/src/atomic.c" bodystart="317" bodyend="339"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">sys/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>convenience<sp/>macro<sp/>-<sp/>return<sp/>either<sp/>64-bit<sp/>or<sp/>32-bit<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATOMIC_WORD(val_if_64,<sp/>val_if_32)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((atomic_t)((sizeof(void<sp/>*)<sp/>==<sp/>sizeof(uint64_t))<sp/>?<sp/>(val_if_64)<sp/>:<sp/>(val_if_32)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>an<sp/>example<sp/>of<sp/>the<sp/>number<sp/>of<sp/>atomic<sp/>bit<sp/>in<sp/>an<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_FLAG_BITS<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>set<sp/>test_cycle<sp/>1000us<sp/>*<sp/>20<sp/>=<sp/>20ms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CYCLE<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THREADS_NUM<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(512<sp/>+<sp/>CONFIG_TEST_EXTRA_STACK_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="atomic_8c_1a704875c50db3f469f4a18dbc94de9231" kindref="member">K_THREAD_STACK_ARRAY_DEFINE</ref>(<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,<sp/><ref refid="atomic_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>,<sp/><ref refid="atomic_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/><ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>[<ref refid="atomic_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="atomic_8c_1a4deb20180e7643b11a7448a34246a539" kindref="member">total_atomic</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__common__tests_1ga674b21994cf9148555e16f401d63c9e7" kindref="member">test_atomic</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>orig;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1acad6866fa4c844026cd9f8c3fb60ecd7" kindref="member">atomic_ptr_t</ref><sp/>ptr_target;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref><sp/>value;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref><sp/>oldvalue;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr_value,<sp/>*old_ptr_value;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga249c575db9764486197709b327f7370e" kindref="member">ATOMIC_DEFINE</ref>(flag_bits,<sp/><ref refid="atomic_8c_1af4e00364d8957bd37d5f641879ecc37a" kindref="member">NUM_FLAG_BITS</ref>)<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref>),<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sizeof(atomic_t)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldvalue<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_cas()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="atomic__xtensa_8h_1a6c96fd0f67a7e091035ab989e2cbbfb1" kindref="member">atomic_cas</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>oldvalue,<sp/>value),<sp/></highlight><highlight class="stringliteral">&quot;atomic_cas&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="atomic__xtensa_8h_1a6c96fd0f67a7e091035ab989e2cbbfb1" kindref="member">atomic_cas</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>oldvalue,<sp/>value),<sp/></highlight><highlight class="stringliteral">&quot;atomic_cas&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>value),<sp/></highlight><highlight class="stringliteral">&quot;atomic_cas&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_ptr_cas()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_target<sp/>=<sp/><ref refid="group__atomic__apis_1ga7366802f7b11d3c5f9487f4fea9fc4d7" kindref="member">ATOMIC_PTR_INIT</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)4);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_value<sp/>=<sp/>(<ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref>)5;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_ptr_value<sp/>=<sp/>(<ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref>)6;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" kindref="member">zassert_false</ref>(<ref refid="atomic__xtensa_8h_1ad949b788f6573e626a03e7b38fbd5645" kindref="member">atomic_ptr_cas</ref>(&amp;ptr_target,<sp/>old_ptr_value,<sp/>ptr_value),</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_cas&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_target<sp/>=<sp/>(<ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref>)6;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="atomic__xtensa_8h_1ad949b788f6573e626a03e7b38fbd5645" kindref="member">atomic_ptr_cas</ref>(&amp;ptr_target,<sp/>old_ptr_value,<sp/>ptr_value),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_cas&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((ptr_target<sp/>==<sp/>ptr_value),<sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_cas&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_add()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a734abed45962c79745a48b6468c499f1" kindref="member">atomic_add</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>1),<sp/></highlight><highlight class="stringliteral">&quot;atomic_add&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>3),<sp/></highlight><highlight class="stringliteral">&quot;atomic_add&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>the<sp/>atomic_add()<sp/>function<sp/>parameters<sp/>can<sp/>be<sp/>negative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>-4;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a734abed45962c79745a48b6468c499f1" kindref="member">atomic_add</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>2),<sp/></highlight><highlight class="stringliteral">&quot;atomic_add&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>-2),<sp/></highlight><highlight class="stringliteral">&quot;atomic_add&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_sub()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a59692f87d456173352f4ae3f777eb1b6" kindref="member">atomic_sub</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>10),<sp/></highlight><highlight class="stringliteral">&quot;atomic_sub&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>8),<sp/></highlight><highlight class="stringliteral">&quot;atomic_sub&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>the<sp/>atomic_sub()<sp/>function<sp/>parameters<sp/>can<sp/>be<sp/>negative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>-4;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a59692f87d456173352f4ae3f777eb1b6" kindref="member">atomic_sub</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>5),<sp/></highlight><highlight class="stringliteral">&quot;atomic_sub&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>9),<sp/></highlight><highlight class="stringliteral">&quot;atomic_sub&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_inc()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__arch_8h_1aae47a9cbe5a6534967b417f602b37ac2" kindref="member">atomic_inc</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>)<sp/>==<sp/>5),<sp/></highlight><highlight class="stringliteral">&quot;atomic_inc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>6),<sp/></highlight><highlight class="stringliteral">&quot;atomic_inc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_dec()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__arch_8h_1ac260f0efbd970717eae4ac3bb493a0c4" kindref="member">atomic_dec</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>)<sp/>==<sp/>2),<sp/></highlight><highlight class="stringliteral">&quot;atomic_dec&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>1),<sp/></highlight><highlight class="stringliteral">&quot;atomic_dec&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_get()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a70641cc94157f8d7be8f7fc2ebb72e02" kindref="member">atomic_get</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>)<sp/>==<sp/>50),<sp/></highlight><highlight class="stringliteral">&quot;atomic_get&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_ptr_get()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_target<sp/>=<sp/><ref refid="group__atomic__apis_1ga7366802f7b11d3c5f9487f4fea9fc4d7" kindref="member">ATOMIC_PTR_INIT</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)50);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a6271fb71dfdcdc389f6703d8ffb3f99e" kindref="member">atomic_ptr_get</ref>(&amp;ptr_target)<sp/>==<sp/>(<ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref>)50),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_get&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_set()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>77;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a5da5d59cfe0071203119b4881c2edf25" kindref="member">atomic_set</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>42),<sp/></highlight><highlight class="stringliteral">&quot;atomic_set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>value),<sp/></highlight><highlight class="stringliteral">&quot;atomic_set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_ptr_set()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_target<sp/>=<sp/><ref refid="group__atomic__apis_1ga7366802f7b11d3c5f9487f4fea9fc4d7" kindref="member">ATOMIC_PTR_INIT</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)42);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_value<sp/>=<sp/>(<ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref>)77;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a1448d2fb67f55f6084114dfd17f18b5f" kindref="member">atomic_ptr_set</ref>(&amp;ptr_target,<sp/>ptr_value)<sp/>==<sp/>(<ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref>)42),</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((ptr_target<sp/>==<sp/>ptr_value),<sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_clear()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__arch_8h_1a879b5f540c25fd09f1b84563e3dc8a91" kindref="member">atomic_clear</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>)<sp/>==<sp/>100),<sp/></highlight><highlight class="stringliteral">&quot;atomic_clear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;atomic_clear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_ptr_clear()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_target<sp/>=<sp/><ref refid="group__atomic__apis_1ga7366802f7b11d3c5f9487f4fea9fc4d7" kindref="member">ATOMIC_PTR_INIT</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)100);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__arch_8h_1a7dca81028baa3f371ef487d683745762" kindref="member">atomic_ptr_clear</ref>(&amp;ptr_target)<sp/>==<sp/>(<ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref>)100),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_clear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((ptr_target<sp/>==<sp/>NULL),<sp/></highlight><highlight class="stringliteral">&quot;atomic_ptr_clear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_or()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>0xFF00;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/>=<sp/>0x0F0F;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1ae81ba87f31b1b2deee0da61697711b48" kindref="member">atomic_or</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>0xFF00),<sp/></highlight><highlight class="stringliteral">&quot;atomic_or&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>0xFF0F),<sp/></highlight><highlight class="stringliteral">&quot;atomic_or&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_xor()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>0xFF00;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/>=<sp/>0x0F0F;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1ab9c8fddee80b212bfe3d5da8d8fd09f1" kindref="member">atomic_xor</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>0xFF00),<sp/></highlight><highlight class="stringliteral">&quot;atomic_xor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>0xF00F),<sp/></highlight><highlight class="stringliteral">&quot;atomic_xor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_and()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>0xFF00;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/>=<sp/>0x0F0F;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1a41fc4b2cdd3fa7a407c2e28a9be581ac" kindref="member">atomic_and</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>0xFF00),<sp/></highlight><highlight class="stringliteral">&quot;atomic_and&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>0x0F00),<sp/></highlight><highlight class="stringliteral">&quot;atomic_and&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_nand()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>0xFF00;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/>=<sp/>0x0F0F;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="atomic__xtensa_8h_1acc0cbd2fd07f3d25b6e9366e0c01829a" kindref="member">atomic_nand</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>value)<sp/>==<sp/>0xFF00),<sp/></highlight><highlight class="stringliteral">&quot;atomic_nand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>((<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0xFFFFFFFFFFFFF0FF,<sp/>0xFFFFF0FF)),<sp/></highlight><highlight class="stringliteral">&quot;atomic_nand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_test_bit()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ATOMIC_BITS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0x0F0F0F0F0F0F0F0F,<sp/>0x0F0F0F0F);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(!!(<ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>i)<sp/>==<sp/>!!(<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i))),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_test_bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_test_and_clear_bit()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ATOMIC_BITS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>=<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0x0F0F0F0F0F0F0F0F,<sp/>0x0F0F0F0F);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>orig;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(!!(<ref refid="group__atomic__apis_1ga53159437721084da0ec8ee70ec212472" kindref="member">atomic_test_and_clear_bit</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>i))<sp/>==<sp/>!!(orig<sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_test_and_clear_bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>(orig<sp/>&amp;<sp/>~<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),<sp/></highlight><highlight class="stringliteral">&quot;atomic_test_and_clear_bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_test_and_set_bit()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ATOMIC_BITS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>=<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0x0F0F0F0F0F0F0F0F,<sp/>0x0F0F0F0F);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>orig;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(!!(<ref refid="group__atomic__apis_1ga7ff45e13aa5f8be5d7a550e49f5c720b" kindref="member">atomic_test_and_set_bit</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>i))<sp/>==<sp/>!!(orig<sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic_test_and_set_bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>(orig<sp/>|<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),<sp/></highlight><highlight class="stringliteral">&quot;atomic_test_and_set_bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_clear_bit()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ATOMIC_BITS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>=<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0x0F0F0F0F0F0F0F0F,<sp/>0x0F0F0F0F);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>orig;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" kindref="member">atomic_clear_bit</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>(orig<sp/>&amp;<sp/>~<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),<sp/></highlight><highlight class="stringliteral">&quot;atomic_clear_bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_set_bit()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ATOMIC_BITS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>=<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0x0F0F0F0F0F0F0F0F,<sp/>0x0F0F0F0F);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>orig;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga17a3961ba7610ad6e595e602f70344a0" kindref="member">atomic_set_bit</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>(orig<sp/>|<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),<sp/></highlight><highlight class="stringliteral">&quot;atomic_set_bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_set_bit_to(&amp;target,<sp/>i,<sp/>false)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ATOMIC_BITS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>=<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0x0F0F0F0F0F0F0F0F,<sp/>0x0F0F0F0F);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>orig;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1gad749f16ca51ffc26e7303988de1b8dbf" kindref="member">atomic_set_bit_to</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>(orig<sp/>&amp;<sp/>~<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),<sp/></highlight><highlight class="stringliteral">&quot;atomic_set_bit_to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>atomic_set_bit_to(&amp;target,<sp/>i,<sp/>true)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ATOMIC_BITS;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>=<sp/><ref refid="atomic_8c_1a70722f3bbfe6924e03ce8037f1e800e4" kindref="member">ATOMIC_WORD</ref>(0x0F0F0F0F0F0F0F0F,<sp/>0x0F0F0F0F);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>=<sp/>orig;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1gad749f16ca51ffc26e7303988de1b8dbf" kindref="member">atomic_set_bit_to</ref>(&amp;<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref>,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="sched_2preempt_2src_2main_8c_1ae8aa5cb4faa95420993aad5d4f2e839f" kindref="member">target</ref><sp/>==<sp/>(orig<sp/>|<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(i)),<sp/></highlight><highlight class="stringliteral">&quot;atomic_set_bit_to&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ATOMIC_DEFINE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="atomic_8c_1af4e00364d8957bd37d5f641879ecc37a" kindref="member">NUM_FLAG_BITS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga17a3961ba7610ad6e595e602f70344a0" kindref="member">atomic_set_bit</ref>(flag_bits,<sp/>i);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(!!<ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit</ref>(flag_bits,<sp/>i)<sp/>==<sp/>!!(1),</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>a<sp/>single<sp/>bit<sp/>in<sp/>an<sp/>array<sp/>of<sp/>atomic<sp/>variables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" kindref="member">atomic_clear_bit</ref>(flag_bits,<sp/>i);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(!!<ref refid="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" kindref="member">atomic_test_bit</ref>(flag_bits,<sp/>i)<sp/>==<sp/>!!(0),</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>clear<sp/>a<sp/>single<sp/>bit<sp/>in<sp/>an<sp/>array<sp/>of<sp/>atomic<sp/>variables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>helper<sp/>function<sp/>will<sp/>run<sp/>more<sp/>the<sp/>one<sp/>slice<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__common__tests_1ga103fe8057e7e23a7136fe05f1e055237" kindref="member">atomic_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p1);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p2);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(p3);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="atomic_8c_1a2477c12659a70e565a2e0c6cc032f769" kindref="member">TEST_CYCLE</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic__arch_8h_1aae47a9cbe5a6534967b417f602b37ac2" kindref="member">atomic_inc</ref>(&amp;<ref refid="atomic_8c_1a4deb20180e7643b11a7448a34246a539" kindref="member">total_atomic</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>1000us<sp/>busywait<sp/>to<sp/>longer<sp/>the<sp/>handler<sp/>execute<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait</ref>(1000);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__common__tests_1gae4f64eff153f6d061c63f74df3e70bf9" kindref="member">test_threads_access_atomic</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>[<ref refid="atomic_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enable<sp/>time<sp/>slice<sp/>1ms<sp/>at<sp/>priority<sp/>10<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga877c1bfeffbf8f097d1656f9e10a66e8" kindref="member">k_sched_time_slice_set</ref>(1,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(10));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="atomic_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>[i]<sp/>=<sp/><ref refid="group__thread__apis_1gad5b0bff3102f1656089f5875d999a367" kindref="member">k_thread_create</ref>(&amp;<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>[i],<sp/><ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>[i],<sp/><ref refid="atomic_8c_1a6423a880df59733d2d9b509c7718d3a9" kindref="member">STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__kernel__common__tests_1ga103fe8057e7e23a7136fe05f1e055237" kindref="member">atomic_handler</ref>,<sp/>NULL,<sp/>NULL,<sp/>NULL,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(10),<sp/>0,<sp/><ref refid="group__clock__apis_1ga3d9541cfe2e8395af66d186efa77362f" kindref="member">K_NO_WAIT</ref>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="atomic_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga40a733561eb1f64dcaae0e01b167d233" kindref="member">k_thread_join</ref>(<ref refid="fifo_2fifo__timeout_2src_2main_8c_1af9be7b6fdbca696acdfc0d1cd2cf14e3" kindref="member">tid</ref>[i],<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>time<sp/>slice<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__thread__apis_1ga877c1bfeffbf8f097d1656f9e10a66e8" kindref="member">k_sched_time_slice_set</ref>(0,<sp/><ref refid="include_2kernel_8h_1aa0e916aae3ddd0e998cd41ac32afe30a" kindref="member">K_PRIO_PREEMPT</ref>(10));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" kindref="member">zassert_true</ref>(<ref refid="atomic_8c_1a4deb20180e7643b11a7448a34246a539" kindref="member">total_atomic</ref><sp/>==<sp/>(<ref refid="atomic_8c_1a2477c12659a70e565a2e0c6cc032f769" kindref="member">TEST_CYCLE</ref><sp/>*<sp/><ref refid="atomic_8c_1a51e2e876217651c49f5dda708e3c54f3" kindref="member">THREADS_NUM</ref>),</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atomic<sp/>counting<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/common/src/atomic.c"/>
  </compounddef>
</doxygen>
