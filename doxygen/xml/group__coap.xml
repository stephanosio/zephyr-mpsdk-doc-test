<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__coap" kind="group">
    <compoundname>coap</compoundname>
    <title>COAP Library</title>
    <innerclass refid="structcoap__resource" prot="public">coap_resource</innerclass>
    <innerclass refid="structcoap__observer" prot="public">coap_observer</innerclass>
    <innerclass refid="structcoap__packet" prot="public">coap_packet</innerclass>
    <innerclass refid="structcoap__option" prot="public">coap_option</innerclass>
    <innerclass refid="structcoap__pending" prot="public">coap_pending</innerclass>
    <innerclass refid="structcoap__reply" prot="public">coap_reply</innerclass>
    <innerclass refid="structcoap__block__context" prot="public">coap_block_context</innerclass>
    <innerclass refid="structcoap__core__metadata" prot="public">coap_core_metadata</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__coap_1ga7b8b3041e2f4ae26e663ff7431a6e6e3" prot="public" static="no" strong="no">
        <type></type>
        <name>coap_option_num</name>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a4c61e26d11841c76debe2f99de5e9756" prot="public">
          <name>COAP_OPTION_IF_MATCH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a402bb0a642a07d951c35d69736fd3f33" prot="public">
          <name>COAP_OPTION_URI_HOST</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a0efdc30ce5551daffd093b2a8466978a" prot="public">
          <name>COAP_OPTION_ETAG</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a07ea6f395818a7019bb9e6a6e34d2d74" prot="public">
          <name>COAP_OPTION_IF_NONE_MATCH</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a06e91bbb4fa2144543d4148d3245ad25" prot="public">
          <name>COAP_OPTION_OBSERVE</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a344707b9f4cb71310f2ccf5e8050d17a" prot="public">
          <name>COAP_OPTION_URI_PORT</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3ae82be3591d43f0d1c7e89ab764d969bd" prot="public">
          <name>COAP_OPTION_LOCATION_PATH</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a96b5a15937e875b3087307cc5faab1af" prot="public">
          <name>COAP_OPTION_URI_PATH</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3ac3166e67b5f5bf3cefee58c8ff58e5b8" prot="public">
          <name>COAP_OPTION_CONTENT_FORMAT</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3ab4cda4d3732fd12b9f203a2475c20981" prot="public">
          <name>COAP_OPTION_MAX_AGE</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3adb4d27052247b9a79ad7fcc0cc30c71c" prot="public">
          <name>COAP_OPTION_URI_QUERY</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3afd0725f0ceb5ce22a6c7b390ca7efc9d" prot="public">
          <name>COAP_OPTION_ACCEPT</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3ac728800fc8f0d80e37dcf322e75eb27d" prot="public">
          <name>COAP_OPTION_LOCATION_QUERY</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a4aa7cdfa66bd89f21f592eaf3ebe0972" prot="public">
          <name>COAP_OPTION_BLOCK2</name>
          <initializer>= 23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a8aaa54af114fd1db631566afa69f162d" prot="public">
          <name>COAP_OPTION_BLOCK1</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a26c1bcd7af4fccd949e3de35fc2d88e6" prot="public">
          <name>COAP_OPTION_SIZE2</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3ae4d2c93b545708926813217cd36a96ac" prot="public">
          <name>COAP_OPTION_PROXY_URI</name>
          <initializer>= 35</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a30da986503e1e15243b74a16b161901c" prot="public">
          <name>COAP_OPTION_PROXY_SCHEME</name>
          <initializer>= 39</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga7b8b3041e2f4ae26e663ff7431a6e6e3a53169a1c7b07c9e97f79dfc06af3eb51" prot="public">
          <name>COAP_OPTION_SIZE1</name>
          <initializer>= 60</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Set of CoAP packet options we are aware of. </para>
        </briefdescription>
        <detaileddescription>
<para>Users may add options other than these to their packets, provided they know how to format them correctly. The only restriction is that all options must be added to a packet in numeric order.</para>
<para>Refer to RFC 7252, section 12.2 for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="44" column="1" bodyfile="include/net/coap.h" bodystart="44" bodyend="64"/>
      </memberdef>
      <memberdef kind="enum" id="group__coap_1ga6a6547e3c755cf7a5033302c8294e0b7" prot="public" static="no" strong="no">
        <type></type>
        <name>coap_method</name>
        <enumvalue id="group__coap_1gga6a6547e3c755cf7a5033302c8294e0b7a025300cb0dc4c4de8eb0b0e0b4eb5317" prot="public">
          <name>COAP_METHOD_GET</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga6a6547e3c755cf7a5033302c8294e0b7aba51bcab79bf75080ccf75c1ec38a3d6" prot="public">
          <name>COAP_METHOD_POST</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga6a6547e3c755cf7a5033302c8294e0b7a91637ef7c9f57cdcc65d0118008251db" prot="public">
          <name>COAP_METHOD_PUT</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga6a6547e3c755cf7a5033302c8294e0b7adccbea1fe9a43433cf8471e32208a5ac" prot="public">
          <name>COAP_METHOD_DELETE</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga6a6547e3c755cf7a5033302c8294e0b7afa4070fed5c01b28bb1a59e3f0c021f4" prot="public">
          <name>COAP_METHOD_FETCH</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga6a6547e3c755cf7a5033302c8294e0b7adca55e3d2b4b41b249f6b2f67074d708" prot="public">
          <name>COAP_METHOD_PATCH</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga6a6547e3c755cf7a5033302c8294e0b7a78f97b895f29819bf3f8b0314967f20e" prot="public">
          <name>COAP_METHOD_IPATCH</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Available request methods. </para>
        </briefdescription>
        <detaileddescription>
<para>To be used when creating a request or a response. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="71" column="1" bodyfile="include/net/coap.h" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="group__coap_1ga3b375b7580246d1266293d09902f3d9f" prot="public" static="no" strong="no">
        <type></type>
        <name>coap_msgtype</name>
        <enumvalue id="group__coap_1gga3b375b7580246d1266293d09902f3d9fa65c04ee4847d0c595238079ac9564e8d" prot="public">
          <name>COAP_TYPE_CON</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Confirmable message.</para>
<para>The packet is a request or response the destination end-point must acknowledge. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga3b375b7580246d1266293d09902f3d9fa629a304bea0c85c7b2bf746b26216a4f" prot="public">
          <name>COAP_TYPE_NON_CON</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Non-confirmable message.</para>
<para>The packet is a request or response that doesn&apos;t require acknowledgements. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga3b375b7580246d1266293d09902f3d9fa7b2fe2187018bce9132af2763b57307d" prot="public">
          <name>COAP_TYPE_ACK</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Acknowledge.</para>
<para>Response to a confirmable message. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga3b375b7580246d1266293d09902f3d9fa287b951159fd51b84a2e0491b012f84c" prot="public">
          <name>COAP_TYPE_RESET</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset.</para>
<para>Rejecting a packet for any reason is done by sending a message of this type. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CoAP packets may be of one of these types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="88" column="1" bodyfile="include/net/coap.h" bodystart="88" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="group__coap_1ga1ea81a365834e96f43ab7be573069d26" prot="public" static="no" strong="no">
        <type></type>
        <name>coap_response_code</name>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a0629da1898b934c3f699b98ff808c717" prot="public">
          <name>COAP_RESPONSE_CODE_OK</name>
          <initializer>= (( 2  &lt;&lt; 5) | ( 0 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26ad2d9fe8dd5beda74b522377c0b76275b" prot="public">
          <name>COAP_RESPONSE_CODE_CREATED</name>
          <initializer>= (( 2  &lt;&lt; 5) | ( 1 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26abf324915aa498c64a733a0098de4a082" prot="public">
          <name>COAP_RESPONSE_CODE_DELETED</name>
          <initializer>= (( 2  &lt;&lt; 5) | ( 2 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26aecaac4a0e9c821dfc20536951409dd48" prot="public">
          <name>COAP_RESPONSE_CODE_VALID</name>
          <initializer>= (( 2  &lt;&lt; 5) | ( 3 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a3ffb3632c37c22cee901760753c8d0d3" prot="public">
          <name>COAP_RESPONSE_CODE_CHANGED</name>
          <initializer>= (( 2  &lt;&lt; 5) | ( 4 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26adfd3e5e3c6ad5715127bb444c205fbce" prot="public">
          <name>COAP_RESPONSE_CODE_CONTENT</name>
          <initializer>= (( 2  &lt;&lt; 5) | ( 5 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26ae4e3ff451c626421b9b329790f019dd8" prot="public">
          <name>COAP_RESPONSE_CODE_CONTINUE</name>
          <initializer>= (( 2  &lt;&lt; 5) | ( 31 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a603e60d2314bde36adf505f446c907c5" prot="public">
          <name>COAP_RESPONSE_CODE_BAD_REQUEST</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 0 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26acb76dbf11b47477144cc4ece3357283c" prot="public">
          <name>COAP_RESPONSE_CODE_UNAUTHORIZED</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 1 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a989a6528edc653c0b693ed875481e82d" prot="public">
          <name>COAP_RESPONSE_CODE_BAD_OPTION</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 2 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26afeee555ef54f138db58b14ad2c328d04" prot="public">
          <name>COAP_RESPONSE_CODE_FORBIDDEN</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 3 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a86c2bff8add69428d164431b3091a8e9" prot="public">
          <name>COAP_RESPONSE_CODE_NOT_FOUND</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 4 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a301eb722445472dba93d5accd6e0dd31" prot="public">
          <name>COAP_RESPONSE_CODE_NOT_ALLOWED</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 5 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a4d77322514521e8dfea01f4a1a6e5886" prot="public">
          <name>COAP_RESPONSE_CODE_NOT_ACCEPTABLE</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 6 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a671730c6d2f1a339fcd557c5452150af" prot="public">
          <name>COAP_RESPONSE_CODE_INCOMPLETE</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 8 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26ab447505d233aed9fd8ad28070d317544" prot="public">
          <name>COAP_RESPONSE_CODE_CONFLICT</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 9 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a289ade02833b57bffd915e648e050e52" prot="public">
          <name>COAP_RESPONSE_CODE_PRECONDITION_FAILED</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 12 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26aaa43062a8146c1e2e09183228a540d2e" prot="public">
          <name>COAP_RESPONSE_CODE_REQUEST_TOO_LARGE</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 13 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26aef6b165b9d3f8f4b477431058815c16b" prot="public">
          <name>COAP_RESPONSE_CODE_UNSUPPORTED_CONTENT_FORMAT</name>
          <initializer>=
						(( 4  &lt;&lt; 5) | ( 15 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a5e5e31cc4647d5e0fdd1c8fe6cfa2661" prot="public">
          <name>COAP_RESPONSE_CODE_UNPROCESSABLE_ENTITY</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 22 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26aabd72cff6669d382aa04c53e764d0b49" prot="public">
          <name>COAP_RESPONSE_CODE_TOO_MANY_REQUESTS</name>
          <initializer>= (( 4  &lt;&lt; 5) | ( 29 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a07b00dba944e55c4dcde798da667b499" prot="public">
          <name>COAP_RESPONSE_CODE_INTERNAL_ERROR</name>
          <initializer>= (( 5  &lt;&lt; 5) | ( 0 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a85c04541bc8580c2ae915946fd677c15" prot="public">
          <name>COAP_RESPONSE_CODE_NOT_IMPLEMENTED</name>
          <initializer>= (( 5  &lt;&lt; 5) | ( 1 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a8de29a7ee6bb960a97d6b415217b4640" prot="public">
          <name>COAP_RESPONSE_CODE_BAD_GATEWAY</name>
          <initializer>= (( 5  &lt;&lt; 5) | ( 2 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26afebd274586351951ffe9c8f26b270dec" prot="public">
          <name>COAP_RESPONSE_CODE_SERVICE_UNAVAILABLE</name>
          <initializer>= (( 5  &lt;&lt; 5) | ( 3 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26af6d379fef704c269406b782c60772ecd" prot="public">
          <name>COAP_RESPONSE_CODE_GATEWAY_TIMEOUT</name>
          <initializer>= (( 5  &lt;&lt; 5) | ( 4 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga1ea81a365834e96f43ab7be573069d26a5f49a566d37b2cda0c624d76aee08bd1" prot="public">
          <name>COAP_RESPONSE_CODE_PROXYING_NOT_SUPPORTED</name>
          <initializer>=
						(( 5  &lt;&lt; 5) | ( 5 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Set of response codes available for a response packet. </para>
        </briefdescription>
        <detaileddescription>
<para>To be used when creating a response. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="125" column="1" bodyfile="include/net/coap.h" bodystart="125" bodyend="155"/>
      </memberdef>
      <memberdef kind="enum" id="group__coap_1ga94a8f9956742d3928fc3c63b8d01ae73" prot="public" static="no" strong="no">
        <type></type>
        <name>coap_content_format</name>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73af068aa8d09032352799bc60868607997" prot="public">
          <name>COAP_CONTENT_FORMAT_TEXT_PLAIN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73a1fbd90fd5cb309e2de6954f46174dc4f" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_LINK_FORMAT</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73adb96bf55e914f4852e92dc65752c372a" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_XML</name>
          <initializer>= 41</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73a88d952174bb3e4ffb9ab11a599952760" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_OCTET_STREAM</name>
          <initializer>= 42</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73a483a382550b38468cc66bdce9f4743ea" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_EXI</name>
          <initializer>= 47</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73a975381d286c1e9b998e41ef0a234d17a" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_JSON</name>
          <initializer>= 50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73a141f183724ad6da14c3992c0990d6239" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_JSON_PATCH_JSON</name>
          <initializer>= 51</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73a2797149fb3811d706dab291e9edc9436" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_MERGE_PATCH_JSON</name>
          <initializer>= 52</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga94a8f9956742d3928fc3c63b8d01ae73a7ca73ff57a6c7fb1517b44f2ce17d3f9" prot="public">
          <name>COAP_CONTENT_FORMAT_APP_CBOR</name>
          <initializer>= 60</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Set of Content-Format option values for CoAP. </para>
        </briefdescription>
        <detaileddescription>
<para>To be used when encoding or decoding a Content-Format option. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="166" column="1" bodyfile="include/net/coap.h" bodystart="166" bodyend="176"/>
      </memberdef>
      <memberdef kind="enum" id="group__coap_1ga712c1468f936a3af7dc39a86a5961922" prot="public" static="no" strong="no">
        <type></type>
        <name>coap_block_size</name>
        <enumvalue id="group__coap_1gga712c1468f936a3af7dc39a86a5961922a834d479806b513818e2237f3f1c56968" prot="public">
          <name>COAP_BLOCK_16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga712c1468f936a3af7dc39a86a5961922a1aaf8f841c18e281b176793bb331993d" prot="public">
          <name>COAP_BLOCK_32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga712c1468f936a3af7dc39a86a5961922a7266f448a391ea2a2763f1ded5397520" prot="public">
          <name>COAP_BLOCK_64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga712c1468f936a3af7dc39a86a5961922a147ddf4b0e5d1a8c11f0da2c71dee4d8" prot="public">
          <name>COAP_BLOCK_128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga712c1468f936a3af7dc39a86a5961922acfc37f84eabccdde4bd84b06c6a5e753" prot="public">
          <name>COAP_BLOCK_256</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga712c1468f936a3af7dc39a86a5961922ad2052905aff08c58585dcf6c6caddc19" prot="public">
          <name>COAP_BLOCK_512</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__coap_1gga712c1468f936a3af7dc39a86a5961922a6998c79e63cf65e7f86ddd5713d48dce" prot="public">
          <name>COAP_BLOCK_1024</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents the size of each block that will be transferred using block-wise transfers [RFC7959]:</para>
<para>Each entry maps directly to the value that is used in the wire.</para>
<para><ulink url="https://tools.ietf.org/html/rfc7959">https://tools.ietf.org/html/rfc7959</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="533" column="1" bodyfile="include/net/coap.h" bodystart="533" bodyend="541"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__coap_1ga77053a199941c0cea41c497b4196f2cf" prot="public" static="no">
        <type>int(*</type>
        <definition>coap_method_t</definition>
        <argsstring>)(struct coap_resource *resource, struct coap_packet *request, struct sockaddr *addr, socklen_t addr_len)</argsstring>
        <name>coap_method_t</name>
        <briefdescription>
<para>Type of the callback being called when a resource&apos;s method is invoked by the remote entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="194" column="9" bodyfile="include/net/coap.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__coap_1gaa91527b86e20a107f18637e5bed7125b" prot="public" static="no">
        <type>void(*</type>
        <definition>coap_notify_t</definition>
        <argsstring>)(struct coap_resource *resource, struct coap_observer *observer)</argsstring>
        <name>coap_notify_t</name>
        <briefdescription>
<para>Type of the callback being called when a resource&apos;s has observers to be informed when an update happens. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="203" column="9" bodyfile="include/net/coap.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__coap_1ga46d987451046a7260b56b9701752ba39" prot="public" static="no">
        <type>int(*</type>
        <definition>coap_reply_t</definition>
        <argsstring>)(const struct coap_packet *response, struct coap_reply *reply, const struct sockaddr *from)</argsstring>
        <name>coap_reply_t</name>
        <briefdescription>
<para>Helper function to be called when a response matches the a pending request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="263" column="9" bodyfile="include/net/coap.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__coap_1gafd01c39fac8f173edc04337161e92264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t coap_header_get_version</definition>
        <argsstring>(const struct coap_packet *cpkt)</argsstring>
        <name>coap_header_get_version</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <briefdescription>
<para>Returns the version present in a CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the CoAP version in packet </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="303" column="9" declfile="include/net/coap.h" declline="303" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gaed883ea6cec3acc5eb570e152dc52e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t coap_header_get_type</definition>
        <argsstring>(const struct coap_packet *cpkt)</argsstring>
        <name>coap_header_get_type</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <briefdescription>
<para>Returns the type of the CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the type of the packet </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="312" column="9" declfile="include/net/coap.h" declline="312" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga6a5049accfa0cd7106a3a6593c598545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t coap_header_get_token</definition>
        <argsstring>(const struct coap_packet *cpkt, uint8_t *token)</argsstring>
        <name>coap_header_get_token</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Returns the token (if any) in the CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the token, must point to a buffer containing at least COAP_TOKEN_MAX_LEN bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Token length in the CoAP packet (0 - COAP_TOKEN_MAX_LEN). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="323" column="9" declfile="include/net/coap.h" declline="323" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gae4bf952fdf9e3d03ab0b0df4c3c0d054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t coap_header_get_code</definition>
        <argsstring>(const struct coap_packet *cpkt)</argsstring>
        <name>coap_header_get_code</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <briefdescription>
<para>Returns the code of the CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the code present in the packet </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="332" column="9" declfile="include/net/coap.h" declline="332" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga63388c629da5370d2e711cdc9aabd837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t coap_header_get_id</definition>
        <argsstring>(const struct coap_packet *cpkt)</argsstring>
        <name>coap_header_get_id</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <briefdescription>
<para>Returns the message id associated with the CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the message id present in the packet </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="341" column="10" declfile="include/net/coap.h" declline="341" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga28ccf00fb1f5f13f747e61c2e3008b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>const uint8_t * coap_packet_get_payload</definition>
        <argsstring>(const struct coap_packet *cpkt, uint16_t *len)</argsstring>
        <name>coap_packet_get_payload</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Returns the data pointer and length of the CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of CoAP payload</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data pointer and length if payload exists NULL pointer and length set to 0 in case there is no payload </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="352" column="15" declfile="include/net/coap.h" declline="352" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga27a58a69f632551aa7a2394ae2badacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_packet_parse</definition>
        <argsstring>(struct coap_packet *cpkt, uint8_t *data, uint16_t len, struct coap_option *options, uint8_t opt_num)</argsstring>
        <name>coap_packet_parse</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__option" kindref="compound">coap_option</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>opt_num</declname>
        </param>
        <briefdescription>
<para>Parses the CoAP packet in data, validating it and initializing <emphasis>cpkt</emphasis>. <emphasis>data</emphasis> must remain valid while <emphasis>cpkt</emphasis> is used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be initialized from received <emphasis>data</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data containing a CoAP packet, its <emphasis>data</emphasis> pointer is positioned on the start of the CoAP packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Parse options and cache its details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of options</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="368" column="5" declfile="include/net/coap.h" declline="368" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga90e6aab174f8977f0a3b5fbe1a20297c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_packet_init</definition>
        <argsstring>(struct coap_packet *cpkt, uint8_t *data, uint16_t max_len, uint8_t ver, uint8_t type, uint8_t token_len, const uint8_t *token, uint8_t code, uint16_t id)</argsstring>
        <name>coap_packet_init</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>max_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ver</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>token_len</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Creates a new CoAP Packet from input data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>New packet to be initialized using the storage from <emphasis>data</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data that will contain a CoAP packet information </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum allowable length of data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ver</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP header version </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP header type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token_len</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP header token length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP header token </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP header code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP header message id</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="386" column="5" declfile="include/net/coap.h" declline="386" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gae6d93b1f93734302be75ee417813e5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_ack_init</definition>
        <argsstring>(struct coap_packet *cpkt, const struct coap_packet *req, uint8_t *data, uint16_t max_len, uint8_t code)</argsstring>
        <name>coap_ack_init</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>max_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Create a new CoAP Acknowledgment message for given request. </para>
        </briefdescription>
        <detaileddescription>
<para>This function works like <ref refid="group__coap_1ga90e6aab174f8977f0a3b5fbe1a20297c" kindref="member">coap_packet_init</ref>, filling CoAP header type, CoAP header token, and CoAP header message id fields according to acknowledgment rules.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>New packet to be initialized using the storage from <emphasis>data</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP request packet that is being acknowledged </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data that will contain a CoAP packet information </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum allowable length of data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP header code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="405" column="5" declfile="include/net/coap.h" declline="405" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga66f986f8a1157236bea27133c2a2538b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>uint8_t * coap_next_token</definition>
        <argsstring>(void)</argsstring>
        <name>coap_next_token</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a randomly generated array of 8 bytes, that can be used as a message&apos;s token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a 8-byte pseudo-random token. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="414" column="9" declfile="include/net/coap.h" declline="414" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gade5f4995c6419db03ce3e7ff7ca1cfcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t coap_next_id</definition>
        <argsstring>(void)</argsstring>
        <name>coap_next_id</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Helper to generate message ids. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new message id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="421" column="10" declfile="include/net/coap.h" declline="421" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gaf006c8048ed7b863e70dbdd64bc3d608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_find_options</definition>
        <argsstring>(const struct coap_packet *cpkt, uint16_t code, struct coap_option *options, uint16_t veclen)</argsstring>
        <name>coap_find_options</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__option" kindref="compound">coap_option</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>veclen</declname>
        </param>
        <briefdescription>
<para>Return the values associated with the option of value <emphasis>code</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Option number to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <ref refid="structcoap__option" kindref="compound">coap_option</ref> where to store the value of the options found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>veclen</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the options array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of options found in packet matching code, negative on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="436" column="5" declfile="include/net/coap.h" declline="436" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga2aa4140ee83ca4090a5604e34d1f1446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_packet_append_option</definition>
        <argsstring>(struct coap_packet *cpkt, uint16_t code, const uint8_t *value, uint16_t len)</argsstring>
        <name>coap_packet_append_option</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Appends an option to the packet. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: options must be added in numeric order of their codes. Otherwise error will be returned. TODO: Add support for placing options according to its delta value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Option code to add to the packet, see <ref refid="group__coap_1ga7b8b3041e2f4ae26e663ff7431a6e6e3" kindref="member">coap_option_num</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the value of the option, will be copied to the packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="454" column="5" declfile="include/net/coap.h" declline="454" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga2fd0613e61274ec4b9b7bab3ab11ccce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int coap_option_value_to_int</definition>
        <argsstring>(const struct coap_option *option)</argsstring>
        <name>coap_option_value_to_int</name>
        <param>
          <type>const struct <ref refid="structcoap__option" kindref="compound">coap_option</ref> *</type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Converts an option to its integer representation. </para>
        </briefdescription>
        <detaileddescription>
<para>Assumes that the number is encoded in the network byte order in the option.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the option value, retrieved by <ref refid="group__coap_1gaf006c8048ed7b863e70dbdd64bc3d608" kindref="member">coap_find_options()</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer representation of the option </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="468" column="14" declfile="include/net/coap.h" declline="468" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga6bec94992ac450dca03436a6ad74efb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_append_option_int</definition>
        <argsstring>(struct coap_packet *cpkt, uint16_t code, unsigned int val)</argsstring>
        <name>coap_append_option_int</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Appends an integer value option to the packet. </para>
        </briefdescription>
        <detaileddescription>
<para>The option must be added in numeric order of their codes, and the least amount of bytes will be used to encode the value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Option code to add to the packet, see <ref refid="group__coap_1ga7b8b3041e2f4ae26e663ff7431a6e6e3" kindref="member">coap_option_num</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer value to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="482" column="5" declfile="include/net/coap.h" declline="482" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga24000def8534acdcd2c61836dc690367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_packet_append_payload_marker</definition>
        <argsstring>(struct coap_packet *cpkt)</argsstring>
        <name>coap_packet_append_payload_marker</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <briefdescription>
<para>Append payload marker to CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to append the payload marker (0xFF)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="492" column="5" declfile="include/net/coap.h" declline="492" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gadcd3a93a702a2a0b428f39b71dd67954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_packet_append_payload</definition>
        <argsstring>(struct coap_packet *cpkt, const uint8_t *payload, uint16_t payload_len)</argsstring>
        <name>coap_packet_append_payload</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>payload</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>payload_len</declname>
        </param>
        <briefdescription>
<para>Append payload to CoAP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to append the payload </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet payload </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload_len</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP packet payload len</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="503" column="5" declfile="include/net/coap.h" declline="503" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga88a5f2c3915ef109eadfebaf82b53186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_handle_request</definition>
        <argsstring>(struct coap_packet *cpkt, struct coap_resource *resources, struct coap_option *options, uint8_t opt_num, struct sockaddr *addr, socklen_t addr_len)</argsstring>
        <name>coap_handle_request</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__resource" kindref="compound">coap_resource</ref> *</type>
          <declname>resources</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__option" kindref="compound">coap_option</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>opt_num</declname>
        </param>
        <param>
          <type>struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="group__ip__4__6_1gacf0ed818b0a3c85ff6a9206679d6d91a" kindref="member">socklen_t</ref></type>
          <declname>addr_len</declname>
        </param>
        <briefdescription>
<para>When a request is received, call the appropriate methods of the matching resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resources</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of known resources </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Parsed options from <ref refid="group__coap_1ga27a58a69f632551aa7a2394ae2badacf" kindref="member">coap_packet_parse()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer address length</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="519" column="5" declfile="include/net/coap.h" declline="519" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gafffadd4a837e48fd72af20468ccd86f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t coap_block_size_to_bytes</definition>
        <argsstring>(enum coap_block_size block_size)</argsstring>
        <name>coap_block_size_to_bytes</name>
        <param>
          <type>enum <ref refid="group__coap_1ga712c1468f936a3af7dc39a86a5961922" kindref="member">coap_block_size</ref></type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
<para>Helper for converting the enumeration to the size expressed in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The block size to be converted</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size in bytes that the block_size represents </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="551" column="24" bodyfile="include/net/coap.h" bodystart="551" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga57486e764f0feb6544fa3b0d19935afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_block_transfer_init</definition>
        <argsstring>(struct coap_block_context *ctx, enum coap_block_size block_size, size_t total_size)</argsstring>
        <name>coap_block_transfer_init</name>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>enum <ref refid="group__coap_1ga712c1468f936a3af7dc39a86a5961922" kindref="member">coap_block_size</ref></type>
          <declname>block_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>total_size</declname>
        </param>
        <briefdescription>
<para>Initializes the context of a block-wise transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be initialized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The total size of the transfer, if known</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="575" column="5" declfile="include/net/coap.h" declline="575" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga518d5f4422ff45f2b4a296f249da89cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_append_block1_option</definition>
        <argsstring>(struct coap_packet *cpkt, struct coap_block_context *ctx)</argsstring>
        <name>coap_append_block1_option</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Append BLOCK1 option to the packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Block context from which to retrieve the information for the Block1 option</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="588" column="5" declfile="include/net/coap.h" declline="588" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga361c17b698bdaa0fc529b7338efefd8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_append_block2_option</definition>
        <argsstring>(struct coap_packet *cpkt, struct coap_block_context *ctx)</argsstring>
        <name>coap_append_block2_option</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Append BLOCK2 option to the packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Block context from which to retrieve the information for the Block2 option</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="600" column="5" declfile="include/net/coap.h" declline="600" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga3f66d5935dcacfeebcac2b3001d7b57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_append_size1_option</definition>
        <argsstring>(struct coap_packet *cpkt, struct coap_block_context *ctx)</argsstring>
        <name>coap_append_size1_option</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Append SIZE1 option to the packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Block context from which to retrieve the information for the Size1 option</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="612" column="5" declfile="include/net/coap.h" declline="612" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gafbc8c15ef03b762f9411c38b03aa403b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_append_size2_option</definition>
        <argsstring>(struct coap_packet *cpkt, struct coap_block_context *ctx)</argsstring>
        <name>coap_append_size2_option</name>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Append SIZE2 option to the packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Block context from which to retrieve the information for the Size2 option</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="624" column="5" declfile="include/net/coap.h" declline="624" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga21b8f4ffeecc7900f6bf299836d2b5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_get_option_int</definition>
        <argsstring>(const struct coap_packet *cpkt, uint16_t code)</argsstring>
        <name>coap_get_option_int</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Get the integer representation of a CoAP option. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet to be inspected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>CoAP option code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer value &gt;= 0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="636" column="5" declfile="include/net/coap.h" declline="636" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga3b0cc9bfabdddeffd98f36d7f15dd416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_update_from_block</definition>
        <argsstring>(const struct coap_packet *cpkt, struct coap_block_context *ctx)</argsstring>
        <name>coap_update_from_block</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieves BLOCK{1,2} and SIZE{1,2} from <emphasis>cpkt</emphasis> and updates <emphasis>ctx</emphasis> accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet in which to look for block-wise transfers options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Block context to be updated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="647" column="5" declfile="include/net/coap.h" declline="647" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga50f7837da003601479dbc470ba9898ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_next_block_for_option</definition>
        <argsstring>(const struct coap_packet *cpkt, struct coap_block_context *ctx, enum coap_option_num option)</argsstring>
        <name>coap_next_block_for_option</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>enum <ref refid="group__coap_1ga7b8b3041e2f4ae26e663ff7431a6e6e3" kindref="member">coap_option_num</ref></type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Updates <emphasis>ctx</emphasis> according to <emphasis>option</emphasis> set in <emphasis>cpkt</emphasis> so after this is called the current entry indicates the correct offset in the body of data being transferred. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet in which to look for block-wise transfers options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Block context to be updated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>Either COAP_OPTION_BLOCK1 or COAP_OPTION_BLOCK2</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset in the block-wise transfer, 0 if the transfer has finished or a negative value in case of an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="662" column="5" declfile="include/net/coap.h" declline="662" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga1244716ecf06fad1013131c42eab8c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t coap_next_block</definition>
        <argsstring>(const struct coap_packet *cpkt, struct coap_block_context *ctx)</argsstring>
        <name>coap_next_block</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>cpkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__block__context" kindref="compound">coap_block_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Updates <emphasis>ctx</emphasis> so after this is called the current entry indicates the correct offset in the body of data being transferred. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet in which to look for block-wise transfers options </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Block context to be updated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset in the block-wise transfer, 0 if the transfer has finished. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="677" column="8" declfile="include/net/coap.h" declline="677" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga3d720b0d222cc35ce56cc260df1609a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coap_observer_init</definition>
        <argsstring>(struct coap_observer *observer, const struct coap_packet *request, const struct sockaddr *addr)</argsstring>
        <name>coap_observer_init</name>
        <param>
          <type>struct <ref refid="structcoap__observer" kindref="compound">coap_observer</ref> *</type>
          <declname>observer</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Indicates that the remote device referenced by <emphasis>addr</emphasis>, with <emphasis>request</emphasis>, wants to observe a resource. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>Observer to be initialized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Request on which the observer will be based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the remote device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="688" column="6" declfile="include/net/coap.h" declline="688" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga3c42861f8442e548f560acf3deca6baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool coap_register_observer</definition>
        <argsstring>(struct coap_resource *resource, struct coap_observer *observer)</argsstring>
        <name>coap_register_observer</name>
        <param>
          <type>struct <ref refid="structcoap__resource" kindref="compound">coap_resource</ref> *</type>
          <declname>resource</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__observer" kindref="compound">coap_observer</ref> *</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>After the observer is initialized, associate the observer with an resource. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource to add an observer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>Observer to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this is the first observer added to this resource. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="701" column="6" declfile="include/net/coap.h" declline="701" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga673718725e2fe23d321b785c795df703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coap_remove_observer</definition>
        <argsstring>(struct coap_resource *resource, struct coap_observer *observer)</argsstring>
        <name>coap_remove_observer</name>
        <param>
          <type>struct <ref refid="structcoap__resource" kindref="compound">coap_resource</ref> *</type>
          <declname>resource</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__observer" kindref="compound">coap_observer</ref> *</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Remove this observer from the list of registered observers of that resource. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource in which to remove the observer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>Observer to be removed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="711" column="6" declfile="include/net/coap.h" declline="711" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga427167161529c24f5cf8c9ed2023e321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcoap__observer" kindref="compound">coap_observer</ref> *</type>
        <definition>struct coap_observer * coap_find_observer_by_addr</definition>
        <argsstring>(struct coap_observer *observers, size_t len, const struct sockaddr *addr)</argsstring>
        <name>coap_find_observer_by_addr</name>
        <param>
          <type>struct <ref refid="structcoap__observer" kindref="compound">coap_observer</ref> *</type>
          <declname>observers</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Returns the observer that matches address <emphasis>addr</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of observers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of observers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the endpoint observing a resource</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a observer if a match is found, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="724" column="20" declfile="include/net/coap.h" declline="724" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga2410e973bf3192244426df346230608b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcoap__observer" kindref="compound">coap_observer</ref> *</type>
        <definition>struct coap_observer * coap_observer_next_unused</definition>
        <argsstring>(struct coap_observer *observers, size_t len)</argsstring>
        <name>coap_observer_next_unused</name>
        <param>
          <type>struct <ref refid="structcoap__observer" kindref="compound">coap_observer</ref> *</type>
          <declname>observers</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Returns the next available observer representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of observers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of observers</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a observer if there&apos;s an available observer, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="737" column="20" declfile="include/net/coap.h" declline="737" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gacfe30c84434dc8adbf3d399ec0e51bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coap_reply_init</definition>
        <argsstring>(struct coap_reply *reply, const struct coap_packet *request)</argsstring>
        <name>coap_reply_init</name>
        <param>
          <type>struct <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> *</type>
          <declname>reply</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Indicates that a reply is expected for <emphasis>request</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reply</parametername>
</parameternamelist>
<parameterdescription>
<para>Reply structure to be initialized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Request from which <emphasis>reply</emphasis> will be based </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="746" column="6" declfile="include/net/coap.h" declline="746" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gaa4a0ed5238edbd01a54a787f29bae1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_pending_init</definition>
        <argsstring>(struct coap_pending *pending, const struct coap_packet *request, const struct sockaddr *addr, uint8_t retries)</argsstring>
        <name>coap_pending_init</name>
        <param>
          <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>retries</declname>
        </param>
        <briefdescription>
<para>Initialize a pending request with a request. </para>
        </briefdescription>
        <detaileddescription>
<para>The request&apos;s fields are copied into the pending struct, so <emphasis>request</emphasis> doesn&apos;t have to live for as long as the pending struct lives, but &quot;data&quot; that needs to live for at least that long.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure representing the waiting for a confirmation message, initialized with data from <emphasis>request</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Message waiting for confirmation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to send the retransmission </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of retransmissions of the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="764" column="5" declfile="include/net/coap.h" declline="764" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga800831ddfe19b1a5637a5edd9e78c470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
        <definition>struct coap_pending * coap_pending_next_unused</definition>
        <argsstring>(struct coap_pending *pendings, size_t len)</argsstring>
        <name>coap_pending_next_unused</name>
        <param>
          <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
          <declname>pendings</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Returns the next available pending struct, that can be used to track the retransmission status of a request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pendings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structures</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to a free <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structure, NULL in case none could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="779" column="19" declfile="include/net/coap.h" declline="779" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga65cb5f7ac01ea5ebe1c6e30a7c70ad4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> *</type>
        <definition>struct coap_reply * coap_reply_next_unused</definition>
        <argsstring>(struct coap_reply *replies, size_t len)</argsstring>
        <name>coap_reply_next_unused</name>
        <param>
          <type>struct <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> *</type>
          <declname>replies</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Returns the next available reply struct, so it can be used to track replies and notifications received. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replies</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to a free <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structure, NULL in case none could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="792" column="17" declfile="include/net/coap.h" declline="792" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga94ceba78cbd2440f91d9b30d6b06594d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
        <definition>struct coap_pending * coap_pending_received</definition>
        <argsstring>(const struct coap_packet *response, struct coap_pending *pendings, size_t len)</argsstring>
        <name>coap_pending_received</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>response</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
          <declname>pendings</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>After a response is received, returns if there is any matching pending request exits. User has to clear all pending retransmissions related to that response by calling <ref refid="group__coap_1ga03287eb3187aa28e0e83e0e0c72e2631" kindref="member">coap_pending_clear()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>The received response </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pendings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the associated <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structure, NULL in case none could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="808" column="19" declfile="include/net/coap.h" declline="808" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga3da23a809504025a24bf03daea3e606b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> *</type>
        <definition>struct coap_reply * coap_response_received</definition>
        <argsstring>(const struct coap_packet *response, const struct sockaddr *from, struct coap_reply *replies, size_t len)</argsstring>
        <name>coap_response_received</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>response</declname>
        </param>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> *</type>
          <declname>replies</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>After a response is received, call coap_reply_t handler registered in <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>A response received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>Address from which the response was received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replies</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the reply matching the packet received, NULL if none could be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="824" column="17" declfile="include/net/coap.h" declline="824" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga9d63518c701ebdb4c7f65c5368d00d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
        <definition>struct coap_pending * coap_pending_next_to_expire</definition>
        <argsstring>(struct coap_pending *pendings, size_t len)</argsstring>
        <name>coap_pending_next_to_expire</name>
        <param>
          <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
          <declname>pendings</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Returns the next pending about to expire, pending-&gt;timeout informs how many ms to next expiration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pendings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structures</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> to expire, NULL if none is about to expire. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="839" column="19" declfile="include/net/coap.h" declline="839" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga2bcfc7340ed2347862b0f003e1b00a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool coap_pending_cycle</definition>
        <argsstring>(struct coap_pending *pending)</argsstring>
        <name>coap_pending_cycle</name>
        <param>
          <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>After a request is sent, user may want to cycle the pending retransmission so the timeout is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>Pending representation to have its timeout updated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if this is the last retransmission. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="850" column="6" declfile="include/net/coap.h" declline="850" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga03287eb3187aa28e0e83e0e0c72e2631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coap_pending_clear</definition>
        <argsstring>(struct coap_pending *pending)</argsstring>
        <name>coap_pending_clear</name>
        <param>
          <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Cancels the pending retransmission, so it again becomes available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>Pending representation to be canceled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="858" column="6" declfile="include/net/coap.h" declline="858" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga6e0947048052e733a3571fdc8955b2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coap_pendings_clear</definition>
        <argsstring>(struct coap_pending *pendings, size_t len)</argsstring>
        <name>coap_pendings_clear</name>
        <param>
          <type>struct <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> *</type>
          <declname>pendings</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Cancels all pending retransmissions, so they become available again. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pendings</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of <ref refid="structcoap__pending" kindref="compound">coap_pending</ref> structures </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="867" column="6" declfile="include/net/coap.h" declline="867" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga37b58c38c150751d31207ece416529d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coap_reply_clear</definition>
        <argsstring>(struct coap_reply *reply)</argsstring>
        <name>coap_reply_clear</name>
        <param>
          <type>struct <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> *</type>
          <declname>reply</declname>
        </param>
        <briefdescription>
<para>Cancels awaiting for this reply, so it becomes available again. User responsibility to free the memory associated with data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reply</parametername>
</parameternamelist>
<parameterdescription>
<para>The reply to be canceled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="875" column="6" declfile="include/net/coap.h" declline="875" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gaddb02509934f5bac20b7c7f83aea4cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coap_replies_clear</definition>
        <argsstring>(struct coap_reply *replies, size_t len)</argsstring>
        <name>coap_replies_clear</name>
        <param>
          <type>struct <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> *</type>
          <declname>replies</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Cancels all replies, so they become available again. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replies</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of <ref refid="structcoap__reply" kindref="compound">coap_reply</ref> structures </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="883" column="6" declfile="include/net/coap.h" declline="883" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1gad0c738d308f9cca8ea5cdb79449282cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_resource_notify</definition>
        <argsstring>(struct coap_resource *resource)</argsstring>
        <name>coap_resource_notify</name>
        <param>
          <type>struct <ref refid="structcoap__resource" kindref="compound">coap_resource</ref> *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>Indicates that this resource was updated and that the <emphasis>notify</emphasis> callback should be called for every registered observer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>Resource that was updated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="893" column="5" declfile="include/net/coap.h" declline="893" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga46b315c30b642eec65bcb84e9c937ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool coap_request_is_observe</definition>
        <argsstring>(const struct coap_packet *request)</argsstring>
        <name>coap_request_is_observe</name>
        <param>
          <type>const struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Returns if this request is enabling observing a resource. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Request to be checked</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the request is enabling observing a resource, False otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="903" column="6" declfile="include/net/coap.h" declline="903" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__coap_1ga3289b384539ddf7bc962c69fbd816e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coap_well_known_core_get</definition>
        <argsstring>(struct coap_resource *resource, struct coap_packet *request, struct coap_packet *response, uint8_t *data, uint16_t len)</argsstring>
        <name>coap_well_known_core_get</name>
        <param>
          <type>struct <ref refid="structcoap__resource" kindref="compound">coap_resource</ref> *</type>
          <declname>resource</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>struct <ref refid="structcoap__packet" kindref="compound">coap_packet</ref> *</type>
          <declname>response</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap_link_format.h" line="32" column="5" declfile="include/net/coap_link_format.h" declline="32" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__coap_1gad61166d12586d72e44c6e53a1064032a" prot="public" static="no">
        <name>COAP_REQUEST_MASK</name>
        <initializer>0x07</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="81" column="9" bodyfile="include/net/coap.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga1c4e268d39446075243c2713bc68aa0c" prot="public" static="no">
        <name>COAP_VERSION_1</name>
        <initializer>1U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="83" column="9" bodyfile="include/net/coap.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga650b40a4b798fb0c0bcc55107f9a471d" prot="public" static="no">
        <name>coap_make_response_code</name>
        <param><defname>class</defname></param>
        <param><defname>det</defname></param>
        <initializer>((class &lt;&lt; 5) | (det))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="118" column="9" bodyfile="include/net/coap.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga61fe5f43b386a3cd5ceb5b15280bfdca" prot="public" static="no">
        <name>COAP_CODE_EMPTY</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="157" column="9" bodyfile="include/net/coap.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga69fbb7a145ce60fc4f3765c590e4808c" prot="public" static="no">
        <name>COAP_TOKEN_MAX_LEN</name>
        <initializer>8UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="159" column="9" bodyfile="include/net/coap.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga54bed49d5081d423d0600bb84dd44a75" prot="public" static="no">
        <name>GET_BLOCK_NUM</name>
        <param><defname>v</defname></param>
        <initializer>((v) &gt;&gt; 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="179" column="9" bodyfile="include/net/coap.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1gaf8f67659f780c91f04eac97e8eb59fdd" prot="public" static="no">
        <name>GET_BLOCK_SIZE</name>
        <param><defname>v</defname></param>
        <initializer>(((v) &amp; 0x7))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="180" column="9" bodyfile="include/net/coap.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga8bfd808b8828458887383f50833d80ed" prot="public" static="no">
        <name>GET_MORE</name>
        <param><defname>v</defname></param>
        <initializer>(!!((v) &amp; 0x08))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="181" column="9" bodyfile="include/net/coap.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga7574b8b96be63292723bab49f11386bc" prot="public" static="no">
        <name>COAP_DEFAULT_MAX_RETRANSMIT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="267" column="9" bodyfile="include/net/coap.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga4fcd70b1558aeb7fea1cd734a53589e0" prot="public" static="no">
        <name>COAP_DEFAULT_ACK_RANDOM_FACTOR</name>
        <initializer>1.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap.h" line="268" column="9" bodyfile="include/net/coap.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__coap_1ga09d2c727fc6fc76aa9d908b759a3f40b" prot="public" static="no">
        <name>COAP_WELL_KNOWN_CORE_PATH</name>
        <initializer>	((const char * const[]) { &quot;.well-known&quot;, &quot;core&quot;, NULL })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This resource should be added before all other resources that should be included in the responses of the .well-known/core resource. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/coap_link_format.h" line="29" column="9" bodyfile="include/net/coap_link_format.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>COAP library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
