<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__audio__client" kind="group">
    <compoundname>bt_audio_client</compoundname>
    <title>Audio Client APIs</title>
    <innerclass refid="structbt__audio__discover__params" prot="public">bt_audio_discover_params</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__audio__client_1ga58f72c4683521e08ecb2493d510563e7" prot="public" static="no">
        <type>void(*</type>
        <definition>bt_audio_discover_func_t</definition>
        <argsstring>)(struct bt_conn *conn, struct bt_codec *codec, struct bt_audio_ep *ep, struct bt_audio_discover_params *params)</argsstring>
        <name>bt_audio_discover_func_t</name>
        <briefdescription>
<para>Discover Audio capabilities and endpoints callback function. </para>
        </briefdescription>
        <detaileddescription>
<para>If discovery procedure has complete both cap and ep are set to NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1300" column="9" bodyfile="include/bluetooth/audio/audio.h" bodystart="1300" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__audio__client_1ga4be0b9ef2d3bab0dfc490be61c9c81e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_discover</definition>
        <argsstring>(struct bt_conn *conn, struct bt_audio_discover_params *params)</argsstring>
        <name>bt_audio_discover</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__audio__discover__params" kindref="compound">bt_audio_discover_params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Discover remote capabilities and endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to discover remote capabilities and endpoints and notifies via params callback.</para>
<para><simplesect kind="note"><para>This procedure is asynchronous therefore the parameters need to remains valid while it is active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Discover parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1331" column="5" declfile="include/bluetooth/audio/audio.h" declline="1331" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga80ae693776d45404e5e521d627a42cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_config</definition>
        <argsstring>(struct bt_conn *conn, struct bt_audio_stream *stream, struct bt_audio_ep *ep, struct bt_codec *codec)</argsstring>
        <name>bt_audio_stream_config</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>struct bt_audio_ep *</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec" kindref="compound">bt_codec</ref> *</type>
          <declname>codec</declname>
        </param>
        <briefdescription>
<para>Configure Audio Stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to configure a new stream using the remote endpoint, local capability and codec configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being configured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote Audio Endpoint being configured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated Audio Stream object or NULL in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1346" column="5" declfile="include/bluetooth/audio/audio.h" declline="1346" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga1b7e2de7173dc74a1eb5d947af090fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_reconfig</definition>
        <argsstring>(struct bt_audio_stream *stream, struct bt_codec *codec)</argsstring>
        <name>bt_audio_stream_reconfig</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec" kindref="compound">bt_codec</ref> *</type>
          <declname>codec</declname>
        </param>
        <briefdescription>
<para>Reconfigure Audio Stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to reconfigure a stream using the a different local capability and/or codec configuration.</para>
<para>This can only be done for unicast streams.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being reconfigured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1363" column="5" declfile="include/bluetooth/audio/audio.h" declline="1363" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga2d7b7251f8d48f26785c95ca428ea8b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_qos</definition>
        <argsstring>(struct bt_conn *conn, struct bt_audio_unicast_group *group, struct bt_codec_qos *qos)</argsstring>
        <name>bt_audio_stream_qos</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct bt_audio_unicast_group *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec__qos" kindref="compound">bt_codec_qos</ref> *</type>
          <declname>qos</declname>
        </param>
        <briefdescription>
<para>Configure Audio Stream QoS. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to configure the Quality of Service of streams in a unicast group. All streams in the group for the specified <computeroutput>conn</computeroutput> will have the Quality of Service configured. This shall only be used to configure unicast streams.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Unicast group object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qos</parametername>
</parameternamelist>
<parameterdescription>
<para>Quality of Service configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1379" column="5" declfile="include/bluetooth/audio/audio.h" declline="1379" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gacb5e3b0ae9bfcfa18d82f18ecb848266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_enable</definition>
        <argsstring>(struct bt_audio_stream *stream, uint8_t meta_count, struct bt_codec_data *meta)</argsstring>
        <name>bt_audio_stream_enable</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>meta_count</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec__data" kindref="compound">bt_codec_data</ref> *</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Enable Audio Stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to enable a stream.</para>
<para>This shall only be called for unicast streams, as broadcast streams will always be enabled once created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of metadata entries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata entries</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1396" column="5" declfile="include/bluetooth/audio/audio.h" declline="1396" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gaa94cd5f835d9672b0a4eefe81e87d61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_metadata</definition>
        <argsstring>(struct bt_audio_stream *stream, uint8_t meta_count, struct bt_codec_data *meta)</argsstring>
        <name>bt_audio_stream_metadata</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>meta_count</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec__data" kindref="compound">bt_codec_data</ref> *</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>Change Audio Stream Metadata. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to change the metadata of a stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of metadata entries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata entries</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1409" column="5" declfile="include/bluetooth/audio/audio.h" declline="1409" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gaad16c6bd4e6744ec6a956f8e1ceba7db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_disable</definition>
        <argsstring>(struct bt_audio_stream *stream)</argsstring>
        <name>bt_audio_stream_disable</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Disable Audio Stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to disable a stream.</para>
<para>This shall only be called for unicast streams, as broadcast streams will always be enabled once created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1423" column="5" declfile="include/bluetooth/audio/audio.h" declline="1423" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga35cb1771e7849e8f8daf306cc7adc4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_start</definition>
        <argsstring>(struct bt_audio_stream *stream)</argsstring>
        <name>bt_audio_stream_start</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Start Audio Stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to make a stream start streaming.</para>
<para>This shall only be called for unicast streams. Broadcast sinks will always be started once synchronized, and broadcast source streams shall be started with <ref refid="group__bt__audio__client_1gae62725cce191d312746645be0da3e491" kindref="member">bt_audio_broadcast_source_start()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1437" column="5" declfile="include/bluetooth/audio/audio.h" declline="1437" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga77741223cef4104c99096e978d962192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_stop</definition>
        <argsstring>(struct bt_audio_stream *stream)</argsstring>
        <name>bt_audio_stream_stop</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Stop Audio Stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to make a stream stop streaming.</para>
<para>This shall only be called for unicast streams. Broadcast sinks cannot be stopped. Broadcast sources shall be stopped with <ref refid="group__bt__audio__client_1gac7299a22e9337ed454cef0ad28c13f7e" kindref="member">bt_audio_broadcast_source_stop()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1451" column="5" declfile="include/bluetooth/audio/audio.h" declline="1451" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga65efbba8455086b58620bda1b17f515a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_release</definition>
        <argsstring>(struct bt_audio_stream *stream, bool cache)</argsstring>
        <name>bt_audio_stream_release</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>cache</declname>
        </param>
        <briefdescription>
<para>Release Audio Stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This procedure is used by a client to release a unicast or broadcast source stream.</para>
<para>Broadcast sink streams cannot be released, but can be deleted by <ref refid="group__bt__audio__client_1ga1f2f6f63c95f25fe729ad7cae9b3251f" kindref="member">bt_audio_broadcast_sink_delete()</ref>. Broadcast source streams cannot be released, but can be deleted by <ref refid="group__bt__audio__client_1ga36ed8bc36f09096a456e241a2468351a" kindref="member">bt_audio_broadcast_source_delete()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cache</parametername>
</parameternamelist>
<parameterdescription>
<para>True to cache the codec configuration or false to forget it</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1468" column="5" declfile="include/bluetooth/audio/audio.h" declline="1468" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga714941f5156ef6a80dbc82f09d11cbf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_stream_send</definition>
        <argsstring>(struct bt_audio_stream *stream, struct net_buf *buf)</argsstring>
        <name>bt_audio_stream_send</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Send data to Audio stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Send data from buffer to the stream.</para>
<para><simplesect kind="note"><para>Data will not be sent to linked streams since linking is only consider for procedures affecting the state machine.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing data to be sent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bytes sent in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1482" column="5" declfile="include/bluetooth/audio/audio.h" declline="1482" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gaa874abb217ced90179c6d1090def5f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_unicast_group_create</definition>
        <argsstring>(struct bt_audio_stream *streams, uint8_t num_stream, struct bt_audio_unicast_group **unicast_group)</argsstring>
        <name>bt_audio_unicast_group_create</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>streams</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_stream</declname>
        </param>
        <param>
          <type>struct bt_audio_unicast_group **</type>
          <declname>unicast_group</declname>
        </param>
        <briefdescription>
<para>Create audio unicast group. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new audio unicast group with one or more audio streams as a unicast client. Streams in a unicast group shall share the same interval, framing and latency (see <ref refid="structbt__codec__qos" kindref="compound">bt_codec_qos</ref>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">streams</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of stream objects being used for the group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of streams in <computeroutput>streams</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">unicast_group</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the unicast group created</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1497" column="5" declfile="include/bluetooth/audio/audio.h" declline="1497" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga3c8331932f58d35d05a9183864098eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_unicast_group_delete</definition>
        <argsstring>(struct bt_audio_unicast_group *unicast_group)</argsstring>
        <name>bt_audio_unicast_group_delete</name>
        <param>
          <type>struct bt_audio_unicast_group *</type>
          <declname>unicast_group</declname>
        </param>
        <briefdescription>
<para>Delete audio unicast group. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a audio unicast group as a client. All streams in the group shall be in the idle or configured state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unicast_group</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the unicast group to delete</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1510" column="5" declfile="include/bluetooth/audio/audio.h" declline="1510" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga01d836f556f3941a299508c9c92a33f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_source_create</definition>
        <argsstring>(struct bt_audio_stream *streams, uint8_t num_stream, struct bt_codec *codec, struct bt_codec_qos *qos, struct bt_audio_broadcast_source **source)</argsstring>
        <name>bt_audio_broadcast_source_create</name>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>streams</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_stream</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec" kindref="compound">bt_codec</ref> *</type>
          <declname>codec</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec__qos" kindref="compound">bt_codec_qos</ref> *</type>
          <declname>qos</declname>
        </param>
        <param>
          <type>struct bt_audio_broadcast_source **</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Create audio broadcast source. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new audio broadcast source with one or more audio streams.</para>
<para>The broadcast source will be visible for scanners once this has been called, and the device will advertise audio announcements.</para>
<para>No audio data can be sent until <ref refid="group__bt__audio__client_1gae62725cce191d312746645be0da3e491" kindref="member">bt_audio_broadcast_source_start()</ref> has been called and no audio information (BIGInfo) will be visible to scanners (see <ref refid="structbt__le__per__adv__sync__cb" kindref="compound">bt_le_per_adv_sync_cb</ref>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">streams</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of stream objects being used for the broadcaster. This array shall remain valid for the duration of the broadcast source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of streams in <computeroutput>streams</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">qos</parametername>
</parameternamelist>
<parameterdescription>
<para>Quality of Service configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">source</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the broadcast source created</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1533" column="5" declfile="include/bluetooth/audio/audio.h" declline="1533" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gabc4be88e8a667da74de441e79b44b5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_source_reconfig</definition>
        <argsstring>(struct bt_audio_broadcast_source *source, struct bt_codec *codec, struct bt_codec_qos *qos)</argsstring>
        <name>bt_audio_broadcast_source_reconfig</name>
        <param>
          <type>struct bt_audio_broadcast_source *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec" kindref="compound">bt_codec</ref> *</type>
          <declname>codec</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec__qos" kindref="compound">bt_codec_qos</ref> *</type>
          <declname>qos</declname>
        </param>
        <briefdescription>
<para>Reconfigure audio broadcast source. </para>
        </briefdescription>
        <detaileddescription>
<para>Reconfigure an audio broadcast source with a new codec and codec quality of service parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the broadcast source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qos</parametername>
</parameternamelist>
<parameterdescription>
<para>Quality of Service configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1550" column="5" declfile="include/bluetooth/audio/audio.h" declline="1550" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gae62725cce191d312746645be0da3e491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_source_start</definition>
        <argsstring>(struct bt_audio_broadcast_source *source)</argsstring>
        <name>bt_audio_broadcast_source_start</name>
        <param>
          <type>struct bt_audio_broadcast_source *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Start audio broadcast source. </para>
        </briefdescription>
        <detaileddescription>
<para>Start an audio broadcast source with one or more audio streams. The broadcast source will start advertising BIGInfo, and audio data can be streamed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the broadcast source</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1564" column="5" declfile="include/bluetooth/audio/audio.h" declline="1564" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gac7299a22e9337ed454cef0ad28c13f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_source_stop</definition>
        <argsstring>(struct bt_audio_broadcast_source *source)</argsstring>
        <name>bt_audio_broadcast_source_stop</name>
        <param>
          <type>struct bt_audio_broadcast_source *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Stop audio broadcast source. </para>
        </briefdescription>
        <detaileddescription>
<para>Stop an audio broadcast source. The broadcast source will stop advertising BIGInfo, and audio data can no longer be streamed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the broadcast source</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1576" column="5" declfile="include/bluetooth/audio/audio.h" declline="1576" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga36ed8bc36f09096a456e241a2468351a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_source_delete</definition>
        <argsstring>(struct bt_audio_broadcast_source *source)</argsstring>
        <name>bt_audio_broadcast_source_delete</name>
        <param>
          <type>struct bt_audio_broadcast_source *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Delete audio broadcast source. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete an audio broadcast source. The broadcast source will stop advertising entirely, and the source can no longer be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the broadcast source</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1588" column="5" declfile="include/bluetooth/audio/audio.h" declline="1588" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga42e59478c8a5a1bec32bfa36cc565ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_audio_broadcast_sink_register_cb</definition>
        <argsstring>(struct bt_audio_broadcast_sink_cb *cb)</argsstring>
        <name>bt_audio_broadcast_sink_register_cb</name>
        <param>
          <type>struct <ref refid="structbt__audio__broadcast__sink__cb" kindref="compound">bt_audio_broadcast_sink_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register Broadcast sink callbacks *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Broadcast sink callback structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1594" column="6" declfile="include/bluetooth/audio/audio.h" declline="1594" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga6a0f85e56aacf457af82ec6eb586fd97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_sink_scan_start</definition>
        <argsstring>(const struct bt_le_scan_param *param)</argsstring>
        <name>bt_audio_broadcast_sink_scan_start</name>
        <param>
          <type>const struct <ref refid="structbt__le__scan__param" kindref="compound">bt_le_scan_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Start scan for broadcast sources. </para>
        </briefdescription>
        <detaileddescription>
<para>Starts a scan for broadcast sources. Scan results will be received by the scan_recv callback. Only reports from devices advertising broadcast audio support will be sent. Note that a broadcast source may advertise broadcast audio capabilities, but may not be streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Scan parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1608" column="5" declfile="include/bluetooth/audio/audio.h" declline="1608" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1gab148a4aca92215189d889ed66829d0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_sink_scan_stop</definition>
        <argsstring>(void)</argsstring>
        <name>bt_audio_broadcast_sink_scan_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stop scan for broadcast sources. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops ongoing scanning for broadcast sources.</para>
<para><simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1617" column="5" declfile="include/bluetooth/audio/audio.h" declline="1617" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga1284d368c1a803f68a56b6a8797a759d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_sink_sync</definition>
        <argsstring>(struct bt_audio_broadcast_sink *sink, uint32_t indexes_bitfield, struct bt_audio_stream *streams, struct bt_codec *codec, const uint8_t broadcast_code[16])</argsstring>
        <name>bt_audio_broadcast_sink_sync</name>
        <param>
          <type>struct bt_audio_broadcast_sink *</type>
          <declname>sink</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>indexes_bitfield</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *</type>
          <declname>streams</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__codec" kindref="compound">bt_codec</ref> *</type>
          <declname>codec</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>broadcast_code</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
<para>Sync to a broadcaster&apos;s audio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sink object from the base_recv callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexes_bitfield</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitfield of the BIS index to sync to. To sync to e.g. BIS index 1 and 2, this should have the value of <ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT(1)</ref> | <ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT(2)</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streams</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream objects to be used for the receiver. If multiple BIS indexes shall be synchronized, multiple streams shall be provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The 16-octet broadcast code. Shall be supplied if the broadcast is encrypted (see the syncable callback).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1636" column="5" declfile="include/bluetooth/audio/audio.h" declline="1636" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga8b73d5449ed8a7b4a951870759d5d1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_sink_stop</definition>
        <argsstring>(struct bt_audio_broadcast_sink *sink)</argsstring>
        <name>bt_audio_broadcast_sink_stop</name>
        <param>
          <type>struct bt_audio_broadcast_sink *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Stop audio broadcast sink. </para>
        </briefdescription>
        <detaileddescription>
<para>Stop an audio broadcast sink. The broadcast sink will stop receiving BIGInfo, and audio data can no longer be streamed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the broadcast sink</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1652" column="5" declfile="include/bluetooth/audio/audio.h" declline="1652" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__audio__client_1ga1f2f6f63c95f25fe729ad7cae9b3251f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_audio_broadcast_sink_delete</definition>
        <argsstring>(struct bt_audio_broadcast_sink *sink)</argsstring>
        <name>bt_audio_broadcast_sink_delete</name>
        <param>
          <type>struct bt_audio_broadcast_sink *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Release a broadcast sink. </para>
        </briefdescription>
        <detaileddescription>
<para>Once a broadcast sink has been allocated after the pa_synced callback, it can be deleted using this function. If the sink has synchronized to any broadcast audio streams, these must first be stopped using bt_audio_stream_stop.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sink object to delete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1665" column="5" declfile="include/bluetooth/audio/audio.h" declline="1665" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
