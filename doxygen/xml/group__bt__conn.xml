<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__conn" kind="group">
    <compoundname>bt_conn</compoundname>
    <title>Connection management</title>
    <innerclass refid="structbt__le__conn__param" prot="public">bt_le_conn_param</innerclass>
    <innerclass refid="structbt__conn__le__phy__info" prot="public">bt_conn_le_phy_info</innerclass>
    <innerclass refid="structbt__conn__le__phy__param" prot="public">bt_conn_le_phy_param</innerclass>
    <innerclass refid="structbt__conn__le__data__len__info" prot="public">bt_conn_le_data_len_info</innerclass>
    <innerclass refid="structbt__conn__le__data__len__param" prot="public">bt_conn_le_data_len_param</innerclass>
    <innerclass refid="structbt__conn__le__info" prot="public">bt_conn_le_info</innerclass>
    <innerclass refid="structbt__conn__br__info" prot="public">bt_conn_br_info</innerclass>
    <innerclass refid="structbt__conn__info" prot="public">bt_conn_info</innerclass>
    <innerclass refid="structbt__conn__le__remote__info" prot="public">bt_conn_le_remote_info</innerclass>
    <innerclass refid="structbt__conn__br__remote__info" prot="public">bt_conn_br_remote_info</innerclass>
    <innerclass refid="structbt__conn__remote__info" prot="public">bt_conn_remote_info</innerclass>
    <innerclass refid="structbt__conn__le__tx__power" prot="public">bt_conn_le_tx_power</innerclass>
    <innerclass refid="structbt__conn__le__create__param" prot="public">bt_conn_le_create_param</innerclass>
    <innerclass refid="structbt__conn__cb" prot="public">bt_conn_cb</innerclass>
    <innerclass refid="structbt__conn__oob__info" prot="public">bt_conn_oob_info</innerclass>
    <innerclass refid="structbt__conn__pairing__feat" prot="public">bt_conn_pairing_feat</innerclass>
    <innerclass refid="structbt__conn__auth__cb" prot="public">bt_conn_auth_cb</innerclass>
    <innerclass refid="structbt__br__conn__param" prot="public">bt_br_conn_param</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__bt__conn_1ga84627a72058502328269676b81780f89" prot="public" static="no" strong="no">
        <type></type>
        <name>@46</name>
        <enumvalue id="group__bt__conn_1gga84627a72058502328269676b81780f89ad5786a93b9eecfa5c5092713739cfc98" prot="public">
          <name>BT_CONN_LE_PHY_OPT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience value when no options are specified. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1gga84627a72058502328269676b81780f89a42e6ff627268b9eef111375d591f9f34" prot="public">
          <name>BT_CONN_LE_PHY_OPT_CODED_S2</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LE Coded using S=2 coding preferred when transmitting. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1gga84627a72058502328269676b81780f89ad1d46128ba2516810af7383e850929e0" prot="public">
          <name>BT_CONN_LE_PHY_OPT_CODED_S8</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LE Coded using S=8 coding preferred when transmitting. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection PHY options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="86" column="1" bodyfile="include/bluetooth/conn.h" bodystart="86" bodyend="95"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__conn_1gaf3520ff6d43011872bab77edd27d4de3" prot="public" static="no" strong="no">
        <type></type>
        <name>@47</name>
        <enumvalue id="group__bt__conn_1ggaf3520ff6d43011872bab77edd27d4de3a052db9b0af1695a63097781c2179acb2" prot="public">
          <name>BT_CONN_TYPE_LE</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LE Connection Type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf3520ff6d43011872bab77edd27d4de3a57856dfae9c62f4bd92bd66c76421cb6" prot="public">
          <name>BT_CONN_TYPE_BR</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>BR/EDR Connection Type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf3520ff6d43011872bab77edd27d4de3a99c578f145d29b9a7ce1e5d8ca4a8953" prot="public">
          <name>BT_CONN_TYPE_SCO</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SCO Connection Type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf3520ff6d43011872bab77edd27d4de3a5fa83a247fcb7bdb19761ab546e790ee" prot="public">
          <name>BT_CONN_TYPE_ISO</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ISO Connection Type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf3520ff6d43011872bab77edd27d4de3a1bb23b11dc52242911aa6d94947d5836" prot="public">
          <name>BT_CONN_TYPE_ALL</name>
          <initializer>= BT_CONN_TYPE_LE | BT_CONN_TYPE_BR |
			   BT_CONN_TYPE_SCO | BT_CONN_TYPE_ISO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>All Connection Type </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection Type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="262" column="1" bodyfile="include/bluetooth/conn.h" bodystart="262" bodyend="274"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__conn_1gae8a3b6a5d0d3244ed73924ab2421a0d0" prot="public" static="no" strong="no">
        <type></type>
        <name>@48</name>
        <enumvalue id="group__bt__conn_1ggae8a3b6a5d0d3244ed73924ab2421a0d0a865df4804411a07dad18b422a0a41d30" prot="public">
          <name>BT_CONN_ROLE_CENTRAL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggae8a3b6a5d0d3244ed73924ab2421a0d0a586a3966c9400109d9743dd29fa6a7b0" prot="public">
          <name>BT_CONN_ROLE_PERIPHERAL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="310" column="1" bodyfile="include/bluetooth/conn.h" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__conn_1ga737d8118f8aba8985292d92d0604b190" prot="public" static="no" strong="no">
        <type></type>
        <name>bt_conn_le_tx_power_phy</name>
        <enumvalue id="group__bt__conn_1gga737d8118f8aba8985292d92d0604b190a3f8bcd59ef4a1e308761041cd9d8221a" prot="public">
          <name>BT_CONN_LE_TX_POWER_PHY_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience macro for when no PHY is set. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1gga737d8118f8aba8985292d92d0604b190adcc75a9e7951316f072c306198364046" prot="public">
          <name>BT_CONN_LE_TX_POWER_PHY_1M</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LE 1M PHY </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1gga737d8118f8aba8985292d92d0604b190af38f1c897674b7796e63687c6a3d8800" prot="public">
          <name>BT_CONN_LE_TX_POWER_PHY_2M</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LE 2M PHY </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1gga737d8118f8aba8985292d92d0604b190ac916b3e64f99c89b48ff353dfb7f33b2" prot="public">
          <name>BT_CONN_LE_TX_POWER_PHY_CODED_S8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LE Coded PHY using S=8 coding. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1gga737d8118f8aba8985292d92d0604b190a8b5a5fc8e5a106ef582a0052c2550296" prot="public">
          <name>BT_CONN_LE_TX_POWER_PHY_CODED_S2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LE Coded PHY using S=2 coding. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="380" column="1" bodyfile="include/bluetooth/conn.h" bodystart="380" bodyend="391"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__conn_1gaf715e26dfffd1f8de1c18449e2770cff" prot="public" static="no" strong="no">
        <type></type>
        <name>@49</name>
        <enumvalue id="group__bt__conn_1ggaf715e26dfffd1f8de1c18449e2770cffa0735f5f66af63a389886402d65bc2ee9" prot="public">
          <name>BT_CONN_LE_OPT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convenience value when no options are specified. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf715e26dfffd1f8de1c18449e2770cffaa8fb82585ac6b405ffb711ad434ddf3b" prot="public">
          <name>BT_CONN_LE_OPT_CODED</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
<para>Enable LE Coded PHY. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    Enable scanning on the LE Coded PHY.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf715e26dfffd1f8de1c18449e2770cffa8b0037766be752bf60e61385a3f0b9d9" prot="public">
          <name>BT_CONN_LE_OPT_NO_1M</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
<para>Disable LE 1M PHY. </para>
          </briefdescription>
          <detaileddescription>
<para><verbatim>    Disable scanning on the LE 1M PHY.

    @note Requires @ref BT_CONN_LE_OPT_CODED.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="505" column="1" bodyfile="include/bluetooth/conn.h" bodystart="505" bodyend="522"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__conn_1gaf0c56cd26c4147f6c9f0faa11fa01783" prot="public" static="no" strong="no">
        <type></type>
        <name>bt_security_t</name>
        <enumvalue id="group__bt__conn_1ggaf0c56cd26c4147f6c9f0faa11fa01783a4118114ff442c8f3f43d76f884ee072e" prot="public">
          <name>BT_SECURITY_L0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Level 0: Only for BR/EDR special cases, like SDP </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf0c56cd26c4147f6c9f0faa11fa01783ab206382e5417c7513fa57ef43c0b8f1b" prot="public">
          <name>BT_SECURITY_L1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Level 1: No encryption and no authentication. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf0c56cd26c4147f6c9f0faa11fa01783ab41339994f194ae5b56f496e5ad9015a" prot="public">
          <name>BT_SECURITY_L2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Level 2: Encryption and no authentication (no MITM). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf0c56cd26c4147f6c9f0faa11fa01783a5f2688ea3a3dd1c1ffb1df8f01dc3631" prot="public">
          <name>BT_SECURITY_L3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Level 3: Encryption and authentication (MITM). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf0c56cd26c4147f6c9f0faa11fa01783a199d97cd8f5283114164e673e4f46d81" prot="public">
          <name>BT_SECURITY_L4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Level 4: Authenticated Secure Connections and 128-bit key. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaf0c56cd26c4147f6c9f0faa11fa01783aaef159a9eab5d1cd7a7ed2d3cee30bae" prot="public">
          <name>BT_SECURITY_FORCE_PAIR</name>
          <initializer>= BIT(7)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit to force new pairing procedure, bit-wise OR with requested security level. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Security level. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="667" column="1" bodyfile="include/bluetooth/conn.h" bodystart="667" bodyend="682"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__conn_1gaa9420ff489fd5857ff076406442679ff" prot="public" static="no" strong="no">
        <type></type>
        <name>bt_security_err</name>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffac6c961c46cc902106aff62f63f2f8c05" prot="public">
          <name>BT_SECURITY_ERR_SUCCESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Security procedure successful. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffa8ad3317bf644acf6ddf404a3e1889cd7" prot="public">
          <name>BT_SECURITY_ERR_AUTH_FAIL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Authentication failed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffaa93aba41a30ecc018c8874c428fe3171" prot="public">
          <name>BT_SECURITY_ERR_PIN_OR_KEY_MISSING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PIN or encryption key is missing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffa04fbf27abe91464bb9fbf94ec2fa14e7" prot="public">
          <name>BT_SECURITY_ERR_OOB_NOT_AVAILABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>OOB data is not available. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffa36ae39a9d06da01c069fe2829233ecae" prot="public">
          <name>BT_SECURITY_ERR_AUTH_REQUIREMENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The requested security level could not be reached. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffa899c018b2037b41d73959e2ec84a7ca6" prot="public">
          <name>BT_SECURITY_ERR_PAIR_NOT_SUPPORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pairing is not supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffad0cb2a268ee2e8669cbfc4b553c8ec4f" prot="public">
          <name>BT_SECURITY_ERR_PAIR_NOT_ALLOWED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pairing is not allowed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffa55e6e65d1b995dc0cec435597f45a7f5" prot="public">
          <name>BT_SECURITY_ERR_INVALID_PARAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalid parameters. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffa508e373e740abeb0135754aabc466216" prot="public">
          <name>BT_SECURITY_ERR_KEY_REJECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Distributed Key Rejected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__conn_1ggaa9420ff489fd5857ff076406442679ffa52cf38688cd106e31b260381c59fd242" prot="public">
          <name>BT_SECURITY_ERR_UNSPECIFIED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pairing failed but the exact reason could not be specified. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="733" column="1" bodyfile="include/bluetooth/conn.h" bodystart="733" bodyend="763"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__conn_1ga060d51eb2208de6f805b1fc0672d2d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct bt_conn *</type>
        <definition>struct bt_conn * bt_conn_ref</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_ref</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Increment a connection&apos;s reference count. </para>
        </briefdescription>
        <detaileddescription>
<para>Increment the reference count of a connection object.</para>
<para><simplesect kind="note"><para>Will return NULL if the reference count is zero.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Connection object with incremented reference count, or NULL if the reference count is zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="208" column="14" declfile="include/bluetooth/conn.h" declline="208" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga4b18c6b22a9f02be0d7d078b2ce51ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_conn_unref</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_unref</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Decrement a connection&apos;s reference count. </para>
        </briefdescription>
        <detaileddescription>
<para>Decrement the reference count of a connection object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="216" column="6" declfile="include/bluetooth/conn.h" declline="216" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga5e2fa28f7e0b5faaa138cec9bba8bf16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_conn_foreach</definition>
        <argsstring>(int type, void(*func)(struct bt_conn *conn, void *data), void *data)</argsstring>
        <name>bt_conn_foreach</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void(*)(struct bt_conn *conn, void *<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Iterate through all existing connections. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection Type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call for each connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to pass to the callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="224" column="6" declfile="include/bluetooth/conn.h" declline="224" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga1bfe349efd8a7de31e9457fe439d746a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct bt_conn *</type>
        <definition>struct bt_conn * bt_conn_lookup_addr_le</definition>
        <argsstring>(uint8_t id, const bt_addr_le_t *peer)</argsstring>
        <name>bt_conn_lookup_addr_le</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
<para>Look up an existing connection by address. </para>
        </briefdescription>
        <detaileddescription>
<para>Look up an existing connection based on the remote address.</para>
<para>The caller gets a new reference to the connection object which must be released with <ref refid="group__bt__conn_1ga4b18c6b22a9f02be0d7d078b2ce51ff6" kindref="member">bt_conn_unref()</ref> once done using the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Local identity (in most cases BT_ID_DEFAULT). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Connection object or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="239" column="14" declfile="include/bluetooth/conn.h" declline="239" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga77108581b8f61485ca840e4bf7a17087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
        <definition>const bt_addr_le_t * bt_conn_get_dst</definition>
        <argsstring>(const struct bt_conn *conn)</argsstring>
        <name>bt_conn_get_dst</name>
        <param>
          <type>const struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Get destination (peer) address of a connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Destination address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="247" column="20" declfile="include/bluetooth/conn.h" declline="247" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gaa63206cfdd9a469f4bb65a98e920a34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_conn_index</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_index</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Get array index of a connection. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to map bt_conn to index of an array of connections. The array has CONFIG_BT_MAX_CONN elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the connection object. The range of the returned value is 0..CONFIG_BT_MAX_CONN-1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="259" column="9" declfile="include/bluetooth/conn.h" declline="259" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga2de54f2ac83f0d8dca2a85a9fbfadcaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_get_info</definition>
        <argsstring>(const struct bt_conn *conn, struct bt_conn_info *info)</argsstring>
        <name>bt_conn_get_info</name>
        <param>
          <type>const struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__conn__info" kindref="compound">bt_conn_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get connection info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection info object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="413" column="5" declfile="include/bluetooth/conn.h" declline="413" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga6ea4478db6d95bd6a0d316399db36d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_get_remote_info</definition>
        <argsstring>(struct bt_conn *conn, struct bt_conn_remote_info *remote_info)</argsstring>
        <name>bt_conn_get_remote_info</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__conn__remote__info" kindref="compound">bt_conn_remote_info</ref> *</type>
          <declname>remote_info</declname>
        </param>
        <briefdescription>
<para>Get connection info for the remote device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection remote info object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>In order to retrieve the remote version (version, manufacturer and subversion) <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_REMOTE_VERSION` </verbatim> must be enabled</para>
</simplesect>
<simplesect kind="note"><para>The remote information is exchanged directly after the connection has been established. The application can be notified about when the remote information is available through the remote_info_available callback.</para>
</simplesect>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
<simplesect kind="return"><para>-EBUSY The remote information is not yet available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="430" column="5" declfile="include/bluetooth/conn.h" declline="430" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gaa5289154bc508444f68df7abcef18aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_le_get_tx_power_level</definition>
        <argsstring>(struct bt_conn *conn, struct bt_conn_le_tx_power *tx_power_level)</argsstring>
        <name>bt_conn_le_get_tx_power_level</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__conn__le__tx__power" kindref="compound">bt_conn_le_tx_power</ref> *</type>
          <declname>tx_power_level</declname>
        </param>
        <briefdescription>
<para>Get connection transmit power level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_power_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit power level descriptor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
<simplesect kind="return"><para>-ENOBUFS HCI command buffer is not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="441" column="5" declfile="include/bluetooth/conn.h" declline="441" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gab44a964725f54ed2d37de17c6e2fd3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_le_param_update</definition>
        <argsstring>(struct bt_conn *conn, const struct bt_le_conn_param *param)</argsstring>
        <name>bt_conn_le_param_update</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__conn__param" kindref="compound">bt_le_conn_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Update the connection parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>If the local device is in the peripheral role then updating the connection parameters will be delayed. This delay can be configured by through the <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT` </verbatim> option.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Updated connection parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="455" column="5" declfile="include/bluetooth/conn.h" declline="455" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga8a2006f6e34b20c7e8ef65a73f431a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_le_data_len_update</definition>
        <argsstring>(struct bt_conn *conn, const struct bt_conn_le_data_len_param *param)</argsstring>
        <name>bt_conn_le_data_len_update</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__conn__le__data__len__param" kindref="compound">bt_conn_le_data_len_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Update the connection transmit data length parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Updated data length parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="465" column="5" declfile="include/bluetooth/conn.h" declline="465" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gae13ed81b1e7928f44b8fdf85995b3e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_le_phy_update</definition>
        <argsstring>(struct bt_conn *conn, const struct bt_conn_le_phy_param *param)</argsstring>
        <name>bt_conn_le_phy_update</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__conn__le__phy__param" kindref="compound">bt_conn_le_phy_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Update the connection PHY parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Update the preferred transmit and receive PHYs of the connection. Use <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173aaf7e1b40f6464a603e5116db269cacab" kindref="member">BT_GAP_LE_PHY_NONE</ref> to indicate no preference.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Updated connection parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="478" column="5" declfile="include/bluetooth/conn.h" declline="478" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga14e7c852b0271781594e742ae509c5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_disconnect</definition>
        <argsstring>(struct bt_conn *conn, uint8_t reason)</argsstring>
        <name>bt_conn_disconnect</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Disconnect from a remote device or cancel pending connection. </para>
        </briefdescription>
        <detaileddescription>
<para>Disconnect an active connection with the specified reason code or cancel pending outgoing connection.</para>
<para>The disconnect reason for a normal disconnect should be: <ref refid="hci__err_8h_1ac0e3b44027180d7a2dedb59395c4b111" kindref="member">BT_HCI_ERR_REMOTE_USER_TERM_CONN</ref>.</para>
<para>The following disconnect reasons are accepted:<itemizedlist>
<listitem><para><ref refid="hci__err_8h_1a070d51dd0de3288f9811f90a558c889b" kindref="member">BT_HCI_ERR_AUTH_FAIL</ref></para>
</listitem><listitem><para><ref refid="hci__err_8h_1ac0e3b44027180d7a2dedb59395c4b111" kindref="member">BT_HCI_ERR_REMOTE_USER_TERM_CONN</ref></para>
</listitem><listitem><para><ref refid="hci__err_8h_1a5eeadfb220c24b2e7f5ce3fd21e5d46a" kindref="member">BT_HCI_ERR_REMOTE_LOW_RESOURCES</ref></para>
</listitem><listitem><para><ref refid="hci__err_8h_1a083f1fc52300f7e47c2f8d4e50551851" kindref="member">BT_HCI_ERR_REMOTE_POWER_OFF</ref></para>
</listitem><listitem><para><ref refid="hci__err_8h_1a516751f02bd497a020783f69bcf71453" kindref="member">BT_HCI_ERR_UNSUPP_REMOTE_FEATURE</ref></para>
</listitem><listitem><para><ref refid="hci__err_8h_1a059c7d5619823eddf2c541b40a6464cb" kindref="member">BT_HCI_ERR_PAIRING_NOT_SUPPORTED</ref></para>
</listitem><listitem><para><ref refid="hci__err_8h_1a712e214942c0d151597ce04e9d0df453" kindref="member">BT_HCI_ERR_UNACCEPT_CONN_PARAM</ref></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to disconnect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Reason code for the disconnection.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="503" column="5" declfile="include/bluetooth/conn.h" declline="503" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga8d66f3e0262a51279e9fa8b3139252e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_le_create</definition>
        <argsstring>(const bt_addr_le_t *peer, const struct bt_conn_le_create_param *create_param, const struct bt_le_conn_param *conn_param, struct bt_conn **conn)</argsstring>
        <name>bt_conn_le_create</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__conn__le__create__param" kindref="compound">bt_conn_le_create_param</ref> *</type>
          <declname>create_param</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__conn__param" kindref="compound">bt_le_conn_param</ref> *</type>
          <declname>conn_param</declname>
        </param>
        <param>
          <type>struct bt_conn **</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Initiate an LE connection to a remote device. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows initiate new LE link to remote peer using its address.</para>
<para>The caller gets a new reference to the connection object which must be released with <ref refid="group__bt__conn_1ga4b18c6b22a9f02be0d7d078b2ce51ff6" kindref="member">bt_conn_unref()</ref> once done using the object.</para>
<para>This uses the General Connection Establishment procedure.</para>
<para>The application must disable explicit scanning before initiating a new LE connection.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peer</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">create_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">conn_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial connection parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid connection object on success.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="620" column="5" declfile="include/bluetooth/conn.h" declline="620" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gaecfaf2cb44772511dbb585de8f76f09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_le_create_auto</definition>
        <argsstring>(const struct bt_conn_le_create_param *create_param, const struct bt_le_conn_param *conn_param)</argsstring>
        <name>bt_conn_le_create_auto</name>
        <param>
          <type>const struct <ref refid="structbt__conn__le__create__param" kindref="compound">bt_conn_le_create_param</ref> *</type>
          <declname>create_param</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__conn__param" kindref="compound">bt_le_conn_param</ref> *</type>
          <declname>conn_param</declname>
        </param>
        <briefdescription>
<para>Automatically connect to remote devices in the filter accept list.. </para>
        </briefdescription>
        <detaileddescription>
<para>This uses the Auto Connection Establishment procedure. The procedure will continue until a single connection is established or the procedure is stopped through <ref refid="group__bt__conn_1ga62dc2663b4fa39a33adb76dc9a136aa4" kindref="member">bt_conn_create_auto_stop</ref>. To establish connections to all devices in the the filter accept list the procedure should be started again in the connected callback after a new connection has been established.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>create_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial connection parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
<simplesect kind="return"><para>-ENOMEM No free connection object available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="640" column="5" declfile="include/bluetooth/conn.h" declline="640" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga62dc2663b4fa39a33adb76dc9a136aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_create_auto_stop</definition>
        <argsstring>(void)</argsstring>
        <name>bt_conn_create_auto_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stop automatic connect creation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Zero on success or (negative) error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="647" column="5" declfile="include/bluetooth/conn.h" declline="647" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga8eea2211705d0691acc6ee4e0c37a47a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_set_auto_conn</definition>
        <argsstring>(const bt_addr_le_t *addr, const struct bt_le_conn_param *param)</argsstring>
        <name>bt_le_set_auto_conn</name>
        <param>
          <type>const <ref refid="structbt__addr__le__t" kindref="compound">bt_addr_le_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__conn__param" kindref="compound">bt_le_conn_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Automatically connect to remote device if it&apos;s in range. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables/disables automatic connection initiation. Every time the device loses the connection with peer, this connection will be re-established if connectable advertisement from peer is received.</para>
<para><simplesect kind="note"><para>Auto connect is disabled during explicit scanning.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote Bluetooth address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, auto connect is enabled with the given parameters. If NULL, auto connect is disabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="663" column="5" declfile="include/bluetooth/conn.h" declline="663" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gae001f1268e1ff42c3c974c95dcb6735d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_set_security</definition>
        <argsstring>(struct bt_conn *conn, bt_security_t sec)</argsstring>
        <name>bt_conn_set_security</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="group__bt__conn_1gaf0c56cd26c4147f6c9f0faa11fa01783" kindref="member">bt_security_t</ref></type>
          <declname>sec</declname>
        </param>
        <briefdescription>
<para>Set security level for a connection. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enable security (encryption) for a connection. If the device has bond information for the peer with sufficiently strong key encryption will be enabled. If the connection is already encrypted with sufficiently strong key this function does nothing.</para>
<para>If the device has no bond information for the peer and is not already paired then the pairing procedure will be initiated. If the device has bond information or is already paired and the keys are too weak then the pairing procedure will be initiated.</para>
<para>This function may return error if required level of security is not possible to achieve due to local or remote device limitation (e.g., input output capabilities), or if the maximum number of paired devices has been reached.</para>
<para>This function may return error if the pairing procedure has already been initiated by the local device or the peer device.</para>
<para><simplesect kind="note"><para>When <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_SMP_SC_ONLY` </verbatim> is enabled then the security level will always be level 4.</para>
</simplesect>
<simplesect kind="note"><para>When <verbatim>embed:rst:inline :kconfig:option:`CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY` </verbatim> is enabled then the security level will always be level 3.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sec</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested security level.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or negative error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="714" column="5" declfile="include/bluetooth/conn.h" declline="714" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga0cd2d7506b50d36065485a3da04f4658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__bt__conn_1gaf0c56cd26c4147f6c9f0faa11fa01783" kindref="member">bt_security_t</ref></type>
        <definition>bt_security_t bt_conn_get_security</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_get_security</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Get security level for a connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Connection security level </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="720" column="15" declfile="include/bluetooth/conn.h" declline="720" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga08c9fa2190d73023987aa6be44701045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_conn_enc_key_size</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_enc_key_size</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Get encryption key size. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets encryption key size. If there is no security (encryption) enabled 0 will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Existing connection object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Encryption key size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="731" column="9" declfile="include/bluetooth/conn.h" declline="731" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga33b35e6457af183e059078aead4562b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_conn_cb_register</definition>
        <argsstring>(struct bt_conn_cb *cb)</argsstring>
        <name>bt_conn_cb_register</name>
        <param>
          <type>struct <ref refid="structbt__conn__cb" kindref="compound">bt_conn_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register connection callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para>Register callbacks to monitor the state of connections.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback struct. Must point to memory that remains valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="954" column="6" declfile="include/bluetooth/conn.h" declline="954" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga014db594b17a3b5d7d954e64ad8de759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_set_bondable</definition>
        <argsstring>(bool enable)</argsstring>
        <name>bt_set_bondable</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/disable bonding. </para>
        </briefdescription>
        <detaileddescription>
<para>Set/clear the Bonding flag in the Authentication Requirements of SMP Pairing Request/Response data. The initial value of this flag depends on BT_BONDABLE Kconfig setting. For the vast majority of applications calling this function shouldn&apos;t be needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Value allowing/disallowing to be bondable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="977" column="6" declfile="include/bluetooth/conn.h" declline="977" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga874a3491fcc6ee3061aabf876841d5c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_set_oob_data_flag</definition>
        <argsstring>(bool enable)</argsstring>
        <name>bt_set_oob_data_flag</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Allow/disallow remote OOB data to be used for pairing. </para>
        </briefdescription>
        <detaileddescription>
<para>Set/clear the OOB data flag for SMP Pairing Request/Response data. The initial value of this flag depends on BT_OOB_DATA_PRESENT Kconfig setting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Value allowing/disallowing remote OOB data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="987" column="6" declfile="include/bluetooth/conn.h" declline="987" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga0f889983cfabafe826b4feb6899b95ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_oob_set_legacy_tk</definition>
        <argsstring>(struct bt_conn *conn, const uint8_t *tk)</argsstring>
        <name>bt_le_oob_set_legacy_tk</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>tk</declname>
        </param>
        <briefdescription>
<para>Set OOB Temporary Key to be used for pairing. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to set OOB data for the LE legacy pairing procedure. The function should only be called in response to the oob_data_request() callback provided that the legacy method is user pairing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tk</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to 16 byte long TK array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or -EINVAL if NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1000" column="5" declfile="include/bluetooth/conn.h" declline="1000" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gac365f9748ad0737f09142ee1de982503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_oob_set_sc_data</definition>
        <argsstring>(struct bt_conn *conn, const struct bt_le_oob_sc_data *oobd_local, const struct bt_le_oob_sc_data *oobd_remote)</argsstring>
        <name>bt_le_oob_set_sc_data</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__oob__sc__data" kindref="compound">bt_le_oob_sc_data</ref> *</type>
          <declname>oobd_local</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__oob__sc__data" kindref="compound">bt_le_oob_sc_data</ref> *</type>
          <declname>oobd_remote</declname>
        </param>
        <briefdescription>
<para>Set OOB data during LE Secure Connections (SC) pairing procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to set OOB data during the LE SC pairing procedure. The function should only be called in response to the oob_data_request() callback provided that LE SC method is used for pairing.</para>
<para>The user should submit OOB data according to the information received in the callback. This may yield three different configurations: with only local OOB data present, with only remote OOB data present or with both local and remote OOB data present.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oobd_local</parametername>
</parameternamelist>
<parameterdescription>
<para>Local OOB data or NULL if not present </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oobd_remote</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote OOB data or NULL if not present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1020" column="5" declfile="include/bluetooth/conn.h" declline="1020" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga096552403b5bcd0107f69eded772b1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_le_oob_get_sc_data</definition>
        <argsstring>(struct bt_conn *conn, const struct bt_le_oob_sc_data **oobd_local, const struct bt_le_oob_sc_data **oobd_remote)</argsstring>
        <name>bt_le_oob_get_sc_data</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__oob__sc__data" kindref="compound">bt_le_oob_sc_data</ref> **</type>
          <declname>oobd_local</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__le__oob__sc__data" kindref="compound">bt_le_oob_sc_data</ref> **</type>
          <declname>oobd_remote</declname>
        </param>
        <briefdescription>
<para>Get OOB data used for LE Secure Connections (SC) pairing procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to get OOB data during the LE SC pairing procedure that were set by the <ref refid="group__bt__conn_1gac365f9748ad0737f09142ee1de982503" kindref="member">bt_le_oob_set_sc_data()</ref> API.</para>
<para><simplesect kind="note"><para>The OOB data will only be available as long as the connection object associated with it is valid.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oobd_local</parametername>
</parameternamelist>
<parameterdescription>
<para>Local OOB data or NULL if not set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oobd_remote</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote OOB data or NULL if not set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or error code otherwise, positive in case of protocol error or negative (POSIX) in case of stack internal error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1039" column="5" declfile="include/bluetooth/conn.h" declline="1039" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga32c7598c086f209f9e1dee2aacbb40a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_passkey_set</definition>
        <argsstring>(unsigned int passkey)</argsstring>
        <name>bt_passkey_set</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>passkey</declname>
        </param>
        <briefdescription>
<para>Set a fixed passkey to be used for pairing. </para>
        </briefdescription>
        <detaileddescription>
<para>This API is only available when the CONFIG_BT_FIXED_PASSKEY configuration option has been enabled.</para>
<para>Sets a fixed passkey to be used for pairing. If set, the pairing_confim() callback will be called for all incoming pairings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>passkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid passkey (0 - 999999) or BT_PASSKEY_INVALID to disable a previously set fixed passkey.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1063" column="5" declfile="include/bluetooth/conn.h" declline="1063" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga1bf13d2dfdbdf0a72f9b1c759ef23f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_auth_cb_register</definition>
        <argsstring>(const struct bt_conn_auth_cb *cb)</argsstring>
        <name>bt_conn_auth_cb_register</name>
        <param>
          <type>const struct <ref refid="structbt__conn__auth__cb" kindref="compound">bt_conn_auth_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register authentication callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para>Register callbacks to handle authenticated pairing. Passing NULL unregisters a previous callbacks structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback struct.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1340" column="5" declfile="include/bluetooth/conn.h" declline="1340" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga3906d8d3d192e8a6ad1bf6b7acc32ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_auth_passkey_entry</definition>
        <argsstring>(struct bt_conn *conn, unsigned int passkey)</argsstring>
        <name>bt_conn_auth_passkey_entry</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>passkey</declname>
        </param>
        <briefdescription>
<para>Reply with entered passkey. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called only after passkey_entry callback from <ref refid="structbt__conn__auth__cb" kindref="compound">bt_conn_auth_cb</ref> structure was called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Entered passkey.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1352" column="5" declfile="include/bluetooth/conn.h" declline="1352" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga89e5fc4bcab3f5598d20a9cd8ace5f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_auth_cancel</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_auth_cancel</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Cancel ongoing authenticated pairing. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to cancel ongoing authenticated pairing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1362" column="5" declfile="include/bluetooth/conn.h" declline="1362" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gab8c3ecf2a3d68e54379917844a29d995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_auth_passkey_confirm</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_auth_passkey_confirm</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Reply if passkey was confirmed to match by user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called only after passkey_confirm callback from <ref refid="structbt__conn__auth__cb" kindref="compound">bt_conn_auth_cb</ref> structure was called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1373" column="5" declfile="include/bluetooth/conn.h" declline="1373" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga3e15b9deb6787d3e415bbea35c9aa91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_auth_pairing_confirm</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_conn_auth_pairing_confirm</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Reply if incoming pairing was confirmed by user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called only after pairing_confirm callback from <ref refid="structbt__conn__auth__cb" kindref="compound">bt_conn_auth_cb</ref> structure was called if user confirmed incoming pairing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1384" column="5" declfile="include/bluetooth/conn.h" declline="1384" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1ga4002a1b092832807218afa8ad279ab98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_conn_auth_pincode_entry</definition>
        <argsstring>(struct bt_conn *conn, const char *pin)</argsstring>
        <name>bt_conn_auth_pincode_entry</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Reply with entered PIN code. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called only after PIN code callback from <ref refid="structbt__conn__auth__cb" kindref="compound">bt_conn_auth_cb</ref> structure was called. It&apos;s for legacy 2.0 devices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Entered PIN code.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or negative error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1396" column="5" declfile="include/bluetooth/conn.h" declline="1396" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gaf7849f332386f8903d35d6904f6c82b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct bt_conn *</type>
        <definition>struct bt_conn * bt_conn_create_br</definition>
        <argsstring>(const bt_addr_t *peer, const struct bt_br_conn_param *param)</argsstring>
        <name>bt_conn_create_br</name>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>const struct <ref refid="structbt__br__conn__param" kindref="compound">bt_br_conn_param</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Initiate an BR/EDR connection to a remote device. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows initiate new BR/EDR link to remote peer using its address.</para>
<para>The caller gets a new reference to the connection object which must be released with <ref refid="group__bt__conn_1ga4b18c6b22a9f02be0d7d078b2ce51ff6" kindref="member">bt_conn_unref()</ref> once done using the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial connection parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Valid connection object on success or NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1439" column="14" declfile="include/bluetooth/conn.h" declline="1439" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__conn_1gac270287d6764dff1963f859a51a438e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct bt_conn *</type>
        <definition>struct bt_conn * bt_conn_create_sco</definition>
        <argsstring>(const bt_addr_t *peer)</argsstring>
        <name>bt_conn_create_sco</name>
        <param>
          <type>const <ref refid="structbt__addr__t" kindref="compound">bt_addr_t</ref> *</type>
          <declname>peer</declname>
        </param>
        <briefdescription>
<para>Initiate an SCO connection to a remote device. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows initiate new SCO link to remote peer using its address.</para>
<para>The caller gets a new reference to the connection object which must be released with <ref refid="group__bt__conn_1ga4b18c6b22a9f02be0d7d078b2ce51ff6" kindref="member">bt_conn_unref()</ref> once done using the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Valid connection object on success or NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1453" column="14" declfile="include/bluetooth/conn.h" declline="1453" declcolumn="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__conn_1ga81de567c4c8cb691ef8b02633b42e342" prot="public" static="no">
        <name>BT_LE_CONN_PARAM_INIT</name>
        <param><defname>int_min</defname></param>
        <param><defname>int_max</defname></param>
        <param><defname>lat</defname></param>
        <param><defname>to</defname></param>
        <initializer>{ \
	.interval_min = (int_min), \
	.interval_max = (int_max), \
	.latency = (lat), \
	.<ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref> = (to), \
}</initializer>
        <briefdescription>
<para>Initialize connection parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum Connection Interval (N * 1.25 ms) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Connection Interval (N * 1.25 ms) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lat</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection Latency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>Supervision Timeout (N * 10 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="50" column="9" bodyfile="include/bluetooth/conn.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga940d55c0d84c0cb8f09bc41074ae50d0" prot="public" static="no">
        <name>BT_LE_CONN_PARAM</name>
        <param><defname>int_min</defname></param>
        <param><defname>int_max</defname></param>
        <param><defname>lat</defname></param>
        <param><defname>to</defname></param>
        <initializer>	((struct <ref refid="structbt__le__conn__param" kindref="compound">bt_le_conn_param</ref>[]) { \
		<ref refid="group__bt__conn_1ga81de567c4c8cb691ef8b02633b42e342" kindref="member">BT_LE_CONN_PARAM_INIT</ref>(int_min, int_max, lat, to) \
	 })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare connection parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum Connection Interval (N * 1.25 ms) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Connection Interval (N * 1.25 ms) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lat</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection Latency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>Supervision Timeout (N * 10 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="65" column="9" bodyfile="include/bluetooth/conn.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga82df8f439aeb3a156f4238deb085534a" prot="public" static="no">
        <name>BT_LE_CONN_PARAM_DEFAULT</name>
        <initializer>						  <ref refid="group__bt__conn_1ga940d55c0d84c0cb8f09bc41074ae50d0" kindref="member">BT_LE_CONN_PARAM</ref>(<ref refid="group__bt__gap__defines_1gadaa7f1547c4ea22936087c181d82a552" kindref="member">BT_GAP_INIT_CONN_INT_MIN</ref>, \
						  <ref refid="group__bt__gap__defines_1ga8a6e6ce5e7024c40cc7cae6d4f5c2ed1" kindref="member">BT_GAP_INIT_CONN_INT_MAX</ref>, \
						  0, 400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default LE connection parameters: Connection Interval: 30-50 ms Latency: 0 Timeout: 4 s </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="75" column="9" bodyfile="include/bluetooth/conn.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1gabca56de0c82c14995738952dafb1fe2d" prot="public" static="no">
        <name>BT_CONN_LE_PHY_PARAM_INIT</name>
        <param><defname>_pref_tx_phy</defname></param>
        <param><defname>_pref_rx_phy</defname></param>
        <initializer>{ \
	.options = <ref refid="group__bt__conn_1gga84627a72058502328269676b81780f89ad5786a93b9eecfa5c5092713739cfc98" kindref="member">BT_CONN_LE_PHY_OPT_NONE</ref>, \
	.pref_tx_phy = (_pref_tx_phy), \
	.pref_rx_phy = (_pref_rx_phy), \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize PHY parameters</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_pref_tx_phy</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of preferred transmit PHYs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_pref_rx_phy</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of preferred receive PHYs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="109" column="9" bodyfile="include/bluetooth/conn.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga39b69f0978f74b5f13f829e908b7cebb" prot="public" static="no">
        <name>BT_CONN_LE_PHY_PARAM</name>
        <param><defname>_pref_tx_phy</defname></param>
        <param><defname>_pref_rx_phy</defname></param>
        <initializer>	((struct <ref refid="structbt__conn__le__phy__param" kindref="compound">bt_conn_le_phy_param</ref> []) { \
		<ref refid="group__bt__conn_1gabca56de0c82c14995738952dafb1fe2d" kindref="member">BT_CONN_LE_PHY_PARAM_INIT</ref>(_pref_tx_phy, _pref_rx_phy) \
	 })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare PHY parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_pref_tx_phy</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of preferred transmit PHYs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_pref_rx_phy</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of preferred receive PHYs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="121" column="9" bodyfile="include/bluetooth/conn.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga3ec555bb4ace5e9c7c13735820fd31de" prot="public" static="no">
        <name>BT_CONN_LE_PHY_PARAM_1M</name>
        <initializer>						     <ref refid="group__bt__conn_1ga39b69f0978f74b5f13f829e908b7cebb" kindref="member">BT_CONN_LE_PHY_PARAM</ref>(<ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a53eff400720a20fe1a91da4834bad752" kindref="member">BT_GAP_LE_PHY_1M</ref>, \
						     <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a53eff400720a20fe1a91da4834bad752" kindref="member">BT_GAP_LE_PHY_1M</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only LE 1M PHY </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="127" column="9" bodyfile="include/bluetooth/conn.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga633126e356658886e9fa3f3217cb4e2c" prot="public" static="no">
        <name>BT_CONN_LE_PHY_PARAM_2M</name>
        <initializer>						     <ref refid="group__bt__conn_1ga39b69f0978f74b5f13f829e908b7cebb" kindref="member">BT_CONN_LE_PHY_PARAM</ref>(<ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a662049cc8293959194bcb481e1dd50a8" kindref="member">BT_GAP_LE_PHY_2M</ref>, \
						     <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a662049cc8293959194bcb481e1dd50a8" kindref="member">BT_GAP_LE_PHY_2M</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only LE 2M PHY </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="131" column="9" bodyfile="include/bluetooth/conn.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga4915244a6cd70995514d6dde1ee0b45f" prot="public" static="no">
        <name>BT_CONN_LE_PHY_PARAM_CODED</name>
        <initializer>							<ref refid="group__bt__conn_1ga39b69f0978f74b5f13f829e908b7cebb" kindref="member">BT_CONN_LE_PHY_PARAM</ref>(<ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a97d042e48448fdf6a9e35e5d38cb14c3" kindref="member">BT_GAP_LE_PHY_CODED</ref>, \
							<ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a97d042e48448fdf6a9e35e5d38cb14c3" kindref="member">BT_GAP_LE_PHY_CODED</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only LE Coded PHY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="135" column="9" bodyfile="include/bluetooth/conn.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga02c9d7a04ccf2f043293aed7a7f767a7" prot="public" static="no">
        <name>BT_CONN_LE_PHY_PARAM_ALL</name>
        <initializer>						      <ref refid="group__bt__conn_1ga39b69f0978f74b5f13f829e908b7cebb" kindref="member">BT_CONN_LE_PHY_PARAM</ref>(<ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a53eff400720a20fe1a91da4834bad752" kindref="member">BT_GAP_LE_PHY_1M</ref> |   \
						      <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a662049cc8293959194bcb481e1dd50a8" kindref="member">BT_GAP_LE_PHY_2M</ref> |   \
						      <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a97d042e48448fdf6a9e35e5d38cb14c3" kindref="member">BT_GAP_LE_PHY_CODED</ref>, \
						      <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a53eff400720a20fe1a91da4834bad752" kindref="member">BT_GAP_LE_PHY_1M</ref> |   \
						      <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a662049cc8293959194bcb481e1dd50a8" kindref="member">BT_GAP_LE_PHY_2M</ref> |   \
						      <ref refid="group__bt__gap__defines_1gga56a0f36da7f9eaaf54bd05cc2bf49173a97d042e48448fdf6a9e35e5d38cb14c3" kindref="member">BT_GAP_LE_PHY_CODED</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All LE PHYs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="139" column="9" bodyfile="include/bluetooth/conn.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga98f9dab71897382cf1187259a3b5660e" prot="public" static="no">
        <name>BT_CONN_LE_DATA_LEN_PARAM_INIT</name>
        <param><defname>_tx_max_len</defname></param>
        <param><defname>_tx_max_time</defname></param>
        <initializer>{ \
	.tx_max_len = (_tx_max_len), \
	.tx_max_time = (_tx_max_time), \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize transmit data length parameters</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_tx_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Link Layer transmission payload size in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_tx_max_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Link Layer transmission payload time in us. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="171" column="9" bodyfile="include/bluetooth/conn.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga102b97de8689fe3fb53f9691009de87f" prot="public" static="no">
        <name>BT_CONN_LE_DATA_LEN_PARAM</name>
        <param><defname>_tx_max_len</defname></param>
        <param><defname>_tx_max_time</defname></param>
        <initializer>	((struct <ref refid="structbt__conn__le__data__len__param" kindref="compound">bt_conn_le_data_len_param</ref>[]) { \
		<ref refid="group__bt__conn_1ga98f9dab71897382cf1187259a3b5660e" kindref="member">BT_CONN_LE_DATA_LEN_PARAM_INIT</ref>(_tx_max_len, _tx_max_time) \
	 })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare transmit data length parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_tx_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Link Layer transmission payload size in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_tx_max_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Link Layer transmission payload time in us. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="182" column="9" bodyfile="include/bluetooth/conn.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1gaf66746d834f7556dc77659741e27e0c9" prot="public" static="no">
        <name>BT_LE_DATA_LEN_PARAM_DEFAULT</name>
        <initializer>	<ref refid="group__bt__conn_1ga102b97de8689fe3fb53f9691009de87f" kindref="member">BT_CONN_LE_DATA_LEN_PARAM</ref>(<ref refid="group__bt__gap__defines_1ga90cfab7c375a8af6f9224a5635cbd023" kindref="member">BT_GAP_DATA_LEN_DEFAULT</ref>, \
				  <ref refid="group__bt__gap__defines_1ga245249c0b6f8ccc419f2132f76362908" kindref="member">BT_GAP_DATA_TIME_DEFAULT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default LE data length parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="188" column="9" bodyfile="include/bluetooth/conn.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga9cc26afda3c507cb5439184fedcd61ba" prot="public" static="no">
        <name>BT_LE_DATA_LEN_PARAM_MAX</name>
        <initializer>	<ref refid="group__bt__conn_1ga102b97de8689fe3fb53f9691009de87f" kindref="member">BT_CONN_LE_DATA_LEN_PARAM</ref>(<ref refid="group__bt__gap__defines_1gacf5f35866d4677bd45c6e567886cabb9" kindref="member">BT_GAP_DATA_LEN_MAX</ref>, \
				  <ref refid="group__bt__gap__defines_1ga379b5d8d7f243abbc584c288cd01815f" kindref="member">BT_GAP_DATA_TIME_MAX</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum LE data length parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="193" column="9" bodyfile="include/bluetooth/conn.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga707cc62b12c89478aebd0488a464a776" prot="public" static="no">
        <name>BT_CONN_INTERVAL_TO_MS</name>
        <param><defname>interval</defname></param>
        <initializer>((interval) * 5 / 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="303" column="9" bodyfile="include/bluetooth/conn.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga047061be4b45bcdd5c84114b01567592" prot="public" static="no">
        <name>BT_CONN_ROLE_MASTER</name>
        <initializer>__DEPRECATED_MACRO <ref refid="group__bt__conn_1ggae8a3b6a5d0d3244ed73924ab2421a0d0a865df4804411a07dad18b422a0a41d30" kindref="member">BT_CONN_ROLE_CENTRAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection role (central or peripheral) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="316" column="9" bodyfile="include/bluetooth/conn.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga65a7e3af728d3d60f484b4f166ac9882" prot="public" static="no">
        <name>BT_CONN_ROLE_SLAVE</name>
        <initializer>__DEPRECATED_MACRO <ref refid="group__bt__conn_1ggae8a3b6a5d0d3244ed73924ab2421a0d0a586a3966c9400109d9743dd29fa6a7b0" kindref="member">BT_CONN_ROLE_PERIPHERAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="317" column="9" bodyfile="include/bluetooth/conn.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga8ac93a19c34d2821c158f310879fe00d" prot="public" static="no">
        <name>BT_CONN_LE_CREATE_PARAM_INIT</name>
        <param><defname>_options</defname></param>
        <param><defname>_interval</defname></param>
        <param><defname>_window</defname></param>
        <initializer>{ \
	.options = (_options), \
	.interval = (_interval), \
	.window = (_window), \
	.interval_coded = 0, \
	.window_coded = 0, \
	.<ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref> = 0, \
}</initializer>
        <briefdescription>
<para>Initialize create connection parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection scan interval (N * 0.625 ms). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_window</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection scan window (N * 0.625 ms). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="563" column="9" bodyfile="include/bluetooth/conn.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1gae86425d432078e2ddca260eebc2802f1" prot="public" static="no">
        <name>BT_CONN_LE_CREATE_PARAM</name>
        <param><defname>_options</defname></param>
        <param><defname>_interval</defname></param>
        <param><defname>_window</defname></param>
        <initializer>	((struct <ref refid="structbt__conn__le__create__param" kindref="compound">bt_conn_le_create_param</ref>[]) { \
		<ref refid="group__bt__conn_1ga8ac93a19c34d2821c158f310879fe00d" kindref="member">BT_CONN_LE_CREATE_PARAM_INIT</ref>(_options, _interval, _window) \
	 })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare create connection parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection scan interval (N * 0.625 ms). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_window</parametername>
</parameternamelist>
<parameterdescription>
<para>Create connection scan window (N * 0.625 ms). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="579" column="9" bodyfile="include/bluetooth/conn.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1gab4203c55c20d83256ca036148c14a00d" prot="public" static="no">
        <name>BT_CONN_LE_CREATE_CONN</name>
        <initializer>	<ref refid="group__bt__conn_1gae86425d432078e2ddca260eebc2802f1" kindref="member">BT_CONN_LE_CREATE_PARAM</ref>(<ref refid="group__bt__conn_1ggaf715e26dfffd1f8de1c18449e2770cffa0735f5f66af63a389886402d65bc2ee9" kindref="member">BT_CONN_LE_OPT_NONE</ref>, \
				<ref refid="group__bt__gap__defines_1ga747caa714962215453a966a323e77cf8" kindref="member">BT_GAP_SCAN_FAST_INTERVAL</ref>, \
				<ref refid="group__bt__gap__defines_1ga747caa714962215453a966a323e77cf8" kindref="member">BT_GAP_SCAN_FAST_INTERVAL</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default LE create connection parameters. Scan continuously by setting scan interval equal to scan window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="587" column="9" bodyfile="include/bluetooth/conn.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1gaaba7c37a5c6e98e7b62ac12bde814d5d" prot="public" static="no">
        <name>BT_CONN_LE_CREATE_CONN_AUTO</name>
        <initializer>	<ref refid="group__bt__conn_1gae86425d432078e2ddca260eebc2802f1" kindref="member">BT_CONN_LE_CREATE_PARAM</ref>(<ref refid="group__bt__conn_1ggaf715e26dfffd1f8de1c18449e2770cffa0735f5f66af63a389886402d65bc2ee9" kindref="member">BT_CONN_LE_OPT_NONE</ref>, \
				<ref refid="group__bt__gap__defines_1ga747caa714962215453a966a323e77cf8" kindref="member">BT_GAP_SCAN_FAST_INTERVAL</ref>, \
				<ref refid="group__bt__gap__defines_1ga100e1c20813630848a1a80390e8a06a0" kindref="member">BT_GAP_SCAN_FAST_WINDOW</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default LE create connection using filter accept list parameters. Scan window: 30 ms. Scan interval: 60 ms. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="596" column="9" bodyfile="include/bluetooth/conn.h" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga9227880a1ae5fc373d334171e1450f00" prot="public" static="no">
        <name>BT_CONN_CB_DEFINE</name>
        <param><defname>_name</defname></param>
        <initializer>	static const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structbt__conn__cb" kindref="compound">bt_conn_cb</ref>,		\
						_CONCAT(bt_conn_cb_,	\
							_name))</initializer>
        <briefdescription>
<para>Register a callback structure for connection events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of callback structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="962" column="9" bodyfile="include/bluetooth/conn.h" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1gaf638077430b418f9879ac4ddf58ef17a" prot="public" static="no">
        <name>BT_PASSKEY_INVALID</name>
        <initializer>0xffffffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Special passkey value that can be used to disable a previously set fixed passkey. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1048" column="9" bodyfile="include/bluetooth/conn.h" bodystart="1048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga986f563bfb741c70fbee39b3948d9d8d" prot="public" static="no">
        <name>BT_BR_CONN_PARAM_INIT</name>
        <param><defname>role_switch</defname></param>
        <initializer>{ \
	.allow_role_switch = (role_switch), \
}</initializer>
        <briefdescription>
<para>Initialize BR/EDR connection parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>role_switch</parametername>
</parameternamelist>
<parameterdescription>
<para>True if role switch is allowed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1407" column="9" bodyfile="include/bluetooth/conn.h" bodystart="1407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga6f99f4adfcef36a4d738783921965ca6" prot="public" static="no">
        <name>BT_BR_CONN_PARAM</name>
        <param><defname>role_switch</defname></param>
        <initializer>	((struct <ref refid="structbt__br__conn__param" kindref="compound">bt_br_conn_param</ref>[]) { \
		<ref refid="group__bt__conn_1ga986f563bfb741c70fbee39b3948d9d8d" kindref="member">BT_BR_CONN_PARAM_INIT</ref>(role_switch) \
	 })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to declare BR/EDR connection parameters inline</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>role_switch</parametername>
</parameternamelist>
<parameterdescription>
<para>True if role switch is allowed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1416" column="9" bodyfile="include/bluetooth/conn.h" bodystart="1416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__conn_1ga5ccdbff63a430a37a8a8077d8792f706" prot="public" static="no">
        <name>BT_BR_CONN_PARAM_DEFAULT</name>
        <initializer><ref refid="group__bt__conn_1ga6f99f4adfcef36a4d738783921965ca6" kindref="member">BT_BR_CONN_PARAM</ref>(<ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default BR/EDR connection parameters: Role switch allowed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/conn.h" line="1424" column="9" bodyfile="include/bluetooth/conn.h" bodystart="1424" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Connection management. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
