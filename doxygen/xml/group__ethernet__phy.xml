<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ethernet__phy" kind="group">
    <compoundname>ethernet_phy</compoundname>
    <title>Ethernet PHY Interface</title>
    <innerclass refid="structphy__link__state" prot="public">phy_link_state</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__ethernet__phy_1ga9b97fff9fcd6823c9b564b3e86b8da68" prot="public" static="no" strong="no">
        <type></type>
        <name>phy_link_speed</name>
        <enumvalue id="group__ethernet__phy_1gga9b97fff9fcd6823c9b564b3e86b8da68a3010bbc6bde6ae12b39393ab34ed6c99" prot="public">
          <name>LINK_HALF_10BASE_T</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10Base-T Half-Duplex </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet__phy_1gga9b97fff9fcd6823c9b564b3e86b8da68a96d36b5ff474b1919288602cc1927842" prot="public">
          <name>LINK_FULL_10BASE_T</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10Base-T Full-Duplex </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet__phy_1gga9b97fff9fcd6823c9b564b3e86b8da68a165dfc46d79c06755d315c2d4033b629" prot="public">
          <name>LINK_HALF_100BASE_T</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>100Base-T Half-Duplex </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ethernet__phy_1gga9b97fff9fcd6823c9b564b3e86b8da68aa2b3167b8fb31ccbe3cd314aa82cf213" prot="public">
          <name>LINK_FULL_100BASE_T</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>100Base-T Full-Duplex </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Ethernet link speeds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="29" column="1" bodyfile="include/net/phy.h" bodystart="29" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ethernet__phy_1gaa376e8e7cd0291e9f18fe4d4242c1caf" prot="public" static="no">
        <type>void(*</type>
        <definition>phy_callback_t</definition>
        <argsstring>)(const struct device *dev, struct phy_link_state *state, void *user_data)</argsstring>
        <name>phy_callback_t</name>
        <briefdescription>
<para>Define the callback function signature for <computeroutput><ref refid="group__ethernet__phy_1gac9ebb32fa774954e94635cac5119d0e0" kindref="member">phy_link_callback_set()</ref></computeroutput> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PHY device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to link_state structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data specified by user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="60" column="9" bodyfile="include/net/phy.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ethernet__phy_1ga8fef84c365153a7adbf77263327689bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int phy_configure_link</definition>
        <argsstring>(const struct device *dev, enum phy_link_speed speeds)</argsstring>
        <name>phy_configure_link</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ethernet__phy_1ga9b97fff9fcd6823c9b564b3e86b8da68" kindref="member">phy_link_speed</ref></type>
          <declname>speeds</declname>
        </param>
        <briefdescription>
<para>Configure PHY link. </para>
        </briefdescription>
        <detaileddescription>
<para>This route configures the advertised link speeds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PHY device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speeds</parametername>
</parameternamelist>
<parameterdescription>
<para>OR&apos;d link speeds to be advertised by the PHY</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>If communication with PHY failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If not supported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="107" column="6" declfile="include/net/phy.h" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet__phy_1ga45a39fd5e669268194b86932a228aa98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int phy_get_link_state</definition>
        <argsstring>(const struct device *dev, struct phy_link_state *state)</argsstring>
        <name>phy_get_link_state</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structphy__link__state" kindref="compound">phy_link_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Get PHY link state. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the current state of the PHY link. This can be used by to determine when a link is up and the negotiated link speed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PHY device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive PHY state</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>If communication with PHY failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="132" column="6" declfile="include/net/phy.h" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet__phy_1gac9ebb32fa774954e94635cac5119d0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int phy_link_callback_set</definition>
        <argsstring>(const struct device *dev, phy_callback_t callback, void *user_data)</argsstring>
        <name>phy_link_callback_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__ethernet__phy_1gaa376e8e7cd0291e9f18fe4d4242c1caf" kindref="member">phy_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Set link state change callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets a callback that is invoked when link state changes. This is the preferred method for ethernet drivers to be notified of the PHY link state change.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PHY device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data specified by user.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If not supported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="158" column="6" declfile="include/net/phy.h" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet__phy_1ga4bf3a8332d9b517d3acc3eb29d8b1940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int phy_read</definition>
        <argsstring>(const struct device *dev, uint16_t reg_addr, uint32_t *value)</argsstring>
        <name>phy_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read PHY registers. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to read from a PHY register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PHY device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive read value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>If communication with PHY failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="184" column="6" declfile="include/net/phy.h" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ethernet__phy_1ga84406b85878658d25543edcf03127de0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int phy_write</definition>
        <argsstring>(const struct device *dev, uint16_t reg_addr, uint32_t value)</argsstring>
        <name>phy_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write PHY register. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to write to a PHY register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PHY device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>If communication with PHY failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="208" column="6" declfile="include/net/phy.h" declline="208" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ethernet__phy_1ga7dcf0d74db291bf0922c8ceb34307558" prot="public" static="no">
        <name>PHY_LINK_IS_FULL_DUPLEX</name>
        <param><defname>x</defname></param>
        <initializer>(x &amp; (<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1) | <ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="40" column="9" bodyfile="include/net/phy.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ethernet__phy_1ga35acfd5ebec25784cc1c5b6be7be6a05" prot="public" static="no">
        <name>PHY_LINK_IS_SPEED_100M</name>
        <param><defname>x</defname></param>
        <initializer>(x &amp; (<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2) | <ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/phy.h" line="41" column="9" bodyfile="include/net/phy.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ethernet PHY Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
