<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__can__interface" kind="group">
    <compoundname>can_interface</compoundname>
    <title>CAN Interface</title>
    <innerclass refid="structzcan__frame" prot="public">zcan_frame</innerclass>
    <innerclass refid="structzcan__filter" prot="public">zcan_filter</innerclass>
    <innerclass refid="structcan__bus__err__cnt" prot="public">can_bus_err_cnt</innerclass>
    <innerclass refid="structcan__timing" prot="public">can_timing</innerclass>
    <innerclass refid="structcan__frame" prot="public">can_frame</innerclass>
    <innerclass refid="structcan__filter" prot="public">can_filter</innerclass>
      <sectiondef kind="user-defined">
      <header>Linux SocketCAN compatibility</header>
      <description><para>The following structures and functions provide compatibility with the CAN frame and CAN filter formats used by Linux SocketCAN. </para>
</description>
      <memberdef kind="typedef" id="group__can__interface_1gaf1c86d266c4de5b8fb79e12ff38def1f" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>typedef uint32_t canid_t</definition>
        <argsstring></argsstring>
        <name>canid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Identifier structure for Linux SocketCAN compatibility.</para>
<para>The fields in this type are:</para>
<para><programlisting filename=".unparsed"><codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/>Bits<sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+======+==============================================================+</highlight></codeline>
<codeline><highlight class="normal">|<sp/>0-28<sp/>|<sp/>CAN<sp/>identifier<sp/>(11/29<sp/>bit)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>29<sp/><sp/>|<sp/>Error<sp/>message<sp/>frame<sp/>flag<sp/>(0<sp/>=<sp/>data<sp/>frame,<sp/>1<sp/>=<sp/>error<sp/>message)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>30<sp/><sp/>|<sp/>Remote<sp/>transmission<sp/>request<sp/>flag<sp/>(1<sp/>=<sp/>RTR<sp/>frame)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>31<sp/><sp/>|<sp/>Frame<sp/>format<sp/>flag<sp/>(0<sp/>=<sp/>standard<sp/>11<sp/>bit,<sp/>1<sp/>=<sp/>extended<sp/>29<sp/>bit)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">+------+--------------------------------------------------------------+</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="917" column="18" bodyfile="include/drivers/can.h" bodystart="917" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaf561048ea56449c778ede63b30fe5c6e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_frame_to_zframe</definition>
        <argsstring>(const struct can_frame *frame, struct zcan_frame *zframe)</argsstring>
        <name>can_copy_frame_to_zframe</name>
        <param>
          <type>const struct <ref refid="structcan__frame" kindref="compound">can_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> *</type>
          <declname>zframe</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structcan__frame" kindref="compound">can_frame</ref></emphasis> struct to a <emphasis><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__frame" kindref="compound">can_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zframe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="957" column="20" bodyfile="include/drivers/can.h" bodystart="957" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gad458a27a19ac09bf23444615b2c8c407" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_zframe_to_frame</definition>
        <argsstring>(const struct zcan_frame *zframe, struct can_frame *frame)</argsstring>
        <name>can_copy_zframe_to_frame</name>
        <param>
          <type>const struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> *</type>
          <declname>zframe</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__frame" kindref="compound">can_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structzcan__frame" kindref="compound">zcan_frame</ref></emphasis> struct to a <emphasis><ref refid="structcan__frame" kindref="compound">can_frame</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zframe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__frame" kindref="compound">can_frame</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="973" column="20" bodyfile="include/drivers/can.h" bodystart="973" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaf9a168f41ae3bef27e61e99ee8fcde27" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_filter_to_zfilter</definition>
        <argsstring>(const struct can_filter *filter, struct zcan_filter *zfilter)</argsstring>
        <name>can_copy_filter_to_zfilter</name>
        <param>
          <type>const struct <ref refid="structcan__filter" kindref="compound">can_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>zfilter</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structcan__filter" kindref="compound">can_filter</ref></emphasis> struct to a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__filter" kindref="compound">can_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="987" column="20" bodyfile="include/drivers/can.h" bodystart="987" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae89c9ae16f965d838595866f2ffea2e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_copy_zfilter_to_filter</definition>
        <argsstring>(const struct zcan_filter *zfilter, struct can_filter *filter)</argsstring>
        <name>can_copy_zfilter_to_filter</name>
        <param>
          <type>const struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>zfilter</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__filter" kindref="compound">can_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Translate a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> struct to a <emphasis><ref refid="structcan__filter" kindref="compound">can_filter</ref></emphasis> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zfilter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structcan__filter" kindref="compound">can_filter</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="1003" column="20" bodyfile="include/drivers/can.h" bodystart="1003" bodyend="1010"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CAN controller configuration</header>
      <memberdef kind="function" id="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_get_core_clock</definition>
        <argsstring>(const struct device *dev, uint32_t *rate)</argsstring>
        <name>can_get_core_clock</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Get the CAN core clock rate. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the CAN core clock rate. One time quantum is 1/(core clock rate).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rate</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN core clock rate in Hz.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or a negative error code on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="417" column="6" declfile="include/drivers/can.h" declline="417" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gac27fe64142603f0d32d422594356b2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_calc_timing</definition>
        <argsstring>(const struct device *dev, struct can_timing *res, uint32_t bitrate, uint16_t sample_pnt)</argsstring>
        <name>can_calc_timing</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sample_pnt</declname>
        </param>
        <briefdescription>
<para>Calculate timing parameters from bitrate and sample point. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the timing parameters from a given bitrate in bits/s and the sampling point in permill (1/1000) of the entire bit time. The bitrate must alway match perfectly. If no result can be reached for the given parameters, -EINVAL is returned.</para>
<para><simplesect kind="note"><para>The requested <computeroutput>sample_pnt</computeroutput> will not always be matched perfectly. The algorithm calculates the best possible match.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Result is written into the <emphasis><ref refid="structcan__timing" kindref="compound">can_timing</ref></emphasis> struct provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Target bitrate in bits/s. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampling point in permill of the entire bit time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or positive sample point error on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is no solution for the desired values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis><ref refid="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" kindref="member">can_get_core_clock()</ref></emphasis> is not available. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="446" column="5" declfile="include/drivers/can.h" declline="446" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga358cd73ed59c2099f4b2c6ceb397ca11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_calc_timing_data</definition>
        <argsstring>(const struct device *dev, struct can_timing *res, uint32_t bitrate, uint16_t sample_pnt)</argsstring>
        <name>can_calc_timing_data</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sample_pnt</declname>
        </param>
        <briefdescription>
<para>Calculate timing parameters for the data phase. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <emphasis><ref refid="group__can__interface_1gac27fe64142603f0d32d422594356b2d7" kindref="member">can_calc_timing()</ref></emphasis> but with the maximum and minimum values from the data phase.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_CAN_FD_MODE` </verbatim> must be selected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Result is written into the <emphasis><ref refid="structcan__timing" kindref="compound">can_timing</ref></emphasis> struct provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Target bitrate for the data phase in bits/s </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampling point for the data phase in permille of the entire bit time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or positive sample point error on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is no solution for the desired values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis><ref refid="group__can__interface_1ga4af6d0d9ab72b195909f511ac65cb8fa" kindref="member">can_get_core_clock()</ref></emphasis> is not available. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="468" column="5" declfile="include/drivers/can.h" declline="468" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga7ee7a3296995c09c7f35f54029ed26cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_calc_prescaler</definition>
        <argsstring>(const struct device *dev, struct can_timing *timing, uint32_t bitrate)</argsstring>
        <name>can_calc_prescaler</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>timing</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <briefdescription>
<para>Fill in the prescaler value for a given bitrate and timing. </para>
        </briefdescription>
        <detaileddescription>
<para>Fill the prescaler value in the timing struct. The sjw, prop_seg, phase_seg1 and phase_seg2 must be given.</para>
<para>The returned bitrate error is reminder of the devision of the clock rate by the bitrate times the timing segments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timing</parametername>
</parameternamelist>
<parameterdescription>
<para>Result is written into the <ref refid="structcan__timing" kindref="compound">can_timing</ref> struct provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Target bitrate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or positive bitrate error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Negative</parametername>
</parameternamelist>
<parameterdescription>
<para>error code on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="488" column="5" declfile="include/drivers/can.h" declline="488" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae8d117c765b9e0cd1d08e7d63e6ce47b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_set_timing</definition>
        <argsstring>(const struct device *dev, const struct can_timing *timing, const struct can_timing *timing_data)</argsstring>
        <name>can_set_timing</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>timing</declname>
        </param>
        <param>
          <type>const struct <ref refid="structcan__timing" kindref="compound">can_timing</ref> *</type>
          <declname>timing_data</declname>
        </param>
        <briefdescription>
<para>Configure the bus timing of a CAN controller. </para>
        </briefdescription>
        <detaileddescription>
<para>If the sjw equals CAN_SJW_NO_CHANGE, the sjw parameter is not changed.</para>
<para><simplesect kind="note"><para>The parameter <computeroutput>timing_data</computeroutput> is only relevant for CAN-FD. If the controller does not support CAN-FD or if <verbatim>embed:rst:inline :kconfig:`CONFIG_CAN_FD_MODE` </verbatim> is not selected, the value of this parameter is ignored.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timing</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus timings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timing_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus timings for data phase (CAN-FD only).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="512" column="6" declfile="include/drivers/can.h" declline="512" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga10ed56841a7d2c53ef20bdfa732f9043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_set_mode</definition>
        <argsstring>(const struct device *dev, enum can_mode mode)</argsstring>
        <name>can_set_mode</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" kindref="member">can_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the CAN controller to the given operation mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="534" column="6" declfile="include/drivers/can.h" declline="534" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae0c862e57610ad80727c767fab690d93" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int can_set_bitrate</definition>
        <argsstring>(const struct device *dev, uint32_t bitrate, uint32_t bitrate_data)</argsstring>
        <name>can_set_bitrate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>bitrate_data</declname>
        </param>
        <briefdescription>
<para>Set the bitrate of the CAN controller. </para>
        </briefdescription>
        <detaileddescription>
<para>The sample point is set to the CiA DS 301 recommended value of 87.5%.</para>
<para><simplesect kind="note"><para>The parameter <computeroutput>bitrate_data</computeroutput> is only relevant for CAN-FD. If the controller does not support CAN-FD or if <verbatim>embed:rst:inline :kconfig:`CONFIG_CAN_FD_MODE` </verbatim> is not selected, the value of this parameter is ignored.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired arbitration phase bitrate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrate_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired data phase bitrate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>bitrate cannot be met. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to set bitrate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="560" column="19" bodyfile="include/drivers/can.h" bodystart="560" bodyend="589"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga3f7eefd33eb0cb074e5d742c5097554a" prot="public" static="no">
        <name>CAN_SJW_NO_CHANGE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronization Jump Width (SJW) value to indicate that the SJW should not be changed by the timing calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="494" column="9" bodyfile="include/drivers/can.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Transmitting CAN frames</header>
      <memberdef kind="function" id="group__can__interface_1ga1bf5353bf15ffc252726e71ace9f5372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_send</definition>
        <argsstring>(const struct device *dev, const struct zcan_frame *frame, k_timeout_t timeout, can_tx_callback_t callback, void *user_data)</argsstring>
        <name>can_send</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" kindref="member">can_tx_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Transmit a CAN frame on the CAN bus. </para>
        </briefdescription>
        <detaileddescription>
<para>Transmit a CAN frame on the CAN bus with optional timeout and completion callback function.</para>
<para>By default, the CAN controller will automatically retry transmission in case of lost bus arbitration or missing acknowledge. Some CAN controllers support disabling automatic retransmissions (&quot;one-shot&quot; mode) via a devicetree property.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN frame to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout waiting for a empty TX mailbox or <computeroutput>K_FOREVER</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional callback for when the frame was sent or a transmission error occurred. If <computeroutput>NULL</computeroutput>, this function is blocking until frame is sent. The callback must be <computeroutput>NULL</computeroutput> if called from user mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if an invalid parameter was passed to the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENETDOWN</parametername>
</parameternamelist>
<parameterdescription>
<para>if the CAN controller is in bus-off state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if CAN bus arbitration was lost (only applicable if automatic retransmissions are disabled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>if a general transmit error occurred (e.g. missing ACK if automatic retransmissions are disabled). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>on timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="628" column="6" declfile="include/drivers/can.h" declline="628" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Receiving CAN frames</header>
      <memberdef kind="function" id="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int can_add_rx_filter</definition>
        <argsstring>(const struct device *dev, can_rx_callback_t callback, void *user_data, const struct zcan_filter *filter)</argsstring>
        <name>can_add_rx_filter</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" kindref="member">can_rx_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type>const struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Add a callback function for a given CAN filter. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a callback to CAN identifiers specified by a filter. When a recevied CAN frame matching the filter is received by the CAN controller, the callback function is called in interrupt context.</para>
<para>If a frame matches more than one attached filter, the priority of the match is hardware dependent.</para>
<para>The same callback function can be used for multiple filters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>This function is called by the CAN controller driver whenever a frame matching the filter is received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> structure defining the filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if there are no free filters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="670" column="19" bodyfile="include/drivers/can.h" bodystart="670" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_add_rx_filter_msgq</definition>
        <argsstring>(const struct device *dev, struct k_msgq *msgq, const struct zcan_filter *filter)</argsstring>
        <name>can_add_rx_filter_msgq</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>const struct <ref refid="structzcan__filter" kindref="compound">zcan_filter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Wrapper function for adding a message queue for a given filter. </para>
        </briefdescription>
        <detaileddescription>
<para>Wrapper function for <emphasis><ref refid="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" kindref="member">can_add_rx_filter()</ref></emphasis> which puts received CAN frames matching the filter in a message queue instead of calling a callback.</para>
<para>If a frame matches more than one attached filter, the priority of the match is hardware dependent.</para>
<para>The same message queue can be used for multiple filters.</para>
<para><simplesect kind="note"><para>The message queue must be initialized before calling this function and the caller must have appropriate permissions on it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the already initialized <emphasis><ref refid="structk__msgq" kindref="compound">k_msgq</ref></emphasis> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <emphasis><ref refid="structzcan__filter" kindref="compound">zcan_filter</ref></emphasis> structure defining the filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if there are no free filters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="712" column="6" declfile="include/drivers/can.h" declline="712" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga822aa3142ea01582d5cfb8b478fb2847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void can_remove_rx_filter</definition>
        <argsstring>(const struct device *dev, int filter_id)</argsstring>
        <name>can_remove_rx_filter</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>filter_id</declname>
        </param>
        <briefdescription>
<para>Remove a CAN RX filter. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes a CAN RX filter based on the filter ID returned by <emphasis><ref refid="group__can__interface_1gad3137bf27e64de3a550baf7e66641481" kindref="member">can_add_rx_filter()</ref></emphasis> or <emphasis><ref refid="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" kindref="member">can_add_rx_filter_msgq()</ref></emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="724" column="7" declfile="include/drivers/can.h" declline="724" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaace06471f995959bb2e91f04bb9c4d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_get_max_filters</definition>
        <argsstring>(const struct device *dev, enum can_ide id_type)</argsstring>
        <name>can_get_max_filters</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" kindref="member">can_ide</ref></type>
          <declname>id_type</declname>
        </param>
        <briefdescription>
<para>Get maximum number of RX filters. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum number of concurrent RX filters for the CAN controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id_type</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN identifier type (standard or extended).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Positive</parametername>
</parameternamelist>
<parameterdescription>
<para>number of maximum concurrent filters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If this function is not implemented by the driver. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="745" column="6" declfile="include/drivers/can.h" declline="745" declcolumn="6"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga7af0acdfbdad07fc3eba4cbd29bc090b" prot="public" static="no">
        <name>CAN_MSGQ_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>max_frames</defname></param>
        <initializer>	<ref refid="obj__tracking_2src_2main_8c_1a2a8684e092939fd15da55ef2cc19376e" kindref="member">K_MSGQ_DEFINE</ref>(name, sizeof(struct <ref refid="structzcan__frame" kindref="compound">zcan_frame</ref>), max_frames, 4)</initializer>
        <briefdescription>
<para>Statically define and initialize a CAN RX message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The message queue&apos;s ring buffer contains space for <emphasis>max_frames</emphasis> CAN frames.</para>
<para><simplesect kind="see"><para><ref refid="group__can__interface_1ga2feb41b89c8c172f02fd48fb3f6276de" kindref="member">can_add_rx_filter_msgq()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_frames</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of CAN frames that can be queued. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="688" column="9" bodyfile="include/drivers/can.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CAN bus error reporting and handling</header>
      <memberdef kind="function" id="group__can__interface_1gab98c121578c8349d9dfb41d60f356857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_get_state</definition>
        <argsstring>(const struct device *dev, enum can_state *state, struct can_bus_err_cnt *err_cnt)</argsstring>
        <name>can_get_state</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" kindref="member">can_state</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct <ref refid="structcan__bus__err__cnt" kindref="compound">can_bus_err_cnt</ref> *</type>
          <declname>err_cnt</declname>
        </param>
        <briefdescription>
<para>Get current CAN controller state. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the current state and optionally the error counter values of the CAN controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the state destination enum or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">err_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the err_cnt destination structure or NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input/output error, failed to get state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="779" column="6" declfile="include/drivers/can.h" declline="779" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gac474e56a50685736a1c25dca277aab5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int can_recover</definition>
        <argsstring>(const struct device *dev, k_timeout_t timeout)</argsstring>
        <name>can_recover</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Recover from bus-off state. </para>
        </briefdescription>
        <detaileddescription>
<para>Recover the CAN controller from bus-off state to error-active state.</para>
<para><simplesect kind="note"><para><verbatim>embed:rst:inline :kconfig:`CONFIG_CAN_AUTO_BUS_OFF_RECOVERY` </verbatim> must be deselected for this function to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for waiting for the recovery or <computeroutput>K_FOREVER</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>on timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="805" column="6" declfile="include/drivers/can.h" declline="805" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gad322da0dad328abb50de23bef6882d8e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_state_change_callback</definition>
        <argsstring>(const struct device *dev, can_state_change_callback_t callback, void *user_data)</argsstring>
        <name>can_set_state_change_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" kindref="member">can_state_change_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Set a callback for CAN controller state change events. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the callback for CAN controller state change events. The callback function will be called in interrupt context.</para>
<para>Only one callback can be registered per controller. Calling this function again overrides any previously registered callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="834" column="20" bodyfile="include/drivers/can.h" bodystart="834" bodyend="841"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CAN utility functions</header>
      <memberdef kind="function" id="group__can__interface_1gaa1d866167c0c23f8d5c0c15385589601" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t can_dlc_to_bytes</definition>
        <argsstring>(uint8_t dlc)</argsstring>
        <name>can_dlc_to_bytes</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dlc</declname>
        </param>
        <briefdescription>
<para>Convert from Data Length Code (DLC) to the number of data bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Data Length Code (DLC).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="858" column="23" bodyfile="include/drivers/can.h" bodystart="858" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga8314716fe2b66d567b3fd377b8ee9dc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t can_bytes_to_dlc</definition>
        <argsstring>(uint8_t num_bytes)</argsstring>
        <name>can_bytes_to_dlc</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Convert from number of bytes to Data Length Code (DLC) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>Length Code (DLC). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="873" column="23" bodyfile="include/drivers/can.h" bodystart="873" bodyend="883"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CAN frame definitions</header>
      <memberdef kind="define" id="group__can__interface_1ga4cd8ce34887b90baeeaa6a4aa048b398" prot="public" static="no">
        <name>CAN_STD_ID_MASK</name>
        <initializer>0x7FFU</initializer>
        <briefdescription>
<para>Bit mask for a standard (11-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="35" column="9" bodyfile="include/drivers/can.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga7987c1d4089742f87a7ac611add1a286" prot="public" static="no">
        <name>CAN_MAX_STD_ID</name>
        <initializer><ref refid="group__can__interface_1ga4cd8ce34887b90baeeaa6a4aa048b398" kindref="member">CAN_STD_ID_MASK</ref></initializer>
        <briefdescription>
<para>Maximum value for a standard (11-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="39" column="9" bodyfile="include/drivers/can.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga15ee71e8abcf51008925585049125986" prot="public" static="no">
        <name>CAN_EXT_ID_MASK</name>
        <initializer>0x1FFFFFFFU</initializer>
        <briefdescription>
<para>Bit mask for an extended (29-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="43" column="9" bodyfile="include/drivers/can.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga0f3572940065f8f6d54099e7a4175f8f" prot="public" static="no">
        <name>CAN_MAX_EXT_ID</name>
        <initializer><ref refid="group__can__interface_1ga15ee71e8abcf51008925585049125986" kindref="member">CAN_EXT_ID_MASK</ref></initializer>
        <briefdescription>
<para>Maximum value for an extended (29-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="47" column="9" bodyfile="include/drivers/can.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gadc209a027ee700faf10461e2417bee50" prot="public" static="no">
        <name>CAN_MAX_DLC</name>
        <initializer>8U</initializer>
        <briefdescription>
<para>Maximum data length code for CAN 2.0A/2.0B. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="51" column="9" bodyfile="include/drivers/can.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gad4b7310536c7e3252c2056abe64c0333" prot="public" static="no">
        <name>CANFD_MAX_DLC</name>
        <initializer>CONFIG_CANFD_MAX_DLC</initializer>
        <briefdescription>
<para>Maximum data length code for CAN-FD. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="55" column="9" bodyfile="include/drivers/can.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__can__interface_1ga4e8ab343dc079bfda049496e42e29399" prot="public" static="no" strong="no">
        <type></type>
        <name>can_mode</name>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a9944f5fd8ed24faf280e44e4e3f5219e" prot="public">
          <name>CAN_NORMAL_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Normal mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a2e0dc39460eadc2ea32ecb074fbcf2cd" prot="public">
          <name>CAN_SILENT_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Controller is not allowed to send dominant bits. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399a3458b98e050a41c783fa4341a805ff44" prot="public">
          <name>CAN_LOOPBACK_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Controller is in loopback mode (receives own frames). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga4e8ab343dc079bfda049496e42e29399af686c5f96a736d2499678623bbe5001e" prot="public">
          <name>CAN_SILENT_LOOPBACK_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Combination of loopback and silent modes. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines the mode of the CAN controller. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="84" column="1" bodyfile="include/drivers/can.h" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="enum" id="group__can__interface_1gac7ec472c26c564dd7067c49f67c8d2f7" prot="public" static="no" strong="no">
        <type></type>
        <name>can_state</name>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a82f59a5c7e9b15a5a36a5690ebca78ab" prot="public">
          <name>CAN_ERROR_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error-active state (RX/TX error count &lt; 96). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a52c0f7a5f6f7239264af075db4ee0dca" prot="public">
          <name>CAN_ERROR_WARNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error-warning state (RX/TX error count &lt; 128). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7a69f2f1a5bb6e1abe4898069586701ef8" prot="public">
          <name>CAN_ERROR_PASSIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error-passive state (RX/TX error count &lt; 256). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggac7ec472c26c564dd7067c49f67c8d2f7ac8cadafe6fe9deff8a983e28190042b1" prot="public">
          <name>CAN_BUS_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bus-off state (RX/TX error count &gt;= 256). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines the state of the CAN bus. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="98" column="1" bodyfile="include/drivers/can.h" bodystart="98" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__can__interface_1ga9a30b6abfaf14193f0c41b1c46d6f50a" prot="public" static="no" strong="no">
        <type></type>
        <name>can_ide</name>
        <enumvalue id="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa8c54cc658223f3fe1101eab57307cb7d" prot="public">
          <name>CAN_STANDARD_IDENTIFIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Standard (11-bit) CAN identifier. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga9a30b6abfaf14193f0c41b1c46d6f50aa3088f4e06b83c20398199e48b93bb939" prot="public">
          <name>CAN_EXTENDED_IDENTIFIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Extended (29-bit) CAN identifier. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines if the CAN frame has a standard (11-bit) or extended (29-bit) CAN identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="113" column="1" bodyfile="include/drivers/can.h" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__can__interface_1ga888b0994e8c3cdfb80f9a638dd148303" prot="public" static="no" strong="no">
        <type></type>
        <name>can_rtr</name>
        <enumvalue id="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303a9d88cf6e242528a2caf7d2a28c1040e5" prot="public">
          <name>CAN_DATAFRAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data frame. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga888b0994e8c3cdfb80f9a638dd148303afcfc7be1a45d2af3826db5041028f69e" prot="public">
          <name>CAN_REMOTEREQUEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Remote Transmission Request (RTR) frame. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines if the CAN frame is a data frame or a Remote Transmission Request (RTR) frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="123" column="1" bodyfile="include/drivers/can.h" bodystart="123" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__can__interface_1ga3973b4d5f1c8078eba566c8f0e2c01f1" prot="public" static="no">
        <type>void(*</type>
        <definition>can_tx_callback_t</definition>
        <argsstring>)(int error, void *user_data)</argsstring>
        <name>can_tx_callback_t</name>
        <briefdescription>
<para>Defines the application callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of the performed send operation. See the list of return values for <emphasis><ref refid="group__can__interface_1ga1bf5353bf15ffc252726e71ace9f5372" kindref="member">can_send()</ref></emphasis> for value descriptions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data provided when the frame was sent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="264" column="9" bodyfile="include/drivers/can.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1gaaa6db2ee486884116a801a797af844ba" prot="public" static="no">
        <type>void(*</type>
        <definition>can_rx_callback_t</definition>
        <argsstring>)(struct zcan_frame *frame, void *user_data)</argsstring>
        <name>can_rx_callback_t</name>
        <briefdescription>
<para>Defines the application callback handler function signature for receiving. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Received frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data provided when the filter was added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="273" column="9" bodyfile="include/drivers/can.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1gab0cdbcc4aed49681cd4cf62b28302190" prot="public" static="no">
        <type>void(*</type>
        <definition>can_state_change_callback_t</definition>
        <argsstring>)(enum can_state state, struct can_bus_err_cnt err_cnt, void *user_data)</argsstring>
        <name>can_state_change_callback_t</name>
        <briefdescription>
<para>Defines the state change callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>State of the CAN controller. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN controller error counter values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data provided the callback was set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/can.h" line="283" column="9" bodyfile="include/drivers/can.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CAN Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
