<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__stack__apis" kind="group">
    <compoundname>stack_apis</compoundname>
    <title>Stack APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__stack__apis_1ga4400a39ef48289305cf66a092d5c6c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_stack_init</definition>
        <argsstring>(struct k_stack *stack, stack_data_t *buffer, uint32_t num_entries)</argsstring>
        <name>k_stack_init</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>stack_data_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_entries</declname>
        </param>
        <briefdescription>
<para>Initialize a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a stack object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of array used to hold stacked values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of values that can be stacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2514" column="6" declfile="include/kernel.h" declline="2514" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>int32_t k_stack_alloc_init</definition>
        <argsstring>(struct k_stack *stack, uint32_t num_entries)</argsstring>
        <name>k_stack_alloc_init</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_entries</declname>
        </param>
        <briefdescription>
<para>Initialize a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a stack object, prior to its first use. Internal buffers will be allocated from the calling thread&apos;s resource pool. This memory will be released if <ref refid="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" kindref="member">k_stack_cleanup()</ref> is called, or userspace is enabled and the stack object loses all references to it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of values that can be stacked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-ENOMEM if memory couldn&apos;t be allocated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2532" column="10" declfile="include/kernel.h" declline="2532" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1ga819f4e7b2cf11cf2e1b80933fdcb67ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_stack_cleanup</definition>
        <argsstring>(struct k_stack *stack)</argsstring>
        <name>k_stack_cleanup</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Release a stack&apos;s allocated buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>If a stack object was given a dynamically allocated buffer via <ref refid="group__stack__apis_1gab97d924db1aef3f6adade156a107d45c" kindref="member">k_stack_alloc_init()</ref>, this will free it. This function does nothing if the buffer wasn&apos;t dynamically allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>when object is still in use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2546" column="5" declfile="include/kernel.h" declline="2546" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1gaa6180f4db6ec93ee84149cba054d3e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_stack_push</definition>
        <argsstring>(struct k_stack *stack, stack_data_t data)</argsstring>
        <name>k_stack_push</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>stack_data_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Push an element onto a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine adds a stack_data_t value <emphasis>data</emphasis> to <emphasis>stack</emphasis>.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to push onto the stack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if stack is full </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2561" column="6" declfile="include/kernel.h" declline="2561" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__stack__apis_1ga36ce6ceb9ea3d5c36d22b10430789480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_stack_pop</definition>
        <argsstring>(struct k_stack *stack, stack_data_t *data, k_timeout_t timeout)</argsstring>
        <name>k_stack_pop</name>
        <param>
          <type>struct k_stack *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>stack_data_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Pop an element from a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine removes a stack_data_t value from <emphasis>stack</emphasis> in a &quot;last in,
first out&quot; manner and stores the value in <emphasis>data</emphasis>.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the value popped from the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to obtain a value, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Element popped from stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2583" column="6" declfile="include/kernel.h" declline="2583" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__stack__apis_1ga8c9ca77e5de3c9757dcd4ecb55797835" prot="public" static="no">
        <name>K_STACK_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>stack_num_entries</defname></param>
        <initializer>	stack_data_t __noinit                                  \
		_k_stack_buf_##name[stack_num_entries];        \
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(k_stack, name) =               \
		Z_STACK_INITIALIZER(name, _k_stack_buf_##name, \
				    stack_num_entries)</initializer>
        <briefdescription>
<para>Statically define and initialize a stack. </para>
        </briefdescription>
        <detaileddescription>
<para>The stack can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_stack<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_num_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of values that can be stacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2596" column="9" bodyfile="include/kernel.h" bodystart="2596" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
