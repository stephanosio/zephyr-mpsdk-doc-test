<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="ipm_8h" kind="file" language="C++">
    <compoundname>ipm.h</compoundname>
    <includes local="no">kernel.h</includes>
    <includes local="no">device.h</includes>
    <includes local="no">syscalls/ipm.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/ipm.h</label>
        <link refid="ipm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>device.h</label>
      </node>
      <node id="2">
        <label>kernel.h</label>
      </node>
      <node id="4">
        <label>syscalls/ipm.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structipm__driver__api" prot="public">ipm_driver_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ipm__interface_1gaa9dbdfd91b0fe01297792949c19e8f70" prot="public" static="no">
        <type>void(*</type>
        <definition>ipm_callback_t</definition>
        <argsstring>)(const struct device *ipmdev, void *user_data, uint32_t id, volatile void *data)</argsstring>
        <name>ipm_callback_t</name>
        <briefdescription>
<para>Callback API for incoming IPM messages. </para>
        </briefdescription>
        <detaileddescription>
<para>These callbacks execute in interrupt context. Therefore, use only interrupt-safe APIS. Registration of callbacks is done via <emphasis>ipm_register_callback</emphasis> </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipmdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to some private data provided at registration time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message type identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Message data pointer. The correct amount of data to read out must be inferred using the message id/upper level protocol. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="45" column="9" bodyfile="include/drivers/ipm.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ipm__interface_1ga80e6af3109598a6cb9df0b36d1cdbca7" prot="public" static="no">
        <type>int(*</type>
        <definition>ipm_send_t</definition>
        <argsstring>)(const struct device *ipmdev, int wait, uint32_t id, const void *data, int size)</argsstring>
        <name>ipm_send_t</name>
        <briefdescription>
<para>Callback API to send IPM messages. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__ipm__interface_1ga8f3fe21c1a4ffd3c38b67f81749af043" kindref="member">ipm_send()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="54" column="9" bodyfile="include/drivers/ipm.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ipm__interface_1ga67611ee678c0c265ba07589f1b8aea68" prot="public" static="no">
        <type>int(*</type>
        <definition>ipm_max_data_size_get_t</definition>
        <argsstring>)(const struct device *ipmdev)</argsstring>
        <name>ipm_max_data_size_get_t</name>
        <briefdescription>
<para>Callback API to get maximum data size. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__ipm__interface_1ga0a11eecaa7254575ab6baf0783a18b5e" kindref="member">ipm_max_data_size_get()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="62" column="9" bodyfile="include/drivers/ipm.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ipm__interface_1gaa11bc35736af40ea49b7be621b09f70d" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>(*</type>
        <definition>ipm_max_id_val_get_t</definition>
        <argsstring>)(const struct device *ipmdev)</argsstring>
        <name>ipm_max_id_val_get_t</name>
        <briefdescription>
<para>Callback API to get the ID&apos;s maximum value. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__ipm__interface_1ga168fd277b7819b639baa4e630c596a7f" kindref="member">ipm_max_id_val_get()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="70" column="9" bodyfile="include/drivers/ipm.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ipm__interface_1ga186a1c5232ad1d06908cfee1bcb9dcab" prot="public" static="no">
        <type>void(*</type>
        <definition>ipm_register_callback_t</definition>
        <argsstring>)(const struct device *port, ipm_callback_t cb, void *user_data)</argsstring>
        <name>ipm_register_callback_t</name>
        <briefdescription>
<para>Callback API upon registration. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__ipm__interface_1ga557b15bc8a353483ca55888dba27493b" kindref="member">ipm_register_callback()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="78" column="9" bodyfile="include/drivers/ipm.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ipm__interface_1ga1db507f3e01af8258669f18b058913ad" prot="public" static="no">
        <type>int(*</type>
        <definition>ipm_set_enabled_t</definition>
        <argsstring>)(const struct device *ipmdev, int enable)</argsstring>
        <name>ipm_set_enabled_t</name>
        <briefdescription>
<para>Callback API upon enablement of interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__ipm__interface_1ga5884fa95cb38ddfe4493eb70dafebe8b" kindref="member">ipm_set_enabled()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="88" column="9" bodyfile="include/drivers/ipm.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ipm__interface_1ga868351e00ca191f65fccfbe2514903b5" prot="public" static="no">
        <type>void(*</type>
        <definition>ipm_complete_t</definition>
        <argsstring>)(const struct device *ipmdev)</argsstring>
        <name>ipm_complete_t</name>
        <briefdescription>
<para>Callback API upon command completion. </para>
        </briefdescription>
        <detaileddescription>
<para>See <emphasis><ref refid="group__ipm__interface_1ga53f785ecfac17b9fb2e5f3a9505c7fd2" kindref="member">ipm_complete()</ref></emphasis> for argument definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="96" column="9" bodyfile="include/drivers/ipm.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ipm__interface_1ga8f3fe21c1a4ffd3c38b67f81749af043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipm_send</definition>
        <argsstring>(const struct device *ipmdev, int wait, uint32_t id, const void *data, int size)</argsstring>
        <name>ipm_send</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>ipmdev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wait</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Try to send a message over the IPM device. </para>
        </briefdescription>
        <detaileddescription>
<para>A message is considered consumed once the remote interrupt handler finishes. If there is deferred processing on the remote side, or if outgoing messages must be queued and wait on an event/semaphore, a high-level driver can implement that.</para>
<para>There are constraints on how much data can be sent or the maximum value of id. Use the <emphasis>ipm_max_data_size_get</emphasis> and <emphasis>ipm_max_id_val_get</emphasis> routines to determine them.</para>
<para>The <emphasis>size</emphasis> parameter is used only on the sending side to determine the amount of data to put in the message registers. It is not passed along to the receiving side. The upper-level protocol dictates the amount of data read back.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipmdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, busy-wait for remote to consume the message. The message is considered consumed once the remote interrupt handler finishes. If there is deferred processing on the remote side, or you would like to queue outgoing messages and wait on an event/semaphore, you can implement that in a high-level driver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message identifier. Values are constrained by <emphasis>ipm_max_data_size_get</emphasis> since many boards only allow for a subset of bits in a 32-bit register to store the ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data sent in the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If the remote hasn&apos;t yet read the last data sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EMSGSIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the supplied data size is unsupported by the driver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If there was a bad parameter, such as: too-large id value. or the device isn&apos;t an outbound IPM channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="144" column="6" declfile="include/drivers/ipm.h" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ipm__interface_1ga557b15bc8a353483ca55888dba27493b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ipm_register_callback</definition>
        <argsstring>(const struct device *ipmdev, ipm_callback_t cb, void *user_data)</argsstring>
        <name>ipm_register_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>ipmdev</declname>
        </param>
        <param>
          <type><ref refid="group__ipm__interface_1gaa9dbdfd91b0fe01297792949c19e8f70" kindref="member">ipm_callback_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Register a callback function for incoming messages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipmdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to execute on incoming message interrupts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application-specific data pointer which will be passed to the callback function when executed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="165" column="20" bodyfile="include/drivers/ipm.h" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="group__ipm__interface_1ga0a11eecaa7254575ab6baf0783a18b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipm_max_data_size_get</definition>
        <argsstring>(const struct device *ipmdev)</argsstring>
        <name>ipm_max_data_size_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>ipmdev</declname>
        </param>
        <briefdescription>
<para>Return the maximum number of bytes possible in an outbound message. </para>
        </briefdescription>
        <detaileddescription>
<para>IPM implementations vary on the amount of data that can be sent in a single message since the data payload is typically stored in registers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipmdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum possible size of a message in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="184" column="6" declfile="include/drivers/ipm.h" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ipm__interface_1ga168fd277b7819b639baa4e630c596a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ipm_max_id_val_get</definition>
        <argsstring>(const struct device *ipmdev)</argsstring>
        <name>ipm_max_id_val_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>ipmdev</declname>
        </param>
        <briefdescription>
<para>Return the maximum id value possible in an outbound message. </para>
        </briefdescription>
        <detaileddescription>
<para>Many IPM implementations store the message&apos;s ID in a register with some bits reserved for other uses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipmdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum possible value of a message ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="205" column="11" declfile="include/drivers/ipm.h" declline="205" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__ipm__interface_1ga5884fa95cb38ddfe4493eb70dafebe8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipm_set_enabled</definition>
        <argsstring>(const struct device *ipmdev, int enable)</argsstring>
        <name>ipm_set_enabled</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>ipmdev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable interrupts and callbacks for inbound channels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipmdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to 0 to disable and to nonzero to enable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If it isn&apos;t an inbound channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="224" column="6" declfile="include/drivers/ipm.h" declline="224" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ipm__interface_1ga53f785ecfac17b9fb2e5f3a9505c7fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ipm_complete</definition>
        <argsstring>(const struct device *ipmdev)</argsstring>
        <name>ipm_complete</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>ipmdev</declname>
        </param>
        <briefdescription>
<para>Signal asynchronous command completion. </para>
        </briefdescription>
        <detaileddescription>
<para>Some IPM backends have an ability to deliver a command asynchronously. The callback will be invoked in interrupt context, but the message (including the provided data pointer) will stay &quot;active&quot; and unacknowledged until later code (presumably in thread mode) calls <ref refid="group__ipm__interface_1ga53f785ecfac17b9fb2e5f3a9505c7fd2" kindref="member">ipm_complete()</ref>.</para>
<para>This function is, obviously, a noop on drivers without async support.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipmdev</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver instance pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/ipm.h" line="249" column="7" declfile="include/drivers/ipm.h" declline="249" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic low-level inter-processor mailbox communication API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_IPM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_IPM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="group__ipm__interface_1gaa9dbdfd91b0fe01297792949c19e8f70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__ipm__interface_1gaa9dbdfd91b0fe01297792949c19e8f70" kindref="member">ipm_callback_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>id,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group__ipm__interface_1ga80e6af3109598a6cb9df0b36d1cdbca7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__ipm__interface_1ga80e6af3109598a6cb9df0b36d1cdbca7" kindref="member">ipm_send_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>id,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="62" refid="group__ipm__interface_1ga67611ee678c0c265ba07589f1b8aea68" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__ipm__interface_1ga67611ee678c0c265ba07589f1b8aea68" kindref="member">ipm_max_data_size_get_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__ipm__interface_1gaa11bc35736af40ea49b7be621b09f70d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>(*<ref refid="group__ipm__interface_1gaa11bc35736af40ea49b7be621b09f70d" kindref="member">ipm_max_id_val_get_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__ipm__interface_1ga186a1c5232ad1d06908cfee1bcb9dcab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__ipm__interface_1ga186a1c5232ad1d06908cfee1bcb9dcab" kindref="member">ipm_register_callback_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1gaa9dbdfd91b0fe01297792949c19e8f70" kindref="member">ipm_callback_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="group__ipm__interface_1ga1db507f3e01af8258669f18b058913ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__ipm__interface_1ga1db507f3e01af8258669f18b058913ad" kindref="member">ipm_set_enabled_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="group__ipm__interface_1ga868351e00ca191f65fccfbe2514903b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__ipm__interface_1ga868351e00ca191f65fccfbe2514903b5" kindref="member">ipm_complete_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structipm__driver__api" refkind="compound"><highlight class="normal">__subsystem<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>{</highlight></codeline>
<codeline lineno="99" refid="structipm__driver__api_1ac6f87ae1296bf83759c60e57b8740fd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1ga80e6af3109598a6cb9df0b36d1cdbca7" kindref="member">ipm_send_t</ref><sp/><ref refid="structipm__driver__api_1ac6f87ae1296bf83759c60e57b8740fd1" kindref="member">send</ref>;</highlight></codeline>
<codeline lineno="100" refid="structipm__driver__api_1a073f9928135a6e9ed022edf877c2181d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1ga186a1c5232ad1d06908cfee1bcb9dcab" kindref="member">ipm_register_callback_t</ref><sp/><ref refid="structipm__driver__api_1a073f9928135a6e9ed022edf877c2181d" kindref="member">register_callback</ref>;</highlight></codeline>
<codeline lineno="101" refid="structipm__driver__api_1a33d936ed9e0606a653a88563268c9543" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1ga67611ee678c0c265ba07589f1b8aea68" kindref="member">ipm_max_data_size_get_t</ref><sp/><ref refid="structipm__driver__api_1a33d936ed9e0606a653a88563268c9543" kindref="member">max_data_size_get</ref>;</highlight></codeline>
<codeline lineno="102" refid="structipm__driver__api_1a69f7264ac909a0c9aec3676766e807af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1gaa11bc35736af40ea49b7be621b09f70d" kindref="member">ipm_max_id_val_get_t</ref><sp/><ref refid="structipm__driver__api_1a69f7264ac909a0c9aec3676766e807af" kindref="member">max_id_val_get</ref>;</highlight></codeline>
<codeline lineno="103" refid="structipm__driver__api_1ac17dd018dcf02538c6f2d97005d5494b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1ga1db507f3e01af8258669f18b058913ad" kindref="member">ipm_set_enabled_t</ref><sp/><ref refid="structipm__driver__api_1ac17dd018dcf02538c6f2d97005d5494b" kindref="member">set_enabled</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_IPM_CALLBACK_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1ga868351e00ca191f65fccfbe2514903b5" kindref="member">ipm_complete_t</ref><sp/>complete;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="group__ipm__interface_1ga8f3fe21c1a4ffd3c38b67f81749af043" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ipm__interface_1ga8f3fe21c1a4ffd3c38b67f81749af043" kindref="member">ipm_send</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_ipm_send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wait,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*)ipmdev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structipm__driver__api_1ac6f87ae1296bf83759c60e57b8740fd1" kindref="member">send</ref>(ipmdev,<sp/>wait,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="group__ipm__interface_1ga557b15bc8a353483ca55888dba27493b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ipm__interface_1ga557b15bc8a353483ca55888dba27493b" kindref="member">ipm_register_callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ipm__interface_1gaa9dbdfd91b0fe01297792949c19e8f70" kindref="member">ipm_callback_t</ref><sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*)ipmdev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api-&gt;<ref refid="structipm__driver__api_1a073f9928135a6e9ed022edf877c2181d" kindref="member">register_callback</ref>(ipmdev,<sp/>cb,<sp/><ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="group__ipm__interface_1ga0a11eecaa7254575ab6baf0783a18b5e" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ipm__interface_1ga0a11eecaa7254575ab6baf0783a18b5e" kindref="member">ipm_max_data_size_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_ipm_max_data_size_get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*)ipmdev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structipm__driver__api_1a33d936ed9e0606a653a88563268c9543" kindref="member">max_data_size_get</ref>(ipmdev);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="group__ipm__interface_1ga168fd277b7819b639baa4e630c596a7f" refkind="member"><highlight class="normal">__syscall<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__ipm__interface_1ga168fd277b7819b639baa4e630c596a7f" kindref="member">ipm_max_id_val_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>z_impl_ipm_max_id_val_get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*)ipmdev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structipm__driver__api_1a69f7264ac909a0c9aec3676766e807af" kindref="member">max_id_val_get</ref>(ipmdev);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group__ipm__interface_1ga5884fa95cb38ddfe4493eb70dafebe8b" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ipm__interface_1ga5884fa95cb38ddfe4493eb70dafebe8b" kindref="member">ipm_set_enabled</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_impl_ipm_set_enabled(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*)ipmdev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>api-&gt;<ref refid="structipm__driver__api_1ac17dd018dcf02538c6f2d97005d5494b" kindref="member">set_enabled</ref>(ipmdev,<sp/>enable);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="group__ipm__interface_1ga53f785ecfac17b9fb2e5f3a9505c7fd2" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ipm__interface_1ga53f785ecfac17b9fb2e5f3a9505c7fd2" kindref="member">ipm_complete</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_impl_ipm_complete(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*ipmdev)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_IPM_CALLBACK_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*api<sp/>=</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structipm__driver__api" kindref="compound">ipm_driver_api</ref><sp/>*)ipmdev-&gt;<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(api-&gt;complete<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api-&gt;complete(ipmdev);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/ipm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_IPM_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/ipm.h"/>
  </compounddef>
</doxygen>
