<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__clock__control__interface" kind="group">
    <compoundname>clock_control_interface</compoundname>
    <title>Clock Control Interface</title>
    <innerclass refid="structclock__control__driver__api" prot="public">clock_control_driver_api</innerclass>
    <innergroup refid="group__clock__control__litex__interface">LiteX Clock Control driver interface</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" prot="public" static="no" strong="no">
        <type></type>
        <name>clock_control_status</name>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09aa1d03cc305aa2f510471e6f1ae1fbd52" prot="public">
          <name>CLOCK_CONTROL_STATUS_STARTING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a44a027c5e5bf19836aebc427098f0cfa" prot="public">
          <name>CLOCK_CONTROL_STATUS_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a232119a145ecc5d6a1ff0454a97c92db" prot="public">
          <name>CLOCK_CONTROL_STATUS_ON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a825b0d9a572d483343b109d0c3d288c0" prot="public">
          <name>CLOCK_CONTROL_STATUS_UNAVAILABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__clock__control__interface_1ggad12829335f0c954ab6d586549db45e09a4c939e7c8c38b5f2c50fe339a60c75cc" prot="public">
          <name>CLOCK_CONTROL_STATUS_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Current clock status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="42" column="1" bodyfile="include/drivers/clock_control.h" bodystart="42" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* clock_control_subsys_t</definition>
        <argsstring></argsstring>
        <name>clock_control_subsys_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clock_control_subsys_t is a type to identify a clock controller sub-system. Such data pointed is opaque and relevant only to the clock controller driver instance being used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="55" column="14" bodyfile="include/drivers/clock_control.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* clock_control_subsys_rate_t</definition>
        <argsstring></argsstring>
        <name>clock_control_subsys_rate_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clock_control_subsys_rate_t is a type to identify a clock controller sub-system rate. Such data pointed is opaque and relevant only to set the clock controller rate of the driver instance being used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="63" column="14" bodyfile="include/drivers/clock_control.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* clock_control_cb_t) (const struct device *dev, clock_control_subsys_t subsys, void *user_data)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t subsys, void *user_data)</argsstring>
        <name>clock_control_cb_t</name>
        <briefdescription>
<para>Callback called on clock started. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subsys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="71" column="9" bodyfile="include/drivers/clock_control.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga459b95cb726892b95537d15273413099" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control) (const struct device *dev, clock_control_subsys_t sys)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="75" column="9" bodyfile="include/drivers/clock_control.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga41087b8914b4bec0c1a61217122cc2a0" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control_get) (const struct device *dev, clock_control_subsys_t sys, uint32_t *rate)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys, uint32_t *rate)</argsstring>
        <name>clock_control_get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="78" column="9" bodyfile="include/drivers/clock_control.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga0cd408e023fda272784c24d0c644014d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control_async_on_fn) (const struct device *dev, clock_control_subsys_t sys, clock_control_cb_t cb, void *user_data)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys, clock_control_cb_t cb, void *user_data)</argsstring>
        <name>clock_control_async_on_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="82" column="9" bodyfile="include/drivers/clock_control.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga0af123fbaa3572a9722f17c331936e9a" prot="public" static="no">
        <type>enum <ref refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" kindref="member">clock_control_status</ref>(*</type>
        <definition>typedef enum clock_control_status(* clock_control_get_status_fn) (const struct device *dev, clock_control_subsys_t sys)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_get_status_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="82" column="9" bodyfile="include/drivers/clock_control.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__clock__control__interface_1ga8ea31ee8a6e3aa69de0098efba63ae2b" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* clock_control_set) (const struct device *dev, clock_control_subsys_t sys, clock_control_subsys_rate_t rate)</definition>
        <argsstring>)(const struct device *dev, clock_control_subsys_t sys, clock_control_subsys_rate_t rate)</argsstring>
        <name>clock_control_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="91" column="9" bodyfile="include/drivers/clock_control.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__clock__control__interface_1gaec69b0989cefad79ffd5c92f060150b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_on</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_on</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Enable a clock controlled by the device. </para>
        </briefdescription>
        <detaileddescription>
<para>On success, the clock is enabled and ready when this function returns. This function may sleep, and thus can only be called from thread context.</para>
<para>Use <ref refid="group__clock__control__interface_1ga03cedb9723e001d01c495f0abb6acfdf" kindref="member">clock_control_async_on()</ref> for non-blocking operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="117" column="19" bodyfile="include/drivers/clock_control.h" bodystart="117" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1gadbebc1c12937be561b761ef4a3b7d8a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_off</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_off</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Disable a clock controlled by the device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is non-blocking and can be called from any context. On success, the clock is disabled when this function returns.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="140" column="19" bodyfile="include/drivers/clock_control.h" bodystart="140" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga03cedb9723e001d01c495f0abb6acfdf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_async_on</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys, clock_control_cb_t cb, void *user_data)</argsstring>
        <name>clock_control_async_on</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1ga17257fb3864dc5a33082c3422ad7c275" kindref="member">clock_control_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Request clock to start with notification when clock has been started. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is non-blocking and can be called from any context. User callback is called when clock is started.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an opaque data representing the sub-system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User context passed to the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if start is successfully initiated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>if clock was already started and is starting or running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the requested mode of operation is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the interface is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>negative errno on vendor specific error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="170" column="19" bodyfile="include/drivers/clock_control.h" bodystart="170" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga35be64d09222f44aa00cd1371a39613e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>enum <ref refid="group__clock__control__interface_1gad12829335f0c954ab6d586549db45e09" kindref="member">clock_control_status</ref></type>
        <definition>static enum clock_control_status clock_control_get_status</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys)</argsstring>
        <name>clock_control_get_status</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Get clock status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an opaque data representing the sub-system.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="197" column="40" bodyfile="include/drivers/clock_control.h" bodystart="197" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga00f6af6d2668c2dfff0640fe176e89ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_get_rate</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys, uint32_t *rate)</argsstring>
        <name>clock_control_get_rate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Obtain the clock rate of given sub-system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the clock controller driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an opaque data representing the sub-system </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Subsystem clock rate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="221" column="19" bodyfile="include/drivers/clock_control.h" bodystart="221" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__clock__control__interface_1ga3bd25314e8bfcc62f0728d89321bb614" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int clock_control_set_rate</definition>
        <argsstring>(const struct device *dev, clock_control_subsys_t sys, clock_control_subsys_rate_t rate)</argsstring>
        <name>clock_control_set_rate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1gaa7d3935eaaf18902801a7d94859483db" kindref="member">clock_control_subsys_t</ref></type>
          <declname>sys</declname>
        </param>
        <param>
          <type><ref refid="group__clock__control__interface_1ga05d8b476ef0331e1502702921d2801f1" kindref="member">clock_control_subsys_rate_t</ref></type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the rate of the clock controlled by the device. </para>
        </briefdescription>
        <detaileddescription>
<para>On success, the new clock rate is set and ready when this function returns. This function may sleep, and thus can only be called from thread context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device structure whose driver controls the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque data representing the clock rate to be used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>if clock was already in the given rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the requested mode of operation is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the interface is not implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>negative errno on vendor specific error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="255" column="19" bodyfile="include/drivers/clock_control.h" bodystart="255" bodyend="271"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__clock__control__interface_1ga9aa9a4e00c1e7985a1fea6bed235003e" prot="public" static="no">
        <name>CLOCK_CONTROL_SUBSYS_ALL</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/clock_control.h" line="37" column="9" bodyfile="include/drivers/clock_control.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Clock Control Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
