<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="tracing__macros_8h" kind="file" language="C++">
    <compoundname>tracing_macros.h</compoundname>
    <includedby refid="include_2kernel_8h" local="no">include/kernel.h</includedby>
    <invincdepgraph>
      <node id="3">
        <label>include/cache.h</label>
        <link refid="cache_8h"/>
      </node>
      <node id="5">
        <label>include/device.h</label>
        <link refid="device_8h"/>
      </node>
      <node id="6">
        <label>include/drivers/pcie/endpoint/pcie_ep.h</label>
        <link refid="pcie__ep_8h"/>
      </node>
      <node id="4">
        <label>include/init.h</label>
        <link refid="init_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>include/posix/pthread.h</label>
        <link refid="pthread_8h"/>
      </node>
      <node id="183">
        <label>include/smf.h</label>
        <link refid="smf_8h"/>
      </node>
      <node id="178">
        <label>include/syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>include/timeout_q.h</label>
        <link refid="timeout__q_8h"/>
        <childnode refid="180" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="180">
        <label>include/wait_q.h</label>
        <link refid="wait__q_8h"/>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/xen/console.h</label>
        <link refid="xen_2console_8h"/>
      </node>
      <node id="182">
        <label>include/zephyr.h</label>
        <link refid="zephyr_8h"/>
        <childnode refid="183" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>subsys/testsuite/ztest/include/ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>subsys/testsuite/ztest/include/ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>subsys/testsuite/ztest/include/ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>subsys/testsuite/ztest/include/ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>subsys/testsuite/ztest/include/ztest_test_new.h</label>
        <link refid="ztest__test__new_8h"/>
      </node>
      <node id="12">
        <label>tests/kernel/common/src/atomic.c</label>
        <link refid="atomic_8c"/>
      </node>
      <node id="13">
        <label>tests/kernel/common/src/bitarray.c</label>
        <link refid="bitarray_8c"/>
      </node>
      <node id="14">
        <label>tests/kernel/common/src/bitfield.c</label>
        <link refid="bitfield_8c"/>
      </node>
      <node id="15">
        <label>tests/kernel/common/src/boot_delay.c</label>
        <link refid="boot__delay_8c"/>
      </node>
      <node id="16">
        <label>tests/kernel/common/src/byteorder.c</label>
        <link refid="byteorder_8c"/>
      </node>
      <node id="17">
        <label>tests/kernel/common/src/clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="18">
        <label>tests/kernel/common/src/errno.c</label>
        <link refid="errno_8c"/>
      </node>
      <node id="19">
        <label>tests/kernel/common/src/irq_offload.c</label>
        <link refid="irq__offload_8c"/>
      </node>
      <node id="20">
        <label>tests/kernel/common/src/main.c</label>
        <link refid="common_2src_2main_8c"/>
      </node>
      <node id="21">
        <label>tests/kernel/common/src/multilib.c</label>
        <link refid="multilib_8c"/>
      </node>
      <node id="22">
        <label>tests/kernel/common/src/printk.c</label>
        <link refid="printk_8c"/>
      </node>
      <node id="23">
        <label>tests/kernel/common/src/timeout_order.c</label>
        <link refid="timeout__order_8c"/>
      </node>
      <node id="24">
        <label>tests/kernel/condvar/condvar_api/src/main.c</label>
        <link refid="condvar_2condvar__api_2src_2main_8c"/>
      </node>
      <node id="25">
        <label>tests/kernel/context/src/main.c</label>
        <link refid="context_2src_2main_8c"/>
      </node>
      <node id="26">
        <label>tests/kernel/device/src/abstract_driver.c</label>
        <link refid="abstract__driver_8c"/>
      </node>
      <node id="27">
        <label>tests/kernel/device/src/abstract_driver.h</label>
        <link refid="abstract__driver_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>tests/kernel/device/src/main.c</label>
        <link refid="device_2src_2main_8c"/>
      </node>
      <node id="29">
        <label>tests/kernel/device/src/mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="30">
        <label>tests/kernel/device/src/test_driver_init.c</label>
        <link refid="test__driver__init_8c"/>
      </node>
      <node id="31">
        <label>tests/kernel/early_sleep/src/main.c</label>
        <link refid="early__sleep_2src_2main_8c"/>
      </node>
      <node id="32">
        <label>tests/kernel/events/event_api/src/main.c</label>
        <link refid="events_2event__api_2src_2main_8c"/>
      </node>
      <node id="33">
        <label>tests/kernel/events/event_api/src/test_event_apis.c</label>
        <link refid="test__event__apis_8c"/>
      </node>
      <node id="34">
        <label>tests/kernel/events/sys_event/src/main.c</label>
        <link refid="events_2sys__event_2src_2main_8c"/>
      </node>
      <node id="35">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="36">
        <label>tests/kernel/fatal/no-multithreading/src/main.c</label>
        <link refid="fatal_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="37">
        <label>tests/kernel/fifo/fifo_api/src/main.c</label>
        <link refid="fifo_2fifo__api_2src_2main_8c"/>
      </node>
      <node id="38">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo.h</label>
        <link refid="test__fifo_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_cancel.c</label>
        <link refid="test__fifo__cancel_8c"/>
      </node>
      <node id="40">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c</label>
        <link refid="test__fifo__contexts_8c"/>
      </node>
      <node id="41">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_fail.c</label>
        <link refid="test__fifo__fail_8c"/>
      </node>
      <node id="42">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_loop.c</label>
        <link refid="test__fifo__loop_8c"/>
      </node>
      <node id="43">
        <label>tests/kernel/fifo/fifo_timeout/src/main.c</label>
        <link refid="fifo_2fifo__timeout_2src_2main_8c"/>
      </node>
      <node id="44">
        <label>tests/kernel/fifo/fifo_usage/src/main.c</label>
        <link refid="fifo_2fifo__usage_2src_2main_8c"/>
      </node>
      <node id="45">
        <label>tests/kernel/fpu_sharing/float_disable/src/k_float_disable.c</label>
        <link refid="k__float__disable_8c"/>
      </node>
      <node id="46">
        <label>tests/kernel/fpu_sharing/float_disable/src/main.c</label>
        <link refid="fpu__sharing_2float__disable_2src_2main_8c"/>
      </node>
      <node id="47">
        <label>tests/kernel/fpu_sharing/generic/src/load_store.c</label>
        <link refid="load__store_8c"/>
      </node>
      <node id="48">
        <label>tests/kernel/fpu_sharing/generic/src/main.c</label>
        <link refid="fpu__sharing_2generic_2src_2main_8c"/>
      </node>
      <node id="49">
        <label>tests/kernel/fpu_sharing/generic/src/pi.c</label>
        <link refid="pi_8c"/>
      </node>
      <node id="50">
        <label>tests/kernel/gen_isr_table/src/main.c</label>
        <link refid="gen__isr__table_2src_2main_8c"/>
      </node>
      <node id="51">
        <label>tests/kernel/interrupt/src/direct_isr.c</label>
        <link refid="direct__isr_8c"/>
      </node>
      <node id="52">
        <label>tests/kernel/interrupt/src/dynamic_isr.c</label>
        <link refid="dynamic__isr_8c"/>
      </node>
      <node id="53">
        <label>tests/kernel/interrupt/src/interrupt_offload.c</label>
        <link refid="interrupt__offload_8c"/>
      </node>
      <node id="54">
        <label>tests/kernel/interrupt/src/main.c</label>
        <link refid="interrupt_2src_2main_8c"/>
      </node>
      <node id="55">
        <label>tests/kernel/interrupt/src/nested_irq.c</label>
        <link refid="nested__irq_8c"/>
      </node>
      <node id="56">
        <label>tests/kernel/interrupt/src/prevent_irq.c</label>
        <link refid="prevent__irq_8c"/>
      </node>
      <node id="57">
        <label>tests/kernel/interrupt/src/regular_isr.c</label>
        <link refid="regular__isr_8c"/>
      </node>
      <node id="58">
        <label>tests/kernel/lifo/lifo_api/src/main.c</label>
        <link refid="lifo_2lifo__api_2src_2main_8c"/>
      </node>
      <node id="59">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo.h</label>
        <link refid="test__lifo_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_contexts.c</label>
        <link refid="test__lifo__contexts_8c"/>
      </node>
      <node id="61">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_fail.c</label>
        <link refid="test__lifo__fail_8c"/>
      </node>
      <node id="62">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_loop.c</label>
        <link refid="test__lifo__loop_8c"/>
      </node>
      <node id="63">
        <label>tests/kernel/lifo/lifo_usage/src/main.c</label>
        <link refid="lifo_2lifo__usage_2src_2main_8c"/>
      </node>
      <node id="64">
        <label>tests/kernel/mbox/mbox_api/src/main.c</label>
        <link refid="mbox_2mbox__api_2src_2main_8c"/>
      </node>
      <node id="65">
        <label>tests/kernel/mbox/mbox_api/src/test_mbox_api.c</label>
        <link refid="test__mbox__api_8c"/>
      </node>
      <node id="66">
        <label>tests/kernel/mbox/mbox_usage/src/main.c</label>
        <link refid="mbox_2mbox__usage_2src_2main_8c"/>
      </node>
      <node id="67">
        <label>tests/kernel/mem_heap/k_heap_api/src/main.c</label>
        <link refid="mem__heap_2k__heap__api_2src_2main_8c"/>
      </node>
      <node id="68">
        <label>tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c</label>
        <link refid="test__kheap__api_8c"/>
      </node>
      <node id="69">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/main.c</label>
        <link refid="mem__heap_2mheap__api__concept_2src_2main_8c"/>
      </node>
      <node id="70">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</label>
        <link refid="test__mheap__api_8c"/>
      </node>
      <node id="71">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c</label>
        <link refid="test__mheap__concept_8c"/>
      </node>
      <node id="72">
        <label>tests/kernel/mem_heap/shared_multi_heap/src/main.c</label>
        <link refid="mem__heap_2shared__multi__heap_2src_2main_8c"/>
      </node>
      <node id="73">
        <label>tests/kernel/mem_protect/demand_paging/src/main.c</label>
        <link refid="mem__protect_2demand__paging_2src_2main_8c"/>
      </node>
      <node id="74">
        <label>tests/kernel/mem_protect/futex/src/main.c</label>
        <link refid="mem__protect_2futex_2src_2main_8c"/>
      </node>
      <node id="75">
        <label>tests/kernel/mem_protect/mem_map/src/main.c</label>
        <link refid="mem__protect_2mem__map_2src_2main_8c"/>
      </node>
      <node id="76">
        <label>tests/kernel/mem_protect/mem_protect/src/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="79">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="80">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="77">
        <label>tests/kernel/mem_protect/mem_protect/src/main.c</label>
        <link refid="mem__protect_2mem__protect_2src_2main_8c"/>
      </node>
      <node id="81">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_domain.c</label>
        <link refid="mem__domain_8c"/>
      </node>
      <node id="82">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_partition.c</label>
        <link refid="mem__partition_8c"/>
      </node>
      <node id="78">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="84">
        <label>tests/kernel/mem_protect/protection/src/main.c</label>
        <link refid="mem__protect_2protection_2src_2main_8c"/>
      </node>
      <node id="85">
        <label>tests/kernel/mem_protect/stack_random/src/main.c</label>
        <link refid="mem__protect_2stack__random_2src_2main_8c"/>
      </node>
      <node id="86">
        <label>tests/kernel/mem_protect/stackprot/src/main.c</label>
        <link refid="mem__protect_2stackprot_2src_2main_8c"/>
      </node>
      <node id="87">
        <label>tests/kernel/mem_protect/sys_sem/src/main.c</label>
        <link refid="mem__protect_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="88">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="89">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="90">
        <label>tests/kernel/mem_slab/mslab/src/main.c</label>
        <link refid="mem__slab_2mslab_2src_2main_8c"/>
      </node>
      <node id="91">
        <label>tests/kernel/mem_slab/mslab_api/src/main.c</label>
        <link refid="mem__slab_2mslab__api_2src_2main_8c"/>
      </node>
      <node id="92">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c</label>
        <link refid="test__mslab__api_8c"/>
      </node>
      <node id="93">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_extern.c</label>
        <link refid="test__mslab__extern_8c"/>
      </node>
      <node id="94">
        <label>tests/kernel/mem_slab/mslab_concept/src/main.c</label>
        <link refid="mem__slab_2mslab__concept_2src_2main_8c"/>
      </node>
      <node id="95">
        <label>tests/kernel/mem_slab/mslab_concept/src/test_mslab_alloc_wait.c</label>
        <link refid="test__mslab__alloc__wait_8c"/>
      </node>
      <node id="96">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/main.c</label>
        <link refid="mem__slab_2mslab__threadsafe_2src_2main_8c"/>
      </node>
      <node id="97">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/test_mslab_threadsafe.c</label>
        <link refid="test__mslab__threadsafe_8c"/>
      </node>
      <node id="98">
        <label>tests/kernel/mp/src/main.c</label>
        <link refid="mp_2src_2main_8c"/>
      </node>
      <node id="99">
        <label>tests/kernel/msgq/msgq_api/src/main.c</label>
        <link refid="msgq_2msgq__api_2src_2main_8c"/>
      </node>
      <node id="100">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq.h</label>
        <link refid="test__msgq_8h"/>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_attrs.c</label>
        <link refid="test__msgq__attrs_8c"/>
      </node>
      <node id="102">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_contexts.c</label>
        <link refid="test__msgq__contexts_8c"/>
      </node>
      <node id="103">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_fail.c</label>
        <link refid="test__msgq__fail_8c"/>
      </node>
      <node id="104">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_purge.c</label>
        <link refid="test__msgq__purge_8c"/>
      </node>
      <node id="105">
        <label>tests/kernel/msgq/msgq_usage/src/main.c</label>
        <link refid="msgq_2msgq__usage_2src_2main_8c"/>
      </node>
      <node id="106">
        <label>tests/kernel/mutex/mutex_api/src/test_mutex_apis.c</label>
        <link refid="test__mutex__apis_8c"/>
      </node>
      <node id="107">
        <label>tests/kernel/mutex/mutex_error_case/src/test_mutex_error.c</label>
        <link refid="test__mutex__error_8c"/>
      </node>
      <node id="108">
        <label>tests/kernel/mutex/sys_mutex/src/main.c</label>
        <link refid="mutex_2sys__mutex_2src_2main_8c"/>
      </node>
      <node id="109">
        <label>tests/kernel/mutex/sys_mutex/src/thread_competition.c</label>
        <link refid="thread__competition_8c"/>
      </node>
      <node id="110">
        <label>tests/kernel/obj_tracking/src/main.c</label>
        <link refid="obj__tracking_2src_2main_8c"/>
      </node>
      <node id="111">
        <label>tests/kernel/pending/src/main.c</label>
        <link refid="pending_2src_2main_8c"/>
      </node>
      <node id="112">
        <label>tests/kernel/pipe/pipe/src/main.c</label>
        <link refid="pipe_2pipe_2src_2main_8c"/>
      </node>
      <node id="113">
        <label>tests/kernel/pipe/pipe/src/test_pipe.c</label>
        <link refid="test__pipe_8c"/>
      </node>
      <node id="114">
        <label>tests/kernel/pipe/pipe_api/src/main.c</label>
        <link refid="pipe_2pipe__api_2src_2main_8c"/>
      </node>
      <node id="115">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_avail.c</label>
        <link refid="test__pipe__avail_8c"/>
      </node>
      <node id="116">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c</label>
        <link refid="test__pipe__contexts_8c"/>
      </node>
      <node id="117">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_fail.c</label>
        <link refid="test__pipe__fail_8c"/>
      </node>
      <node id="118">
        <label>tests/kernel/poll/src/main.c</label>
        <link refid="poll_2src_2main_8c"/>
      </node>
      <node id="119">
        <label>tests/kernel/poll/src/test_poll.c</label>
        <link refid="test__poll_8c"/>
      </node>
      <node id="120">
        <label>tests/kernel/poll/src/test_poll_fail.c</label>
        <link refid="test__poll__fail_8c"/>
      </node>
      <node id="121">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="122">
        <label>tests/kernel/queue/src/main.c</label>
        <link refid="queue_2src_2main_8c"/>
      </node>
      <node id="123">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>tests/kernel/queue/src/test_queue_contexts.c</label>
        <link refid="test__queue__contexts_8c"/>
      </node>
      <node id="125">
        <label>tests/kernel/queue/src/test_queue_fail.c</label>
        <link refid="test__queue__fail_8c"/>
      </node>
      <node id="126">
        <label>tests/kernel/queue/src/test_queue_loop.c</label>
        <link refid="test__queue__loop_8c"/>
      </node>
      <node id="127">
        <label>tests/kernel/queue/src/test_queue_user.c</label>
        <link refid="test__queue__user_8c"/>
      </node>
      <node id="128">
        <label>tests/kernel/sched/deadline/src/main.c</label>
        <link refid="sched_2deadline_2src_2main_8c"/>
      </node>
      <node id="129">
        <label>tests/kernel/sched/metairq/src/main.c</label>
        <link refid="sched_2metairq_2src_2main_8c"/>
      </node>
      <node id="130">
        <label>tests/kernel/sched/preempt/src/main.c</label>
        <link refid="sched_2preempt_2src_2main_8c"/>
      </node>
      <node id="133">
        <label>tests/kernel/sched/schedule_api/src/main.c</label>
        <link refid="sched_2schedule__api_2src_2main_8c"/>
      </node>
      <node id="131">
        <label>tests/kernel/sched/schedule_api/src/test_priority_scheduling.c</label>
        <link refid="test__priority__scheduling_8c"/>
      </node>
      <node id="132">
        <label>tests/kernel/sched/schedule_api/src/test_sched.h</label>
        <link refid="test__sched_8h"/>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c</label>
        <link refid="test__sched__is__preempt__thread_8c"/>
      </node>
      <node id="135">
        <label>tests/kernel/sched/schedule_api/src/test_sched_priority.c</label>
        <link refid="test__sched__priority_8c"/>
      </node>
      <node id="136">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c</label>
        <link refid="test__sched__timeslice__and__lock_8c"/>
      </node>
      <node id="137">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c</label>
        <link refid="test__sched__timeslice__reset_8c"/>
      </node>
      <node id="138">
        <label>tests/kernel/sched/schedule_api/src/test_slice_scheduling.c</label>
        <link refid="test__slice__scheduling_8c"/>
      </node>
      <node id="139">
        <label>tests/kernel/sched/schedule_api/src/user_api.c</label>
        <link refid="user__api_8c"/>
      </node>
      <node id="140">
        <label>tests/kernel/semaphore/semaphore/src/main.c</label>
        <link refid="semaphore_2semaphore_2src_2main_8c"/>
      </node>
      <node id="141">
        <label>tests/kernel/semaphore/sys_sem/src/main.c</label>
        <link refid="semaphore_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="142">
        <label>tests/kernel/sleep/src/main.c</label>
        <link refid="sleep_2src_2main_8c"/>
      </node>
      <node id="143">
        <label>tests/kernel/sleep/src/usleep.c</label>
        <link refid="usleep_8c"/>
      </node>
      <node id="144">
        <label>tests/kernel/smp/src/main.c</label>
        <link refid="smp_2src_2main_8c"/>
      </node>
      <node id="145">
        <label>tests/kernel/smp_boot_delay/src/main.c</label>
        <link refid="smp__boot__delay_2src_2main_8c"/>
      </node>
      <node id="146">
        <label>tests/kernel/spinlock/src/main.c</label>
        <link refid="spinlock_2src_2main_8c"/>
      </node>
      <node id="147">
        <label>tests/kernel/spinlock/src/spinlock_error_case.c</label>
        <link refid="spinlock__error__case_8c"/>
      </node>
      <node id="148">
        <label>tests/kernel/stack/stack/src/main.c</label>
        <link refid="stack_2stack_2src_2main_8c"/>
      </node>
      <node id="149">
        <label>tests/kernel/stack/stack/src/test_stack_contexts.c</label>
        <link refid="test__stack__contexts_8c"/>
      </node>
      <node id="150">
        <label>tests/kernel/stack/stack/src/test_stack_fail.c</label>
        <link refid="test__stack__fail_8c"/>
      </node>
      <node id="151">
        <label>tests/kernel/threads/dynamic_thread/src/main.c</label>
        <link refid="threads_2dynamic__thread_2src_2main_8c"/>
      </node>
      <node id="152">
        <label>tests/kernel/threads/no-multithreading/src/main.c</label>
        <link refid="threads_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="153">
        <label>tests/kernel/threads/thread_apis/src/main.c</label>
        <link refid="threads_2thread__apis_2src_2main_8c"/>
      </node>
      <node id="154">
        <label>tests/kernel/threads/thread_apis/src/test_essential_thread.c</label>
        <link refid="test__essential__thread_8c"/>
      </node>
      <node id="155">
        <label>tests/kernel/threads/thread_apis/src/test_kthread_for_each.c</label>
        <link refid="test__kthread__for__each_8c"/>
      </node>
      <node id="156">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c</label>
        <link refid="test__threads__cancel__abort_8c"/>
      </node>
      <node id="157">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cpu_mask.c</label>
        <link refid="test__threads__cpu__mask_8c"/>
      </node>
      <node id="158">
        <label>tests/kernel/threads/thread_apis/src/test_threads_set_priority.c</label>
        <link refid="test__threads__set__priority_8c"/>
      </node>
      <node id="159">
        <label>tests/kernel/threads/thread_apis/src/test_threads_spawn.c</label>
        <link refid="test__threads__spawn_8c"/>
      </node>
      <node id="160">
        <label>tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c</label>
        <link refid="test__threads__suspend__resume_8c"/>
      </node>
      <node id="161">
        <label>tests/kernel/threads/thread_error_case/src/main.c</label>
        <link refid="threads_2thread__error__case_2src_2main_8c"/>
      </node>
      <node id="162">
        <label>tests/kernel/threads/thread_init/src/main.c</label>
        <link refid="threads_2thread__init_2src_2main_8c"/>
      </node>
      <node id="163">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
      <node id="164">
        <label>tests/kernel/threads/tls/src/main.c</label>
        <link refid="threads_2tls_2src_2main_8c"/>
      </node>
      <node id="165">
        <label>tests/kernel/tickless/tickless_concept/src/main.c</label>
        <link refid="tickless_2tickless__concept_2src_2main_8c"/>
      </node>
      <node id="166">
        <label>tests/kernel/timer/cycle64/src/main.c</label>
        <link refid="timer_2cycle64_2src_2main_8c"/>
      </node>
      <node id="167">
        <label>tests/kernel/timer/starve/src/main.c</label>
        <link refid="timer_2starve_2src_2main_8c"/>
      </node>
      <node id="168">
        <label>tests/kernel/timer/timer_api/src/main.c</label>
        <link refid="timer_2timer__api_2src_2main_8c"/>
      </node>
      <node id="169">
        <label>tests/kernel/timer/timer_api/src/timer_convert.c</label>
        <link refid="timer__convert_8c"/>
      </node>
      <node id="170">
        <label>tests/kernel/timer/timer_error_case/src/main.c</label>
        <link refid="timer_2timer__error__case_2src_2main_8c"/>
      </node>
      <node id="171">
        <label>tests/kernel/timer/timer_monotonic/src/main.c</label>
        <link refid="timer_2timer__monotonic_2src_2main_8c"/>
      </node>
      <node id="172">
        <label>tests/kernel/workq/critical/src/main.c</label>
        <link refid="workq_2critical_2src_2main_8c"/>
      </node>
      <node id="173">
        <label>tests/kernel/workq/user_work/src/main.c</label>
        <link refid="workq_2user__work_2src_2main_8c"/>
      </node>
      <node id="174">
        <label>tests/kernel/workq/work/src/main.c</label>
        <link refid="workq_2work_2src_2main_8c"/>
      </node>
      <node id="175">
        <label>tests/kernel/workq/work_queue/src/main.c</label>
        <link refid="workq_2work__queue_2src_2main_8c"/>
      </node>
      <node id="176">
        <label>tests/kernel/xip/src/main.c</label>
        <link refid="xip_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" prot="public" static="no">
        <name>SYS_PORT_TRACING_TYPE_MASK</name>
        <param><defname>type</defname></param>
        <param><defname>trace_call</defname></param>
        <initializer>	_SYS_PORT_TRACING_TYPE_MASK(type)(trace_call)</initializer>
        <briefdescription>
<para>Checks if an object type should be traced or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Tracing event type/object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trace_call</parametername>
</parameternamelist>
<parameterdescription>
<para>Tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="184" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1gadce691eea44f211b804ce44b51b2e71d" prot="public" static="no">
        <name>SYS_PORT_TRACING_FUNC</name>
        <param><defname>type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		_SYS_PORT_TRACING_FUNC(type, func)(__VA_ARGS__); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for function calls which are not directly associated with a specific type of object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of tracing event or object type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="199" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga445bcac4cec53d560ddca757de17e1e3" prot="public" static="no">
        <name>SYS_PORT_TRACING_FUNC_ENTER</name>
        <param><defname>type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		_SYS_PORT_TRACING_FUNC_ENTER(type, func)(__VA_ARGS__); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for the entry into a function that might or might not return a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of tracing event or object type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="216" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga17c6029a89e3e1539dbac019dc9ee50b" prot="public" static="no">
        <name>SYS_PORT_TRACING_FUNC_BLOCKING</name>
        <param><defname>type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		_SYS_PORT_TRACING_FUNC_BLOCKING(type, func)(__VA_ARGS__); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for when a function blocks during its execution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of tracing event or object type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="232" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1gab0350eef3ed26733e57505ee2d0487cb" prot="public" static="no">
        <name>SYS_PORT_TRACING_FUNC_EXIT</name>
        <param><defname>type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		_SYS_PORT_TRACING_FUNC_EXIT(type, func)(__VA_ARGS__); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for when a function ends its execution. Potential return values can be given as additional arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of tracing event or object type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="249" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga19606657deb4b8902314fe11eb8bfb24" prot="public" static="no">
        <name>SYS_PORT_TRACING_OBJ_INIT</name>
        <param><defname>obj_type</defname></param>
        <param><defname>obj</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(obj_type, \
			_SYS_PORT_TRACING_OBJ_INIT(obj_type)(obj, ##__VA_ARGS__)); \
		<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(obj_type, \
			_SYS_PORT_TRACKING_OBJ_INIT(obj_type)(obj, ##__VA_ARGS__)); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for the initialization of an object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object associated with the call (<ref refid="structk__thread" kindref="compound">k_thread</ref>, k_sem, <ref refid="structk__mutex" kindref="compound">k_mutex</ref> etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="262" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1gaca007b62a20872de436533f26e5b1c55" prot="public" static="no">
        <name>SYS_PORT_TRACING_OBJ_FUNC</name>
        <param><defname>obj_type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>obj</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(obj_type, \
			_SYS_PORT_TRACING_OBJ_FUNC(obj_type, func)(obj, ##__VA_ARGS__)); \
		<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(obj_type, \
			_SYS_PORT_TRACKING_OBJ_FUNC(obj_type, func)(obj, ##__VA_ARGS__)); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for simple object function calls often without returns or branching. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object associated with the call (<ref refid="structk__thread" kindref="compound">k_thread</ref>, k_sem, <ref refid="structk__mutex" kindref="compound">k_mutex</ref> etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="280" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" prot="public" static="no">
        <name>SYS_PORT_TRACING_OBJ_FUNC_ENTER</name>
        <param><defname>obj_type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>obj</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(obj_type, \
			_SYS_PORT_TRACING_OBJ_FUNC_ENTER(obj_type, func)(obj, ##__VA_ARGS__)); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for the entry into a function that might or might not return a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object associated with the call (<ref refid="structk__thread" kindref="compound">k_thread</ref>, k_sem, <ref refid="structk__mutex" kindref="compound">k_mutex</ref> etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="299" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga8e98afd586a77d158acb103b94d9cd3f" prot="public" static="no">
        <name>SYS_PORT_TRACING_OBJ_FUNC_BLOCKING</name>
        <param><defname>obj_type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>obj</defname></param>
        <param><defname>timeout</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(obj_type, \
			_SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(obj_type, func) \
			(obj, <ref refid="timer_2cycle64_2src_2main_8c_1a8f4b69a82b00d7baf3f1f7d480bb7fa0" kindref="member">timeout</ref>, ##__VA_ARGS__)); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for when a function blocks during its execution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object associated with the call (<ref refid="structk__thread" kindref="compound">k_thread</ref>, k_sem, <ref refid="structk__mutex" kindref="compound">k_mutex</ref> etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="316" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" prot="public" static="no">
        <name>SYS_PORT_TRACING_OBJ_FUNC_EXIT</name>
        <param><defname>obj_type</defname></param>
        <param><defname>func</defname></param>
        <param><defname>obj</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
		<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(obj_type, \
			_SYS_PORT_TRACING_OBJ_FUNC_EXIT(obj_type, func)(obj, ##__VA_ARGS__)); \
	} while (<ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>)</initializer>
        <briefdescription>
<para>Tracing macro for when a function ends its execution. Potential return values can be given as additional arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object associated with the call (<ref refid="structk__thread" kindref="compound">k_thread</ref>, k_sem, <ref refid="structk__mutex" kindref="compound">k_mutex</ref> etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function responsible for the call. This does not need to exactly match the name of the function but should rather match what the user called in case of system calls etc. That is, we can often omit the z_vrfy/z_impl part of the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters relevant to the tracing call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="334" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" prot="public" static="no">
        <name>SYS_PORT_TRACING_TRACKING_FIELD</name>
        <param><defname>type</defname></param>
        <initializer>	<ref refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" kindref="member">SYS_PORT_TRACING_TYPE_MASK</ref>(type, struct type *_obj_track_next;)</initializer>
        <briefdescription>
<para>Field added to kernel objects so they are tracked. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of object being tracked (<ref refid="structk__thread" kindref="compound">k_thread</ref>, k_sem, etc.) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tracing/tracing_macros.h" line="345" column="9" bodyfile="include/tracing/tracing_macros.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_TRACING_TRACING_MACROS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_TRACING_TRACING_MACROS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_TRACING)<sp/>&amp;&amp;<sp/>!defined(__DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC(type,<sp/>func,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC_ENTER(type,<sp/>func,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC_BLOCKING(type,<sp/>func,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC_EXIT(type,<sp/>func,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_INIT(obj_type,<sp/>obj,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC(obj_type,<sp/>func,<sp/>obj,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(obj_type,<sp/>func,<sp/>obj,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(obj_type,<sp/>func,<sp/>obj,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(obj_type,<sp/>func,<sp/>obj,<sp/>...)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_TRACKING_FIELD(type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>Helper<sp/>macros<sp/>used<sp/>by<sp/>the<sp/>extended<sp/>tracing<sp/>system</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_TYPE_MASK(type)<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_type_mask_<sp/>##<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_FUNC(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_FUNC_ENTER(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func<sp/>##<sp/>_enter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_FUNC_BLOCKING(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func<sp/>##<sp/>_blocking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_FUNC_EXIT(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func<sp/>##<sp/>_exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_OBJ_INIT(name)<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_OBJ_FUNC(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_OBJ_FUNC_ENTER(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func<sp/>##<sp/>_enter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func<sp/>##<sp/>_blocking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACING_OBJ_FUNC_EXIT(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_trace_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func<sp/>##<sp/>_exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Helper<sp/>macros<sp/>for<sp/>the<sp/>object<sp/>tracking<sp/>system</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACKING_OBJ_INIT(name)<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_track_<sp/>##<sp/>name<sp/>##<sp/>_init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SYS_PORT_TRACKING_OBJ_FUNC(name,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_port_track_<sp/>##<sp/>name<sp/>##<sp/>_<sp/>##<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>Object<sp/>trace<sp/>macros<sp/>part<sp/>of<sp/>the<sp/>system<sp/>for<sp/>checking<sp/>if<sp/>certain</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>objects<sp/>should<sp/>be<sp/>traced<sp/>or<sp/>not<sp/>depending<sp/>on<sp/>the<sp/>tracing<sp/>configuration.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_THREAD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_thread(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_thread(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_WORK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work_queue(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work_delayable(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work_poll(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work_queue(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work_delayable(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_work_poll(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_SEMAPHORE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_sem(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_sem(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_MUTEX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_mutex(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_mutex(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_CONDVAR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_condvar(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_condvar(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_QUEUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_queue(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_queue(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_FIFO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_fifo(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_fifo(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_LIFO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_lifo(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_lifo(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_STACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_stack(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_stack(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_MESSAGE_QUEUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_msgq(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_msgq(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_MAILBOX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_mbox(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_mbox(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_PIPE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_pipe(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_pipe(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_HEAP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_heap(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_heap_sys(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_heap(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_heap_sys(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_MEMORY_SLAB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_mem_slab(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_mem_slab(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_TIMER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_timer(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_timer(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_TRACING_EVENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_event(trace_call)<sp/>trace_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>sys_port_trace_type_mask_k_event(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="group__subsys__tracing__macros_1ga7c3ff6c93f71cdd1a35e3a656885fb50" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_TYPE_MASK(type,<sp/>trace_call)<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_TYPE_MASK(type)(trace_call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="group__subsys__tracing__macros_1gadce691eea44f211b804ce44b51b2e71d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC(type,<sp/>func,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_FUNC(type,<sp/>func)(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="group__subsys__tracing__macros_1ga445bcac4cec53d560ddca757de17e1e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC_ENTER(type,<sp/>func,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_FUNC_ENTER(type,<sp/>func)(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="group__subsys__tracing__macros_1ga17c6029a89e3e1539dbac019dc9ee50b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC_BLOCKING(type,<sp/>func,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_FUNC_BLOCKING(type,<sp/>func)(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="group__subsys__tracing__macros_1gab0350eef3ed26733e57505ee2d0487cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_FUNC_EXIT(type,<sp/>func,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_FUNC_EXIT(type,<sp/>func)(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="group__subsys__tracing__macros_1ga19606657deb4b8902314fe11eb8bfb24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_INIT(obj_type,<sp/>obj,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(obj_type,<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_OBJ_INIT(obj_type)(obj,<sp/>##__VA_ARGS__));<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(obj_type,<sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACKING_OBJ_INIT(obj_type)(obj,<sp/>##__VA_ARGS__));<sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="group__subsys__tracing__macros_1gaca007b62a20872de436533f26e5b1c55" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC(obj_type,<sp/>func,<sp/>obj,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(obj_type,<sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_OBJ_FUNC(obj_type,<sp/>func)(obj,<sp/>##__VA_ARGS__));<sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(obj_type,<sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACKING_OBJ_FUNC(obj_type,<sp/>func)(obj,<sp/>##__VA_ARGS__));<sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="group__subsys__tracing__macros_1ga4ce3846263099a197c043f25ebe4a253" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC_ENTER(obj_type,<sp/>func,<sp/>obj,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(obj_type,<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_OBJ_FUNC_ENTER(obj_type,<sp/>func)(obj,<sp/>##__VA_ARGS__));<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="group__subsys__tracing__macros_1ga8e98afd586a77d158acb103b94d9cd3f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(obj_type,<sp/>func,<sp/>obj,<sp/>timeout,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(obj_type,<sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(obj_type,<sp/>func)<sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(obj,<sp/>timeout,<sp/>##__VA_ARGS__));<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="group__subsys__tracing__macros_1ga94bd54c03c68d60e1c0879ce43e08730" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_OBJ_FUNC_EXIT(obj_type,<sp/>func,<sp/>obj,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(obj_type,<sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SYS_PORT_TRACING_OBJ_FUNC_EXIT(obj_type,<sp/>func)(obj,<sp/>##__VA_ARGS__));<sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="group__subsys__tracing__macros_1ga6d1e443d7db5ecc892c89385547e75ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_PORT_TRACING_TRACKING_FIELD(type)<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SYS_PORT_TRACING_TYPE_MASK(type,<sp/>struct<sp/>type<sp/>*_obj_track_next;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>subsys_tracing_macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_TRACING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_TRACING_TRACING_MACROS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/tracing/tracing_macros.h"/>
  </compounddef>
</doxygen>
