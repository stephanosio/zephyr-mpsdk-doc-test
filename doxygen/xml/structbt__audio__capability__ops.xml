<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__audio__capability__ops" kind="struct" language="C++" prot="public">
    <compoundname>bt_audio_capability_ops</compoundname>
    <includes refid="capabilities_8h" local="no">capabilities.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__audio__capability__ops_1af402feffbe4f8b032cb5b52ba976b196" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbt__audio__stream" kindref="compound">bt_audio_stream</ref> *(*</type>
        <definition>struct bt_audio_stream *(* bt_audio_capability_ops::config) (struct bt_conn *conn, struct bt_audio_ep *ep, struct bt_audio_capability *cap, struct bt_codec *codec)</definition>
        <argsstring>)(struct bt_conn *conn, struct bt_audio_ep *ep, struct bt_audio_capability *cap, struct bt_codec *codec)</argsstring>
        <name>config</name>
        <briefdescription>
<para>Capability config callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Config callback is called whenever a new Audio Stream needs to be allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Remote Audio Endpoint being configured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Local Audio Capability being configured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated Audio Stream object or NULL in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="93" column="10" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1a8b2d886b1da8428c0cf2c84060487af0" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::reconfig) (struct bt_audio_stream *stream, struct bt_audio_capability *cap, struct bt_codec *codec)</definition>
        <argsstring>)(struct bt_audio_stream *stream, struct bt_audio_capability *cap, struct bt_codec *codec)</argsstring>
        <name>reconfig</name>
        <briefdescription>
<para>Capability reconfig callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Reconfig callback is called whenever an Audio Stream needs to be reconfigured with different codec configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being reconfigured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Local Audio Capability being reconfigured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="131" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1a52df52942fe3b6fd5834c9717fb1d381" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::qos) (struct bt_audio_stream *stream, struct bt_codec_qos *qos)</definition>
        <argsstring>)(struct bt_audio_stream *stream, struct bt_codec_qos *qos)</argsstring>
        <name>qos</name>
        <briefdescription>
<para>Capability QoS callback. </para>
        </briefdescription>
        <detaileddescription>
<para>QoS callback is called whenever an Audio Stream Quality of Service needs to be configured.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being reconfigured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>QoS</parametername>
</parameternamelist>
<parameterdescription>
<para>Quality of Service configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="145" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1a5720963a3bfb84aea732f3f3e470328d" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::enable) (struct bt_audio_stream *stream, uint8_t meta_count, struct bt_codec_data *meta)</definition>
        <argsstring>)(struct bt_audio_stream *stream, uint8_t meta_count, struct bt_codec_data *meta)</argsstring>
        <name>enable</name>
        <briefdescription>
<para>Capability Enable callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable callback is called whenever an Audio Stream is about to be enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of metadata entries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata entries</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="158" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1abebccbc54abe29c4355435649301fbe0" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::start) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>start</name>
        <briefdescription>
<para>Capability Start callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Start callback is called whenever an Audio Stream is about to start streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="170" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1a2950ca7741ef69b3384ea244870484c7" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::metadata) (struct bt_audio_stream *stream, uint8_t meta_count, struct bt_codec_data *meta)</definition>
        <argsstring>)(struct bt_audio_stream *stream, uint8_t meta_count, struct bt_codec_data *meta)</argsstring>
        <name>metadata</name>
        <briefdescription>
<para>Capability Metadata callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Metadata callback is called whenever an Audio Stream needs to update its metadata.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of metadata entries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata entries</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="183" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1aecfe6e5655fcfadec6d242fece8f328b" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::disable) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>disable</name>
        <briefdescription>
<para>Capability Disable callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Disable callback is called whenever an Audio Stream is about to be disabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being disabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="195" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1afa271c769962ebc0ce6a2919d34e6951" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::stop) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Capability Stop callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Stop callback is called whenever an Audio Stream is about to stop streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="206" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__capability__ops_1ab3cce39f057fddecebee2e76854104fc" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_capability_ops::release) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>release</name>
        <briefdescription>
<para>Capability release callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Release callback is called whenever a new Audio Stream needs to be deallocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/capabilities.h" line="217" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Capability operations structure. </para>
    </briefdescription>
    <detaileddescription>
<para>These are only used for unicast streams and broadcast sink streams. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>_snode</label>
      </node>
      <node id="1">
        <label>bt_audio_capability_ops</label>
        <link refid="structbt__audio__capability__ops"/>
        <childnode refid="2" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>bt_audio_stream</label>
        <link refid="structbt__audio__stream"/>
        <childnode refid="3" relation="usage">
          <edgelabel>codec</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>qos</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>iso</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>ops</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>bt_audio_stream_ops</label>
        <link refid="structbt__audio__stream__ops"/>
      </node>
      <node id="3">
        <label>bt_codec</label>
        <link refid="structbt__codec"/>
        <childnode refid="4" relation="usage">
          <edgelabel>data</edgelabel>
          <edgelabel>meta</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>bt_codec_data</label>
        <link refid="structbt__codec__data"/>
        <childnode refid="5" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>bt_codec_qos</label>
        <link refid="structbt__codec__qos"/>
      </node>
      <node id="5">
        <label>bt_data</label>
        <link refid="structbt__data"/>
      </node>
      <node id="7">
        <label>bt_iso_chan</label>
        <link refid="structbt__iso__chan"/>
        <childnode refid="8" relation="usage">
          <edgelabel>ops</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>qos</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>bt_iso_chan_io_qos</label>
        <link refid="structbt__iso__chan__io__qos"/>
        <childnode refid="14" relation="usage">
          <edgelabel>path</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>bt_iso_chan_ops</label>
        <link refid="structbt__iso__chan__ops"/>
        <childnode refid="9" relation="usage">
          <edgelabel>alloc_buf</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>bt_iso_chan_path</label>
        <link refid="structbt__iso__chan__path"/>
      </node>
      <node id="12">
        <label>bt_iso_chan_qos</label>
        <link refid="structbt__iso__chan__qos"/>
        <childnode refid="13" relation="usage">
          <edgelabel>rx</edgelabel>
          <edgelabel>tx</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>net_buf</label>
        <link refid="structnet__buf"/>
        <childnode refid="10" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>b</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>net_buf_simple</label>
        <link refid="structnet__buf__simple"/>
      </node>
    </collaborationgraph>
    <location file="include/bluetooth/audio/capabilities.h" line="102" column="1" bodyfile="include/bluetooth/audio/capabilities.h" bodystart="102" bodyend="218"/>
    <listofallmembers>
      <member refid="structbt__audio__capability__ops_1af402feffbe4f8b032cb5b52ba976b196" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>config</name></member>
      <member refid="structbt__audio__capability__ops_1aecfe6e5655fcfadec6d242fece8f328b" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>disable</name></member>
      <member refid="structbt__audio__capability__ops_1a5720963a3bfb84aea732f3f3e470328d" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>enable</name></member>
      <member refid="structbt__audio__capability__ops_1a2950ca7741ef69b3384ea244870484c7" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>metadata</name></member>
      <member refid="structbt__audio__capability__ops_1a52df52942fe3b6fd5834c9717fb1d381" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>qos</name></member>
      <member refid="structbt__audio__capability__ops_1a8b2d886b1da8428c0cf2c84060487af0" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>reconfig</name></member>
      <member refid="structbt__audio__capability__ops_1ab3cce39f057fddecebee2e76854104fc" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>release</name></member>
      <member refid="structbt__audio__capability__ops_1abebccbc54abe29c4355435649301fbe0" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>start</name></member>
      <member refid="structbt__audio__capability__ops_1afa271c769962ebc0ce6a2919d34e6951" prot="public" virt="non-virtual"><scope>bt_audio_capability_ops</scope><name>stop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
