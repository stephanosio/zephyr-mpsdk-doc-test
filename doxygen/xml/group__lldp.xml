<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__lldp" kind="group">
    <compoundname>lldp</compoundname>
    <title>Link Layer Discovery Protocol definitions and helpers</title>
    <innerclass refid="structnet__lldp__chassis__tlv" prot="public">net_lldp_chassis_tlv</innerclass>
    <innerclass refid="structnet__lldp__port__tlv" prot="public">net_lldp_port_tlv</innerclass>
    <innerclass refid="structnet__lldp__time__to__live__tlv" prot="public">net_lldp_time_to_live_tlv</innerclass>
    <innerclass refid="structnet__lldpdu" prot="public">net_lldpdu</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__lldp_1gadd4273e4fe55757729008ce081771899" prot="public" static="no" strong="no">
        <type></type>
        <name>net_lldp_tlv_type</name>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899a2b7c2a5f9f23b3bd6361e09d190c859a" prot="public">
          <name>LLDP_TLV_END_LLDPDU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>End Of LLDPDU (optional) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899acd8e886391d4356096db264cba5383e6" prot="public">
          <name>LLDP_TLV_CHASSIS_ID</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Chassis ID (mandatory) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899a247164e4394c67b5ebe8da8fd71dae45" prot="public">
          <name>LLDP_TLV_PORT_ID</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Port ID (mandatory) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899af6c7e7e44b7c0a9b1466c4c124f2c12c" prot="public">
          <name>LLDP_TLV_TTL</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Time To Live (mandatory) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899a848167601f7bb7a21ce25bd1a79836c0" prot="public">
          <name>LLDP_TLV_PORT_DESC</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Port Description (optional) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899abb2ebbce9ab2e6234d443dbaa246b6d9" prot="public">
          <name>LLDP_TLV_SYSTEM_NAME</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System Name (optional) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899ab99a55a2b6620c3d77cb0aeedf135782" prot="public">
          <name>LLDP_TLV_SYSTEM_DESC</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System Description (optional) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899a9c81c35102ccc8baa15797f69ef95521" prot="public">
          <name>LLDP_TLV_SYSTEM_CAPABILITIES</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System Capability (optional) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899ab0219acd11fad13967aec8a30054cae5" prot="public">
          <name>LLDP_TLV_MANAGEMENT_ADDR</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Management Address (optional) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__lldp_1ggadd4273e4fe55757729008ce081771899a07dee140b7ee13ec88a271fc292887ad" prot="public">
          <name>LLDP_TLV_ORG_SPECIFIC</name>
          <initializer>= 127</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Org specific TLVs (optional) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV Types. Please refer to table 8-1 from IEEE 802.1AB standard. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="121" column="1" bodyfile="include/net/lldp.h" bodystart="121" bodyend="133"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__lldp_1ga1e9fb662d7cdfc3c4c68cfd0312987cf" prot="public" static="no">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref>(*</type>
        <definition>typedef enum net_verdict(* net_lldp_recv_cb_t) (struct net_if *iface, struct net_pkt *pkt)</definition>
        <argsstring>)(struct net_if *iface, struct net_pkt *pkt)</argsstring>
        <name>net_lldp_recv_cb_t</name>
        <briefdescription>
<para>LLDP Receive packet callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Callback gets called upon receiving packet. It is responsible for freeing packet or indicating to the stack that it needs to free packet by returning correct net_verdict.</para>
<para>Returns:<itemizedlist>
<listitem><para>NET_DROP, if packet was invalid, rejected or we want the stack to free it. In this case the core stack will free the packet.</para>
</listitem><listitem><para>NET_OK, if the packet was accepted, in this case the ownership of the <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> goes to callback and core network stack will forget it. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="198" column="6" bodyfile="include/net/lldp.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lldp_1ga0efa1813c537dcf02e021db60049c284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_lldp_config</definition>
        <argsstring>(struct net_if *iface, const struct net_lldpdu *lldpdu)</argsstring>
        <name>net_lldp_config</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structnet__lldpdu" kindref="compound">net_lldpdu</ref> *</type>
          <declname>lldpdu</declname>
        </param>
        <briefdescription>
<para>Set the LLDP data unit for a network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lldpdu</parametername>
</parameternamelist>
<parameterdescription>
<para>LLDP data unit struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="181" column="5" declfile="include/net/lldp.h" declline="181" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__lldp_1ga9702175375a71eaab20f450291cb51ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_lldp_config_optional</definition>
        <argsstring>(struct net_if *iface, const uint8_t *tlv, size_t len)</argsstring>
        <name>net_lldp_config_optional</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>tlv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Set the Optional LLDP TLVs for a network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>LLDP optional TLVs following mandatory part </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the optional TLVs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="192" column="5" declfile="include/net/lldp.h" declline="192" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__lldp_1ga38f3eff9da2f06e10defddb1776cdb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_lldp_init</definition>
        <argsstring>(void)</argsstring>
        <name>net_lldp_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize LLDP engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="198" column="6" declfile="include/net/lldp.h" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lldp_1ga61845c96c65d6df83f422a68e31162cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_lldp_register_callback</definition>
        <argsstring>(struct net_if *iface, net_lldp_recv_cb_t cb)</argsstring>
        <name>net_lldp_register_callback</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="group__lldp_1ga1e9fb662d7cdfc3c4c68cfd0312987cf" kindref="member">net_lldp_recv_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register LLDP Rx callback function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt; 0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="224" column="5" declfile="include/net/lldp.h" declline="224" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__lldp_1gafde82841435942b1ce7cc91083c9a06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref></type>
        <definition>enum net_verdict net_lldp_recv</definition>
        <argsstring>(struct net_if *iface, struct net_pkt *pkt)</argsstring>
        <name>net_lldp_recv</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Parse LLDP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return the policy for network buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="234" column="17" declfile="include/net/lldp.h" declline="234" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__lldp_1ga961bc59567ffa2d5a4d21290d1d78407" prot="public" static="no">
        <name>net_lldp_set_lldpdu</name>
        <param><defname>iface</defname></param>
        <briefdescription>
<para>Set LLDP protocol data unit (LLDPDU) for the network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;0 if error, index in lldp array if iface is found there </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="246" column="10" bodyfile="include/net/lldp.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__lldp_1gafdd1b4cea9f560597c31a0e42d5341e0" prot="public" static="no">
        <name>net_lldp_unset_lldpdu</name>
        <param><defname>iface</defname></param>
        <briefdescription>
<para>Unset LLDP protocol data unit (LLDPDU) for the network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/lldp.h" line="257" column="10" bodyfile="include/net/lldp.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>LLDP definitions and helpers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
