<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__npf__eth__cond" kind="group">
    <compoundname>npf_eth_cond</compoundname>
    <title>Ethernet Filter Conditions</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__npf__eth__cond_1gad2141ad8d6639c9b92569d55130ca1b1" prot="public" static="no">
        <name>NPF_ETH_SRC_ADDR_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_src_addr_match, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;source address match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet source address matches any of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="332" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga228eaa3784f663d8f2e2711e26409043" prot="public" static="no">
        <name>NPF_ETH_SRC_ADDR_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_src_addr_unmatch, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;source address unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet source address matches none of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="349" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga3d22d687bcd56b7727c51c7bc7f36cac" prot="public" static="no">
        <name>NPF_ETH_DST_ADDR_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_dst_addr_match, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;destination address match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet destination address matches any of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="366" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga3b8a8a22eb992c0e02223f70723c3641" prot="public" static="no">
        <name>NPF_ETH_DST_ADDR_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.test.fn = npf_eth_dst_addr_unmatch, \
		.mask.addr = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;destination address unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet destination address matches none of the Ethernet addresses contained in the provided set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="383" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga0e06ebc4c9a1a960651be1ba89eeb2fd" prot="public" static="no">
        <name>NPF_ETH_SRC_ADDR_MASK_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <param><defname>...</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.mask.addr = { __VA_ARGS__ }, \
		.test.fn = npf_eth_src_addr_match, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;source address match with mask&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet source address matches any of the Ethernet addresses contained in the provided set after applying specified mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>up to 6 mask bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="401" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1ga7cf793af7b91eccc6e675ff19ed59a14" prot="public" static="no">
        <name>NPF_ETH_DST_ADDR_MASK_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_addr_array</defname></param>
        <param><defname>...</defname></param>
        <initializer>	struct npf_test_eth_addr _name = { \
		.addresses = (_addr_array), \
		.nb_addresses = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(_addr_array), \
		.mask.addr = { __VA_ARGS__ }, \
		.test.fn = npf_eth_dst_addr_match, \
	}</initializer>
        <briefdescription>
<para>Statically define a &quot;destination address match with mask&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para>This tests if the packet destination address matches any of the Ethernet addresses contained in the provided set after applying specified mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <computeroutput>struct net_eth_addr</computeroutput> items to test against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>up to 6 mask bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="419" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1gace7de72d4c64e128a825f28f94d8b1b2" prot="public" static="no">
        <name>NPF_ETH_TYPE_MATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	struct npf_test_eth_type _name = { \
		.type = <ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(_type), \
		.test.fn = npf_eth_type_match, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;Ethernet type match&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet type to match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="445" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__npf__eth__cond_1gab9bf6d58433e273220c5fab76f608545" prot="public" static="no">
        <name>NPF_ETH_TYPE_UNMATCH</name>
        <param><defname>_name</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	struct npf_test_eth_type _name = { \
		.type = <ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(_type), \
		.test.fn = npf_eth_type_unmatch, \
	}</initializer>
        <briefdescription>
<para>Statically define an &quot;Ethernet type unmatch&quot; packet filter condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet type to exclude </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt_filter.h" line="457" column="9" bodyfile="include/net/net_pkt_filter.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
