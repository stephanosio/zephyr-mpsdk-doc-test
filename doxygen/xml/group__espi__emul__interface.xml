<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__espi__emul__interface" kind="group">
    <compoundname>espi_emul_interface</compoundname>
    <title>eSPI Emulation Interface</title>
    <innerclass refid="structemul__espi__device__api" prot="public">emul_espi_device_api</innerclass>
    <innerclass refid="structespi__emul" prot="public">espi_emul</innerclass>
    <innerclass refid="structemul__espi__driver__api" prot="public">emul_espi_driver_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__espi__emul__interface_1gaba6a22b3e04ee000e32b98e97425a917" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* emul_espi_api_set_vw) (struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t level)</definition>
        <argsstring>)(struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t level)</argsstring>
        <name>emul_espi_api_set_vw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Passes eSPI virtual wires set request (virtual wire packet) to the emulator. The emulator updates the state (level) of its virtual wire.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vw</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of signal requested LOW(0) or HIGH(1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="46" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__espi__emul__interface_1ga2a6775ccf7f0a2f0ce468f73a4f7e399" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* emul_espi_api_get_vw) (struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t *level)</definition>
        <argsstring>)(struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t *level)</argsstring>
        <name>emul_espi_api_get_vw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Passes eSPI virtual wires get request (virtual wire packet) to the emulator. The emulator returns the state (level) of its virtual wire.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vw</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to be get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the signal to be get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="61" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__espi__emul__interface_1gaa9e27e6a744a73a13415e01fa2c09bca" prot="public" static="no">
        <type>struct <ref refid="structespi__emul" kindref="compound">espi_emul</ref> *(*</type>
        <definition>typedef struct espi_emul *(* emul_find_emul) (const struct device *dev, unsigned int chipsel)</definition>
        <argsstring>)(const struct device *dev, unsigned int chipsel)</argsstring>
        <name>emul_find_emul</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an emulator present on a eSPI bus</para>
<para>At present the function is used only to find an emulator of the host device. It may be useful in systems with the SPI flash chips.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulation controller device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chipsel</parametername>
</parameternamelist>
<parameterdescription>
<para>Chip-select value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emulator to use </para>
</simplesect>
<simplesect kind="return"><para>NULL if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="61" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__espi__emul__interface_1ga2abff7d857738254cc4a8a939264924f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* emul_trigger_event) (const struct device *dev, struct espi_event *evt)</definition>
        <argsstring>)(const struct device *dev, struct espi_event *evt)</argsstring>
        <name>emul_trigger_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Triggers an event on the emulator of eSPI controller side which causes calling specific callbacks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance of emulated eSPI controller </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be triggered</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="100" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__espi__emul__interface_1ga0acb298d9e04dfb210aa59f9454d208d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_emul_register</definition>
        <argsstring>(const struct device *dev, const char *name, struct espi_emul *emul)</argsstring>
        <name>espi_emul_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__emul" kindref="compound">espi_emul</ref> *</type>
          <declname>emul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register an emulated device on the controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device that will use the emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>User-friendly name for this emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 indicating success (always) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="142" column="5" declfile="include/drivers/espi_emul.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__emul__interface_1ga67deaf77a17682671ec28488ed3113fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emul_espi_host_send_vw</definition>
        <argsstring>(const struct device *espi_dev, enum espi_vwire_signal vw, uint8_t level)</argsstring>
        <name>emul_espi_host_send_vw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>espi_dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" kindref="member">espi_vwire_signal</ref></type>
          <declname>vw</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the eSPI virtual wire on the host side, which will trigger a proper event(and callbacks) on the emulated eSPI controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>espi_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulation controller device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vw</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the signal to be set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="156" column="5" declfile="include/drivers/espi_emul.h" declline="156" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__emul__interface_1ga16c67d1d52f94b7062144e2c2f45d15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emul_espi_host_port80_write</definition>
        <argsstring>(const struct device *espi_dev, uint32_t data)</argsstring>
        <name>emul_espi_host_port80_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>espi_dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform port80 write on the emulated host side, which will trigger a proper event(and callbacks) on the emulated eSPI controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>espi_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulation controller device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The date to be written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="169" column="5" declfile="include/drivers/espi_emul.h" declline="169" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__espi__emul__interface_1ga18fb55455f95a7f7ba93fdc49de2b9c0" prot="public" static="no">
        <name>EMUL_ESPI_HOST_CHIPSEL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="31" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>eSPI Emulation Interface </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
