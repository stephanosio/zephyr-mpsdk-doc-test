<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structk__work__queue__config" kind="struct" language="C++" prot="public">
    <compoundname>k_work_queue_config</compoundname>
    <includes refid="include_2kernel_8h" local="no">kernel.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structk__work__queue__config_1a0929d83372efff6798bc69bb7ca1eaaa" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* k_work_queue_config::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name to be given to the work queue thread.</para>
<para>If left null the thread will not have a name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3701" column="12" bodyfile="include/kernel.h" bodystart="3701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structk__work__queue__config_1afcf64d6e69d1ddfff8cbd749dafa4d13" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_work_queue_config::no_yield</definition>
        <argsstring></argsstring>
        <name>no_yield</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Control whether the work queue thread should yield between items.</para>
<para>Yielding between items helps guarantee the work queue thread does not starve other threads, including cooperative ones released by a work item. This is the default behavior.</para>
<para>Set this to <computeroutput>true</computeroutput> to prevent the work queue thread from yielding between items. This may be appropriate when a sequence of items should complete without yielding control. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="3715" column="6" bodyfile="include/kernel.h" bodystart="3715" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A structure holding optional configuration items for a work queue. </para>
    </briefdescription>
    <detaileddescription>
<para>This structure, and values it references, are not retained by <ref refid="group__workqueue__apis_1gadfc56554f9bfe7b52309d79660188593" kindref="member">k_work_queue_start()</ref>. </para>
    </detaileddescription>
    <location file="include/kernel.h" line="3696" column="1" bodyfile="include/kernel.h" bodystart="3696" bodyend="3716"/>
    <listofallmembers>
      <member refid="structk__work__queue__config_1a0929d83372efff6798bc69bb7ca1eaaa" prot="public" virt="non-virtual"><scope>k_work_queue_config</scope><name>name</name></member>
      <member refid="structk__work__queue__config_1afcf64d6e69d1ddfff8cbd749dafa4d13" prot="public" virt="non-virtual"><scope>k_work_queue_config</scope><name>no_yield</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
