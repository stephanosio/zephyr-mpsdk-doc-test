<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__shell__api" kind="group">
    <compoundname>shell_api</compoundname>
    <title>Shell API</title>
    <innerclass refid="structshell__cmd__entry" prot="public">shell_cmd_entry</innerclass>
    <innerclass refid="structshell__static__args" prot="public">shell_static_args</innerclass>
    <innerclass refid="structshell__static__entry" prot="public">shell_static_entry</innerclass>
    <innerclass refid="structshell__transport__api" prot="public">shell_transport_api</innerclass>
    <innerclass refid="structshell__transport" prot="public">shell_transport</innerclass>
    <innerclass refid="structshell__stats" prot="public">shell_stats</innerclass>
    <innerclass refid="structshell__backend__config__flags" prot="public">shell_backend_config_flags</innerclass>
    <innerclass refid="structshell__backend__ctx__flags" prot="public">shell_backend_ctx_flags</innerclass>
    <innerclass refid="unionshell__backend__cfg" prot="public">shell_backend_cfg</innerclass>
    <innerclass refid="unionshell__backend__ctx" prot="public">shell_backend_ctx</innerclass>
    <innerclass refid="structshell__ctx" prot="public">shell_ctx</innerclass>
    <innerclass refid="structshell" prot="public">shell</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__shell__api_1ga8773ed2570714ba4985108b1738d33a0" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_receive_state</name>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a201e367896f86499d317d9ec7b59612a" prot="public">
          <name>SHELL_RECEIVE_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0ab512e3269698524fd025433016b3ad65" prot="public">
          <name>SHELL_RECEIVE_ESC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a7378b6ecb1a51c53577db5a8eeda936a" prot="public">
          <name>SHELL_RECEIVE_ESC_SEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0afa2dde3374d3971266652cf48a4d13f7" prot="public">
          <name>SHELL_RECEIVE_TILDE_EXP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="475" column="1" bodyfile="include/shell/shell.h" bodystart="475" bodyend="480"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1gaf2c6ff9ef31dc06086fd1141763e6266" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_state</name>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a0fcbee7b51ec8d90e7d42a1b455360e6" prot="public">
          <name>SHELL_STATE_UNINITIALIZED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266adf8c97c3b6dacfbaf3ace4780cfe3dbd" prot="public">
          <name>SHELL_STATE_INITIALIZED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8a226ad5c1306dd8f491ad321d334b72" prot="public">
          <name>SHELL_STATE_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8d01930f8cbdeddda2bf47d0264c4a8b" prot="public">
          <name>SHELL_STATE_PANIC_MODE_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Panic activated. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a6423704f7a619e1bfed063cd7455ebfe" prot="public">
          <name>SHELL_STATE_PANIC_MODE_INACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Panic requested, not supported. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="485" column="1" bodyfile="include/shell/shell.h" bodystart="485" bodyend="491"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1gae77673d4c086f2f9312ceb7933745ee1" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_transport_evt</name>
        <enumvalue id="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1aa43ab5965bc3f2c964f206277ab3f1bb" prot="public">
          <name>SHELL_TRANSPORT_EVT_RX_RDY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1a6c78a3534128fac6366d9e5dfda81dfb" prot="public">
          <name>SHELL_TRANSPORT_EVT_TX_RDY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Shell transport event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="494" column="1" bodyfile="include/shell/shell.h" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1ga5cd015de5e7295483fa2cff7d54c2d21" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_signal</name>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a815c6760bfd5bba8813ea68964bf4713" prot="public">
          <name>SHELL_SIGNAL_RXRDY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ab8fe52f7b4f43c98dae5188a1dc8547a" prot="public">
          <name>SHELL_SIGNAL_LOG_MSG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ad5c07b5872f785b0731c8aaed0f81c3a" prot="public">
          <name>SHELL_SIGNAL_KILL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a7962ab077b49c816bb9337a9b1b343ed" prot="public">
          <name>SHELL_SIGNAL_TXDONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a6dc083b04447ff6ccb4ce4af4c43645e" prot="public">
          <name>SHELL_SIGNALS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="675" column="1" bodyfile="include/shell/shell.h" bodystart="675" bodyend="681"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1ga56bf30741f9ec7a6d94e5c18c2858948" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_flag</name>
        <enumvalue id="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948a343ee559d6259111dbab529a283b23ab" prot="public">
          <name>SHELL_FLAG_CRLF_DEFAULT</name>
          <initializer>= (1&lt;&lt;0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948ab6fec7b615b6de79e1d00d4117615446" prot="public">
          <name>SHELL_FLAG_OLF_CRLF</name>
          <initializer>= (1&lt;&lt;1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags for setting shell output newline sequence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="747" column="1" bodyfile="include/shell/shell.h" bodystart="747" bodyend="750"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__shell__api_1gafc042f32bac2fdd4cbde9f943e29b008" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_dynamic_get) (size_t idx, struct shell_static_entry *entry)</definition>
        <argsstring>)(size_t idx, struct shell_static_entry *entry)</argsstring>
        <name>shell_dynamic_get</name>
        <briefdescription>
<para>Shell dynamic command descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Function shall fill the received <ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref> structure with requested (idx) dynamic subcommand data. If there is more than one dynamic subcommand available, the function shall ensure that the returned commands: entry-&gt;syntax are sorted in alphabetical order. If idx exceeds the available dynamic subcommands, the function must write to entry-&gt;syntax NULL value. This will indicate to the shell module that there are no more dynamic commands to read. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="87" column="9" bodyfile="include/shell/shell.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* shell_cmd_handler) (const struct shell *shell, size_t argc, char **argv)</definition>
        <argsstring>)(const struct shell *shell, size_t argc, char **argv)</argsstring>
        <name>shell_cmd_handler</name>
        <briefdescription>
<para>Shell command handler prototype. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful command execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Help printed and command not executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument validation failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOEXEC</parametername>
</parameternamelist>
<parameterdescription>
<para>Command not executed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="141" column="9" bodyfile="include/shell/shell.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1gae697fc40bc727c65224d7fe73d4b1fbc" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* shell_dict_cmd_handler) (const struct shell *shell, size_t argc, char **argv, void *data)</definition>
        <argsstring>)(const struct shell *shell, size_t argc, char **argv, void *data)</argsstring>
        <name>shell_dict_cmd_handler</name>
        <briefdescription>
<para>Shell dictionary command handler prototype. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful command execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Help printed and command not executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument validation failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOEXEC</parametername>
</parameternamelist>
<parameterdescription>
<para>Command not executed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="157" column="9" bodyfile="include/shell/shell.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1ga265807c2d8eba7b9ea633968627e085d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_transport_handler_t) (enum shell_transport_evt evt, void *context)</definition>
        <argsstring>)(enum shell_transport_evt evt, void *context)</argsstring>
        <name>shell_transport_handler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="499" column="9" bodyfile="include/shell/shell.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_uninit_cb_t) (const struct shell *shell, int res)</definition>
        <argsstring>)(const struct shell *shell, int res)</argsstring>
        <name>shell_uninit_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="503" column="9" bodyfile="include/shell/shell.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_bypass_cb_t) (const struct shell *shell, uint8_t *data, size_t len)</definition>
        <argsstring>)(const struct shell *shell, uint8_t *data, size_t len)</argsstring>
        <name>shell_bypass_cb_t</name>
        <briefdescription>
<para>Bypass callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw data from transport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="511" column="9" bodyfile="include/shell/shell.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__shell__api_1gaddf27615ed72440ecb63aa1d84962c82" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structlog__backend__api" kindref="compound">log_backend_api</ref></type>
        <definition>const struct log_backend_api log_backend_shell_api</definition>
        <argsstring></argsstring>
        <name>log_backend_shell_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="742" column="35" declfile="include/shell/shell.h" declline="742" declcolumn="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__shell__api_1ga571db3aa3e024a09e82b117a74d6f248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device * shell_device_lookup</definition>
        <argsstring>(size_t idx, const char *prefix)</argsstring>
        <name>shell_device_lookup</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Get by index a device that matches . </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used, for example, to identify I2C_1 as the second I2C device.</para>
<para>Devices that failed to initialize or do not have a non-empty name are excluded from the candidates for a match.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the device number starting from zero.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>optional name prefix used to restrict candidate devices. Indexing is done relative to devices with names that start with this text. Pass null if no prefix match is required. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="126" column="19" declfile="include/shell/shell.h" declline="126" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga3dc80793e145c56bb07754fc2f292ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_init</definition>
        <argsstring>(const struct shell *shell, const void *transport_config, struct shell_backend_config_flags cfg_flags, bool log_backend, uint32_t init_log_level)</argsstring>
        <name>shell_init</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>transport_config</declname>
        </param>
        <param>
          <type>struct <ref refid="structshell__backend__config__flags" kindref="compound">shell_backend_config_flags</ref></type>
          <declname>cfg_flags</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>log_backend</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>init_log_level</declname>
        </param>
        <briefdescription>
<para>Function for initializing a transport layer and internal shell state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">transport_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Transport configuration during initialization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cfg_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial backend configuration flags. Shell will copy this data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structlog__backend" kindref="compound">log_backend</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the console will be used as logger backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">init_log_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Default severity level for the logger.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="838" column="5" declfile="include/shell/shell.h" declline="838" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga240cb01650dee2b555056c08c4242d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_uninit</definition>
        <argsstring>(const struct shell *shell, shell_uninit_cb_t cb)</argsstring>
        <name>shell_uninit</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" kindref="member">shell_uninit_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Uninitializes the transport layer and the internal shell state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback called when uninitialization is completed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="848" column="6" declfile="include/shell/shell.h" declline="848" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gac00d3479289798d38fbf93cf775c4736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_start</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_start</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Function for starting shell processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="857" column="5" declfile="include/shell/shell.h" declline="857" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gae432203ca2adc2df0f06e6f43fd78b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_stop</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_stop</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Function for stopping shell processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to shell instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="866" column="5" declfile="include/shell/shell.h" declline="866" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga48aa8e7aff70900b1f0ea3d4f173773d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_fprintf</definition>
        <argsstring>(const struct shell *shell, enum shell_vt100_color color, const char *fmt,...)</argsstring>
        <name>shell_fprintf</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>enum <ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2" kindref="member">shell_vt100_color</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>printf-like function which sends formatted data stream to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used from the command handler or from threads, but not from an interrupt context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">color</parametername>
</parameternamelist>
<parameterdescription>
<para>Printed text color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="904" column="7" declfile="include/shell/shell.h" declline="904" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gab98c82bbebbff48c173f347d66078bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_vfprintf</definition>
        <argsstring>(const struct shell *shell, enum shell_vt100_color color, const char *fmt, va_list args)</argsstring>
        <name>shell_vfprintf</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>enum <ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2" kindref="member">shell_vt100_color</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>vprintf-like function which sends formatted data stream to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used from the command handler or from threads, but not from an interrupt context. It is similar to <ref refid="group__shell__api_1ga48aa8e7aff70900b1f0ea3d4f173773d" kindref="member">shell_fprintf()</ref> but takes a va_list instead of variable arguments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">color</parametername>
</parameternamelist>
<parameterdescription>
<para>Printed text color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="920" column="6" declfile="include/shell/shell.h" declline="920" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gac588a2c9af247e46cb0065fee36a14b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_hexdump_line</definition>
        <argsstring>(const struct shell *shell, unsigned int offset, const uint8_t *data, size_t len)</argsstring>
        <name>shell_hexdump_line</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Print a line of data in hexadecimal format. </para>
        </briefdescription>
        <detaileddescription>
<para>Each line shows the offset, bytes and then ASCII representation.</para>
<para>For example:</para>
<para>00008010: 20 25 00 20 2f 48 00 08 80 05 00 20 af 46 00 | %. /H.. ... .F. |</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset to show for this line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="938" column="6" declfile="include/shell/shell.h" declline="938" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga838b534ffc9d0bda75c811d591832656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_hexdump</definition>
        <argsstring>(const struct shell *shell, const uint8_t *data, size_t len)</argsstring>
        <name>shell_hexdump</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Print data in hexadecimal format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="948" column="6" declfile="include/shell/shell.h" declline="948" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gafcb014602bbe6b6cd2ab8e2e92659cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_process</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_process</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Process function, which should be executed when data is ready in the transport interface. To be used if shell thread is disabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1004" column="6" declfile="include/shell/shell.h" declline="1004" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga0c0989b142807696c59979445f38ba32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_prompt_change</definition>
        <argsstring>(const struct shell *shell, const char *prompt)</argsstring>
        <name>shell_prompt_change</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <briefdescription>
<para>Change displayed shell prompt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>New shell prompt.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 Success. </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL Pointer to new prompt is not correct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1015" column="5" declfile="include/shell/shell.h" declline="1015" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gaae64c1946f852b18e4745b6fe83a979a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_help</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_help</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Prints the current command help. </para>
        </briefdescription>
        <detaileddescription>
<para>Function will print a help string with: the currently entered command and subcommands (if they exist).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1025" column="6" declfile="include/shell/shell.h" declline="1025" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga20d72c016e6735e9dac5909628e4791d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_execute_cmd</definition>
        <argsstring>(const struct shell *shell, const char *cmd)</argsstring>
        <name>shell_execute_cmd</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Execute command. </para>
        </briefdescription>
        <detaileddescription>
<para>Pass command line to shell to execute.</para>
<para>Note: This by no means makes any of the commands a stable interface, so this function should only be used for debugging/diagnostic.</para>
<para>This function must not be called from shell command context!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. It can be NULL when the <verbatim>embed:rst:inline :kconfig:`CONFIG_SHELL_BACKEND_DUMMY` </verbatim> option is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to be executed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1047" column="5" declfile="include/shell/shell.h" declline="1047" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga768c606f2d50f24e9b607ba0a341686d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_set_root_cmd</definition>
        <argsstring>(const char *cmd)</argsstring>
        <name>shell_set_root_cmd</name>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Set root command for all shell instances. </para>
        </briefdescription>
        <detaileddescription>
<para>It allows setting from the code the root command. It is an equivalent of calling select command with one of the root commands as the argument (e.g &quot;select log&quot;) except it sets command for all shell instances.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>String with one of the root commands or null pointer to reset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if root command is set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid root command is provided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1060" column="5" declfile="include/shell/shell.h" declline="1060" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga2d05dd8a3cbea0eb0df8b422a7fb6a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_set_bypass</definition>
        <argsstring>(const struct shell *shell, shell_bypass_cb_t bypass)</argsstring>
        <name>shell_set_bypass</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" kindref="member">shell_bypass_cb_t</ref></type>
          <declname>bypass</declname>
        </param>
        <briefdescription>
<para>Set bypass callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Bypass callback is called whenever data is received. Shell is bypassed and data is passed directly to the callback. Use null to disable bypass functionality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bypass</parametername>
</parameternamelist>
<parameterdescription>
<para>Bypass callback or null to disable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1070" column="6" declfile="include/shell/shell.h" declline="1070" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gaa1c092b0afb5119f8e3959f18fcf307a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_insert_mode_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_insert_mode_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control text insert mode. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Insert mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1082" column="5" declfile="include/shell/shell.h" declline="1082" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga2dd3529a39b79d4f3f64b52f05e164c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_use_colors_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_use_colors_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether terminal output uses colored syntax. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Color mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1095" column="5" declfile="include/shell/shell.h" declline="1095" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gae56226448f757b4aa7b1748d482c23c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_echo_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_echo_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether user input is echoed back. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Echo mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1107" column="5" declfile="include/shell/shell.h" declline="1107" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gacb219bcc8e526065c27a42c08a6e41e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_obscure_set</definition>
        <argsstring>(const struct shell *shell, bool obscure)</argsstring>
        <name>shell_obscure_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>obscure</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether user input is obscured with asterisks <ndash/> useful for implementing passwords. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">obscure</parametername>
</parameternamelist>
<parameterdescription>
<para>Obscure mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1120" column="5" declfile="include/shell/shell.h" declline="1120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga622ef46b3ca2b494c732744e3c1adf3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_mode_delete_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_mode_delete_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether the delete key backspaces or deletes. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Delete mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1133" column="5" declfile="include/shell/shell.h" declline="1133" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" prot="public" static="no">
        <name>SHELL_CMD_ARG_REGISTER</name>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mandatory</defname></param>
        <param><defname>optional</defname></param>
        <initializer>	static const struct <ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref> <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_shell_, syntax) = \
	<ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>(syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, mandatory, optional); \
	static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(shell_cmd_, syntax)   \
	__attribute__ ((section(&quot;.&quot;					   \
			<ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(shell_root_cmd_, syntax)))))	   \
	__attribute__((used)) = {					   \
		.is_dynamic = <ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>,					   \
		.u = {.entry = &amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_shell_, syntax)}		   \
	}</initializer>
        <briefdescription>
<para>Macro for defining and adding a root command (level 0) with required number of arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Each root command shall have unique syntax. If a command will be called with wrong number of arguments shell will print an error message and command handler will not be called.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mandatory</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">optional</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="187" column="9" bodyfile="include/shell/shell.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga6a3ed4ea9051ac138d22cc39134fb2e5" prot="public" static="no">
        <name>SHELL_COND_CMD_ARG_REGISTER</name>
        <param><defname>flag</defname></param>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mandatory</defname></param>
        <param><defname>optional</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(\
		<ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, \
		(\
		<ref refid="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" kindref="member">SHELL_CMD_ARG_REGISTER</ref>(syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, \
					mandatory, optional) \
		), \
		(\
		static <ref refid="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" kindref="member">shell_cmd_handler</ref> dummy_##syntax##_handler __unused = \
								<ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>;\
		static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> *dummy_subcmd_##syntax \
			__unused = subcmd\
		)\
	)</initializer>
        <briefdescription>
<para>Macro for defining and adding a conditional root command (level 0) with required number of arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" kindref="member">SHELL_CMD_ARG_REGISTER</ref> for details.</para>
</simplesect>
Macro can be used to create a command which can be conditionally present. It is and alternative to #ifdefs around command registration and command handler. If command is disabled handler and subcommands are removed from the application.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mandatory</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">optional</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="219" column="9" bodyfile="include/shell/shell.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga06060b98eb505300a3dcc8f922a8e7ab" prot="public" static="no">
        <name>SHELL_CMD_REGISTER</name>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" kindref="member">SHELL_CMD_ARG_REGISTER</ref>(syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, 0, 0)</initializer>
        <briefdescription>
<para>Macro for defining and adding a root command (level 0) with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>All root commands must have different name.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="244" column="9" bodyfile="include/shell/shell.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga62782121ece6af076407c94935ec94e4" prot="public" static="no">
        <name>SHELL_COND_CMD_REGISTER</name>
        <param><defname>flag</defname></param>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6a3ed4ea9051ac138d22cc39134fb2e5" kindref="member">SHELL_COND_CMD_ARG_REGISTER</ref>(<ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, 0, 0)</initializer>
        <briefdescription>
<para>Macro for defining and adding a conditional root command (level 0) with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1ga6a3ed4ea9051ac138d22cc39134fb2e5" kindref="member">SHELL_COND_CMD_ARG_REGISTER</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="260" column="9" bodyfile="include/shell/shell.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gacb2d1a969368efdbeec704ee6e962dee" prot="public" static="no">
        <name>SHELL_STATIC_SUBCMD_SET_CREATE</name>
        <param><defname>name</defname></param>
        <param><defname>...</defname></param>
        <initializer>	static const struct <ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref> shell_##name[] = {	\
		__VA_ARGS__						\
	};								\
	static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> name = {			\
		.is_dynamic = <ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>,					\
		.u = { .entry = shell_##name }				\
	}</initializer>
        <briefdescription>
<para>Macro for creating a subcommand set. It must be used outside of any function body. </para>
        </briefdescription>
        <detaileddescription>
<para>Example usage: SHELL_STATIC_SUBCMD_SET_CREATE( foo, <ref refid="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" kindref="member">SHELL_CMD(abc, ...)</ref>, <ref refid="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" kindref="member">SHELL_CMD(def, ...)</ref>, SHELL_SUBCMD_SET_END )</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the subcommand set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of commands created with <ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref> or or <ref refid="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" kindref="member">SHELL_CMD</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="279" column="9" bodyfile="include/shell/shell.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga4f7a3432f76541eb226a426507e10174" prot="public" static="no">
        <name>SHELL_SUBCMD_SET_END</name>
        <initializer>{NULL}</initializer>
        <briefdescription>
<para>Define ending subcommands set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="292" column="9" bodyfile="include/shell/shell.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gafa6d91c36c36eb68d3f241ed0c7e7131" prot="public" static="no">
        <name>SHELL_DYNAMIC_CMD_CREATE</name>
        <param><defname>name</defname></param>
        <param><defname>get</defname></param>
        <initializer>	static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> name = {	\
		.is_dynamic = <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>,			\
		.u = { .dynamic_get = get }		\
	}</initializer>
        <briefdescription>
<para>Macro for creating a dynamic entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dynamic entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the function returning dynamic commands array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="300" column="9" bodyfile="include/shell/shell.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" prot="public" static="no">
        <name>SHELL_CMD_ARG</name>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mand</defname></param>
        <param><defname>opt</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(1, syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, mand, opt)</initializer>
        <briefdescription>
<para>Initializes a shell command with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a command will be called with wrong number of arguments shell will print an error message and command handler will not be called.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mand</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="319" column="9" bodyfile="include/shell/shell.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" prot="public" static="no">
        <name>SHELL_COND_CMD_ARG</name>
        <param><defname>flag</defname></param>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mand</defname></param>
        <param><defname>opt</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>), syntax, subcmd, help, \
			  <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, mand, opt)</initializer>
        <briefdescription>
<para>Initializes a conditional shell command with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>. Based on the <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, creates a valid entry or an empty command which is ignored by the <ref refid="structshell" kindref="compound">shell</ref>. It is an alternative to #ifdefs around command registration and command <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>. However, empty structure is present in the flash even if command is disabled (subcommands and <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref> are removed). Macro internally handles case if <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref> is not defined so <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref> must be provided without any wrapper, e.g.: <ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG(CONFIG_FOO, ...)</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mand</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="341" column="9" bodyfile="include/shell/shell.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" prot="public" static="no">
        <name>SHELL_EXPR_CMD_ARG</name>
        <param><defname>_expr</defname></param>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <param><defname>_mand</defname></param>
        <param><defname>_opt</defname></param>
        <initializer>	{ \
		.syntax = (_expr) ? (const char *)<ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(_syntax) : &quot;&quot;, \
		.help  = (_expr) ? (const char *)_help : NULL, \
		.subcmd = (const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> *)((_expr) ? \
				_subcmd : NULL), \
		.<ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref> = (<ref refid="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" kindref="member">shell_cmd_handler</ref>)((_expr) ? _handler : NULL), \
		.args = { .mandatory = _mand, .optional = _opt} \
	}</initializer>
        <briefdescription>
<para>Initializes a conditional shell command with arguments if expression gives non-zero result at compile time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>. Based on the expression, creates a valid entry or an empty command which is ignored by the <ref refid="structshell" kindref="compound">shell</ref>. It should be used instead of <ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG</ref> if condition is not a single configuration <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, e.g.: <ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED(CONFIG_FOO)</ref> &amp;&amp; <ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED(CONFIG_FOO_SETTING_1)</ref>, ...)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_mand</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_opt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="365" column="9" bodyfile="include/shell/shell.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" prot="public" static="no">
        <name>SHELL_CMD</name>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>(_syntax, _subcmd, _help, _handler, 0, 0)</initializer>
        <briefdescription>
<para>Initializes a shell command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="383" column="9" bodyfile="include/shell/shell.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga6e27d86443067df4792623f1a04d1ee1" prot="public" static="no">
        <name>SHELL_COND_CMD</name>
        <param><defname>_flag</defname></param>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG</ref>(_flag, _syntax, _subcmd, _help, _handler, 0, 0)</initializer>
        <briefdescription>
<para>Initializes a conditional shell command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="398" column="9" bodyfile="include/shell/shell.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga59a835edbd7db3acdcb204248c0cf5fd" prot="public" static="no">
        <name>SHELL_EXPR_CMD</name>
        <param><defname>_expr</defname></param>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(_expr, _syntax, _subcmd, _help, _handler, 0, 0)</initializer>
        <briefdescription>
<para>Initializes shell command if expression gives non-zero result at compile time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time expression. Command is present only if expression is non-zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="414" column="9" bodyfile="include/shell/shell.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gaf33b1b20caccad1effe6733603259a00" prot="public" static="no">
        <name>SHELL_CMD_DICT_CREATE</name>
        <param><defname>_data</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __DEBRACKET _data), NULL, NULL,	\
		<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(cmd_dict_, <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_handler, _)),	\
			<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __DEBRACKET _data)), 1, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="428" column="9" bodyfile="include/shell/shell.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga401e19cf8ec8601b8a96fe8e95a2b4d2" prot="public" static="no">
        <name>SHELL_SUBCMD_DICT_SET_CREATE</name>
        <param><defname>_name</defname></param>
        <param><defname>_handler</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga1a2b2aa21d7cc37f33e6a62abd2ae340" kindref="member">FOR_EACH_FIXED_ARG</ref>(Z_SHELL_CMD_DICT_HANDLER_CREATE, (),		\
			   _handler, __VA_ARGS__)			\
	<ref refid="group__shell__api_1gacb2d1a969368efdbeec704ee6e962dee" kindref="member">SHELL_STATIC_SUBCMD_SET_CREATE</ref>(_name,				\
		<ref refid="group__sys-util_1ga1a2b2aa21d7cc37f33e6a62abd2ae340" kindref="member">FOR_EACH_FIXED_ARG</ref>(<ref refid="group__shell__api_1gaf33b1b20caccad1effe6733603259a00" kindref="member">SHELL_CMD_DICT_CREATE</ref>, (,), _handler, __VA_ARGS__),	\
		<ref refid="group__shell__api_1ga4f7a3432f76541eb226a426507e10174" kindref="member">SHELL_SUBCMD_SET_END</ref>					\
	)</initializer>
        <briefdescription>
<para>Initializes shell dictionary commands. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a special kind of static commands. Dictionary commands can be used every time you want to use a pair: (string &lt;-&gt; corresponding data) in a command handler. The string is usually a verbal description of a given data. The idea is to use the string as a command syntax that can be prompted by the shell and corresponding data can be used to process the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dictionary subcommand set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handler common for all dictionary commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__shell__api_1gae697fc40bc727c65224d7fe73d4b1fbc" kindref="member">shell_dict_cmd_handler</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary pairs: (command_syntax, value). Value will be passed to the _handler as user data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: static int my_handler(const struct shell *shell, size_t argc, char **argv, void *data) { int val = (int)data;</para>
<para>shell_print(shell, &quot;(syntax, value) : (%s, %d)&quot;, argv[0], val); return 0; }</para>
<para>SHELL_SUBCMD_DICT_SET_CREATE(sub_dict_cmds, my_handler, (value_0, 0), (value_1, 1), (value_2, 2), (value_3, 3) ); <ref refid="group__shell__api_1ga06060b98eb505300a3dcc8f922a8e7ab" kindref="member">SHELL_CMD_REGISTER(dictionary, &amp;sub_dict_cmds, NULL, NULL)</ref>; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="463" column="9" bodyfile="include/shell/shell.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga7e522b107d4e8b687816a86f14b9a885" prot="public" static="no">
        <name>SHELL_DEFAULT_BACKEND_CONFIG_FLAGS</name>
        <initializer>{						\
	.insert_mode	= 0,			\
	.echo		= 1,			\
	.obscure	= 0,			\
	.mode_delete	= 1,			\
	.use_colors	= 1,			\
	.use_vt100	= 1,			\
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="636" column="9" bodyfile="include/shell/shell.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga158405143b49e4888cb135fec83ad22c" prot="public" static="no">
        <name>SHELL_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_prompt</defname></param>
        <param><defname>_transport_iface</defname></param>
        <param><defname>_log_queue_size</defname></param>
        <param><defname>_log_timeout</defname></param>
        <param><defname>_shell_flag</defname></param>
        <initializer>	static const struct <ref refid="structshell" kindref="compound">shell</ref> _name;				      \
	static struct <ref refid="structshell__ctx" kindref="compound">shell_ctx</ref> <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_name, _ctx);			      \
	static <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> _name##_out_buffer[<ref refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" kindref="member">CONFIG_SHELL_PRINTF_BUFF_SIZE</ref>];     \
	Z_SHELL_LOG_BACKEND_DEFINE(_name, _name##_out_buffer,		      \
				 <ref refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" kindref="member">CONFIG_SHELL_PRINTF_BUFF_SIZE</ref>,		      \
				 _log_queue_size, _log_timeout);	      \
	Z_SHELL_HISTORY_DEFINE(_name##_history, <ref refid="shell_2shell_8h_1ab194ada3483ec28f093fd9521b19265e" kindref="member">CONFIG_SHELL_HISTORY_BUFFER</ref>); \
	Z_SHELL_FPRINTF_DEFINE(_name##_fprintf, &amp;_name, _name##_out_buffer,   \
			     <ref refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" kindref="member">CONFIG_SHELL_PRINTF_BUFF_SIZE</ref>,		      \
			     <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>, z_shell_print_stream);		      \
	<ref refid="log__instance_8h_1ad18f1e8ffbef38f285f70d8005fa144f" kindref="member">LOG_INSTANCE_REGISTER</ref>(<ref refid="structshell" kindref="compound">shell</ref>, _name, CONFIG_SHELL_LOG_LEVEL);	      \
	Z_SHELL_STATS_DEFINE(_name);					      \
	static <ref refid="threads_2thread__stack_2src_2main_8c_1abf20d8da7b5829da0eb6ccb4dae81b37" kindref="member">K_KERNEL_STACK_DEFINE</ref>(_name##_stack, CONFIG_SHELL_STACK_SIZE); \
	static struct <ref refid="structk__thread" kindref="compound">k_thread</ref> _name##_thread;				      \
	static const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structshell" kindref="compound">shell</ref>, _name) = {		      \
		.default_prompt = _prompt,				      \
		.iface = _transport_iface,				      \
		.ctx = &amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_name, _ctx),				      \
		.history = <ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_SHELL_HISTORY) ?		      \
				&amp;_name##_history : NULL,		      \
		.<ref refid="group__shell__api_1ga56bf30741f9ec7a6d94e5c18c2858948" kindref="member">shell_flag</ref> = _shell_flag,				      \
		.fprintf_ctx = &amp;_name##_fprintf,			      \
		.stats = Z_SHELL_STATS_PTR(_name),			      \
		.<ref refid="structlog__backend" kindref="compound">log_backend</ref> = Z_SHELL_LOG_BACKEND_PTR(_name),		      \
		<ref refid="log__instance_8h_1a7389934373419d74129407ffba7ea3e3" kindref="member">LOG_INSTANCE_PTR_INIT</ref>(log, <ref refid="structshell" kindref="compound">shell</ref>, _name)		      \
		.thread_name = <ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(_name),			      \
		.<ref refid="timeout__order_8c_1a2ff5187d48101eb303964e1b8983beb4" kindref="member">thread</ref> = &amp;_name##_thread,				      \
		.<ref refid="test__stack__fail_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref> = _name##_stack					      \
	}</initializer>
        <briefdescription>
<para>Macro for defining a shell instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell default prompt string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_transport_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the transport interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_log_queue_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Logger processing queue size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_log_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Logger thread timeout in milliseconds on full log queue. If queue is full logger thread is blocked for given amount of time before log message is dropped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_shell_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell output newline sequence. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="794" column="9" bodyfile="include/shell/shell.h" bodystart="793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga4c3a7db0c2bdbf36bbf72302a04bb44d" prot="public" static="no">
        <name>SHELL_NORMAL</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2a32de6063c44948beeb8501fed9b7d18e" kindref="member">SHELL_VT100_COLOR_DEFAULT</ref></initializer>
        <briefdescription>
<para>Terminal default text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="871" column="9" bodyfile="include/shell/shell.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gaac0ea96fbb5885432dca93174c9ad4e6" prot="public" static="no">
        <name>SHELL_INFO</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2ac6fce9bc89ceb0043697b26cca380c8a" kindref="member">SHELL_VT100_COLOR_GREEN</ref></initializer>
        <briefdescription>
<para>Green text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="876" column="9" bodyfile="include/shell/shell.h" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gacc7c6e7b1fc65cc350353cc166da528b" prot="public" static="no">
        <name>SHELL_OPTION</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2a618a6789463b1980f1086ee128c65972" kindref="member">SHELL_VT100_COLOR_CYAN</ref></initializer>
        <briefdescription>
<para>Cyan text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="881" column="9" bodyfile="include/shell/shell.h" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga118dd6829e092423a85e2b6de07f8dd3" prot="public" static="no">
        <name>SHELL_WARNING</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2adb8fbc39eddceb95f523eed8d5c5bf7d" kindref="member">SHELL_VT100_COLOR_YELLOW</ref></initializer>
        <briefdescription>
<para>Yellow text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="886" column="9" bodyfile="include/shell/shell.h" bodystart="886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga7664f5e184e9b41ac92e033f7b8d885d" prot="public" static="no">
        <name>SHELL_ERROR</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2a6f6be6e431dc8e905c5734b4e9c32af4" kindref="member">SHELL_VT100_COLOR_RED</ref></initializer>
        <briefdescription>
<para>Red text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="891" column="9" bodyfile="include/shell/shell.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga9382959c41fe6850c2daa51306b3c5fd" prot="public" static="no">
        <name>shell_info</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1gaac0ea96fbb5885432dca93174c9ad4e6" kindref="member">SHELL_INFO</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print info message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="959" column="9" bodyfile="include/shell/shell.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga3126019b2100d1ccb2d4dc5efb7d8228" prot="public" static="no">
        <name>shell_print</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1ga4c3a7db0c2bdbf36bbf72302a04bb44d" kindref="member">SHELL_NORMAL</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print normal message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="971" column="9" bodyfile="include/shell/shell.h" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga3d886cfd7b4340b2e71a92bd7c4534d9" prot="public" static="no">
        <name>shell_warn</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1ga118dd6829e092423a85e2b6de07f8dd3" kindref="member">SHELL_WARNING</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print warning message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="983" column="9" bodyfile="include/shell/shell.h" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga408141c02209a9549cb9063f24ef3731" prot="public" static="no">
        <name>shell_error</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1ga7664f5e184e9b41ac92e033f7b8d885d" kindref="member">SHELL_ERROR</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print error message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="995" column="9" bodyfile="include/shell/shell.h" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga3be3ecccd6ce1954883c5959c39c7927" prot="public" static="no">
        <name>SHELL_CMD_HELP_PRINTED</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1028" column="9" bodyfile="include/shell/shell.h" bodystart="1028" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Shell API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
