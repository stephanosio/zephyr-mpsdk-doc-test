<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="device_8h" kind="file" language="C++">
    <compoundname>device.h</compoundname>
    <includes refid="init_8h" local="no">init.h</includes>
    <includes refid="sections_8h" local="no">linker/sections.h</includes>
    <includes refid="device__mmio_8h" local="no">sys/device_mmio.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes local="no">device_extern.h</includes>
    <includes local="no">syscalls/device.h</includes>
    <incdepgraph>
      <node id="51">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="39">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="38">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="1">
        <label>include/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="4">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="22">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="11">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="63">
        <label>sys/device_mmio.h</label>
        <link refid="device__mmio_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>sys/mem_manage.h</label>
        <link refid="mem__manage_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>sys/sys_io.h</label>
        <link refid="sys_2sys__io_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="14">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="3">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="59">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="61">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="37">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="62">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="54">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="26">
        <label>alloca.h</label>
      </node>
      <node id="41">
        <label>arch/cpu.h</label>
      </node>
      <node id="67">
        <label>device_extern.h</label>
      </node>
      <node id="60">
        <label>kernel.h</label>
      </node>
      <node id="20">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="68">
        <label>syscalls/device.h</label>
      </node>
      <node id="57">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="65">
        <label>syscalls/mem_manage.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structdevice__state" prot="public">device_state</innerclass>
    <innerclass refid="structdevice" prot="public">device</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__device__model_1ga5f1feab331ee737141f418030902aab0" prot="public" static="no">
        <name>DEVICE_HANDLE_SEP</name>
        <initializer><ref refid="stdint_8h_1ad4e9955955b27624963643eac448118a" kindref="member">INT16_MIN</ref></initializer>
        <briefdescription>
<para>Flag value used in lists of device handles to separate distinct groups. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the minimum value for the device_handle_t type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="60" column="9" bodyfile="include/device.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1gab83f6fdc3d5d6e68facad0ddc9f3e763" prot="public" static="no">
        <name>DEVICE_HANDLE_ENDS</name>
        <initializer><ref refid="stdint_8h_1ac58f2c111cc9989c86db2a7dc4fd84ca" kindref="member">INT16_MAX</ref></initializer>
        <briefdescription>
<para>Flag value used in lists of device handles to indicate the end of the list. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the maximum value for the device_handle_t type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="67" column="9" bodyfile="include/device.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga4dd918c3a59b8afa185a4851165d2ca0" prot="public" static="no">
        <name>DEVICE_HANDLE_NULL</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Flag value used to identify an unknown device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="70" column="9" bodyfile="include/device.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga51d735464c6c80e86ebae96b0b67947b" prot="public" static="no">
        <name>DEVICE_NAME_GET</name>
        <param><defname>name</defname></param>
        <initializer>_CONCAT(__device_, name)</initializer>
        <briefdescription>
<para>Expands to the name of a global device object. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the full name of a device object symbol created by <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref>, using the dev_name provided to <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref>. This is the name of the global variable storing the device structure, not a pointer to the string in the device&apos;s <computeroutput>name</computeroutput> field.</para>
<para>It is meant to be used for declaring extern symbols pointing to device objects before using the DEVICE_GET macro to get the device object.</para>
<para>This macro is normally only useful within device driver source code. In other situations, you are probably looking for <ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The same <computeroutput>dev_name</computeroutput> token given to <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The full name of the device object defined by <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="96" column="9" bodyfile="include/device.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga42092d245664c3d59c30ceb4776bd642" prot="public" static="no">
        <name>SYS_DEVICE_DEFINE</name>
        <param><defname>drv_name</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>level</defname></param>
        <param><defname>prio</defname></param>
        <initializer>	__DEPRECATED_MACRO <ref refid="early__sleep_2src_2main_8c_1a080adab9e7b88edfe90c6d2115d9d06e" kindref="member">SYS_INIT</ref>(init_fn, level, prio)</initializer>
        <briefdescription>
<para>Run an initialization function at boot at specified priority. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>A string name for the pseudo-device (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the function which should run at boot time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization level to run the function in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Function&apos;s priority within its initialization level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="110" column="9" bodyfile="include/device.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1gad08683c204de0996ca62b23813947009" prot="public" static="no">
        <name>DEVICE_DEFINE</name>
        <param><defname>dev_name</defname></param>
        <param><defname>drv_name</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_device</defname></param>
        <param><defname>data_ptr</defname></param>
        <param><defname>cfg_ptr</defname></param>
        <param><defname>level</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api_ptr</defname></param>
        <initializer>	Z_DEVICE_STATE_DEFINE(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name) \
	Z_DEVICE_DEFINE(<ref refid="group__devicetree-generic-id_1ga710cc4455dd7e738f43f750153163855" kindref="member">DT_INVALID_NODE</ref>, dev_name, drv_name, init_fn,	\
			pm_device,					\
			data_ptr, cfg_ptr, level, prio, api_ptr,	\
			&amp;Z_DEVICE_STATE_NAME(dev_name))</initializer>
        <briefdescription>
<para>Create a device object and set it up for boot time initialization. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines a <computeroutput>struct device</computeroutput> that is automatically configured by the kernel during system initialization. This macro should only be used when the device is not being allocated from a devicetree node. If you are allocating a device from a devicetree node, use <ref refid="group__device__model_1gaac590af7705a3223968164406a483548" kindref="member">DEVICE_DT_DEFINE()</ref> or <ref refid="group__device__model_1gada5ba4aca9e0662ccebb2232c7256419" kindref="member">DEVICE_DT_INST_DEFINE()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_name</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique token which is used in the name of the global device structure as a C identifier.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drv_name</parametername>
</parameternamelist>
<parameterdescription>
<para>A string name for the device, which will be stored in the device structure&apos;s <computeroutput>name</computeroutput> field. This name can be used to look up the device with <ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref>. This must be less than Z_DEVICE_MAX_NAME_LEN characters (including terminating NUL) in order to be looked up from user mode.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s initialization function, which will be run by the kernel during system initialization.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s power management resources, a <computeroutput>struct pm_device</computeroutput>, which will be stored in the device structure&apos;s <computeroutput>pm</computeroutput> field. Use NULL if the device does not use PM.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private mutable data, which will be stored in the device structure&apos;s <computeroutput>data</computeroutput> field.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private constant data, which will be stored in the device structure&apos;s <computeroutput>config</computeroutput> field.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The device&apos;s initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The device&apos;s priority within its initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s API structure. Can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="182" column="9" bodyfile="include/device.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1gad864d7a50ee45285dacd68be1e5a49ce" prot="public" static="no">
        <name>DEVICE_DT_NAME</name>
        <param><defname>node_id</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, label, <ref refid="group__devicetree-generic-id_1ga8a8ab5d12fe59787433d1add94fb1667" kindref="member">DT_NODE_FULL_NAME</ref>(node_id))</initializer>
        <briefdescription>
<para>Return a string name for a devicetree node. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a string literal usable as a device&apos;s <computeroutput>name</computeroutput> field from a devicetree node identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the node&apos;s &quot;label&quot; property, if it has one. Otherwise, the node&apos;s full name in &quot;node-name@@unit-address&quot; form. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="202" column="9" bodyfile="include/device.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1gaac590af7705a3223968164406a483548" prot="public" static="no">
        <name>DEVICE_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_device</defname></param>
        <param><defname>data_ptr</defname></param>
        <param><defname>cfg_ptr</defname></param>
        <param><defname>level</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api_ptr</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_DEVICE_STATE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id)) \
	Z_DEVICE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id),		\
			<ref refid="group__device__model_1gad864d7a50ee45285dacd68be1e5a49ce" kindref="member">DEVICE_DT_NAME</ref>(node_id), init_fn,		\
			pm_device,					\
			data_ptr, cfg_ptr, level, prio,			\
			api_ptr,					\
			&amp;Z_DEVICE_STATE_NAME(Z_DEVICE_DT_DEV_NAME(node_id)),	\
			__VA_ARGS__)</initializer>
        <briefdescription>
<para>Create a device object from a devicetree node identifier and set it up for boot time initialization. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines a <computeroutput>struct device</computeroutput> that is automatically configured by the kernel during system initialization. The global device object&apos;s name as a C identifier is derived from the node&apos;s dependency ordinal. The device structure&apos;s <computeroutput>name</computeroutput> field is set to <computeroutput><ref refid="group__device__model_1gad864d7a50ee45285dacd68be1e5a49ce" kindref="member">DEVICE_DT_NAME(node_id)</ref></computeroutput>.</para>
<para>The device is declared with extern visibility, so a pointer to a global device object can be obtained with <computeroutput><ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET(node_id)</ref></computeroutput> from any source file that includes device.h. Before using the pointer, the referenced object should be checked using <ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s initialization function, which will be run by the kernel during system initialization.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s power management resources, a <computeroutput>struct pm_device</computeroutput>, which will be stored in the device structure&apos;s <computeroutput>pm</computeroutput> field. Use NULL if the device does not use PM.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private mutable data, which will be stored in the device structure&apos;s <computeroutput>data</computeroutput> field.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private constant data, which will be stored in the device structure&apos;s <computeroutput>config</computeroutput> field.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The device&apos;s initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The device&apos;s priority within its initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s API structure. Can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="250" column="9" bodyfile="include/device.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1gada5ba4aca9e0662ccebb2232c7256419" prot="public" static="no">
        <name>DEVICE_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__device__model_1gaac590af7705a3223968164406a483548" kindref="member">DEVICE_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like <ref refid="group__device__model_1gaac590af7705a3223968164406a483548" kindref="member">DEVICE_DT_DEFINE()</ref>, but uses an instance of a DT_DRV_COMPAT compatible instead of a node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number. The <computeroutput>node_id</computeroutput> argument to DEVICE_DT_DEFINE is set to <computeroutput><ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST(inst)</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>other parameters as expected by DEVICE_DT_DEFINE. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="271" column="9" bodyfile="include/device.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga8ebbf17ef805817aa638f36f177a1a0e" prot="public" static="no">
        <name>DEVICE_DT_NAME_GET</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__device__model_1ga51d735464c6c80e86ebae96b0b67947b" kindref="member">DEVICE_NAME_GET</ref>(Z_DEVICE_DT_DEV_NAME(node_id))</initializer>
        <briefdescription>
<para>The name of the global device object for <computeroutput>node_id</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the name of the global device structure as a C identifier. The device must be allocated using <ref refid="group__device__model_1gaac590af7705a3223968164406a483548" kindref="member">DEVICE_DT_DEFINE()</ref> or <ref refid="group__device__model_1gada5ba4aca9e0662ccebb2232c7256419" kindref="member">DEVICE_DT_INST_DEFINE()</ref> for this to work.</para>
<para>This macro is normally only useful within device driver source code. In other situations, you are probably looking for <ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name of the device object as a C identifier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="291" column="9" bodyfile="include/device.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" prot="public" static="no">
        <name>DEVICE_DT_GET</name>
        <param><defname>node_id</defname></param>
        <initializer>(&amp;<ref refid="group__device__model_1ga8ebbf17ef805817aa638f36f177a1a0e" kindref="member">DEVICE_DT_NAME_GET</ref>(node_id))</initializer>
        <briefdescription>
<para>Get a <computeroutput>const struct device*</computeroutput> from a devicetree node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to a device object created from a devicetree node, if any device was allocated by a driver.</para>
<para>If no such device was allocated, this will fail at linker time. If you get an error that looks like <computeroutput>undefined reference to __device_dts_ord_&lt;N&gt;</computeroutput>, that is what happened. Check to make sure your device driver is being compiled, usually by enabling the Kconfig options it requires.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>A devicetree node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the device object created for that node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="311" column="9" bodyfile="include/device.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga9165e550ae175ce305eafe33390af78b" prot="public" static="no">
        <name>DEVICE_DT_INST_GET</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Get a <computeroutput>const struct device*</computeroutput> for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput><ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET(DT_DRV_INST(inst))</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>DT_DRV_COMPAT instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the device object created for that instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="323" column="9" bodyfile="include/device.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1gaadf3ffb63df544eb3de356ab2c5e9e3c" prot="public" static="no">
        <name>DEVICE_DT_GET_ANY</name>
        <param><defname>compat</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),			    \
		    (<ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-generic-id_1ga4858c378b098dcb7c35de1db25442acc" kindref="member">DT_COMPAT_GET_ANY_STATUS_OKAY</ref>(compat))), \
		    (NULL))</initializer>
        <briefdescription>
<para>Get a <computeroutput>const struct device*</computeroutput> from a devicetree compatible. </para>
        </briefdescription>
        <detaileddescription>
<para>If an enabled devicetree node has the given compatible and a device object was created from it, this returns a pointer to that device.</para>
<para>If there no such devices, this returns NULL.</para>
<para>If there are multiple, this returns an arbitrary one.</para>
<para>If this returns non-NULL, the device must be checked for readiness before use, e.g. with <ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores devicetree compatible </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a device, or NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="343" column="9" bodyfile="include/device.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga39c760429534ef9ae77f3d996987cd2b" prot="public" static="no">
        <name>DEVICE_DT_GET_ONE</name>
        <param><defname>compat</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga916e11b66fdaab46e93c25241b62b52a" kindref="member">DT_HAS_COMPAT_STATUS_OKAY</ref>(compat),			    \
		    (<ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-generic-id_1ga4858c378b098dcb7c35de1db25442acc" kindref="member">DT_COMPAT_GET_ANY_STATUS_OKAY</ref>(compat))), \
		    (<ref refid="group__sys-util_1ga831cb8468911b8ebdb9b42682778e53d" kindref="member">ZERO_OR_COMPILE_ERROR</ref>(0)))</initializer>
        <briefdescription>
<para>Get a <computeroutput>const struct device*</computeroutput> from a devicetree compatible. </para>
        </briefdescription>
        <detaileddescription>
<para>If an enabled devicetree node has the given compatible and a device object was created from it, this returns a pointer to that device.</para>
<para>If there no such devices, this will fail at compile time.</para>
<para>If there are multiple, this returns an arbitrary one.</para>
<para>If this returns non-NULL, the device must be checked for readiness before use, e.g. with <ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compat</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores devicetree compatible </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a device </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="367" column="9" bodyfile="include/device.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga6ce1dbfda6847ca6c3858712e9b41989" prot="public" static="no">
        <name>DEVICE_DT_GET_OR_NULL</name>
        <param><defname>node_id</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1ga3b769d8105c7679e1d0575a1e7f1f653" kindref="member">DT_NODE_HAS_STATUS</ref>(node_id, okay),			\
		    (<ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(node_id)), (NULL))</initializer>
        <briefdescription>
<para>Utility macro to obtain an optional reference to a device. </para>
        </briefdescription>
        <detaileddescription>
<para>If the node identifier refers to a node with status &quot;okay&quot;, this returns <computeroutput><ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET(node_id)</ref></computeroutput>. Otherwise, it returns NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>devicetree node identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>const struct device*</computeroutput> for the node identifier, which may be NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="386" column="9" bodyfile="include/device.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga78e63e230be7dfe525a2de03e503be53" prot="public" static="no">
        <name>DEVICE_GET</name>
        <param><defname>name</defname></param>
        <initializer>(&amp;<ref refid="group__device__model_1ga51d735464c6c80e86ebae96b0b67947b" kindref="member">DEVICE_NAME_GET</ref>(name))</initializer>
        <briefdescription>
<para>Obtain a pointer to a device object by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the address of a device object created by <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref>, using the dev_name provided to <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The same as dev_name provided to <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the device object created by <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="402" column="9" bodyfile="include/device.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device__model_1ga5d8d574ffe22938ca58dcb74bf289428" prot="public" static="no">
        <name>DEVICE_DECLARE</name>
        <param><defname>name</defname></param>
        <initializer>static const struct <ref refid="structdevice" kindref="compound">device</ref> <ref refid="group__device__model_1ga51d735464c6c80e86ebae96b0b67947b" kindref="member">DEVICE_NAME_GET</ref>(name)</initializer>
        <briefdescription>
<para>Declare a static device object. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro can be used at the top-level to declare a device, such that <ref refid="group__device__model_1ga78e63e230be7dfe525a2de03e503be53" kindref="member">DEVICE_GET()</ref> may be used before the full declaration in <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref>.</para>
<para>This is often useful when configuring interrupts statically in a device&apos;s init or per-instance config function, as the init function itself is required by <ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE()</ref> and use of <ref refid="group__device__model_1ga78e63e230be7dfe525a2de03e503be53" kindref="member">DEVICE_GET()</ref> inside it creates a circular dependency.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Device name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="419" column="9" bodyfile="include/device.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" prot="public" static="no">
        <type><ref refid="stdint_8h_1afe270aee8d96ad7f279a4020b9d58bdf" kindref="member">int16_t</ref></type>
        <definition>typedef int16_t device_handle_t</definition>
        <argsstring></argsstring>
        <name>device_handle_t</name>
        <briefdescription>
<para>Type used to represent a &quot;handle&quot; for a device. </para>
        </briefdescription>
        <detaileddescription>
<para>Every struct device has an associated handle. You can get a pointer to a device structure from its handle and vice versa, but the handle uses less space than a pointer. The device.h API mainly uses handles to store lists of multiple devices in a compact way.</para>
<para>The extreme values and zero have special significance. Negative values identify functionality that does not correspond to a Zephyr device, such as the system clock or a <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> function.</para>
<para><simplesect kind="see"><para><ref refid="group__device__model_1ga456366a9ca0a8e97484c97c279745203" kindref="member">device_handle_get()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__device__model_1ga73680daef9f8d7dc2541d83d09737f4a" kindref="member">device_from_handle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="53" column="17" bodyfile="include/device.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__device__model_1ga9a1118e5c76c44c998f7258a7de0bfbb" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* device_visitor_callback_t) (const struct device *dev, void *context)</definition>
        <argsstring>)(const struct device *dev, void *context)</argsstring>
        <name>device_visitor_callback_t</name>
        <briefdescription>
<para>Prototype for functions used when iterating over a set of devices. </para>
        </briefdescription>
        <detaileddescription>
<para>Such a function may be used in API that identifies a set of devices and provides a visitor API supporting caller-specific interaction with each device in the set.</para>
<para>The visit is said to succeed if the visitor returns a non-negative value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device in the set being iterated</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>state used to support the visitor function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-negative number to allow walking to continue, and a negative error code to case the iteration to stop.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__device__model_1ga6e3b6dbb15ca28d6c94ee07702663245" kindref="member">device_required_foreach()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__device__model_1gaf5fce5e93fd6d5e13aa8b20251b82b2a" kindref="member">device_supported_foreach()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="541" column="9" bodyfile="include/device.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="device_8h_1a19a65acd183c70354d36919601f8918b" prot="public" static="no" mutable="no">
        <type>fix the linker</type>
        <definition>fix the linker scripts</definition>
        <argsstring></argsstring>
        <name>scripts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="878" column="18" bodyfile="include/device.h" bodystart="878" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__device__model_1ga456366a9ca0a8e97484c97c279745203" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref></type>
        <definition>static device_handle_t device_handle_get</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>device_handle_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the handle for a given device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device for which a handle is desired.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the handle for the device, or DEVICE_HANDLE_NULL if the device does not have an associated handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="484" column="1" bodyfile="include/device.h" bodystart="484" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1ga73680daef9f8d7dc2541d83d09737f4a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>static const struct device * device_from_handle</definition>
        <argsstring>(device_handle_t dev_handle)</argsstring>
        <name>device_from_handle</name>
        <param>
          <type><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref></type>
          <declname>dev_handle</declname>
        </param>
        <briefdescription>
<para>Get the device corresponding to a handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the device handle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the device that has that handle, or a null pointer if <computeroutput>dev_handle</computeroutput> does not identify a device. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="508" column="1" bodyfile="include/device.h" bodystart="508" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1ga2157bbfc2deecfae6514f58221663618" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref> *</type>
        <definition>static const device_handle_t * device_required_handles_get</definition>
        <argsstring>(const struct device *dev, size_t *count)</argsstring>
        <name>device_required_handles_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Get the device handles for devicetree dependencies of this device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to an array of device handles. The length of the array is stored in the <computeroutput>count</computeroutput> parameter.</para>
<para>The array contains a handle for each device that <computeroutput>dev</computeroutput> requires directly, as determined from the devicetree. This does not include transitive dependencies; you must recursively determine those.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device for which dependencies are desired.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to where this function should store the length of the returned array. No value is stored if the call returns a null pointer. The value may be set to zero if the device has no devicetree dependencies.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a sequence of <computeroutput>*count</computeroutput> device handles, or a null pointer if <computeroutput>dev</computeroutput> does not have any dependency data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="564" column="1" bodyfile="include/device.h" bodystart="564" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1ga3c9ae15d3224c792b915b107b2d5d00f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref> *</type>
        <definition>static const device_handle_t * device_supported_handles_get</definition>
        <argsstring>(const struct device *dev, size_t *count)</argsstring>
        <name>device_supported_handles_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Get the set of handles that this device supports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to an array of device handles. The length of the array is stored in the <computeroutput>count</computeroutput> parameter.</para>
<para>The array contains a handle for each device that <computeroutput>dev</computeroutput> &quot;supports&quot; <ndash/> that is, devices that require <computeroutput>dev</computeroutput> directly <ndash/> as determined from the devicetree. This does not include transitive dependencies; you must recursively determine those.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device for which supports are desired.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to where this function should store the length of the returned array. No value is stored if the call returns a null pointer. The value may be set to zero if nothing in the devicetree depends on <computeroutput>dev</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a sequence of <computeroutput>*count</computeroutput> device handles, or a null pointer if <computeroutput>dev</computeroutput> does not have any dependency data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="604" column="1" bodyfile="include/device.h" bodystart="604" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1ga6e3b6dbb15ca28d6c94ee07702663245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int device_required_foreach</definition>
        <argsstring>(const struct device *dev, device_visitor_callback_t visitor_cb, void *context)</argsstring>
        <name>device_required_foreach</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__device__model_1ga9a1118e5c76c44c998f7258a7de0bfbb" kindref="member">device_visitor_callback_t</ref></type>
          <declname>visitor_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Visit every device that <computeroutput>dev</computeroutput> directly requires. </para>
        </briefdescription>
        <detaileddescription>
<para>Zephyr maintains information about which devices are directly required by another device; for example an I2C-based sensor driver will require an I2C controller for communication. Required devices can derive from statically-defined devicetree relationships or dependencies registered at runtime.</para>
<para>This API supports operating on the set of required devices. Example uses include making sure required devices are ready before the requiring device is used, and releasing them when the requiring device is no longer needed.</para>
<para>There is no guarantee on the order in which required devices are visited.</para>
<para>If the <computeroutput>visitor</computeroutput> function returns a negative value iteration is halted, and the returned value from the visitor is returned from this function.</para>
<para><simplesect kind="note"><para>This API is not available to unprivileged threads.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device of interest. The devices that this device depends on will be used as the set of devices to visit. This parameter must not be null.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visitor_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that should be invoked on each device in the dependency set. This parameter must not be null.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>state that is passed through to the visitor function. This parameter may be null if <computeroutput>visitor</computeroutput> tolerates a null <computeroutput>context</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of devices that were visited if all visits succeed, or the negative value returned from the first visit that did not succeed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="662" column="5" declfile="include/device.h" declline="662" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1gaf5fce5e93fd6d5e13aa8b20251b82b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int device_supported_foreach</definition>
        <argsstring>(const struct device *dev, device_visitor_callback_t visitor_cb, void *context)</argsstring>
        <name>device_supported_foreach</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__device__model_1ga9a1118e5c76c44c998f7258a7de0bfbb" kindref="member">device_visitor_callback_t</ref></type>
          <declname>visitor_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Visit every device that <computeroutput>dev</computeroutput> directly supports. </para>
        </briefdescription>
        <detaileddescription>
<para>Zephyr maintains information about which devices are directly supported by another device; for example an I2C controller will support an I2C-based sensor driver. Supported devices can derive from statically-defined devicetree relationships.</para>
<para>This API supports operating on the set of supported devices. Example uses include iterating over the devices connected to a regulator when it is powered on.</para>
<para>There is no guarantee on the order in which required devices are visited.</para>
<para>If the <computeroutput>visitor</computeroutput> function returns a negative value iteration is halted, and the returned value from the visitor is returned from this function.</para>
<para><simplesect kind="note"><para>This API is not available to unprivileged threads.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device of interest. The devices that this device supports will be used as the set of devices to visit. This parameter must not be null.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visitor_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that should be invoked on each device in the support set. This parameter must not be null.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>state that is passed through to the visitor function. This parameter may be null if <computeroutput>visitor</computeroutput> tolerates a null <computeroutput>context</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of devices that were visited if all visits succeed, or the negative value returned from the first visit that did not succeed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="698" column="5" declfile="include/device.h" declline="698" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device * device_get_binding</definition>
        <argsstring>(const char *name)</argsstring>
        <name>device_get_binding</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a <computeroutput>const struct device*</computeroutput> from its <computeroutput>name</computeroutput> field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function iterates through the devices on the system. If a device with the given <computeroutput>name</computeroutput> field is found, and that device initialized successfully at boot time, this function returns a pointer to the device.</para>
<para>If no device has the given name, this function returns NULL.</para>
<para>This function also returns NULL when a device is found, but it failed to initialize successfully at boot time. (To troubleshoot this case, set a breakpoint on your device driver&apos;s initialization function.)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>device name to search for. A null pointer, or a pointer to an empty string, will cause NULL to be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to device structure with the given name; NULL if the device is not found or if the device with that name&apos;s initialization function failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="724" column="20" declfile="include/device.h" declline="724" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool device_is_ready</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>device_is_ready</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Verify that a device is ready for use. </para>
        </briefdescription>
        <detaileddescription>
<para>Indicates whether the provided device pointer is for a device known to be in a state where it can be used with its standard API.</para>
<para>This can be used with device pointers captured from <ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET()</ref>, which does not include the readiness checks of <ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref>. At minimum this means that the device has been successfully initialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the device in question.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device is ready for use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If the device is not ready for use or if a NULL device pointer is passed as argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="767" column="7" declfile="include/device.h" declline="767" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__device__model_1ga233b32dc38630069c1aee973fa52416e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int device_usable_check</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>device_usable_check</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Determine whether a device is ready for use. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready()</ref> instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is usable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENODEV</parametername>
</parameternamelist>
<parameterdescription>
<para>If device is not usable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/device.h" line="802" column="20" bodyfile="include/device.h" bodystart="802" bodyend="805"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DEVICE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DEVICE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="init_8h" kindref="compound">init.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sections_8h" kindref="compound">linker/sections.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="device__mmio_8h" kindref="compound">sys/device_mmio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1afe270aee8d96ad7f279a4020b9d58bdf" kindref="member">int16_t</ref><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group__device__model_1ga5f1feab331ee737141f418030902aab0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_HANDLE_SEP<sp/>INT16_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="group__device__model_1gab83f6fdc3d5d6e68facad0ddc9f3e763" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_HANDLE_ENDS<sp/>INT16_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__device__model_1ga4dd918c3a59b8afa185a4851165d2ca0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_HANDLE_NULL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_MAX_NAME_LEN<sp/><sp/><sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="group__device__model_1ga51d735464c6c80e86ebae96b0b67947b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_NAME_GET(name)<sp/>_CONCAT(__device_,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="group__device__model_1ga42092d245664c3d59c30ceb4776bd642" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_DEVICE_DEFINE(drv_name,<sp/>init_fn,<sp/>level,<sp/>prio)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__DEPRECATED_MACRO<sp/>SYS_INIT(init_fn,<sp/>level,<sp/>prio)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Node<sp/>paths<sp/>can<sp/>exceed<sp/>the<sp/>maximum<sp/>size<sp/>supported<sp/>by<sp/>device_get_binding()<sp/>in<sp/>user<sp/>mode,</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>so<sp/>synthesize<sp/>a<sp/>unique<sp/>dev_name<sp/>from<sp/>the<sp/>devicetree<sp/>node.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>The<sp/>ordinal<sp/>used<sp/>in<sp/>this<sp/>name<sp/>can<sp/>be<sp/>mapped<sp/>to<sp/>the<sp/>path<sp/>by</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>examining<sp/>zephyr/include/generated/device_extern.h<sp/>header.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>format<sp/>of<sp/>this<sp/>conversion<sp/>changes,<sp/>gen_defines<sp/>should<sp/>be<sp/>updated<sp/>to</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>match<sp/>it.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_DT_DEV_NAME(node_id)<sp/>_CONCAT(dts_ord_,<sp/>DT_DEP_ORD(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Synthesize<sp/>a<sp/>unique<sp/>name<sp/>for<sp/>the<sp/>device<sp/>state<sp/>associated<sp/>with</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>dev_name.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_STATE_NAME(dev_name)<sp/>_CONCAT(__devstate_,<sp/>dev_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_STATE_DEFINE(node_id,<sp/>dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>device_state<sp/>Z_DEVICE_STATE_NAME(dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__section__(&quot;.z_devstate&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="group__device__model_1gad08683c204de0996ca62b23813947009" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DEFINE(dev_name,<sp/>drv_name,<sp/>init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/>api_ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_STATE_DEFINE(DT_INVALID_NODE,<sp/>dev_name)<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_DEFINE(DT_INVALID_NODE,<sp/>dev_name,<sp/>drv_name,<sp/>init_fn,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/>api_ptr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Z_DEVICE_STATE_NAME(dev_name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="group__device__model_1gad864d7a50ee45285dacd68be1e5a49ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_NAME(node_id)<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_PROP_OR(node_id,<sp/>label,<sp/>DT_NODE_FULL_NAME(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="group__device__model_1gaac590af7705a3223968164406a483548" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_DEFINE(node_id,<sp/>init_fn,<sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_STATE_DEFINE(node_id,<sp/>Z_DEVICE_DT_DEV_NAME(node_id))<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_DEFINE(node_id,<sp/>Z_DEVICE_DT_DEV_NAME(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_DT_NAME(node_id),<sp/>init_fn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pm_device,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>api_ptr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Z_DEVICE_STATE_NAME(Z_DEVICE_DT_DEV_NAME(node_id)),<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="group__device__model_1gada5ba4aca9e0662ccebb2232c7256419" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_INST_DEFINE(inst,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_DT_DEFINE(DT_DRV_INST(inst),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="group__device__model_1ga8ebbf17ef805817aa638f36f177a1a0e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_NAME_GET(node_id)<sp/>DEVICE_NAME_GET(Z_DEVICE_DT_DEV_NAME(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_GET(node_id)<sp/>(&amp;DEVICE_DT_NAME_GET(node_id))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="group__device__model_1ga9165e550ae175ce305eafe33390af78b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_INST_GET(inst)<sp/>DEVICE_DT_GET(DT_DRV_INST(inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="group__device__model_1gaadf3ffb63df544eb3de356ab2c5e9e3c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_GET_ANY(compat)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_HAS_COMPAT_STATUS_OKAY(compat),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DEVICE_DT_GET(DT_COMPAT_GET_ANY_STATUS_OKAY(compat))),<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="group__device__model_1ga39c760429534ef9ae77f3d996987cd2b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_GET_ONE(compat)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_HAS_COMPAT_STATUS_OKAY(compat),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DEVICE_DT_GET(DT_COMPAT_GET_ANY_STATUS_OKAY(compat))),<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ZERO_OR_COMPILE_ERROR(0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="group__device__model_1ga6ce1dbfda6847ca6c3858712e9b41989" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DT_GET_OR_NULL(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_HAS_STATUS(node_id,<sp/>okay),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DEVICE_DT_GET(node_id)),<sp/>(NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="group__device__model_1ga78e63e230be7dfe525a2de03e503be53" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_GET(name)<sp/>(&amp;DEVICE_NAME_GET(name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="group__device__model_1ga5d8d574ffe22938ca58dcb74bf289428" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_DECLARE(name)<sp/>static<sp/>const<sp/>struct<sp/>device<sp/>DEVICE_NAME_GET(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="structdevice__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice__state" kindref="compound">device_state</ref><sp/>{</highlight></codeline>
<codeline lineno="437" refid="structdevice__state_1ac0fb1abe0a9390ed5a32124f00a40d99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structdevice__state_1ac0fb1abe0a9390ed5a32124f00a40d99" kindref="member">init_res</ref><sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="structdevice__state_1a26bb28bbe4c17c4f0e496d2b04d4a3ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structdevice__state_1a26bb28bbe4c17c4f0e496d2b04d4a3ad" kindref="member">initialized</ref><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pm_device;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="structdevice" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>{</highlight></codeline>
<codeline lineno="452" refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="454" refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structdevice_1aca2d801eb15996cf1c74dc65cfa651fc" kindref="member">config</ref>;</highlight></codeline>
<codeline lineno="456" refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structdevice_1a4a2e6a2cfeb6efed7d5383c33458f46d" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="458" refid="structdevice_1a4ea71ed3ab6cdf3a2e70e35a44c1ed3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice__state" kindref="compound">device_state</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdevice_1a4ea71ed3ab6cdf3a2e70e35a44c1ed3e" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="460" refid="structdevice_1ac6739bba5a9e7834903ef2748f404d43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdevice_1ac6739bba5a9e7834903ef2748f404d43" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="468" refid="structdevice_1a60bd7ffdd010432cfde4aeea5a3941e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdevice_1a60bd7ffdd010432cfde4aeea5a3941e1" kindref="member">handles</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PM_DEVICE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pm_device<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pm;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">};</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref></highlight></codeline>
<codeline lineno="484" refid="group__device__model_1ga456366a9ca0a8e97484c97c279745203" refkind="member"><highlight class="normal"><ref refid="group__device__model_1ga456366a9ca0a8e97484c97c279745203" kindref="member">device_handle_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__device__model_1ga4dd918c3a59b8afa185a4851165d2ca0" kindref="member">DEVICE_HANDLE_NULL</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>__device_start[];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>If/when<sp/>devices<sp/>can<sp/>be<sp/>constructed<sp/>that<sp/>are<sp/>not<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>fixed<sp/>sequence<sp/>we&apos;ll<sp/>need<sp/>another<sp/>solution.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/>1<sp/>+<sp/>(<ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref>)(dev<sp/>-<sp/>__device_start);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*</highlight></codeline>
<codeline lineno="508" refid="group__device__model_1ga73680daef9f8d7dc2541d83d09737f4a" refkind="member"><highlight class="normal"><ref refid="group__device__model_1ga73680daef9f8d7dc2541d83d09737f4a" kindref="member">device_from_handle</ref>(<ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref><sp/>dev_handle)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>__device_start[];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>__device_end[];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numdev<sp/>=<sp/>__device_end<sp/>-<sp/>__device_start;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dev_handle<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)dev_handle<sp/>&lt;=<sp/>numdev))<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/>&amp;__device_start[dev_handle<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dev;</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="group__device__model_1ga9a1118e5c76c44c998f7258a7de0bfbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__device__model_1ga9a1118e5c76c44c998f7258a7de0bfbb" kindref="member">device_visitor_callback_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref><sp/>*</highlight></codeline>
<codeline lineno="564" refid="group__device__model_1ga2157bbfc2deecfae6514f58221663618" refkind="member"><highlight class="normal"><ref refid="group__device__model_1ga2157bbfc2deecfae6514f58221663618" kindref="member">device_required_handles_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref><sp/>*<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>=<sp/>dev-&gt;<ref refid="structdevice_1a60bd7ffdd010432cfde4aeea5a3941e1" kindref="member">handles</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>[i]<sp/>!=<sp/><ref refid="group__device__model_1gab83f6fdc3d5d6e68facad0ddc9f3e763" kindref="member">DEVICE_HANDLE_ENDS</ref>)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>[i]<sp/>!=<sp/><ref refid="group__device__model_1ga5f1feab331ee737141f418030902aab0" kindref="member">DEVICE_HANDLE_SEP</ref>))<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref><sp/>*</highlight></codeline>
<codeline lineno="604" refid="group__device__model_1ga3c9ae15d3224c792b915b107b2d5d00f" refkind="member"><highlight class="normal"><ref refid="group__device__model_1ga3c9ae15d3224c792b915b107b2d5d00f" kindref="member">device_supported_handles_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>)</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref><sp/>*<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>=<sp/>dev-&gt;<ref refid="structdevice_1a60bd7ffdd010432cfde4aeea5a3941e1" kindref="member">handles</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>region<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fast<sp/>forward<sp/>to<sp/>supporting<sp/>devices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(region<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref><sp/>==<sp/><ref refid="group__device__model_1ga5f1feab331ee737141f418030902aab0" kindref="member">DEVICE_HANDLE_SEP</ref>)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region++;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>++;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>supporting<sp/>devices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>[i]<sp/>!=<sp/><ref refid="group__device__model_1gab83f6fdc3d5d6e68facad0ddc9f3e763" kindref="member">DEVICE_HANDLE_ENDS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="fatal_2exception_2src_2main_8c_1ae3b62d25a3304d081b4272eeab42de09" kindref="member">rv</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="group__device__model_1ga6e3b6dbb15ca28d6c94ee07702663245" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga6e3b6dbb15ca28d6c94ee07702663245" kindref="member">device_required_foreach</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device__model_1ga9a1118e5c76c44c998f7258a7de0bfbb" kindref="member">device_visitor_callback_t</ref><sp/>visitor_cb,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="group__device__model_1gaf5fce5e93fd6d5e13aa8b20251b82b2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1gaf5fce5e93fd6d5e13aa8b20251b82b2a" kindref="member">device_supported_foreach</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device__model_1ga9a1118e5c76c44c998f7258a7de0bfbb" kindref="member">device_visitor_callback_t</ref><sp/>visitor_cb,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structdevice_1a1e74e8d3b0b1a981c67e1d0284ccac3d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z_device_get_all_static(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*<sp/>*devices);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>z_device_is_ready(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>z_impl_device_is_ready(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_device_is_ready(dev);</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">__deprecated<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_device_usable_check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_device_is_ready(dev)<sp/>?<sp/>0<sp/>:<sp/>-<ref refid="group__system__errno_1gab9b8cc17d1947160d13faaba7a18d6d1" kindref="member">ENODEV</ref>;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="802" refid="group__device__model_1ga233b32dc38630069c1aee973fa52416e" refkind="member"><highlight class="normal">__deprecated<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1ga233b32dc38630069c1aee973fa52416e" kindref="member">device_usable_check</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__device__model_1gaa4944bd850e90cbd52b0489f9b12edfb" kindref="member">device_is_ready</ref>(dev)<sp/>?<sp/>0<sp/>:<sp/>-<ref refid="group__system__errno_1gab9b8cc17d1947160d13faaba7a18d6d1" kindref="member">ENODEV</ref>;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Synthesize<sp/>the<sp/>name<sp/>of<sp/>the<sp/>object<sp/>that<sp/>holds<sp/>device<sp/>ordinal<sp/>and</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*<sp/>dependency<sp/>data.<sp/>If<sp/>the<sp/>object<sp/>doesn&apos;t<sp/>come<sp/>from<sp/>a<sp/>devicetree</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/>node,<sp/>use<sp/>dev_name.</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_HANDLE_NAME(node_id,<sp/>dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CONCAT(__devicehdl_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_EXISTS(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dev_name)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_EXTRA_HANDLES(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOR_EACH_NONEMPTY_TERM(IDENTITY,<sp/>(,),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>Utility<sp/>macro<sp/>to<sp/>define<sp/>and<sp/>initialize<sp/>the<sp/>device<sp/>state.</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>@param<sp/>node_id<sp/>Devicetree<sp/>node<sp/>id<sp/>of<sp/>the<sp/>device.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>@param<sp/>dev_name<sp/>Device<sp/>name.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_STATE_DEFINE(node_id,<sp/>dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>device_state<sp/>Z_DEVICE_STATE_NAME(dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__section__(&quot;.z_devstate&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Construct<sp/>objects<sp/>that<sp/>are<sp/>referenced<sp/>from<sp/>struct<sp/>device.<sp/>These</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/>include<sp/>power<sp/>management<sp/>and<sp/>dependency<sp/>handles.</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_DEFINE_PRE(node_id,<sp/>dev_name,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_DEFINE_HANDLES(node_id,<sp/>dev_name,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initial<sp/>build<sp/>provides<sp/>a<sp/>record<sp/>that<sp/>associates<sp/>the<sp/>device<sp/>object</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*<sp/>with<sp/>its<sp/>devicetree<sp/>ordinal,<sp/>and<sp/>provides<sp/>the<sp/>dependency<sp/>ordinals.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>These<sp/>are<sp/>provided<sp/>as<sp/>weak<sp/>definitions<sp/>(to<sp/>prevent<sp/>the<sp/>reference</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*<sp/>from<sp/>being<sp/>captured<sp/>when<sp/>the<sp/>original<sp/>object<sp/>file<sp/>is<sp/>compiled),<sp/>and</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>distinct<sp/>pass1<sp/>section<sp/>(which<sp/>will<sp/>be<sp/>replaced<sp/>by</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/>*<sp/>postprocessing).</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>Before<sp/>processing<sp/>in<sp/>gen_handles.py,<sp/>the<sp/>array<sp/>format<sp/>is:</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DEVICE_ORDINAL<sp/>(or<sp/>DEVICE_HANDLE_NULL<sp/>if<sp/>not<sp/>a<sp/>devicetree<sp/>node),</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>devicetree<sp/>dependency<sp/>ordinals<sp/>(if<sp/>any),</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_SEP,</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>injected<sp/>dependency<sp/>ordinals<sp/>(if<sp/>any),</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_SEP,</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>devicetree<sp/>supporting<sp/>ordinals<sp/>(if<sp/>any),</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*<sp/>After<sp/>processing<sp/>in<sp/>gen_handles.py,<sp/>the<sp/>format<sp/>is<sp/>updated<sp/>to:</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>*<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>existing<sp/>devicetree<sp/>dependency<sp/>handles<sp/>(if<sp/>any),</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_SEP,</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>injected<sp/>dependency<sp/>ordinals<sp/>(if<sp/>any),</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_SEP,</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>existing<sp/>devicetree<sp/>support<sp/>handles<sp/>(if<sp/>any),</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_NULL</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>also<sp/>(experimentally)<sp/>necessary<sp/>to<sp/>provide<sp/>explicit<sp/>alignment</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*<sp/>on<sp/>each<sp/>object.<sp/>Otherwise<sp/>x86-64<sp/>builds<sp/>will<sp/>introduce<sp/>padding</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>between<sp/>objects<sp/>in<sp/>the<sp/>same<sp/>input<sp/>section<sp/>in<sp/>individual<sp/>object</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*<sp/>files,<sp/>which<sp/>will<sp/>be<sp/>retained<sp/>in<sp/>subsequent<sp/>links<sp/>both<sp/>wasting</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*<sp/>space<sp/>and<sp/>resulting<sp/>in<sp/>aggregate<sp/>size<sp/>changes<sp/>relative<sp/>to<sp/>pass2</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*<sp/>when<sp/>all<sp/>objects<sp/>will<sp/>be<sp/>in<sp/>the<sp/>same<sp/>input<sp/>section.</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*<sp/>The<sp/>build<sp/>assert<sp/>will<sp/>fail<sp/>if<sp/>device_handle_t<sp/>changes<sp/>size,<sp/>which</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*<sp/>means<sp/>the<sp/>alignment<sp/>directives<sp/>in<sp/>the<sp/>linker<sp/>scripts<sp/>and<sp/>in</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*<sp/>`gen_handles.py`<sp/>must<sp/>be<sp/>updated.</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="device_8h_1a19a65acd183c70354d36919601f8918b" refkind="member"><highlight class="normal">BUILD_ASSERT(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__device__model_1ga21415b8e9967ecd2c3d3d3b1724f93c3" kindref="member">device_handle_t</ref>)<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;fix<sp/>the<sp/>linker<sp/>scripts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_DEFINE_HANDLES(node_id,<sp/>dev_name,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>const<sp/>device_handle_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_HANDLE_NAME(node_id,<sp/>dev_name)[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>device_handle_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__aligned(sizeof(device_handle_t))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__weak__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="885"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__section__(&quot;.__device_handles_pass1&quot;</highlight><highlight class="normal">)))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_HANDLE_NAME(node_id,<sp/>dev_name)[]<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_EXISTS(node_id),<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_DEP_ORD(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRES_DEP_ORDS(node_id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_SEP,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_EXTRA_HANDLES(__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_HANDLE_SEP,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_EXISTS(node_id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DT_SUPPORTS_DEP_ORDS(node_id)),<sp/>())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_DEFINE_INIT(node_id,<sp/>dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.handles<sp/>=<sp/>Z_DEVICE_HANDLE_NAME(node_id,<sp/>dev_name),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>DEVICE_DEFINE<sp/>but<sp/>takes<sp/>a<sp/>node_id<sp/>AND<sp/>a<sp/>dev_name,<sp/>and<sp/>trailing</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>dependency<sp/>handles<sp/>that<sp/>come<sp/>from<sp/>outside<sp/>devicetree.</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_DEFINE(node_id,<sp/>dev_name,<sp/>drv_name,<sp/>init_fn,<sp/>pm_device,\</highlight></codeline>
<codeline lineno="907"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr,<sp/>cfg_ptr,<sp/>level,<sp/>prio,<sp/>api_ptr,<sp/>state_ptr,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="908"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_DEFINE_PRE(node_id,<sp/>dev_name,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="909"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(DT_NODE_EXISTS(node_id),<sp/>(),<sp/>(static))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="910"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Z_DECL_ALIGN(struct<sp/>device)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="911"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_NAME_GET(dev_name)<sp/>__used<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="912"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__section__(&quot;.z_device_&quot;</highlight><highlight class="normal"><sp/>#level<sp/>STRINGIFY(prio)&quot;_&quot;)))<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>drv_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.config<sp/>=<sp/>(cfg_ptr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.api<sp/>=<sp/>(api_ptr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.state<sp/>=<sp/>(state_ptr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/>(data_ptr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(CONFIG_PM_DEVICE,<sp/>(.pm<sp/>=<sp/>pm_device,),<sp/>())<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_DEFINE_INIT(node_id,<sp/>dev_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(sizeof(Z_STRINGIFY(drv_name))<sp/>&lt;=<sp/>Z_DEVICE_MAX_NAME_LEN,<sp/>\</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_STRINGIFY(DEVICE_NAME_GET(drv_name))<sp/>&quot;<sp/>too<sp/>long&quot;);<sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_INIT_ENTRY_DEFINE(DEVICE_NAME_GET(dev_name),<sp/>init_fn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;DEVICE_NAME_GET(dev_name)),<sp/>level,<sp/>prio)</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>device_extern<sp/>is<sp/>generated<sp/>based<sp/>on<sp/>devicetree<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device_extern.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DEVICE_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/device.h"/>
  </compounddef>
</doxygen>
