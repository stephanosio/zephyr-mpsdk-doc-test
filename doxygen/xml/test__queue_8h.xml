<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__queue_8h" kind="file" language="C++">
    <compoundname>test_queue.h</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes refid="irq__offload_8h" local="no">irq_offload.h</includes>
    <includes refid="ztest__error__hook_8h" local="no">ztest_error_hook.h</includes>
    <includedby refid="queue_2src_2main_8c" local="yes">tests/kernel/queue/src/main.c</includedby>
    <includedby refid="test__queue__contexts_8c" local="yes">tests/kernel/queue/src/test_queue_contexts.c</includedby>
    <includedby refid="test__queue__fail_8c" local="yes">tests/kernel/queue/src/test_queue_fail.c</includedby>
    <includedby refid="test__queue__loop_8c" local="yes">tests/kernel/queue/src/test_queue_loop.c</includedby>
    <includedby refid="test__queue__user_8c" local="yes">tests/kernel/queue/src/test_queue_user.c</includedby>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>ztest_error_hook.h</label>
        <link refid="ztest__error__hook_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>tests/kernel/queue/src/main.c</label>
        <link refid="queue_2src_2main_8c"/>
      </node>
      <node id="1">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>tests/kernel/queue/src/test_queue_contexts.c</label>
        <link refid="test__queue__contexts_8c"/>
      </node>
      <node id="4">
        <label>tests/kernel/queue/src/test_queue_fail.c</label>
        <link refid="test__queue__fail_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/queue/src/test_queue_loop.c</label>
        <link refid="test__queue__loop_8c"/>
      </node>
      <node id="6">
        <label>tests/kernel/queue/src/test_queue_user.c</label>
        <link refid="test__queue__user_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structqdata" prot="public">qdata</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="test__queue_8h_1ab220b5fe54cc9d223384a2227b750fc1" prot="public" static="no">
        <type>struct <ref refid="structqdata" kindref="compound">qdata</ref></type>
        <definition>typedef struct qdata qdata_t</definition>
        <argsstring></argsstring>
        <name>qdata_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="49" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__queue_8h_1a4dc595a0cb08f33192e6b5519acd86b8" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref></type>
        <definition>struct k_heap test_pool</definition>
        <argsstring></argsstring>
        <name>test_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="43" column="20" declfile="tests/kernel/queue/src/test_queue.h" declline="43" declcolumn="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__queue__tests_1gac2b4619b80e450b376058832ce1442af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between threads using queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Static define and Dynamic define queues, Then initialize them. Create a new thread to wait for reading data. Current thread will append item into queue. Verify if rx_data is equal insert-data address. Verify queue can be define at compile time.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" kindref="member">k_queue_insert()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref> <ref refid="test__queue__contexts_8c_1a5fdc5fb7330e19795cc524bb2650a6f3" kindref="member">K_THREAD_STACK_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init via k_queue_init</para>
<para>TESTPOINT: test K_QUEUE_DEFINEed queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="14" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="154" bodyend="162" declfile="tests/kernel/queue/src/test_queue.h" declline="14" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga4e99828657b64f710660f7c49c79fe9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_thread2isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_thread2isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between thread and ISR. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new ISR to insert data And current thread is used for getting data Verify if the rx_data is equal insert-data address. If the received data address is the same as the created array, prove that the queue data structures are stored within the provided data items.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" kindref="member">k_queue_insert()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init via k_queue_init</para>
<para>TESTPOINT: test K_QUEUE_DEFINEed queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="15" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="178" bodyend="186" declfile="tests/kernel/queue/src/test_queue.h" declline="15" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaf33994f0f39f2b46dfaf2af17ccf99fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_isr2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_isr2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between ISR and thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new ISR and ready for getting data And current thread is used for inserting data Verify if the rx_data is equal insert-data address.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" kindref="member">k_queue_insert()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" kindref="member">k_queue_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_queue_init queue</para>
<para>TESTPOINT: test K_QUEUE_DEFINE queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="16" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="200" bodyend="208" declfile="tests/kernel/queue/src/test_queue.h" declline="16" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga625832221d8e19245df0f01989cf680e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_get_2threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_get_2threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_queue_init queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="17" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="247" bodyend="253" declfile="tests/kernel/queue/src/test_queue.h" declline="17" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga85974775e88b2531ec0523f5608f31e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_get_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_get_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: queue get returns NULL</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="18" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="23" bodyend="31" declfile="tests/kernel/queue/src/test_queue.h" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gadbd9ee6195052890fd1b61f4a016a8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_loop</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_loop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test queue operations in loop. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" kindref="member">k_queue_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="19" column="13" bodyfile="tests/kernel/queue/src/test_queue_loop.c" bodystart="110" bodyend="117" declfile="tests/kernel/queue/src/test_queue.h" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga8dbdde7179df55dbcfff1cbebae0901b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_supv_to_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_supv_to_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify queue elements and cancel wait from a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para>The test adds elements to queue and then verified by the child user thread. Get data from a empty queue,and use K_FORVER to wait for available And to cancel wait from current thread.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref>, <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" kindref="member">k_queue_cancel_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="21" column="13" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="73" bodyend="115" declfile="tests/kernel/queue/src/test_queue.h" declline="21" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gab194fe3b40e86eb2c6178e372cc8d8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_auto_free</definition>
        <argsstring>(void)</argsstring>
        <name>test_auto_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to verify free of allocated elements of queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="22" column="13" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="189" bodyend="205" declfile="tests/kernel/queue/src/test_queue.h" declline="22" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gacf4a07403bef6fa6caa29c0abbfbf960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_prepend_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_prepend_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>verify allocate and feature &quot;Last In, First Out&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new queue And allocated memory for the queue Initialize and insert data item in sequence. Verify the feather &quot;Last in,First out&quot;</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="23" column="13" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="129" bodyend="149" declfile="tests/kernel/queue/src/test_queue.h" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaa517a1497728197f4cada7f397ba6fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_append_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_append_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>verify feature of queue &quot;First In, First Out&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new queue And allocated memory for the queue Initialize and insert data item in sequence. Verify the feather &quot;First in,First out&quot;</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="24" column="13" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="163" bodyend="183" declfile="tests/kernel/queue/src/test_queue.h" declline="24" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga54cff7c6001a273568c1bf1470e1c873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of API <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref> is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="25" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="137" bodyend="141" declfile="tests/kernel/queue/src/test_queue.h" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaacbdb2a8ad3d0df49424dd45472c0ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_append_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_append_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="26" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="153" bodyend="160" declfile="tests/kernel/queue/src/test_queue.h" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaec1ce0a17ea48f08b35dd458a85d8cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_prepend_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_prepend_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="27" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="172" bodyend="179" declfile="tests/kernel/queue/src/test_queue.h" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga5de910e4136d8ab5b3156766581e9a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_get_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_get_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="28" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="191" bodyend="195" declfile="tests/kernel/queue/src/test_queue.h" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga0ea444f9d37157c2a147423a54a5487e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_is_empty_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_is_empty_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="29" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="207" bodyend="211" declfile="tests/kernel/queue/src/test_queue.h" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga0573db4d5d51480c6de8ac0b078cf939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_peek_head_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_peek_head_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" kindref="member">k_queue_peek_head()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" kindref="member">k_queue_peek_head()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="30" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="223" bodyend="227" declfile="tests/kernel/queue/src/test_queue.h" declline="30" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga6e44e5cff0edfd4a94ca8a73e590ab5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_peek_tail_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_peek_tail_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" kindref="member">k_queue_peek_tail()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" kindref="member">k_queue_peek_tail()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="31" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="239" bodyend="243" declfile="tests/kernel/queue/src/test_queue.h" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gac1dc28c3ee4c6096c06fcc63c0b36f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_cancel_wait_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_cancel_wait_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="32" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="255" bodyend="269" declfile="tests/kernel/queue/src/test_queue.h" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaed02bb7c545405e0dd51019037e7522b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test queue alloc append and prepend. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref>, <ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref>, z_thread_heap_assign(), <ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" kindref="member">k_queue_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="34" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="300" bodyend="313" declfile="tests/kernel/queue/src/test_queue.h" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__queue_8h_1a226b3bdc41d00baf8091e23c1fc7f7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_poll_race</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_poll_race</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="35" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="336" bodyend="373" declfile="tests/kernel/queue/src/test_queue.h" declline="35" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__queue_8h_1a250b5cad2ec049439a5568b979bbb9aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_multiple_queues</definition>
        <argsstring>(void)</argsstring>
        <name>test_multiple_queues</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="36" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="387" bodyend="399" declfile="tests/kernel/queue/src/test_queue.h" declline="36" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga0e791336265c0bac2f7d7a90fa92dbe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_multithread_competition</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_multithread_competition</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test multi-threads to get data from a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Define three threads, and set a higher priority for two of them, and set a lower priority for the last one. Then Add a delay between creating the two high priority threads. Test point:<orderedlist>
<listitem><para>Any number of threads may wait on an empty FIFO simultaneously.</para>
</listitem><listitem><para>When a data item is added, it is given to the highest priority thread that has waited longest. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="37" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="479" bodyend="528" declfile="tests/kernel/queue/src/test_queue.h" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__queue_8h_1a9fa8884f88d5abdbbb63f12173e38df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_access_kernel_obj_with_priv_data</definition>
        <argsstring>(void)</argsstring>
        <name>test_access_kernel_obj_with_priv_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test access kernel object with private data using system call. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>When defining system calls, it is very important to ensure that access to the API’s private data is done exclusively through system call interfaces. Private kernel data should never be made available to user mode threads directly. For example, the k_queue APIs were intentionally not made available as they store bookkeeping information about the queue directly in the queue buffers which are visible from user mode.</para>
</listitem><listitem><para>Current test makes user thread try to access private kernel data within their associated data structures. Kernel will track that system call access to these object with the kernel object permission system. Current user thread doesn&apos;t have permission on it, trying to access &amp;pqueue kernel object will happen kernel oops, because current user thread doesn&apos;t have permission on k_queue object with private kernel data. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="38" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="427" bodyend="434" declfile="tests/kernel/queue/src/test_queue.h" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga1b66e52c74e2329141e2ba65b0d82e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_append_list_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_append_list_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" kindref="member">k_queue_append_list()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Accroding to the API k_queue_append_list to design some error condition to verify error branch of the API.<orderedlist>
<listitem><para>Verify that the list&apos;s head is empty.</para>
</listitem><listitem><para>Verify that the list&apos;s tail is empty.</para>
</listitem><listitem><para>Verify that append list to the queue when a sub-thread is waiting for data.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" kindref="member">k_queue_append_list()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="39" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="59" bodyend="93" declfile="tests/kernel/queue/src/test_queue.h" declline="39" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga9b3e57bae9d525826336df40eb898427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_merge_list_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_merge_list_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify the API k_queue_merge_slist when a slist is empty or a slist&apos;s tail is null.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="40" column="13" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="105" bodyend="124" declfile="tests/kernel/queue/src/test_queue.h" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga459dda9caedbf5d1adf693f7fcc22be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_unique_append</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_unique_append</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify <ref refid="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" kindref="member">k_queue_unique_append()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Append the same data to the queue repeatedly, see if it returns expected value. And verify operation succeed if append different data to the queue.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" kindref="member">k_queue_unique_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue.h" line="41" column="13" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="542" bodyend="555" declfile="tests/kernel/queue/src/test_queue.h" declline="41" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__TEST_FIFO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__TEST_FIFO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="irq__offload_8h" kindref="compound">irq_offload.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest__error__hook_8h" kindref="compound">ztest_error_hook.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gac2b4619b80e450b376058832ce1442af" kindref="member">test_queue_thread2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga4e99828657b64f710660f7c49c79fe9f" kindref="member">test_queue_thread2isr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gaf33994f0f39f2b46dfaf2af17ccf99fb" kindref="member">test_queue_isr2thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga625832221d8e19245df0f01989cf680e" kindref="member">test_queue_get_2threads</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga85974775e88b2531ec0523f5608f31e3" kindref="member">test_queue_get_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gadbd9ee6195052890fd1b61f4a016a8e8" kindref="member">test_queue_loop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga8dbdde7179df55dbcfff1cbebae0901b" kindref="member">test_queue_supv_to_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gab194fe3b40e86eb2c6178e372cc8d8c7" kindref="member">test_auto_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gacf4a07403bef6fa6caa29c0abbfbf960" kindref="member">test_queue_alloc_prepend_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gaa517a1497728197f4cada7f397ba6fee" kindref="member">test_queue_alloc_append_user</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga54cff7c6001a273568c1bf1470e1c873" kindref="member">test_queue_init_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gaacbdb2a8ad3d0df49424dd45472c0ff2" kindref="member">test_queue_alloc_append_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gaec1ce0a17ea48f08b35dd458a85d8cce" kindref="member">test_queue_alloc_prepend_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga5de910e4136d8ab5b3156766581e9a97" kindref="member">test_queue_get_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga0ea444f9d37157c2a147423a54a5487e" kindref="member">test_queue_is_empty_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga0573db4d5d51480c6de8ac0b078cf939" kindref="member">test_queue_peek_head_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga6e44e5cff0edfd4a94ca8a73e590ab5b" kindref="member">test_queue_peek_tail_null</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gac1dc28c3ee4c6096c06fcc63c0b36f5a" kindref="member">test_queue_cancel_wait_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1gaed02bb7c545405e0dd51019037e7522b" kindref="member">test_queue_alloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__queue_8h_1a226b3bdc41d00baf8091e23c1fc7f7fc" kindref="member">test_queue_poll_race</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__queue_8h_1a250b5cad2ec049439a5568b979bbb9aa" kindref="member">test_multiple_queues</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga0e791336265c0bac2f7d7a90fa92dbe3" kindref="member">test_queue_multithread_competition</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__queue_8h_1a9fa8884f88d5abdbbb63f12173e38df1" kindref="member">test_access_kernel_obj_with_priv_data</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga1b66e52c74e2329141e2ba65b0d82e7c" kindref="member">test_queue_append_list_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga9b3e57bae9d525826336df40eb898427" kindref="member">test_queue_merge_list_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__queue__tests_1ga459dda9caedbf5d1adf693f7fcc22be7" kindref="member">test_queue_unique_append</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__heap" kindref="compound">k_heap</ref><sp/><ref refid="test__queue_8h_1a4dc595a0cb08f33192e6b5519acd86b8" kindref="member">test_pool</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structqdata" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structqdata" kindref="compound">qdata</ref><sp/>{</highlight></codeline>
<codeline lineno="46" refid="structqdata_1a1ae3d3014b38a4371a221fe5ec0f49fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structqdata_1a1ae3d3014b38a4371a221fe5ec0f49fb" kindref="member">snode</ref>;</highlight></codeline>
<codeline lineno="47" refid="structqdata_1a5795db7bfb15a492c00bcfcc26da7da4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structqdata_1a5795db7bfb15a492c00bcfcc26da7da4" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="48" refid="structqdata_1a8c934a64260963919ccf0552f164ffed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structqdata_1a8c934a64260963919ccf0552f164ffed" kindref="member">allocated</ref>;</highlight></codeline>
<codeline lineno="49" refid="test__queue_8h_1ab220b5fe54cc9d223384a2227b750fc1" refkind="member"><highlight class="normal">}<sp/><ref refid="test__queue_8h_1ab220b5fe54cc9d223384a2227b750fc1" kindref="member">qdata_t</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/queue/src/test_queue.h"/>
  </compounddef>
</doxygen>
