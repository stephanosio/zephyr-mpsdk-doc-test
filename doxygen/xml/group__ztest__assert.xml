<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ztest__assert" kind="group">
    <compoundname>ztest_assert</compoundname>
    <title>Ztest assertion macros</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" prot="public" static="no">
        <name>zassert</name>
        <param><defname>cond</defname></param>
        <param><defname>default_msg</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>	do { \
	<ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref> _ret = z_zassert(cond, <ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref> ? (&quot;(&quot; default_msg &quot;)&quot;) : (default_msg), \
			     __FILE__, __LINE__, __func__, \
			     <ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref> ? <ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref> : &quot;&quot;, ##__VA_ARGS__); \
	if (!_ret) { \
		/* If kernel but without multithreading return. */ \
		<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(KERNEL, \
			    (<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(CONFIG_MULTITHREADING, (), (return;))), \
			    ()) \
	} \
} while (0)</initializer>
        <briefdescription>
<para>Fail the test, if <emphasis>cond</emphasis> is false. </para>
        </briefdescription>
        <detaileddescription>
<para>You probably don&apos;t need to call this macro directly. You should instead use zassert_{condition} macros below.</para>
<para>Note that when CONFIG_MULTITHREADING=n macro returns from the function. It is then expected that in that case ztest asserts will be used only in the context of the test function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional, can be NULL. Message to print if <emphasis>cond</emphasis> is false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to print if <emphasis>cond</emphasis> is false </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="100" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1gaa61a2f8c8d530d5b149fc700993b6d03" prot="public" static="no">
        <name>zassert_unreachable</name>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>					      <ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>(0, &quot;Reached unreachable code&quot;, \
					      msg, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that this function call won&apos;t be reached. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="116" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1ga2f30aa3d3bfe7281b86b725dec394466" prot="public" static="no">
        <name>zassert_true</name>
        <param><defname>cond</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>					     <ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>(cond, #cond &quot; is <ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>&quot;, \
					     msg, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>cond</emphasis> is true. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="124" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1gacc41f998b701997e4eafb6ed7b9d537c" prot="public" static="no">
        <name>zassert_false</name>
        <param><defname>cond</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>					      <ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>(!(cond), #cond &quot; is <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>&quot;, \
					      msg, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>cond</emphasis> is false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="132" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1ga33a5902873c0ce3ac6eeda2e61cecef8" prot="public" static="no">
        <name>zassert_ok</name>
        <param><defname>cond</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>					      <ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>(!(cond), #cond &quot; is non-zero&quot;, \
					      msg, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>cond</emphasis> is 0 (success) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="140" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1ga0380ea00fa3775f9a8a05faaf4de71b7" prot="public" static="no">
        <name>zassert_is_null</name>
        <param><defname>ptr</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>					       <ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>((<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>) == NULL,	    \
					       #<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref> &quot; is not NULL&quot;, \
					       msg, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>ptr</emphasis> is NULL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="148" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" prot="public" static="no">
        <name>zassert_not_null</name>
        <param><defname>ptr</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>						<ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>((<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>) != NULL,	      \
						#<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref> &quot; is NULL&quot;, msg, \
						##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>ptr</emphasis> is not NULL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="157" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" prot="public" static="no">
        <name>zassert_equal</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>					      <ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>((a) == (b),	      \
					      #a &quot; not equal to &quot; #b, \
					      <ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>a</emphasis> equals <emphasis>b</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>a</emphasis> and <emphasis>b</emphasis> won&apos;t be converted and will be compared directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="170" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" prot="public" static="no">
        <name>zassert_not_equal</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>						  <ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>((a) != (b),	      \
						  #a &quot; equal to &quot; #b, \
						  <ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>a</emphasis> does not equal <emphasis>b</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>a</emphasis> and <emphasis>b</emphasis> won&apos;t be converted and will be compared directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="183" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1ga8787deba6ec667b7b14e12b5eb3e0d53" prot="public" static="no">
        <name>zassert_equal_ptr</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>((void *)(a) == (void *)(b), #a &quot; not equal to &quot; #b, \
		<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>a</emphasis> equals <emphasis>b</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>a</emphasis> and <emphasis>b</emphasis> will be converted to <computeroutput>void *</computeroutput> before comparing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="196" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1ga50ebeb6649212f47ca2092186c32fddd" prot="public" static="no">
        <name>zassert_within</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>d</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>(((a) &gt;= ((b) - (<ref refid="asm-macro-64-bit-gnu_8h_1a6b6a358e951559f7fd95cb1da716005c" kindref="member">d</ref>))) &amp;&amp; ((a) &lt;= ((b) + (<ref refid="asm-macro-64-bit-gnu_8h_1a6b6a358e951559f7fd95cb1da716005c" kindref="member">d</ref>))),	     \
		#a &quot; not within &quot; #b &quot; +/- &quot; #<ref refid="asm-macro-64-bit-gnu_8h_1a6b6a358e951559f7fd95cb1da716005c" kindref="member">d</ref>,		     \
		<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that <emphasis>a</emphasis> is within <emphasis>b</emphasis> with delta <emphasis>d</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Delta </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="208" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1gabbfcf6345172387326d35b5d0e2bb051" prot="public" static="no">
        <name>zassert_mem_equal</name>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__ztest__assert_1gad0fb51849c8a77c88312e8b6f8333e37" kindref="member">zassert_mem_equal__</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Assert that 2 memory buffers have the same contents. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro calls the final memory comparison assertion macro. Using double expansion allows providing some arguments by macros that would expand to more than one values (ANSI-C99 defines that all the macro arguments have to be expanded before macro call).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments, see <ref refid="group__ztest__assert_1gad0fb51849c8a77c88312e8b6f8333e37" kindref="member">zassert_mem_equal__</ref> for real arguments accepted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="224" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__assert_1gad0fb51849c8a77c88312e8b6f8333e37" prot="public" static="no">
        <name>zassert_mem_equal__</name>
        <param><defname>buf</defname></param>
        <param><defname>exp</defname></param>
        <param><defname>size</defname></param>
        <param><defname>msg</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__ztest__assert_1ga4c36fe161245ebc643088c6a14f357f7" kindref="member">zassert</ref>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(buf, exp, size) == 0, #buf &quot; not equal to &quot; #exp, \
	<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Internal assert that 2 memory buffers have the same contents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is internal macro, to be used as a second expansion. See <ref refid="group__ztest__assert_1gabbfcf6345172387326d35b5d0e2bb051" kindref="member">zassert_mem_equal</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with expected contents </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to print if the assertion fails </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_assert.h" line="238" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_assert.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module provides assertions when using Ztest. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
