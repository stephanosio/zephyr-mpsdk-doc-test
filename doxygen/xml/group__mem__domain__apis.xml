<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mem__domain__apis" kind="group">
    <compoundname>mem_domain_apis</compoundname>
    <title>Memory domain APIs</title>
    <innerclass refid="structk__mem__partition" prot="public">k_mem_partition</innerclass>
    <innerclass refid="structk__mem__domain" prot="public">k_mem_domain</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__mem__domain__apis_1ga3613abdb546a66059fa3f621a2ebd41a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref></type>
        <definition>struct k_mem_domain k_mem_domain_default</definition>
        <argsstring></argsstring>
        <name>k_mem_domain_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default memory domain</para>
<para>All threads are a member of some memory domain, even if running in supervisor mode. Threads belong to this default memory domain if they haven&apos;t been added to or inherited membership from some other domain.</para>
<para>This memory domain has the z_libc_partition partition for the C library added to it if exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/app_memory/mem_domain.h" line="102" column="26" declfile="include/app_memory/mem_domain.h" declline="102" declcolumn="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_domain_init</definition>
        <argsstring>(struct k_mem_domain *domain, uint8_t num_parts, struct k_mem_partition *parts[])</argsstring>
        <name>k_mem_domain_init</name>
        <param>
          <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref> *</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_parts</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref> *</type>
          <declname>parts</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Initialize a memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize a memory domain with given name and memory partitions.</para>
<para>See documentation for <ref refid="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" kindref="member">k_mem_domain_add_partition()</ref> for details about partition constraints.</para>
<para>Do not call <ref refid="group__mem__domain__apis_1ga8a987bc85c02925685fe87213fe26c5a" kindref="member">k_mem_domain_init()</ref> on the same memory domain more than once, doing so is undefined behavior.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory domain to be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_parts</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of array items of &quot;parts&quot; parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parts</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of pointers to the memory partitions. Can be NULL if num_parts is zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid parameters supplied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>if insufficient memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/app_memory/mem_domain.h" line="129" column="12" declfile="include/app_memory/mem_domain.h" declline="129" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__domain__apis_1ga07da0cf76f8db54373b88d40be63b138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_domain_add_partition</definition>
        <argsstring>(struct k_mem_domain *domain, struct k_mem_partition *part)</argsstring>
        <name>k_mem_domain_add_partition</name>
        <param>
          <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref> *</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref> *</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Add a memory partition into a memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a memory partition into a memory domain. Partitions must conform to the following constraints:</para>
<para><itemizedlist>
<listitem><para>Partitions in the same memory domain may not overlap each other.</para>
</listitem><listitem><para>Partitions must not be defined which expose private kernel data structures or kernel objects.</para>
</listitem><listitem><para>The starting address alignment, and the partition size must conform to the constraints of the underlying memory management hardware, which varies per architecture.</para>
</listitem><listitem><para>Memory domain partitions are only intended to control access to memory from user mode threads.</para>
</listitem><listitem><para>If CONFIG_EXECUTE_XOR_WRITE is enabled, the partition must not allow both writes and execution.</para>
</listitem></itemizedlist>
</para>
<para>Violating these constraints may lead to CPU exceptions or undefined behavior.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory domain to be added a memory partition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory partition to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid parameters supplied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSPC</parametername>
</parameternamelist>
<parameterdescription>
<para>if no free partition slots available </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/app_memory/mem_domain.h" line="159" column="12" declfile="include/app_memory/mem_domain.h" declline="159" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__domain__apis_1gada4f8ce609d6b720ee88e11544555fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_domain_remove_partition</definition>
        <argsstring>(struct k_mem_domain *domain, struct k_mem_partition *part)</argsstring>
        <name>k_mem_domain_remove_partition</name>
        <param>
          <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref> *</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref> *</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Remove a memory partition from a memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a memory partition from a memory domain.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory domain to be removed a memory partition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory partition to be removed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid parameters supplied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>if no matching partition found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/app_memory/mem_domain.h" line="174" column="12" declfile="include/app_memory/mem_domain.h" declline="174" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__mem__domain__apis_1ga7b4d6148d9375f020a268961d5afde2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_domain_add_thread</definition>
        <argsstring>(struct k_mem_domain *domain, k_tid_t thread)</argsstring>
        <name>k_mem_domain_add_thread</name>
        <param>
          <type>struct <ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref> *</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="kernel_2thread_8h_1a6379f5a1f19ffbc262a6877c4f6e3647" kindref="member">k_tid_t</ref></type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Add a thread into a memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a thread into a memory domain. It will be removed from whatever memory domain it previously belonged to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory domain that the thread is going to be added into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread going to be added into the memory domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, fails otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/app_memory/mem_domain.h" line="188" column="12" declfile="include/app_memory/mem_domain.h" declline="188" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__mem__domain__apis_1ga4360fd595cb3fe3a10b58c12ae2b7ece" prot="public" static="no">
        <name>K_MEM_PARTITION_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>start</defname></param>
        <param><defname>size</defname></param>
        <param><defname>attr</defname></param>
        <initializer>	struct <ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref> name =\
		{ (<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)start, size, attr}</initializer>
        <briefdescription>
<para>Statically declare a memory partition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/app_memory/mem_domain.h" line="39" column="10" bodyfile="include/app_memory/mem_domain.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
