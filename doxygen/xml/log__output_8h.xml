<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="log__output_8h" kind="file" language="C++">
    <compoundname>log_output.h</compoundname>
    <includes refid="log__msg_8h" local="no">logging/log_msg.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes refid="atomic_8h" local="no">sys/atomic.h</includes>
    <includedby refid="log__backend_8h" local="no">include/logging/log_backend.h</includedby>
    <includedby refid="log__backend__std_8h" local="no">include/logging/log_backend_std.h</includedby>
    <includedby refid="log__output__dict_8h" local="no">include/logging/log_output_dict.h</includedby>
    <includedby refid="shell__log__backend_8h" local="no">include/shell/shell_log_backend.h</includedby>
    <incdepgraph>
      <node id="16">
        <label>logging/log_instance.h</label>
        <link refid="log__instance_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/logging/log_output.h</label>
        <link refid="log__output_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="18">
        <label>sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="21">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sys/mpsc_packet.h</label>
        <link refid="mpsc__packet_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="7">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="20">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>syscalls/log_msg2.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__msg2_8h"/>
      </node>
      <node id="26">
        <label>alloca.h</label>
      </node>
      <node id="19">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="24">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/logging/log_backend.h</label>
        <link refid="log__backend_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/logging/log_backend_std.h</label>
        <link refid="log__backend__std_8h"/>
      </node>
      <node id="3">
        <label>include/logging/log_ctrl.h</label>
        <link refid="include_2logging_2log__ctrl_8h"/>
      </node>
      <node id="1">
        <label>include/logging/log_output.h</label>
        <link refid="log__output_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/logging/log_output_dict.h</label>
        <link refid="log__output__dict_8h"/>
      </node>
      <node id="5">
        <label>include/shell/shell.h</label>
        <link refid="shell_2shell_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/shell/shell_dummy.h</label>
        <link refid="shell__dummy_8h"/>
      </node>
      <node id="4">
        <label>include/shell/shell_log_backend.h</label>
        <link refid="shell__log__backend_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/shell/shell_rtt.h</label>
        <link refid="shell__rtt_8h"/>
      </node>
      <node id="8">
        <label>include/shell/shell_telnet.h</label>
        <link refid="shell__telnet_8h"/>
      </node>
      <node id="9">
        <label>include/shell/shell_uart.h</label>
        <link refid="shell__uart_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlog__output__control__block" prot="public">log_output_control_block</innerclass>
    <innerclass refid="structlog__output" prot="public">log_output</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__log__output_1gaff76f2c3b2f84eb212def15d3ec6d8d4" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_COLORS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
<para>Flag forcing ANSI escape code colors, red (errors), yellow (warnings). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="28" column="9" bodyfile="include/logging/log_output.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1gad720632f631fcfbd3f1a57aaa6f627f4" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_TIMESTAMP</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
<para>Flag forcing timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="31" column="9" bodyfile="include/logging/log_output.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1gad6da2da1aa7b511a8a1188afe5ca4ec7" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
<para>Flag forcing timestamp formatting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="34" column="9" bodyfile="include/logging/log_output.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1ga4a9e9275950ea4f87b12fab1b311d598" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_LEVEL</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
<para>Flag forcing severity level prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="37" column="9" bodyfile="include/logging/log_output.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1gae98fc58dccaf9e3df1f8f443031238d4" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_CRLF_NONE</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(4)</initializer>
        <briefdescription>
<para>Flag preventing the logger from adding CR and LF characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="40" column="9" bodyfile="include/logging/log_output.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1ga763b331ea9bd2081e7f49d8efdf7f67c" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_CRLF_LFONLY</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(5)</initializer>
        <briefdescription>
<para>Flag forcing a single LF character for line breaks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="43" column="9" bodyfile="include/logging/log_output.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1gabdce594ece53e72121af70c8b2edb091" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_FORMAT_SYSLOG</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(6)</initializer>
        <briefdescription>
<para>Flag forcing syslog format specified in RFC 5424. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="47" column="9" bodyfile="include/logging/log_output.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1ga181df20a3a85d190c71dbb3cb51374a6" prot="public" static="no">
        <name>LOG_OUTPUT_FLAG_FORMAT_SYST</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(7)</initializer>
        <briefdescription>
<para>Flag forcing syslog format specified in mipi sys-t. This flag is deprecated and can only be used when CONFIG_LOG1 is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="52" column="9" bodyfile="include/logging/log_output.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1gaed92da28749831e61c5a53994cfff392" prot="public" static="no">
        <name>LOG_OUTPUT_TEXT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Supported backend logging format types for use with log_format_set() API to switch log format at runtime. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="57" column="9" bodyfile="include/logging/log_output.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1gac9b8fdedad3b409df90ffc5ff59d9fab" prot="public" static="no">
        <name>LOG_OUTPUT_SYST</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="59" column="9" bodyfile="include/logging/log_output.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1ga8b4a8a9810118c5ceba43b65e552ff53" prot="public" static="no">
        <name>LOG_OUTPUT_DICT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="61" column="9" bodyfile="include/logging/log_output.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__output_1gac45fa5e07fb8503ffd754128714e3ebc" prot="public" static="no">
        <name>LOG_OUTPUT_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_func</defname></param>
        <param><defname>_buf</defname></param>
        <param><defname>_size</defname></param>
        <initializer>	static struct <ref refid="structlog__output__control__block" kindref="compound">log_output_control_block</ref> _name##_control_block;	\
	static const struct <ref refid="structlog__output" kindref="compound">log_output</ref> _name = {			\
		.func = _func,						\
		.control_block = &amp;_name##_control_block,		\
		.buf = _buf,						\
		.size = _size,						\
	}</initializer>
        <briefdescription>
<para>Create <ref refid="structlog__output" kindref="compound">log_output</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function for processing output data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the output buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="117" column="9" bodyfile="include/logging/log_output.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__log__output_1gafad1ddde7ecd56132a05df92adf7166d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* log_output_func_t) (uint8_t *buf, size_t size, void *ctx)</definition>
        <argsstring>)(uint8_t *buf, size_t size, void *ctx)</argsstring>
        <name>log_output_func_t</name>
        <briefdescription>
<para>Prototype of the function processing output data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>User context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes processed, dropped or discarded.</para>
</simplesect>
<simplesect kind="note"><para>If the log output function cannot process all of the data, it is its responsibility to mark them as dropped or discarded by returning the corresponding number of bytes dropped or discarded to the caller. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="76" column="9" bodyfile="include/logging/log_output.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__log__output_1ga9826c4745647fb340160b61a43e09599" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* log_format_func_t) (const struct log_output *output, struct log_msg2 *msg2, uint32_t flags)</definition>
        <argsstring>)(const struct log_output *output, struct log_msg2 *msg2, uint32_t flags)</argsstring>
        <name>log_format_func_t</name>
        <briefdescription>
<para>Typedef of the function pointer table &quot;format_table&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structlog__output" kindref="compound">log_output</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structlog__msg2" kindref="compound">log_msg2</ref> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags used for text formatting options.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function pointer based on Kconfigs defined for backends. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="102" column="9" bodyfile="include/logging/log_output.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__log__output_1gad4a212bb513f85aecb55b2ffcc3920eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__log__output_1ga9826c4745647fb340160b61a43e09599" kindref="member">log_format_func_t</ref></type>
        <definition>log_format_func_t log_format_func_t_get</definition>
        <argsstring>(uint32_t log_type)</argsstring>
        <name>log_format_func_t_get</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>log_type</declname>
        </param>
        <briefdescription>
<para>Declaration of the get routine for function pointer table format_table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="108" column="19" declfile="include/logging/log_output.h" declline="108" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga95a599f06b043151edff015bd4c67fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_msg_process</definition>
        <argsstring>(const struct log_output *output, struct log_msg *msg, uint32_t flags)</argsstring>
        <name>log_output_msg_process</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg" kindref="compound">log_msg</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Process log messages to readable strings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is using provided context with the buffer and output function to process formatted string and output the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="135" column="6" declfile="include/logging/log_output.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga98b72dbff9cec32704ba2f223def14ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_msg2_process</definition>
        <argsstring>(const struct log_output *log_output, struct log_msg2 *msg, uint32_t flags)</argsstring>
        <name>log_output_msg2_process</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>log_output</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg2" kindref="compound">log_msg2</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Process log messages v2 to readable strings. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is using provided context with the buffer and output function to process formatted string and output the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structlog__output" kindref="compound">log_output</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="148" column="6" declfile="include/logging/log_output.h" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga99fdc938f7222cdcb2a3dcff7958e7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_msg2_syst_process</definition>
        <argsstring>(const struct log_output *log_output, struct log_msg2 *msg, uint32_t flag)</argsstring>
        <name>log_output_msg2_syst_process</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>log_output</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg2" kindref="compound">log_msg2</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Process log messages v2 to SYS-T format. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is using provided context with the buffer and output function to process formatted string and output the data in sys-t log output format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="structlog__output" kindref="compound">log_output</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="160" column="6" declfile="include/logging/log_output.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1gad00a7a33c0e94870db5737cdb4ba6439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_string</definition>
        <argsstring>(const struct log_output *output, struct log_msg_ids src_level, uint32_t timestamp, const char *fmt, va_list ap, uint32_t flags)</argsstring>
        <name>log_output_string</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref></type>
          <declname>src_level</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Process log string. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is formatting provided string adding optional prefixes and postfixes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structlog__output" kindref="compound">log_output</ref> instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log source and level structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>String. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>String arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="176" column="6" declfile="include/logging/log_output.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga659752b375c02e3593de2c582fc91c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_hexdump</definition>
        <argsstring>(const struct log_output *output, struct log_msg_ids src_level, uint32_t timestamp, const char *metadata, const uint8_t *data, uint32_t length, uint32_t flags)</argsstring>
        <name>log_output_hexdump</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>struct <ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref></type>
          <declname>src_level</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Process log hexdump. </para>
        </briefdescription>
        <detaileddescription>
<para>Function is formatting provided hexdump adding optional prefixes and postfixes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structlog__output" kindref="compound">log_output</ref> instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log source and level structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>String. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="194" column="6" declfile="include/logging/log_output.h" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga10bbd405659afefdc7ffc686cb5a4f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_dropped_process</definition>
        <argsstring>(const struct log_output *output, uint32_t cnt)</argsstring>
        <name>log_output_dropped_process</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
<para>Process dropped messages indication. </para>
        </briefdescription>
        <detaileddescription>
<para>Function prints error message indicating lost log messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dropped messages. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="206" column="6" declfile="include/logging/log_output.h" declline="206" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga22f57a1cd1f4687536108ba2d483bb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_flush</definition>
        <argsstring>(const struct log_output *output)</argsstring>
        <name>log_output_flush</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Flush output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log output instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="212" column="6" declfile="include/logging/log_output.h" declline="212" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1gaca0280abfe17eea27f62c770d91aabcb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_output_ctx_set</definition>
        <argsstring>(const struct log_output *output, void *ctx)</argsstring>
        <name>log_output_ctx_set</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Function for setting user context passed to the output function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>User context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="219" column="20" bodyfile="include/logging/log_output.h" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga473442b81d871234e264bf4005da27cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void log_output_hostname_set</definition>
        <argsstring>(const struct log_output *output, const char *hostname)</argsstring>
        <name>log_output_hostname_set</name>
        <param>
          <type>const struct <ref refid="structlog__output" kindref="compound">log_output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>hostname</declname>
        </param>
        <briefdescription>
<para>Function for setting hostname of this device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log output instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>Hostname of this device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="230" column="20" bodyfile="include/logging/log_output.h" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1ga4e69b802ec5caef8178b0de88fc68412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log_output_timestamp_freq_set</definition>
        <argsstring>(uint32_t freq)</argsstring>
        <name>log_output_timestamp_freq_set</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>freq</declname>
        </param>
        <briefdescription>
<para>Set timestamp frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="240" column="6" declfile="include/logging/log_output.h" declline="240" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__log__output_1gaf7db765b823f4408fb8424d1ff8fb4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t log_output_timestamp_to_us</definition>
        <argsstring>(uint32_t timestamp)</argsstring>
        <name>log_output_timestamp_to_us</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Convert timestamp of the message to us. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Message timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timestamp value in us. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log_output.h" line="248" column="10" declfile="include/logging/log_output.h" declline="248" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_OUTPUT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_OUTPUT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log__msg_8h" kindref="compound">logging/log_msg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">sys/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="group__log__output_1gaff76f2c3b2f84eb212def15d3ec6d8d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_COLORS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="group__log__output_1gad720632f631fcfbd3f1a57aaa6f627f4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_TIMESTAMP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="group__log__output_1gad6da2da1aa7b511a8a1188afe5ca4ec7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__log__output_1ga4a9e9275950ea4f87b12fab1b311d598" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_LEVEL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__log__output_1gae98fc58dccaf9e3df1f8f443031238d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_CRLF_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__log__output_1ga763b331ea9bd2081e7f49d8efdf7f67c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_CRLF_LFONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="group__log__output_1gabdce594ece53e72121af70c8b2edb091" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_FORMAT_SYSLOG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__log__output_1ga181df20a3a85d190c71dbb3cb51374a6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_FLAG_FORMAT_SYST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group__log__output_1gaed92da28749831e61c5a53994cfff392" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_TEXT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="group__log__output_1gac9b8fdedad3b409df90ffc5ff59d9fab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_SYST<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__log__output_1ga8b4a8a9810118c5ceba43b65e552ff53" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_DICT<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__log__output_1gafad1ddde7ecd56132a05df92adf7166d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__log__output_1gafad1ddde7ecd56132a05df92adf7166d" kindref="member">log_output_func_t</ref>)(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@brief<sp/>Control<sp/>block<sp/>structure<sp/>for<sp/>log_output<sp/>instance.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structlog__output__control__block" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__output__control__block" kindref="compound">log_output_control_block</ref><sp/>{</highlight></codeline>
<codeline lineno="80" refid="structlog__output__control__block_1a41fd93873fa26167a8272863c5b2d8ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="structlog__output__control__block_1a41fd93873fa26167a8272863c5b2d8ac" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="81" refid="structlog__output__control__block_1ac4d4c24e918f87203e8505edd45863bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structlog__output__control__block_1ac4d4c24e918f87203e8505edd45863bb" kindref="member">ctx</ref>;</highlight></codeline>
<codeline lineno="82" refid="structlog__output__control__block_1a9efdfb7051b5bbba8f4f7f758b2673c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structlog__output__control__block_1a9efdfb7051b5bbba8f4f7f758b2673c3" kindref="member">hostname</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structlog__output" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>{</highlight></codeline>
<codeline lineno="87" refid="structlog__output_1aea6a7a7dee29f474d55b726ca3787f95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__log__output_1gafad1ddde7ecd56132a05df92adf7166d" kindref="member">log_output_func_t</ref><sp/><ref refid="structlog__output_1aea6a7a7dee29f474d55b726ca3787f95" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="88" refid="structlog__output_1a5228e6c2111cb28a8a69e4d99443dd55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__output__control__block" kindref="compound">log_output_control_block</ref><sp/>*<ref refid="structlog__output_1a5228e6c2111cb28a8a69e4d99443dd55" kindref="member">control_block</ref>;</highlight></codeline>
<codeline lineno="89" refid="structlog__output_1af43d26be4e52647c2b281362a01d1a10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structlog__output_1af43d26be4e52647c2b281362a01d1a10" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="90" refid="structlog__output_1af88be3afe8b2fc2f7acb703a93992030" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structlog__output_1af88be3afe8b2fc2f7acb703a93992030" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="group__log__output_1ga9826c4745647fb340160b61a43e09599" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__log__output_1ga9826c4745647fb340160b61a43e09599" kindref="member">log_format_func_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__msg2" kindref="compound">log_msg2</ref><sp/>*msg2,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="group__log__output_1gad4a212bb513f85aecb55b2ffcc3920eb" refkind="member"><highlight class="normal"><ref refid="group__log__output_1ga9826c4745647fb340160b61a43e09599" kindref="member">log_format_func_t</ref><sp/><ref refid="group__log__output_1gad4a212bb513f85aecb55b2ffcc3920eb" kindref="member">log_format_func_t_get</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>log_type);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="group__log__output_1gac45fa5e07fb8503ffd754128714e3ebc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_OUTPUT_DEFINE(_name,<sp/>_func,<sp/>_buf,<sp/>_size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>log_output_control_block<sp/>_name##_control_block;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>log_output<sp/>_name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/>_func,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.control_block<sp/>=<sp/>&amp;_name##_control_block,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buf<sp/>=<sp/>_buf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/>=<sp/>_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="group__log__output_1ga95a599f06b043151edff015bd4c67fbe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga95a599f06b043151edff015bd4c67fbe" kindref="member">log_output_msg_process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__msg" kindref="compound">log_msg</ref><sp/>*<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="group__log__output_1ga98b72dbff9cec32704ba2f223def14ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga98b72dbff9cec32704ba2f223def14ef" kindref="member">log_output_msg2_process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*<ref refid="structlog__output" kindref="compound">log_output</ref>,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__msg2" kindref="compound">log_msg2</ref><sp/>*<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="group__log__output_1ga99fdc938f7222cdcb2a3dcff7958e7b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga99fdc938f7222cdcb2a3dcff7958e7b5" kindref="member">log_output_msg2_syst_process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*<ref refid="structlog__output" kindref="compound">log_output</ref>,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__msg2" kindref="compound">log_msg2</ref><sp/>*<ref refid="timer_2cycle64_2src_2main_8c_1aa39a15fe6277f55e2fda62d3a6bf49da" kindref="member">msg</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="thread__competition_8c_1a9f266685e63dd18f7693940ba5660e9f" kindref="member">flag</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="group__log__output_1gad00a7a33c0e94870db5737cdb4ba6439" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1gad00a7a33c0e94870db5737cdb4ba6439" kindref="member">log_output_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref><sp/>src_level,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>timestamp,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="group__log__output_1ga659752b375c02e3593de2c582fc91c93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga659752b375c02e3593de2c582fc91c93" kindref="member">log_output_hexdump</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__msg__ids" kindref="compound">log_msg_ids</ref><sp/>src_level,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>timestamp,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*metadata,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>length,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="group__log__output_1ga10bbd405659afefdc7ffc686cb5a4f99" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga10bbd405659afefdc7ffc686cb5a4f99" kindref="member">log_output_dropped_process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>cnt);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="group__log__output_1ga22f57a1cd1f4687536108ba2d483bb06" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga22f57a1cd1f4687536108ba2d483bb06" kindref="member">log_output_flush</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="group__log__output_1gaca0280abfe17eea27f62c770d91aabcb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1gaca0280abfe17eea27f62c770d91aabcb" kindref="member">log_output_ctx_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;<ref refid="structlog__output_1a5228e6c2111cb28a8a69e4d99443dd55" kindref="member">control_block</ref>-&gt;<ref refid="structlog__output__control__block_1ac4d4c24e918f87203e8505edd45863bb" kindref="member">ctx</ref><sp/>=<sp/>ctx;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="group__log__output_1ga473442b81d871234e264bf4005da27cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga473442b81d871234e264bf4005da27cc" kindref="member">log_output_hostname_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlog__output" kindref="compound">log_output</ref><sp/>*output,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;<ref refid="structlog__output_1a5228e6c2111cb28a8a69e4d99443dd55" kindref="member">control_block</ref>-&gt;<ref refid="structlog__output__control__block_1a9efdfb7051b5bbba8f4f7f758b2673c3" kindref="member">hostname</ref><sp/>=<sp/>hostname;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="group__log__output_1ga4e69b802ec5caef8178b0de88fc68412" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__log__output_1ga4e69b802ec5caef8178b0de88fc68412" kindref="member">log_output_timestamp_freq_set</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>freq);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="group__log__output_1gaf7db765b823f4408fb8424d1ff8fb4e1" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__log__output_1gaf7db765b823f4408fb8424d1ff8fb4e1" kindref="member">log_output_timestamp_to_us</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>timestamp);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_LOGGING_LOG_OUTPUT_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/logging/log_output.h"/>
  </compounddef>
</doxygen>
