<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__condvar__apis" kind="group">
    <compoundname>condvar_apis</compoundname>
    <title>Condition Variables APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__condvar__apis_1gac9b497c56cc4642965afa6c0c6d7ecfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_init</definition>
        <argsstring>(struct k_condvar *condvar)</argsstring>
        <name>k_condvar_init</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <briefdescription>
<para>Initialize a condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition variable created successfully </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2758" column="6" declfile="include/kernel.h" declline="2758" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__condvar__apis_1ga0376a8f7dc6e4f1e1eed55940f43015b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_signal</definition>
        <argsstring>(struct k_condvar *condvar)</argsstring>
        <name>k_condvar_signal</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <briefdescription>
<para>Signals one thread that is pending on the condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2766" column="6" declfile="include/kernel.h" declline="2766" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__condvar__apis_1gad2e46a7b9e1bc934fd1f5cb38dde40d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_broadcast</definition>
        <argsstring>(struct k_condvar *condvar)</argsstring>
        <name>k_condvar_broadcast</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <briefdescription>
<para>Unblock all threads that are pending on the condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer with number of woken threads on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2775" column="6" declfile="include/kernel.h" declline="2775" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__condvar__apis_1gab2e1d05db4f954755f430ca894e44dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_condvar_wait</definition>
        <argsstring>(struct k_condvar *condvar, struct k_mutex *mutex, k_timeout_t timeout)</argsstring>
        <name>k_condvar_wait</name>
        <param>
          <type>struct <ref refid="structk__condvar" kindref="compound">k_condvar</ref> *</type>
          <declname>condvar</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits on the condition variable releasing the mutex lock. </para>
        </briefdescription>
        <detaileddescription>
<para>Automically releases the currently owned mutex, blocks the current thread waiting on the condition variable specified by <emphasis>condvar</emphasis>, and finally acquires the mutex again.</para>
<para>The waiting thread unblocks only after another thread calls k_condvar_signal, or k_condvar_broadcast with the same condition variable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condvar</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <computeroutput><ref refid="structk__condvar" kindref="compound">k_condvar</ref></computeroutput> structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the condition variable or one of the special values K_NO_WAIT and K_FOREVER. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2794" column="6" declfile="include/kernel.h" declline="2794" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__condvar__apis_1ga770816651e25f7e7dae992a0b2260c21" prot="public" static="no">
        <name>K_CONDVAR_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__condvar" kindref="compound">k_condvar</ref>, name) =                             \
		Z_CONDVAR_INITIALIZER(name)</initializer>
        <briefdescription>
<para>Statically define and initialize a condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para>The condition variable can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_condvar<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the condition variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2807" column="9" bodyfile="include/kernel.h" bodystart="2807" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
