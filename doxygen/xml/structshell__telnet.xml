<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structshell__telnet" kind="struct" language="C++" prot="public">
    <compoundname>shell_telnet</compoundname>
    <includes refid="shell__telnet_8h" local="no">shell_telnet.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structshell__telnet_1a24d3153d685bb02815de5c3fc7384e3f" prot="public" static="no" mutable="no">
        <type><ref refid="group__shell__api_1ga265807c2d8eba7b9ea633968627e085d" kindref="member">shell_transport_handler_t</ref></type>
        <definition>shell_transport_handler_t shell_telnet::shell_handler</definition>
        <argsstring></argsstring>
        <name>shell_handler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handler function registered by shell. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="30" column="27" bodyfile="include/shell/shell_telnet.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structshell__telnet_1a4aca00a70a037d7d4564c9e8f6600225" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* shell_telnet::shell_context</definition>
        <argsstring></argsstring>
        <name>shell_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Context registered by shell. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="33" column="6" bodyfile="include/shell/shell_telnet.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structshell__telnet_1a753f176c0d29c02a97899c79d62d2f1e" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structshell__telnet__line__buf" kindref="compound">shell_telnet_line_buf</ref></type>
        <definition>struct shell_telnet_line_buf shell_telnet::line_out</definition>
        <argsstring></argsstring>
        <name>line_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Buffer for outgoing line. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="36" column="28" bodyfile="include/shell/shell_telnet.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structshell__telnet_1a4181dc4c7835e0c4b5cf3e2f80b5b895" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnet__context" kindref="compound">net_context</ref> *</type>
        <definition>struct net_context* shell_telnet::client_ctx</definition>
        <argsstring></argsstring>
        <name>client_ctx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network context of TELNET client. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="39" column="18" bodyfile="include/shell/shell_telnet.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structshell__telnet_1af3d3839f8eccd43658e6b14c3fefe174" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__fifo" kindref="compound">k_fifo</ref></type>
        <definition>struct k_fifo shell_telnet::rx_fifo</definition>
        <argsstring></argsstring>
        <name>rx_fifo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RX packet FIFO. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="42" column="13" bodyfile="include/shell/shell_telnet.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structshell__telnet_1a1b3150a2d968fb8bb9bfe46f1b940979" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref></type>
        <definition>struct k_work_delayable shell_telnet::send_work</definition>
        <argsstring></argsstring>
        <name>send_work</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The delayed work is used to send non-lf terminated output that has been around for &quot;too long&quot;. This will prove to be useful to send the shell prompt for instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="48" column="23" bodyfile="include/shell/shell_telnet.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structshell__telnet_1adc057a32a6b48f27a39cdf2e428cd65a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work__sync" kindref="compound">k_work_sync</ref></type>
        <definition>struct k_work_sync shell_telnet::work_sync</definition>
        <argsstring></argsstring>
        <name>work_sync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="49" column="18" bodyfile="include/shell/shell_telnet.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structshell__telnet_1aaa088d04a181344111d2675f3e22a49b" prot="public" static="no" mutable="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool shell_telnet::output_lock</definition>
        <argsstring></argsstring>
        <name>output_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If set, no output is sent to the TELNET client. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell_telnet.h" line="52" column="6" bodyfile="include/shell/shell_telnet.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>TELNET-based shell transport. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="9">
        <label>__thread_entry</label>
      </node>
      <node id="8">
        <label>_callee_saved</label>
      </node>
      <node id="11">
        <label>_mem_domain_info</label>
      </node>
      <node id="23">
        <label>_slist</label>
      </node>
      <node id="21">
        <label>_snode</label>
      </node>
      <node id="16">
        <label>_thread_arch</label>
      </node>
      <node id="7">
        <label>_thread_base</label>
      </node>
      <node id="10">
        <label>_thread_stack_info</label>
      </node>
      <node id="24">
        <label>_timeout</label>
      </node>
      <node id="5">
        <label>_wait_q_t</label>
      </node>
      <node id="18">
        <label>k_fifo</label>
        <link refid="structk__fifo"/>
      </node>
      <node id="13">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="14" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>k_mutex</label>
        <link refid="structk__mutex"/>
        <childnode refid="5" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="6">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="7" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="21" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>k_work_delayable</label>
        <link refid="structk__work__delayable"/>
        <childnode refid="20" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="6" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>k_work_sync</label>
        <link refid="structk__work__sync"/>
      </node>
      <node id="3">
        <label>net_context</label>
        <link refid="structnet__context"/>
        <childnode refid="4" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>remote</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>connect_cb</edgelabel>
          <edgelabel>recv_cb</edgelabel>
          <edgelabel>send_cb</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>shell_telnet</label>
        <link refid="structshell__telnet"/>
        <childnode refid="2" relation="usage">
          <edgelabel>line_out</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>client_ctx</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>rx_fifo</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>send_work</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>work_sync</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>shell_telnet_line_buf</label>
        <link refid="structshell__telnet__line__buf"/>
      </node>
      <node id="17">
        <label>sockaddr</label>
        <link refid="structsockaddr"/>
      </node>
      <node id="14">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="12">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/shell/shell_telnet.h" line="28" column="1" bodyfile="include/shell/shell_telnet.h" bodystart="28" bodyend="53"/>
    <listofallmembers>
      <member refid="structshell__telnet_1a4181dc4c7835e0c4b5cf3e2f80b5b895" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>client_ctx</name></member>
      <member refid="structshell__telnet_1a753f176c0d29c02a97899c79d62d2f1e" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>line_out</name></member>
      <member refid="structshell__telnet_1aaa088d04a181344111d2675f3e22a49b" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>output_lock</name></member>
      <member refid="structshell__telnet_1af3d3839f8eccd43658e6b14c3fefe174" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>rx_fifo</name></member>
      <member refid="structshell__telnet_1a1b3150a2d968fb8bb9bfe46f1b940979" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>send_work</name></member>
      <member refid="structshell__telnet_1a4aca00a70a037d7d4564c9e8f6600225" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>shell_context</name></member>
      <member refid="structshell__telnet_1a24d3153d685bb02815de5c3fc7384e3f" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>shell_handler</name></member>
      <member refid="structshell__telnet_1adc057a32a6b48f27a39cdf2e428cd65a" prot="public" virt="non-virtual"><scope>shell_telnet</scope><name>work_sync</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
