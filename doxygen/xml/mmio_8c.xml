<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mmio_8c" kind="file" language="C++">
    <compoundname>mmio.c</compoundname>
    <includes refid="ztest_8h" local="no">ztest.h</includes>
    <includes local="no">device.h</includes>
    <incdepgraph>
      <node id="17">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="66">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="65">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="29">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="36">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="38">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="34">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="32">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="40">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="41">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="37">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="35">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="39">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="75">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="45">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="51">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="28">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="42">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="23">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="19">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="86">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="87">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="13">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="8">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="64">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="88">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="81">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="2">
        <label>ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ztest_mock.h</label>
        <link refid="ztest__mock_8h"/>
      </node>
      <node id="15">
        <label>ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/kernel/device/src/mmio.c</label>
        <link refid="mmio_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>alloca.h</label>
      </node>
      <node id="68">
        <label>arch/cpu.h</label>
      </node>
      <node id="91">
        <label>device.h</label>
      </node>
      <node id="31">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="30">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="43">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="84">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="89">
        <label>syscalls/ztest_test.h</label>
      </node>
      <node id="90">
        <label>tc_util.h</label>
      </node>
      <node id="9">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structfoo__single__dev__data" prot="public">foo_single_dev_data</innerclass>
    <innerclass refid="structfoo__single__config__info" prot="public">foo_single_config_info</innerclass>
    <innerclass refid="structfoo__mult__dev__data" prot="public">foo_mult_dev_data</innerclass>
    <innerclass refid="structfoo__mult__config__info" prot="public">foo_mult_config_info</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" prot="public" static="no">
        <name>DT_DRV_COMPAT</name>
        <initializer>fakedriver</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="10" column="9" bodyfile="tests/kernel/device/src/mmio.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmio_8c_1aa90b045b0cf3a7fe70c69ba16eb135cc" prot="public" static="no">
        <name>DEV_DATA</name>
        <param><defname>dev</defname></param>
        <initializer>((struct <ref refid="structfoo__mult__dev__data" kindref="compound">foo_mult_dev_data</ref> *)((dev)-&gt;<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="122" column="9" bodyfile="tests/kernel/device/src/mmio.c" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mmio_8c_1ab5c3864067257693d9bef98c3fe8fc2b" prot="public" static="no">
        <name>DEV_CFG</name>
        <param><defname>dev</defname></param>
        <initializer>((struct <ref refid="structfoo__mult__config__info" kindref="compound">foo_mult_config_info</ref> *)((dev)-&gt;config))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="123" column="9" bodyfile="tests/kernel/device/src/mmio.c" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mmio_8c_1ad7a981b5d46a7b99723aa293be4ed718" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structfoo__single__dev__data" kindref="compound">foo_single_dev_data</ref></type>
        <definition>struct foo_single_dev_data foo0_data</definition>
        <argsstring></argsstring>
        <name>foo0_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="21" column="26" bodyfile="tests/kernel/device/src/mmio.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mmio_8c_1a4f74a690d609501d8fb44857128dfc71" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structfoo__single__config__info" kindref="compound">foo_single_config_info</ref></type>
        <definition>const struct foo_single_config_info foo0_config</definition>
        <argsstring></argsstring>
        <name>foo0_config</name>
        <initializer>= {
	<ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(0)),
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="27" column="35" bodyfile="tests/kernel/device/src/mmio.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mmio_8c_1abba6687db938eb6fc883fe320b7aab0d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structfoo__mult__dev__data" kindref="compound">foo_mult_dev_data</ref></type>
        <definition>struct foo_mult_dev_data foo12_data</definition>
        <argsstring></argsstring>
        <name>foo12_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="110" column="24" bodyfile="tests/kernel/device/src/mmio.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mmio_8c_1a5442c817c78ad04be44912c545f917a8" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structfoo__mult__config__info" kindref="compound">foo_mult_config_info</ref></type>
        <definition>const struct foo_mult_config_info foo12_config</definition>
        <argsstring></argsstring>
        <name>foo12_config</name>
        <initializer>= {
	<ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT</ref>(corge, <ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(1)),
	<ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT</ref>(grault, <ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(2))
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="117" column="33" bodyfile="tests/kernel/device/src/mmio.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mmio_8c_1ae6ce6d9c94383e984519a43483795c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int foo_single_init</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>foo_single_init</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="31" column="5" bodyfile="tests/kernel/device/src/mmio.c" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga94becc62b58ed8d05922e5c359d05e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_single</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_single</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test DEVICE_MMIO_* macros. </para>
        </briefdescription>
        <detaileddescription>
<para>We show that we can make mapping calls and that the address returned by <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> is not NULL, indicating that the kernel mapped stuff somewhere.</para>
<para>We also perform some checks depending on configuration:<itemizedlist>
<listitem><para>If MMIO addresses are maintained in RAM, check that the ROM struct was populated correctly.</para>
</listitem><listitem><para>If MMIO addresses are maintained in ROM, check that the DTS info, the ROM region, and the result of <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> all point to the same address. We show that no extra memory is used in dev_data. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="61" column="6" bodyfile="tests/kernel/device/src/mmio.c" bodystart="61" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8c_1af0c463d8093d6c4913ca2ce725e5f5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int foo_mult_init</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>foo_mult_init</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="125" column="5" bodyfile="tests/kernel/device/src/mmio.c" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga7cef29bf76d36c28ebed39fe0553bbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_multiple</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_multiple</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test DEVICE_MMIO_NAMED_* macros. </para>
        </briefdescription>
        <detaileddescription>
<para>We show that we can make mapping calls and that the address returned by <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> is not NULL, indicating that the kernel mapped stuff somewhere.</para>
<para>We show that this works for a device instance that has two named regions, &apos;corge&apos; and &apos;grault&apos; that respectively come from DTS instances 1 and 2.</para>
<para>We also perform some checks depending on configuration:<itemizedlist>
<listitem><para>If MMIO addresses are maintained in RAM, check that the ROM struct was populated correctly.</para>
</listitem><listitem><para>If MMIO addresses are maintained in ROM, check that the DTS info, the ROM region, and the result of <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> all point to the same address. We show that no extra memory is used in dev_data. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="158" column="6" bodyfile="tests/kernel/device/src/mmio.c" bodystart="158" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8c_1a0742746a5d8aeb0e2dcdc47317880171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DEVICE_MMIO_TOPLEVEL</definition>
        <argsstring>(foo3, DT_DRV_INST(3))</argsstring>
        <name>DEVICE_MMIO_TOPLEVEL</name>
        <param>
          <type>foo3</type>
        </param>
        <param>
          <type><ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(3)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="199" column="1" declfile="tests/kernel/device/src/mmio.c" declline="199" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8c_1aead10a0717deea7ba879f5dd9dbe5733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DEVICE_MMIO_TOPLEVEL_STATIC</definition>
        <argsstring>(foo4, DT_DRV_INST(4))</argsstring>
        <name>DEVICE_MMIO_TOPLEVEL_STATIC</name>
        <param>
          <type>foo4</type>
        </param>
        <param>
          <type><ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(4)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="200" column="1" declfile="tests/kernel/device/src/mmio.c" declline="200" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__device__tests_1ga99c7d3c57d409e35cc0e7f7ec3e91acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_toplevel</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_toplevel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test DEVICE_MMIO_TOPLEVEL_* macros. </para>
        </briefdescription>
        <detaileddescription>
<para>We show that we can make mapping calls and that the address returned by <ref refid="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" kindref="member">DEVICE_MMIO_TOPLEVEL_GET()</ref> is not NULL, indicating that the kernel mapped stuff somewhere.</para>
<para>We do this for two different MMIO toplevel instances; one declared statically and one not.</para>
<para>We also perform some checks depending on configuration:<itemizedlist>
<listitem><para>If MMIO addresses are maintained in RAM, check that the ROM struct was populated correctly.</para>
</listitem><listitem><para>If MMIO addresses are maintained in ROM, check that the DTS info, the ROM region, and the result of <ref refid="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" kindref="member">DEVICE_MMIO_TOPLEVEL_GET()</ref> all point to the same address </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="221" column="6" bodyfile="tests/kernel/device/src/mmio.c" bodystart="221" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="mmio_8c_1ad170bb634d07ca11c8a3cf1be62fc877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_mmio_device_map</definition>
        <argsstring>(void)</argsstring>
        <name>test_mmio_device_map</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> test </para>
        </briefdescription>
        <detaileddescription>
<para>Show that <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> populates a memory address. We don&apos;t do anything else; tests for k_map() will prove that virtual memory mapping actually works. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/device/src/mmio.c" line="262" column="6" bodyfile="tests/kernel/device/src/mmio.c" bodystart="262" bodyend="273"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ztest_8h" kindref="compound">ztest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DT_DRV_COMPAT<sp/><sp/><sp/>fakedriver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Driver<sp/>with<sp/>a<sp/>single<sp/>MMIO<sp/>region<sp/>to<sp/>manage</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structfoo__single__dev__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__single__dev__data" kindref="compound">foo_single_dev_data</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfoo__single__dev__data_1aa976242d14a09f78cfdb827d1f14754f" kindref="member">DEVICE_MMIO_RAM</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfoo__single__dev__data_1aceea8e53ef41849a8fdd6d8cc203ef6c" kindref="member">baz</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__single__dev__data" kindref="compound">foo_single_dev_data</ref><sp/><ref refid="mmio_8c_1ad7a981b5d46a7b99723aa293be4ed718" kindref="member">foo0_data</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structfoo__single__config__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__single__config__info" kindref="compound">foo_single_config_info</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfoo__single__config__info_1aec0dda710588a08becde3d55c14323f9" kindref="member">DEVICE_MMIO_ROM</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__single__config__info" kindref="compound">foo_single_config_info</ref><sp/><ref refid="mmio_8c_1a4f74a690d609501d8fb44857128dfc71" kindref="member">foo0_config</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(0)),</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mmio_8c_1ae6ce6d9c94383e984519a43483795c71" kindref="member">foo_single_init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" kindref="member">DEVICE_MMIO_MAP</ref>(dev,<sp/><ref refid="mem__manage_8h_1aae7605452be94d1bd6e0364e9db113c6" kindref="member">K_MEM_CACHE_NONE</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>fake<sp/>API<sp/>pointer,<sp/>we<sp/>don&apos;t<sp/>use<sp/>it<sp/>at<sp/>all<sp/>for<sp/>this<sp/>suite<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE</ref>(foo0,<sp/></highlight><highlight class="stringliteral">&quot;foo0&quot;</highlight><highlight class="normal">,<sp/><ref refid="mmio_8c_1ae6ce6d9c94383e984519a43483795c71" kindref="member">foo_single_init</ref>,<sp/>NULL,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="mmio_8c_1ad7a981b5d46a7b99723aa293be4ed718" kindref="member">foo0_data</ref>,<sp/>&amp;<ref refid="mmio_8c_1a4f74a690d609501d8fb44857128dfc71" kindref="member">foo0_config</ref>,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POST_KERNEL,<sp/>CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0xDEADBEEF);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga94becc62b58ed8d05922e5c359d05e5f" kindref="member">test_mmio_single</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_device_mmio_rom<sp/>*rom;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(</highlight><highlight class="stringliteral">&quot;foo0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>regs;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(dev,<sp/></highlight><highlight class="stringliteral">&quot;null<sp/>foo0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regs<sp/>=<sp/><ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET</ref>(dev);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom<sp/>=<sp/><ref refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" kindref="member">DEVICE_MMIO_ROM_PTR</ref>(dev);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>sign<sp/>that<sp/>something<sp/>didn&apos;t<sp/>get<sp/>initialized,<sp/>shouldn&apos;t<sp/>ever</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>be<sp/>0</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(regs,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>regs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>config<sp/>info<sp/>should<sp/>just<sp/>contain<sp/>the<sp/>addr/size<sp/>from<sp/>DTS.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>best<sp/>we<sp/>can<sp/>check<sp/>with<sp/>&apos;regs&apos;<sp/>is<sp/>that<sp/>it&apos;s<sp/>nonzero,<sp/>as<sp/>if</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>an<sp/>MMU<sp/>is<sp/>enabled,<sp/>the<sp/>kernel<sp/>chooses<sp/>the<sp/>virtual<sp/>address<sp/>to</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>place<sp/>it<sp/>at.<sp/>We<sp/>don&apos;t<sp/>otherwise<sp/>look<sp/>at<sp/>`regs`;<sp/>other<sp/>tests<sp/>will</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>prove<sp/>that<sp/>k_map()<sp/>actually<sp/>works.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom-&gt;phys_addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(0),<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>phys_addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom-&gt;size,<sp/><ref refid="group__devicetree-inst_1gaa7cea29435e1db59470302abb5ee88dd" kindref="member">DT_INST_REG_SIZE</ref>(0),<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Config<sp/>info<sp/>contains<sp/>base<sp/>address,<sp/>which<sp/>should<sp/>be<sp/>the<sp/>base</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>address<sp/>from<sp/>DTS,<sp/>and<sp/>regs<sp/>should<sp/>have<sp/>the<sp/>same<sp/>value.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>this<sp/>configuration<sp/>dev_data<sp/>has<sp/>nothing<sp/>mmio-related<sp/>in<sp/>it</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom-&gt;addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(0),<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(regs,<sp/>rom-&gt;addr,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>the<sp/>baz<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfoo__single__dev__data" kindref="compound">foo_single_dev_data</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;too<sp/>big<sp/>foo_single_dev_data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>Driver<sp/>with<sp/>multiple<sp/>MMIO<sp/>regions<sp/>to<sp/>manage</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structfoo__mult__dev__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__mult__dev__data" kindref="compound">foo_mult_dev_data</ref><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfoo__mult__dev__data_1ad9c39d51697fff6dfeac8b8571fc2660" kindref="member">baz</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfoo__mult__dev__data_1a8da751aaf81236ab4611a31819e9d20b" kindref="member">DEVICE_MMIO_NAMED_RAM</ref>(corge);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfoo__mult__dev__data_1a8da751aaf81236ab4611a31819e9d20b" kindref="member">DEVICE_MMIO_NAMED_RAM</ref>(grault);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__mult__dev__data" kindref="compound">foo_mult_dev_data</ref><sp/><ref refid="mmio_8c_1abba6687db938eb6fc883fe320b7aab0d" kindref="member">foo12_data</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structfoo__mult__config__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__mult__config__info" kindref="compound">foo_mult_config_info</ref><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfoo__mult__config__info_1a3a8b780346838b5464c7a19cc9af3e42" kindref="member">DEVICE_MMIO_NAMED_ROM</ref>(corge);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfoo__mult__config__info_1a3a8b780346838b5464c7a19cc9af3e42" kindref="member">DEVICE_MMIO_NAMED_ROM</ref>(grault);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfoo__mult__config__info" kindref="compound">foo_mult_config_info</ref><sp/><ref refid="mmio_8c_1a5442c817c78ad04be44912c545f917a8" kindref="member">foo12_config</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT</ref>(corge,<sp/><ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(1)),</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT</ref>(grault,<sp/><ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(2))</highlight></codeline>
<codeline lineno="120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEV_DATA(dev)<sp/><sp/><sp/>((struct<sp/>foo_mult_dev_data<sp/>*)((dev)-&gt;data))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEV_CFG(dev)<sp/><sp/><sp/><sp/>((struct<sp/>foo_mult_config_info<sp/>*)((dev)-&gt;config))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mmio_8c_1af0c463d8093d6c4913ca2ce725e5f5d3" kindref="member">foo_mult_init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP</ref>(dev,<sp/>corge,<sp/><ref refid="mem__manage_8h_1aae7605452be94d1bd6e0364e9db113c6" kindref="member">K_MEM_CACHE_NONE</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP</ref>(dev,<sp/>grault,<sp/><ref refid="mem__manage_8h_1aae7605452be94d1bd6e0364e9db113c6" kindref="member">K_MEM_CACHE_NONE</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="group__device__model_1gad08683c204de0996ca62b23813947009" kindref="member">DEVICE_DEFINE</ref>(foo12,<sp/></highlight><highlight class="stringliteral">&quot;foo12&quot;</highlight><highlight class="normal">,<sp/><ref refid="mmio_8c_1af0c463d8093d6c4913ca2ce725e5f5d3" kindref="member">foo_mult_init</ref>,<sp/>NULL,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="mmio_8c_1abba6687db938eb6fc883fe320b7aab0d" kindref="member">foo12_data</ref>,<sp/>&amp;<ref refid="mmio_8c_1a5442c817c78ad04be44912c545f917a8" kindref="member">foo12_config</ref>,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POST_KERNEL,<sp/>CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0xDEADBEEF);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga7cef29bf76d36c28ebed39fe0553bbff" kindref="member">test_mmio_multiple</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>comments<sp/>for<sp/>test_mmio_single<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev<sp/>=<sp/><ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding</ref>(</highlight><highlight class="stringliteral">&quot;foo12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>regs_corge,<sp/>regs_grault;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_device_mmio_rom<sp/>*rom_corge,<sp/>*rom_grault;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1gad78332e6bd37812e56ccc4af601542e4" kindref="member">zassert_not_null</ref>(dev,<sp/></highlight><highlight class="stringliteral">&quot;null<sp/>foo12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regs_corge<sp/>=<sp/><ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET</ref>(dev,<sp/>corge);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regs_grault<sp/>=<sp/><ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET</ref>(dev,<sp/>grault);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom_corge<sp/>=<sp/><ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR</ref>(dev,<sp/>corge);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom_grault<sp/>=<sp/><ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR</ref>(dev,<sp/>grault);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(regs_corge,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs_corge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(regs_grault,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs_grault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_corge-&gt;phys_addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(1),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>phys_addr<sp/>(corge)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_corge-&gt;size,<sp/><ref refid="group__devicetree-inst_1gaa7cea29435e1db59470302abb5ee88dd" kindref="member">DT_INST_REG_SIZE</ref>(1),</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>size<sp/>(corge)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_grault-&gt;phys_addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(2),</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>phys_addr<sp/>(grault)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_grault-&gt;size,<sp/><ref refid="group__devicetree-inst_1gaa7cea29435e1db59470302abb5ee88dd" kindref="member">DT_INST_REG_SIZE</ref>(2),</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>size<sp/>(grault)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_corge-&gt;addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(1),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>addr<sp/>(corge)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(regs_corge,<sp/>rom_corge-&gt;addr,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs<sp/>(corge)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_grault-&gt;addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(2),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>addr<sp/>(grault)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(regs_grault,<sp/>rom_grault-&gt;addr,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs<sp/>(grault)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfoo__mult__dev__data" kindref="compound">foo_mult_dev_data</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;too<sp/>big<sp/>foo_mult_dev_data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>Not<sp/>using<sp/>driver<sp/>model,<sp/>toplevel<sp/>definition</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="mmio_8c_1a0742746a5d8aeb0e2dcdc47317880171" kindref="member">DEVICE_MMIO_TOPLEVEL</ref>(foo3,<sp/><ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(3));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="mmio_8c_1aead10a0717deea7ba879f5dd9dbe5733" kindref="member">DEVICE_MMIO_TOPLEVEL_STATIC</ref>(foo4,<sp/><ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(4));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__kernel__device__tests_1ga99c7d3c57d409e35cc0e7f7ec3e91acc" kindref="member">test_mmio_toplevel</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>regs_foo3,<sp/>regs_foo4;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_device_mmio_rom<sp/>*rom_foo3,<sp/>*rom_foo4;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-toplevel_1ga6533dfab1e1bab2a11654abf4231379b" kindref="member">DEVICE_MMIO_TOPLEVEL_MAP</ref>(foo3,<sp/><ref refid="mem__manage_8h_1aae7605452be94d1bd6e0364e9db113c6" kindref="member">K_MEM_CACHE_NONE</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio-toplevel_1ga6533dfab1e1bab2a11654abf4231379b" kindref="member">DEVICE_MMIO_TOPLEVEL_MAP</ref>(foo4,<sp/><ref refid="mem__manage_8h_1aae7605452be94d1bd6e0364e9db113c6" kindref="member">K_MEM_CACHE_NONE</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regs_foo3<sp/>=<sp/><ref refid="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" kindref="member">DEVICE_MMIO_TOPLEVEL_GET</ref>(foo3);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regs_foo4<sp/>=<sp/><ref refid="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" kindref="member">DEVICE_MMIO_TOPLEVEL_GET</ref>(foo4);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom_foo3<sp/>=<sp/><ref refid="group__device-mmio-toplevel_1ga2877cda5f9780ecff45a4abe150e2504" kindref="member">DEVICE_MMIO_TOPLEVEL_ROM_PTR</ref>(foo3);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom_foo4<sp/>=<sp/><ref refid="group__device-mmio-toplevel_1ga2877cda5f9780ecff45a4abe150e2504" kindref="member">DEVICE_MMIO_TOPLEVEL_ROM_PTR</ref>(foo4);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(regs_foo3,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs_corge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(regs_foo4,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs_grault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_foo3-&gt;phys_addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(3),</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>phys_addr<sp/>(foo3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_foo3-&gt;size,<sp/><ref refid="group__devicetree-inst_1gaa7cea29435e1db59470302abb5ee88dd" kindref="member">DT_INST_REG_SIZE</ref>(3),</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>size<sp/>(foo3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_foo4-&gt;phys_addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(4),</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>phys_addr<sp/>(foo4)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_foo4-&gt;size,<sp/><ref refid="group__devicetree-inst_1gaa7cea29435e1db59470302abb5ee88dd" kindref="member">DT_INST_REG_SIZE</ref>(4),</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>size<sp/>(foo4)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_foo3-&gt;addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(3),</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>addr<sp/>(foo3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(regs_foo3,<sp/>rom_foo3-&gt;addr,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs<sp/>(foo3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(rom_foo4-&gt;addr,<sp/><ref refid="group__devicetree-inst_1gafde8fa67b94ac959ba2e24b44b3386a7" kindref="member">DT_INST_REG_ADDR</ref>(4),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>addr<sp/>(foo4)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga107b470a617e5c398353db398a3424e2" kindref="member">zassert_equal</ref>(regs_foo4,<sp/>rom_foo4-&gt;addr,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs<sp/>(foo4)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mmio_8c_1ad170bb634d07ca11c8a3cf1be62fc877" kindref="member">test_mmio_device_map</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>regs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map</ref>(&amp;regs,<sp/>0xF0000000,<sp/>0x1000,<sp/><ref refid="mem__manage_8h_1aae7605452be94d1bd6e0364e9db113c6" kindref="member">K_MEM_CACHE_NONE</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__assert_1ga9591c44c125ca0a073c0d80dc0d84a3b" kindref="member">zassert_not_equal</ref>(regs,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>regs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test__deprecated_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/kernel/device/src/mmio.c"/>
  </compounddef>
</doxygen>
