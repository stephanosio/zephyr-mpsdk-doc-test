<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__disk__access__interface" kind="group">
    <compoundname>disk_access_interface</compoundname>
    <title>Disk Access Interface</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__disk__access__interface_1gaba3fead8c0ce65945b440bf824fd4144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int disk_access_init</definition>
        <argsstring>(const char *pdrv)</argsstring>
        <name>disk_access_init</name>
        <param>
          <type>const char *</type>
          <declname>pdrv</declname>
        </param>
        <briefdescription>
<para>perform any initialization </para>
        </briefdescription>
        <detaileddescription>
<para>This call is made by the consumer before doing any IO calls so that the disk or the backing device can do any initialization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>Disk name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/disk_access.h" line="39" column="5" declfile="include/storage/disk_access.h" declline="39" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__disk__access__interface_1gac5348a854fe68a607672118c91346133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int disk_access_status</definition>
        <argsstring>(const char *pdrv)</argsstring>
        <name>disk_access_status</name>
        <param>
          <type>const char *</type>
          <declname>pdrv</declname>
        </param>
        <briefdescription>
<para>Get the status of disk. </para>
        </briefdescription>
        <detaileddescription>
<para>This call is used to get the status of the disk</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>Disk name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DISK_STATUS_OK or other DISK_STATUS_*s </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/disk_access.h" line="50" column="5" declfile="include/storage/disk_access.h" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__disk__access__interface_1ga5152825bf2a70902e65dbc596a944a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int disk_access_read</definition>
        <argsstring>(const char *pdrv, uint8_t *data_buf, uint32_t start_sector, uint32_t num_sector)</argsstring>
        <name>disk_access_read</name>
        <param>
          <type>const char *</type>
          <declname>pdrv</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data_buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>start_sector</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_sector</declname>
        </param>
        <briefdescription>
<para>read data from disk </para>
        </briefdescription>
        <detaileddescription>
<para>Function to read data from disk to a memory buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>Disk name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory buffer to put data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start_sector</parametername>
</parameternamelist>
<parameterdescription>
<para>Start disk sector to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_sector</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of disk sectors to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/disk_access.h" line="64" column="5" declfile="include/storage/disk_access.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__disk__access__interface_1gaa0495600320a71ea9e861fcf19da7184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int disk_access_write</definition>
        <argsstring>(const char *pdrv, const uint8_t *data_buf, uint32_t start_sector, uint32_t num_sector)</argsstring>
        <name>disk_access_write</name>
        <param>
          <type>const char *</type>
          <declname>pdrv</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data_buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>start_sector</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_sector</declname>
        </param>
        <briefdescription>
<para>write data to disk </para>
        </briefdescription>
        <detaileddescription>
<para>Function write data from memory buffer to disk.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>Disk name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start_sector</parametername>
</parameternamelist>
<parameterdescription>
<para>Start disk sector to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_sector</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of disk sectors to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/disk_access.h" line="79" column="5" declfile="include/storage/disk_access.h" declline="79" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__disk__access__interface_1ga152d85821d73644fea7ffde27b7c953c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int disk_access_ioctl</definition>
        <argsstring>(const char *pdrv, uint8_t cmd, void *buff)</argsstring>
        <name>disk_access_ioctl</name>
        <param>
          <type>const char *</type>
          <declname>pdrv</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
<para>Get/Configure disk parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to get disk parameters and make any special device requests.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>Disk name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>DISK_IOCTL_* code describing the request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buff</parametername>
</parameternamelist>
<parameterdescription>
<para>Command data buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/storage/disk_access.h" line="93" column="5" declfile="include/storage/disk_access.h" declline="93" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Disk Access APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
