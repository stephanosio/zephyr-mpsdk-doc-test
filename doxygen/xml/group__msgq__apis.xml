<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__msgq__apis" kind="group">
    <compoundname>msgq_apis</compoundname>
    <title>Message Queue APIs</title>
    <innerclass refid="structk__msgq" prot="public">k_msgq</innerclass>
    <innerclass refid="structk__msgq__attrs" prot="public">k_msgq_attrs</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__msgq__apis_1ga54a5cdcaea2236c383ace433fedc0d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_msgq_init</definition>
        <argsstring>(struct k_msgq *msgq, char *buffer, size_t msg_size, uint32_t max_msgs)</argsstring>
        <name>k_msgq_init</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_msgs</declname>
        </param>
        <briefdescription>
<para>Initialize a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a message queue object, prior to its first use.</para>
<para>The message queue&apos;s ring buffer must contain space for <emphasis>max_msgs</emphasis> messages, each of which is <emphasis>msg_size</emphasis> bytes long. The buffer must be aligned to an N-byte boundary, where N is a power of 2 (i.e. 1, 2, 4, ...). To ensure that each message is similarly aligned to this boundary, <emphasis>q_msg_size</emphasis> must also be a multiple of N.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to ring buffer that holds queued messages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Message size (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of messages that can be queued. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4343" column="6" declfile="include/kernel.h" declline="4343" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gabe7305b8f442ebdc147dbbc6e8cf92fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_alloc_init</definition>
        <argsstring>(struct k_msgq *msgq, size_t msg_size, uint32_t max_msgs)</argsstring>
        <name>k_msgq_alloc_init</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_msgs</declname>
        </param>
        <briefdescription>
<para>Initialize a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a message queue object, prior to its first use, allocating its internal ring buffer from the calling thread&apos;s resource pool.</para>
<para>Memory allocated for the ring buffer can be released by calling <ref refid="group__msgq__apis_1gafda4399aa9b8f1e44bdf752e00ea787b" kindref="member">k_msgq_cleanup()</ref>, or if userspace is enabled and the msgq object loses all of its references.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Message size (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of messages that can be queued.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -ENOMEM if there was insufficient memory in the thread&apos;s resource pool, or -EINVAL if the size parameters cause an integer overflow. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4365" column="6" declfile="include/kernel.h" declline="4365" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gafda4399aa9b8f1e44bdf752e00ea787b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_cleanup</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_cleanup</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Release allocated buffer for a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Releases memory allocated for the ring buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>message queue to cleanup</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue not empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4378" column="5" declfile="include/kernel.h" declline="4378" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga54e96aaaea5462a1f963b7fd5ca82bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_put</definition>
        <argsstring>(struct k_msgq *msgq, const void *data, k_timeout_t timeout)</argsstring>
        <name>k_msgq_put</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Send a message to a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sends a message to message queue <emphasis>q</emphasis>.</para>
<para><simplesect kind="note"><para>The message content is copied from <emphasis>data</emphasis> into <emphasis>msgq</emphasis> and the <emphasis>data</emphasis> pointer is not retained, so the message content will not be modified by this function.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to add the message, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting or queue purged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4401" column="6" declfile="include/kernel.h" declline="4401" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gae67f2ced2df1f9c290ae15dab9097cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_get</definition>
        <argsstring>(struct k_msgq *msgq, void *data, k_timeout_t timeout)</argsstring>
        <name>k_msgq_get</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive a message from a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine receives a message from message queue <emphasis>q</emphasis> in a &quot;first in,
first out&quot; manner.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the received message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to receive the message, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4423" column="6" declfile="include/kernel.h" declline="4423" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga14f543472f2f63cfde0bdfa87b95c915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_msgq_peek</definition>
        <argsstring>(struct k_msgq *msgq, void *data)</argsstring>
        <name>k_msgq_peek</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Peek/read a message from a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads a message from message queue <emphasis>q</emphasis> in a &quot;first in,
first out&quot; manner and leaves the message in the queue.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of area to hold the message read from the queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Message read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned when the queue has no message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4439" column="6" declfile="include/kernel.h" declline="4439" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1gaa18875887773195ae44b7fe0972ee760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_msgq_purge</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_purge</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Purge a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine discards all unreceived messages in a message queue&apos;s ring buffer. Any threads that are blocked waiting to send a message to the message queue are unblocked and see an -ENOMSG error code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4450" column="7" declfile="include/kernel.h" declline="4450" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga7d154beb4f9c6227eddbef26d406ca24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_msgq_num_free_get</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_num_free_get</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Get the amount of free space in a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the number of unused entries in a message queue&apos;s ring buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unused ring buffer entries. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4462" column="11" declfile="include/kernel.h" declline="4462" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga8f9d3eef67cbc9c0717a84190bbf7f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_msgq_get_attrs</definition>
        <argsstring>(struct k_msgq *msgq, struct k_msgq_attrs *attrs)</argsstring>
        <name>k_msgq_get_attrs</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__msgq__attrs" kindref="compound">k_msgq_attrs</ref> *</type>
          <declname>attrs</declname>
        </param>
        <briefdescription>
<para>Get basic attributes of a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine fetches basic attributes of message queue into attr argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attrs</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to message queue attribute structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4472" column="8" declfile="include/kernel.h" declline="4472" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__msgq__apis_1ga458793a89f1d9f762bda3422918a9faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_msgq_num_used_get</definition>
        <argsstring>(struct k_msgq *msgq)</argsstring>
        <name>k_msgq_num_used_get</name>
        <param>
          <type>struct <ref refid="structk__msgq" kindref="compound">k_msgq</ref> *</type>
          <declname>msgq</declname>
        </param>
        <briefdescription>
<para>Get the number of messages in a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine returns the number of messages in a message queue&apos;s ring buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgq</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the message queue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of messages. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4490" column="11" declfile="include/kernel.h" declline="4490" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__msgq__apis_1ga4bb73f46fd0818f7f7a90860b792f7ce" prot="public" static="no">
        <name>K_MSGQ_FLAG_ALLOC</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4285" column="9" bodyfile="include/kernel.h" bodystart="4285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__msgq__apis_1ga95ef93002766901511d09c8cd8f8293b" prot="public" static="no">
        <name>K_MSGQ_DEFINE</name>
        <param><defname>q_name</defname></param>
        <param><defname>q_msg_size</defname></param>
        <param><defname>q_max_msgs</defname></param>
        <param><defname>q_align</defname></param>
        <initializer>	static char __noinit __aligned(q_align)				\
		_k_fifo_buf_##q_name[(q_max_msgs) * (q_msg_size)];	\
	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__msgq" kindref="compound">k_msgq</ref>, q_name) =			\
	       Z_MSGQ_INITIALIZER(q_name, _k_fifo_buf_##q_name,	\
				  q_msg_size, q_max_msgs)</initializer>
        <briefdescription>
<para>Statically define and initialize a message queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The message queue&apos;s ring buffer contains space for <emphasis>q_max_msgs</emphasis> messages, each of which is <emphasis>q_msg_size</emphasis> bytes long. The buffer is aligned to a <emphasis>q_align</emphasis> -byte boundary, which must be a power of 2. To ensure that each message is similarly aligned to this boundary, <emphasis>q_msg_size</emphasis> must also be a multiple of <emphasis>q_align</emphasis>.</para>
<para>The message queue can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_msgq<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the message queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q_msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Message size (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q_max_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of messages that can be queued. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q_align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of the message queue&apos;s ring buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="4320" column="9" bodyfile="include/kernel.h" bodystart="4320" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
