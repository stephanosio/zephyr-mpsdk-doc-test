<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mem-demand-paging" kind="group">
    <compoundname>mem-demand-paging</compoundname>
    <title>Demand Paging APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mem-demand-paging_1ga0b18037209b4d8b5964bd9a1d760f703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_page_out</definition>
        <argsstring>(void *addr, size_t size)</argsstring>
        <name>k_mem_page_out</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evict a page-aligned virtual memory region to the backing store</para>
<para>Useful if it is known that a memory region will not be used for some time. All the data pages within the specified region will be evicted to the backing store if they weren&apos;t already, with their associated page frames marked as available for mappings or page-ins.</para>
<para>None of the associated page frames mapped to the provided region should be pinned.</para>
<para>Note that there are no guarantees how long these pages will be evicted, they could take page faults immediately.</para>
<para>If CONFIG_DEMAND_PAGING_ALLOW_IRQ is enabled, this function may not be called by ISRs as the backing store may be in-use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Base page-aligned virtual address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned data region size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient space in backing store to satisfy request. The region may be partially paged out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="401" column="5" declfile="include/sys/mem_manage.h" declline="401" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1gab36c36a4e230677d2090514f7a34b408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_page_in</definition>
        <argsstring>(void *addr, size_t size)</argsstring>
        <name>k_mem_page_in</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a virtual data region into memory</para>
<para>After the function completes, all the page frames associated with this function will be paged in. However, they are not guaranteed to stay there. This is useful if the region is known to be used soon.</para>
<para>If CONFIG_DEMAND_PAGING_ALLOW_IRQ is enabled, this function may not be called by ISRs as the backing store may be in-use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Base page-aligned virtual address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned data region size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="416" column="6" declfile="include/sys/mem_manage.h" declline="416" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1ga5f2d422edde7d366e81a870ce057589f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_pin</definition>
        <argsstring>(void *addr, size_t size)</argsstring>
        <name>k_mem_pin</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pin an aligned virtual data region, paging in as necessary</para>
<para>After the function completes, all the page frames associated with this region will be resident in memory and pinned such that they stay that way. This is a stronger version of z_mem_page_in().</para>
<para>If CONFIG_DEMAND_PAGING_ALLOW_IRQ is enabled, this function may not be called by ISRs as the backing store may be in-use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Base page-aligned virtual address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned data region size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="431" column="6" declfile="include/sys/mem_manage.h" declline="431" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1ga3278aae5e24733c722b7d83c4b17dab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_unpin</definition>
        <argsstring>(void *addr, size_t size)</argsstring>
        <name>k_mem_unpin</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Un-pin an aligned virtual data region</para>
<para>After the function completes, all the page frames associated with this region will be no longer marked as pinned. This does not evict the region, follow this with z_mem_page_out() if you need that.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Base page-aligned virtual address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Page-aligned data region size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="443" column="6" declfile="include/sys/mem_manage.h" declline="443" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1ga52ad88e0c0eed2aa27331bfd4707b7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_stats_get</definition>
        <argsstring>(struct k_mem_paging_stats_t *stats)</argsstring>
        <name>k_mem_paging_stats_get</name>
        <param>
          <type>struct <ref refid="structk__mem__paging__stats__t" kindref="compound">k_mem_paging_stats_t</ref> *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the paging statistics since system startup</para>
<para>This populates the paging statistics struct being passed in as argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stats</parametername>
</parameternamelist>
<parameterdescription>
<para>Paging statistics struct to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="453" column="7" declfile="include/sys/mem_manage.h" declline="453" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1gafad6b39cb2faf3bb416cd4d3faaa8d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_thread_stats_get</definition>
        <argsstring>(struct k_thread *thread, struct k_mem_paging_stats_t *stats)</argsstring>
        <name>k_mem_paging_thread_stats_get</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__mem__paging__stats__t" kindref="compound">k_mem_paging_stats_t</ref> *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the paging statistics since system startup for a thread</para>
<para>This populates the paging statistics struct being passed in as argument for a particular thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">stats</parametername>
</parameternamelist>
<parameterdescription>
<para>Paging statistics struct to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="466" column="6" declfile="include/sys/mem_manage.h" declline="466" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1gaec64d019d819b00c7bc3804aac269199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_histogram_eviction_get</definition>
        <argsstring>(struct k_mem_paging_histogram_t *hist)</argsstring>
        <name>k_mem_paging_histogram_eviction_get</name>
        <param>
          <type>struct <ref refid="structk__mem__paging__histogram__t" kindref="compound">k_mem_paging_histogram_t</ref> *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the eviction timing histogram</para>
<para>This populates the timing histogram struct being passed in as argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">hist</parametername>
</parameternamelist>
<parameterdescription>
<para>Timing histogram struct to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="477" column="7" declfile="include/sys/mem_manage.h" declline="477" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1ga1da0a643e8f85f98e29288e441a37dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_histogram_backing_store_page_in_get</definition>
        <argsstring>(struct k_mem_paging_histogram_t *hist)</argsstring>
        <name>k_mem_paging_histogram_backing_store_page_in_get</name>
        <param>
          <type>struct <ref refid="structk__mem__paging__histogram__t" kindref="compound">k_mem_paging_histogram_t</ref> *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the backing store page-in timing histogram</para>
<para>This populates the timing histogram struct being passed in as argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">hist</parametername>
</parameternamelist>
<parameterdescription>
<para>Timing histogram struct to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="488" column="7" declfile="include/sys/mem_manage.h" declline="488" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging_1gae4f80d14f88a46ddb9aeb7afba861864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_histogram_backing_store_page_out_get</definition>
        <argsstring>(struct k_mem_paging_histogram_t *hist)</argsstring>
        <name>k_mem_paging_histogram_backing_store_page_out_get</name>
        <param>
          <type>struct <ref refid="structk__mem__paging__histogram__t" kindref="compound">k_mem_paging_histogram_t</ref> *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the backing store page-out timing histogram</para>
<para>This populates the timing histogram struct being passed in as argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">hist</parametername>
</parameternamelist>
<parameterdescription>
<para>Timing histogram struct to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="499" column="7" declfile="include/sys/mem_manage.h" declline="499" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
