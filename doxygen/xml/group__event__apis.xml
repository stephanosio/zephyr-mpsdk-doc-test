<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__event__apis" kind="group">
    <compoundname>event_apis</compoundname>
    <title>Event APIs</title>
    <innerclass refid="structk__event" prot="public">k_event</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__event__apis_1gacf803590b39b095056f2b1c5090c4019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_event_init</definition>
        <argsstring>(struct k_event *event)</argsstring>
        <name>k_event_init</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Initialize an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes an event object, prior to its first use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2021" column="7" declfile="include/kernel.h" declline="2021" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1gaa5587377200d81deb33c5e5ca72aecc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_event_post</definition>
        <argsstring>(struct k_event *event, uint32_t events)</argsstring>
        <name>k_event_post</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Post one or more events to an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine posts one or more events to an event object. All tasks waiting on the event object <emphasis>event</emphasis> whose waiting conditions become met by this posting immediately unpend.</para>
<para>Posting differs from setting in that posted events are merged together with the current set of events tracked by the event object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of events to post to <emphasis>event</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2036" column="7" declfile="include/kernel.h" declline="2036" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1ga4b534f62467fe537d1f06e04705122af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_event_set</definition>
        <argsstring>(struct k_event *event, uint32_t events)</argsstring>
        <name>k_event_set</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Set the events in an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine sets the events stored in event object to the specified value. All tasks waiting on the event object <emphasis>event</emphasis> whose waiting conditions become met by this immediately unpend.</para>
<para>Setting differs from posting in that set events replace the current set of events tracked by the event object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of events to post to <emphasis>event</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2051" column="7" declfile="include/kernel.h" declline="2051" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1ga0f83f5f034e13bab65149fb90b87a753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_event_wait</definition>
        <argsstring>(struct k_event *event, uint32_t events, bool reset, k_timeout_t timeout)</argsstring>
        <name>k_event_wait</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>reset</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for any of the specified events. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine waits on event object <emphasis>event</emphasis> until any of the specified events have been delivered to the event object, or the maximum wait time <emphasis>timeout</emphasis> has expired. A thread may wait on up to 32 distinctly numbered events that are expressed as bits in a single 32-bit word.</para>
<para><simplesect kind="note"><para>The caller must be careful when resetting if there are multiple threads waiting for the event object <emphasis>event</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of desired events on which to wait </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, clear the set of events tracked by the event object before waiting. If false, do not clear the events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the desired set of events or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>of matching events upon success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if matching events were not received within the specified time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2074" column="11" declfile="include/kernel.h" declline="2074" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__event__apis_1gaddd60a99de5ac3d84f643c9433b744c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t k_event_wait_all</definition>
        <argsstring>(struct k_event *event, uint32_t events, bool reset, k_timeout_t timeout)</argsstring>
        <name>k_event_wait_all</name>
        <param>
          <type>struct <ref refid="structk__event" kindref="compound">k_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>events</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>reset</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for any of the specified events. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine waits on event object <emphasis>event</emphasis> until all of the specified events have been delivered to the event object, or the maximum wait time <emphasis>timeout</emphasis> has expired. A thread may wait on up to 32 distinctly numbered events that are expressed as bits in a single 32-bit word.</para>
<para><simplesect kind="note"><para>The caller must be careful when resetting if there are multiple threads waiting for the event object <emphasis>event</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the event object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of desired events on which to wait </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, clear the set of events tracked by the event object before waiting. If false, do not clear the events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for the desired set of events or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>of matching events upon success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if matching events were not received within the specified time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2098" column="11" declfile="include/kernel.h" declline="2098" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__event__apis_1ga093449cc6686d3235944f3faad284893" prot="public" static="no">
        <name>K_EVENT_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structk__event" kindref="compound">k_event</ref>, name) =               \
		Z_EVENT_INITIALIZER(name);</initializer>
        <briefdescription>
<para>Statically define and initialize an event object. </para>
        </briefdescription>
        <detaileddescription>
<para>The event can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>k_event<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the event object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="2110" column="9" bodyfile="include/kernel.h" bodystart="2110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
