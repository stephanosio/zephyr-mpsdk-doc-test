<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structieee802154__radio__api" kind="struct" language="C++" prot="public">
    <compoundname>ieee802154_radio_api</compoundname>
    <includes refid="ieee802154__radio_8h" local="no">ieee802154_radio.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structieee802154__radio__api_1aa955462d8c6950dc4b5935973f4575d8" prot="public" static="no" mutable="no">
        <type>struct net_if_api</type>
        <definition>struct net_if_api ieee802154_radio_api::iface_api</definition>
        <argsstring></argsstring>
        <name>iface_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mandatory to get in first position. A network device should indeed provide a pointer on such net_if_api structure. So we make current structure pointer that can be casted to a net_if_api structure pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="307" column="17" bodyfile="include/net/ieee802154_radio.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a09a4b5df81822845f718952c6029442c" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__ieee802154_1gaf99cda89c29df3c0088fc57ec09cbcd4" kindref="member">ieee802154_hw_caps</ref>(*</type>
        <definition>enum ieee802154_hw_caps(* ieee802154_radio_api::get_capabilities) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>get_capabilities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the device capabilities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="307" column="17" bodyfile="include/net/ieee802154_radio.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a2cbbd0e64fae28f748bb3e4d654a92bf" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::cca) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>cca</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear Channel Assesment - Check channel&apos;s activity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="313" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a9ad27a2ff0a839dc5b9a4e6317cc59b1" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::set_channel) (const struct device *dev, uint16_t channel)</definition>
        <argsstring>)(const struct device *dev, uint16_t channel)</argsstring>
        <name>set_channel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set current channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="316" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1aa9502e0e014a8d05ffe235567e8c98f3" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::filter) (const struct device *dev, bool set, enum ieee802154_filter_type type, const struct ieee802154_filter *filter)</definition>
        <argsstring>)(const struct device *dev, bool set, enum ieee802154_filter_type type, const struct ieee802154_filter *filter)</argsstring>
        <name>filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set/Unset filters (for IEEE802154_HW_FILTER ) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="319" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1aeeab6dfcde08af23357ea40f8af68f66" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::set_txpower) (const struct device *dev, int16_t dbm)</definition>
        <argsstring>)(const struct device *dev, int16_t dbm)</argsstring>
        <name>set_txpower</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set TX power level in dbm </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="325" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a70139acec22642c1fc09f2323c383fe6" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::tx) (const struct device *dev, enum ieee802154_tx_mode mode, struct net_pkt *pkt, struct net_buf *frag)</definition>
        <argsstring>)(const struct device *dev, enum ieee802154_tx_mode mode, struct net_pkt *pkt, struct net_buf *frag)</argsstring>
        <name>tx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transmit a packet fragment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="328" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a0e4d57dc3a53299ddedf2140e172103d" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::start) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start the device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="332" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a75cfcfe2b9e69c2e4af53f00c8294b36" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::stop) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop the device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="335" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a9acaf4810bd5d3b026cc381bff301071" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::configure) (const struct device *dev, enum ieee802154_config_type type, const struct ieee802154_config *config)</definition>
        <argsstring>)(const struct device *dev, enum ieee802154_config_type type, const struct ieee802154_config *config)</argsstring>
        <name>configure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set specific radio driver configuration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="338" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1ada3e95bcc491e1696d0db9a821623693" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref>(*</type>
        <definition>uint16_t(* ieee802154_radio_api::get_subg_channel_count) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>get_subg_channel_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the available amount of Sub-GHz channels </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="343" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1a01fc17f85f2be33877a9347f59a84c54" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* ieee802154_radio_api::ed_scan) (const struct device *dev, uint16_t duration, energy_scan_done_cb_t done_cb)</definition>
        <argsstring>)(const struct device *dev, uint16_t duration, energy_scan_done_cb_t done_cb)</argsstring>
        <name>ed_scan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run an energy detection scan. Note: channel must be set prior to request this function. duration parameter is in ms. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="349" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1af62fa854c4d915956d9154c8e92b0d37" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref>(*</type>
        <definition>uint64_t(* ieee802154_radio_api::get_time) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>get_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current radio time in microseconds </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="354" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structieee802154__radio__api_1ae4a3ef40a5b8031c868d72ead163c97d" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref>(*</type>
        <definition>uint8_t(* ieee802154_radio_api::get_sch_acc) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>get_sch_acc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current accuracy, in units of ± ppm, of the clock used for scheduling delayed receive or transmit radio operations. Note: Implementations may optimize this value based on operational conditions (i.e.: temperature). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/ieee802154_radio.h" line="361" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>IEEE 802.15.4 radio interface API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/net/ieee802154_radio.h" line="300" column="1" bodyfile="include/net/ieee802154_radio.h" bodystart="300" bodyend="362"/>
    <listofallmembers>
      <member refid="structieee802154__radio__api_1a2cbbd0e64fae28f748bb3e4d654a92bf" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>cca</name></member>
      <member refid="structieee802154__radio__api_1a9acaf4810bd5d3b026cc381bff301071" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>configure</name></member>
      <member refid="structieee802154__radio__api_1a01fc17f85f2be33877a9347f59a84c54" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>ed_scan</name></member>
      <member refid="structieee802154__radio__api_1aa9502e0e014a8d05ffe235567e8c98f3" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>filter</name></member>
      <member refid="structieee802154__radio__api_1a09a4b5df81822845f718952c6029442c" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>get_capabilities</name></member>
      <member refid="structieee802154__radio__api_1ae4a3ef40a5b8031c868d72ead163c97d" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>get_sch_acc</name></member>
      <member refid="structieee802154__radio__api_1ada3e95bcc491e1696d0db9a821623693" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>get_subg_channel_count</name></member>
      <member refid="structieee802154__radio__api_1af62fa854c4d915956d9154c8e92b0d37" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>get_time</name></member>
      <member refid="structieee802154__radio__api_1aa955462d8c6950dc4b5935973f4575d8" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>iface_api</name></member>
      <member refid="structieee802154__radio__api_1a9ad27a2ff0a839dc5b9a4e6317cc59b1" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>set_channel</name></member>
      <member refid="structieee802154__radio__api_1aeeab6dfcde08af23357ea40f8af68f66" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>set_txpower</name></member>
      <member refid="structieee802154__radio__api_1a0e4d57dc3a53299ddedf2140e172103d" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>start</name></member>
      <member refid="structieee802154__radio__api_1a75cfcfe2b9e69c2e4af53f00c8294b36" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>stop</name></member>
      <member refid="structieee802154__radio__api_1a70139acec22642c1fc09f2323c383fe6" prot="public" virt="non-virtual"><scope>ieee802154_radio_api</scope><name>tx</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
