<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="sys__bitops_8h" kind="file" language="C++">
    <compoundname>sys_bitops.h</compoundname>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="sys_2sys__io_8h" local="no">sys/sys_io.h</includes>
    <includedby refid="arc_2arch_8h" local="no">include/arch/arc/arch.h</includedby>
    <includedby refid="arm_2aarch32_2arch_8h" local="no">include/arch/arm/aarch32/arch.h</includedby>
    <includedby refid="arm64_2arch_8h" local="no">include/arch/arm64/arch.h</includedby>
    <includedby refid="mips_2arch_8h" local="no">include/arch/mips/arch.h</includedby>
    <includedby refid="nios2_2arch_8h" local="no">include/arch/nios2/arch.h</includedby>
    <includedby refid="posix_2asm__inline__gcc_8h" local="no">include/arch/posix/asm_inline_gcc.h</includedby>
    <includedby refid="riscv_2arch_8h" local="no">include/arch/riscv/arch.h</includedby>
    <includedby refid="sparc_2arch_8h" local="no">include/arch/sparc/arch.h</includedby>
    <includedby refid="xtensa_2arch_8h" local="no">include/arch/xtensa/arch.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/arch/common/sys_bitops.h</label>
        <link refid="sys__bitops_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/sys_io.h</label>
        <link refid="sys_2sys__io_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="3">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/arch/arc/arch.h</label>
        <link refid="arc_2arch_8h"/>
      </node>
      <node id="3">
        <label>include/arch/arm/aarch32/arch.h</label>
        <link refid="arm_2aarch32_2arch_8h"/>
      </node>
      <node id="4">
        <label>include/arch/arm64/arch.h</label>
        <link refid="arm64_2arch_8h"/>
      </node>
      <node id="1">
        <label>include/arch/common/sys_bitops.h</label>
        <link refid="sys__bitops_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/arch/mips/arch.h</label>
        <link refid="mips_2arch_8h"/>
      </node>
      <node id="6">
        <label>include/arch/nios2/arch.h</label>
        <link refid="nios2_2arch_8h"/>
      </node>
      <node id="7">
        <label>include/arch/posix/asm_inline_gcc.h</label>
        <link refid="posix_2asm__inline__gcc_8h"/>
      </node>
      <node id="8">
        <label>include/arch/riscv/arch.h</label>
        <link refid="riscv_2arch_8h"/>
      </node>
      <node id="9">
        <label>include/arch/sparc/arch.h</label>
        <link refid="sparc_2arch_8h"/>
      </node>
      <node id="10">
        <label>include/arch/xtensa/arch.h</label>
        <link refid="xtensa_2arch_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sys__bitops_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_set_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_set_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="24" column="27" bodyfile="include/arch/common/sys_bitops.h" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a3a7b18493a4a34f82c9409453277265d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_clear_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_clear_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="31" column="27" bodyfile="include/arch/common/sys_bitops.h" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a43a2682b576dd69995dfdd203134f2a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_test_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_test_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="38" column="26" bodyfile="include/arch/common/sys_bitops.h" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a36b7bacc7d667eb24781996eb9cade69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static inline void sys_set_bits</definition>
        <argsstring>(mem_addr_t addr, unsigned int mask)</argsstring>
        <name>sys_set_bits</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Masking the designated bits from addr to 1. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions masking designated bits from addr to 1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory address from where to look for the bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>the bit mask of a 32 bits data to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="45" column="27" bodyfile="include/arch/common/sys_bitops.h" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a16757ee83b9b22edb34895bde04537ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static inline void sys_clear_bits</definition>
        <argsstring>(mem_addr_t addr, unsigned int mask)</argsstring>
        <name>sys_clear_bits</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Masking the designated bits from addr to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions masking designated bits from addr to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory address from where to look for the bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>the bit mask of a 32 bits data to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="52" column="27" bodyfile="include/arch/common/sys_bitops.h" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a486594e16aa5d5a12e61eefb37418cd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_bitfield_set_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_bitfield_set_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="60" column="6" bodyfile="include/arch/common/sys_bitops.h" bodystart="60" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1ad82b2448d5695f2f8ea4fc03bdb761f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> void</type>
        <definition>static ALWAYS_INLINE void sys_bitfield_clear_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_bitfield_clear_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="69" column="6" bodyfile="include/arch/common/sys_bitops.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a355852406186b130c32d398b1896649a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_bitfield_test_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_bitfield_test_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="75" column="5" bodyfile="include/arch/common/sys_bitops.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a036f93e32f1d1cc34cb2df3193650d48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_test_and_set_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_test_and_set_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="81" column="5" bodyfile="include/arch/common/sys_bitops.h" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1accf2bc65402198dda9d43ccd788163c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_test_and_clear_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_test_and_clear_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="92" column="5" bodyfile="include/arch/common/sys_bitops.h" bodystart="92" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1aa078b28e73f6416ae2865e2e807a6da5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_bitfield_test_and_set_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_bitfield_test_and_set_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="103" column="5" bodyfile="include/arch/common/sys_bitops.h" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="sys__bitops_8h_1a7c2f80fff262e362cb7daf8c10065136" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref> int</type>
        <definition>static ALWAYS_INLINE int sys_bitfield_test_and_clear_bit</definition>
        <argsstring>(mem_addr_t addr, unsigned int bit)</argsstring>
        <name>sys_bitfield_test_and_clear_bit</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arch/common/sys_bitops.h" line="114" column="5" bodyfile="include/arch/common/sys_bitops.h" bodystart="114" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>Wind<sp/>River<sp/>Systems,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017,<sp/>Oticon<sp/>A/S</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>Synopsys</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Memory<sp/>bits<sp/>manipulation<sp/>functions<sp/>in<sp/>non-arch-specific<sp/>C<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_ARCH_COMMON_SYS_BITOPS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_ARCH_COMMON_SYS_BITOPS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMLANGUAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sys_2sys__io_8h" kindref="compound">sys/sys_io.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="sys__bitops_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" kindref="member">sys_set_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>temp<sp/>=<sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr<sp/>=<sp/>temp<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>bit);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="sys__bitops_8h_1a3a7b18493a4a34f82c9409453277265d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a3a7b18493a4a34f82c9409453277265d" kindref="member">sys_clear_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>temp<sp/>=<sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr<sp/>=<sp/>temp<sp/>&amp;<sp/>~(1<sp/>&lt;&lt;<sp/>bit);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="sys__bitops_8h_1a43a2682b576dd69995dfdd203134f2a6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a43a2682b576dd69995dfdd203134f2a6" kindref="member">sys_test_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>temp<sp/>=<sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>bit);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="sys__bitops_8h_1a36b7bacc7d667eb24781996eb9cade69" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a36b7bacc7d667eb24781996eb9cade69" kindref="member">sys_set_bits</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>temp<sp/>=<sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr<sp/>=<sp/>temp<sp/>|<sp/>mask;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="sys__bitops_8h_1a16757ee83b9b22edb34895bde04537ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a16757ee83b9b22edb34895bde04537ce" kindref="member">sys_clear_bits</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>temp<sp/>=<sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>*)addr<sp/>=<sp/>temp<sp/>&amp;<sp/>~mask;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref></highlight></codeline>
<codeline lineno="60" refid="sys__bitops_8h_1a486594e16aa5d5a12e61eefb37418cd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a486594e16aa5d5a12e61eefb37418cd2" kindref="member">sys_bitfield_set_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Doing<sp/>memory<sp/>offsets<sp/>in<sp/>terms<sp/>of<sp/>32-bit<sp/>values<sp/>to<sp/>prevent</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>alignment<sp/>issues</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys__bitops_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" kindref="member">sys_set_bit</ref>(addr<sp/>+<sp/>((bit<sp/>&gt;&gt;<sp/>5)<sp/>&lt;&lt;<sp/>2),<sp/>bit<sp/>&amp;<sp/>0x1F);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref></highlight></codeline>
<codeline lineno="69" refid="sys__bitops_8h_1ad82b2448d5695f2f8ea4fc03bdb761f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1ad82b2448d5695f2f8ea4fc03bdb761f1" kindref="member">sys_bitfield_clear_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys__bitops_8h_1a3a7b18493a4a34f82c9409453277265d" kindref="member">sys_clear_bit</ref>(addr<sp/>+<sp/>((bit<sp/>&gt;&gt;<sp/>5)<sp/>&lt;&lt;<sp/>2),<sp/>bit<sp/>&amp;<sp/>0x1F);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref></highlight></codeline>
<codeline lineno="75" refid="sys__bitops_8h_1a355852406186b130c32d398b1896649a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a355852406186b130c32d398b1896649a" kindref="member">sys_bitfield_test_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a43a2682b576dd69995dfdd203134f2a6" kindref="member">sys_test_bit</ref>(addr<sp/>+<sp/>((bit<sp/>&gt;&gt;<sp/>5)<sp/>&lt;&lt;<sp/>2),<sp/>bit<sp/>&amp;<sp/>0x1F);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref></highlight></codeline>
<codeline lineno="81" refid="sys__bitops_8h_1a036f93e32f1d1cc34cb2df3193650d48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a036f93e32f1d1cc34cb2df3193650d48" kindref="member">sys_test_and_set_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="sys__bitops_8h_1a43a2682b576dd69995dfdd203134f2a6" kindref="member">sys_test_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys__bitops_8h_1a04ab5115c17cc5ddfe2d788cb7bdcbbe" kindref="member">sys_set_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref></highlight></codeline>
<codeline lineno="92" refid="sys__bitops_8h_1accf2bc65402198dda9d43ccd788163c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1accf2bc65402198dda9d43ccd788163c6" kindref="member">sys_test_and_clear_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="sys__bitops_8h_1a43a2682b576dd69995dfdd203134f2a6" kindref="member">sys_test_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys__bitops_8h_1a3a7b18493a4a34f82c9409453277265d" kindref="member">sys_clear_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref></highlight></codeline>
<codeline lineno="103" refid="sys__bitops_8h_1aa078b28e73f6416ae2865e2e807a6da5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1aa078b28e73f6416ae2865e2e807a6da5" kindref="member">sys_bitfield_test_and_set_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="sys__bitops_8h_1a355852406186b130c32d398b1896649a" kindref="member">sys_bitfield_test_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys__bitops_8h_1a486594e16aa5d5a12e61eefb37418cd2" kindref="member">sys_bitfield_set_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="common_8h_1aa1dec568e79152c892dcf63f445cbd7a" kindref="member">ALWAYS_INLINE</ref></highlight></codeline>
<codeline lineno="114" refid="sys__bitops_8h_1a7c2f80fff262e362cb7daf8c10065136" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sys__bitops_8h_1a7c2f80fff262e362cb7daf8c10065136" kindref="member">sys_bitfield_test_and_clear_bit</ref>(<ref refid="sys_2sys__io_8h_1adacf6eae8ec8c6a835ec0b2953a3470d" kindref="member">mem_addr_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="sys__bitops_8h_1a355852406186b130c32d398b1896649a" kindref="member">sys_bitfield_test_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys__bitops_8h_1ad82b2448d5695f2f8ea4fc03bdb761f1" kindref="member">sys_bitfield_clear_bit</ref>(addr,<sp/>bit);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_ARCH_COMMON_SYS_BITOPS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/arch/common/sys_bitops.h"/>
  </compounddef>
</doxygen>
