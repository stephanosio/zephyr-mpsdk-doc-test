<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mcc_8h" kind="file" language="C++">
    <compoundname>mcc.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="conn_8h" local="no">bluetooth/conn.h</includes>
    <includes refid="net_2buf_8h" local="no">net/buf.h</includes>
    <includes refid="media__proxy_8h" local="no">bluetooth/audio/media_proxy.h</includes>
    <incdepgraph>
      <node id="17">
        <label>bluetooth/addr.h</label>
        <link refid="addr_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/audio/mcc.h</label>
        <link refid="mcc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>mcs.h</label>
        <link refid="mcs_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>bluetooth/audio/media_proxy.h</label>
        <link refid="media__proxy_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>bluetooth/bluetooth.h</label>
        <link refid="bluetooth_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bluetooth/conn.h</label>
        <link refid="conn_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>bluetooth/crypto.h</label>
        <link refid="bluetooth_2crypto_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>bluetooth/direction.h</label>
        <link refid="direction_8h"/>
      </node>
      <node id="16">
        <label>bluetooth/gap.h</label>
        <link refid="gap_8h"/>
      </node>
      <node id="22">
        <label>bluetooth/hci_err.h</label>
        <link refid="hci__err_8h"/>
      </node>
      <node id="14">
        <label>net/buf.h</label>
        <link refid="net_2buf_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="11">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="8">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="15">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structbt__mcc__cb" prot="public">bt_mcc_cb</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gab268faeca207e115ee1be0843ab8c342" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_discover_mcs_cb) (struct bt_conn *conn, int err)</definition>
        <argsstring>)(struct bt_conn *conn, int err)</argsstring>
        <name>bt_mcc_discover_mcs_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1gaa1f9ead03b4cccaff1e3390b8052b0f3" kindref="member">bt_mcc_discover_mcs()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when a media control server is discovered</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="43" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gaa943b61848ee43e91d473f6fdd0a604f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_player_name_cb) (struct bt_conn *conn, int err, const char *name)</definition>
        <argsstring>)(struct bt_conn *conn, int err, const char *name)</argsstring>
        <name>bt_mcc_read_player_name_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga724ce71fc88f1ca4bcf209c92c177f36" kindref="member">bt_mcc_read_player_name()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the player name is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Player name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="54" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gaaddc4abe38f6ca811967ae6a10d8f8f0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_icon_url_cb) (struct bt_conn *conn, int err, const char *icon_url)</definition>
        <argsstring>)(struct bt_conn *conn, int err, const char *icon_url)</argsstring>
        <name>bt_mcc_read_icon_url_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga38733456db6bc6558a511e104577c9c9" kindref="member">bt_mcc_read_icon_url()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the icon URL is read</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL of the Icon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="78" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga67611a3068284b0c7fbb3ef07dfe7688" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_track_changed_ntf_cb) (struct bt_conn *conn, int err)</definition>
        <argsstring>)(struct bt_conn *conn, int err)</argsstring>
        <name>bt_mcc_track_changed_ntf_cb</name>
        <briefdescription>
<para>Callback function for track changed notifications. </para>
        </briefdescription>
        <detaileddescription>
<para>Called when a track change is notified.</para>
<para>The track changed characteristic is a special case. It can not be read or set, it can only be notified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="91" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga6927860f1803aeade4994610da32d402" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_track_title_cb) (struct bt_conn *conn, int err, const char *title)</definition>
        <argsstring>)(struct bt_conn *conn, int err, const char *title)</argsstring>
        <name>bt_mcc_read_track_title_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga7dfa14489a4cea4b00053c9aa75cf373" kindref="member">bt_mcc_read_track_title()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the track title is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The title of the track </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="103" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga7cdb524ff9c34f24c1740adb9eca072c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_track_duration_cb) (struct bt_conn *conn, int err, int32_t dur)</definition>
        <argsstring>)(struct bt_conn *conn, int err, int32_t dur)</argsstring>
        <name>bt_mcc_read_track_duration_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga50a45f043bd2ae1741a120e02e9dc2f5" kindref="member">bt_mcc_read_track_duration()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the track duration is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dur</parametername>
</parameternamelist>
<parameterdescription>
<para>The duration of the track </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="114" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga128883c867b10e57d3f2f26a708b7263" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_track_position_cb) (struct bt_conn *conn, int err, int32_t pos)</definition>
        <argsstring>)(struct bt_conn *conn, int err, int32_t pos)</argsstring>
        <name>bt_mcc_read_track_position_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1gaf143098f5dfcfba01df3d6f06472779e" kindref="member">bt_mcc_read_track_position()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the track position is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The Track Position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="125" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga1167f5e2ef4a7e78469aefc0cef18bff" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_set_track_position_cb) (struct bt_conn *conn, int err, int32_t pos)</definition>
        <argsstring>)(struct bt_conn *conn, int err, int32_t pos)</argsstring>
        <name>bt_mcc_set_track_position_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1gad324366d33bef6b1ed1c8fc881bf44cf" kindref="member">bt_mcc_set_track_position()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the track position is set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The Track Position set (or attempted to set) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="136" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga6f5383be3f344c25361786d903640909" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_playback_speed_cb) (struct bt_conn *conn, int err, int8_t speed)</definition>
        <argsstring>)(struct bt_conn *conn, int err, int8_t speed)</argsstring>
        <name>bt_mcc_read_playback_speed_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1gaa566a4c42f0ab0ab6feddf4e25845609" kindref="member">bt_mcc_read_playback_speed()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the playback speed is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>The Playback Speed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="147" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga1322f2ddbb587c70fd23a7ccfc1fc779" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_set_playback_speed_cb) (struct bt_conn *conn, int err, int8_t speed)</definition>
        <argsstring>)(struct bt_conn *conn, int err, int8_t speed)</argsstring>
        <name>bt_mcc_set_playback_speed_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga1382e5b6000896dc94f6489909301719" kindref="member">bt_mcc_set_playback_speed()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the playback speed is set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>The Playback Speed set (or attempted to set) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="158" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga3089e6165e8491325f7205279bb5bb83" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_seeking_speed_cb) (struct bt_conn *conn, int err, int8_t speed)</definition>
        <argsstring>)(struct bt_conn *conn, int err, int8_t speed)</argsstring>
        <name>bt_mcc_read_seeking_speed_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga366fdfaa23cef9f1c3ba7ddd36a67658" kindref="member">bt_mcc_read_seeking_speed()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the seeking speed is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>The Seeking Speed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="169" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gafb0869e0ef5332d39070081efdacf17c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_playing_order_cb) (struct bt_conn *conn, int err, uint8_t order)</definition>
        <argsstring>)(struct bt_conn *conn, int err, uint8_t order)</argsstring>
        <name>bt_mcc_read_playing_order_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga077a134ff1404fb76aa756a5531fd1d7" kindref="member">bt_mcc_read_playing_order()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the playing order is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The playback order </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="271" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga1a12fb89adf29c83bca02f701213c6d7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_set_playing_order_cb) (struct bt_conn *conn, int err, uint8_t order)</definition>
        <argsstring>)(struct bt_conn *conn, int err, uint8_t order)</argsstring>
        <name>bt_mcc_set_playing_order_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga05295649385c3a337401765627d09553" kindref="member">bt_mcc_set_playing_order()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the playing order is set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The Playing Order set (or attempted to set) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="282" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gac45a2aff295535f70ac4a070e970b7a0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_playing_orders_supported_cb) (struct bt_conn *conn, int err, uint16_t orders)</definition>
        <argsstring>)(struct bt_conn *conn, int err, uint16_t orders)</argsstring>
        <name>bt_mcc_read_playing_orders_supported_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1gaf61f6fcf3f96ccb6f5a72ffaad27dec4" kindref="member">bt_mcc_read_playing_orders_supported()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the supported playing orders are read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orders</parametername>
</parameternamelist>
<parameterdescription>
<para>The playing orders supported (bitmap) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="293" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga200a827f4bf5d65570ddabd028269f77" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_media_state_cb) (struct bt_conn *conn, int err, uint8_t state)</definition>
        <argsstring>)(struct bt_conn *conn, int err, uint8_t state)</argsstring>
        <name>bt_mcc_read_media_state_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1gac1b440cfa54dd4b6e23bb47bf885f88d" kindref="member">bt_mcc_read_media_state()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the media state is read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The Media State </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="305" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gab8ebc0c3101acf9b717d814a04860920" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_send_cmd_cb) (struct bt_conn *conn, int err, struct mpl_cmd cmd)</definition>
        <argsstring>)(struct bt_conn *conn, int err, struct mpl_cmd cmd)</argsstring>
        <name>bt_mcc_send_cmd_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1gaace3924896d6132ce936fa13516244e4" kindref="member">bt_mcc_send_cmd()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when a command is sent, i.e. when the media control point is set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command sent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="316" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1ga29dded3f3bc111df88a5dc382ac4718d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_cmd_ntf_cb) (struct bt_conn *conn, int err, struct mpl_cmd_ntf ntf)</definition>
        <argsstring>)(struct bt_conn *conn, int err, struct mpl_cmd_ntf ntf)</argsstring>
        <name>bt_mcc_cmd_ntf_cb</name>
        <briefdescription>
<para>Callback function for command notifications. </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the media control point is notified</para>
<para>Notifications for commands (i.e. for writes to the media control point) use a different parameter structure than what is used for sending commands (writing to the media control point)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ntf</parametername>
</parameternamelist>
<parameterdescription>
<para>The command notification </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="331" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gab37df36e15132b9235d1093f5aa403cc" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_opcodes_supported_cb) (struct bt_conn *conn, int err, uint32_t opcodes)</definition>
        <argsstring>)(struct bt_conn *conn, int err, uint32_t opcodes)</argsstring>
        <name>bt_mcc_read_opcodes_supported_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga692160554947f92e8c81912c5e597086" kindref="member">bt_mcc_read_opcodes_supported()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the supported opcodes (commands) are read or notified</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcodes</parametername>
</parameternamelist>
<parameterdescription>
<para>The supported opcodes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="342" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__bt__gatt__mcc_1gadb607997fdcb3e57bbfc90790de4b927" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* bt_mcc_read_content_control_id_cb) (struct bt_conn *conn, int err, uint8_t ccid)</definition>
        <argsstring>)(struct bt_conn *conn, int err, uint8_t ccid)</argsstring>
        <name>bt_mcc_read_content_control_id_cb</name>
        <briefdescription>
<para>Callback function for <ref refid="group__bt__gatt__mcc_1ga77cbf810c35d1a17efce1fae6a941963" kindref="member">bt_mcc_read_content_control_id()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Called when the content control ID is read</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection that was used to initialise the media control client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value. 0 on success, GATT error or errno on fail </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ccid</parametername>
</parameternamelist>
<parameterdescription>
<para>The Content Control ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="400" column="9" bodyfile="include/bluetooth/audio/mcc.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga94de08bb0a1e1324600e4957b648e92b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_init</definition>
        <argsstring>(struct bt_mcc_cb *cb)</argsstring>
        <name>bt_mcc_init</name>
        <param>
          <type>struct <ref refid="structbt__mcc__cb" kindref="compound">bt_mcc_cb</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Initialize Media Control Client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callbacks to be used</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="574" column="5" declfile="include/bluetooth/audio/mcc.h" declline="574" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1gaa1f9ead03b4cccaff1e3390b8052b0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_discover_mcs</definition>
        <argsstring>(struct bt_conn *conn, bool subscribe)</argsstring>
        <name>bt_mcc_discover_mcs</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
<para>Discover Media Control Service. </para>
        </briefdescription>
        <detaileddescription>
<para>Discover Media Control Service (MCS) on the server given by the connection Optionally subscribe to notifications.</para>
<para>Shall be called once, after media control client initialization and before using other media control client functionality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to subscribe to notifications</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="591" column="5" declfile="include/bluetooth/audio/mcc.h" declline="591" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga724ce71fc88f1ca4bcf209c92c177f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_player_name</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_player_name</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Media Player Name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="600" column="5" declfile="include/bluetooth/audio/mcc.h" declline="600" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga38733456db6bc6558a511e104577c9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_icon_url</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_icon_url</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Icon Object URL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="620" column="5" declfile="include/bluetooth/audio/mcc.h" declline="620" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga7dfa14489a4cea4b00053c9aa75cf373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_track_title</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_track_title</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Track Title. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="629" column="5" declfile="include/bluetooth/audio/mcc.h" declline="629" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga50a45f043bd2ae1741a120e02e9dc2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_track_duration</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_track_duration</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Track Duration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="638" column="5" declfile="include/bluetooth/audio/mcc.h" declline="638" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1gaf143098f5dfcfba01df3d6f06472779e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_track_position</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_track_position</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Track Position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="647" column="5" declfile="include/bluetooth/audio/mcc.h" declline="647" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1gad324366d33bef6b1ed1c8fc881bf44cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_set_track_position</definition>
        <argsstring>(struct bt_conn *conn, int32_t pos)</argsstring>
        <name>bt_mcc_set_track_position</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Set Track position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Track position</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="657" column="5" declfile="include/bluetooth/audio/mcc.h" declline="657" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1gaa566a4c42f0ab0ab6feddf4e25845609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_playback_speed</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_playback_speed</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Playback speed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="666" column="5" declfile="include/bluetooth/audio/mcc.h" declline="666" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga1382e5b6000896dc94f6489909301719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_set_playback_speed</definition>
        <argsstring>(struct bt_conn *conn, int8_t speed)</argsstring>
        <name>bt_mcc_set_playback_speed</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1accbd6432732c88ad6adc5365800433b6" kindref="member">int8_t</ref></type>
          <declname>speed</declname>
        </param>
        <briefdescription>
<para>Set Playback Speed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>Playback speed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="676" column="5" declfile="include/bluetooth/audio/mcc.h" declline="676" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga366fdfaa23cef9f1c3ba7ddd36a67658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_seeking_speed</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_seeking_speed</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Seeking speed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="685" column="5" declfile="include/bluetooth/audio/mcc.h" declline="685" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga077a134ff1404fb76aa756a5531fd1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_playing_order</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_playing_order</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Playing Order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="778" column="5" declfile="include/bluetooth/audio/mcc.h" declline="778" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga05295649385c3a337401765627d09553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_set_playing_order</definition>
        <argsstring>(struct bt_conn *conn, uint8_t order)</argsstring>
        <name>bt_mcc_set_playing_order</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Set Playing Order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Playing order</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="788" column="5" declfile="include/bluetooth/audio/mcc.h" declline="788" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1gaf61f6fcf3f96ccb6f5a72ffaad27dec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_playing_orders_supported</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_playing_orders_supported</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Playing Orders Supported. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="797" column="5" declfile="include/bluetooth/audio/mcc.h" declline="797" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1gac1b440cfa54dd4b6e23bb47bf885f88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_media_state</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_media_state</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Media State. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="806" column="5" declfile="include/bluetooth/audio/mcc.h" declline="806" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1gaace3924896d6132ce936fa13516244e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_send_cmd</definition>
        <argsstring>(struct bt_conn *conn, struct mpl_cmd cmd)</argsstring>
        <name>bt_mcc_send_cmd</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structmpl__cmd" kindref="compound">mpl_cmd</ref></type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Send a command. </para>
        </briefdescription>
        <detaileddescription>
<para>Write a command (e.g. &quot;play&quot;, &quot;pause&quot;) to the server&apos;s media control point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to send</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="818" column="5" declfile="include/bluetooth/audio/mcc.h" declline="818" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga692160554947f92e8c81912c5e597086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_opcodes_supported</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_opcodes_supported</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Opcodes Supported. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="827" column="5" declfile="include/bluetooth/audio/mcc.h" declline="827" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__gatt__mcc_1ga77cbf810c35d1a17efce1fae6a941963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_mcc_read_content_control_id</definition>
        <argsstring>(struct bt_conn *conn)</argsstring>
        <name>bt_mcc_read_content_control_id</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Read Content Control ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to the peer device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, errno on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/mcc.h" line="859" column="5" declfile="include/bluetooth/audio/mcc.h" declline="859" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>-<sp/>2021<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_BLUETOOTH_AUDIO_MCC_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_BLUETOOTH_AUDIO_MCC_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="conn_8h" kindref="compound">bluetooth/conn.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="net_2buf_8h" kindref="compound">net/buf.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="media__proxy_8h" kindref="compound">bluetooth/audio/media_proxy.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/****<sp/>Callback<sp/>functions<sp/>******************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__bt__gatt__mcc_1gab268faeca207e115ee1be0843ab8c342" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gab268faeca207e115ee1be0843ab8c342" kindref="member">bt_mcc_discover_mcs_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group__bt__gatt__mcc_1gaa943b61848ee43e91d473f6fdd0a604f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gaa943b61848ee43e91d473f6fdd0a604f" kindref="member">bt_mcc_read_player_name_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_read_icon_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__bt__gatt__mcc_1gaaddc4abe38f6ca811967ae6a10d8f8f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gaaddc4abe38f6ca811967ae6a10d8f8f0" kindref="member">bt_mcc_read_icon_url_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*icon_url);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__bt__gatt__mcc_1ga67611a3068284b0c7fbb3ef07dfe7688" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga67611a3068284b0c7fbb3ef07dfe7688" kindref="member">bt_mcc_track_changed_ntf_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="group__bt__gatt__mcc_1ga6927860f1803aeade4994610da32d402" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga6927860f1803aeade4994610da32d402" kindref="member">bt_mcc_read_track_title_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*title);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="group__bt__gatt__mcc_1ga7cdb524ff9c34f24c1740adb9eca072c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga7cdb524ff9c34f24c1740adb9eca072c" kindref="member">bt_mcc_read_track_duration_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/>dur);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="group__bt__gatt__mcc_1ga128883c867b10e57d3f2f26a708b7263" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga128883c867b10e57d3f2f26a708b7263" kindref="member">bt_mcc_read_track_position_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="printk_8c_1a1910d262855b71da353ed0d07a6c7823" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group__bt__gatt__mcc_1ga1167f5e2ef4a7e78469aefc0cef18bff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga1167f5e2ef4a7e78469aefc0cef18bff" kindref="member">bt_mcc_set_track_position_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="printk_8c_1a1910d262855b71da353ed0d07a6c7823" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="group__bt__gatt__mcc_1ga6f5383be3f344c25361786d903640909" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga6f5383be3f344c25361786d903640909" kindref="member">bt_mcc_read_playback_speed_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1accbd6432732c88ad6adc5365800433b6" kindref="member">int8_t</ref><sp/>speed);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="group__bt__gatt__mcc_1ga1322f2ddbb587c70fd23a7ccfc1fc779" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga1322f2ddbb587c70fd23a7ccfc1fc779" kindref="member">bt_mcc_set_playback_speed_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1accbd6432732c88ad6adc5365800433b6" kindref="member">int8_t</ref><sp/>speed);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="group__bt__gatt__mcc_1ga3089e6165e8491325f7205279bb5bb83" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga3089e6165e8491325f7205279bb5bb83" kindref="member">bt_mcc_read_seeking_speed_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1accbd6432732c88ad6adc5365800433b6" kindref="member">int8_t</ref><sp/>speed);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_read_segments_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_read_current_track_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_set_current_track_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_read_next_track_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_set_next_track_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_read_parent_group_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_read_current_group_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_set_current_group_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>obj_id);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="group__bt__gatt__mcc_1gafb0869e0ef5332d39070081efdacf17c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gafb0869e0ef5332d39070081efdacf17c" kindref="member">bt_mcc_read_playing_order_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>order);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="group__bt__gatt__mcc_1ga1a12fb89adf29c83bca02f701213c6d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga1a12fb89adf29c83bca02f701213c6d7" kindref="member">bt_mcc_set_playing_order_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>order);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="group__bt__gatt__mcc_1gac45a2aff295535f70ac4a070e970b7a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gac45a2aff295535f70ac4a070e970b7a0" kindref="member">bt_mcc_read_playing_orders_supported_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>orders);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="group__bt__gatt__mcc_1ga200a827f4bf5d65570ddabd028269f77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga200a827f4bf5d65570ddabd028269f77" kindref="member">bt_mcc_read_media_state_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="group__bt__gatt__mcc_1gab8ebc0c3101acf9b717d814a04860920" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gab8ebc0c3101acf9b717d814a04860920" kindref="member">bt_mcc_send_cmd_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmpl__cmd" kindref="compound">mpl_cmd</ref><sp/><ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="group__bt__gatt__mcc_1ga29dded3f3bc111df88a5dc382ac4718d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1ga29dded3f3bc111df88a5dc382ac4718d" kindref="member">bt_mcc_cmd_ntf_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmpl__cmd__ntf" kindref="compound">mpl_cmd_ntf</ref><sp/>ntf);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="group__bt__gatt__mcc_1gab37df36e15132b9235d1093f5aa403cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gab37df36e15132b9235d1093f5aa403cc" kindref="member">bt_mcc_read_opcodes_supported_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>opcodes);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_send_search_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmpl__search" kindref="compound">mpl_search</ref><sp/><ref refid="structmpl__search_1aa2332c1802786e2ef0486ede1c3a24c7" kindref="member">search</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_search_ntf_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>result_code);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_read_search_results_obj_id_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>id);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="group__bt__gatt__mcc_1gadb607997fdcb3e57bbfc90790de4b927" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__bt__gatt__mcc_1gadb607997fdcb3e57bbfc90790de4b927" kindref="member">bt_mcc_read_content_control_id_cb</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>ccid);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">/****<sp/>Callback<sp/>functions<sp/>for<sp/>the<sp/>included<sp/>Object<sp/>Transfer<sp/>service<sp/>*************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_obj_selected_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_obj_metadata_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_read_icon_object_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_read_track_segments_object_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_read_current_track_object_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_read_next_track_object_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_read_parent_group_object_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*bt_mcc_otc_read_current_group_object_cb)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="structbt__mcc__cb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__mcc__cb" kindref="compound">bt_mcc_cb</ref><sp/>{</highlight></codeline>
<codeline lineno="516" refid="structbt__mcc__cb_1a2f48a0e0b891131347b0ddc2cb5a8ba7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gab268faeca207e115ee1be0843ab8c342" kindref="member">bt_mcc_discover_mcs_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a2f48a0e0b891131347b0ddc2cb5a8ba7" kindref="member">discover_mcs</ref>;</highlight></codeline>
<codeline lineno="517" refid="structbt__mcc__cb_1aeea1ef17b3b1e24c965d71f210952079" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gaa943b61848ee43e91d473f6fdd0a604f" kindref="member">bt_mcc_read_player_name_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1aeea1ef17b3b1e24c965d71f210952079" kindref="member">read_player_name</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_read_icon_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_icon_obj_id;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="structbt__mcc__cb_1a8c7b5954e286d074a94a39bee266082c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gaaddc4abe38f6ca811967ae6a10d8f8f0" kindref="member">bt_mcc_read_icon_url_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a8c7b5954e286d074a94a39bee266082c" kindref="member">read_icon_url</ref>;</highlight></codeline>
<codeline lineno="522" refid="structbt__mcc__cb_1abb7769b73564a22645bfe6b11f239637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga67611a3068284b0c7fbb3ef07dfe7688" kindref="member">bt_mcc_track_changed_ntf_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1abb7769b73564a22645bfe6b11f239637" kindref="member">track_changed_ntf</ref>;</highlight></codeline>
<codeline lineno="523" refid="structbt__mcc__cb_1a3975e296b67eb244bf92254e9776ea3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga6927860f1803aeade4994610da32d402" kindref="member">bt_mcc_read_track_title_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a3975e296b67eb244bf92254e9776ea3c" kindref="member">read_track_title</ref>;</highlight></codeline>
<codeline lineno="524" refid="structbt__mcc__cb_1a85268d9ce708aef01aa528aaedf0f7e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga7cdb524ff9c34f24c1740adb9eca072c" kindref="member">bt_mcc_read_track_duration_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a85268d9ce708aef01aa528aaedf0f7e0" kindref="member">read_track_duration</ref>;</highlight></codeline>
<codeline lineno="525" refid="structbt__mcc__cb_1ad1636e717ef5039586b7a1462041e888" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga128883c867b10e57d3f2f26a708b7263" kindref="member">bt_mcc_read_track_position_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1ad1636e717ef5039586b7a1462041e888" kindref="member">read_track_position</ref>;</highlight></codeline>
<codeline lineno="526" refid="structbt__mcc__cb_1affa57da8f325dce8298d097af38d0d62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga1167f5e2ef4a7e78469aefc0cef18bff" kindref="member">bt_mcc_set_track_position_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1affa57da8f325dce8298d097af38d0d62" kindref="member">set_track_position</ref>;</highlight></codeline>
<codeline lineno="527" refid="structbt__mcc__cb_1a47f8d92b18b0e4ffb3aacde05e7cb410" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga6f5383be3f344c25361786d903640909" kindref="member">bt_mcc_read_playback_speed_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a47f8d92b18b0e4ffb3aacde05e7cb410" kindref="member">read_playback_speed</ref>;</highlight></codeline>
<codeline lineno="528" refid="structbt__mcc__cb_1a5f87b5d07241b4124911be0cd6c43b37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga1322f2ddbb587c70fd23a7ccfc1fc779" kindref="member">bt_mcc_set_playback_speed_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a5f87b5d07241b4124911be0cd6c43b37" kindref="member">set_playback_speed</ref>;</highlight></codeline>
<codeline lineno="529" refid="structbt__mcc__cb_1a75c8e63baf45a119e9007f246362ab8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga3089e6165e8491325f7205279bb5bb83" kindref="member">bt_mcc_read_seeking_speed_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a75c8e63baf45a119e9007f246362ab8d" kindref="member">read_seeking_speed</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_read_segments_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_segments_obj_id;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_read_current_track_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/>read_current_track_obj_id;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_set_current_track_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_current_track_obj_id;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_read_next_track_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_next_track_obj_id;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_set_next_track_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_next_track_obj_id;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_read_current_group_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/>read_current_group_obj_id;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_set_current_group_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_current_group_obj_id;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_read_parent_group_obj_id_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_parent_group_obj_id;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="structbt__mcc__cb_1a3538beef41edd96b8557b43c1266078b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gafb0869e0ef5332d39070081efdacf17c" kindref="member">bt_mcc_read_playing_order_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a3538beef41edd96b8557b43c1266078b" kindref="member">read_playing_order</ref>;</highlight></codeline>
<codeline lineno="541" refid="structbt__mcc__cb_1a00a0ba5ed665ef7fc2ca861d985ccd64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga1a12fb89adf29c83bca02f701213c6d7" kindref="member">bt_mcc_set_playing_order_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a00a0ba5ed665ef7fc2ca861d985ccd64" kindref="member">set_playing_order</ref>;</highlight></codeline>
<codeline lineno="542" refid="structbt__mcc__cb_1a929d7b8fc925961048d5ff5e70a5126e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gac45a2aff295535f70ac4a070e970b7a0" kindref="member">bt_mcc_read_playing_orders_supported_cb</ref><sp/><sp/><ref refid="structbt__mcc__cb_1a929d7b8fc925961048d5ff5e70a5126e" kindref="member">read_playing_orders_supported</ref>;</highlight></codeline>
<codeline lineno="543" refid="structbt__mcc__cb_1a38e4682608c7d7ff6c44431a6bdab3af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga200a827f4bf5d65570ddabd028269f77" kindref="member">bt_mcc_read_media_state_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a38e4682608c7d7ff6c44431a6bdab3af" kindref="member">read_media_state</ref>;</highlight></codeline>
<codeline lineno="544" refid="structbt__mcc__cb_1a90e62e90752087da36122a65f6c9ed4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gab8ebc0c3101acf9b717d814a04860920" kindref="member">bt_mcc_send_cmd_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a90e62e90752087da36122a65f6c9ed4e" kindref="member">send_cmd</ref>;</highlight></codeline>
<codeline lineno="545" refid="structbt__mcc__cb_1a835f60ad32edc4311a624e779972f0d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1ga29dded3f3bc111df88a5dc382ac4718d" kindref="member">bt_mcc_cmd_ntf_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1a835f60ad32edc4311a624e779972f0d5" kindref="member">cmd_ntf</ref>;</highlight></codeline>
<codeline lineno="546" refid="structbt__mcc__cb_1ad7ddcae67bf71030ac2d8438ac2e863f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gab37df36e15132b9235d1093f5aa403cc" kindref="member">bt_mcc_read_opcodes_supported_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1ad7ddcae67bf71030ac2d8438ac2e863f" kindref="member">read_opcodes_supported</ref>;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_send_search_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_search;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_search_ntf_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>search_ntf;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_read_search_results_obj_id_cb<sp/><sp/><sp/><sp/><sp/>read_search_results_obj_id;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="structbt__mcc__cb_1ae4d0e2e4df695352e8d2ed76db1f420e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__gatt__mcc_1gadb607997fdcb3e57bbfc90790de4b927" kindref="member">bt_mcc_read_content_control_id_cb</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbt__mcc__cb_1ae4d0e2e4df695352e8d2ed76db1f420e" kindref="member">read_content_control_id</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_obj_selected_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otc_obj_selected;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_obj_metadata_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otc_obj_metadata;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_read_icon_object_cb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otc_icon_object;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_read_track_segments_object_cb<sp/>otc_track_segments_object;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_read_current_track_object_cb<sp/><sp/>otc_current_track_object;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_read_next_track_object_cb<sp/><sp/><sp/><sp/><sp/>otc_next_track_object;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_read_current_group_object_cb<sp/><sp/>otc_current_group_object;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bt_mcc_otc_read_parent_group_object_cb<sp/><sp/><sp/>otc_parent_group_object;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">/****<sp/>Functions<sp/>***************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="574" refid="group__bt__gatt__mcc_1ga94de08bb0a1e1324600e4957b648e92b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga94de08bb0a1e1324600e4957b648e92b" kindref="member">bt_mcc_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__mcc__cb" kindref="compound">bt_mcc_cb</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="group__bt__gatt__mcc_1gaa1f9ead03b4cccaff1e3390b8052b0f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1gaa1f9ead03b4cccaff1e3390b8052b0f3" kindref="member">bt_mcc_discover_mcs</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>subscribe);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="group__bt__gatt__mcc_1ga724ce71fc88f1ca4bcf209c92c177f36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga724ce71fc88f1ca4bcf209c92c177f36" kindref="member">bt_mcc_read_player_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_read_icon_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="group__bt__gatt__mcc_1ga38733456db6bc6558a511e104577c9c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga38733456db6bc6558a511e104577c9c9" kindref="member">bt_mcc_read_icon_url</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="group__bt__gatt__mcc_1ga7dfa14489a4cea4b00053c9aa75cf373" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga7dfa14489a4cea4b00053c9aa75cf373" kindref="member">bt_mcc_read_track_title</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="group__bt__gatt__mcc_1ga50a45f043bd2ae1741a120e02e9dc2f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga50a45f043bd2ae1741a120e02e9dc2f5" kindref="member">bt_mcc_read_track_duration</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="group__bt__gatt__mcc_1gaf143098f5dfcfba01df3d6f06472779e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1gaf143098f5dfcfba01df3d6f06472779e" kindref="member">bt_mcc_read_track_position</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="group__bt__gatt__mcc_1gad324366d33bef6b1ed1c8fc881bf44cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1gad324366d33bef6b1ed1c8fc881bf44cf" kindref="member">bt_mcc_set_track_position</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="printk_8c_1a1910d262855b71da353ed0d07a6c7823" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="group__bt__gatt__mcc_1gaa566a4c42f0ab0ab6feddf4e25845609" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1gaa566a4c42f0ab0ab6feddf4e25845609" kindref="member">bt_mcc_read_playback_speed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="676" refid="group__bt__gatt__mcc_1ga1382e5b6000896dc94f6489909301719" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga1382e5b6000896dc94f6489909301719" kindref="member">bt_mcc_set_playback_speed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/><ref refid="stdint_8h_1accbd6432732c88ad6adc5365800433b6" kindref="member">int8_t</ref><sp/>speed);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="685" refid="group__bt__gatt__mcc_1ga366fdfaa23cef9f1c3ba7ddd36a67658" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga366fdfaa23cef9f1c3ba7ddd36a67658" kindref="member">bt_mcc_read_seeking_speed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_read_segments_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_read_current_track_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_set_current_track_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_read_next_track_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_set_next_track_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_read_current_group_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_set_current_group_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_read_parent_group_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="group__bt__gatt__mcc_1ga077a134ff1404fb76aa756a5531fd1d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga077a134ff1404fb76aa756a5531fd1d7" kindref="member">bt_mcc_read_playing_order</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="group__bt__gatt__mcc_1ga05295649385c3a337401765627d09553" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga05295649385c3a337401765627d09553" kindref="member">bt_mcc_set_playing_order</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>order);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="group__bt__gatt__mcc_1gaf61f6fcf3f96ccb6f5a72ffaad27dec4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1gaf61f6fcf3f96ccb6f5a72ffaad27dec4" kindref="member">bt_mcc_read_playing_orders_supported</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="806" refid="group__bt__gatt__mcc_1gac1b440cfa54dd4b6e23bb47bf885f88d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1gac1b440cfa54dd4b6e23bb47bf885f88d" kindref="member">bt_mcc_read_media_state</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="818" refid="group__bt__gatt__mcc_1gaace3924896d6132ce936fa13516244e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1gaace3924896d6132ce936fa13516244e4" kindref="member">bt_mcc_send_cmd</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmpl__cmd" kindref="compound">mpl_cmd</ref><sp/><ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="827" refid="group__bt__gatt__mcc_1ga692160554947f92e8c81912c5e597086" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga692160554947f92e8c81912c5e597086" kindref="member">bt_mcc_read_opcodes_supported</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_send_search(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmpl__search" kindref="compound">mpl_search</ref><sp/>search);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_read_search_results_obj_id(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="859" refid="group__bt__gatt__mcc_1ga77cbf810c35d1a17efce1fae6a941963" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__bt__gatt__mcc_1ga77cbf810c35d1a17efce1fae6a941963" kindref="member">bt_mcc_read_content_control_id</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_BT_OTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_otc_read_object_metadata(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_otc_read_icon_object(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_otc_read_track_segments_object(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_otc_read_current_track_object(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_otc_read_next_track_object(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_otc_read_current_group_object(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bt_mcc_otc_read_parent_group_object(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>bt_conn<sp/>*conn);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_BT_MCC_SHELL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bt_otc_instance_t<sp/>*bt_mcc_otc_inst(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(CONFIG_BT_MCC_SHELL)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_OTC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_BLUETOOTH_AUDIO_MCC__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/audio/mcc.h"/>
  </compounddef>
</doxygen>
