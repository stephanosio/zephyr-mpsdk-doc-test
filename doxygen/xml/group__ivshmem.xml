<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ivshmem" kind="group">
    <compoundname>ivshmem</compoundname>
    <title>ivshmem reference API</title>
    <innerclass refid="structivshmem__driver__api" prot="public">ivshmem_driver_api</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ivshmem_1gaf8f761888728090ab6adb11f3b700057" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* ivshmem_get_mem_f) (const struct device *dev, uintptr_t *memmap)</definition>
        <argsstring>)(const struct device *dev, uintptr_t *memmap)</argsstring>
        <name>ivshmem_get_mem_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="24" column="9" bodyfile="include/drivers/virtualization/ivshmem.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ivshmem_1ga8a6f4c145426f8a28c0f3a52875b7ea1" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>(*</type>
        <definition>typedef uint32_t(* ivshmem_get_id_f) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>ivshmem_get_id_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="27" column="9" bodyfile="include/drivers/virtualization/ivshmem.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ivshmem_1ga7e25f5db9ac889a2ff05694f60f66e39" prot="public" static="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref>(*</type>
        <definition>typedef uint16_t(* ivshmem_get_vectors_f) (const struct device *dev)</definition>
        <argsstring>)(const struct device *dev)</argsstring>
        <name>ivshmem_get_vectors_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="29" column="9" bodyfile="include/drivers/virtualization/ivshmem.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ivshmem_1ga1af6d005fac141c84716b18705219bfd" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ivshmem_int_peer_f) (const struct device *dev, uint32_t peer_id, uint16_t vector)</definition>
        <argsstring>)(const struct device *dev, uint32_t peer_id, uint16_t vector)</argsstring>
        <name>ivshmem_int_peer_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="31" column="9" bodyfile="include/drivers/virtualization/ivshmem.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ivshmem_1ga842bee3ff990f166665593c384c6bb21" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ivshmem_register_handler_f) (const struct device *dev, struct k_poll_signal *signal, uint16_t vector)</definition>
        <argsstring>)(const struct device *dev, struct k_poll_signal *signal, uint16_t vector)</argsstring>
        <name>ivshmem_register_handler_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="34" column="9" bodyfile="include/drivers/virtualization/ivshmem.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ivshmem_1gaef043cbfbe0aa5061db57f9bbae02eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ivshmem_get_mem</definition>
        <argsstring>(const struct device *dev, uintptr_t *memmap)</argsstring>
        <name>ivshmem_get_mem</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>memmap</declname>
        </param>
        <briefdescription>
<para>Get the inter-VM shared memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to fill in with the memory address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the memory mapped, or 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="54" column="9" declfile="include/drivers/virtualization/ivshmem.h" declline="54" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ivshmem_1gab2f0ccd5a2b8203a54ee5707b3afd6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ivshmem_get_id</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>ivshmem_get_id</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get our VM ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>our VM ID or 0 if we are not running on doorbell version </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="73" column="11" declfile="include/drivers/virtualization/ivshmem.h" declline="73" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__ivshmem_1gafee360f2c35abb9a203dd9f4838b8846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t ivshmem_get_vectors</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>ivshmem_get_vectors</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the number of interrupt vectors we can use. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of available interrupt vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="90" column="11" declfile="include/drivers/virtualization/ivshmem.h" declline="90" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__ivshmem_1gab4e02271f8b854c783c359aca240d20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ivshmem_int_peer</definition>
        <argsstring>(const struct device *dev, uint32_t peer_id, uint16_t vector)</argsstring>
        <name>ivshmem_int_peer</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>peer_id</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Interrupt another VM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The VM ID to interrupt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt vector to use</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative errno otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="109" column="6" declfile="include/drivers/virtualization/ivshmem.h" declline="109" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ivshmem_1ga88aacb71bff0375c10fdb48e34b359fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ivshmem_register_handler</definition>
        <argsstring>(const struct device *dev, struct k_poll_signal *signal, uint16_t vector)</argsstring>
        <name>ivshmem_register_handler</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>signal</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Register a vector notification (interrupt) handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid and ready to be signaled struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref>. Or NULL to unregister any handler registered for the given vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt vector to get notification from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Note: The returned status, if positive, to a raised signal is the vector that generated the signal. This lets the possibility to the user to have one signal for all vectors, or one per-vector.</para>
<para><simplesect kind="return"><para>0 on success, a negative errno otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/virtualization/ivshmem.h" line="136" column="6" declfile="include/drivers/virtualization/ivshmem.h" declline="136" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ivshmem reference API </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
