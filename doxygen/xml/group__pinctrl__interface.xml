<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__pinctrl__interface" kind="group">
    <compoundname>pinctrl_interface</compoundname>
    <title>Pin Controller Interface</title>
    <innerclass refid="structpinctrl__state" prot="public">pinctrl_state</innerclass>
    <innerclass refid="structpinctrl__dev__config" prot="public">pinctrl_dev_config</innerclass>
    <innergroup refid="group__pinctrl__interface__dynamic">Dynamic Pin Control</innergroup>
      <sectiondef kind="user-defined">
      <header>Pin control states</header>
      <description><para><anchor id="group__pinctrl__interface_1PINCTRL_STATES"/></para>
</description>
      <memberdef kind="define" id="group__pinctrl__interface_1ga9bc564353cb9b1a7238c9fe8796023e6" prot="public" static="no">
        <name>PINCTRL_STATE_DEFAULT</name>
        <initializer>0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default state (state used when the device is in operational state). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="38" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga2ea5ac271930e0e2e9f77952b2dbea1b" prot="public" static="no">
        <name>PINCTRL_STATE_SLEEP</name>
        <initializer>1U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sleep state (state used when the device is in low power mode). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="40" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga25989d7b48b2d7aa4f8ca6a30d9c9077" prot="public" static="no">
        <name>PINCTRL_STATE_PRIV_START</name>
        <initializer>2U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This and higher values refer to custom private states. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="43" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pinctrl__interface_1ga46d7997af7e9231b431c79af34288d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pinctrl_lookup_state</definition>
        <argsstring>(const struct pinctrl_dev_config *config, uint8_t id, const struct pinctrl_state **state)</argsstring>
        <name>pinctrl_lookup_state</name>
        <param>
          <type>const struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref> **</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Find the state configuration for the given state id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin controller configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin controller state id (see <ref refid="group__pinctrl__interface_1PINCTRL_STATES" kindref="member">PINCTRL_STATES</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Found state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If state has been found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>If the state has not been found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="283" column="5" declfile="include/drivers/pinctrl.h" declline="283" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pinctrl__interface_1ga3397507e30eb10e814b793615f80455b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pinctrl_configure_pins</definition>
        <argsstring>(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt, uintptr_t reg)</argsstring>
        <name>pinctrl_configure_pins</name>
        <param>
          <type>const pinctrl_soc_pin_t *</type>
          <declname>pins</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>pin_cnt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Configure a set of pins. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will configure the necessary hardware blocks to make the configuration immediately effective.</para>
<para><simplesect kind="warning"><para>This function must never be used to configure pins used by an instantiated device driver.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pins to be configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of pins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Device register (optional, use <ref refid="group__pinctrl__interface_1ga6e283a1a1b040323b96227b2ea8f731e" kindref="member">PINCTRL_REG_NONE</ref> if not used).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If succeeded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno for other failures. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="302" column="5" declfile="include/drivers/pinctrl.h" declline="302" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__pinctrl__interface_1ga3549075e60ccdb743b269d590600d41b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pinctrl_apply_state_direct</definition>
        <argsstring>(const struct pinctrl_dev_config *config, const struct pinctrl_state *state)</argsstring>
        <name>pinctrl_apply_state_direct</name>
        <param>
          <type>const struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const struct <ref refid="structpinctrl__state" kindref="compound">pinctrl_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Apply a state directly from the provided state configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin control configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>State.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If succeeded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno for other failures. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="314" column="19" bodyfile="include/drivers/pinctrl.h" bodystart="314" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="group__pinctrl__interface_1ga16a9391222345d00dbc5c39c45f429f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int pinctrl_apply_state</definition>
        <argsstring>(const struct pinctrl_dev_config *config, uint8_t id)</argsstring>
        <name>pinctrl_apply_state</name>
        <param>
          <type>const struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Apply a state from the given device configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin control configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the state to be applied (see <ref refid="group__pinctrl__interface_1PINCTRL_STATES" kindref="member">PINCTRL_STATES</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>If given state id does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative errno for other failures. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="339" column="19" bodyfile="include/drivers/pinctrl.h" bodystart="339" bodyend="351"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__pinctrl__interface_1ga6e283a1a1b040323b96227b2ea8f731e" prot="public" static="no">
        <name>PINCTRL_REG_NONE</name>
        <initializer>0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility macro to indicate no register is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="73" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga636656676e81c65e1133607c972d65f4" prot="public" static="no">
        <name>PINCTRL_DT_DEV_CONFIG_DECLARE</name>
        <param><defname>node_id</defname></param>
        <initializer>	extern Z_PINCTRL_DEV_CONFIG_CONST struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref>	       \
	Z_PINCTRL_DEV_CONFIG_NAME(node_id)</initializer>
        <briefdescription>
<para>Declare pin control configuration for a given node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro should be used by tests or applications using runtime pin control to declare the pin control configuration for a device. <ref refid="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" kindref="member">PINCTRL_DT_DEV_CONFIG_GET</ref> can later be used to obtain a reference to such configuration.</para>
<para>Only available if <verbatim>embed:rst:inline :kconfig:`CONFIG_PINCTRL_NON_STATIC` </verbatim> is selected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="221" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1gace422fcd4b28e6e6e6fdbbc64b99468f" prot="public" static="no">
        <name>PINCTRL_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga31079a877f7990c552cbfaf10225e37a" kindref="member">UTIL_LISTIFY</ref>(<ref refid="group__devicetree-pinctrl_1gaa2a012ce1d9ba026ee90001ae7f80381" kindref="member">DT_NUM_PINCTRL_STATES</ref>(node_id),			       \
		     Z_PINCTRL_STATE_PINS_DEFINE, node_id)		       \
	Z_PINCTRL_STATES_DEFINE(node_id)				       \
	Z_PINCTRL_DEV_CONFIG_CONST Z_PINCTRL_DEV_CONFIG_STATIC		       \
	struct <ref refid="structpinctrl__dev__config" kindref="compound">pinctrl_dev_config</ref> Z_PINCTRL_DEV_CONFIG_NAME(node_id) =	       \
	Z_PINCTRL_DEV_CONFIG_INIT(node_id)</initializer>
        <briefdescription>
<para>Define all pin control information for the given node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper macro should be called together with device definition. It defines and initializes the pin control configuration for the device represented by node_id. Each pin control state (pinctrl-0, ..., pinctrl-N) is also defined and initialized. Note that states marked to be skipped will not be defined (refer to Z_PINCTRL_SKIP_STATE for more details).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="237" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga8e984a57fd3c7a04cc921131ce79ac28" prot="public" static="no">
        <name>PINCTRL_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <initializer><ref refid="group__pinctrl__interface_1gace422fcd4b28e6e6e6fdbbc64b99468f" kindref="member">PINCTRL_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Define all pin control information for the given compatible index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__pinctrl__interface_1gace422fcd4b28e6e6e6fdbbc64b99468f" kindref="member">PINCTRL_DT_DEFINE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="252" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" prot="public" static="no">
        <name>PINCTRL_DT_DEV_CONFIG_GET</name>
        <param><defname>node_id</defname></param>
        <initializer>&amp;Z_PINCTRL_DEV_CONFIG_NAME(node_id)</initializer>
        <briefdescription>
<para>Obtain a reference to the pin control configuration given a node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="260" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pinctrl__interface_1ga32748ffc5be4710707c7f1d9380cf93c" prot="public" static="no">
        <name>PINCTRL_DT_INST_DEV_CONFIG_GET</name>
        <param><defname>inst</defname></param>
        <initializer>	<ref refid="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" kindref="member">PINCTRL_DT_DEV_CONFIG_GET</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Obtain a reference to the pin control configuration given current compatible instance number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__pinctrl__interface_1ga502c3b6faec140188dd5d614f4777918" kindref="member">PINCTRL_DT_DEV_CONFIG_GET</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pinctrl.h" line="270" column="9" bodyfile="include/drivers/pinctrl.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Pin Controller Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
