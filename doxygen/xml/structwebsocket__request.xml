<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structwebsocket__request" kind="struct" language="C++" prot="public">
    <compoundname>websocket_request</compoundname>
    <includes refid="websocket_8h" local="no">websocket.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structwebsocket__request_1a8769d50f1a6168dc6518f2dd0c74b62a" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* websocket_request::host</definition>
        <argsstring></argsstring>
        <name>host</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Host of the Websocket server when doing HTTP handshakes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="69" column="12" bodyfile="include/net/websocket.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwebsocket__request_1a49ef6c2f4201beeb3af8992ded2bd4a3" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* websocket_request::url</definition>
        <argsstring></argsstring>
        <name>url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>URL of the Websocket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="72" column="12" bodyfile="include/net/websocket.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwebsocket__request_1ab7a281fff2a27a52f7ec346643f55b71" prot="public" static="no" mutable="no">
        <type><ref refid="group__http__client_1gad34656b7c3e6c2e77016b0613f1b4661" kindref="member">http_header_cb_t</ref></type>
        <definition>http_header_cb_t websocket_request::optional_headers_cb</definition>
        <argsstring></argsstring>
        <name>optional_headers_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied callback function to call when optional headers need to be sent. This can be NULL, in which case the optional_headers field in <ref refid="structhttp__request" kindref="compound">http_request</ref> is used. The idea of this optional_headers callback is to allow user to send more HTTP header data that is practical to store in allocated memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="80" column="18" bodyfile="include/net/websocket.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwebsocket__request_1a4cea74d6094325b218b6bbed4005b912" prot="public" static="no" mutable="no">
        <type>const char **</type>
        <definition>const char** websocket_request::optional_headers</definition>
        <argsstring></argsstring>
        <name>optional_headers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A NULL terminated list of any optional headers that should be added to the HTTP request. May be NULL. If the optional_headers_cb is specified, then this field is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="86" column="12" bodyfile="include/net/websocket.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwebsocket__request_1a96936b68fec07f077d9e9569ef1411d1" prot="public" static="no" mutable="no">
        <type><ref refid="group__websocket_1ga4cfa3b60fe810341a1dbc80ecfe49a8e" kindref="member">websocket_connect_cb_t</ref></type>
        <definition>websocket_connect_cb_t websocket_request::cb</definition>
        <argsstring></argsstring>
        <name>cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied callback function to call when a connection is established. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="91" column="24" bodyfile="include/net/websocket.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwebsocket__request_1a38315d0c37bdc8cfe22cdbc6d2c8af4a" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structhttp__parser__settings" kindref="compound">http_parser_settings</ref> *</type>
        <definition>const struct http_parser_settings* websocket_request::http_cb</definition>
        <argsstring></argsstring>
        <name>http_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied list of callback functions if the calling application wants to know the parsing status or the HTTP fields during the handshake. This is optional parameter and normally not needed but is useful if the caller wants to know something about the fields that the server is sending. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="99" column="33" bodyfile="include/net/websocket.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwebsocket__request_1a939ed8e980af4bc98f30d1bad835a2d2" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>uint8_t* websocket_request::tmp_buf</definition>
        <argsstring></argsstring>
        <name>tmp_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User supplied buffer where HTTP connection data is stored </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="102" column="9" bodyfile="include/net/websocket.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwebsocket__request_1a09bb3c708b51d8f86de244b3fc4a9f57" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t websocket_request::tmp_buf_len</definition>
        <argsstring></argsstring>
        <name>tmp_buf_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of the user supplied temp buffer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/websocket.h" line="105" column="8" bodyfile="include/net/websocket.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Websocket client connection request. This contains all the data that is needed when doing a Websocket connection request. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="12">
        <label>__thread_entry</label>
      </node>
      <node id="10">
        <label>_callee_saved</label>
      </node>
      <node id="14">
        <label>_mem_domain_info</label>
      </node>
      <node id="20">
        <label>_slist</label>
      </node>
      <node id="6">
        <label>_snode</label>
      </node>
      <node id="19">
        <label>_thread_arch</label>
      </node>
      <node id="9">
        <label>_thread_base</label>
      </node>
      <node id="13">
        <label>_thread_stack_info</label>
      </node>
      <node id="21">
        <label>_timeout</label>
      </node>
      <node id="11">
        <label>_wait_q_t</label>
      </node>
      <node id="3">
        <label>http_client_internal_data</label>
        <link refid="structhttp__client__internal__data"/>
        <childnode refid="4" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>parser</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>parser_settings</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>response</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>http_parser</label>
        <link refid="structhttp__parser"/>
        <childnode refid="23" relation="usage">
          <edgelabel>addr</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>http_parser_settings</label>
        <link refid="structhttp__parser__settings"/>
        <childnode refid="22" relation="usage">
          <edgelabel>on_body</edgelabel>
          <edgelabel>on_chunk_complete</edgelabel>
          <edgelabel>on_chunk_header</edgelabel>
          <edgelabel>on_header_field</edgelabel>
          <edgelabel>on_header_value</edgelabel>
          <edgelabel>on_headers_complete</edgelabel>
          <edgelabel>on_message_begin</edgelabel>
          <edgelabel>on_message_complete</edgelabel>
          <edgelabel>on_status</edgelabel>
          <edgelabel>on_url</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>http_request</label>
        <link refid="structhttp__request"/>
        <childnode refid="3" relation="usage">
          <edgelabel>internal</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>response</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>http_cb</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>optional_headers_cb</edgelabel>
          <edgelabel>payload_cb</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>http_response</label>
        <link refid="structhttp__response"/>
        <childnode refid="24" relation="usage">
          <edgelabel>http_cb</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>cb</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="17" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="8">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="9" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>k_timeout_t</label>
        <link refid="structk__timeout__t"/>
      </node>
      <node id="5">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="6" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>k_work_delayable</label>
        <link refid="structk__work__delayable"/>
        <childnode refid="5" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="8" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>sockaddr</label>
        <link refid="structsockaddr"/>
      </node>
      <node id="17">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="1">
        <label>websocket_request</label>
        <link refid="structwebsocket__request"/>
        <childnode refid="2" relation="usage">
          <edgelabel>cb</edgelabel>
          <edgelabel>optional_headers_cb</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>http_cb</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/net/websocket.h" line="67" column="1" bodyfile="include/net/websocket.h" bodystart="67" bodyend="106"/>
    <listofallmembers>
      <member refid="structwebsocket__request_1a96936b68fec07f077d9e9569ef1411d1" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>cb</name></member>
      <member refid="structwebsocket__request_1a8769d50f1a6168dc6518f2dd0c74b62a" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>host</name></member>
      <member refid="structwebsocket__request_1a38315d0c37bdc8cfe22cdbc6d2c8af4a" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>http_cb</name></member>
      <member refid="structwebsocket__request_1a4cea74d6094325b218b6bbed4005b912" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>optional_headers</name></member>
      <member refid="structwebsocket__request_1ab7a281fff2a27a52f7ec346643f55b71" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>optional_headers_cb</name></member>
      <member refid="structwebsocket__request_1a939ed8e980af4bc98f30d1bad835a2d2" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>tmp_buf</name></member>
      <member refid="structwebsocket__request_1a09bb3c708b51d8f86de244b3fc4a9f57" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>tmp_buf_len</name></member>
      <member refid="structwebsocket__request_1a49ef6c2f4201beeb3af8992ded2bd4a3" prot="public" virt="non-virtual"><scope>websocket_request</scope><name>url</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
