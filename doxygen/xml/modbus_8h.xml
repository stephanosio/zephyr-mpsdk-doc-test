<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="modbus_8h" kind="file" language="C++">
    <compoundname>modbus.h</compoundname>
    <includes refid="uart_8h" local="no">drivers/uart.h</includes>
    <incdepgraph>
      <node id="2">
        <label>drivers/uart.h</label>
        <link refid="uart_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/modbus/modbus.h</label>
        <link refid="modbus_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="3">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>device.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="9">
        <label>syscalls/uart.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmodbus__adu" prot="public">modbus_adu</innerclass>
    <innerclass refid="structmodbus__user__callbacks" prot="public">modbus_user_callbacks</innerclass>
    <innerclass refid="structmodbus__serial__param" prot="public">modbus_serial_param</innerclass>
    <innerclass refid="structmodbus__server__param" prot="public">modbus_server_param</innerclass>
    <innerclass refid="structmodbus__iface__param" prot="public">modbus_iface_param</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__modbus_1ga1015513d4d3b6621fc18dcfda79116a2" prot="public" static="no">
        <name>MODBUS_MBAP_LENGTH</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of MBAP Header </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="40" column="9" bodyfile="include/modbus/modbus.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modbus_1gae8a6fcfc117e7c4b2ac32aef90155698" prot="public" static="no">
        <name>MODBUS_MBAP_AND_FC_LENGTH</name>
        <initializer>(<ref refid="group__modbus_1ga1015513d4d3b6621fc18dcfda79116a2" kindref="member">MODBUS_MBAP_LENGTH</ref> + 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of MBAP Header plus function code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="42" column="9" bodyfile="include/modbus/modbus.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__modbus_1ga4bd8913e1c77a1e4b19585caa9f77c2e" prot="public" static="no" strong="no">
        <type></type>
        <name>modbus_mode</name>
        <enumvalue id="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea52033dc2ef37fc286a590b1f97d946ef" prot="public">
          <name>MODBUS_MODE_RTU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Modbus over serial line RTU mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2eafdf029741cc1bdecb2cb9baf4f06732a" prot="public">
          <name>MODBUS_MODE_ASCII</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Modbus over serial line ASCII mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea4d05b2cfd56ccf15eb1d8c7bb71071ec" prot="public">
          <name>MODBUS_MODE_RAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Modbus raw ADU mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modbus interface mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="388" column="1" bodyfile="include/modbus/modbus.h" bodystart="388" bodyend="395"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__modbus_1ga96e98f3f98831e9cd45faf21264f8f5e" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* modbus_raw_cb_t) (const int iface, const struct modbus_adu *adu)</definition>
        <argsstring>)(const int iface, const struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_cb_t</name>
        <briefdescription>
<para>ADU raw callback function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct to send</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If transfer was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="383" column="9" bodyfile="include/modbus/modbus.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__modbus_1ga05b118dc87ebe3739cac4e9572104ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_coils</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint8_t *const coil_tbl, const uint16_t num_coils)</argsstring>
        <name>modbus_read_coils</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>coil_tbl</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_coils</declname>
        </param>
        <briefdescription>
<para>Coil read (FC01) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the status of coils from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coil starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_tbl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of bytes containing the value of the coils read. The format is: <verbatim>                MSB                               LSB
                B7   B6   B5   B4   B3   B2   B1   B0
                -------------------------------------
coil_tbl[0]     #8   #7                            #1
coil_tbl[1]     #16  #15                           #9
     :
     :
</verbatim> Note that the array that will be receiving the coil values must be greater than or equal to: (num_coils - 1) / 8 + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coils</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of coils to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="91" column="5" declfile="include/modbus/modbus.h" declline="91" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga921fd6036ff1b8a416dc02e30bb6e653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_dinputs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint8_t *const di_tbl, const uint16_t num_di)</argsstring>
        <name>modbus_read_dinputs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>di_tbl</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_di</declname>
        </param>
        <briefdescription>
<para>Read discrete inputs (FC02) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the status of discrete inputs from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Discrete input starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>di_tbl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array that will receive the state of the discrete inputs. The format of the array is as follows: <verbatim>              MSB                               LSB
              B7   B6   B5   B4   B3   B2   B1   B0
              -------------------------------------
di_tbl[0]     #8   #7                            #1
di_tbl[1]     #16  #15                           #9
     :
     :
</verbatim> Note that the array that will be receiving the discrete input values must be greater than or equal to: (num_di - 1) / 8 + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_di</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of discrete inputs to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="125" column="5" declfile="include/modbus/modbus.h" declline="125" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga7d7221b32fbf2395e69e25ef2dbaa036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_holding_regs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint16_t *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_read_holding_regs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Read holding registers (FC03) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the value of holding registers from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array that will receive the current values of the holding registers from the server. The array pointed to by &apos;reg_buf&apos; needs to be able to hold at least &apos;num_regs&apos; entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="148" column="5" declfile="include/modbus/modbus.h" declline="148" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga5ff31ca21cf2d1b081d172228d6c2154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_input_regs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint16_t *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_read_input_regs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Read input registers (FC04) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the value of input registers from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array that will receive the current value of the holding registers from the server. The array pointed to by &apos;reg_buf&apos; needs to be able to hold at least &apos;num_regs&apos; entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="171" column="5" declfile="include/modbus/modbus.h" declline="171" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gaccac4f72b5d66a5a2e6c444dda251c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_coil</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t coil_addr, const bool coil_state)</argsstring>
        <name>modbus_write_coil</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>coil_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>coil_state</declname>
        </param>
        <briefdescription>
<para>Write single coil (FC05) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write the value of single coil to a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coils starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the desired state of the coil</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="189" column="5" declfile="include/modbus/modbus.h" declline="189" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gaf06d2553af8b8e9ab58f54b8b7e2055b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_holding_reg</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, const uint16_t reg_val)</argsstring>
        <name>modbus_write_holding_reg</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>reg_val</declname>
        </param>
        <briefdescription>
<para>Write single holding register (FC06) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write the value of single holding register to a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coils starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired value of the holding register</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="207" column="5" declfile="include/modbus/modbus.h" declline="207" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gac924251f66ca6f357d8b7d90075df210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_request_diagnostic</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t sfunc, const uint16_t data, uint16_t *const data_out)</argsstring>
        <name>modbus_request_diagnostic</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sfunc</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>data_out</declname>
        </param>
        <briefdescription>
<para>Read diagnostic (FC08) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to perform a diagnostic function of a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sfunc</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagnostic sub-function code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub-function data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="225" column="5" declfile="include/modbus/modbus.h" declline="225" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gac0fa22cd0d1fa861fdbc04b65ea60d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_coils</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint8_t *const coil_tbl, const uint16_t num_coils)</argsstring>
        <name>modbus_write_coils</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>coil_tbl</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_coils</declname>
        </param>
        <briefdescription>
<para>Write coils (FC15) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write to coils on a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coils starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_tbl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of bytes containing the value of the coils to write. The format is: <verbatim>                MSB                               LSB
                B7   B6   B5   B4   B3   B2   B1   B0
                -------------------------------------
coil_tbl[0]     #8   #7                            #1
coil_tbl[1]     #16  #15                           #9
     :
     :
</verbatim> Note that the array that will be receiving the coil values must be greater than or equal to: (num_coils - 1) / 8 + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coils</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of coils to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="258" column="5" declfile="include/modbus/modbus.h" declline="258" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gadc8273292e0efc8c0d65c00eea7a22c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_holding_regs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint16_t *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_write_holding_regs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Write holding registers (FC16) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write to integer holding registers to a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array containing the value of the holding registers to write. Note that the array containing the register values must be greater than or equal to &apos;num_regs&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="281" column="5" declfile="include/modbus/modbus.h" declline="281" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga9a8ae6fb4b1aee398f5b19f074d07ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_holding_regs_fp</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, float *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_read_holding_regs_fp</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Read floating-point holding registers (FC03) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the value of floating-point holding registers from a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array that will receive the current values of the holding registers from the server. The array pointed to by &apos;reg_buf&apos; needs to be able to hold at least &apos;num_regs&apos; entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="304" column="5" declfile="include/modbus/modbus.h" declline="304" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga762da245db3ca4f60fb3aa6c5783c73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_holding_regs_fp</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, float *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_write_holding_regs_fp</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Write floating-point holding registers (FC16) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write to floating-point holding registers to a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array containing the value of the holding registers to write. Note that the array containing the register values must be greater than or equal to &apos;num_regs&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="327" column="5" declfile="include/modbus/modbus.h" declline="327" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gaa17880a268d6b3b9553de835c800af27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_iface_get_by_name</definition>
        <argsstring>(const char *iface_name)</argsstring>
        <name>modbus_iface_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>iface_name</declname>
        </param>
        <briefdescription>
<para>Get Modbus interface index according to interface name. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is more than one interface, it can be used to clearly identify interfaces in the application.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Modbus</parametername>
</parameternamelist>
<parameterdescription>
<para>interface index or negative error value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="373" column="5" declfile="include/modbus/modbus.h" declline="373" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gae4d34276c467bf54e0849a1098e56f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_init_server</definition>
        <argsstring>(const int iface, struct modbus_iface_param param)</argsstring>
        <name>modbus_init_server</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodbus__iface__param" kindref="compound">modbus_iface_param</ref></type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Configure Modbus Interface as raw ADU server. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration parameter of the server interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="451" column="5" declfile="include/modbus/modbus.h" declline="451" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga943eff819ecf1bc268714783047888ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_init_client</definition>
        <argsstring>(const int iface, struct modbus_iface_param param)</argsstring>
        <name>modbus_init_client</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodbus__iface__param" kindref="compound">modbus_iface_param</ref></type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Configure Modbus Interface as raw ADU client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration parameter of the client interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="461" column="5" declfile="include/modbus/modbus.h" declline="461" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga32a6319cc51eb5a98dcb58b3231b9d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_disable</definition>
        <argsstring>(const uint8_t iface)</argsstring>
        <name>modbus_disable</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Disable Modbus Interface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called to disable Modbus interface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="472" column="5" declfile="include/modbus/modbus.h" declline="472" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga6d40e9eda6b8ead6d071d4192ffe489b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_raw_submit_rx</definition>
        <argsstring>(const int iface, const struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_submit_rx</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <briefdescription>
<para>Submit raw ADU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct that is received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If transfer was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="482" column="5" declfile="include/modbus/modbus.h" declline="482" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga8fdae6a92e27a845296c9d8ce4b8078e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modbus_raw_put_header</definition>
        <argsstring>(const struct modbus_adu *adu, uint8_t *header)</argsstring>
        <name>modbus_raw_put_header</name>
        <param>
          <type>const struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Put MBAP header into a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer in which MBAP header will be placed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="491" column="6" declfile="include/modbus/modbus.h" declline="491" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga333072d3536d7b6f0680ceecc2c5bddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modbus_raw_get_header</definition>
        <argsstring>(struct modbus_adu *adu, const uint8_t *header)</argsstring>
        <name>modbus_raw_get_header</name>
        <param>
          <type>struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Get MBAP header from a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer containing MBAP header </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="499" column="6" declfile="include/modbus/modbus.h" declline="499" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gad250c40ba13a7d8c9189de17d1fd31aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modbus_raw_set_server_failure</definition>
        <argsstring>(struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_set_server_failure</name>
        <param>
          <type>struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <briefdescription>
<para>Set Server Device Failure exception. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies ADU passed by the pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="508" column="6" declfile="include/modbus/modbus.h" declline="508" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga7aa5dfd6e457980e9e9b8a77810ec31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_raw_backend_txn</definition>
        <argsstring>(const int iface, struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_backend_txn</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <briefdescription>
<para>Use interface as backend to send and receive ADU. </para>
        </briefdescription>
        <detaileddescription>
<para>This function overwrites ADU passed by the pointer and generates exception responses if backend interface is misconfigured or target device is unreachable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus client interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If transfer was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="522" column="5" declfile="include/modbus/modbus.h" declline="522" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>PHYTEC<sp/>Messtechnik<sp/>GmbH</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Client<sp/>API<sp/>in<sp/>this<sp/>file<sp/>is<sp/>based<sp/>on<sp/>mbm_core.c<sp/>from<sp/>uC/Modbus<sp/>Stack.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uC/Modbus</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>Embedded<sp/>Modbus<sp/>Stack</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2003-2020<sp/>Silicon<sp/>Laboratories<sp/>Inc.<sp/>www.silabs.com</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>APACHE-2.0</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>software<sp/>is<sp/>subject<sp/>to<sp/>an<sp/>open<sp/>source<sp/>license<sp/>and<sp/>is<sp/>distributed<sp/>by</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>Silicon<sp/>Laboratories<sp/>Inc.<sp/>pursuant<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Apache<sp/>License,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Version<sp/>2.0<sp/>available<sp/>at<sp/>www.apache.org/licenses/LICENSE-2.0.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_MODBUS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_MODBUS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="uart_8h" kindref="compound">drivers/uart.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__modbus_1ga1015513d4d3b6621fc18dcfda79116a2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODBUS_MBAP_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__modbus_1gae8a6fcfc117e7c4b2ac32aef90155698" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODBUS_MBAP_AND_FC_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MODBUS_MBAP_LENGTH<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structmodbus__adu" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref><sp/>{</highlight></codeline>
<codeline lineno="49" refid="structmodbus__adu_1a04f0aa95985cc491649ba47f8ba064c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structmodbus__adu_1a04f0aa95985cc491649ba47f8ba064c8" kindref="member">trans_id</ref>;</highlight></codeline>
<codeline lineno="51" refid="structmodbus__adu_1ae0422aacfe323ce6ca83069a54315fa0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structmodbus__adu_1ae0422aacfe323ce6ca83069a54315fa0" kindref="member">proto_id</ref>;</highlight></codeline>
<codeline lineno="53" refid="structmodbus__adu_1aa33f175677a0100c1f8a84a72c5ca247" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structmodbus__adu_1aa33f175677a0100c1f8a84a72c5ca247" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="55" refid="structmodbus__adu_1ab1fc3e76f3f406c8a0715055088d290d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structmodbus__adu_1ab1fc3e76f3f406c8a0715055088d290d" kindref="member">unit_id</ref>;</highlight></codeline>
<codeline lineno="57" refid="structmodbus__adu_1a015e7b842349dc5567cc51cbf1f87420" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structmodbus__adu_1a015e7b842349dc5567cc51cbf1f87420" kindref="member">fc</ref>;</highlight></codeline>
<codeline lineno="59" refid="structmodbus__adu_1a7e94e4a0557717445ab2d791f8a97b7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structmodbus__adu_1a7e94e4a0557717445ab2d791f8a97b7b" kindref="member">data</ref>[CONFIG_MODBUS_BUFFER_SIZE<sp/>-<sp/>4];</highlight></codeline>
<codeline lineno="61" refid="structmodbus__adu_1a78b8008e05c8d588d0ecba71e432d14e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structmodbus__adu_1a78b8008e05c8d588d0ecba71e432d14e" kindref="member">crc</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__modbus_1ga05b118dc87ebe3739cac4e9572104ffb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga05b118dc87ebe3739cac4e9572104ffb" kindref="member">modbus_read_coils</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>coil_tbl,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_coils);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="group__modbus_1ga921fd6036ff1b8a416dc02e30bb6e653" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga921fd6036ff1b8a416dc02e30bb6e653" kindref="member">modbus_read_dinputs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>di_tbl,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_di);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="group__modbus_1ga7d7221b32fbf2395e69e25ef2dbaa036" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga7d7221b32fbf2395e69e25ef2dbaa036" kindref="member">modbus_read_holding_regs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg_buf,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_regs);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="group__modbus_1ga5ff31ca21cf2d1b081d172228d6c2154" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga5ff31ca21cf2d1b081d172228d6c2154" kindref="member">modbus_read_input_regs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg_buf,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_regs);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="group__modbus_1gaccac4f72b5d66a5a2e6c444dda251c41" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gaccac4f72b5d66a5a2e6c444dda251c41" kindref="member">modbus_write_coil</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>coil_addr,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>coil_state);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="group__modbus_1gaf06d2553af8b8e9ab58f54b8b7e2055b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gaf06d2553af8b8e9ab58f54b8b7e2055b" kindref="member">modbus_write_holding_reg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>reg_val);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="group__modbus_1gac924251f66ca6f357d8b7d90075df210" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gac924251f66ca6f357d8b7d90075df210" kindref="member">modbus_request_diagnostic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>sfunc,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>data_out);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="group__modbus_1gac0fa22cd0d1fa861fdbc04b65ea60d7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gac0fa22cd0d1fa861fdbc04b65ea60d7e" kindref="member">modbus_write_coils</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>coil_tbl,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_coils);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="group__modbus_1gadc8273292e0efc8c0d65c00eea7a22c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gadc8273292e0efc8c0d65c00eea7a22c5" kindref="member">modbus_write_holding_regs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg_buf,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_regs);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="group__modbus_1ga9a8ae6fb4b1aee398f5b19f074d07ea9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga9a8ae6fb4b1aee398f5b19f074d07ea9" kindref="member">modbus_read_holding_regs_fp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg_buf,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_regs);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="group__modbus_1ga762da245db3ca4f60fb3aa6c5783c73d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga762da245db3ca4f60fb3aa6c5783c73d" kindref="member">modbus_write_holding_regs_fp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>unit_id,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>start_addr,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg_buf,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>num_regs);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="structmodbus__user__callbacks" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__user__callbacks" kindref="compound">modbus_user_callbacks</ref><sp/>{</highlight></codeline>
<codeline lineno="336" refid="structmodbus__user__callbacks_1a3353b3aa0ec073fb9031a5c151e9995b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1a3353b3aa0ec073fb9031a5c151e9995b" kindref="member">coil_rd</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="structmodbus__user__callbacks_1a0dad31490d8b5d454f06a8b7805a09fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1a0dad31490d8b5d454f06a8b7805a09fd" kindref="member">coil_wr</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="structmodbus__user__callbacks_1aa6fd8fc2663c6a982ec17a162ae56961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1aa6fd8fc2663c6a982ec17a162ae56961" kindref="member">discrete_input_rd</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="structmodbus__user__callbacks_1a91a9270bd945935b74c6f5e021429d42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1a91a9270bd945935b74c6f5e021429d42" kindref="member">input_reg_rd</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*<ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="structmodbus__user__callbacks_1ae315e76c3ceefbd65ef8cea500b43df5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1ae315e76c3ceefbd65ef8cea500b43df5" kindref="member">input_reg_rd_fp</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="structmodbus__user__callbacks_1acf5fe90fab9765bd83d1ab2075d073a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1acf5fe90fab9765bd83d1ab2075d073a2" kindref="member">holding_reg_rd</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>*<ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="structmodbus__user__callbacks_1a4ca1ed4bfc93b36d939f847d7ac9f8da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1a4ca1ed4bfc93b36d939f847d7ac9f8da" kindref="member">holding_reg_wr</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="structmodbus__user__callbacks_1a821e0aacd7c90eff5e7c0047cc88a855" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1a821e0aacd7c90eff5e7c0047cc88a855" kindref="member">holding_reg_rd_fp</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="structmodbus__user__callbacks_1a333b5781c35e781e7021f53d5a357482" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structmodbus__user__callbacks_1a333b5781c35e781e7021f53d5a357482" kindref="member">holding_reg_wr_fp</ref>)(<ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="group__modbus_1gaa17880a268d6b3b9553de835c800af27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gaa17880a268d6b3b9553de835c800af27" kindref="member">modbus_iface_get_by_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iface_name);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="group__modbus_1ga96e98f3f98831e9cd45faf21264f8f5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__modbus_1ga96e98f3f98831e9cd45faf21264f8f5e" kindref="member">modbus_raw_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref><sp/>*adu);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="group__modbus_1ga4bd8913e1c77a1e4b19585caa9f77c2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga4bd8913e1c77a1e4b19585caa9f77c2e" kindref="member">modbus_mode</ref><sp/>{</highlight></codeline>
<codeline lineno="390" refid="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea52033dc2ef37fc286a590b1f97d946ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea52033dc2ef37fc286a590b1f97d946ef" kindref="member">MODBUS_MODE_RTU</ref>,</highlight></codeline>
<codeline lineno="392" refid="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2eafdf029741cc1bdecb2cb9baf4f06732a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2eafdf029741cc1bdecb2cb9baf4f06732a" kindref="member">MODBUS_MODE_ASCII</ref>,</highlight></codeline>
<codeline lineno="394" refid="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea4d05b2cfd56ccf15eb1d8c7bb71071ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea4d05b2cfd56ccf15eb1d8c7bb71071ec" kindref="member">MODBUS_MODE_RAW</ref>,</highlight></codeline>
<codeline lineno="395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="structmodbus__serial__param" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__serial__param" kindref="compound">modbus_serial_param</ref><sp/>{</highlight></codeline>
<codeline lineno="402" refid="structmodbus__serial__param_1af3989f5e20eb96080d456114ef4d86e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structmodbus__serial__param_1af3989f5e20eb96080d456114ef4d86e5" kindref="member">baud</ref>;</highlight></codeline>
<codeline lineno="408" refid="structmodbus__serial__param_1a337a18f3ad923bf758cb432b9a2d8ada" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__uart__interface_1gab2ab6aacb6e3c43bb26d4274157e5711" kindref="member">uart_config_parity</ref><sp/><ref refid="structmodbus__serial__param_1a337a18f3ad923bf758cb432b9a2d8ada" kindref="member">parity</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="structmodbus__server__param" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__server__param" kindref="compound">modbus_server_param</ref><sp/>{</highlight></codeline>
<codeline lineno="416" refid="structmodbus__server__param_1ad8f72ea4e7dbbd81e23415e25b7d94be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__user__callbacks" kindref="compound">modbus_user_callbacks</ref><sp/>*<ref refid="structmodbus__server__param_1ad8f72ea4e7dbbd81e23415e25b7d94be" kindref="member">user_cb</ref>;</highlight></codeline>
<codeline lineno="418" refid="structmodbus__server__param_1a323a3a9be08f3c77df9f06b135f7f379" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structmodbus__server__param_1a323a3a9be08f3c77df9f06b135f7f379" kindref="member">unit_id</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="structmodbus__iface__param" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__iface__param" kindref="compound">modbus_iface_param</ref><sp/>{</highlight></codeline>
<codeline lineno="427" refid="structmodbus__iface__param_1ae73f218d8810afb0c2efbf865ba8b3ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga4bd8913e1c77a1e4b19585caa9f77c2e" kindref="member">modbus_mode</ref><sp/><ref refid="structmodbus__iface__param_1ae73f218d8810afb0c2efbf865ba8b3ba" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="429" refid="structmodbus__iface__param_1a77d88f81d11b0f9338ca227930abf53d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__server__param" kindref="compound">modbus_server_param</ref><sp/><ref refid="structmodbus__iface__param_1a77d88f81d11b0f9338ca227930abf53d" kindref="member">server</ref>;</highlight></codeline>
<codeline lineno="433" refid="structmodbus__iface__param_1a7726b39e43e660adb63e24b4cf2e7ab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structmodbus__iface__param_1a7726b39e43e660adb63e24b4cf2e7ab7" kindref="member">rx_timeout</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="437" refid="structmodbus__iface__param_1a77ff747b2e789e96691483994be1d596" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodbus__serial__param" kindref="compound">modbus_serial_param</ref><sp/><ref refid="structmodbus__iface__param_1a77ff747b2e789e96691483994be1d596" kindref="member">serial</ref>;</highlight></codeline>
<codeline lineno="439" refid="structmodbus__iface__param_1aa40d3e4b974803a4ac391364e801d66b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modbus_1ga96e98f3f98831e9cd45faf21264f8f5e" kindref="member">modbus_raw_cb_t</ref><sp/><ref refid="structmodbus__iface__param_1aa40d3e4b974803a4ac391364e801d66b" kindref="member">raw_tx_cb</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="441"><highlight class="normal">};</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="group__modbus_1gae4d34276c467bf54e0849a1098e56f8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gae4d34276c467bf54e0849a1098e56f8b" kindref="member">modbus_init_server</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodbus__iface__param" kindref="compound">modbus_iface_param</ref><sp/>param);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="group__modbus_1ga943eff819ecf1bc268714783047888ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga943eff819ecf1bc268714783047888ef" kindref="member">modbus_init_client</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodbus__iface__param" kindref="compound">modbus_iface_param</ref><sp/>param);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="group__modbus_1ga32a6319cc51eb5a98dcb58b3231b9d34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga32a6319cc51eb5a98dcb58b3231b9d34" kindref="member">modbus_disable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>iface);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="group__modbus_1ga6d40e9eda6b8ead6d071d4192ffe489b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga6d40e9eda6b8ead6d071d4192ffe489b" kindref="member">modbus_raw_submit_rx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref><sp/>*adu);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="group__modbus_1ga8fdae6a92e27a845296c9d8ce4b8078e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga8fdae6a92e27a845296c9d8ce4b8078e" kindref="member">modbus_raw_put_header</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref><sp/>*adu,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*header);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="group__modbus_1ga333072d3536d7b6f0680ceecc2c5bddf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga333072d3536d7b6f0680ceecc2c5bddf" kindref="member">modbus_raw_get_header</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref><sp/>*adu,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*header);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="group__modbus_1gad250c40ba13a7d8c9189de17d1fd31aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1gad250c40ba13a7d8c9189de17d1fd31aa" kindref="member">modbus_raw_set_server_failure</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref><sp/>*adu);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="group__modbus_1ga7aa5dfd6e457980e9e9b8a77810ec31e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__modbus_1ga7aa5dfd6e457980e9e9b8a77810ec31e" kindref="member">modbus_raw_backend_txn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iface,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref><sp/>*adu);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_MODBUS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/modbus/modbus.h"/>
  </compounddef>
</doxygen>
