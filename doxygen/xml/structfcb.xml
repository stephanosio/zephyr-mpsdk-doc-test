<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structfcb" kind="struct" language="C++" prot="public">
    <compoundname>fcb</compoundname>
    <includes refid="fcb_8h" local="no">fcb.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfcb_1a4206faa9ed633ba2315163c52e557397" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t fcb::f_magic</definition>
        <argsstring></argsstring>
        <name>f_magic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Magic value, should not be 0xFFFFFFFF. It is xored with inversion of f_erase_value and placed in the beginning of FCB flash sector. FCB uses this when determining whether sector contains valid data or not. Giving it value of 0xFFFFFFFF means leaving bytes of the filed in &quot;erased&quot; state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="88" column="10" bodyfile="include/fs/fcb.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1a030b96abd6c857295f154197278cca69" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t fcb::f_version</definition>
        <argsstring></argsstring>
        <name>f_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current version number of the data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="97" column="9" bodyfile="include/fs/fcb.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1aa642058028d755c7bc5b6814a4cb8c16" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t fcb::f_sector_cnt</definition>
        <argsstring></argsstring>
        <name>f_sector_cnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of elements in sector array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="98" column="9" bodyfile="include/fs/fcb.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1aab748de6989e30de6571fc94d66ee365" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t fcb::f_scratch_cnt</definition>
        <argsstring></argsstring>
        <name>f_scratch_cnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of sectors to keep empty. This can be used if you need to have scratch space for garbage collecting when FCB fills up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="99" column="9" bodyfile="include/fs/fcb.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1afc96f045d541c8d141d3427884f1fb44" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structflash__sector" kindref="compound">flash_sector</ref> *</type>
        <definition>struct flash_sector* fcb::f_sectors</definition>
        <argsstring></argsstring>
        <name>f_sectors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of sectors, must be contiguous </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="104" column="19" bodyfile="include/fs/fcb.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1a1f30c78d7e02748fbf0bf5033d4bdadf" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__mutex" kindref="compound">k_mutex</ref></type>
        <definition>struct k_mutex fcb::f_mtx</definition>
        <argsstring></argsstring>
        <name>f_mtx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locking for accessing the FCB data, internal state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="108" column="14" bodyfile="include/fs/fcb.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1ac6dc6236f8b03e4b03f691c55b4d3327" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structflash__sector" kindref="compound">flash_sector</ref> *</type>
        <definition>struct flash_sector* fcb::f_oldest</definition>
        <argsstring></argsstring>
        <name>f_oldest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to flash sector containing the oldest data, internal state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="111" column="19" bodyfile="include/fs/fcb.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1a1f7922dc1e8076bcfffca117260d5e02" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref></type>
        <definition>struct fcb_entry fcb::f_active</definition>
        <argsstring></argsstring>
        <name>f_active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>internal state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="116" column="16" bodyfile="include/fs/fcb.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1a8da1d0b4bef7d9ddcd5922d9bbef0cef" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t fcb::f_active_id</definition>
        <argsstring></argsstring>
        <name>f_active_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flash location where the newest data is, internal state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="117" column="10" bodyfile="include/fs/fcb.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1aa745e88d4477408b40a759dd1baea637" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t fcb::f_align</definition>
        <argsstring></argsstring>
        <name>f_align</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>writes to flash have to aligned to this, internal state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="120" column="9" bodyfile="include/fs/fcb.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1a16cfc82afc8abe70291f4b462e617f2f" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structflash__area" kindref="compound">flash_area</ref> *</type>
        <definition>const struct flash_area* fcb::fap</definition>
        <argsstring></argsstring>
        <name>fap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flash area used by the fcb instance, , internal state. This can be transfer to FCB user </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="123" column="23" bodyfile="include/fs/fcb.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfcb_1a614c6441395637c6c0a17a4fd6107db3" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t fcb::f_erase_value</definition>
        <argsstring></argsstring>
        <name>f_erase_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The value flash takes when it is erased. This is read from flash parameters and initialized upon call to fcb_init. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="128" column="9" bodyfile="include/fs/fcb.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>FCB instance structure. </para>
    </briefdescription>
    <detaileddescription>
<para>The following data structure describes the FCB itself. First part should be filled in by the user before calling <ref refid="group__fcb__api_1ga318d35b6f023bb4079aaf76c01a59b96" kindref="member">fcb_init</ref>. The second part is used by FCB for its internal bookkeeping. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="8">
        <label>__thread_entry</label>
      </node>
      <node id="7">
        <label>_callee_saved</label>
      </node>
      <node id="10">
        <label>_mem_domain_info</label>
      </node>
      <node id="15">
        <label>_thread_arch</label>
      </node>
      <node id="6">
        <label>_thread_base</label>
      </node>
      <node id="9">
        <label>_thread_stack_info</label>
      </node>
      <node id="4">
        <label>_wait_q_t</label>
      </node>
      <node id="1">
        <label>fcb</label>
        <link refid="structfcb"/>
        <childnode refid="2" relation="usage">
          <edgelabel>f_oldest</edgelabel>
          <edgelabel>f_sectors</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>f_mtx</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>f_active</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>fap</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>fcb_entry</label>
        <link refid="structfcb__entry"/>
        <childnode refid="2" relation="usage">
          <edgelabel>fe_sector</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>flash_area</label>
        <link refid="structflash__area"/>
      </node>
      <node id="2">
        <label>flash_sector</label>
        <link refid="structflash__sector"/>
      </node>
      <node id="12">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="13" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>k_mutex</label>
        <link refid="structk__mutex"/>
        <childnode refid="4" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="5">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="6" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="11">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/fs/fcb.h" line="86" column="1" bodyfile="include/fs/fcb.h" bodystart="86" bodyend="132"/>
    <listofallmembers>
      <member refid="structfcb_1a1f7922dc1e8076bcfffca117260d5e02" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_active</name></member>
      <member refid="structfcb_1a8da1d0b4bef7d9ddcd5922d9bbef0cef" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_active_id</name></member>
      <member refid="structfcb_1aa745e88d4477408b40a759dd1baea637" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_align</name></member>
      <member refid="structfcb_1a614c6441395637c6c0a17a4fd6107db3" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_erase_value</name></member>
      <member refid="structfcb_1a4206faa9ed633ba2315163c52e557397" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_magic</name></member>
      <member refid="structfcb_1a1f30c78d7e02748fbf0bf5033d4bdadf" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_mtx</name></member>
      <member refid="structfcb_1ac6dc6236f8b03e4b03f691c55b4d3327" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_oldest</name></member>
      <member refid="structfcb_1aab748de6989e30de6571fc94d66ee365" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_scratch_cnt</name></member>
      <member refid="structfcb_1aa642058028d755c7bc5b6814a4cb8c16" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_sector_cnt</name></member>
      <member refid="structfcb_1afc96f045d541c8d141d3427884f1fb44" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_sectors</name></member>
      <member refid="structfcb_1a030b96abd6c857295f154197278cca69" prot="public" virt="non-virtual"><scope>fcb</scope><name>f_version</name></member>
      <member refid="structfcb_1a16cfc82afc8abe70291f4b462e617f2f" prot="public" virt="non-virtual"><scope>fcb</scope><name>fap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
