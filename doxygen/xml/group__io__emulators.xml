<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__io__emulators" kind="group">
    <compoundname>io_emulators</compoundname>
    <title>Emulator interface</title>
    <innerclass refid="structemul__link__for__bus" prot="public">emul_link_for_bus</innerclass>
    <innerclass refid="structemul__list__for__bus" prot="public">emul_list_for_bus</innerclass>
    <innerclass refid="structemul" prot="public">emul</innerclass>
    <innergroup refid="group__i2c__emul__interface">I2C Emulation Interface</innergroup>
    <innergroup refid="group__spi__emul__interface">SPI Emulation Interface</innergroup>
    <innergroup refid="group__espi__emul__interface">eSPI Emulation Interface</innergroup>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__io__emulators_1gaa6129de6e0edef345242559a3dac3a50" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* emul_init_t) (const struct emul *emul, const struct device *parent)</definition>
        <argsstring>)(const struct emul *emul, const struct device *parent)</argsstring>
        <name>emul_init_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard callback for emulator initialisation providing the initialiser record and the device that calls the emulator functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator to init </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent device that is using the emulator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/emul.h" line="48" column="9" bodyfile="include/drivers/emul.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__io__emulators_1ga3372b14c15e9338dd27221b1c51fd32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emul_init_for_bus_from_list</definition>
        <argsstring>(const struct device *dev, const struct emul_list_for_bus *list)</argsstring>
        <name>emul_init_for_bus_from_list</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structemul__list__for__bus" kindref="compound">emul_list_for_bus</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a list of emulators</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device the emulators are attached to (e.g. an I2C controller) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List of devices to set up </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if OK </para>
</simplesect>
<simplesect kind="return"><para>negative value on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/emul.h" line="102" column="5" declfile="include/drivers/emul.h" declline="102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__io__emulators_1gaad94c1e07998417cb9aa06d03be3b280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structemul" kindref="compound">emul</ref> *</type>
        <definition>const struct emul * emul_get_binding</definition>
        <argsstring>(const char *name)</argsstring>
        <name>emul_get_binding</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieve the emul structure for an emulator by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Emulator objects are created via the <ref refid="group__io__emulators_1gac44d48c2f60acc4285527f61d444af3b" kindref="member">EMUL_DEFINE()</ref> macro and placed in memory by the linker. If the emulator structure is needed for custom API calls, it can be retrieved by the name that the emulator exposes to the system (this is the devicetree node&apos;s label by default).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator name to search for. A null pointer, or a pointer to an empty string, will cause NULL to be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to emulator structure; NULL if not found or cannot be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/emul.h" line="117" column="17" declfile="include/drivers/emul.h" declline="117" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__io__emulators_1gaba0a0f8701d69594f105e02a9ca6451a" prot="public" static="no">
        <name>EMUL_REG_NAME</name>
        <param><defname>node_id</defname></param>
        <initializer>(_CONCAT(__emulreg_, node_id))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/emul.h" line="71" column="9" bodyfile="include/drivers/emul.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__io__emulators_1gac44d48c2f60acc4285527f61d444af3b" prot="public" static="no">
        <name>EMUL_DEFINE</name>
        <param><defname>init_ptr</defname></param>
        <param><defname>node_id</defname></param>
        <param><defname>cfg_ptr</defname></param>
        <param><defname>data_ptr</defname></param>
        <initializer>	static struct <ref refid="structemul" kindref="compound">emul</ref> <ref refid="group__io__emulators_1gaba0a0f8701d69594f105e02a9ca6451a" kindref="member">EMUL_REG_NAME</ref>(node_id) __attribute__((__section__(&quot;.emulators&quot;)))       \
	__used = {                                                                                 \
		.init = (init_ptr),                                                                \
		.dev_label = <ref refid="group__devicetree-generic-prop_1ga89070ef089930290ce31788b5b3b84e5" kindref="member">DT_LABEL</ref>(node_id),                                                    \
		.cfg = (cfg_ptr),                                                                  \
		.<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref> = (data_ptr),                                                                \
	};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a new emulator</para>
<para>This adds a new struct emul to the linker list of emulations. This is typically used in your emulator&apos;s <ref refid="group__devicetree-inst_1gaeac7ed0f4a6820a6e5d7dadb6d62d6e7" kindref="member">DT_INST_FOREACH_STATUS_OKAY()</ref> clause.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call to initialise the emulator (see emul_init typedef) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Node ID of the driver to emulate (e.g. <ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST(n)</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>emulator-specific configuration data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>emulator-specific data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/emul.h" line="85" column="9" bodyfile="include/drivers/emul.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Emulators used to test drivers and higher-level code that uses them. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
