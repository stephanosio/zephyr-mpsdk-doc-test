<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__bt__rfcomm" kind="group">
    <compoundname>bt_rfcomm</compoundname>
    <title>RFCOMM</title>
    <innerclass refid="structbt__rfcomm__dlc__ops" prot="public">bt_rfcomm_dlc_ops</innerclass>
    <innerclass refid="structbt__rfcomm__dlc" prot="public">bt_rfcomm_dlc</innerclass>
    <innerclass refid="structbt__rfcomm__server" prot="public">bt_rfcomm_server</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__bt__rfcomm_1ga950bf8e3371138ceb9649d45e9a96340" prot="public" static="no" strong="no">
        <type></type>
        <name>@87</name>
        <enumvalue id="group__bt__rfcomm_1gga950bf8e3371138ceb9649d45e9a96340aa62985d89ab11a130eed284d98b7b1e4" prot="public">
          <name>BT_RFCOMM_CHAN_HFP_HF</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__rfcomm_1gga950bf8e3371138ceb9649d45e9a96340ac7f345a01b4d9aca4c2a879dce05e0dd" prot="public">
          <name>BT_RFCOMM_CHAN_HFP_AG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__rfcomm_1gga950bf8e3371138ceb9649d45e9a96340adc095ec30d3edf16ef95ece5b3c1104b" prot="public">
          <name>BT_RFCOMM_CHAN_HSP_AG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__rfcomm_1gga950bf8e3371138ceb9649d45e9a96340aaf92af85143e2a0430d5a99c9a0d3c25" prot="public">
          <name>BT_RFCOMM_CHAN_HSP_HS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__rfcomm_1gga950bf8e3371138ceb9649d45e9a96340a05cfd05b25c785acb72916b723141495" prot="public">
          <name>BT_RFCOMM_CHAN_SPP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="28" column="1" bodyfile="include/bluetooth/rfcomm.h" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="group__bt__rfcomm_1gaa70d7971435dc7e6421372d7385811b2" prot="public" static="no" strong="no">
        <type></type>
        <name>bt_rfcomm_role</name>
        <enumvalue id="group__bt__rfcomm_1ggaa70d7971435dc7e6421372d7385811b2aa0b65eed9632ff8ad3235b4c0eae166d" prot="public">
          <name>BT_RFCOMM_ROLE_ACCEPTOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__rfcomm_1ggaa70d7971435dc7e6421372d7385811b2a20601c2b890ee84b83dfc9ed55e07cf8" prot="public">
          <name>BT_RFCOMM_ROLE_INITIATOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Role of RFCOMM session and dlc. Used only by internal APIs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="69" column="1" bodyfile="include/bluetooth/rfcomm.h" bodystart="69" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__bt__rfcomm_1ga11f290d34ad631afaa10caf2cefd72b9" prot="public" static="no">
        <type>enum <ref refid="group__bt__rfcomm_1gaa70d7971435dc7e6421372d7385811b2" kindref="member">bt_rfcomm_role</ref></type>
        <definition>typedef enum bt_rfcomm_role bt_rfcomm_role_t</definition>
        <argsstring></argsstring>
        <name>bt_rfcomm_role_t</name>
        <briefdescription>
<para>Role of RFCOMM session and dlc. Used only by internal APIs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="72" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__rfcomm_1gafd0ffcff41e233f74dc2726e889f5401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_rfcomm_server_register</definition>
        <argsstring>(struct bt_rfcomm_server *server)</argsstring>
        <name>bt_rfcomm_server_register</name>
        <param>
          <type>struct <ref refid="structbt__rfcomm__server" kindref="compound">bt_rfcomm_server</ref> *</type>
          <declname>server</declname>
        </param>
        <briefdescription>
<para>Register RFCOMM server. </para>
        </briefdescription>
        <detaileddescription>
<para>Register RFCOMM server for a channel, each new connection is authorized using the <ref refid="posix_2sys_2socket_8h_1a33e6ea428ff537ed7a4763ce91b7d9bb" kindref="member">accept()</ref> callback which in case of success shall allocate the dlc structure to be used by the new connection.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>Server structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="131" column="5" declfile="include/bluetooth/rfcomm.h" declline="131" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__rfcomm_1ga2fb8e3ce2a39d0a3c5bea9b3c24a7ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_rfcomm_dlc_connect</definition>
        <argsstring>(struct bt_conn *conn, struct bt_rfcomm_dlc *dlc, uint8_t channel)</argsstring>
        <name>bt_rfcomm_dlc_connect</name>
        <param>
          <type>struct bt_conn *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structbt__rfcomm__dlc" kindref="compound">bt_rfcomm_dlc</ref> *</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Connect RFCOMM channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Connect RFCOMM dlc by channel, once the connection is completed dlc connected() callback will be called. If the connection is rejected disconnected() callback is called instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dlc object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Server channel to connect to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="145" column="5" declfile="include/bluetooth/rfcomm.h" declline="145" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__rfcomm_1ga593841aef52027598977b7b2bbd0237d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_rfcomm_dlc_send</definition>
        <argsstring>(struct bt_rfcomm_dlc *dlc, struct net_buf *buf)</argsstring>
        <name>bt_rfcomm_dlc_send</name>
        <param>
          <type>struct <ref refid="structbt__rfcomm__dlc" kindref="compound">bt_rfcomm_dlc</ref> *</type>
          <declname>dlc</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Send data to RFCOMM. </para>
        </briefdescription>
        <detaileddescription>
<para>Send data from buffer to the dlc. Length should be less than or equal to mtu.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dlc object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Data buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bytes sent in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="158" column="5" declfile="include/bluetooth/rfcomm.h" declline="158" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__rfcomm_1ga998328b021ec53f7e291ab76856ffa18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_rfcomm_dlc_disconnect</definition>
        <argsstring>(struct bt_rfcomm_dlc *dlc)</argsstring>
        <name>bt_rfcomm_dlc_disconnect</name>
        <param>
          <type>struct <ref refid="structbt__rfcomm__dlc" kindref="compound">bt_rfcomm_dlc</ref> *</type>
          <declname>dlc</declname>
        </param>
        <briefdescription>
<para>Disconnect RFCOMM dlc. </para>
        </briefdescription>
        <detaileddescription>
<para>Disconnect RFCOMM dlc, if the connection is pending it will be canceled and as a result the dlc disconnected() callback is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dlc</parametername>
</parameternamelist>
<parameterdescription>
<para>Dlc object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="169" column="5" declfile="include/bluetooth/rfcomm.h" declline="169" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__rfcomm_1gaed05e67dc975d94e1209372d5817077a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * bt_rfcomm_create_pdu</definition>
        <argsstring>(struct net_buf_pool *pool)</argsstring>
        <name>bt_rfcomm_create_pdu</name>
        <param>
          <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Allocate the buffer from pool after reserving head room for RFCOMM, L2CAP and ACL headers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pool to take the buffer from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/rfcomm.h" line="178" column="14" declfile="include/bluetooth/rfcomm.h" declline="178" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>RFCOMM. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
