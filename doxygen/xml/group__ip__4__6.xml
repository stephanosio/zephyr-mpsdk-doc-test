<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ip__4__6" kind="group">
    <compoundname>ip_4_6</compoundname>
    <title>IPv4/IPv6 primitives and helpers</title>
    <innerclass refid="structin6__addr" prot="public">in6_addr</innerclass>
    <innerclass refid="structin__addr" prot="public">in_addr</innerclass>
    <innerclass refid="structsockaddr__in6" prot="public">sockaddr_in6</innerclass>
    <innerclass refid="structsockaddr__in6__ptr" prot="public">sockaddr_in6_ptr</innerclass>
    <innerclass refid="structsockaddr__in" prot="public">sockaddr_in</innerclass>
    <innerclass refid="structsockaddr__in__ptr" prot="public">sockaddr_in_ptr</innerclass>
    <innerclass refid="structsockaddr__ll" prot="public">sockaddr_ll</innerclass>
    <innerclass refid="structsockaddr__ll__ptr" prot="public">sockaddr_ll_ptr</innerclass>
    <innerclass refid="structsockaddr__can__ptr" prot="public">sockaddr_can_ptr</innerclass>
    <innerclass refid="structiovec" prot="public">iovec</innerclass>
    <innerclass refid="structmsghdr" prot="public">msghdr</innerclass>
    <innerclass refid="structcmsghdr" prot="public">cmsghdr</innerclass>
    <innerclass refid="structsockaddr" prot="public">sockaddr</innerclass>
    <innerclass refid="structnet__tuple" prot="public">net_tuple</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" prot="public" static="no" strong="no">
        <type></type>
        <name>net_ip_protocol</name>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a334b0a4a5a3e331e7c7864471e9eab08" prot="public">
          <name>IPPROTO_IP</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IP protocol (pseudo-val for <ref refid="posix_2sys_2socket_8h_1a9e476c4da1bb69b721e4aaa384114328" kindref="member">setsockopt()</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a7ccd735b73f6955ae2f4abf3e7ca6bb4" prot="public">
          <name>IPPROTO_ICMP</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ICMP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4cbcb48be0cd8eb6fb5b5741f1c7b639" prot="public">
          <name>IPPROTO_IGMP</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IGMP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a49a42f6d628bf65e78478e8eb4874ff2" prot="public">
          <name>IPPROTO_IPIP</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPIP tunnels <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4a3c433d15859f62bacc06312791a45e" prot="public">
          <name>IPPROTO_TCP</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TCP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31abd7dfb22e255a4eed332f41de12d7321" prot="public">
          <name>IPPROTO_UDP</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>UDP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a892549243e60ed1e04e88a14b44d8185" prot="public">
          <name>IPPROTO_IPV6</name>
          <initializer>= 41</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv6 protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31aeeff57e3cf726718a92b2138e5842926" prot="public">
          <name>IPPROTO_ICMPV6</name>
          <initializer>= 58</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ICMPv6 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a3f186705d5c21da1b72ecb91cca1f7a4" prot="public">
          <name>IPPROTO_RAW</name>
          <initializer>= 255</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RAW IP packets <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol numbers from IANA/BSD </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="62" column="1" bodyfile="include/net/net_ip.h" bodystart="62" bodyend="72"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1ga721da18d2a3cfd9b3a56e9efc9f6e58b" prot="public" static="no" strong="no">
        <type></type>
        <name>net_ip_protocol_secure</name>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba6d479e64d940cea948c874d36c656fcc" prot="public">
          <name>IPPROTO_TLS_1_0</name>
          <initializer>= 256</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TLS 1.0 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba102692f9f57dd0ec6f8c6cb54a235d4c" prot="public">
          <name>IPPROTO_TLS_1_1</name>
          <initializer>= 257</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TLS 1.1 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58baa5e176fa47ca23a6f25101a5203f8e5a" prot="public">
          <name>IPPROTO_TLS_1_2</name>
          <initializer>= 258</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TLS 1.2 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba92e94005d7a80aacbffad2f3f10555ef" prot="public">
          <name>IPPROTO_DTLS_1_0</name>
          <initializer>= 272</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DTLS 1.0 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58bad4d2a6ca8756ee52221f19fb06c34a1c" prot="public">
          <name>IPPROTO_DTLS_1_2</name>
          <initializer>= 273</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DTLS 1.2 protocol </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol numbers for TLS protocols </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="75" column="1" bodyfile="include/net/net_ip.h" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1gaaab4268707dbe08348b98fb028e7aa5c" prot="public" static="no" strong="no">
        <type></type>
        <name>net_sock_type</name>
        <enumvalue id="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cae3b7fb9487113a31d403b23aaeaad424" prot="public">
          <name>SOCK_STREAM</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stream socket type <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5ca006b373a518eeeb717573f91e70d7fcc" prot="public">
          <name>SOCK_DGRAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Datagram socket type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cad78d54561daf9c4a7cda0ce115e3f231" prot="public">
          <name>SOCK_RAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RAW socket type <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Socket type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="84" column="1" bodyfile="include/net/net_ip.h" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1ga7a207761e4879c140f48f93978cb2f0b" prot="public" static="no" strong="no">
        <type></type>
        <name>net_ip_mtu</name>
        <enumvalue id="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba76d0214e90b8507d3074a5b1ab38267c" prot="public">
          <name>NET_IPV6_MTU</name>
          <initializer>= 1280</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv6 MTU length. We must be able to receive this size IPv6 packet without fragmentation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba500ea814a9a955fbb4a65fdf96e784d1" prot="public">
          <name>NET_IPV4_MTU</name>
          <initializer>= 576</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv4 MTU length. We must be able to receive this size IPv4 packet without fragmentation. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="403" column="1" bodyfile="include/net/net_ip.h" bodystart="403" bodyend="413"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" prot="public" static="no" strong="no">
        <type></type>
        <name>net_priority</name>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdae01a1318d81935d370f030456435202b" prot="public">
          <name>NET_PRIORITY_BK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Background (lowest) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda8bc1e038efe3e2332ccd3840990a64ce" prot="public">
          <name>NET_PRIORITY_BE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Best effort (default) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdac9c5e9073459374d56491c26b692d5b0" prot="public">
          <name>NET_PRIORITY_EE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Excellent effort <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda38103e3ab83f8fd693a5a1c18de98354" prot="public">
          <name>NET_PRIORITY_CA</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Critical applications (highest) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda7878127d03fb7d0a34b8d68b9461e792" prot="public">
          <name>NET_PRIORITY_VI</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Video, &lt; 100 ms latency and jitter </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda6919b414160f3ed8ac7c391761c77e8a" prot="public">
          <name>NET_PRIORITY_VO</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Voice, &lt; 10 ms latency and jitter <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda23090c0b06a54b8a41be3f44497b0c05" prot="public">
          <name>NET_PRIORITY_IC</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internetwork control <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda05855ea3da85f60bec646a4491b554ef" prot="public">
          <name>NET_PRIORITY_NC</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Network control <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network packet priority settings described in IEEE 802.1Q Annex I.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="416" column="1" bodyfile="include/net/net_ip.h" bodystart="416" bodyend="425"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" prot="public" static="no" strong="no">
        <type></type>
        <name>net_addr_state</name>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da1de25b6f7d4c58957bce10d5f32fb5df" prot="public">
          <name>NET_ADDR_ANY_STATE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default (invalid) address type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da6581c6c65c8f4e857fe9275e9ad1f8a9" prot="public">
          <name>NET_ADDR_TENTATIVE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tentative address <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da8f25e58072ffdfac2832740893ad881a" prot="public">
          <name>NET_ADDR_PREFERRED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Preferred address <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da85f4224bf8692e4b4a09ebb7b411f9a3" prot="public">
          <name>NET_ADDR_DEPRECATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Deprecated address <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>What is the current state of the network address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="439" column="1" bodyfile="include/net/net_ip.h" bodystart="439" bodyend="444"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" prot="public" static="no" strong="no">
        <type></type>
        <name>net_addr_type</name>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a1c62cc5fe7d788175da915c25fc689e6" prot="public">
          <name>NET_ADDR_ANY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default value. This is not a valid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41ae0dbfc40ad42a55a176578a55d0c4006" prot="public">
          <name>NET_ADDR_AUTOCONF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Auto configured address </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a7f6748a05d02325bd41b23cd05e6d1db" prot="public">
          <name>NET_ADDR_DHCP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Address is from DHCP </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41adc6d5d3b52bddf03930e125b0f21ae9e" prot="public">
          <name>NET_ADDR_MANUAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Manually set address </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a4dc979a84d5aaca6ae6f0f4e1c9bbff4" prot="public">
          <name>NET_ADDR_OVERRIDABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Manually set address which is overridable by DHCP </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How the network address is assigned to network interface </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="447" column="1" bodyfile="include/net/net_ip.h" bodystart="447" bodyend="458"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" prot="public" static="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> short int</type>
        <definition>typedef unsigned short int sa_family_t</definition>
        <argsstring></argsstring>
        <name>sa_family_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Socket address family type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="164" column="28" bodyfile="include/net/net_ip.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ip__4__6_1gacf0ed818b0a3c85ff6a9206679d6d91a" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t socklen_t</definition>
        <argsstring></argsstring>
        <name>socklen_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of a socket address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="167" column="16" bodyfile="include/net/net_ip.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ip__4__6_1gaa662667005bdc00bf1eb5cf243aad874" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_loopback</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_loopback</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a loopback address (::1). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is a loopback address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="589" column="20" bodyfile="include/net/net_ip.h" bodystart="589" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga1a2fb0427eeab1a5dec6d69208ad7f02" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is multicast address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="604" column="20" bodyfile="include/net/net_ip.h" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga13b5a26fc672d15697f99e85543184bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv6_addr_lookup</definition>
        <argsstring>(const struct in6_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_addr_lookup</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="612" column="25" declfile="include/net/net_ip.h" declline="612" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga00853528daf79c947dcdc320035ed538" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_my_addr</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_my_addr</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if IPv6 address is found in one of the network interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address was found, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="622" column="20" bodyfile="include/net/net_ip.h" bodystart="622" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gadb4031153c4fef86110879befa6b9975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
        <definition>struct net_if_mcast_addr * net_if_ipv6_maddr_lookup</definition>
        <argsstring>(const struct in6_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_maddr_lookup</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="627" column="31" declfile="include/net/net_ip.h" declline="627" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaf8c5158de9a65d840faa61bb3dec341c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_my_maddr</definition>
        <argsstring>(struct in6_addr *maddr)</argsstring>
        <name>net_ipv6_is_my_maddr</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>maddr</declname>
        </param>
        <briefdescription>
<para>Check if IPv6 multicast address is found in one of the network interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Multicast IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address was found, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="638" column="20" bodyfile="include/net/net_ip.h" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga9654007b0a3c4d033df1ec3d00bd26ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_prefix</definition>
        <argsstring>(const uint8_t *addr1, const uint8_t *addr2, uint8_t length)</argsstring>
        <name>net_ipv6_is_prefix</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Check if two IPv6 addresses are same when compared after prefix mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>First IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix length (max length is 128).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if IPv6 prefixes are the same, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="652" column="20" bodyfile="include/net/net_ip.h" bodystart="652" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga879e4aed725d7ea3fe609fa989f14735" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_loopback</definition>
        <argsstring>(struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_loopback</name>
        <param>
          <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is a loopback address (127.0.0.0/8). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is a loopback address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="689" column="20" bodyfile="include/net/net_ip.h" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gadc623ecacf024733ab6d477d87cc4b9d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_unspecified</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_unspecified</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is unspecified (all bits zero) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is unspecified, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="701" column="20" bodyfile="include/net/net_ip.h" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae8c3302cf9ca457de32eabcf65975b70" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_mcast</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_mcast</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is multicast address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="713" column="20" bodyfile="include/net/net_ip.h" bodystart="713" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gac000a319de7a6f95d4a63719bca3b865" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_ll_addr</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_ll_addr</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv4 address is a link local address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it is, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="725" column="20" bodyfile="include/net/net_ip.h" bodystart="725" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaf731738fb1761208739976d767736f87" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv4_addr_copy_raw</definition>
        <argsstring>(uint8_t *dest, const uint8_t *src)</argsstring>
        <name>net_ipv4_addr_copy_raw</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy an IPv4 address raw buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source IP address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="748" column="20" bodyfile="include/net/net_ip.h" bodystart="748" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga4925e6f3734b8fc1d9cb1ca1a510b5f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_copy_raw</definition>
        <argsstring>(uint8_t *dest, const uint8_t *src)</argsstring>
        <name>net_ipv6_addr_copy_raw</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy an IPv6 address raw buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source IP address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="760" column="20" bodyfile="include/net/net_ip.h" bodystart="760" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga0bdcc8dad8eb42c02426e55378ececf8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_addr_cmp</definition>
        <argsstring>(const struct in_addr *addr1, const struct in_addr *addr2)</argsstring>
        <name>net_ipv4_addr_cmp</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two IPv4 addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="774" column="20" bodyfile="include/net/net_ip.h" bodystart="774" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga32ffb42c62169ac9b34a0faa7c7ffd12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_addr_cmp_raw</definition>
        <argsstring>(const uint8_t *addr1, const uint8_t *addr2)</argsstring>
        <name>net_ipv4_addr_cmp_raw</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two raw IPv4 address buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="788" column="20" bodyfile="include/net/net_ip.h" bodystart="788" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga3456f90a2ea094d16f05a358645a6eb8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_addr_cmp</definition>
        <argsstring>(const struct in6_addr *addr1, const struct in6_addr *addr2)</argsstring>
        <name>net_ipv6_addr_cmp</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two IPv6 addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="803" column="20" bodyfile="include/net/net_ip.h" bodystart="803" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gafbe40461a645cf11fc8b3a07e1d9156e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_addr_cmp_raw</definition>
        <argsstring>(const uint8_t *addr1, const uint8_t *addr2)</argsstring>
        <name>net_ipv6_addr_cmp_raw</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two raw IPv6 address buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="817" column="20" bodyfile="include/net/net_ip.h" bodystart="817" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gacac4279ee8896ddf2a76c612b36edf38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_ll_addr</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_ll_addr</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv6 address is a link local address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it is, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="831" column="20" bodyfile="include/net/net_ip.h" bodystart="831" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae10578b8801d213482de7d7d7e7ba230" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_ula_addr</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_ula_addr</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv6 address is a unique local address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it is, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="843" column="20" bodyfile="include/net/net_ip.h" bodystart="843" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gab0211c91e113cf01a8a16b1a106e7290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
        <definition>const struct in6_addr * net_ipv6_unspecified_address</definition>
        <argsstring>(void)</argsstring>
        <name>net_ipv6_unspecified_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return pointer to any (all bits zeros) IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Any IPv6 address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="853" column="21" declfile="include/net/net_ip.h" declline="853" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaceb9afdd7f2f78d96e6debd72f63ebf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>const struct in_addr * net_ipv4_unspecified_address</definition>
        <argsstring>(void)</argsstring>
        <name>net_ipv4_unspecified_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return pointer to any (all bits zeros) IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Any IPv4 address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="860" column="20" declfile="include/net/net_ip.h" declline="860" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga4df601fd1c89f1908df52b2673f9b113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>const struct in_addr * net_ipv4_broadcast_address</definition>
        <argsstring>(void)</argsstring>
        <name>net_ipv4_broadcast_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return pointer to broadcast (all bits ones) IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Broadcast IPv4 address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="867" column="20" declfile="include/net/net_ip.h" declline="867" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga558b31e556a1a4b8d1e68a78f3f755ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_addr_mask_cmp</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_addr_mask_cmp</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="870" column="13" declfile="include/net/net_ip.h" declline="870" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga715455ec5e8041c5d7075fa6913674cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_addr_mask_cmp</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_ipv4_addr_mask_cmp</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given address belongs to same subnet that has been configured for the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is in same subnet, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="882" column="20" bodyfile="include/net/net_ip.h" bodystart="882" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga8f93179138c1942bc1a099102a4314cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_is_addr_bcast</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_is_addr_bcast</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="888" column="13" declfile="include/net/net_ip.h" declline="888" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gac545e2252f221c73c80cea746dffa083" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_bcast</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_bcast</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv4 address is a broadcast address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. Must be a valid pointer to an interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is a broadcast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="910" column="20" bodyfile="include/net/net_ip.h" bodystart="910" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga04a8f21d173d51bdcc092b92ed949e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv4_addr_lookup</definition>
        <argsstring>(const struct in_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv4_addr_lookup</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="920" column="25" declfile="include/net/net_ip.h" declline="920" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga3db2a1fca0b525a7202277700b987eb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_my_addr</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_my_addr</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is assigned to any network interface in the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if IPv4 address is found in one of the network interfaces, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="932" column="20" bodyfile="include/net/net_ip.h" bodystart="932" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gafe2c8dc0bdb677ba9bc872d051aab2a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_unspecified</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_unspecified</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is unspecified (all bits zero) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is unspecified, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="951" column="20" bodyfile="include/net/net_ip.h" bodystart="951" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga5a334819f4e4bf87aea5caa7ef28c68a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_solicited_node</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_solicited_node</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is solicited node multicast address FF02:0:0:0:0:1:FFXX:XXXX defined in RFC 3513. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is solicited node address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="967" column="20" bodyfile="include/net/net_ip.h" bodystart="967" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_scope</definition>
        <argsstring>(const struct in6_addr *addr, int scope)</argsstring>
        <name>net_ipv6_is_addr_mcast_scope</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a given scope multicast address (FFyx::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>Scope to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is in given scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="986" column="20" bodyfile="include/net/net_ip.h" bodystart="986" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga3f80a84f330a31aaa875fdea64dc18ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_same_mcast_scope</definition>
        <argsstring>(const struct in6_addr *addr_1, const struct in6_addr *addr_2)</argsstring>
        <name>net_ipv6_is_same_mcast_scope</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr_1</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr_2</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 addresses have the same multicast scope (FFyx::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr_1</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_2</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address 2</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if both addresses have same multicast scope, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1001" column="20" bodyfile="include/net/net_ip.h" bodystart="1001" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga55d67d4349dd354a7254a2f8e8320693" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_global</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_global</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a global multicast address (FFxE::/16). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is global multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1015" column="20" bodyfile="include/net/net_ip.h" bodystart="1015" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae27ca6956f943469cad0faa0ba738fc2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_iface</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_iface</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a interface scope multicast address (FFx1::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a interface scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1029" column="20" bodyfile="include/net/net_ip.h" bodystart="1029" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6f83a3a8701ec378b47337acba59d5e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_link</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_link</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a link local scope multicast address (FFx2::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a link local scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1043" column="20" bodyfile="include/net/net_ip.h" bodystart="1043" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga497a148717c1c1095abeb4482566dda0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_mesh</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_mesh</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a mesh-local scope multicast address (FFx3::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a mesh-local scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1057" column="20" bodyfile="include/net/net_ip.h" bodystart="1057" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6704146124a14be9cf2a636947c35a00" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_site</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_site</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a site scope multicast address (FFx5::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a site scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1071" column="20" bodyfile="include/net/net_ip.h" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga141ed5de3043dd7d6b45098aea38a4b1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_org</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_org</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is an organization scope multicast address (FFx8::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is an organization scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1085" column="20" bodyfile="include/net/net_ip.h" bodystart="1085" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga611a4adb332715d983375899dcf101d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_group</definition>
        <argsstring>(const struct in6_addr *addr, const struct in6_addr *group)</argsstring>
        <name>net_ipv6_is_addr_mcast_group</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address belongs to certain multicast group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group id IPv6 address, the values must be in network byte order</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the IPv6 multicast address belongs to given multicast group, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1100" column="20" bodyfile="include/net/net_ip.h" bodystart="1100" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gacf00ae106727f97e2fd35be68418354d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_all_nodes_group</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_all_nodes_group</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address belongs to the all nodes multicast group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the IPv6 multicast address belongs to the all nodes multicast group, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1120" column="1" bodyfile="include/net/net_ip.h" bodystart="1120" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga35bdad7c958f1ea656680000ee3f6bfd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_iface_all_nodes</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_iface_all_nodes</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a interface scope all nodes multicast address (FF01::1). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a interface scope all nodes multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1140" column="1" bodyfile="include/net/net_ip.h" bodystart="1140" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaba3e1259f452381ef3e109bb2eb34c09" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_link_all_nodes</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_link_all_nodes</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a link local scope all nodes multicast address (FF02::1). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a link local scope all nodes multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1156" column="1" bodyfile="include/net/net_ip.h" bodystart="1156" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6091a7406c136fcf480517cb969c9d90" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_solicited_node</definition>
        <argsstring>(const struct in6_addr *src, struct in6_addr *dst)</argsstring>
        <name>net_ipv6_addr_create_solicited_node</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Create solicited node IPv6 multicast address FF02:0:0:0:0:1:FFXX:XXXX defined in RFC 3513. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1170" column="6" bodyfile="include/net/net_ip.h" bodystart="1170" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga0a78f83dcb4e341d86d9352506196696" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create</definition>
        <argsstring>(struct in6_addr *addr, uint16_t addr0, uint16_t addr1, uint16_t addr2, uint16_t addr3, uint16_t addr4, uint16_t addr5, uint16_t addr6, uint16_t addr7)</argsstring>
        <name>net_ipv6_addr_create</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr0</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr5</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr6</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr7</declname>
        </param>
        <briefdescription>
<para>Construct an IPv6 address from eight 16-bit words. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr0</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr3</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr4</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr5</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr6</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr7</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1198" column="20" bodyfile="include/net/net_ip.h" bodystart="1198" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga58cbba1c522815b1ce201b0377ffe0b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_ll_allnodes_mcast</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_addr_create_ll_allnodes_mcast</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create link local allnodes multicast IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1219" column="20" bodyfile="include/net/net_ip.h" bodystart="1219" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga30821f0a2c08b4b01b71d362e3a25de1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_ll_allrouters_mcast</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_addr_create_ll_allrouters_mcast</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create link local allrouters multicast IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1229" column="20" bodyfile="include/net/net_ip.h" bodystart="1229" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6d41f1de27e2e8fbb8f12925eba852b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_iid</definition>
        <argsstring>(struct in6_addr *addr, struct net_linkaddr *lladdr)</argsstring>
        <name>net_ipv6_addr_create_iid</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref> *</type>
          <declname>lladdr</declname>
        </param>
        <briefdescription>
<para>Create IPv6 address interface identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lladdr</parametername>
</parameternamelist>
<parameterdescription>
<para>Link local address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1240" column="20" bodyfile="include/net/net_ip.h" bodystart="1240" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaf4b0c30b926748625bd3c4c81d06ffc5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_addr_based_on_ll</definition>
        <argsstring>(const struct in6_addr *addr, const struct net_linkaddr *lladdr)</argsstring>
        <name>net_ipv6_addr_based_on_ll</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref> *</type>
          <declname>lladdr</declname>
        </param>
        <briefdescription>
<para>Check if given address is based on link layer address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if it is, False otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1297" column="20" bodyfile="include/net/net_ip.h" bodystart="1297" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gad97b2c3da722409eada099f9b7e13f03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in6" kindref="compound">sockaddr_in6</ref> *</type>
        <definition>static struct sockaddr_in6 * net_sin6</definition>
        <argsstring>(const struct sockaddr *addr)</argsstring>
        <name>net_sin6</name>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in6" kindref="compound">sockaddr_in6</ref> from sockaddr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv6 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1363" column="33" bodyfile="include/net/net_ip.h" bodystart="1363" bodyend="1366"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gacccfbac6a03480840fa219e9a1924dc6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in" kindref="compound">sockaddr_in</ref> *</type>
        <definition>static struct sockaddr_in * net_sin</definition>
        <argsstring>(const struct sockaddr *addr)</argsstring>
        <name>net_sin</name>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in" kindref="compound">sockaddr_in</ref> from sockaddr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv4 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1376" column="32" bodyfile="include/net/net_ip.h" bodystart="1376" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae86d2cd402142190e1ea1c120a57939f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in6__ptr" kindref="compound">sockaddr_in6_ptr</ref> *</type>
        <definition>static struct sockaddr_in6_ptr * net_sin6_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_sin6_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in6__ptr" kindref="compound">sockaddr_in6_ptr</ref> from sockaddr_ptr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv6 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1390" column="23" bodyfile="include/net/net_ip.h" bodystart="1390" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga4b948e84590081a8aed2a63496e57ae2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in__ptr" kindref="compound">sockaddr_in_ptr</ref> *</type>
        <definition>static struct sockaddr_in_ptr * net_sin_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_sin_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in__ptr" kindref="compound">sockaddr_in_ptr</ref> from sockaddr_ptr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv4 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1404" column="22" bodyfile="include/net/net_ip.h" bodystart="1404" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gad5cf206e18769a15f9fc917e416db6ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__ll__ptr" kindref="compound">sockaddr_ll_ptr</ref> *</type>
        <definition>static struct sockaddr_ll_ptr * net_sll_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_sll_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__ll__ptr" kindref="compound">sockaddr_ll_ptr</ref> from sockaddr_ptr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to linklayer socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1418" column="22" bodyfile="include/net/net_ip.h" bodystart="1418" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gac2fb590a35961c04807dd985f462c5fb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__can__ptr" kindref="compound">sockaddr_can_ptr</ref> *</type>
        <definition>static struct sockaddr_can_ptr * net_can_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_can_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__can__ptr" kindref="compound">sockaddr_can_ptr</ref> from sockaddr_ptr. This is a helper so that the code needing this functionality can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to CAN socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1432" column="23" bodyfile="include/net/net_ip.h" bodystart="1432" bodyend="1435"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga264b3c0a13493eac291ddc85d0b4d43d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_addr_pton</definition>
        <argsstring>(sa_family_t family, const char *src, void *dst)</argsstring>
        <name>net_addr_pton</name>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Convert a string to IP address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address family (AF_INET or AF_INET6) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address in a null terminated string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct <ref refid="structin__addr" kindref="compound">in_addr</ref> if family is AF_INET or pointer to struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> if family is AF_INET6</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function doesn&apos;t do precise error checking, do not use for untrusted strings.</para>
</simplesect>
<simplesect kind="return"><para>0 if ok, &lt; 0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1450" column="6" declfile="include/net/net_ip.h" declline="1450" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga326b6cd455f8b6193f490fa2877c5222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * net_addr_ntop</definition>
        <argsstring>(sa_family_t family, const void *src, char *dst, size_t size)</argsstring>
        <name>net_addr_ntop</name>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Convert IP address to string form. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address family (AF_INET or AF_INET6) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct <ref refid="structin__addr" kindref="compound">in_addr</ref> if family is AF_INET or pointer to struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> if family is AF_INET6 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for IP address as a null terminated string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes available in the buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dst pointer if ok, NULL if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1463" column="7" declfile="include/net/net_ip.h" declline="1463" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga9918e156f0039cf45d487a112e0a2ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_ipaddr_parse</definition>
        <argsstring>(const char *str, size_t str_len, struct sockaddr *addr)</argsstring>
        <name>net_ipaddr_parse</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>str_len</declname>
        </param>
        <param>
          <type>struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Parse a string that contains either IPv4 or IPv6 address and optional port, and store the information in user supplied sockaddr struct. </para>
        </briefdescription>
        <detaileddescription>
<para>Syntax of the IP address string: 192.0.2.1:80 192.0.2.42</para>
<para>[2001:db8::2] 2001:db::42 Note that the str_len parameter is used to restrict the amount of characters that are checked. If the string does not contain port number, then the port number in sockaddr is not modified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String that contains the IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the string to be parsed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user supplied struct sockaddr.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if parsing could be done, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1487" column="6" declfile="include/net/net_ip.h" declline="1487" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga1695009388402938dcc2e49b526ebd1f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>static int32_t net_tcp_seq_cmp</definition>
        <argsstring>(uint32_t seq1, uint32_t seq2)</argsstring>
        <name>net_tcp_seq_cmp</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq2</declname>
        </param>
        <briefdescription>
<para>Compare TCP sequence numbers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares TCP sequence numbers, accounting for wraparound effects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq1</parametername>
</parameternamelist>
<parameterdescription>
<para>First sequence number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seq2</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds sequence number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if seq1 &lt; seq2, 0 if seq1 == seq2, &gt; 0 if seq &gt; seq2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1501" column="23" bodyfile="include/net/net_ip.h" bodystart="1501" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaa77b299f53e5535ac4c4bea1b6531a34" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_tcp_seq_greater</definition>
        <argsstring>(uint32_t seq1, uint32_t seq2)</argsstring>
        <name>net_tcp_seq_greater</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq2</declname>
        </param>
        <briefdescription>
<para>Check that one TCP sequence number is greater. </para>
        </briefdescription>
        <detaileddescription>
<para>This is convenience function on top of <ref refid="group__ip__4__6_1ga1695009388402938dcc2e49b526ebd1f" kindref="member">net_tcp_seq_cmp()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq1</parametername>
</parameternamelist>
<parameterdescription>
<para>First sequence number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seq2</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds sequence number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if seq &gt; seq2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1516" column="20" bodyfile="include/net/net_ip.h" bodystart="1516" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga8b794f251cf8412c769ab415902a9f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_bytes_from_str</definition>
        <argsstring>(uint8_t *buf, int buf_len, const char *src)</argsstring>
        <name>net_bytes_from_str</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buf_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Convert a string of hex values to array of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>The syntax of the string is &quot;ab:02:98:fa:42:01&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where the bytes are written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the memory area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>String of bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1532" column="5" declfile="include/net/net_ip.h" declline="1532" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae74c9ba7ff4addbce7f931bd6fa91fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_tx_priority2tc</definition>
        <argsstring>(enum net_priority prio)</argsstring>
        <name>net_tx_priority2tc</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Convert Tx network packet priority to traffic class so we can place the packet into correct Tx queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Network priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tx traffic class that handles that priority network traffic. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1542" column="5" declfile="include/net/net_ip.h" declline="1542" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga7b3c41ae9b3962090d72c130a9fa61b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_rx_priority2tc</definition>
        <argsstring>(enum net_priority prio)</argsstring>
        <name>net_rx_priority2tc</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Convert Rx network packet priority to traffic class so we can place the packet into correct Rx queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Network priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rx traffic class that handles that priority network traffic. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1552" column="5" declfile="include/net/net_ip.h" declline="1552" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga14bc7018e3dd7c3e320b44a077343ce4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
        <definition>static enum net_priority net_vlan2priority</definition>
        <argsstring>(uint8_t priority)</argsstring>
        <name>net_vlan2priority</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Convert network packet VLAN priority to network packet priority so we can place the packet into correct queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>VLAN priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network priority </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1562" column="32" bodyfile="include/net/net_ip.h" bodystart="1562" bodyend="1582"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga8be77d043d4d1d29e0879b3b22274629" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t net_priority2vlan</definition>
        <argsstring>(enum net_priority priority)</argsstring>
        <name>net_priority2vlan</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Convert network packet priority to network packet VLAN priority. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>VLAN priority (PCP) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1591" column="23" bodyfile="include/net/net_ip.h" bodystart="1591" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaba4c72e3aa2ceb4ac67d25112fb36523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * net_family2str</definition>
        <argsstring>(sa_family_t family)</argsstring>
        <name>net_family2str</name>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <briefdescription>
<para>Return network address family value as a string. This is only usable for debugging. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>Network address family code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network address family as a string, or NULL if family is unknown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1605" column="12" declfile="include/net/net_ip.h" declline="1605" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ip__4__6_1ga51dba11ffc8e3b1bf695e721b3144094" prot="public" static="no">
        <name>PF_UNSPEC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unspecified protocol family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="42" column="9" bodyfile="include/net/net_ip.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga3f5da0b5be27fe31ec7cc11bfa8d1a25" prot="public" static="no">
        <name>PF_INET</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="43" column="9" bodyfile="include/net/net_ip.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga323f2649198fc7e64b19881869265618" prot="public" static="no">
        <name>PF_INET6</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="44" column="9" bodyfile="include/net/net_ip.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga8e297adb5fe2e28b0d9d921a5d56a8e9" prot="public" static="no">
        <name>PF_PACKET</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Packet family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="45" column="9" bodyfile="include/net/net_ip.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaeac0c3db7a1e021f17987bcc76893849" prot="public" static="no">
        <name>PF_CAN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controller Area Network. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="46" column="9" bodyfile="include/net/net_ip.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga288b09307bcc46aef2acf2af5e3e1006" prot="public" static="no">
        <name>PF_NET_MGMT</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network management info. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="47" column="9" bodyfile="include/net/net_ip.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga521c315ca2a2a4e6345878e84af4085e" prot="public" static="no">
        <name>PF_LOCAL</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="48" column="9" bodyfile="include/net/net_ip.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga0407288f5fb975a03b21d5287c282b2e" prot="public" static="no">
        <name>PF_UNIX</name>
        <initializer><ref refid="group__ip__4__6_1ga521c315ca2a2a4e6345878e84af4085e" kindref="member">PF_LOCAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="49" column="9" bodyfile="include/net/net_ip.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gae77ae24b14b7b7f294f3e04121173f12" prot="public" static="no">
        <name>AF_UNSPEC</name>
        <initializer><ref refid="group__ip__4__6_1ga51dba11ffc8e3b1bf695e721b3144094" kindref="member">PF_UNSPEC</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unspecified address family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="52" column="9" bodyfile="include/net/net_ip.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga9930604d0e32588eae76f43ca38e7826" prot="public" static="no">
        <name>AF_INET</name>
        <initializer><ref refid="group__ip__4__6_1ga3f5da0b5be27fe31ec7cc11bfa8d1a25" kindref="member">PF_INET</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="53" column="9" bodyfile="include/net/net_ip.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaa03706b2738b9a58d4985dfbe99e1bac" prot="public" static="no">
        <name>AF_INET6</name>
        <initializer><ref refid="group__ip__4__6_1ga323f2649198fc7e64b19881869265618" kindref="member">PF_INET6</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="54" column="9" bodyfile="include/net/net_ip.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaa89aa4cd481fe17260c3f5d493cc23f5" prot="public" static="no">
        <name>AF_PACKET</name>
        <initializer><ref refid="group__ip__4__6_1ga8e297adb5fe2e28b0d9d921a5d56a8e9" kindref="member">PF_PACKET</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Packet family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="55" column="9" bodyfile="include/net/net_ip.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga546620c7e758f003b24b7fdae4f97bd4" prot="public" static="no">
        <name>AF_CAN</name>
        <initializer><ref refid="group__ip__4__6_1gaeac0c3db7a1e021f17987bcc76893849" kindref="member">PF_CAN</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controller Area Network. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="56" column="9" bodyfile="include/net/net_ip.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga41d0cbb55cd9550a7f732b1520119c15" prot="public" static="no">
        <name>AF_NET_MGMT</name>
        <initializer><ref refid="group__ip__4__6_1ga288b09307bcc46aef2acf2af5e3e1006" kindref="member">PF_NET_MGMT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network management info. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="57" column="9" bodyfile="include/net/net_ip.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gae24f1f9ea44fcce3affcb2137f593dc1" prot="public" static="no">
        <name>AF_LOCAL</name>
        <initializer><ref refid="group__ip__4__6_1ga521c315ca2a2a4e6345878e84af4085e" kindref="member">PF_LOCAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="58" column="9" bodyfile="include/net/net_ip.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga0fd8739854bc8b48d65f0b669fed3ffe" prot="public" static="no">
        <name>AF_UNIX</name>
        <initializer><ref refid="group__ip__4__6_1ga0407288f5fb975a03b21d5287c282b2e" kindref="member">PF_UNIX</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="59" column="9" bodyfile="include/net/net_ip.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gada37feda716b4ba89cf9dba34288141d" prot="public" static="no">
        <name>ntohs</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a840037a5fd3d36817dc92a44469df704" kindref="member">sys_be16_to_cpu</ref>(x)</initializer>
        <briefdescription>
<para>Convert 16-bit value from network to host byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The network byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="96" column="9" bodyfile="include/net/net_ip.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gac317b3e903719ba02894f1710f7f2439" prot="public" static="no">
        <name>ntohl</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1aee4cefae7f089197e77c487faafda269" kindref="member">sys_be32_to_cpu</ref>(x)</initializer>
        <briefdescription>
<para>Convert 32-bit value from network to host byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The network byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="104" column="9" bodyfile="include/net/net_ip.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga3cfcf123d4ead264289232f91f2c9ca5" prot="public" static="no">
        <name>ntohll</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1abb4d263f2b9b1cbf1c8fbaec714fc411" kindref="member">sys_be64_to_cpu</ref>(x)</initializer>
        <briefdescription>
<para>Convert 64-bit value from network to host byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The network byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="112" column="9" bodyfile="include/net/net_ip.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" prot="public" static="no">
        <name>htons</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a9e2c7b19bbba5343ee8c5f9740484a56" kindref="member">sys_cpu_to_be16</ref>(x)</initializer>
        <briefdescription>
<para>Convert 16-bit value from host to network byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The host byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="120" column="9" bodyfile="include/net/net_ip.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" prot="public" static="no">
        <name>htonl</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a508d3b125adf1d30e8411381827c4f05" kindref="member">sys_cpu_to_be32</ref>(x)</initializer>
        <briefdescription>
<para>Convert 32-bit value from host to network byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The host byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="128" column="9" bodyfile="include/net/net_ip.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga9f4bf0773c45ad9a9753a1b784a13fbb" prot="public" static="no">
        <name>htonll</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a6ac423744c21c1e40aabd7ecb9b9e8d5" kindref="member">sys_cpu_to_be64</ref>(x)</initializer>
        <briefdescription>
<para>Convert 64-bit value from host to network byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The host byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="136" column="9" bodyfile="include/net/net_ip.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga1eefdabf590090be9f98bdf4a2f43bb4" prot="public" static="no">
        <name>NET_IPV6_ADDR_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="148" column="9" bodyfile="include/net/net_ip.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga10a82ea9ba9ca19f3b773bdd53c978e0" prot="public" static="no">
        <name>NET_IPV4_ADDR_SIZE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="161" column="9" bodyfile="include/net/net_ip.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" prot="public" static="no">
        <name>ALIGN_H</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__sys-util_1gaada5610108b15d85c65d863b0c646ef3" kindref="member">ROUND_UP</ref>(x, __alignof__(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="257" column="9" bodyfile="include/net/net_ip.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" prot="public" static="no">
        <name>ALIGN_D</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__sys-util_1gaada5610108b15d85c65d863b0c646ef3" kindref="member">ROUND_UP</ref>(x, __alignof__(z_max_align_t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="260" column="9" bodyfile="include/net/net_ip.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga39567a31d167fc53336d2ab4a2cd78a4" prot="public" static="no">
        <name>CMSG_FIRSTHDR</name>
        <param><defname>msghdr</defname></param>
        <initializer>	((<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_controllen &gt;= sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>) ?	\
	 (struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref> *)((<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_control) : NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="264" column="9" bodyfile="include/net/net_ip.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga77c17efca635d597cb6e98b28172bdc0" prot="public" static="no">
        <name>CMSG_NXTHDR</name>
        <param><defname>msghdr</defname></param>
        <param><defname>cmsg</defname></param>
        <initializer>	(((cmsg) == NULL) ? <ref refid="group__ip__4__6_1ga39567a31d167fc53336d2ab4a2cd78a4" kindref="member">CMSG_FIRSTHDR</ref>(<ref refid="structmsghdr" kindref="compound">msghdr</ref>) :			 \
	 (((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)(cmsg) + <ref refid="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" kindref="member">ALIGN_H</ref>((cmsg)-&gt;cmsg_len) +		 \
	   <ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)) &gt;				 \
	   (<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)((<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_control) + (<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_controllen) ? \
	  NULL :							 \
	  (struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref> *)((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)(cmsg) +			 \
			     <ref refid="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" kindref="member">ALIGN_H</ref>((cmsg)-&gt;cmsg_len))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="270" column="9" bodyfile="include/net/net_ip.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga5ab6d56e410ac0904107e84aeb1484cc" prot="public" static="no">
        <name>CMSG_DATA</name>
        <param><defname>cmsg</defname></param>
        <initializer>((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)(cmsg) + <ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="281" column="9" bodyfile="include/net/net_ip.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga8db11d639dd07c723256f3bb5bc89044" prot="public" static="no">
        <name>CMSG_SPACE</name>
        <param><defname>length</defname></param>
        <initializer>(<ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)) + <ref refid="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" kindref="member">ALIGN_H</ref>(length))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="285" column="9" bodyfile="include/net/net_ip.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gadb36e4ff4fa9a0c6730321c4bfcf64bc" prot="public" static="no">
        <name>CMSG_LEN</name>
        <param><defname>length</defname></param>
        <initializer>(<ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)) + length)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="289" column="9" bodyfile="include/net/net_ip.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga93b37007689284fd9c4bde1a8f4b9199" prot="public" static="no">
        <name>INET_ADDRSTRLEN</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max length of the IPv4 address as a string. Defined by POSIX. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="384" column="9" bodyfile="include/net/net_ip.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaf776b22a727aae7c9f4d869d50df47e8" prot="public" static="no">
        <name>INET6_ADDRSTRLEN</name>
        <initializer>46</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max length of the IPv6 address as a string. Takes into account possible mapped IPv4 addresses. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="388" column="9" bodyfile="include/net/net_ip.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga5b32bdfc249437709bb25bd95ec7d6d7" prot="public" static="no">
        <name>NET_MAX_PRIORITIES</name>
        <initializer>8 /* How many priority values there are */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="427" column="9" bodyfile="include/net/net_ip.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga75ffcc08e621c2d47d1ae043fce2acad" prot="public" static="no">
        <name>net_ipaddr_copy</name>
        <param><defname>dest</defname></param>
        <param><defname>src</defname></param>
        <initializer>	UNALIGNED_PUT(UNALIGNED_GET(src), dest)</initializer>
        <briefdescription>
<para>Copy an IPv4 or IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source IP address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Destination address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="739" column="9" bodyfile="include/net/net_ip.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>IPv4/IPv6 primitives and helpers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
