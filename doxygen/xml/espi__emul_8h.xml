<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="espi__emul_8h" kind="file" language="C++">
    <compoundname>espi_emul.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">device.h</includes>
    <includes refid="emul_8h" local="no">drivers/emul.h</includes>
    <incdepgraph>
      <node id="6">
        <label>drivers/emul.h</label>
        <link refid="emul_8h"/>
      </node>
      <node id="1">
        <label>include/drivers/espi_emul.h</label>
        <link refid="espi__emul_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>device.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structemul__espi__device__api" prot="public">emul_espi_device_api</innerclass>
    <innerclass refid="structespi__emul" prot="public">espi_emul</innerclass>
    <innerclass refid="structemul__espi__driver__api" prot="public">emul_espi_driver_api</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__espi__emul__interface_1ga18fb55455f95a7f7ba93fdc49de2b9c0" prot="public" static="no">
        <name>EMUL_ESPI_HOST_CHIPSEL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="31" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__espi__emul__interface_1gaba6a22b3e04ee000e32b98e97425a917" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* emul_espi_api_set_vw) (struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t level)</definition>
        <argsstring>)(struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t level)</argsstring>
        <name>emul_espi_api_set_vw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Passes eSPI virtual wires set request (virtual wire packet) to the emulator. The emulator updates the state (level) of its virtual wire.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vw</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of signal requested LOW(0) or HIGH(1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="46" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__espi__emul__interface_1ga2a6775ccf7f0a2f0ce468f73a4f7e399" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* emul_espi_api_get_vw) (struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t *level)</definition>
        <argsstring>)(struct espi_emul *emul, enum espi_vwire_signal vw, uint8_t *level)</argsstring>
        <name>emul_espi_api_get_vw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Passes eSPI virtual wires get request (virtual wire packet) to the emulator. The emulator returns the state (level) of its virtual wire.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>Emulator instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vw</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to be get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the signal to be get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="61" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__espi__emul__interface_1gaa9e27e6a744a73a13415e01fa2c09bca" prot="public" static="no">
        <type>struct <ref refid="structespi__emul" kindref="compound">espi_emul</ref> *(*</type>
        <definition>typedef struct espi_emul *(* emul_find_emul) (const struct device *dev, unsigned int chipsel)</definition>
        <argsstring>)(const struct device *dev, unsigned int chipsel)</argsstring>
        <name>emul_find_emul</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an emulator present on a eSPI bus</para>
<para>At present the function is used only to find an emulator of the host device. It may be useful in systems with the SPI flash chips.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulation controller device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chipsel</parametername>
</parameternamelist>
<parameterdescription>
<para>Chip-select value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emulator to use </para>
</simplesect>
<simplesect kind="return"><para>NULL if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="61" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__espi__emul__interface_1ga2abff7d857738254cc4a8a939264924f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* emul_trigger_event) (const struct device *dev, struct espi_event *evt)</definition>
        <argsstring>)(const struct device *dev, struct espi_event *evt)</argsstring>
        <name>emul_trigger_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Triggers an event on the emulator of eSPI controller side which causes calling specific callbacks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device instance of emulated eSPI controller </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be triggered</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="100" column="9" bodyfile="include/drivers/espi_emul.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__espi__emul__interface_1ga0acb298d9e04dfb210aa59f9454d208d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_emul_register</definition>
        <argsstring>(const struct device *dev, const char *name, struct espi_emul *emul)</argsstring>
        <name>espi_emul_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__emul" kindref="compound">espi_emul</ref> *</type>
          <declname>emul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register an emulated device on the controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device that will use the emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>User-friendly name for this emulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emul</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulator to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 indicating success (always) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="142" column="5" declfile="include/drivers/espi_emul.h" declline="142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__emul__interface_1ga67deaf77a17682671ec28488ed3113fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emul_espi_host_send_vw</definition>
        <argsstring>(const struct device *espi_dev, enum espi_vwire_signal vw, uint8_t level)</argsstring>
        <name>emul_espi_host_send_vw</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>espi_dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" kindref="member">espi_vwire_signal</ref></type>
          <declname>vw</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the eSPI virtual wire on the host side, which will trigger a proper event(and callbacks) on the emulated eSPI controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>espi_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulation controller device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vw</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of the signal to be set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="156" column="5" declfile="include/drivers/espi_emul.h" declline="156" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__emul__interface_1ga16c67d1d52f94b7062144e2c2f45d15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emul_espi_host_port80_write</definition>
        <argsstring>(const struct device *espi_dev, uint32_t data)</argsstring>
        <name>emul_espi_host_port80_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>espi_dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform port80 write on the emulated host side, which will trigger a proper event(and callbacks) on the emulated eSPI controller</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>espi_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI emulation controller device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The date to be written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_emul.h" line="169" column="5" declfile="include/drivers/espi_emul.h" declline="169" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs for the eSPI emulation drivers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2020<sp/>Google<sp/>LLC</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_ESPI_SPI_EMUL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_ESPI_SPI_EMUL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;device.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="emul_8h" kindref="compound">drivers/emul.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="group__espi__emul__interface_1ga18fb55455f95a7f7ba93fdc49de2b9c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EMUL_ESPI_HOST_CHIPSEL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structespi__emul" kindref="compound">espi_emul</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group__espi__emul__interface_1gaba6a22b3e04ee000e32b98e97425a917" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__espi__emul__interface_1gaba6a22b3e04ee000e32b98e97425a917" kindref="member">emul_espi_api_set_vw</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structespi__emul" kindref="compound">espi_emul</ref><sp/>*<ref refid="structemul" kindref="compound">emul</ref>,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" kindref="member">espi_vwire_signal</ref><sp/>vw,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>level);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__espi__emul__interface_1ga2a6775ccf7f0a2f0ce468f73a4f7e399" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__espi__emul__interface_1ga2a6775ccf7f0a2f0ce468f73a4f7e399" kindref="member">emul_espi_api_get_vw</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structespi__emul" kindref="compound">espi_emul</ref><sp/>*<ref refid="structemul" kindref="compound">emul</ref>,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" kindref="member">espi_vwire_signal</ref><sp/>vw,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*level);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_ESPI_PERIPHERAL_ACPI_SHM_REGION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>(*emul_espi_api_get_acpi_shm)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structespi__emul" kindref="compound">espi_emul</ref><sp/>*<ref refid="structemul" kindref="compound">emul</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structespi__emul" kindref="compound">espi_emul</ref><sp/>*(*emul_find_emul)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chipsel);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="group__espi__emul__interface_1ga2abff7d857738254cc4a8a939264924f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__espi__emul__interface_1ga2abff7d857738254cc4a8a939264924f" kindref="member">emul_trigger_event</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structespi__event" kindref="compound">espi_event</ref><sp/>*evt);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structemul__espi__device__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structemul__espi__device__api" kindref="compound">emul_espi_device_api</ref><sp/>{</highlight></codeline>
<codeline lineno="105" refid="structemul__espi__device__api_1a85353662a3279444ed2a78f39b49cc3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__espi__emul__interface_1gaba6a22b3e04ee000e32b98e97425a917" kindref="member">emul_espi_api_set_vw</ref><sp/><ref refid="structemul__espi__device__api_1a85353662a3279444ed2a78f39b49cc3c" kindref="member">set_vw</ref>;</highlight></codeline>
<codeline lineno="106" refid="structemul__espi__device__api_1a9d1ceef7587374ab99853eb1ab0040c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__espi__emul__interface_1ga2a6775ccf7f0a2f0ce468f73a4f7e399" kindref="member">emul_espi_api_get_vw</ref><sp/><ref refid="structemul__espi__device__api_1a9d1ceef7587374ab99853eb1ab0040c4" kindref="member">get_vw</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_ESPI_PERIPHERAL_ACPI_SHM_REGION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emul_espi_api_get_acpi_shm<sp/>get_acpi_shm;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="structespi__emul" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structespi__emul" kindref="compound">espi_emul</ref><sp/>{</highlight></codeline>
<codeline lineno="114" refid="structespi__emul_1a495cddd3fc6300f2c7eb3e98caafecd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structespi__emul_1a495cddd3fc6300f2c7eb3e98caafecd5" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="116" refid="structespi__emul_1aea0f8014d76d75fb19640b92a39137ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structemul" kindref="compound">emul</ref><sp/>*<ref refid="structespi__emul_1aea0f8014d76d75fb19640b92a39137ba" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="118" refid="structespi__emul_1a1c80c40cdc25bb5440d57c3aef7379eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structemul__espi__device__api" kindref="compound">emul_espi_device_api</ref><sp/>*<ref refid="structespi__emul_1a1c80c40cdc25bb5440d57c3aef7379eb" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="120" refid="structespi__emul_1a29554137c4ef3fbf4f7a087d01602adb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structespi__emul_1a29554137c4ef3fbf4f7a087d01602adb" kindref="member">chipsel</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="structemul__espi__driver__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structemul__espi__driver__api" kindref="compound">emul_espi_driver_api</ref><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>struct<sp/>espi_driver_api<sp/>has<sp/>to<sp/>be<sp/>first<sp/>in</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>struct<sp/>emul_espi_driver_api<sp/>to<sp/>make<sp/>pointer<sp/>casting<sp/>working</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structemul__espi__driver__api_1a829c405693c4ef7f558004bc8106342b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">espi_driver_api<sp/><ref refid="structemul__espi__driver__api_1a829c405693c4ef7f558004bc8106342b" kindref="member">espi_api</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>rest,<sp/>emulator<sp/>specific<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structemul__espi__driver__api_1a77f9c77cbd2c66e0f8871f94deb7c154" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__espi__emul__interface_1ga2abff7d857738254cc4a8a939264924f" kindref="member">emul_trigger_event</ref><sp/><ref refid="structemul__espi__driver__api_1a77f9c77cbd2c66e0f8871f94deb7c154" kindref="member">trigger_event</ref>;</highlight></codeline>
<codeline lineno="131" refid="structemul__espi__driver__api_1ac7523c429bc75a99d20a87243b9d1195" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__espi__emul__interface_1gaa9e27e6a744a73a13415e01fa2c09bca" kindref="member">emul_find_emul</ref><sp/><ref refid="structemul__espi__driver__api_1ac7523c429bc75a99d20a87243b9d1195" kindref="member">find_emul</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group__espi__emul__interface_1ga0acb298d9e04dfb210aa59f9454d208d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__espi__emul__interface_1ga0acb298d9e04dfb210aa59f9454d208d" kindref="member">espi_emul_register</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structespi__emul" kindref="compound">espi_emul</ref><sp/>*<ref refid="structemul" kindref="compound">emul</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="group__espi__emul__interface_1ga67deaf77a17682671ec28488ed3113fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__espi__emul__interface_1ga67deaf77a17682671ec28488ed3113fc" kindref="member">emul_espi_host_send_vw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*espi_dev,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" kindref="member">espi_vwire_signal</ref><sp/>vw,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>level);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="group__espi__emul__interface_1ga16c67d1d52f94b7062144e2c2f45d15a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__espi__emul__interface_1ga16c67d1d52f94b7062144e2c2f45d15a" kindref="member">emul_espi_host_port80_write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*espi_dev,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_ESPI_PERIPHERAL_ACPI_SHM_REGION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>emul_espi_host_get_acpi_shm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*espi_dev);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_ESPI_SPI_EMUL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/espi_emul.h"/>
  </compounddef>
</doxygen>
