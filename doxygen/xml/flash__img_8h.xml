<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="flash__img_8h" kind="file" language="C++">
    <compoundname>flash_img.h</compoundname>
    <includes refid="stream__flash_8h" local="no">storage/stream_flash.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/dfu/flash_img.h</label>
        <link refid="flash__img_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>drivers/flash.h</label>
        <link refid="flash_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>storage/stream_flash.h</label>
        <link refid="stream__flash_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="7">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="9">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>device.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="11">
        <label>syscalls/flash.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structflash__img__context" prot="public">flash_img_context</innerclass>
    <innerclass refid="structflash__img__check" prot="public">flash_img_check</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="flash__img_8h_1a1b194edcb7e4ae34717d011f08d93e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_img_init_id</definition>
        <argsstring>(struct flash_img_context *ctx, uint8_t area_id)</argsstring>
        <name>flash_img_init_id</name>
        <param>
          <type>struct <ref refid="structflash__img__context" kindref="compound">flash_img_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>area_id</declname>
        </param>
        <briefdescription>
<para>Initialize context needed for writing the image to the flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to be initialized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area_id</parametername>
</parameternamelist>
<parameterdescription>
<para>flash area id of partition where the image should be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/flash_img.h" line="42" column="5" declfile="include/dfu/flash_img.h" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="flash__img_8h_1ac6d1d7811516493242b318be2ecd82df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_img_init</definition>
        <argsstring>(struct flash_img_context *ctx)</argsstring>
        <name>flash_img_init</name>
        <param>
          <type>struct <ref refid="structflash__img__context" kindref="compound">flash_img_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize context needed for writing the image to the flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to be initialized</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/flash_img.h" line="51" column="5" declfile="include/dfu/flash_img.h" declline="51" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="flash__img_8h_1ac1ef017d400bda921ca894d13126b390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t flash_img_bytes_written</definition>
        <argsstring>(struct flash_img_context *ctx)</argsstring>
        <name>flash_img_bytes_written</name>
        <param>
          <type>struct <ref refid="structflash__img__context" kindref="compound">flash_img_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Read number of bytes of the image written to the flash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes written to the image flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/flash_img.h" line="60" column="8" declfile="include/dfu/flash_img.h" declline="60" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="flash__img_8h_1ae3cb2d6be9f993bcf5a97931475d9a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_img_buffered_write</definition>
        <argsstring>(struct flash_img_context *ctx, const uint8_t *data, size_t len, bool flush)</argsstring>
        <name>flash_img_buffered_write</name>
        <param>
          <type>struct <ref refid="structflash__img__context" kindref="compound">flash_img_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Process input buffers to be written to the image slot 1. flash memory in single blocks. Will store remainder between calls. </para>
        </briefdescription>
        <detaileddescription>
<para>A final call to this function with flush set to true will write out the remaining block buffer to flash. Since flash is written to in blocks, the contents of flash from the last byte written up to the next multiple of CONFIG_IMG_BLOCK_BUF_SIZE is padded with 0xff.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>when true this forces any buffered data to be written to flash</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/flash_img.h" line="79" column="5" declfile="include/dfu/flash_img.h" declline="79" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="flash__img_8h_1a5a025255d8bf4a94f9e8d315d5502e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int flash_img_check</definition>
        <argsstring>(struct flash_img_context *ctx, const struct flash_img_check *fic, uint8_t area_id)</argsstring>
        <name>flash_img_check</name>
        <param>
          <type>struct <ref refid="structflash__img__context" kindref="compound">flash_img_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structflash__img__check" kindref="compound">flash_img_check</ref> *</type>
          <declname>fic</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>area_id</declname>
        </param>
        <briefdescription>
<para>Verify flash memory length bytes integrity from a flash area. The start point is indicated by an offset value. </para>
        </briefdescription>
        <detaileddescription>
<para>The function is enabled via CONFIG_IMG_ENABLE_IMAGE_CHECK Kconfig options.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fic</parametername>
</parameternamelist>
<parameterdescription>
<para>flash img check data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">area_id</parametername>
</parameternamelist>
<parameterdescription>
<para>flash area id of partition where the image should be verified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dfu/flash_img.h" line="95" column="5" declfile="include/dfu/flash_img.h" declline="95" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Linaro<sp/>Limited</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DFU_FLASH_IMG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DFU_FLASH_IMG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stream__flash_8h" kindref="compound">storage/stream_flash.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structflash__img__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__img__context" kindref="compound">flash_img_context</ref><sp/>{</highlight></codeline>
<codeline lineno="18" refid="structflash__img__context_1a80fb0afaa391d3242c7de9ffe0f10675" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structflash__img__context_1a80fb0afaa391d3242c7de9ffe0f10675" kindref="member">buf</ref>[CONFIG_IMG_BLOCK_BUF_SIZE];</highlight></codeline>
<codeline lineno="19" refid="structflash__img__context_1ae98e6408fe707543f30094f89ae43bdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__area" kindref="compound">flash_area</ref><sp/>*<ref refid="structflash__img__context_1ae98e6408fe707543f30094f89ae43bdd" kindref="member">flash_area</ref>;</highlight></codeline>
<codeline lineno="20" refid="structflash__img__context_1a9bdb531f92f32957ab78e6cfcced6a3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstream__flash__ctx" kindref="compound">stream_flash_ctx</ref><sp/><ref refid="structflash__img__context_1a9bdb531f92f32957ab78e6cfcced6a3b" kindref="member">stream</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structflash__img__check" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflash__img__check" kindref="compound">flash_img_check</ref><sp/>{</highlight></codeline>
<codeline lineno="30" refid="structflash__img__check_1a6c4aebe9974ddebf0ceafe7f61af8ae9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structflash__img__check_1a6c4aebe9974ddebf0ceafe7f61af8ae9" kindref="member">match</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31" refid="structflash__img__check_1abac05d254f5fc46093808083c86be379" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structflash__img__check_1abac05d254f5fc46093808083c86be379" kindref="member">clen</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="flash__img_8h_1a1b194edcb7e4ae34717d011f08d93e0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="flash__img_8h_1a1b194edcb7e4ae34717d011f08d93e0c" kindref="member">flash_img_init_id</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__img__context" kindref="compound">flash_img_context</ref><sp/>*ctx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>area_id);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="flash__img_8h_1ac6d1d7811516493242b318be2ecd82df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="flash__img_8h_1ac6d1d7811516493242b318be2ecd82df" kindref="member">flash_img_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__img__context" kindref="compound">flash_img_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="flash__img_8h_1ac1ef017d400bda921ca894d13126b390" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="flash__img_8h_1ac1ef017d400bda921ca894d13126b390" kindref="member">flash_img_bytes_written</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__img__context" kindref="compound">flash_img_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="flash__img_8h_1ae3cb2d6be9f993bcf5a97931475d9a6d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="flash__img_8h_1ae3cb2d6be9f993bcf5a97931475d9a6d" kindref="member">flash_img_buffered_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__img__context" kindref="compound">flash_img_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flush);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="flash__img_8h_1a5a025255d8bf4a94f9e8d315d5502e88" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="flash__img_8h_1a5a025255d8bf4a94f9e8d315d5502e88" kindref="member">flash_img_check</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__img__context" kindref="compound">flash_img_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structflash__img__check" kindref="compound">flash_img_check</ref><sp/>*fic,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>area_id);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DFU_FLASH_IMG_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/dfu/flash_img.h"/>
  </compounddef>
</doxygen>
