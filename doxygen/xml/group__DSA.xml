<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__DSA" kind="group">
    <compoundname>DSA</compoundname>
    <title>- Distributed Switch Architecture definitions and helpers</title>
    <innerclass refid="structdsa__slave__config" prot="public">dsa_slave_config</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DSA_1ga6c40af9c2caefa7f855d225a41b43faa" prot="public" static="no">
        <type>enum <ref refid="group__net__core_1ga8e5393f3bdd85491f221324e637c3896" kindref="member">net_verdict</ref>(*</type>
        <definition>typedef enum net_verdict(* dsa_net_recv_cb_t) (struct net_if *iface, struct net_pkt *pkt)</definition>
        <argsstring>)(struct net_if *iface, struct net_pkt *pkt)</argsstring>
        <name>dsa_net_recv_cb_t</name>
        <briefdescription>
<para>DSA (MGMT) Receive packet callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Callback gets called upon receiving packet. It is responsible for freeing packet or indicating to the stack that it needs to free packet by returning correct net_verdict.</para>
<para>Returns:<itemizedlist>
<listitem><para>NET_DROP, if packet was invalid, rejected or we want the stack to free it. In this case the core stack will free the packet.</para>
</listitem><listitem><para>NET_OK, if the packet was accepted, in this case the ownership of the <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> goes to callback and core network stack will forget it. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="53" column="5" bodyfile="include/net/dsa.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DSA_1gad9a6e0ad0e100914f6b932843908d42b" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* dsa_send_t) (const struct device *dev, struct net_pkt *pkt)</definition>
        <argsstring>)(const struct device *dev, struct net_pkt *pkt)</argsstring>
        <name>dsa_send_t</name>
        <briefdescription>
<para>Pointer to master interface send function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="94" column="9" bodyfile="include/net/dsa.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DSA_1ga381fae2a3cf652db81db6e64d9aea62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dsa_tx</definition>
        <argsstring>(const struct device *dev, struct net_pkt *pkt)</argsstring>
        <name>dsa_tx</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>DSA generic transmit function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a generic function for passing packets from slave DSA interface to master.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns:<itemizedlist>
<listitem><para>0 if ok (packet sent via master iface), &lt; 0 if error </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="53" column="5" declfile="include/net/dsa.h" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1gaee78adf88b0598611097e42ff94e9c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dsa_register_recv_callback</definition>
        <argsstring>(struct net_if *iface, dsa_net_recv_cb_t cb)</argsstring>
        <name>dsa_register_recv_callback</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="group__DSA_1ga6c40af9c2caefa7f855d225a41b43faa" kindref="member">dsa_net_recv_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Register DSA Rx callback functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt; 0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="79" column="5" declfile="include/net/dsa.h" declline="79" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1ga01a24efc07ef0aa4125b91781c3039f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * dsa_net_recv</definition>
        <argsstring>(struct net_if *iface, struct net_pkt **pkt)</argsstring>
        <name>dsa_net_recv</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> **</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Set DSA interface to packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface (master) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return the slave network interface </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="89" column="13" declfile="include/net/dsa.h" declline="89" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1ga676bff9b468696e2158bf5b14211fd27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dsa_register_master_tx</definition>
        <argsstring>(struct net_if *iface, dsa_send_t fn)</argsstring>
        <name>dsa_register_master_tx</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="group__DSA_1gad9a6e0ad0e100914f6b932843908d42b" kindref="member">dsa_send_t</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>DSA helper function to register transmit function for master. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface (master) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to master interface send method</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns:<itemizedlist>
<listitem><para>0 if ok, &lt; 0 if error </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="105" column="5" declfile="include/net/dsa.h" declline="105" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1ga06ef38794a9ca3f7b8d3a32d2e1b2212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool dsa_is_port_master</definition>
        <argsstring>(struct net_if *iface)</argsstring>
        <name>dsa_is_port_master</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>DSA helper function to check if port is master. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface (master)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns:<itemizedlist>
<listitem><para>true if ok, false otherwise </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="115" column="6" declfile="include/net/dsa.h" declline="115" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1ga6ee72f05ee1192ceb3f691d0fe007e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
        <definition>struct net_if * dsa_get_slave_port</definition>
        <argsstring>(struct net_if *iface, int slave_num)</argsstring>
        <name>dsa_get_slave_port</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slave_num</declname>
        </param>
        <briefdescription>
<para>Get network interface of a slave port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Master port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slave_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave port number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>network interface of the slave if successful </para>
</simplesect>
<simplesect kind="return"><para>NULL if slave port does not exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="201" column="13" declfile="include/net/dsa.h" declline="201" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1ga131e095ddf546471952663e0ce836c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dsa_switch_read</definition>
        <argsstring>(struct net_if *iface, uint16_t reg_addr, uint8_t *value)</argsstring>
        <name>dsa_switch_read</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read from DSA switch register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>The interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="212" column="5" declfile="include/net/dsa.h" declline="212" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1gad6464601dcfccc77f06a0fed9ce80b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dsa_switch_write</definition>
        <argsstring>(struct net_if *iface, uint16_t reg_addr, uint8_t value)</argsstring>
        <name>dsa_switch_write</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write to DSA switch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>The interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>{ description_of_the_return_value } </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="223" column="5" declfile="include/net/dsa.h" declline="223" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1ga742d4531fc59bfd37a229c2f25c84239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dsa_switch_set_mac_table_entry</definition>
        <argsstring>(struct net_if *iface, const uint8_t *mac, uint8_t fw_port, uint16_t tbl_entry_idx, uint16_t flags)</argsstring>
        <name>dsa_switch_set_mac_table_entry</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>fw_port</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>tbl_entry_idx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Write static MAC table entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Master DSA interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mac</parametername>
</parameternamelist>
<parameterdescription>
<para>MAC address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fw_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The firmware port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tbl_entry_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Table entry index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="236" column="5" declfile="include/net/dsa.h" declline="236" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__DSA_1ga16767d0b80c684b32c33bbcc74d54488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dsa_switch_get_mac_table_entry</definition>
        <argsstring>(struct net_if *iface, uint8_t *buf, uint16_t tbl_entry_idx)</argsstring>
        <name>dsa_switch_get_mac_table_entry</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>tbl_entry_idx</declname>
        </param>
        <briefdescription>
<para>Read static MAC table entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Master DSA interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to receive MAC address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tbl_entry_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Table entry index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="251" column="5" declfile="include/net/dsa.h" declline="251" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__DSA_1ga55b8be4fd4fad75fe1a9156c41b80b4b" prot="public" static="no">
        <name>NET_DSA_PORT_MAX_COUNT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="24" column="9" bodyfile="include/net/dsa.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DSA_1ga4ff957832aeb0c69e0ba92516eaa4c59" prot="public" static="no">
        <name>DSA_STATUS_PERIOD_MS</name>
        <initializer><ref refid="group__clock__apis_1ga302af954e87b10a9b731f1ad07775e9f" kindref="member">K_MSEC</ref>(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="25" column="9" bodyfile="include/net/dsa.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DSA_1ga0e30a4c4996c11eaa86df3ef00a26e61" prot="public" static="no">
        <name>DSA_TAG_SIZE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dsa.h" line="34" column="10" bodyfile="include/net/dsa.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>DSA definitions and helpers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
