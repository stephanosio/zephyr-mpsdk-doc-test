<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="shell_2shell_8h" kind="file" language="C++">
    <compoundname>shell.h</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes refid="shell__types_8h" local="no">shell/shell_types.h</includes>
    <includes refid="shell__history_8h" local="no">shell/shell_history.h</includes>
    <includes refid="shell__fprintf_8h" local="no">shell/shell_fprintf.h</includes>
    <includes refid="shell__log__backend_8h" local="no">shell/shell_log_backend.h</includes>
    <includes refid="log__instance_8h" local="no">logging/log_instance.h</includes>
    <includes refid="log_8h" local="no">logging/log.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includedby refid="shell__dummy_8h" local="no">include/shell/shell_dummy.h</includedby>
    <includedby refid="shell__rtt_8h" local="no">include/shell/shell_rtt.h</includedby>
    <includedby refid="shell__telnet_8h" local="no">include/shell/shell_telnet.h</includedby>
    <includedby refid="shell__uart_8h" local="no">include/shell/shell_uart.h</includedby>
    <incdepgraph>
      <node id="42">
        <label>logging/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>logging/log_backend.h</label>
        <link refid="log__backend_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>logging/log_core.h</label>
        <link refid="include_2logging_2log__core_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>logging/log_instance.h</label>
        <link refid="log__instance_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>logging/log_msg.h</label>
        <link refid="log__msg_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>logging/log_msg2.h</label>
        <link refid="include_2logging_2log__msg2_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>logging/log_output.h</label>
        <link refid="log__output_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/shell/shell.h</label>
        <link refid="shell_2shell_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>shell/shell_fprintf.h</label>
        <link refid="shell__fprintf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>shell/shell_history.h</label>
        <link refid="shell__history_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>shell/shell_log_backend.h</label>
        <link refid="shell__log__backend_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shell/shell_types.h</label>
        <link refid="shell__types_8h"/>
      </node>
      <node id="37">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="30">
        <label>sys/cbprintf.h</label>
        <link refid="cbprintf_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>sys/cbprintf_cxx.h</label>
        <link refid="cbprintf__cxx_8h"/>
      </node>
      <node id="33">
        <label>sys/cbprintf_internal.h</label>
        <link refid="cbprintf__internal_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>sys/mpsc_packet.h</label>
        <link refid="mpsc__packet_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>sys/mpsc_pbuf.h</label>
        <link refid="mpsc__pbuf_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/ring_buffer.h</label>
        <link refid="ring__buffer_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="6">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="10">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="12">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="32">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>syscalls/log_core.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__core_8h"/>
      </node>
      <node id="36">
        <label>syscalls/log_msg2.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2log__msg2_8h"/>
      </node>
      <node id="35">
        <label>alloca.h</label>
      </node>
      <node id="16">
        <label>kernel.h</label>
      </node>
      <node id="31">
        <label>stdarg.h</label>
      </node>
      <node id="11">
        <label>stddef.h</label>
      </node>
      <node id="44">
        <label>syscall.h</label>
      </node>
      <node id="19">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/shell/shell.h</label>
        <link refid="shell_2shell_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/shell/shell_dummy.h</label>
        <link refid="shell__dummy_8h"/>
      </node>
      <node id="3">
        <label>include/shell/shell_rtt.h</label>
        <link refid="shell__rtt_8h"/>
      </node>
      <node id="4">
        <label>include/shell/shell_telnet.h</label>
        <link refid="shell__telnet_8h"/>
      </node>
      <node id="5">
        <label>include/shell/shell_uart.h</label>
        <link refid="shell__uart_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structshell__cmd__entry" prot="public">shell_cmd_entry</innerclass>
    <innerclass refid="unionshell__cmd__entry_1_1union__cmd__entry" prot="public">shell_cmd_entry::union_cmd_entry</innerclass>
    <innerclass refid="structshell__static__args" prot="public">shell_static_args</innerclass>
    <innerclass refid="structshell__static__entry" prot="public">shell_static_entry</innerclass>
    <innerclass refid="structshell__transport__api" prot="public">shell_transport_api</innerclass>
    <innerclass refid="structshell__transport" prot="public">shell_transport</innerclass>
    <innerclass refid="structshell__stats" prot="public">shell_stats</innerclass>
    <innerclass refid="structshell__backend__config__flags" prot="public">shell_backend_config_flags</innerclass>
    <innerclass refid="structshell__backend__ctx__flags" prot="public">shell_backend_ctx_flags</innerclass>
    <innerclass refid="unionshell__backend__cfg" prot="public">shell_backend_cfg</innerclass>
    <innerclass refid="unionshell__backend__ctx" prot="public">shell_backend_ctx</innerclass>
    <innerclass refid="structshell__ctx" prot="public">shell_ctx</innerclass>
    <innerclass refid="structshell" prot="public">shell</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="shell_2shell_8h_1abb162a9a784f605dea4b02a0a6cc0c16" prot="public" static="no">
        <name>CONFIG_SHELL_CMD_BUFF_SIZE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="28" column="9" bodyfile="include/shell/shell.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" prot="public" static="no">
        <name>CONFIG_SHELL_PRINTF_BUFF_SIZE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="32" column="9" bodyfile="include/shell/shell.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell_2shell_8h_1ab194ada3483ec28f093fd9521b19265e" prot="public" static="no">
        <name>CONFIG_SHELL_HISTORY_BUFFER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="36" column="9" bodyfile="include/shell/shell.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell_2shell_8h_1af3a0fbf2152aa4578d29d98000b4d74e" prot="public" static="no">
        <name>SHELL_HEXDUMP_BYTES_IN_LINE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="41" column="9" bodyfile="include/shell/shell.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell_2shell_8h_1a2b64d0c6e086ea227e85fe50312896f7" prot="public" static="no">
        <name>SHELL_OPT_ARG_RAW</name>
        <initializer>(0xFE)</initializer>
        <briefdescription>
<para>Flag indicates that optional arguments will be treated as one, unformatted argument. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, shell is parsing all arguments, treats all spaces as argument separators unless they are within quotation marks which are removed in that case. If command rely on unformatted argument then this flag shall be used in place of number of optional arguments in command definition to indicate that only mandatory arguments shall be parsed and remaining command string is passed as a raw string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="54" column="9" bodyfile="include/shell/shell.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell_2shell_8h_1a0e2b3ac54184ae15f13e2024df1ac69b" prot="public" static="no">
        <name>SHELL_OPT_ARG_CHECK_SKIP</name>
        <initializer>(0xFF)</initializer>
        <briefdescription>
<para>Flag indicateding that number of optional arguments is not limited. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="59" column="9" bodyfile="include/shell/shell.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="shell_2shell_8h_1aba166d98da7258a2a50abc94c1b744c8" prot="public" static="no">
        <name>SHELL_OPT_ARG_MAX</name>
        <initializer>(0xFD)</initializer>
        <briefdescription>
<para>Flag indicating maximum number of optional arguments that can be validated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="65" column="9" bodyfile="include/shell/shell.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" prot="public" static="no">
        <name>SHELL_CMD_ARG_REGISTER</name>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mandatory</defname></param>
        <param><defname>optional</defname></param>
        <initializer>	static const struct <ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref> <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_shell_, syntax) = \
	<ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>(syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, mandatory, optional); \
	static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(shell_cmd_, syntax)   \
	__attribute__ ((section(&quot;.&quot;					   \
			<ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(shell_root_cmd_, syntax)))))	   \
	__attribute__((used)) = {					   \
		.is_dynamic = <ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>,					   \
		.u = {.entry = &amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_shell_, syntax)}		   \
	}</initializer>
        <briefdescription>
<para>Macro for defining and adding a root command (level 0) with required number of arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Each root command shall have unique syntax. If a command will be called with wrong number of arguments shell will print an error message and command handler will not be called.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mandatory</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">optional</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="187" column="9" bodyfile="include/shell/shell.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga6a3ed4ea9051ac138d22cc39134fb2e5" prot="public" static="no">
        <name>SHELL_COND_CMD_ARG_REGISTER</name>
        <param><defname>flag</defname></param>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mandatory</defname></param>
        <param><defname>optional</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(\
		<ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, \
		(\
		<ref refid="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" kindref="member">SHELL_CMD_ARG_REGISTER</ref>(syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, \
					mandatory, optional) \
		), \
		(\
		static <ref refid="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" kindref="member">shell_cmd_handler</ref> dummy_##syntax##_handler __unused = \
								<ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>;\
		static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> *dummy_subcmd_##syntax \
			__unused = subcmd\
		)\
	)</initializer>
        <briefdescription>
<para>Macro for defining and adding a conditional root command (level 0) with required number of arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" kindref="member">SHELL_CMD_ARG_REGISTER</ref> for details.</para>
</simplesect>
Macro can be used to create a command which can be conditionally present. It is and alternative to #ifdefs around command registration and command handler. If command is disabled handler and subcommands are removed from the application.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mandatory</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">optional</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="219" column="9" bodyfile="include/shell/shell.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga06060b98eb505300a3dcc8f922a8e7ab" prot="public" static="no">
        <name>SHELL_CMD_REGISTER</name>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" kindref="member">SHELL_CMD_ARG_REGISTER</ref>(syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, 0, 0)</initializer>
        <briefdescription>
<para>Macro for defining and adding a root command (level 0) with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>All root commands must have different name.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="244" column="9" bodyfile="include/shell/shell.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga62782121ece6af076407c94935ec94e4" prot="public" static="no">
        <name>SHELL_COND_CMD_REGISTER</name>
        <param><defname>flag</defname></param>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6a3ed4ea9051ac138d22cc39134fb2e5" kindref="member">SHELL_COND_CMD_ARG_REGISTER</ref>(<ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, 0, 0)</initializer>
        <briefdescription>
<para>Macro for defining and adding a conditional root command (level 0) with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1ga6a3ed4ea9051ac138d22cc39134fb2e5" kindref="member">SHELL_COND_CMD_ARG_REGISTER</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="260" column="9" bodyfile="include/shell/shell.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gacb2d1a969368efdbeec704ee6e962dee" prot="public" static="no">
        <name>SHELL_STATIC_SUBCMD_SET_CREATE</name>
        <param><defname>name</defname></param>
        <param><defname>...</defname></param>
        <initializer>	static const struct <ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref> shell_##name[] = {	\
		__VA_ARGS__						\
	};								\
	static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> name = {			\
		.is_dynamic = <ref refid="stdbool_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>,					\
		.u = { .entry = shell_##name }				\
	}</initializer>
        <briefdescription>
<para>Macro for creating a subcommand set. It must be used outside of any function body. </para>
        </briefdescription>
        <detaileddescription>
<para>Example usage: SHELL_STATIC_SUBCMD_SET_CREATE( foo, <ref refid="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" kindref="member">SHELL_CMD(abc, ...)</ref>, <ref refid="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" kindref="member">SHELL_CMD(def, ...)</ref>, SHELL_SUBCMD_SET_END )</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the subcommand set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of commands created with <ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref> or or <ref refid="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" kindref="member">SHELL_CMD</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="279" column="9" bodyfile="include/shell/shell.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga4f7a3432f76541eb226a426507e10174" prot="public" static="no">
        <name>SHELL_SUBCMD_SET_END</name>
        <initializer>{NULL}</initializer>
        <briefdescription>
<para>Define ending subcommands set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="292" column="9" bodyfile="include/shell/shell.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gafa6d91c36c36eb68d3f241ed0c7e7131" prot="public" static="no">
        <name>SHELL_DYNAMIC_CMD_CREATE</name>
        <param><defname>name</defname></param>
        <param><defname>get</defname></param>
        <initializer>	static const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> name = {	\
		.is_dynamic = <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>,			\
		.u = { .dynamic_get = get }		\
	}</initializer>
        <briefdescription>
<para>Macro for creating a dynamic entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dynamic entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the function returning dynamic commands array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="300" column="9" bodyfile="include/shell/shell.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" prot="public" static="no">
        <name>SHELL_CMD_ARG</name>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mand</defname></param>
        <param><defname>opt</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(1, syntax, subcmd, help, <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, mand, opt)</initializer>
        <briefdescription>
<para>Initializes a shell command with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a command will be called with wrong number of arguments shell will print an error message and command handler will not be called.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mand</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="319" column="9" bodyfile="include/shell/shell.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" prot="public" static="no">
        <name>SHELL_COND_CMD_ARG</name>
        <param><defname>flag</defname></param>
        <param><defname>syntax</defname></param>
        <param><defname>subcmd</defname></param>
        <param><defname>help</defname></param>
        <param><defname>handler</defname></param>
        <param><defname>mand</defname></param>
        <param><defname>opt</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>), syntax, subcmd, help, \
			  <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>, mand, opt)</initializer>
        <briefdescription>
<para>Initializes a conditional shell command with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>. Based on the <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, creates a valid entry or an empty command which is ignored by the <ref refid="structshell" kindref="compound">shell</ref>. It is an alternative to #ifdefs around command registration and command <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>. However, empty structure is present in the flash even if command is disabled (subcommands and <ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref> are removed). Macro internally handles case if <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref> is not defined so <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref> must be provided without any wrapper, e.g.: <ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG(CONFIG_FOO, ...)</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mand</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="341" column="9" bodyfile="include/shell/shell.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" prot="public" static="no">
        <name>SHELL_EXPR_CMD_ARG</name>
        <param><defname>_expr</defname></param>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <param><defname>_mand</defname></param>
        <param><defname>_opt</defname></param>
        <initializer>	{ \
		.syntax = (_expr) ? (const char *)<ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(_syntax) : &quot;&quot;, \
		.help  = (_expr) ? (const char *)_help : NULL, \
		.subcmd = (const struct <ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref> *)((_expr) ? \
				_subcmd : NULL), \
		.<ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref> = (<ref refid="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" kindref="member">shell_cmd_handler</ref>)((_expr) ? _handler : NULL), \
		.args = { .mandatory = _mand, .optional = _opt} \
	}</initializer>
        <briefdescription>
<para>Initializes a conditional shell command with arguments if expression gives non-zero result at compile time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>. Based on the expression, creates a valid entry or an empty command which is ignored by the <ref refid="structshell" kindref="compound">shell</ref>. It should be used instead of <ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG</ref> if condition is not a single configuration <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref>, e.g.: <ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED(CONFIG_FOO)</ref> &amp;&amp; <ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED(CONFIG_FOO_SETTING_1)</ref>, ...)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_mand</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of mandatory arguments includig command name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_opt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optional arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="365" column="9" bodyfile="include/shell/shell.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" prot="public" static="no">
        <name>SHELL_CMD</name>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>(_syntax, _subcmd, _help, _handler, 0, 0)</initializer>
        <briefdescription>
<para>Initializes a shell command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="383" column="9" bodyfile="include/shell/shell.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga6e27d86443067df4792623f1a04d1ee1" prot="public" static="no">
        <name>SHELL_COND_CMD</name>
        <param><defname>_flag</defname></param>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG</ref>(_flag, _syntax, _subcmd, _help, _handler, 0, 0)</initializer>
        <briefdescription>
<para>Initializes a conditional shell command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" kindref="member">SHELL_COND_CMD_ARG</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time flag. Command is present only if flag exists and equals 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="398" column="9" bodyfile="include/shell/shell.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga59a835edbd7db3acdcb204248c0cf5fd" prot="public" static="no">
        <name>SHELL_EXPR_CMD</name>
        <param><defname>_expr</defname></param>
        <param><defname>_syntax</defname></param>
        <param><defname>_subcmd</defname></param>
        <param><defname>_help</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>(_expr, _syntax, _subcmd, _help, _handler, 0, 0)</initializer>
        <briefdescription>
<para>Initializes shell command if expression gives non-zero result at compile time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" kindref="member">SHELL_EXPR_CMD_ARG</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile time expression. Command is present only if expression is non-zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_syntax</parametername>
</parameternamelist>
<parameterdescription>
<para>Command syntax (for example: history). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_subcmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a subcommands array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_help</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a command help string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a function handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="414" column="9" bodyfile="include/shell/shell.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gaf33b1b20caccad1effe6733603259a00" prot="public" static="no">
        <name>SHELL_CMD_DICT_CREATE</name>
        <param><defname>_data</defname></param>
        <param><defname>_handler</defname></param>
        <initializer>	<ref refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" kindref="member">SHELL_CMD_ARG</ref>(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __DEBRACKET _data), NULL, NULL,	\
		<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(cmd_dict_, <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_handler, _)),	\
			<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __DEBRACKET _data)), 1, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="428" column="9" bodyfile="include/shell/shell.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga401e19cf8ec8601b8a96fe8e95a2b4d2" prot="public" static="no">
        <name>SHELL_SUBCMD_DICT_SET_CREATE</name>
        <param><defname>_name</defname></param>
        <param><defname>_handler</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga1a2b2aa21d7cc37f33e6a62abd2ae340" kindref="member">FOR_EACH_FIXED_ARG</ref>(Z_SHELL_CMD_DICT_HANDLER_CREATE, (),		\
			   _handler, __VA_ARGS__)			\
	<ref refid="group__shell__api_1gacb2d1a969368efdbeec704ee6e962dee" kindref="member">SHELL_STATIC_SUBCMD_SET_CREATE</ref>(_name,				\
		<ref refid="group__sys-util_1ga1a2b2aa21d7cc37f33e6a62abd2ae340" kindref="member">FOR_EACH_FIXED_ARG</ref>(<ref refid="group__shell__api_1gaf33b1b20caccad1effe6733603259a00" kindref="member">SHELL_CMD_DICT_CREATE</ref>, (,), _handler, __VA_ARGS__),	\
		<ref refid="group__shell__api_1ga4f7a3432f76541eb226a426507e10174" kindref="member">SHELL_SUBCMD_SET_END</ref>					\
	)</initializer>
        <briefdescription>
<para>Initializes shell dictionary commands. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a special kind of static commands. Dictionary commands can be used every time you want to use a pair: (string &lt;-&gt; corresponding data) in a command handler. The string is usually a verbal description of a given data. The idea is to use the string as a command syntax that can be prompted by the shell and corresponding data can be used to process the command.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dictionary subcommand set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handler common for all dictionary commands. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__shell__api_1gae697fc40bc727c65224d7fe73d4b1fbc" kindref="member">shell_dict_cmd_handler</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary pairs: (command_syntax, value). Value will be passed to the _handler as user data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: static int my_handler(const struct shell *shell, size_t argc, char **argv, void *data) { int val = (int)data;</para>
<para>shell_print(shell, &quot;(syntax, value) : (%s, %d)&quot;, argv[0], val); return 0; }</para>
<para>SHELL_SUBCMD_DICT_SET_CREATE(sub_dict_cmds, my_handler, (value_0, 0), (value_1, 1), (value_2, 2), (value_3, 3) ); <ref refid="group__shell__api_1ga06060b98eb505300a3dcc8f922a8e7ab" kindref="member">SHELL_CMD_REGISTER(dictionary, &amp;sub_dict_cmds, NULL, NULL)</ref>; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="463" column="9" bodyfile="include/shell/shell.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga7e522b107d4e8b687816a86f14b9a885" prot="public" static="no">
        <name>SHELL_DEFAULT_BACKEND_CONFIG_FLAGS</name>
        <initializer>{						\
	.insert_mode	= 0,			\
	.echo		= 1,			\
	.obscure	= 0,			\
	.mode_delete	= 1,			\
	.use_colors	= 1,			\
	.use_vt100	= 1,			\
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="636" column="9" bodyfile="include/shell/shell.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga158405143b49e4888cb135fec83ad22c" prot="public" static="no">
        <name>SHELL_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_prompt</defname></param>
        <param><defname>_transport_iface</defname></param>
        <param><defname>_log_queue_size</defname></param>
        <param><defname>_log_timeout</defname></param>
        <param><defname>_shell_flag</defname></param>
        <initializer>	static const struct <ref refid="structshell" kindref="compound">shell</ref> _name;				      \
	static struct <ref refid="structshell__ctx" kindref="compound">shell_ctx</ref> <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_name, _ctx);			      \
	static <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> _name##_out_buffer[<ref refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" kindref="member">CONFIG_SHELL_PRINTF_BUFF_SIZE</ref>];     \
	Z_SHELL_LOG_BACKEND_DEFINE(_name, _name##_out_buffer,		      \
				 <ref refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" kindref="member">CONFIG_SHELL_PRINTF_BUFF_SIZE</ref>,		      \
				 _log_queue_size, _log_timeout);	      \
	Z_SHELL_HISTORY_DEFINE(_name##_history, <ref refid="shell_2shell_8h_1ab194ada3483ec28f093fd9521b19265e" kindref="member">CONFIG_SHELL_HISTORY_BUFFER</ref>); \
	Z_SHELL_FPRINTF_DEFINE(_name##_fprintf, &amp;_name, _name##_out_buffer,   \
			     <ref refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" kindref="member">CONFIG_SHELL_PRINTF_BUFF_SIZE</ref>,		      \
			     <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>, z_shell_print_stream);		      \
	<ref refid="log__instance_8h_1ad18f1e8ffbef38f285f70d8005fa144f" kindref="member">LOG_INSTANCE_REGISTER</ref>(<ref refid="structshell" kindref="compound">shell</ref>, _name, CONFIG_SHELL_LOG_LEVEL);	      \
	Z_SHELL_STATS_DEFINE(_name);					      \
	static <ref refid="threads_2thread__stack_2src_2main_8c_1abf20d8da7b5829da0eb6ccb4dae81b37" kindref="member">K_KERNEL_STACK_DEFINE</ref>(_name##_stack, CONFIG_SHELL_STACK_SIZE); \
	static struct <ref refid="structk__thread" kindref="compound">k_thread</ref> _name##_thread;				      \
	static const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structshell" kindref="compound">shell</ref>, _name) = {		      \
		.default_prompt = _prompt,				      \
		.iface = _transport_iface,				      \
		.ctx = &amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(_name, _ctx),				      \
		.history = <ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_SHELL_HISTORY) ?		      \
				&amp;_name##_history : NULL,		      \
		.<ref refid="group__shell__api_1ga56bf30741f9ec7a6d94e5c18c2858948" kindref="member">shell_flag</ref> = _shell_flag,				      \
		.fprintf_ctx = &amp;_name##_fprintf,			      \
		.stats = Z_SHELL_STATS_PTR(_name),			      \
		.<ref refid="structlog__backend" kindref="compound">log_backend</ref> = Z_SHELL_LOG_BACKEND_PTR(_name),		      \
		<ref refid="log__instance_8h_1a7389934373419d74129407ffba7ea3e3" kindref="member">LOG_INSTANCE_PTR_INIT</ref>(log, <ref refid="structshell" kindref="compound">shell</ref>, _name)		      \
		.thread_name = <ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(_name),			      \
		.<ref refid="timeout__order_8c_1a2ff5187d48101eb303964e1b8983beb4" kindref="member">thread</ref> = &amp;_name##_thread,				      \
		.<ref refid="test__stack__fail_8c_1a6856ea318b5a9498715e4444b13a1de1" kindref="member">stack</ref> = _name##_stack					      \
	}</initializer>
        <briefdescription>
<para>Macro for defining a shell instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell default prompt string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_transport_iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the transport interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_log_queue_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Logger processing queue size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_log_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Logger thread timeout in milliseconds on full log queue. If queue is full logger thread is blocked for given amount of time before log message is dropped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_shell_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell output newline sequence. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="794" column="9" bodyfile="include/shell/shell.h" bodystart="793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga4c3a7db0c2bdbf36bbf72302a04bb44d" prot="public" static="no">
        <name>SHELL_NORMAL</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2a32de6063c44948beeb8501fed9b7d18e" kindref="member">SHELL_VT100_COLOR_DEFAULT</ref></initializer>
        <briefdescription>
<para>Terminal default text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="871" column="9" bodyfile="include/shell/shell.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gaac0ea96fbb5885432dca93174c9ad4e6" prot="public" static="no">
        <name>SHELL_INFO</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2ac6fce9bc89ceb0043697b26cca380c8a" kindref="member">SHELL_VT100_COLOR_GREEN</ref></initializer>
        <briefdescription>
<para>Green text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="876" column="9" bodyfile="include/shell/shell.h" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1gacc7c6e7b1fc65cc350353cc166da528b" prot="public" static="no">
        <name>SHELL_OPTION</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2a618a6789463b1980f1086ee128c65972" kindref="member">SHELL_VT100_COLOR_CYAN</ref></initializer>
        <briefdescription>
<para>Cyan text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="881" column="9" bodyfile="include/shell/shell.h" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga118dd6829e092423a85e2b6de07f8dd3" prot="public" static="no">
        <name>SHELL_WARNING</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2adb8fbc39eddceb95f523eed8d5c5bf7d" kindref="member">SHELL_VT100_COLOR_YELLOW</ref></initializer>
        <briefdescription>
<para>Yellow text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="886" column="9" bodyfile="include/shell/shell.h" bodystart="886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga7664f5e184e9b41ac92e033f7b8d885d" prot="public" static="no">
        <name>SHELL_ERROR</name>
        <initializer><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2a6f6be6e431dc8e905c5734b4e9c32af4" kindref="member">SHELL_VT100_COLOR_RED</ref></initializer>
        <briefdescription>
<para>Red text color for <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="891" column="9" bodyfile="include/shell/shell.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga9382959c41fe6850c2daa51306b3c5fd" prot="public" static="no">
        <name>shell_info</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1gaac0ea96fbb5885432dca93174c9ad4e6" kindref="member">SHELL_INFO</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print info message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="959" column="9" bodyfile="include/shell/shell.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga3126019b2100d1ccb2d4dc5efb7d8228" prot="public" static="no">
        <name>shell_print</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1ga4c3a7db0c2bdbf36bbf72302a04bb44d" kindref="member">SHELL_NORMAL</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print normal message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="971" column="9" bodyfile="include/shell/shell.h" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga3d886cfd7b4340b2e71a92bd7c4534d9" prot="public" static="no">
        <name>shell_warn</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1ga118dd6829e092423a85e2b6de07f8dd3" kindref="member">SHELL_WARNING</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print warning message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="983" column="9" bodyfile="include/shell/shell.h" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga408141c02209a9549cb9063f24ef3731" prot="public" static="no">
        <name>shell_error</name>
        <param><defname>_sh</defname></param>
        <param><defname>_ft</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(_sh, <ref refid="group__shell__api_1ga7664f5e184e9b41ac92e033f7b8d885d" kindref="member">SHELL_ERROR</ref>, _ft &quot;\n&quot;, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Print error message to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_sh</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="995" column="9" bodyfile="include/shell/shell.h" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__shell__api_1ga3be3ecccd6ce1954883c5959c39c7927" prot="public" static="no">
        <name>SHELL_CMD_HELP_PRINTED</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1028" column="9" bodyfile="include/shell/shell.h" bodystart="1028" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__shell__api_1ga8773ed2570714ba4985108b1738d33a0" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_receive_state</name>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a201e367896f86499d317d9ec7b59612a" prot="public">
          <name>SHELL_RECEIVE_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0ab512e3269698524fd025433016b3ad65" prot="public">
          <name>SHELL_RECEIVE_ESC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a7378b6ecb1a51c53577db5a8eeda936a" prot="public">
          <name>SHELL_RECEIVE_ESC_SEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0afa2dde3374d3971266652cf48a4d13f7" prot="public">
          <name>SHELL_RECEIVE_TILDE_EXP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="475" column="1" bodyfile="include/shell/shell.h" bodystart="475" bodyend="480"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1gaf2c6ff9ef31dc06086fd1141763e6266" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_state</name>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a0fcbee7b51ec8d90e7d42a1b455360e6" prot="public">
          <name>SHELL_STATE_UNINITIALIZED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266adf8c97c3b6dacfbaf3ace4780cfe3dbd" prot="public">
          <name>SHELL_STATE_INITIALIZED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8a226ad5c1306dd8f491ad321d334b72" prot="public">
          <name>SHELL_STATE_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8d01930f8cbdeddda2bf47d0264c4a8b" prot="public">
          <name>SHELL_STATE_PANIC_MODE_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Panic activated. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a6423704f7a619e1bfed063cd7455ebfe" prot="public">
          <name>SHELL_STATE_PANIC_MODE_INACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Panic requested, not supported. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="485" column="1" bodyfile="include/shell/shell.h" bodystart="485" bodyend="491"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1gae77673d4c086f2f9312ceb7933745ee1" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_transport_evt</name>
        <enumvalue id="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1aa43ab5965bc3f2c964f206277ab3f1bb" prot="public">
          <name>SHELL_TRANSPORT_EVT_RX_RDY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1a6c78a3534128fac6366d9e5dfda81dfb" prot="public">
          <name>SHELL_TRANSPORT_EVT_TX_RDY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Shell transport event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="494" column="1" bodyfile="include/shell/shell.h" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1ga5cd015de5e7295483fa2cff7d54c2d21" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_signal</name>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a815c6760bfd5bba8813ea68964bf4713" prot="public">
          <name>SHELL_SIGNAL_RXRDY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ab8fe52f7b4f43c98dae5188a1dc8547a" prot="public">
          <name>SHELL_SIGNAL_LOG_MSG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ad5c07b5872f785b0731c8aaed0f81c3a" prot="public">
          <name>SHELL_SIGNAL_KILL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a7962ab077b49c816bb9337a9b1b343ed" prot="public">
          <name>SHELL_SIGNAL_TXDONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a6dc083b04447ff6ccb4ce4af4c43645e" prot="public">
          <name>SHELL_SIGNALS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="675" column="1" bodyfile="include/shell/shell.h" bodystart="675" bodyend="681"/>
      </memberdef>
      <memberdef kind="enum" id="group__shell__api_1ga56bf30741f9ec7a6d94e5c18c2858948" prot="public" static="no" strong="no">
        <type></type>
        <name>shell_flag</name>
        <enumvalue id="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948a343ee559d6259111dbab529a283b23ab" prot="public">
          <name>SHELL_FLAG_CRLF_DEFAULT</name>
          <initializer>= (1&lt;&lt;0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948ab6fec7b615b6de79e1d00d4117615446" prot="public">
          <name>SHELL_FLAG_OLF_CRLF</name>
          <initializer>= (1&lt;&lt;1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags for setting shell output newline sequence. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="747" column="1" bodyfile="include/shell/shell.h" bodystart="747" bodyend="750"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__shell__api_1gafc042f32bac2fdd4cbde9f943e29b008" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_dynamic_get) (size_t idx, struct shell_static_entry *entry)</definition>
        <argsstring>)(size_t idx, struct shell_static_entry *entry)</argsstring>
        <name>shell_dynamic_get</name>
        <briefdescription>
<para>Shell dynamic command descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Function shall fill the received <ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref> structure with requested (idx) dynamic subcommand data. If there is more than one dynamic subcommand available, the function shall ensure that the returned commands: entry-&gt;syntax are sorted in alphabetical order. If idx exceeds the available dynamic subcommands, the function must write to entry-&gt;syntax NULL value. This will indicate to the shell module that there are no more dynamic commands to read. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="87" column="9" bodyfile="include/shell/shell.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* shell_cmd_handler) (const struct shell *shell, size_t argc, char **argv)</definition>
        <argsstring>)(const struct shell *shell, size_t argc, char **argv)</argsstring>
        <name>shell_cmd_handler</name>
        <briefdescription>
<para>Shell command handler prototype. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful command execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Help printed and command not executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument validation failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOEXEC</parametername>
</parameternamelist>
<parameterdescription>
<para>Command not executed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="141" column="9" bodyfile="include/shell/shell.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1gae697fc40bc727c65224d7fe73d4b1fbc" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* shell_dict_cmd_handler) (const struct shell *shell, size_t argc, char **argv, void *data)</definition>
        <argsstring>)(const struct shell *shell, size_t argc, char **argv, void *data)</argsstring>
        <name>shell_dict_cmd_handler</name>
        <briefdescription>
<para>Shell dictionary command handler prototype. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful command execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Help printed and command not executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument validation failed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOEXEC</parametername>
</parameternamelist>
<parameterdescription>
<para>Command not executed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="157" column="9" bodyfile="include/shell/shell.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1ga265807c2d8eba7b9ea633968627e085d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_transport_handler_t) (enum shell_transport_evt evt, void *context)</definition>
        <argsstring>)(enum shell_transport_evt evt, void *context)</argsstring>
        <name>shell_transport_handler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="499" column="9" bodyfile="include/shell/shell.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_uninit_cb_t) (const struct shell *shell, int res)</definition>
        <argsstring>)(const struct shell *shell, int res)</argsstring>
        <name>shell_uninit_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="503" column="9" bodyfile="include/shell/shell.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* shell_bypass_cb_t) (const struct shell *shell, uint8_t *data, size_t len)</definition>
        <argsstring>)(const struct shell *shell, uint8_t *data, size_t len)</argsstring>
        <name>shell_bypass_cb_t</name>
        <briefdescription>
<para>Bypass callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw data from transport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Data length. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="511" column="9" bodyfile="include/shell/shell.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__shell__api_1gaddf27615ed72440ecb63aa1d84962c82" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structlog__backend__api" kindref="compound">log_backend_api</ref></type>
        <definition>const struct log_backend_api log_backend_shell_api</definition>
        <argsstring></argsstring>
        <name>log_backend_shell_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="742" column="35" declfile="include/shell/shell.h" declline="742" declcolumn="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__shell__api_1ga571db3aa3e024a09e82b117a74d6f248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
        <definition>const struct device * shell_device_lookup</definition>
        <argsstring>(size_t idx, const char *prefix)</argsstring>
        <name>shell_device_lookup</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Get by index a device that matches . </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used, for example, to identify I2C_1 as the second I2C device.</para>
<para>Devices that failed to initialize or do not have a non-empty name are excluded from the candidates for a match.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the device number starting from zero.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>optional name prefix used to restrict candidate devices. Indexing is done relative to devices with names that start with this text. Pass null if no prefix match is required. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="126" column="19" declfile="include/shell/shell.h" declline="126" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga3dc80793e145c56bb07754fc2f292ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_init</definition>
        <argsstring>(const struct shell *shell, const void *transport_config, struct shell_backend_config_flags cfg_flags, bool log_backend, uint32_t init_log_level)</argsstring>
        <name>shell_init</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>transport_config</declname>
        </param>
        <param>
          <type>struct <ref refid="structshell__backend__config__flags" kindref="compound">shell_backend_config_flags</ref></type>
          <declname>cfg_flags</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>log_backend</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>init_log_level</declname>
        </param>
        <briefdescription>
<para>Function for initializing a transport layer and internal shell state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">transport_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Transport configuration during initialization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cfg_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial backend configuration flags. Shell will copy this data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structlog__backend" kindref="compound">log_backend</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the console will be used as logger backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">init_log_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Default severity level for the logger.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="838" column="5" declfile="include/shell/shell.h" declline="838" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga240cb01650dee2b555056c08c4242d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_uninit</definition>
        <argsstring>(const struct shell *shell, shell_uninit_cb_t cb)</argsstring>
        <name>shell_uninit</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" kindref="member">shell_uninit_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Uninitializes the transport layer and the internal shell state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback called when uninitialization is completed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="848" column="6" declfile="include/shell/shell.h" declline="848" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gac00d3479289798d38fbf93cf775c4736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_start</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_start</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Function for starting shell processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="857" column="5" declfile="include/shell/shell.h" declline="857" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gae432203ca2adc2df0f06e6f43fd78b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_stop</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_stop</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Function for stopping shell processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to shell instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Standard error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="866" column="5" declfile="include/shell/shell.h" declline="866" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga48aa8e7aff70900b1f0ea3d4f173773d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_fprintf</definition>
        <argsstring>(const struct shell *shell, enum shell_vt100_color color, const char *fmt,...)</argsstring>
        <name>shell_fprintf</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>enum <ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2" kindref="member">shell_vt100_color</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>printf-like function which sends formatted data stream to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used from the command handler or from threads, but not from an interrupt context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">color</parametername>
</parameternamelist>
<parameterdescription>
<para>Printed text color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="904" column="7" declfile="include/shell/shell.h" declline="904" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gab98c82bbebbff48c173f347d66078bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_vfprintf</definition>
        <argsstring>(const struct shell *shell, enum shell_vt100_color color, const char *fmt, va_list args)</argsstring>
        <name>shell_vfprintf</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>enum <ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2" kindref="member">shell_vt100_color</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>vprintf-like function which sends formatted data stream to the shell. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used from the command handler or from threads, but not from an interrupt context. It is similar to <ref refid="group__shell__api_1ga48aa8e7aff70900b1f0ea3d4f173773d" kindref="member">shell_fprintf()</ref> but takes a va_list instead of variable arguments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">color</parametername>
</parameternamelist>
<parameterdescription>
<para>Printed text color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of parameters to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="920" column="6" declfile="include/shell/shell.h" declline="920" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gac588a2c9af247e46cb0065fee36a14b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_hexdump_line</definition>
        <argsstring>(const struct shell *shell, unsigned int offset, const uint8_t *data, size_t len)</argsstring>
        <name>shell_hexdump_line</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Print a line of data in hexadecimal format. </para>
        </briefdescription>
        <detaileddescription>
<para>Each line shows the offset, bytes and then ASCII representation.</para>
<para>For example:</para>
<para>00008010: 20 25 00 20 2f 48 00 08 80 05 00 20 af 46 00 | %. /H.. ... .F. |</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset to show for this line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="938" column="6" declfile="include/shell/shell.h" declline="938" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga838b534ffc9d0bda75c811d591832656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_hexdump</definition>
        <argsstring>(const struct shell *shell, const uint8_t *data, size_t len)</argsstring>
        <name>shell_hexdump</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Print data in hexadecimal format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="948" column="6" declfile="include/shell/shell.h" declline="948" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gafcb014602bbe6b6cd2ab8e2e92659cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_process</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_process</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Process function, which should be executed when data is ready in the transport interface. To be used if shell thread is disabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1004" column="6" declfile="include/shell/shell.h" declline="1004" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga0c0989b142807696c59979445f38ba32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_prompt_change</definition>
        <argsstring>(const struct shell *shell, const char *prompt)</argsstring>
        <name>shell_prompt_change</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <briefdescription>
<para>Change displayed shell prompt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>New shell prompt.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 Success. </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL Pointer to new prompt is not correct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1015" column="5" declfile="include/shell/shell.h" declline="1015" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gaae64c1946f852b18e4745b6fe83a979a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_help</definition>
        <argsstring>(const struct shell *shell)</argsstring>
        <name>shell_help</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Prints the current command help. </para>
        </briefdescription>
        <detaileddescription>
<para>Function will print a help string with: the currently entered command and subcommands (if they exist).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1025" column="6" declfile="include/shell/shell.h" declline="1025" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga20d72c016e6735e9dac5909628e4791d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_execute_cmd</definition>
        <argsstring>(const struct shell *shell, const char *cmd)</argsstring>
        <name>shell_execute_cmd</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Execute command. </para>
        </briefdescription>
        <detaileddescription>
<para>Pass command line to shell to execute.</para>
<para>Note: This by no means makes any of the commands a stable interface, so this function should only be used for debugging/diagnostic.</para>
<para>This function must not be called from shell command context!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. It can be NULL when the <verbatim>embed:rst:inline :kconfig:`CONFIG_SHELL_BACKEND_DUMMY` </verbatim> option is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to be executed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of the execution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1047" column="5" declfile="include/shell/shell.h" declline="1047" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga768c606f2d50f24e9b607ba0a341686d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_set_root_cmd</definition>
        <argsstring>(const char *cmd)</argsstring>
        <name>shell_set_root_cmd</name>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Set root command for all shell instances. </para>
        </briefdescription>
        <detaileddescription>
<para>It allows setting from the code the root command. It is an equivalent of calling select command with one of the root commands as the argument (e.g &quot;select log&quot;) except it sets command for all shell instances.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>String with one of the root commands or null pointer to reset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if root command is set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid root command is provided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1060" column="5" declfile="include/shell/shell.h" declline="1060" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga2d05dd8a3cbea0eb0df8b422a7fb6a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shell_set_bypass</definition>
        <argsstring>(const struct shell *shell, shell_bypass_cb_t bypass)</argsstring>
        <name>shell_set_bypass</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" kindref="member">shell_bypass_cb_t</ref></type>
          <declname>bypass</declname>
        </param>
        <briefdescription>
<para>Set bypass callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Bypass callback is called whenever data is received. Shell is bypassed and data is passed directly to the callback. Use null to disable bypass functionality.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bypass</parametername>
</parameternamelist>
<parameterdescription>
<para>Bypass callback or null to disable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1070" column="6" declfile="include/shell/shell.h" declline="1070" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gaa1c092b0afb5119f8e3959f18fcf307a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_insert_mode_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_insert_mode_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control text insert mode. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Insert mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1082" column="5" declfile="include/shell/shell.h" declline="1082" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga2dd3529a39b79d4f3f64b52f05e164c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_use_colors_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_use_colors_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether terminal output uses colored syntax. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Color mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1095" column="5" declfile="include/shell/shell.h" declline="1095" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gae56226448f757b4aa7b1748d482c23c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_echo_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_echo_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether user input is echoed back. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Echo mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1107" column="5" declfile="include/shell/shell.h" declline="1107" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1gacb219bcc8e526065c27a42c08a6e41e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_obscure_set</definition>
        <argsstring>(const struct shell *shell, bool obscure)</argsstring>
        <name>shell_obscure_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>obscure</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether user input is obscured with asterisks <ndash/> useful for implementing passwords. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">obscure</parametername>
</parameternamelist>
<parameterdescription>
<para>Obscure mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1120" column="5" declfile="include/shell/shell.h" declline="1120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shell__api_1ga622ef46b3ca2b494c732744e3c1adf3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shell_mode_delete_set</definition>
        <argsstring>(const struct shell *shell, bool val)</argsstring>
        <name>shell_mode_delete_set</name>
        <param>
          <type>const struct <ref refid="structshell" kindref="compound">shell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allow application to control whether the delete key backspaces or deletes. Value is modified atomically and the previous value is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the shell instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Delete mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>or 1: previous value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if shell is NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shell/shell.h" line="1133" column="5" declfile="include/shell/shell.h" declline="1133" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SHELL_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="shell__types_8h" kindref="compound">shell/shell_types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="shell__history_8h" kindref="compound">shell/shell_history.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="shell__fprintf_8h" kindref="compound">shell/shell_fprintf.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="shell__log__backend_8h" kindref="compound">shell/shell_log_backend.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log__instance_8h" kindref="compound">logging/log_instance.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="log_8h" kindref="compound">logging/log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>CONFIG_SHELL_GETOPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;getopt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_SHELL_CMD_BUFF_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="shell_2shell_8h_1abb162a9a784f605dea4b02a0a6cc0c16" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONFIG_SHELL_CMD_BUFF_SIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_SHELL_PRINTF_BUFF_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONFIG_SHELL_PRINTF_BUFF_SIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_SHELL_HISTORY_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="shell_2shell_8h_1ab194ada3483ec28f093fd9521b19265e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONFIG_SHELL_HISTORY_BUFFER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SHELL_CMD_ROOT_LVL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="shell_2shell_8h_1af3a0fbf2152aa4578d29d98000b4d74e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_HEXDUMP_BYTES_IN_LINE<sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="shell_2shell_8h_1a2b64d0c6e086ea227e85fe50312896f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_OPT_ARG_RAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xFE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="shell_2shell_8h_1a0e2b3ac54184ae15f13e2024df1ac69b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_OPT_ARG_CHECK_SKIP<sp/>(0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="shell_2shell_8h_1aba166d98da7258a2a50abc94c1b744c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_OPT_ARG_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xFD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="group__shell__api_1gafc042f32bac2fdd4cbde9f943e29b008" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__shell__api_1gafc042f32bac2fdd4cbde9f943e29b008" kindref="member">shell_dynamic_get</ref>)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref><sp/>*entry);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structshell__cmd__entry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref><sp/>{</highlight></codeline>
<codeline lineno="94" refid="structshell__cmd__entry_1a24b5a6c0cac8c7680946f5c9e951b9df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structshell__cmd__entry_1a24b5a6c0cac8c7680946f5c9e951b9df" kindref="member">is_dynamic</ref>;</highlight></codeline>
<codeline lineno="95" refid="unionshell__cmd__entry_1_1union__cmd__entry" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionshell__cmd__entry_1_1union__cmd__entry" kindref="compound">union_cmd_entry</ref><sp/>{</highlight></codeline>
<codeline lineno="97" refid="unionshell__cmd__entry_1_1union__cmd__entry_1a1bd826ad0c2b808c6c54777fcda7b8f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gafc042f32bac2fdd4cbde9f943e29b008" kindref="member">shell_dynamic_get</ref><sp/><ref refid="unionshell__cmd__entry_1_1union__cmd__entry_1a1bd826ad0c2b808c6c54777fcda7b8f0" kindref="member">dynamic_get</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="unionshell__cmd__entry_1_1union__cmd__entry_1a0594dfa3c04aed02a821498ee255109c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref><sp/>*<ref refid="unionshell__cmd__entry_1_1union__cmd__entry_1a0594dfa3c04aed02a821498ee255109c" kindref="member">entry</ref>;</highlight></codeline>
<codeline lineno="101" refid="structshell__cmd__entry_1a4a3ea7a5a36ae191ef6d1b9ac0e355c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structshell__cmd__entry_1a4a3ea7a5a36ae191ef6d1b9ac0e355c2" kindref="member">u</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell" kindref="compound">shell</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structshell__static__args" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__args" kindref="compound">shell_static_args</ref><sp/>{</highlight></codeline>
<codeline lineno="107" refid="structshell__static__args_1a2c23bfa755d3bb651e299ff461065d98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structshell__static__args_1a2c23bfa755d3bb651e299ff461065d98" kindref="member">mandatory</ref>;<sp/></highlight></codeline>
<codeline lineno="108" refid="structshell__static__args_1aa3aa836ed537dde38e64d2c677ace5ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structshell__static__args_1aa3aa836ed537dde38e64d2c677ace5ae" kindref="member">optional</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="group__shell__api_1ga571db3aa3e024a09e82b117a74d6f248" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="group__shell__api_1ga571db3aa3e024a09e82b117a74d6f248" kindref="member">shell_device_lookup</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" kindref="member">shell_cmd_handler</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="group__shell__api_1gae697fc40bc727c65224d7fe73d4b1fbc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__shell__api_1gae697fc40bc727c65224d7fe73d4b1fbc" kindref="member">shell_dict_cmd_handler</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>argc,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Shell<sp/>static<sp/>command<sp/>descriptor.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structshell__static__entry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref><sp/>{</highlight></codeline>
<codeline lineno="164" refid="structshell__static__entry_1ad87defa749ee7481f6d29d8c9084fb91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structshell__static__entry_1ad87defa749ee7481f6d29d8c9084fb91" kindref="member">syntax</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165" refid="structshell__static__entry_1ac8fb0fc23957a49d9a3664b5baa08704" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structshell__static__entry_1ac8fb0fc23957a49d9a3664b5baa08704" kindref="member">help</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166" refid="structshell__static__entry_1a0ca6cda12f3521a61c358b29d0a1d971" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__cmd__entry" kindref="compound">shell_cmd_entry</ref><sp/>*<ref refid="structshell__static__entry_1a0ca6cda12f3521a61c358b29d0a1d971" kindref="member">subcmd</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167" refid="structshell__static__entry_1a3147eb0cc1fea698dd433127acb1f220" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ga2546bd682966f71f03985f220ff48dc2" kindref="member">shell_cmd_handler</ref><sp/><ref refid="structshell__static__entry_1a3147eb0cc1fea698dd433127acb1f220" kindref="member">handler</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168" refid="structshell__static__entry_1a73951d31712342c0c0545a142059d367" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__args" kindref="compound">shell_static_args</ref><sp/><ref refid="structshell__static__entry_1a73951d31712342c0c0545a142059d367" kindref="member">args</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="group__shell__api_1gae8a8bbcbb842027c02a319b3fb976a3d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_CMD_ARG_REGISTER(syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mandatory,<sp/>optional)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>shell_static_entry<sp/>UTIL_CAT(_shell_,<sp/>syntax)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_CMD_ARG(syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>mandatory,<sp/>optional);<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>shell_cmd_entry<sp/>UTIL_CAT(shell_cmd_,<sp/>syntax)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__<sp/>((section(&quot;.&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRINGIFY(UTIL_CAT(shell_root_cmd_,<sp/>syntax)))))<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((used))<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.is_dynamic<sp/>=<sp/>false,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.u<sp/>=<sp/>{.entry<sp/>=<sp/>&amp;UTIL_CAT(_shell_,<sp/>syntax)}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="group__shell__api_1ga6a3ed4ea9051ac138d22cc39134fb2e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_COND_CMD_ARG_REGISTER(flag,<sp/>syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mandatory,<sp/>optional)<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag,<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_CMD_ARG_REGISTER(syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mandatory,<sp/>optional)<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>shell_cmd_handler<sp/>dummy_##syntax##_handler<sp/>__unused<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler;\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>shell_cmd_entry<sp/>*dummy_subcmd_##syntax<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__unused<sp/>=<sp/>subcmd\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="group__shell__api_1ga06060b98eb505300a3dcc8f922a8e7ab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_CMD_REGISTER(syntax,<sp/>subcmd,<sp/>help,<sp/>handler)<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_CMD_ARG_REGISTER(syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group__shell__api_1ga62782121ece6af076407c94935ec94e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_COND_CMD_REGISTER(flag,<sp/>syntax,<sp/>subcmd,<sp/>help,<sp/>handler)<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_COND_CMD_ARG_REGISTER(flag,<sp/>syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="group__shell__api_1gacb2d1a969368efdbeec704ee6e962dee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_STATIC_SUBCMD_SET_CREATE(name,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>shell_static_entry<sp/>shell_##name[]<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>shell_cmd_entry<sp/>name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.is_dynamic<sp/>=<sp/>false,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.u<sp/>=<sp/>{<sp/>.entry<sp/>=<sp/>shell_##name<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="group__shell__api_1ga4f7a3432f76541eb226a426507e10174" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_SUBCMD_SET_END<sp/>{NULL}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="group__shell__api_1gafa6d91c36c36eb68d3f241ed0c7e7131" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_DYNAMIC_CMD_CREATE(name,<sp/>get)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>shell_cmd_entry<sp/>name<sp/>=<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.is_dynamic<sp/>=<sp/>true,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.u<sp/>=<sp/>{<sp/>.dynamic_get<sp/>=<sp/>get<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="group__shell__api_1gad762c496a2ced65069b6d1d02a4d925c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_CMD_ARG(syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>mand,<sp/>opt)<sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_EXPR_CMD_ARG(1,<sp/>syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>mand,<sp/>opt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="group__shell__api_1ga68229f89484c3459d77cebb450ee1f24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_COND_CMD_ARG(flag,<sp/>syntax,<sp/>subcmd,<sp/>help,<sp/>handler,<sp/>mand,<sp/>opt)<sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_EXPR_CMD_ARG(IS_ENABLED(flag),<sp/>syntax,<sp/>subcmd,<sp/>help,<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler,<sp/>mand,<sp/>opt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="group__shell__api_1ga6b07c55dd7d42873d604ae299b3cfdf9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_EXPR_CMD_ARG(_expr,<sp/>_syntax,<sp/>_subcmd,<sp/>_help,<sp/>_handler,<sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mand,<sp/>_opt)<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.syntax<sp/>=<sp/>(_expr)<sp/>?<sp/>(const<sp/>char<sp/>*)STRINGIFY(_syntax)<sp/>:<sp/>&quot;&quot;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.help<sp/><sp/>=<sp/>(_expr)<sp/>?<sp/>(const<sp/>char<sp/>*)_help<sp/>:<sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subcmd<sp/>=<sp/>(const<sp/>struct<sp/>shell_cmd_entry<sp/>*)((_expr)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_subcmd<sp/>:<sp/>NULL),<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.handler<sp/>=<sp/>(shell_cmd_handler)((_expr)<sp/>?<sp/>_handler<sp/>:<sp/>NULL),<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.args<sp/>=<sp/>{<sp/>.mandatory<sp/>=<sp/>_mand,<sp/>.optional<sp/>=<sp/>_opt}<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="group__shell__api_1ga24ade9db85af9a8776a45ba0084f4cca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_CMD(_syntax,<sp/>_subcmd,<sp/>_help,<sp/>_handler)<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_CMD_ARG(_syntax,<sp/>_subcmd,<sp/>_help,<sp/>_handler,<sp/>0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="group__shell__api_1ga6e27d86443067df4792623f1a04d1ee1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_COND_CMD(_flag,<sp/>_syntax,<sp/>_subcmd,<sp/>_help,<sp/>_handler)<sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_COND_CMD_ARG(_flag,<sp/>_syntax,<sp/>_subcmd,<sp/>_help,<sp/>_handler,<sp/>0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="group__shell__api_1ga59a835edbd7db3acdcb204248c0cf5fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_EXPR_CMD(_expr,<sp/>_syntax,<sp/>_subcmd,<sp/>_help,<sp/>_handler)<sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_EXPR_CMD_ARG(_expr,<sp/>_syntax,<sp/>_subcmd,<sp/>_help,<sp/>_handler,<sp/>0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>macro<sp/>used<sp/>for<sp/>creating<sp/>handlers<sp/>for<sp/>dictionary<sp/>commands.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SHELL_CMD_DICT_HANDLER_CREATE(_data,<sp/>_handler)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor">static<sp/>int<sp/>UTIL_CAT(UTIL_CAT(cmd_dict_,<sp/>UTIL_CAT(_handler,<sp/>_)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_ARG_N(1,<sp/>__DEBRACKET<sp/>_data))(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>struct<sp/>shell<sp/>*shell,<sp/>size_t<sp/>argc,<sp/>char<sp/>**argv)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_handler(shell,<sp/>argc,<sp/>argv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void<sp/>*)GET_ARG_N(2,<sp/>__DEBRACKET<sp/>_data));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>macro<sp/>used<sp/>for<sp/>creating<sp/>dictionary<sp/>commands.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="group__shell__api_1gaf33b1b20caccad1effe6733603259a00" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_CMD_DICT_CREATE(_data,<sp/>_handler)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="429"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_CMD_ARG(GET_ARG_N(1,<sp/>__DEBRACKET<sp/>_data),<sp/>NULL,<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTIL_CAT(UTIL_CAT(cmd_dict_,<sp/>UTIL_CAT(_handler,<sp/>_)),<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_ARG_N(1,<sp/>__DEBRACKET<sp/>_data)),<sp/>1,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="group__shell__api_1ga401e19cf8ec8601b8a96fe8e95a2b4d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_SUBCMD_DICT_SET_CREATE(_name,<sp/>_handler,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOR_EACH_FIXED_ARG(Z_SHELL_CMD_DICT_HANDLER_CREATE,<sp/>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_handler,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_STATIC_SUBCMD_SET_CREATE(_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOR_EACH_FIXED_ARG(SHELL_CMD_DICT_CREATE,<sp/>(,),<sp/>_handler,<sp/>__VA_ARGS__),<sp/><sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHELL_SUBCMD_SET_END<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="group__shell__api_1ga8773ed2570714ba4985108b1738d33a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga8773ed2570714ba4985108b1738d33a0" kindref="member">shell_receive_state</ref><sp/>{</highlight></codeline>
<codeline lineno="476" refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a201e367896f86499d317d9ec7b59612a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a201e367896f86499d317d9ec7b59612a" kindref="member">SHELL_RECEIVE_DEFAULT</ref>,</highlight></codeline>
<codeline lineno="477" refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0ab512e3269698524fd025433016b3ad65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0ab512e3269698524fd025433016b3ad65" kindref="member">SHELL_RECEIVE_ESC</ref>,</highlight></codeline>
<codeline lineno="478" refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a7378b6ecb1a51c53577db5a8eeda936a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0a7378b6ecb1a51c53577db5a8eeda936a" kindref="member">SHELL_RECEIVE_ESC_SEQ</ref>,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0afa2dde3374d3971266652cf48a4d13f7" kindref="member">SHELL_RECEIVE_TILDE_EXP</ref></highlight></codeline>
<codeline lineno="480" refid="group__shell__api_1gga8773ed2570714ba4985108b1738d33a0afa2dde3374d3971266652cf48a4d13f7" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="group__shell__api_1gaf2c6ff9ef31dc06086fd1141763e6266" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gaf2c6ff9ef31dc06086fd1141763e6266" kindref="member">shell_state</ref><sp/>{</highlight></codeline>
<codeline lineno="486" refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a0fcbee7b51ec8d90e7d42a1b455360e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a0fcbee7b51ec8d90e7d42a1b455360e6" kindref="member">SHELL_STATE_UNINITIALIZED</ref>,</highlight></codeline>
<codeline lineno="487" refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266adf8c97c3b6dacfbaf3ace4780cfe3dbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266adf8c97c3b6dacfbaf3ace4780cfe3dbd" kindref="member">SHELL_STATE_INITIALIZED</ref>,</highlight></codeline>
<codeline lineno="488" refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8a226ad5c1306dd8f491ad321d334b72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8a226ad5c1306dd8f491ad321d334b72" kindref="member">SHELL_STATE_ACTIVE</ref>,</highlight></codeline>
<codeline lineno="489" refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8d01930f8cbdeddda2bf47d0264c4a8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a8d01930f8cbdeddda2bf47d0264c4a8b" kindref="member">SHELL_STATE_PANIC_MODE_ACTIVE</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a6423704f7a619e1bfed063cd7455ebfe" kindref="member">SHELL_STATE_PANIC_MODE_INACTIVE</ref><sp/></highlight></codeline>
<codeline lineno="491" refid="group__shell__api_1ggaf2c6ff9ef31dc06086fd1141763e6266a6423704f7a619e1bfed063cd7455ebfe" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="group__shell__api_1gae77673d4c086f2f9312ceb7933745ee1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gae77673d4c086f2f9312ceb7933745ee1" kindref="member">shell_transport_evt</ref><sp/>{</highlight></codeline>
<codeline lineno="495" refid="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1aa43ab5965bc3f2c964f206277ab3f1bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1aa43ab5965bc3f2c964f206277ab3f1bb" kindref="member">SHELL_TRANSPORT_EVT_RX_RDY</ref>,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1a6c78a3534128fac6366d9e5dfda81dfb" kindref="member">SHELL_TRANSPORT_EVT_TX_RDY</ref></highlight></codeline>
<codeline lineno="497" refid="group__shell__api_1ggae77673d4c086f2f9312ceb7933745ee1a6c78a3534128fac6366d9e5dfda81dfb" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="group__shell__api_1ga265807c2d8eba7b9ea633968627e085d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__shell__api_1ga265807c2d8eba7b9ea633968627e085d" kindref="member">shell_transport_handler_t</ref>)(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gae77673d4c086f2f9312ceb7933745ee1" kindref="member">shell_transport_evt</ref><sp/>evt,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" kindref="member">shell_uninit_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" kindref="member">shell_bypass_cb_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="structshell__transport__api" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport__api" kindref="compound">shell_transport_api</ref><sp/>{</highlight></codeline>
<codeline lineno="532" refid="structshell__transport__api_1a59afba962312a077343b440448d67135" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structshell__transport__api_1a59afba962312a077343b440448d67135" kindref="member">init</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>*transport,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*config,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ga265807c2d8eba7b9ea633968627e085d" kindref="member">shell_transport_handler_t</ref><sp/>evt_handler,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="structshell__transport__api_1a94cc7843174a4aba668389a4b46928d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structshell__transport__api_1a94cc7843174a4aba668389a4b46928d3" kindref="member">uninit</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>*transport);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="structshell__transport__api_1a95535c7195088e68230ecb306f105713" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structshell__transport__api_1a95535c7195088e68230ecb306f105713" kindref="member">enable</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>*transport,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blocking_tx);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="structshell__transport__api_1a6bbf2905abcbf6ca564ecf3f07d95712" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structshell__transport__api_1a6bbf2905abcbf6ca564ecf3f07d95712" kindref="member">write</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>*transport,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*cnt);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="structshell__transport__api_1aae0e8ad92065dbff10691c28045d0c8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structshell__transport__api_1aae0e8ad92065dbff10691c28045d0c8f" kindref="member">read</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>*transport,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*cnt);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="594" refid="structshell__transport__api_1a3b447d16d7c30f994c582d67bde57ba8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structshell__transport__api_1a3b447d16d7c30f994c582d67bde57ba8" kindref="member">update</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>*transport);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598" refid="structshell__transport" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>{</highlight></codeline>
<codeline lineno="599" refid="structshell__transport_1ab4bee270415b445ded5a8ba6e8cb3a25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport__api" kindref="compound">shell_transport_api</ref><sp/>*<ref refid="structshell__transport_1ab4bee270415b445ded5a8ba6e8cb3a25" kindref="member">api</ref>;</highlight></codeline>
<codeline lineno="600" refid="structshell__transport_1a02f44bb376152452f5b5d20f33ccbdf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structshell__transport_1a02f44bb376152452f5b5d20f33ccbdf6" kindref="member">ctx</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="structshell__stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__stats" kindref="compound">shell_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="607" refid="structshell__stats_1a1ec10ba96a7805f10d1a021ff1dd3bf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="structshell__stats_1a1ec10ba96a7805f10d1a021ff1dd3bf2" kindref="member">log_lost_cnt</ref>;<sp/></highlight></codeline>
<codeline lineno="608"><highlight class="normal">};</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SHELL_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SHELL_STATS_DEFINE(_name)<sp/>static<sp/>struct<sp/>shell_stats<sp/>_name##_stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SHELL_STATS_PTR(_name)<sp/>(&amp;(_name##_stats))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SHELL_STATS_DEFINE(_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_SHELL_STATS_PTR(_name)<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SHELL_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="structshell__backend__config__flags" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__backend__config__flags" kindref="compound">shell_backend_config_flags</ref><sp/>{</highlight></codeline>
<codeline lineno="622" refid="structshell__backend__config__flags_1ab1df6f41078d4ec2a94f158e62bbfada" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__config__flags_1ab1df6f41078d4ec2a94f158e62bbfada" kindref="member">insert_mode</ref><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="623" refid="structshell__backend__config__flags_1a5745ea5cab202ee446f460b980c5c532" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__config__flags_1a5745ea5cab202ee446f460b980c5c532" kindref="member">echo</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="624" refid="structshell__backend__config__flags_1af794ac9c19b948ed733024a2db5b8bbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__config__flags_1af794ac9c19b948ed733024a2db5b8bbd" kindref="member">obscure</ref><sp/><sp/><sp/><sp/><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="625" refid="structshell__backend__config__flags_1a231bc4762cac1c07a6f866c5ecf3a024" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__config__flags_1a231bc4762cac1c07a6f866c5ecf3a024" kindref="member">mode_delete</ref><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="626" refid="structshell__backend__config__flags_1af810ff3fba00527cb0561a75b70fec09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__config__flags_1af810ff3fba00527cb0561a75b70fec09" kindref="member">use_colors</ref><sp/><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="627" refid="structshell__backend__config__flags_1a0d017df8e9d9609f2830829d8720b9cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__config__flags_1a0d017df8e9d9609f2830829d8720b9cf" kindref="member">use_vt100</ref><sp/><sp/><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="628"><highlight class="normal">};</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">BUILD_ASSERT((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell__backend__config__flags" kindref="compound">shell_backend_config_flags</ref>)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)),</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Structure<sp/>must<sp/>fit<sp/>in<sp/>4<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="group__shell__api_1ga7e522b107d4e8b687816a86f14b9a885" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_DEFAULT_BACKEND_CONFIG_FLAGS<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.insert_mode<sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.obscure<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mode_delete<sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.use_colors<sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.use_vt100<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor">};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646" refid="structshell__backend__ctx__flags" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__backend__ctx__flags" kindref="compound">shell_backend_ctx_flags</ref><sp/>{</highlight></codeline>
<codeline lineno="647" refid="structshell__backend__ctx__flags_1a7dc2cd17fb1dd9d538dbde3ad7bbe8e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__ctx__flags_1a7dc2cd17fb1dd9d538dbde3ad7bbe8e9" kindref="member">processing</ref><sp/><sp/><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="648" refid="structshell__backend__ctx__flags_1a662cf22a29856d07ec64b72db004582f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__ctx__flags_1a662cf22a29856d07ec64b72db004582f" kindref="member">tx_rdy</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:1;</highlight></codeline>
<codeline lineno="649" refid="structshell__backend__ctx__flags_1a85b0069c7b0df219cefec0f73cb313d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__ctx__flags_1a85b0069c7b0df219cefec0f73cb313d3" kindref="member">history_exit</ref><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="650" refid="structshell__backend__ctx__flags_1a7f597db455b0875c9ff11c4ce50cfd92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__ctx__flags_1a7f597db455b0875c9ff11c4ce50cfd92" kindref="member">last_nl</ref><sp/><sp/><sp/><sp/><sp/><sp/>:8;<sp/></highlight></codeline>
<codeline lineno="651" refid="structshell__backend__ctx__flags_1adfa22b07dc65e72e24be400d95da11c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__ctx__flags_1adfa22b07dc65e72e24be400d95da11c8" kindref="member">cmd_ctx</ref><sp/><sp/><sp/><sp/><sp/><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="652" refid="structshell__backend__ctx__flags_1a18b3c018f2da6a925f50266bda095483" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__ctx__flags_1a18b3c018f2da6a925f50266bda095483" kindref="member">print_noinit</ref><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="653" refid="structshell__backend__ctx__flags_1a2d6c2561aa6ed28a3978e3b70d079008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structshell__backend__ctx__flags_1a2d6c2561aa6ed28a3978e3b70d079008" kindref="member">sync_mode</ref><sp/><sp/><sp/><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="654"><highlight class="normal">};</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal">BUILD_ASSERT((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell__backend__ctx__flags" kindref="compound">shell_backend_ctx_flags</ref>)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>)),</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Structure<sp/>must<sp/>fit<sp/>in<sp/>4<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="unionshell__backend__cfg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionshell__backend__cfg" kindref="compound">shell_backend_cfg</ref><sp/>{</highlight></codeline>
<codeline lineno="663" refid="unionshell__backend__cfg_1a2e2aa4e52af6f6e6a827ea946e6681fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="unionshell__backend__cfg_1a2e2aa4e52af6f6e6a827ea946e6681fc" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="664" refid="unionshell__backend__cfg_1a513e4e2c352c62d13ed655049a7ee691" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__backend__config__flags" kindref="compound">shell_backend_config_flags</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">};</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="unionshell__backend__ctx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionshell__backend__ctx" kindref="compound">shell_backend_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="671" refid="unionshell__backend__ctx_1a8de68016e888b8f9b5371c8a7bed4fcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="unionshell__backend__ctx_1a8de68016e888b8f9b5371c8a7bed4fcb" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="672" refid="unionshell__backend__ctx_1a12e5e07c77eb1f82bac9db6cd2d31316" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__backend__ctx__flags" kindref="compound">shell_backend_ctx_flags</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="group__shell__api_1ga5cd015de5e7295483fa2cff7d54c2d21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga5cd015de5e7295483fa2cff7d54c2d21" kindref="member">shell_signal</ref><sp/>{</highlight></codeline>
<codeline lineno="676" refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a815c6760bfd5bba8813ea68964bf4713" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a815c6760bfd5bba8813ea68964bf4713" kindref="member">SHELL_SIGNAL_RXRDY</ref>,</highlight></codeline>
<codeline lineno="677" refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ab8fe52f7b4f43c98dae5188a1dc8547a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ab8fe52f7b4f43c98dae5188a1dc8547a" kindref="member">SHELL_SIGNAL_LOG_MSG</ref>,</highlight></codeline>
<codeline lineno="678" refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ad5c07b5872f785b0731c8aaed0f81c3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21ad5c07b5872f785b0731c8aaed0f81c3a" kindref="member">SHELL_SIGNAL_KILL</ref>,</highlight></codeline>
<codeline lineno="679" refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a7962ab077b49c816bb9337a9b1b343ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a7962ab077b49c816bb9337a9b1b343ed" kindref="member">SHELL_SIGNAL_TXDONE</ref>,<sp/></highlight><highlight class="comment">/*<sp/>TXDONE<sp/>must<sp/>be<sp/>last<sp/>one<sp/>before<sp/>SHELL_SIGNALS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a6dc083b04447ff6ccb4ce4af4c43645e" kindref="member">SHELL_SIGNALS</ref></highlight></codeline>
<codeline lineno="681" refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a6dc083b04447ff6ccb4ce4af4c43645e" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="686" refid="structshell__ctx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__ctx" kindref="compound">shell_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="687" refid="structshell__ctx_1a261d4754f4bf3764298e264ed6e87eff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structshell__ctx_1a261d4754f4bf3764298e264ed6e87eff" kindref="member">prompt</ref>;<sp/></highlight></codeline>
<codeline lineno="689" refid="structshell__ctx_1a7388fd2e850fcf37c4a421cda13661e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gaf2c6ff9ef31dc06086fd1141763e6266" kindref="member">shell_state</ref><sp/><ref refid="structshell__ctx_1a7388fd2e850fcf37c4a421cda13661e8" kindref="member">state</ref>;<sp/></highlight></codeline>
<codeline lineno="690" refid="structshell__ctx_1abc4135f23c4738fcf6a2c9d8f45d516b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga8773ed2570714ba4985108b1738d33a0" kindref="member">shell_receive_state</ref><sp/><ref refid="structshell__ctx_1abc4135f23c4738fcf6a2c9d8f45d516b" kindref="member">receive_state</ref>;</highlight></codeline>
<codeline lineno="693" refid="structshell__ctx_1a3df8f9a293b4c24d81a80af2d0e0c44e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref><sp/><ref refid="structshell__ctx_1a3df8f9a293b4c24d81a80af2d0e0c44e" kindref="member">active_cmd</ref>;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>New<sp/>root<sp/>command.<sp/>If<sp/>NULL<sp/>shell<sp/>uses<sp/>default<sp/>root<sp/>commands.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="structshell__ctx_1a0e9321e8954a7598cb6521f660480a88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__static__entry" kindref="compound">shell_static_entry</ref><sp/>*<ref refid="structshell__ctx_1a0e9321e8954a7598cb6521f660480a88" kindref="member">selected_cmd</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="699" refid="structshell__ctx_1a25b945fcaba216e039124aacec660600" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__vt100__ctx" kindref="compound">shell_vt100_ctx</ref><sp/><ref refid="structshell__ctx_1a25b945fcaba216e039124aacec660600" kindref="member">vt100_ctx</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="704" refid="structshell__ctx_1a0ec61f11544cb817bbd46ed4aa332123" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" kindref="member">shell_uninit_cb_t</ref><sp/><ref refid="structshell__ctx_1a0ec61f11544cb817bbd46ed4aa332123" kindref="member">uninit_cb</ref>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="structshell__ctx_1a8e02d1d9a521379ad4188b4678cc6071" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" kindref="member">shell_bypass_cb_t</ref><sp/><ref refid="structshell__ctx_1a8e02d1d9a521379ad4188b4678cc6071" kindref="member">bypass</ref>;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>CONFIG_SHELL_GETOPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">getopt_state<sp/>getopt;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="structshell__ctx_1a948d78719efe7f01b8edf151e1435af6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structshell__ctx_1a948d78719efe7f01b8edf151e1435af6" kindref="member">cmd_buff_len</ref>;<sp/></highlight></codeline>
<codeline lineno="715" refid="structshell__ctx_1a9a8f69e6876e4788ef3961dfb769e53f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structshell__ctx_1a9a8f69e6876e4788ef3961dfb769e53f" kindref="member">cmd_buff_pos</ref>;<sp/></highlight></codeline>
<codeline lineno="717" refid="structshell__ctx_1a5dfe5d3b2e27b67a7a78d5c3ad32ff1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structshell__ctx_1a5dfe5d3b2e27b67a7a78d5c3ad32ff1d" kindref="member">cmd_tmp_buff_len</ref>;<sp/></highlight></codeline>
<codeline lineno="720" refid="structshell__ctx_1a385014f2fba5cae182c3520ec934cce6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structshell__ctx_1a385014f2fba5cae182c3520ec934cce6" kindref="member">cmd_buff</ref>[<ref refid="shell_2shell_8h_1abb162a9a784f605dea4b02a0a6cc0c16" kindref="member">CONFIG_SHELL_CMD_BUFF_SIZE</ref>];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="723" refid="structshell__ctx_1a35085b30e92b913b16f02496c5ec6375" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structshell__ctx_1a35085b30e92b913b16f02496c5ec6375" kindref="member">temp_buff</ref>[<ref refid="shell_2shell_8h_1abb162a9a784f605dea4b02a0a6cc0c16" kindref="member">CONFIG_SHELL_CMD_BUFF_SIZE</ref>];</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="726" refid="structshell__ctx_1aba89a1995fe33838d508810e60c7ea79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structshell__ctx_1aba89a1995fe33838d508810e60c7ea79" kindref="member">printf_buff</ref>[<ref refid="shell_2shell_8h_1af54e892edba822e46ca70cb6eca48146" kindref="member">CONFIG_SHELL_PRINTF_BUFF_SIZE</ref>];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728" refid="structshell__ctx_1a5437653e57909910df742c80562c1c83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionshell__backend__cfg" kindref="compound">shell_backend_cfg</ref><sp/><ref refid="structshell__ctx_1a5437653e57909910df742c80562c1c83" kindref="member">cfg</ref>;</highlight></codeline>
<codeline lineno="729" refid="structshell__ctx_1ac9bed826ec7421065e6bc6e12ad213ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionshell__backend__ctx" kindref="compound">shell_backend_ctx</ref><sp/><ref refid="structshell__ctx_1ac9bed826ec7421065e6bc6e12ad213ce" kindref="member">ctx</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731" refid="structshell__ctx_1a6d96ff92952aebed16ebf288fe0a96db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref><sp/><ref refid="structshell__ctx_1a6d96ff92952aebed16ebf288fe0a96db" kindref="member">signals</ref>[<ref refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a6dc083b04447ff6ccb4ce4af4c43645e" kindref="member">SHELL_SIGNALS</ref>];</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="structshell__ctx_1abbbc94a651bfc56d5b0916e1516c3842" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__poll__event" kindref="compound">k_poll_event</ref><sp/><ref refid="structshell__ctx_1abbbc94a651bfc56d5b0916e1516c3842" kindref="member">events</ref>[<ref refid="group__shell__api_1gga5cd015de5e7295483fa2cff7d54c2d21a6dc083b04447ff6ccb4ce4af4c43645e" kindref="member">SHELL_SIGNALS</ref>];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738" refid="structshell__ctx_1a76cf861f17057cf080c54b67acb1a801" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/><ref refid="structshell__ctx_1a76cf861f17057cf080c54b67acb1a801" kindref="member">wr_mtx</ref>;</highlight></codeline>
<codeline lineno="739" refid="structshell__ctx_1a2cab9b799462a9f6eea898f7076f204f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__thread" kindref="compound">k_tid_t</ref><sp/><ref refid="structshell__ctx_1a2cab9b799462a9f6eea898f7076f204f" kindref="member">tid</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">};</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlog__backend__api" kindref="compound">log_backend_api</ref><sp/><ref refid="group__shell__api_1gaddf27615ed72440ecb63aa1d84962c82" kindref="member">log_backend_shell_api</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="group__shell__api_1ga56bf30741f9ec7a6d94e5c18c2858948" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga56bf30741f9ec7a6d94e5c18c2858948" kindref="member">shell_flag</ref><sp/>{</highlight></codeline>
<codeline lineno="748" refid="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948a343ee559d6259111dbab529a283b23ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948a343ee559d6259111dbab529a283b23ab" kindref="member">SHELL_FLAG_CRLF_DEFAULT</ref><sp/>=<sp/>(1&lt;&lt;0),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>map<sp/>CR<sp/>or<sp/>LF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948ab6fec7b615b6de79e1d00d4117615446" kindref="member">SHELL_FLAG_OLF_CRLF</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(1&lt;&lt;1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Map<sp/>LF<sp/>to<sp/>CRLF<sp/>on<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750" refid="group__shell__api_1gga56bf30741f9ec7a6d94e5c18c2858948ab6fec7b615b6de79e1d00d4117615446" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="755" refid="structshell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell" kindref="compound">shell</ref><sp/>{</highlight></codeline>
<codeline lineno="756" refid="structshell_1a97c365dfd7202eb091b1ad016014729b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structshell_1a97c365dfd7202eb091b1ad016014729b" kindref="member">default_prompt</ref>;<sp/></highlight></codeline>
<codeline lineno="758" refid="structshell_1ac6033c3c2e44c2c4e29791f1f61c566c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__transport" kindref="compound">shell_transport</ref><sp/>*<ref refid="structshell_1ac6033c3c2e44c2c4e29791f1f61c566c" kindref="member">iface</ref>;<sp/></highlight></codeline>
<codeline lineno="759" refid="structshell_1ac14fde7e5f28615b9eec39a2eb8aa8d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__ctx" kindref="compound">shell_ctx</ref><sp/>*<ref refid="structshell_1ac14fde7e5f28615b9eec39a2eb8aa8d4" kindref="member">ctx</ref>;<sp/></highlight></codeline>
<codeline lineno="761" refid="structshell_1a42d2588d15f601baf3f963684d312c86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__history" kindref="compound">shell_history</ref><sp/>*<ref refid="structshell_1a42d2588d15f601baf3f963684d312c86" kindref="member">history</ref>;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763" refid="structshell_1a3a4f58c6151b3cbd1293d36b92c2f470" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga56bf30741f9ec7a6d94e5c18c2858948" kindref="member">shell_flag</ref><sp/><ref refid="structshell_1a3a4f58c6151b3cbd1293d36b92c2f470" kindref="member">shell_flag</ref>;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="structshell_1aba181907e38def0985a4c6ffd459d935" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref><sp/>*<ref refid="structshell_1aba181907e38def0985a4c6ffd459d935" kindref="member">fprintf_ctx</ref>;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="structshell_1a642e7d8fa92464147329247e1325ad2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__stats" kindref="compound">shell_stats</ref><sp/>*<ref refid="structshell_1a642e7d8fa92464147329247e1325ad2b" kindref="member">stats</ref>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="structshell_1a3daffdb9d38ee8132a2644054126680d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshell__log__backend" kindref="compound">shell_log_backend</ref><sp/>*<ref refid="structshell_1a3daffdb9d38ee8132a2644054126680d" kindref="member">log_backend</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="structshell_1a30ad7480b8be019b3b3ed63bf05ad790" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structshell_1a30ad7480b8be019b3b3ed63bf05ad790" kindref="member">LOG_INSTANCE_PTR_DECLARE</ref>(log);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773" refid="structshell_1a026bf3bfd09d1b37de537441f5c595cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structshell_1a026bf3bfd09d1b37de537441f5c595cd" kindref="member">thread_name</ref>;</highlight></codeline>
<codeline lineno="774" refid="structshell_1a01b4739356f2428527f322662a3bf0a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="structshell_1a01b4739356f2428527f322662a3bf0a7" kindref="member">thread</ref>;</highlight></codeline>
<codeline lineno="775" refid="structshell_1ad62262b6b4fa8e56a0e8849f09603b3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/>*<ref refid="structshell_1ad62262b6b4fa8e56a0e8849f09603b3a" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="776"><highlight class="normal">};</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_shell_print_stream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_len);</highlight></codeline>
<codeline lineno="793" refid="group__shell__api_1ga158405143b49e4888cb135fec83ad22c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_DEFINE(_name,<sp/>_prompt,<sp/>_transport_iface,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_log_queue_size,<sp/>_log_timeout,<sp/>_shell_flag)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>shell<sp/>_name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>shell_ctx<sp/>UTIL_CAT(_name,<sp/>_ctx);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>uint8_t<sp/>_name##_out_buffer[CONFIG_SHELL_PRINTF_BUFF_SIZE];<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_SHELL_LOG_BACKEND_DEFINE(_name,<sp/>_name##_out_buffer,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONFIG_SHELL_PRINTF_BUFF_SIZE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_log_queue_size,<sp/>_log_timeout);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_SHELL_HISTORY_DEFINE(_name##_history,<sp/>CONFIG_SHELL_HISTORY_BUFFER);<sp/>\</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_SHELL_FPRINTF_DEFINE(_name##_fprintf,<sp/>&amp;_name,<sp/>_name##_out_buffer,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONFIG_SHELL_PRINTF_BUFF_SIZE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true,<sp/>z_shell_print_stream);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_INSTANCE_REGISTER(shell,<sp/>_name,<sp/>CONFIG_SHELL_LOG_LEVEL);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_SHELL_STATS_DEFINE(_name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>K_KERNEL_STACK_DEFINE(_name##_stack,<sp/>CONFIG_SHELL_STACK_SIZE);<sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>k_thread<sp/>_name##_thread;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>STRUCT_SECTION_ITERABLE(shell,<sp/>_name)<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.default_prompt<sp/>=<sp/>_prompt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.iface<sp/>=<sp/>_transport_iface,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ctx<sp/>=<sp/>&amp;UTIL_CAT(_name,<sp/>_ctx),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.history<sp/>=<sp/>IS_ENABLED(CONFIG_SHELL_HISTORY)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_name##_history<sp/>:<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.shell_flag<sp/>=<sp/>_shell_flag,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.fprintf_ctx<sp/>=<sp/>&amp;_name##_fprintf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stats<sp/>=<sp/>Z_SHELL_STATS_PTR(_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.log_backend<sp/>=<sp/>Z_SHELL_LOG_BACKEND_PTR(_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_INSTANCE_PTR_INIT(log,<sp/>shell,<sp/>_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.thread_name<sp/>=<sp/>STRINGIFY(_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.thread<sp/>=<sp/>&amp;_name##_thread,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stack<sp/>=<sp/>_name##_stack<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="group__shell__api_1ga3dc80793e145c56bb07754fc2f292ec5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga3dc80793e145c56bb07754fc2f292ec5" kindref="member">shell_init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*transport_config,</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell__backend__config__flags" kindref="compound">shell_backend_config_flags</ref><sp/>cfg_flags,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlog__backend" kindref="compound">log_backend</ref>,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>init_log_level);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="848" refid="group__shell__api_1ga240cb01650dee2b555056c08c4242d37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga240cb01650dee2b555056c08c4242d37" kindref="member">shell_uninit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/><ref refid="group__shell__api_1gaef13cdb9a0789594395d8b0744674eb1" kindref="member">shell_uninit_cb_t</ref><sp/>cb);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="857" refid="group__shell__api_1gac00d3479289798d38fbf93cf775c4736" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gac00d3479289798d38fbf93cf775c4736" kindref="member">shell_start</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="group__shell__api_1gae432203ca2adc2df0f06e6f43fd78b5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gae432203ca2adc2df0f06e6f43fd78b5c" kindref="member">shell_stop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="group__shell__api_1ga4c3a7db0c2bdbf36bbf72302a04bb44d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_NORMAL<sp/><sp/><sp/><sp/>SHELL_VT100_COLOR_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="876" refid="group__shell__api_1gaac0ea96fbb5885432dca93174c9ad4e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_INFO<sp/><sp/><sp/><sp/><sp/><sp/>SHELL_VT100_COLOR_GREEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="881" refid="group__shell__api_1gacc7c6e7b1fc65cc350353cc166da528b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_OPTION<sp/><sp/><sp/><sp/>SHELL_VT100_COLOR_CYAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="886" refid="group__shell__api_1ga118dd6829e092423a85e2b6de07f8dd3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_WARNING<sp/><sp/><sp/>SHELL_VT100_COLOR_YELLOW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="group__shell__api_1ga7664f5e184e9b41ac92e033f7b8d885d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_ERROR<sp/><sp/><sp/><sp/><sp/>SHELL_VT100_COLOR_RED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="904" refid="group__shell__api_1ga48aa8e7aff70900b1f0ea3d4f173773d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__printf_like(3,<sp/>4)<sp/><ref refid="structshell__fprintf" kindref="compound">shell_fprintf</ref>(const<sp/>struct<sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enum<sp/><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2" kindref="member">shell_vt100_color</ref><sp/>color,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="group__shell__api_1gab98c82bbebbff48c173f347d66078bb2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gab98c82bbebbff48c173f347d66078bb2" kindref="member">shell_vfprintf</ref>(const<sp/>struct<sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/>enum<sp/><ref refid="shell__types_8h_1a6dcf569be711db32286fb1ef2dcf36d2" kindref="member">shell_vt100_color</ref><sp/>color,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>args);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="group__shell__api_1gac588a2c9af247e46cb0065fee36a14b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gac588a2c9af247e46cb0065fee36a14b9" kindref="member">shell_hexdump_line</ref>(const<sp/>struct<sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="948" refid="group__shell__api_1ga838b534ffc9d0bda75c811d591832656" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga838b534ffc9d0bda75c811d591832656" kindref="member">shell_hexdump</ref>(const<sp/>struct<sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/>const<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="959" refid="group__shell__api_1ga9382959c41fe6850c2daa51306b3c5fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shell_info(_sh,<sp/>_ft,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="960"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shell_fprintf(_sh,<sp/>SHELL_INFO,<sp/>_ft<sp/>&quot;\n&quot;</highlight><highlight class="normal">,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="971" refid="group__shell__api_1ga3126019b2100d1ccb2d4dc5efb7d8228" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shell_print(_sh,<sp/>_ft,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="972"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shell_fprintf(_sh,<sp/>SHELL_NORMAL,<sp/>_ft<sp/>&quot;\n&quot;</highlight><highlight class="normal">,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="983" refid="group__shell__api_1ga3d886cfd7b4340b2e71a92bd7c4534d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shell_warn(_sh,<sp/>_ft,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shell_fprintf(_sh,<sp/>SHELL_WARNING,<sp/>_ft<sp/>&quot;\n&quot;</highlight><highlight class="normal">,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="group__shell__api_1ga408141c02209a9549cb9063f24ef3731" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>shell_error(_sh,<sp/>_ft,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="996"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shell_fprintf(_sh,<sp/>SHELL_ERROR,<sp/>_ft<sp/>&quot;\n&quot;</highlight><highlight class="normal">,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004" refid="group__shell__api_1gafcb014602bbe6b6cd2ab8e2e92659cf7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gafcb014602bbe6b6cd2ab8e2e92659cf7" kindref="member">shell_process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015" refid="group__shell__api_1ga0c0989b142807696c59979445f38ba32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga0c0989b142807696c59979445f38ba32" kindref="member">shell_prompt_change</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025" refid="group__shell__api_1gaae64c1946f852b18e4745b6fe83a979a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gaae64c1946f852b18e4745b6fe83a979a" kindref="member">shell_help</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@brief<sp/>Command&apos;s<sp/>help<sp/>has<sp/>been<sp/>printed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028" refid="group__shell__api_1ga3be3ecccd6ce1954883c5959c39c7927" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHELL_CMD_HELP_PRINTED<sp/><sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="group__shell__api_1ga20d72c016e6735e9dac5909628e4791d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga20d72c016e6735e9dac5909628e4791d" kindref="member">shell_execute_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060" refid="group__shell__api_1ga768c606f2d50f24e9b607ba0a341686d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga768c606f2d50f24e9b607ba0a341686d" kindref="member">shell_set_root_cmd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__ft8xx__reference__api_1gacde1ca3945cbe6c828f65051c5c3a615" kindref="member">cmd</ref>);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070" refid="group__shell__api_1ga2d05dd8a3cbea0eb0df8b422a7fb6a66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga2d05dd8a3cbea0eb0df8b422a7fb6a66" kindref="member">shell_set_bypass</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/><ref refid="group__shell__api_1ga8a8b53f567cc5b00997224ad2fd66034" kindref="member">shell_bypass_cb_t</ref><sp/>bypass);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082" refid="group__shell__api_1gaa1c092b0afb5119f8e3959f18fcf307a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gaa1c092b0afb5119f8e3959f18fcf307a" kindref="member">shell_insert_mode_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095" refid="group__shell__api_1ga2dd3529a39b79d4f3f64b52f05e164c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga2dd3529a39b79d4f3f64b52f05e164c3" kindref="member">shell_use_colors_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107" refid="group__shell__api_1gae56226448f757b4aa7b1748d482c23c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gae56226448f757b4aa7b1748d482c23c1" kindref="member">shell_echo_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120" refid="group__shell__api_1gacb219bcc8e526065c27a42c08a6e41e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1gacb219bcc8e526065c27a42c08a6e41e2" kindref="member">shell_obscure_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>obscure);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133" refid="group__shell__api_1ga622ef46b3ca2b494c732744e3c1adf3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shell__api_1ga622ef46b3ca2b494c732744e3c1adf3a" kindref="member">shell_mode_delete_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structshell" kindref="compound">shell</ref><sp/>*<ref refid="structshell" kindref="compound">shell</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SHELL_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/shell/shell.h"/>
  </compounddef>
</doxygen>
