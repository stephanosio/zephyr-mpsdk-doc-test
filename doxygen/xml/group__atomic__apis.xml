<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__atomic__apis" kind="group">
    <compoundname>atomic_apis</compoundname>
    <title>Atomic Services APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__atomic__apis_1ga190ddc108f45e7649689753c08658eae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool atomic_test_bit</definition>
        <argsstring>(const atomic_t *target, int bit)</argsstring>
        <name>atomic_test_bit</name>
        <param>
          <type>const <ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Atomically test a bit. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine tests whether bit number <emphasis>bit</emphasis> of <emphasis>target</emphasis> is set or not. The target may be a single atomic variable or an array of them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable or array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit number (starting from 0).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the bit was set, false if it wasn&apos;t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="128" column="20" bodyfile="include/sys/atomic.h" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga53159437721084da0ec8ee70ec212472" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool atomic_test_and_clear_bit</definition>
        <argsstring>(atomic_t *target, int bit)</argsstring>
        <name>atomic_test_and_clear_bit</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Atomically test and clear a bit. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically clear bit number <emphasis>bit</emphasis> of <emphasis>target</emphasis> and return its old value. The target may be a single atomic variable or an array of them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable or array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit number (starting from 0).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the bit was set, false if it wasn&apos;t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="146" column="20" bodyfile="include/sys/atomic.h" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga7ff45e13aa5f8be5d7a550e49f5c720b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool atomic_test_and_set_bit</definition>
        <argsstring>(atomic_t *target, int bit)</argsstring>
        <name>atomic_test_and_set_bit</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Atomically set a bit. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically set bit number <emphasis>bit</emphasis> of <emphasis>target</emphasis> and return its old value. The target may be a single atomic variable or an array of them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable or array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit number (starting from 0).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the bit was set, false if it wasn&apos;t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="167" column="20" bodyfile="include/sys/atomic.h" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga1c1693d524c49d11fd32b323a39d718e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void atomic_clear_bit</definition>
        <argsstring>(atomic_t *target, int bit)</argsstring>
        <name>atomic_clear_bit</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Atomically clear a bit. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically clear bit number <emphasis>bit</emphasis> of <emphasis>target</emphasis>. The target may be a single atomic variable or an array of them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable or array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit number (starting from 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="186" column="20" bodyfile="include/sys/atomic.h" bodystart="186" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga17a3961ba7610ad6e595e602f70344a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void atomic_set_bit</definition>
        <argsstring>(atomic_t *target, int bit)</argsstring>
        <name>atomic_set_bit</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Atomically set a bit. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically set bit number <emphasis>bit</emphasis> of <emphasis>target</emphasis>. The target may be a single atomic variable or an array of them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable or array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit number (starting from 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="202" column="20" bodyfile="include/sys/atomic.h" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1gad749f16ca51ffc26e7303988de1b8dbf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void atomic_set_bit_to</definition>
        <argsstring>(atomic_t *target, int bit, bool val)</argsstring>
        <name>atomic_set_bit_to</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Atomically set a bit to a given value. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically set bit number <emphasis>bit</emphasis> of <emphasis>target</emphasis> to value <emphasis>val</emphasis>. The target may be a single atomic variable or an array of them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable or array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit number (starting from 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>true for 1, false for 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="219" column="20" bodyfile="include/sys/atomic.h" bodystart="219" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga6a4a6dea8c56d6a78bc57d87a1f79450" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool atomic_cas</definition>
        <argsstring>(atomic_t *target, atomic_val_t old_value, atomic_val_t new_value)</argsstring>
        <name>atomic_cas</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>old_value</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
<para>Atomic compare-and-set. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic compare-and-set on <emphasis>target</emphasis>. If the current value of <emphasis>target</emphasis> equals <emphasis>old_value</emphasis>, <emphasis>target</emphasis> is set to <emphasis>new_value</emphasis>. If the current value of <emphasis>target</emphasis> does not equal <emphasis>old_value</emphasis>, <emphasis>target</emphasis> is left unchanged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Original value to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to store. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <emphasis>new_value</emphasis> is written, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="37" column="20" bodyfile="include/sys/atomic_builtin.h" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga1ee94308793379944e8e28371e1d135b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool atomic_ptr_cas</definition>
        <argsstring>(atomic_ptr_t *target, atomic_ptr_val_t old_value, atomic_ptr_val_t new_value)</argsstring>
        <name>atomic_ptr_cas</name>
        <param>
          <type><ref refid="atomic_8h_1acad6866fa4c844026cd9f8c3fb60ecd7" kindref="member">atomic_ptr_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref></type>
          <declname>old_value</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref></type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
<para>Atomic compare-and-set with pointer values. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic compare-and-set on <emphasis>target</emphasis>. If the current value of <emphasis>target</emphasis> equals <emphasis>old_value</emphasis>, <emphasis>target</emphasis> is set to <emphasis>new_value</emphasis>. If the current value of <emphasis>target</emphasis> does not equal <emphasis>old_value</emphasis>, <emphasis>target</emphasis> is left unchanged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Original value to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to store. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <emphasis>new_value</emphasis> is written, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="58" column="20" bodyfile="include/sys/atomic_builtin.h" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1gaed809d451c08b151dd8e20db3f12926a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_add</definition>
        <argsstring>(atomic_t *target, atomic_val_t value)</argsstring>
        <name>atomic_add</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic addition. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic addition on <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="77" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga1283fcb168cc85f65dfcdf973bf47cbb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_sub</definition>
        <argsstring>(atomic_t *target, atomic_val_t value)</argsstring>
        <name>atomic_sub</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic subtraction on <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to subtract.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="93" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga66487deb6817076501dd9160537fc06a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_inc</definition>
        <argsstring>(atomic_t *target)</argsstring>
        <name>atomic_inc</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Atomic increment. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic increment by 1 on <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="108" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga0adecd95c4d47987c404a31e87c1d5c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_dec</definition>
        <argsstring>(atomic_t *target)</argsstring>
        <name>atomic_dec</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Atomic decrement. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic decrement by 1 on <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="123" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1gadfe62ad2c8d64b0545b9e31f936bb79b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_get</definition>
        <argsstring>(const atomic_t *target)</argsstring>
        <name>atomic_get</name>
        <param>
          <type>const <ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Atomic get. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic read on <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="138" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga8efb153bce3bee1616852bda40d12ce5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref></type>
        <definition>static atomic_ptr_val_t atomic_ptr_get</definition>
        <argsstring>(const atomic_ptr_t *target)</argsstring>
        <name>atomic_ptr_get</name>
        <param>
          <type>const <ref refid="atomic_8h_1acad6866fa4c844026cd9f8c3fb60ecd7" kindref="member">atomic_ptr_t</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Atomic get a pointer value. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine performs an atomic read on <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of pointer variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="153" column="32" bodyfile="include/sys/atomic_builtin.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga51f73cb439192f354f36b19018d88a13" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_set</definition>
        <argsstring>(atomic_t *target, atomic_val_t value)</argsstring>
        <name>atomic_set</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic get-and-set. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to <emphasis>value</emphasis> and returns the previous value of <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write to <emphasis>target</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="170" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="170" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1gaa4e97fffda847d0d53b53d79819359a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref></type>
        <definition>static atomic_ptr_val_t atomic_ptr_set</definition>
        <argsstring>(atomic_ptr_t *target, atomic_ptr_val_t value)</argsstring>
        <name>atomic_ptr_set</name>
        <param>
          <type><ref refid="atomic_8h_1acad6866fa4c844026cd9f8c3fb60ecd7" kindref="member">atomic_ptr_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic get-and-set for pointer values. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to <emphasis>value</emphasis> and returns the previous value of <emphasis>target</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write to <emphasis>target</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="191" column="32" bodyfile="include/sys/atomic_builtin.h" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga45ccf5a7d636206f0673139ac393946f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_clear</definition>
        <argsstring>(atomic_t *target)</argsstring>
        <name>atomic_clear</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Atomic clear. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to zero and returns its previous value. (Hence, it is equivalent to atomic_set(target, 0).)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="207" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga8b511a7b5bccc7bc6b6e13526f87c0f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a374deb49b6dab1420a835b01433eb2f4" kindref="member">atomic_ptr_val_t</ref></type>
        <definition>static atomic_ptr_val_t atomic_ptr_clear</definition>
        <argsstring>(atomic_ptr_t *target)</argsstring>
        <name>atomic_ptr_clear</name>
        <param>
          <type><ref refid="atomic_8h_1acad6866fa4c844026cd9f8c3fb60ecd7" kindref="member">atomic_ptr_t</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Atomic clear of a pointer value. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to zero and returns its previous value. (Hence, it is equivalent to atomic_set(target, 0).)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="223" column="32" bodyfile="include/sys/atomic_builtin.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1gac96691d8703907941e81849b5aea42b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_or</definition>
        <argsstring>(atomic_t *target, atomic_val_t value)</argsstring>
        <name>atomic_or</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic bitwise inclusive OR. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to the bitwise inclusive OR of <emphasis>target</emphasis> and <emphasis>value</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to OR.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="240" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1ga189eb9d39c3945194e64cdc55ae98deb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_xor</definition>
        <argsstring>(atomic_t *target, atomic_val_t value)</argsstring>
        <name>atomic_xor</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic bitwise exclusive OR (XOR). </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to the bitwise exclusive OR (XOR) of <emphasis>target</emphasis> and <emphasis>value</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to XOR</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="257" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1gace9913fc4e103b5a1f27d29e8c12c41c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_and</definition>
        <argsstring>(atomic_t *target, atomic_val_t value)</argsstring>
        <name>atomic_and</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic bitwise AND. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to the bitwise AND of <emphasis>target</emphasis> and <emphasis>value</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to AND.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="274" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="group__atomic__apis_1gaa04dbd054869e89ef234eb35be41798a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
        <definition>static atomic_val_t atomic_nand</definition>
        <argsstring>(atomic_t *target, atomic_val_t value)</argsstring>
        <name>atomic_nand</name>
        <param>
          <type><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="atomic_8h_1a2df48927d9883550372b6e209b1997b1" kindref="member">atomic_val_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic bitwise NAND. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine atomically sets <emphasis>target</emphasis> to the bitwise NAND of <emphasis>target</emphasis> and <emphasis>value</emphasis>. (This operation is equivalent to target = ~(target &amp; value).)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of atomic variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to NAND.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value of <emphasis>target</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic_builtin.h" line="291" column="28" bodyfile="include/sys/atomic_builtin.h" bodystart="291" bodyend="294"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__atomic__apis_1gaadfbba86627ee7eeb07e04f712550f73" prot="public" static="no">
        <name>ATOMIC_INIT</name>
        <param><defname>i</defname></param>
        <initializer>(i)</initializer>
        <briefdescription>
<para>Initialize an atomic variable. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro can be used to initialize an atomic variable. For example, <programlisting><codeline><highlight class="normal">atomic_t<sp/>my_var<sp/>=<sp/>ATOMIC_INIT(75);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to assign to atomic variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="62" column="9" bodyfile="include/sys/atomic.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__atomic__apis_1ga7366802f7b11d3c5f9487f4fea9fc4d7" prot="public" static="no">
        <name>ATOMIC_PTR_INIT</name>
        <param><defname>p</defname></param>
        <initializer>(<ref refid="kobject_8c_1a5bf2789125fcfa98cff775cb82fbd3c9" kindref="member">p</ref>)</initializer>
        <briefdescription>
<para>Initialize an atomic pointer variable. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro can be used to initialize an atomic pointer variable. For example, <programlisting><codeline><highlight class="normal">atomic_ptr_t<sp/>my_ptr<sp/>=<sp/>ATOMIC_PTR_INIT(&amp;data);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer value to assign to atomic pointer variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="73" column="9" bodyfile="include/sys/atomic.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__atomic__apis_1gafac28874aaad3bcec72c693186e988cb" prot="public" static="no">
        <name>ATOMIC_BITMAP_SIZE</name>
        <param><defname>num_bits</defname></param>
        <initializer>(1 + ((num_bits) - 1) / ATOMIC_BITS)</initializer>
        <briefdescription>
<para>This macro computes the number of atomic variables necessary to represent a bitmap with <emphasis>num_bits</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="93" column="9" bodyfile="include/sys/atomic.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__atomic__apis_1ga249c575db9764486197709b327f7370e" prot="public" static="no">
        <name>ATOMIC_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>num_bits</defname></param>
        <initializer>	<ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref> name[<ref refid="group__atomic__apis_1gafac28874aaad3bcec72c693186e988cb" kindref="member">ATOMIC_BITMAP_SIZE</ref>(num_bits)]</initializer>
        <briefdescription>
<para>Define an array of atomic variables. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines an array of atomic variables containing at least <emphasis>num_bits</emphasis> bits.</para>
<para><simplesect kind="note"><para>If used from file scope, the bits of the array are initialized to zero; if used from within a function, the bits are left uninitialized. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of array of atomic variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/atomic.h" line="114" column="9" bodyfile="include/sys/atomic.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
