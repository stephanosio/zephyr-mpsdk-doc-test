<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__settings" kind="group">
    <compoundname>settings</compoundname>
    <title>Settings</title>
    <innerclass refid="structsettings__handler" prot="public">settings_handler</innerclass>
    <innerclass refid="structsettings__handler__static" prot="public">settings_handler_static</innerclass>
    <innergroup refid="group__settings__backend">Settings backend interface</innergroup>
    <innergroup refid="group__settings__name__proc">Settings name processing</innergroup>
    <innergroup refid="group__settings__rt">Settings subsystem runtime</innergroup>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__settings_1ga51cdac276c1fb8cd27fc3eec42749a04" prot="public" static="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref>(*</type>
        <definition>typedef ssize_t(* settings_read_cb) (void *cb_arg, void *data, size_t len)</definition>
        <argsstring>)(void *cb_arg, void *data, size_t len)</argsstring>
        <name>settings_read_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function used to read the data from the settings storage in h_set handler implementations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for the read function. Appropriate cb_arg is transferred to h_set handler implementation by the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>positive: Number of bytes read, 0: key-value pair is deleted. On error returns -ERRNO code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="57" column="9" bodyfile="include/settings/settings.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* settings_load_direct_cb) (const char *key, size_t len, settings_read_cb read_cb, void *cb_arg, void *param)</definition>
        <argsstring>)(const char *key, size_t len, settings_read_cb read_cb, void *cb_arg, void *param)</argsstring>
        <name>settings_load_direct_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function used for direct loading. Used by <ref refid="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" kindref="member">settings_load_subtree_direct</ref> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>the name with skipped part that was used as name in handler registration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the data found in the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">read_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>function provided to read the data from the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for the read function provided by the backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">param</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter given to the <ref refid="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" kindref="member">settings_load_subtree_direct</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>key[in] the name with skipped part that was used as name in handler registration</para>
</listitem><listitem><para>len[in] the size of the data found in the backend.</para>
</listitem><listitem><para>read_cb[in] function provided to read the data from the backend.</para>
</listitem><listitem><para>cb_arg[in] arguments for the read function provided by the backend.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>When nonzero value is returned, further subtree searching is stopped. Use with care as some settings backends would iterate through old values, and the current value is returned last. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="274" column="9" bodyfile="include/settings/settings.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__settings_1gaf81fad8575840f73a739d16d79613f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_subsys_init</definition>
        <argsstring>(void)</argsstring>
        <name>settings_subsys_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialization of settings and backend</para>
<para>Can be called at application startup. In case the backend is a FS Remember to call it after the FS was mounted. For FCB backend it can be called without such a restriction.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="220" column="5" declfile="include/settings/settings.h" declline="220" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1gab2043a6d799202e177cc3dfa0cbfa531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_register</definition>
        <argsstring>(struct settings_handler *cf)</argsstring>
        <name>settings_register</name>
        <param>
          <type>struct <ref refid="structsettings__handler" kindref="compound">settings_handler</ref> *</type>
          <declname>cf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a handler for settings items stored in RAM.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cf</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure containing registration info.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="229" column="5" declfile="include/settings/settings.h" declline="229" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga89c6d618df81f197cc5c1a2018b00648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_load</definition>
        <argsstring>(void)</argsstring>
        <name>settings_load</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load serialized items from registered persistence sources. Handlers for serialized item subtrees registered earlier will be called for encountered values.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="238" column="5" declfile="include/settings/settings.h" declline="238" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1gab80e8a21c80243359b652386f7ce2424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_load_subtree</definition>
        <argsstring>(const char *subtree)</argsstring>
        <name>settings_load_subtree</name>
        <param>
          <type>const char *</type>
          <declname>subtree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load limited set of serialized items from registered persistence sources. Handlers for serialized item subtrees registered earlier will be called for encountered values that belong to the subtree.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">subtree</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the subtree to be loaded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="248" column="5" declfile="include/settings/settings.h" declline="248" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga1dfe42f40a7d63bbdb81aed864d0ff12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_load_subtree_direct</definition>
        <argsstring>(const char *subtree, settings_load_direct_cb cb, void *param)</argsstring>
        <name>settings_load_subtree_direct</name>
        <param>
          <type>const char *</type>
          <declname>subtree</declname>
        </param>
        <param>
          <type><ref refid="group__settings_1ga767bf6c2709b1c58afcf4d1c5ef0d535" kindref="member">settings_load_direct_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load limited set of serialized items using given callback.</para>
<para>This function bypasses the normal data workflow in settings module. All the settings values that are found are passed to the given callback.</para>
<para><simplesect kind="note"><para>This function does not call commit function. It works as a blocking function, so it is up to the user to call any kind of commit function when this operation ends.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">subtree</parametername>
</parameternamelist>
<parameterdescription>
<para>subtree name of the subtree to be loaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">param</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter to be passed when callback function is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="298" column="5" declfile="include/settings/settings.h" declline="298" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga789410aa059398d6c8a7851ea6945b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_save</definition>
        <argsstring>(void)</argsstring>
        <name>settings_save</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save currently running serialized items. All serialized items which are different from currently persisted values will be saved.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="309" column="5" declfile="include/settings/settings.h" declline="309" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1gaf22356f0dd01d4cf43a6297fafa86e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_save_one</definition>
        <argsstring>(const char *name, const void *value, size_t val_len)</argsstring>
        <name>settings_save_one</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>val_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a single serialized value to persisted storage (if it has changed value).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name/key of the settings item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the value of the settings item. This value will be transferred to the <ref refid="structsettings__handler_1a30207125407f57a0f117ecaee5a2054a" kindref="member">settings_handler::h_export</ref> handler implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="322" column="5" declfile="include/settings/settings.h" declline="322" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga070b6ad31bca0bee71ec1f1a4d67618d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_delete</definition>
        <argsstring>(const char *name)</argsstring>
        <name>settings_delete</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a single serialized in persisted storage.</para>
<para>Deleting an existing key-value pair in the settings mean to set its value to NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name/key of the settings item.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="334" column="5" declfile="include/settings/settings.h" declline="334" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga623c60b89dda3145f9334343748d5954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_commit</definition>
        <argsstring>(void)</argsstring>
        <name>settings_commit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call commit for all settings handler. This should apply all settings which has been set, but not applied yet.</para>
<para><simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="342" column="5" declfile="include/settings/settings.h" declline="342" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__settings_1ga11523bc43121d78e0ac8ee1443559e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int settings_commit_subtree</definition>
        <argsstring>(const char *subtree)</argsstring>
        <name>settings_commit_subtree</name>
        <param>
          <type>const char *</type>
          <declname>subtree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call commit for settings handler that belong to subtree. This should apply all settings which has been set, but not applied yet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">subtree</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the subtree to be committed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="352" column="5" declfile="include/settings/settings.h" declline="352" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__settings_1ga2afa32b032e88a188c5263156d9e73e1" prot="public" static="no">
        <name>SETTINGS_MAX_DIR_DEPTH</name>
        <initializer>8	/* max depth of settings tree */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="33" column="9" bodyfile="include/settings/settings.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1gad96357290d7289dd1d7917abd575c4f7" prot="public" static="no">
        <name>SETTINGS_MAX_NAME_LEN</name>
        <initializer>(8 * <ref refid="group__settings_1ga2afa32b032e88a188c5263156d9e73e1" kindref="member">SETTINGS_MAX_DIR_DEPTH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="34" column="9" bodyfile="include/settings/settings.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1gaa9705c71c2d7cfdf3beab49d6b510769" prot="public" static="no">
        <name>SETTINGS_MAX_VAL_LEN</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="35" column="9" bodyfile="include/settings/settings.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1gab66e3bb2f0f5f5e3a20c6702df6a0694" prot="public" static="no">
        <name>SETTINGS_NAME_SEPARATOR</name>
        <initializer>&apos;/&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="36" column="9" bodyfile="include/settings/settings.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1ga41fb7b74ecb502093d4aa5cd6adb4093" prot="public" static="no">
        <name>SETTINGS_NAME_END</name>
        <initializer>&apos;=&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="37" column="9" bodyfile="include/settings/settings.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1ga9f10069ed74c368aef366d659d3a917d" prot="public" static="no">
        <name>SETTINGS_EXTRA_LEN</name>
        <initializer>((<ref refid="group__settings_1ga2afa32b032e88a188c5263156d9e73e1" kindref="member">SETTINGS_MAX_DIR_DEPTH</ref> - 1) + 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="42" column="9" bodyfile="include/settings/settings.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__settings_1ga2098bcfc32c6daa13292d937712e476e" prot="public" static="no">
        <name>SETTINGS_STATIC_HANDLER_DEFINE</name>
        <param><defname>_hname</defname></param>
        <param><defname>_tree</defname></param>
        <param><defname>_get</defname></param>
        <param><defname>_set</defname></param>
        <param><defname>_commit</defname></param>
        <param><defname>_export</defname></param>
        <initializer>	const <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structsettings__handler__static" kindref="compound">settings_handler_static</ref>,		     \
				      settings_handler_ ## _hname) = {       \
		.name = _tree,						     \
		.h_get = _get,						     \
		.h_set = _set,						     \
		.h_commit = _commit,					     \
		.h_export = _export,					     \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a static handler for settings items</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_hname</parametername>
</parameternamelist>
<parameterdescription>
<para>handler name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_tree</parametername>
</parameternamelist>
<parameterdescription>
<para>subtree name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_get</parametername>
</parameternamelist>
<parameterdescription>
<para>get routine (can be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_set</parametername>
</parameternamelist>
<parameterdescription>
<para>set routine (can be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_commit</parametername>
</parameternamelist>
<parameterdescription>
<para>commit routine (can be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_export</parametername>
</parameternamelist>
<parameterdescription>
<para>export routine (can be NULL)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This creates a variable <emphasis>hname prepended by <ref refid="structsettings__handler" kindref="compound">settings_handler</ref></emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/settings/settings.h" line="201" column="9" bodyfile="include/settings/settings.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
