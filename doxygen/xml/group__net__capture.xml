<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__net__capture" kind="group">
    <compoundname>net_capture</compoundname>
    <title>Network packet capture</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__capture_1gab280c0c6cc607bdb07211a9450eae262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_capture_setup</definition>
        <argsstring>(const char *remote_addr, const char *my_local_addr, const char *peer_addr, const struct device **dev)</argsstring>
        <name>net_capture_setup</name>
        <param>
          <type>const char *</type>
          <declname>remote_addr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>my_local_addr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>peer_addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> **</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Setup network packet capturing support. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>remote_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The value tells the tunnel remote/outer endpoint IP address. The IP address can be either IPv4 or IPv6 address. This address is used to select the network interface where the tunnel is created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>my_local_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The local/inner IP address of the tunnel. Can contain also port number which is used as UDP source port. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The peer/inner IP address of the tunnel. Can contain also port number which is used as UDP destination port. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Network capture device. This is returned to the caller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if network packet capture setup failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/capture.h" line="71" column="5" declfile="include/net/capture.h" declline="71" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__capture_1ga7a56719068938c34c9c6149296074d01" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_capture_cleanup</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>net_capture_cleanup</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Cleanup network packet capturing support. </para>
        </briefdescription>
        <detaileddescription>
<para>This should be called after the capturing is done and resources can be released.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Network capture device. User must allocate using the <ref refid="group__net__capture_1gab280c0c6cc607bdb07211a9450eae262" kindref="member">net_capture_setup()</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if network packet capture cleanup failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/capture.h" line="85" column="19" bodyfile="include/net/capture.h" bodystart="85" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__net__capture_1gaf449c308080dc126e2e7c03b38d2a0aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_capture_enable</definition>
        <argsstring>(const struct device *dev, struct net_if *iface)</argsstring>
        <name>net_capture_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Enable network packet capturing support. </para>
        </briefdescription>
        <detaileddescription>
<para>This creates tunnel network interface where all the captured packets are pushed. The captured network packets are placed in UDP packets that are sent to tunnel peer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Network capture device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface we are starting to capture packets.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if network packet capture enable failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/capture.h" line="111" column="19" bodyfile="include/net/capture.h" bodystart="111" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__net__capture_1ga651987b8b1e713865cff01412934f3cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_capture_is_enabled</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>net_capture_is_enabled</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Is network packet capture enabled or disabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Network capture device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if enabled, False if network capture is disabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/capture.h" line="134" column="20" bodyfile="include/net/capture.h" bodystart="134" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__net__capture_1ga32c66260fc888dcd38b6a3cffca3b951" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_capture_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>net_capture_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable network packet capturing support. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Network capture device</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if network packet capture disable failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/capture.h" line="155" column="19" bodyfile="include/net/capture.h" bodystart="155" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__net__capture_1ga5a23ebfa64313be0f682e35e858663a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_capture_send</definition>
        <argsstring>(const struct device *dev, struct net_if *iface, struct net_pkt *pkt)</argsstring>
        <name>net_capture_send</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Send captured packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Network capture device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Network interface the packet is being sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet that is sent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if network packet capture send failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/capture.h" line="178" column="19" bodyfile="include/net/capture.h" bodystart="178" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Network packet capture support functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
