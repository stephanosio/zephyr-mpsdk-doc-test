<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__coredump__apis" kind="group">
    <compoundname>coredump_apis</compoundname>
    <title>Coredump APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__coredump__apis_1gac8e7b27f4bbef5120b745677d5c64200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coredump</definition>
        <argsstring>(unsigned int reason, const z_arch_esf_t *esf, struct k_thread *thread)</argsstring>
        <name>coredump</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const z_arch_esf_t *</type>
          <declname>esf</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Perform coredump. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally, this is called inside z_fatal_error() to generate coredump when a fatal error is encountered. This can also be called on demand whenever a coredump is desired.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Reason for the fatal error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>esf</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread information to dump </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/coredump.h" line="166" column="6" bodyfile="include/debug/coredump.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="group__coredump__apis_1ga835467b2517f871b0092f0dd7757f14b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coredump_memory_dump</definition>
        <argsstring>(uintptr_t start_addr, uintptr_t end_addr)</argsstring>
        <name>coredump_memory_dump</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>end_addr</declname>
        </param>
        <briefdescription>
<para>Dump memory region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Start address of memory region to be dumped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>End address of memory region to be dumped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/coredump.h" line="171" column="6" bodyfile="include/debug/coredump.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__coredump__apis_1ga17edf26f97e7f1d39d6a2bb4796f2f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>int coredump_buffer_output</definition>
        <argsstring>(uint8_t *buf, size_t buflen)</argsstring>
        <name>coredump_buffer_output</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Output the buffer via coredump. </para>
        </briefdescription>
        <detaileddescription>
<para>This outputs the buffer of byte array to the coredump backend. For example, this can be called to output the coredump section containing registers, or a section for memory dump.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to be send to coredump output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/coredump.h" line="175" column="6" bodyfile="include/debug/coredump.h" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__coredump__apis_1gad521f35e7b487cbaed553f8f8e4a9e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coredump_query</definition>
        <argsstring>(enum coredump_query_id query_id, void *arg)</argsstring>
        <name>coredump_query</name>
        <param>
          <type>enum <ref refid="coredump_8h_1a26360cadb6b43f5c86b59332e66008f5" kindref="member">coredump_query_id</ref></type>
          <declname>query_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Perform query on coredump subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para>Query the coredump subsystem for information, for example, if there is an error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">query_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Query ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to argument for exchanging information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Depends on the query </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/coredump.h" line="179" column="5" bodyfile="include/debug/coredump.h" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__coredump__apis_1ga9ebe60f88decfba5b798736984b4c496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coredump_cmd</definition>
        <argsstring>(enum coredump_cmd_id query_id, void *arg)</argsstring>
        <name>coredump_cmd</name>
        <param>
          <type>enum <ref refid="coredump_8h_1a48765a88d430aaec373a2ce6e4796578" kindref="member">coredump_cmd_id</ref></type>
          <declname>query_id</declname>
          <defname>cmd_id</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Perform command on coredump subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform certain on coredump subsystem, for example, output the stored coredump via logging.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cmd_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Command ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to argument for exchanging information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Depends on the command </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/debug/coredump.h" line="184" column="5" bodyfile="include/debug/coredump.h" bodystart="184" bodyend="187"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Coredump APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
