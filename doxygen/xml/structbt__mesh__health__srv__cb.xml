<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__mesh__health__srv__cb" kind="struct" language="C++" prot="public">
    <compoundname>bt_mesh_health_srv_cb</compoundname>
    <includes refid="health__srv_8h" local="no">health_srv.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__mesh__health__srv__cb_1a7171b951cb671bdd2df7b0d9c81ac0ec" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_mesh_health_srv_cb::fault_get_cur) (struct bt_mesh_model *model, uint8_t *test_id, uint16_t *company_id, uint8_t *faults, uint8_t *fault_count)</definition>
        <argsstring>)(struct bt_mesh_model *model, uint8_t *test_id, uint16_t *company_id, uint8_t *faults, uint8_t *fault_count)</argsstring>
        <name>fault_get_cur</name>
        <briefdescription>
<para>Callback for fetching current faults. </para>
        </briefdescription>
        <detaileddescription>
<para>Fault values may either be defined by the specification, or by a vendor. Vendor specific faults should be interpreted in the context of the accompanying Company ID. Specification defined faults may be reported for any Company ID, and the same fault may be presented for multiple Company IDs.</para>
<para>All faults shall be associated with at least one Company ID, representing the device vendor or some other vendor whose vendor specific fault values are used.</para>
<para>If there are multiple Company IDs that have active faults, return only the faults associated with one of them at the time. To report faults for multiple Company IDs, interleave which Company ID is reported for each call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Health Server model instance to get faults of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Test ID response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>company_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faults</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to fill with current faults. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fault_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of faults the fault array can fit. Should be updated to reflect the number of faults copied into the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="53" column="1" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__health__srv__cb_1ae5c2238699eca2a2e9dabbc73b06b5ff" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_mesh_health_srv_cb::fault_get_reg) (struct bt_mesh_model *model, uint16_t company_id, uint8_t *test_id, uint8_t *faults, uint8_t *fault_count)</definition>
        <argsstring>)(struct bt_mesh_model *model, uint16_t company_id, uint8_t *test_id, uint8_t *faults, uint8_t *fault_count)</argsstring>
        <name>fault_get_reg</name>
        <briefdescription>
<para>Callback for fetching all registered faults. </para>
        </briefdescription>
        <detaileddescription>
<para>Registered faults are all past and current faults since the last call to <computeroutput>fault_clear</computeroutput>. Only faults associated with the given Company ID should be reported.</para>
<para>Fault values may either be defined by the specification, or by a vendor. Vendor specific faults should be interpreted in the context of the accompanying Company ID. Specification defined faults may be reported for any Company ID, and the same fault may be presented for multiple Company IDs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Health Server model instance to get faults of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>company_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to get faults for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Test ID response buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faults</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to fill with registered faults. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fault_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of faults the fault array can fit. Should be updated to reflect the number of faults copied into the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="79" column="1" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__health__srv__cb_1a0517646cb257e5a87faa7c9634de661d" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_mesh_health_srv_cb::fault_clear) (struct bt_mesh_model *model, uint16_t company_id)</definition>
        <argsstring>)(struct bt_mesh_model *model, uint16_t company_id)</argsstring>
        <name>fault_clear</name>
        <briefdescription>
<para>Clear all registered faults associated with the given Company ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Health Server model instance to clear faults of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>company_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to clear faults for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="91" column="1" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__health__srv__cb_1a3662081648b75993be5257a45bf34768" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_mesh_health_srv_cb::fault_test) (struct bt_mesh_model *model, uint8_t test_id, uint16_t company_id)</definition>
        <argsstring>)(struct bt_mesh_model *model, uint8_t test_id, uint16_t company_id)</argsstring>
        <name>fault_test</name>
        <briefdescription>
<para>Run a self-test. </para>
        </briefdescription>
        <detaileddescription>
<para>The Health server may support up to 256 self-tests for each Company ID. The behavior for all test IDs are vendor specific, and should be interpreted based on the accompanying Company ID. Test failures should result in changes to the fault array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Health Server model instance to run test for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Test ID to run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>company_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Company ID to run test for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the test execution was started successfully, or (negative) error code otherwise. Note that the fault array will not be reported back to the client if the test execution didn&apos;t start. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="108" column="1" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__health__srv__cb_1aa5669eb8b88beb1a9d87183fe537a1fe" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_health_srv_cb::attn_on) (struct bt_mesh_model *model)</definition>
        <argsstring>)(struct bt_mesh_model *model)</argsstring>
        <name>attn_on</name>
        <briefdescription>
<para>Start calling attention to the device. </para>
        </briefdescription>
        <detaileddescription>
<para>The attention state is used to map an element address to a physical device. When this callback is called, the device should start some physical procedure meant to call attention to itself, like blinking, buzzing, vibrating or moving. If there are multiple Health server instances on the device, the attention state should also help identify the specific element the server is in.</para>
<para>The attention calling behavior should continue until the <computeroutput>attn_off</computeroutput> callback is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Health Server model to start the attention state of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="125" column="1" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__mesh__health__srv__cb_1a2aab487d56e43464b2937e222f98bb05" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_mesh_health_srv_cb::attn_off) (struct bt_mesh_model *model)</definition>
        <argsstring>)(struct bt_mesh_model *model)</argsstring>
        <name>attn_off</name>
        <briefdescription>
<para>Stop the attention state. </para>
        </briefdescription>
        <detaileddescription>
<para>Any physical activity started to call attention to the device should be stopped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/mesh/health_srv.h" line="134" column="1" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Callback function for the Health Server model </para>
    </detaileddescription>
    <location file="include/bluetooth/mesh/health_srv.h" line="25" column="1" bodyfile="include/bluetooth/mesh/health_srv.h" bodystart="25" bodyend="135"/>
    <listofallmembers>
      <member refid="structbt__mesh__health__srv__cb_1a2aab487d56e43464b2937e222f98bb05" prot="public" virt="non-virtual"><scope>bt_mesh_health_srv_cb</scope><name>attn_off</name></member>
      <member refid="structbt__mesh__health__srv__cb_1aa5669eb8b88beb1a9d87183fe537a1fe" prot="public" virt="non-virtual"><scope>bt_mesh_health_srv_cb</scope><name>attn_on</name></member>
      <member refid="structbt__mesh__health__srv__cb_1a0517646cb257e5a87faa7c9634de661d" prot="public" virt="non-virtual"><scope>bt_mesh_health_srv_cb</scope><name>fault_clear</name></member>
      <member refid="structbt__mesh__health__srv__cb_1a7171b951cb671bdd2df7b0d9c81ac0ec" prot="public" virt="non-virtual"><scope>bt_mesh_health_srv_cb</scope><name>fault_get_cur</name></member>
      <member refid="structbt__mesh__health__srv__cb_1ae5c2238699eca2a2e9dabbc73b06b5ff" prot="public" virt="non-virtual"><scope>bt_mesh_health_srv_cb</scope><name>fault_get_reg</name></member>
      <member refid="structbt__mesh__health__srv__cb_1a3662081648b75993be5257a45bf34768" prot="public" virt="non-virtual"><scope>bt_mesh_health_srv_cb</scope><name>fault_test</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
