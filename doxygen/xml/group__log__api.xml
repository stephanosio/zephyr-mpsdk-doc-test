<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__log__api" kind="group">
    <compoundname>log_api</compoundname>
    <title>Logging API</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__log__api_1ga70ca6d2316d1bbfb208969d3fcc56aa1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>static char * log_strdup</definition>
        <argsstring>(const char *str)</argsstring>
        <name>log_strdup</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="288" column="20" bodyfile="include/logging/log.h" bodystart="288" bodyend="295"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__log__api_1gad6db28c61c838c1f7316417e1e4847f2" prot="public" static="no">
        <name>LOG_ERR</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an ERROR level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="40" column="9" bodyfile="include/logging/log.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga644db4299681d9ebf06f8745ad984c65" prot="public" static="no">
        <name>LOG_WRN</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a WARNING level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="51" column="9" bodyfile="include/logging/log.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga9c338f3170acf38a8532d1181d26704e" prot="public" static="no">
        <name>LOG_INF</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an INFO level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="61" column="9" bodyfile="include/logging/log.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gafb97e6291db24665313453d192941330" prot="public" static="no">
        <name>LOG_DBG</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a DEBUG level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="71" column="9" bodyfile="include/logging/log.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga4ab5cae247b853bf9f4f0bf761c1c71e" prot="public" static="no">
        <name>LOG_PRINTK</name>
        <param><defname>...</defname></param>
        <initializer>Z_LOG_PRINTK(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Unconditionally print raw log message. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is same as if printk was used but it goes through logging infrastructure thus utilizes logging mode, e.g. deferred mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="82" column="9" bodyfile="include/logging/log.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga830f32743847c52e01a510ab0716fe90" prot="public" static="no">
        <name>LOG_INST_ERR</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an ERROR level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="96" column="9" bodyfile="include/logging/log.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga76057f789dfc164adbb1dbc9f3aff417" prot="public" static="no">
        <name>LOG_INST_WRN</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a WARNING level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="112" column="9" bodyfile="include/logging/log.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga222c5b535fb3ecb36dea97885c794188" prot="public" static="no">
        <name>LOG_INST_INF</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes an INFO level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="127" column="9" bodyfile="include/logging/log.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gae10014012020ea5a6b9a86a5224f19b0" prot="public" static="no">
        <name>LOG_INST_DBG</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, _log_inst, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Writes a DEBUG level message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A string optionally containing printk valid conversion specifier, followed by as many values as specifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="142" column="9" bodyfile="include/logging/log.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gabdae4f5b8b16804b53f83a85c3023134" prot="public" static="no">
        <name>LOG_HEXDUMP_ERR</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an ERROR level hexdump message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="155" column="9" bodyfile="include/logging/log.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gaf73802661fea926bb2b7e628727cdceb" prot="public" static="no">
        <name>LOG_HEXDUMP_WRN</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a WARNING level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="168" column="9" bodyfile="include/logging/log.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga8e060bbe660c246a38adccd873e58c6c" prot="public" static="no">
        <name>LOG_HEXDUMP_INF</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an INFO level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="180" column="9" bodyfile="include/logging/log.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga01dda8273f7d453a855542a52524dca8" prot="public" static="no">
        <name>LOG_HEXDUMP_DBG</name>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a DEBUG level message to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="192" column="9" bodyfile="include/logging/log.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gaf2f504a779917dc0f40767cba9f940b9" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_ERR</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ab3a03740685cbdaa375e2bde8247fdc6" kindref="member">LOG_LEVEL_ERR</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an ERROR hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>Message is associated with specific instance of the module which has independent filtering settings (if runtime filtering is enabled) and message prefix (&lt;module_name&gt;.&lt;instance_name&gt;). It&apos;s meant to report severe errors, such as those from which it&apos;s not possible to recover.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="209" column="9" bodyfile="include/logging/log.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gab6542651f88fbb0991fb2339102b52a5" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_WRN</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a54f5db1327d9fdbaecbb03a6969de97b" kindref="member">LOG_LEVEL_WRN</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a WARNING level hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to register messages related to unusual situations that are not necessarily errors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="224" column="9" bodyfile="include/logging/log.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga8e38c461c6058ee604b4dddad662d4ca" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_INF</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1a281bc2ce5315e6fae369796c0fdf5c1d" kindref="member">LOG_LEVEL_INF</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes an INFO level hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write generic user oriented messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="238" column="9" bodyfile="include/logging/log.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga4b73e6d51cff26ea5595df8680c00563" prot="public" static="no">
        <name>LOG_INST_HEXDUMP_DBG</name>
        <param><defname>_log_inst</defname></param>
        <param><defname>_data</defname></param>
        <param><defname>_length</defname></param>
        <param><defname>_str</defname></param>
        <initializer>	Z_LOG_HEXDUMP_INSTANCE(<ref refid="include_2logging_2log__core_8h_1ad1f7d41b1af28ba81ea63d24c9b690cc" kindref="member">LOG_LEVEL_DBG</ref>, _log_inst, _data, _length, _str)</initializer>
        <briefdescription>
<para>Writes a DEBUG level hexdump message associated with the instance to the log. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s meant to write developer oriented information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the log structure associated with the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Persistent, raw string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="252" column="9" bodyfile="include/logging/log.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" prot="public" static="no">
        <name>LOG_MODULE_REGISTER</name>
        <param><defname>...</defname></param>
        <initializer>	Z_LOG_EVAL(							\
		_LOG_LEVEL_RESOLVE(__VA_ARGS__),			\
		(_LOG_MODULE_DATA_CREATE(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__),	\
				      _LOG_LEVEL_RESOLVE(__VA_ARGS__))),\
		()/*Empty*/						\
	)								\
	<ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Create module-specific state and register the module with Logger. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro normally must be used after including &lt;<ref refid="log_8h" kindref="compound">logging/log.h</ref>&gt; to complete the initialization of the module.</para>
<para>Module registration can be skipped in two cases:</para>
<para><itemizedlist>
<listitem><para>The module consists of more than one file, and another file invokes this macro. (<ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE()</ref> should be used instead in all of the module&apos;s other files.)</para>
</listitem><listitem><para>Instance logging is used and there is no need to create module entry. In that case <ref refid="group__log__api_1gac396852328a77360a0c27dbf7b52356e" kindref="member">LOG_LEVEL_SET()</ref> should be used to set log level used within the file.</para>
</listitem></itemizedlist>
</para>
<para>Macro accepts one or two parameters:<itemizedlist>
<listitem><para>module name</para>
</listitem><listitem><para>optional log level. If not provided then default log level is used in the file.</para>
</listitem></itemizedlist>
</para>
<para>Example usage:<itemizedlist>
<listitem><para><ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER(foo, CONFIG_FOO_LOG_LEVEL)</ref></para>
</listitem><listitem><para><ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER(foo)</ref></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The module&apos;s state is defined, and the module is registered, only if LOG_LEVEL for the current source file is non-zero or it is not defined and CONFIG_LOG_DEFAULT_LEVEL is non-zero. In other cases, this macro has no effect. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="373" column="9" bodyfile="include/logging/log.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" prot="public" static="no">
        <name>LOG_MODULE_DECLARE</name>
        <param><defname>...</defname></param>
        <initializer>	extern const struct <ref refid="structlog__source__const__data" kindref="compound">log_source_const_data</ref>			      \
			Z_LOG_ITEM_CONST_DATA(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__));     \
	extern struct <ref refid="structlog__source__dynamic__data" kindref="compound">log_source_dynamic_data</ref>				      \
			<ref refid="include_2logging_2log__core_8h_1a86c2e55bace38c6e71b4d1d0736b1160" kindref="member">LOG_ITEM_DYNAMIC_DATA</ref>(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__));     \
									      \
	static const struct <ref refid="structlog__source__const__data" kindref="compound">log_source_const_data</ref> *			      \
		__log_current_const_data __unused =			      \
			_LOG_LEVEL_RESOLVE(__VA_ARGS__) ?		      \
			&amp;Z_LOG_ITEM_CONST_DATA(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__)) :   \
			NULL;						      \
									      \
	static struct <ref refid="structlog__source__dynamic__data" kindref="compound">log_source_dynamic_data</ref> *				      \
		__log_current_dynamic_data __unused =			      \
			(_LOG_LEVEL_RESOLVE(__VA_ARGS__) &amp;&amp;		      \
			<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(CONFIG_LOG_RUNTIME_FILTERING)) ?	      \
			&amp;<ref refid="include_2logging_2log__core_8h_1a86c2e55bace38c6e71b4d1d0736b1160" kindref="member">LOG_ITEM_DYNAMIC_DATA</ref>(<ref refid="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" kindref="member">GET_ARG_N</ref>(1, __VA_ARGS__)) :   \
			NULL;						      \
									      \
	static const <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> __log_level __unused =			      \
					_LOG_LEVEL_RESOLVE(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for declaring a log module (not registering it). </para>
        </briefdescription>
        <detaileddescription>
<para>Modules which are split up over multiple files must have exactly one file use <ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER()</ref> to create module-specific state and register the module with the logger core.</para>
<para>The other files in the module should use this macro instead to declare that same state. (Otherwise, <ref refid="group__log__api_1ga9c338f3170acf38a8532d1181d26704e" kindref="member">LOG_INF()</ref> etc. will not be able to refer to module-specific state variables.)</para>
<para>Macro accepts one or two parameters:<itemizedlist>
<listitem><para>module name</para>
</listitem><listitem><para>optional log level. If not provided then default log level is used in the file.</para>
</listitem></itemizedlist>
</para>
<para>Example usage:<itemizedlist>
<listitem><para><ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE(foo, CONFIG_FOO_LOG_LEVEL)</ref></para>
</listitem><listitem><para><ref refid="group__log__api_1ga8193b0e10e5ee64b86848bb52be31869" kindref="member">LOG_MODULE_DECLARE(foo)</ref></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The module&apos;s state is declared only if LOG_LEVEL for the current source file is non-zero or it is not defined and CONFIG_LOG_DEFAULT_LEVEL is non-zero. In other cases, this macro has no effect. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__log__api_1ga2404243df68fb6e51129d1c7ecc5ca45" kindref="member">LOG_MODULE_REGISTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="408" column="9" bodyfile="include/logging/log.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__log__api_1gac396852328a77360a0c27dbf7b52356e" prot="public" static="no">
        <name>LOG_LEVEL_SET</name>
        <param><defname>level</defname></param>
        <initializer>				static const <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> __log_level __unused = \
				Z_LOG_RESOLVED_LEVEL(level, 0)</initializer>
        <briefdescription>
<para>Macro for setting log level in the file or function where instance logging API is used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Level used in file or in function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/logging/log.h" line="437" column="9" bodyfile="include/logging/log.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logger API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
