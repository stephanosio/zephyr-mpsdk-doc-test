<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__json" kind="group">
    <compoundname>json</compoundname>
    <title>JSON</title>
    <innerclass refid="structjson__obj__descr" prot="public">json_obj_descr</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__json_1ga18a137ac5e2998d375540298670797c4" prot="public" static="no" strong="no">
        <type></type>
        <name>json_tokens</name>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a926d6b0a5458be2e707d51f0b25dbe77" prot="public">
          <name>JSON_TOK_NONE</name>
          <initializer>= &apos;_&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" prot="public">
          <name>JSON_TOK_OBJECT_START</name>
          <initializer>= &apos;{&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a835bc516b25eb0619b3f1a52f1ebc911" prot="public">
          <name>JSON_TOK_OBJECT_END</name>
          <initializer>= &apos;}&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a8f9beceabf104da239f713e23b91d76b" prot="public">
          <name>JSON_TOK_LIST_START</name>
          <initializer>= &apos;[&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" prot="public">
          <name>JSON_TOK_ARRAY_START</name>
          <initializer>= &apos;[&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a5e90a7b034a4af48a1b90fad7675a88d" prot="public">
          <name>JSON_TOK_LIST_END</name>
          <initializer>= &apos;]&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a2483f21d814abcd08b5253e55aef70c9" prot="public">
          <name>JSON_TOK_ARRAY_END</name>
          <initializer>= &apos;]&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4ab145f07a93c4fdcf60c9052fbd9a7afc" prot="public">
          <name>JSON_TOK_STRING</name>
          <initializer>= &apos;&quot;&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a4873e5c0c6344323d5d6af158952ca36" prot="public">
          <name>JSON_TOK_COLON</name>
          <initializer>= &apos;:&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a736325745f9521f38a68962775e76a50" prot="public">
          <name>JSON_TOK_COMMA</name>
          <initializer>= &apos;,&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4ae25f16ae591eb17d4074e6dcc2f1e62c" prot="public">
          <name>JSON_TOK_NUMBER</name>
          <initializer>= &apos;0&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a87ffb12e4d174bb4427d9a72eabca7e3" prot="public">
          <name>JSON_TOK_TRUE</name>
          <initializer>= &apos;t&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a8df1b1d0061d7e289f94bae1df35baa7" prot="public">
          <name>JSON_TOK_FALSE</name>
          <initializer>= &apos;f&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4a93de1b7e780ac22744c97e922de3b35e" prot="public">
          <name>JSON_TOK_NULL</name>
          <initializer>= &apos;n&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4afe9c51f453d7dd02504071330a030e9e" prot="public">
          <name>JSON_TOK_ERROR</name>
          <initializer>= &apos;!&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__json_1gga18a137ac5e2998d375540298670797c4ad970b7d8553296bf4ed03c831cb6f604" prot="public">
          <name>JSON_TOK_EOF</name>
          <initializer>= &apos;\0&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="32" column="1" bodyfile="include/data/json.h" bodystart="32" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* json_append_bytes_t) (const char *bytes, size_t len, void *data)</definition>
        <argsstring>)(const char *bytes, size_t len, void *data)</argsstring>
        <name>json_append_bytes_t</name>
        <briefdescription>
<para>Function pointer type to append bytes to a buffer while encoding JSON data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Contents to write to the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to append to output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User-provided pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This callback function should return a negative number on error (which will be propagated to the return value of <ref refid="group__json_1gafec772f687a0280f5211139bd019e582" kindref="member">json_obj_encode()</ref>), or 0 on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="106" column="9" bodyfile="include/data/json.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__json_1ga9aa97a94e7e91a5d818c20b27059b6cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_obj_parse</definition>
        <argsstring>(char *json, size_t len, const struct json_obj_descr *descr, size_t descr_len, void *val)</argsstring>
        <name>json_obj_parse</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Parses the JSON-encoded object pointed to by <emphasis>json</emphasis>, with size <emphasis>len</emphasis>, according to the descriptor pointed to by <emphasis>descr</emphasis>. Values are stored in a struct pointed to by <emphasis>val</emphasis>. Set up the descriptor like this: </para>
        </briefdescription>
        <detaileddescription>
<para>struct s { int foo; char *bar; } struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> descr[] = { <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, foo, JSON_TOK_NUMBER)</ref>, <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, bar, JSON_TOK_STRING)</ref>, };</para>
<para>Since this parser is designed for machine-to-machine communications, some liberties were taken to simplify the design: (1) strings are not unescaped (but only valid escape sequences are accepted); (2) no UTF-8 validation is performed; and (3) only integer numbers are supported (no strtod() in the minimal libc).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to JSON-encoded value to be parsed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of JSON-encoded value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array. Must be less than 31 due to implementation detail reasons (if more fields are necessary, use two descriptors) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the struct to hold the decoded values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if error, bitmap of decoded fields on success (bit 0 is set if first field in the descriptor has been properly decoded, etc). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="560" column="5" declfile="include/data/json.h" declline="560" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gab4e6ad4a040c271d74eaa313c580a739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_arr_parse</definition>
        <argsstring>(char *json, size_t len, const struct json_obj_descr *descr, void *val)</argsstring>
        <name>json_arr_parse</name>
        <param>
          <type>char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Parses the JSON-encoded array pointed to by <emphasis>json</emphasis>, with size <emphasis>len</emphasis>, according to the descriptor pointed to by <emphasis>descr</emphasis>. Values are stored in a struct pointed to by <emphasis>val</emphasis>. Set up the descriptor like this: </para>
        </briefdescription>
        <detaileddescription>
<para>struct s { int foo; char *bar; } struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> descr[] = { <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, foo, JSON_TOK_NUMBER)</ref>, <ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM(struct s, bar, JSON_TOK_STRING)</ref>, }; struct a { struct s baz[10]; size_t count; } struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> array[] = { JSON_OBJ_DESCR_OBJ_ARRAY(struct a, baz, 10, count, descr, <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE(descr)</ref>), };</para>
<para>Since this parser is designed for machine-to-machine communications, some liberties were taken to simplify the design: (1) strings are not unescaped (but only valid escape sequences are accepted); (2) no UTF-8 validation is performed; and (3) only integer numbers are supported (no strtod() in the minimal libc).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to JSON-encoded array to be parsed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of JSON-encoded array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the struct to hold the decoded values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if array has been successfully parsed. A negative value indicates an error (as defined on <ref refid="errno_8h" kindref="compound">errno.h</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="596" column="5" declfile="include/data/json.h" declline="596" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga43ee6d1fbd3fa8fb2ae052844b465dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t json_escape</definition>
        <argsstring>(char *str, size_t *len, size_t buf_size)</argsstring>
        <name>json_escape</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Escapes the string so it can be used to encode JSON objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to escape; the escape string is stored the buffer pointed to by this parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Points to a size_t containing the size before and after the escaping process </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of buffer str points to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if string has been escaped properly, or -ENOMEM if there was not enough space to escape the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="611" column="9" declfile="include/data/json.h" declline="611" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga5ef155a3a6444801592badd6a092734c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t json_calc_escaped_len</definition>
        <argsstring>(const char *str, size_t len)</argsstring>
        <name>json_calc_escaped_len</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Calculates the JSON-escaped string length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to analyze </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>String size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length str would have if it were escaped </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="621" column="8" declfile="include/data/json.h" declline="621" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga41e6e90beef8bae12fca1de2584145bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t json_calc_encoded_len</definition>
        <argsstring>(const struct json_obj_descr *descr, size_t descr_len, const void *val)</argsstring>
        <name>json_calc_encoded_len</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Calculates the string length to fully encode an object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes necessary to encode the values if &gt;0, an error code is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="633" column="9" declfile="include/data/json.h" declline="633" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gab758ad32cfb6369f4967a6842ac63245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_obj_encode_buf</definition>
        <argsstring>(const struct json_obj_descr *descr, size_t descr_len, const void *val, char *buffer, size_t buf_size)</argsstring>
        <name>json_obj_encode_buf</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Encodes an object in a contiguous memory location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the JSON data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer, in bytes, with space for the terminating NUL character</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error (as defined on <ref refid="errno_8h" kindref="compound">errno.h</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="649" column="5" declfile="include/data/json.h" declline="649" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gafd27bbcb898dc902cf1dadd3369cf923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_arr_encode_buf</definition>
        <argsstring>(const struct json_obj_descr *descr, const void *val, char *buffer, size_t buf_size)</argsstring>
        <name>json_arr_encode_buf</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Encodes an array in a contiguous memory location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the JSON data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer, in bytes, with space for the terminating NUL character</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error (as defined on <ref refid="errno_8h" kindref="compound">errno.h</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="664" column="5" declfile="include/data/json.h" declline="664" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1gafec772f687a0280f5211139bd019e582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_obj_encode</definition>
        <argsstring>(const struct json_obj_descr *descr, size_t descr_len, const void *val, json_append_bytes_t append_bytes, void *data)</argsstring>
        <name>json_obj_encode</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>descr_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" kindref="member">json_append_bytes_t</ref></type>
          <declname>append_bytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Encodes an object using an arbitrary writer function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to append bytes to the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pointer to be passed to the append_bytes callback function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="680" column="5" declfile="include/data/json.h" declline="680" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__json_1ga4ffccdc602ab98d489499bf6fa4fa6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int json_arr_encode</definition>
        <argsstring>(const struct json_obj_descr *descr, const void *val, json_append_bytes_t append_bytes, void *data)</argsstring>
        <name>json_arr_encode</name>
        <param>
          <type>const struct <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="group__json_1gacb409ebe9c59789a5d9aca02c6c94674" kindref="member">json_append_bytes_t</ref></type>
          <declname>append_bytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Encodes an array using an arbitrary writer function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct holding the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to append bytes to the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pointer to be passed to the append_bytes callback function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if object has been successfully encoded. A negative value indicates an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="696" column="5" declfile="include/data/json.h" declline="696" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" prot="public" static="no">
        <name>JSON_OBJ_DESCR_PRIM</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>type_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = type_, \
		.offset = offsetof(struct_, field_name_), \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for supported primitive values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Token type for JSON value corresponding to a primitive type. Must be one of: JSON_TOK_STRING for strings, JSON_TOK_NUMBER for numbers, JSON_TOK_TRUE (or JSON_TOK_FALSE) for booleans.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim>struct foo {
    int some_int;
};

struct json_obj_descr foo[] = {
    JSON_OBJ_DESCR_PRIM(struct foo, some_int, JSON_TOK_NUMBER),
};
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="133" column="9" bodyfile="include/data/json.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga4ee365f43cfa86a214973defe81f1e88" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJECT</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>sub_descr_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = (sizeof(#field_name_) - 1), \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.object = { \
				.sub_descr = sub_descr_, \
				.sub_descr_len = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(sub_descr_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an object value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> describing the subobject</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct nested {
     int foo;
     struct {
        int baz;
     } bar;
 };

 struct json_obj_descr nested_bar[] = {
     { ... declare bar.baz descriptor ... },
 };
 struct json_obj_descr nested[] = {
     { ... declare foo descriptor ... },
     JSON_OBJ_DESCR_OBJECT(struct nested, bar, nested_bar),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="166" column="9" bodyfile="include/data/json.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga0b510decbc755c82903b54fcbc4a3b64" prot="public" static="no">
        <name>JSON_OBJ_DESCR_ARRAY</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_type_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR(struct_, len_field_, \
					elem_type_,), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an array of primitives. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element type, must be a primitive type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct example {
     int foo[10];
     size_t foo_len;
 };

 struct json_obj_descr array[] = {
      JSON_OBJ_DESCR_ARRAY(struct example, foo, 10, foo_len,
                           JSON_TOK_NUMBER)
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="252" column="9" bodyfile="include/data/json.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gae012264df03546a1c01eec4216b52ffd" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJ_ARRAY</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_descr_</defname></param>
        <param><defname>elem_descr_len_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR(struct_, len_field_, \
					<ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
					Z_JSON_DESCR_OBJ(elem_descr_, elem_descr_len_)), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an array of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct containing the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element descriptor, pointer to a descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in elem_descr_</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct person_height {
     const char *name;
     int height;
 };

 struct people_heights {
     struct person_height heights[10];
     size_t heights_len;
 };

 struct json_obj_descr person_height_descr[] = {
      JSON_OBJ_DESCR_PRIM(struct person_height, name, JSON_TOK_STRING),
      JSON_OBJ_DESCR_PRIM(struct person_height, height, JSON_TOK_NUMBER),
 };

 struct json_obj_descr array[] = {
      JSON_OBJ_DESCR_OBJ_ARRAY(struct people_heights, heights, 10,
                               heights_len, person_height_descr,
                               ARRAY_SIZE(person_height_descr)),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="303" column="9" bodyfile="include/data/json.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gaed8189235fd30d2bc041cafee9591ec9" prot="public" static="no">
        <name>JSON_OBJ_DESCR_ARRAY_ARRAY</name>
        <param><defname>struct_</defname></param>
        <param><defname>field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_descr_</defname></param>
        <param><defname>elem_descr_len_</defname></param>
        <initializer>	{ \
		.field_name = (#field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(#field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR( \
					struct_, len_field_, <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
					Z_JSON_DESCR_ARRAY( \
						elem_descr_, \
						1 + <ref refid="group__sys-util_1ga831cb8468911b8ebdb9b42682778e53d" kindref="member">ZERO_OR_COMPILE_ERROR</ref>(elem_descr_len_ == 1))), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Helper macro to declare a descriptor for an array of array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct containing the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element descriptor, pointer to a descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in elem_descr_</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct person_height {
     const char *name;
     int height;
 };

 struct person_heights_array {
     struct person_height heights;
 }

 struct people_heights {
     struct person_height_array heights[10];
     size_t heights_len;
 };

 struct json_obj_descr person_height_descr[] = {
     JSON_OBJ_DESCR_PRIM(struct person_height, name, JSON_TOK_STRING),
     JSON_OBJ_DESCR_PRIM(struct person_height, height, JSON_TOK_NUMBER),
 };

 struct json_obj_descr person_height_array_descr[] = {
     JSON_OBJ_DESCR_OBJECT(struct person_heights_array,
                           heights, person_heigth_descr),
 };

 struct json_obj_descr array_array[] = {
      JSON_OBJ_DESCR_ARRAY_ARRAY(struct people_heights, heights, 10,
                                 heights_len, person_height_array_descr,
                                 ARRAY_SIZE(person_height_array_descr)),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="364" column="9" bodyfile="include/data/json.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gaad081c4f8debcb41779bd5879ed8bbd4" prot="public" static="no">
        <name>JSON_OBJ_DESCR_PRIM_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>type_</defname></param>
        <initializer>	{ \
		.field_name = (json_field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(json_field_name_) - 1, \
		.type = type_, \
		.offset = offsetof(struct_, struct_field_name_), \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_PRIM that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Token type for JSON value corresponding to a primitive type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__json_1ga1ed917f5a247ca33f2778afe62ff1a88" kindref="member">JSON_OBJ_DESCR_PRIM</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="398" column="9" bodyfile="include/data/json.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga8f8d03241e4f69d5f7147792db9a9fe9" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJECT_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>sub_descr_</defname></param>
        <initializer>	{ \
		.field_name = (json_field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = (sizeof(json_field_name_) - 1), \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
		.offset = offsetof(struct_, struct_field_name_), \
		{ \
			.object = { \
				.sub_descr = sub_descr_, \
				.sub_descr_len = <ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(sub_descr_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_OBJECT that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <ref refid="structjson__obj__descr" kindref="compound">json_obj_descr</ref> describing the subobject</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__json_1ga4ee365f43cfa86a214973defe81f1e88" kindref="member">JSON_OBJ_DESCR_OBJECT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="421" column="9" bodyfile="include/data/json.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1ga4a5bafd64de8abcbc2b5c039bd59ec84" prot="public" static="no">
        <name>JSON_OBJ_DESCR_ARRAY_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_type_</defname></param>
        <initializer>	{ \
		.field_name = (json_field_name_), \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(json_field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, struct_field_name_), \
		{ \
			.array = { \
				.element_descr = \
					Z_JSON_ELEMENT_DESCR(struct_, len_field_, elem_type_,), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_ARRAY that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element type, must be a primitive type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__json_1ga0b510decbc755c82903b54fcbc4a3b64" kindref="member">JSON_OBJ_DESCR_ARRAY</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="454" column="9" bodyfile="include/data/json.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__json_1gaa6602833e59c7e5205d69cc7c4ab2bba" prot="public" static="no">
        <name>JSON_OBJ_DESCR_OBJ_ARRAY_NAMED</name>
        <param><defname>struct_</defname></param>
        <param><defname>json_field_name_</defname></param>
        <param><defname>struct_field_name_</defname></param>
        <param><defname>max_len_</defname></param>
        <param><defname>len_field_</defname></param>
        <param><defname>elem_descr_</defname></param>
        <param><defname>elem_descr_len_</defname></param>
        <initializer>	{ \
		.field_name = json_field_name_, \
		.align_shift = Z_ALIGN_SHIFT(struct_), \
		.field_name_len = sizeof(json_field_name_) - 1, \
		.type = <ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a9856446d3a2aa3155266957b8b1371cd" kindref="member">JSON_TOK_ARRAY_START</ref>, \
		.offset = offsetof(struct_, struct_field_name_), \
		{ \
			.array = { \
				.element_descr = Z_JSON_ELEMENT_DESCR(struct_, len_field_, \
					<ref refid="group__json_1gga18a137ac5e2998d375540298670797c4a81e303d23da0b3d8504cc4a7ee7d52e8" kindref="member">JSON_TOK_OBJECT_START</ref>, \
					Z_JSON_DESCR_OBJ(elem_descr_, elem_descr_len_)), \
				.n_elements = (max_len_), \
			}, \
		}, \
	}</initializer>
        <briefdescription>
<para>Variant of JSON_OBJ_DESCR_OBJ_ARRAY that can be used when the structure and JSON field names differ. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when the JSON field is not a valid C identifier.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struct_</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct packing the values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>String, field name of the array in JSON strings </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_field_name_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct containing the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_field_</parametername>
</parameternamelist>
<parameterdescription>
<para>Field name in the struct for the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Element descriptor, pointer to a descriptor array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_descr_len_</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in elem_descr_</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Here&apos;s an example of use: <verbatim> struct person_height {
     const char *name;
     int height;
 };

 struct people_heights {
     struct person_height heights[10];
     size_t heights_len;
 };

 struct json_obj_descr person_height_descr[] = {
      JSON_OBJ_DESCR_PRIM(struct person_height, name, JSON_TOK_STRING),
      JSON_OBJ_DESCR_PRIM(struct person_height, height, JSON_TOK_NUMBER),
 };

 struct json_obj_descr array[] = {
      JSON_OBJ_DESCR_OBJ_ARRAY_NAMED(struct people_heights,
                                     &quot;people-heights&quot;, heights,
                                     10, heights_len,
                                     person_height_descr,
                                     ARRAY_SIZE(person_height_descr)),
 };
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/data/json.h" line="513" column="9" bodyfile="include/data/json.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
