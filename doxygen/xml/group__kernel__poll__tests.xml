<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__poll__tests" kind="group">
    <compoundname>kernel_poll_tests</compoundname>
    <title>Poll tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__poll__tests_1ga87369fd2be512baee38bae7810089817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_no_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_no_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test poll events with no wait. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1ga8e3889f2bac281a6e65e31068e58047e" kindref="member">K_POLL_EVENT_INITIALIZER()</ref>, <ref refid="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" kindref="member">k_poll_signal_init()</ref>, <ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise()</ref>, <ref refid="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" kindref="member">k_poll_signal_check()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll.c" line="56" column="6" bodyfile="tests/kernel/poll/src/test_poll.c" bodystart="56" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gad4944fb360bccc21ee9bac617ad7630b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_wait</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test polling with wait. </para>
        </briefdescription>
        <detaileddescription>
<para>Test Objective:<itemizedlist>
<listitem><para>Test the poll operation which enables waiting concurrently for one/two/all conditions to be fulfilled.</para>
</listitem><listitem><para>set a single timeout argument indicating the maximum amount of time a thread shall wait.</para>
</listitem></itemizedlist>
</para>
<para>Testing techniques:<itemizedlist>
<listitem><para>function and block box testing.</para>
</listitem><listitem><para>Interface testing.</para>
</listitem><listitem><para>Dynamic analysis and testing.</para>
</listitem></itemizedlist>
</para>
<para>Prerequisite Conditions:<itemizedlist>
<listitem><para>CONFIG_TEST_USERSPACE</para>
</listitem><listitem><para>CONFIG_DYNAMIC_OBJECTS</para>
</listitem><listitem><para>CONFIG_POLL</para>
</listitem></itemizedlist>
</para>
<para>Input Specifications:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para>Test Procedure:<orderedlist>
<listitem><para>Use FIFO/semaphore/signal/message queue object to define poll event.</para>
</listitem><listitem><para>Initialize the FIFO/semaphore/signal/message queue object.</para>
</listitem><listitem><para>Create a thread to put FIFO, give semaphore, raise signal, and put message queue.</para>
</listitem><listitem><para>Check the result when signal is raised, semaphore is given, fifo is filled, and message is received.</para>
</listitem><listitem><para>Check the result when no event is satisfied.</para>
</listitem><listitem><para>Check the result when only semaphore is given.</para>
</listitem><listitem><para>Check the result when only FIFO is filled.</para>
</listitem><listitem><para>Check the result when only signal is raised.</para>
</listitem><listitem><para>Check the result when only message is received.</para>
</listitem></orderedlist>
</para>
<para>Expected Test Result:<itemizedlist>
<listitem><para>FIFO/semaphore/signal/message queue events available/waitable in poll.</para>
</listitem></itemizedlist>
</para>
<para>Pass/Fail Criteria:<itemizedlist>
<listitem><para>Successful if check points in test procedure are all passed, otherwise failure.</para>
</listitem></itemizedlist>
</para>
<para>Assumptions and Constraints:<itemizedlist>
<listitem><para>N/A</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" kindref="member">k_poll_signal_init()</ref>, <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll.c" line="369" column="6" bodyfile="tests/kernel/poll/src/test_poll.c" bodystart="369" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gadbb4d21421419dcfe55a768d28cdd54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_cancel</definition>
        <argsstring>(bool is_main_low_prio)</argsstring>
        <name>test_poll_cancel</name>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>is_main_low_prio</declname>
        </param>
        <briefdescription>
<para>Test polling of cancelled fifo. </para>
        </briefdescription>
        <detaileddescription>
<para>Test the FIFO(queue) data available/cancelable events as events in poll.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>, <ref refid="group__fifo__apis_1gab744080af449e093df8dd4982e013e16" kindref="member">k_fifo_cancel_wait()</ref>, <ref refid="group__fifo__apis_1gab1c5212040d12cbb92cede5cf54928ba" kindref="member">k_fifo_alloc_put</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll.c" line="530" column="6" bodyfile="tests/kernel/poll/src/test_poll.c" bodystart="530" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gacac2de9e9acb1eca7269763a72194093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_multi</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_multi</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test polling of multiple events. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Test the multiple semaphore events as waitable events in poll.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1ga8e3889f2bac281a6e65e31068e58047e" kindref="member">K_POLL_EVENT_INITIALIZER()</ref>, <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>, <ref refid="group__poll__apis_1gaa06bddd93a024fc5326d93187d80eb03" kindref="member">k_poll_event_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll.c" line="642" column="6" bodyfile="tests/kernel/poll/src/test_poll.c" bodystart="642" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gad653d0ff23c0b3f0792998f1f368d690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_threadstate</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_threadstate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test polling of events by manipulating polling thread state. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>manipulating thread state to consider case where no polling thread is available during event signalling.</para>
</listitem><listitem><para>defined a signal poll as waitable events in poll and verify the result after siganl raised</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1ga8e3889f2bac281a6e65e31068e58047e" kindref="member">K_POLL_EVENT_INITIALIZER()</ref>, <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>, <ref refid="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" kindref="member">k_poll_signal_init()</ref>, <ref refid="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" kindref="member">k_poll_signal_check()</ref>, <ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll.c" line="724" column="6" bodyfile="tests/kernel/poll/src/test_poll.c" bodystart="724" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga57eb6965a015e5ec3139d8d07709f409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_detect_is_polling</definition>
        <argsstring>(void)</argsstring>
        <name>test_detect_is_polling</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detect is_polling is false in signal_poll_event() </para>
        </briefdescription>
        <detaileddescription>
<para>Define and initialize a signal event, and spawn a thread to poll event, and set dticks as invalid, check if the value of is_polling in function signal_poll_event(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll.c" line="797" column="6" bodyfile="tests/kernel/poll/src/test_poll.c" bodystart="797" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga3a28ff8cd27c39f8252e52bfb4248ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_poll_user_num_err</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_poll_user_num_err</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll with error number events in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using API k_poll with error number as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="25" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga1bbd107161811b61277d36e6e9f9732e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_poll_user_mem_err</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_poll_user_mem_err</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll with error member of events in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using API k_poll with error member as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="42" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gaf1014d2d0d97feed658175e3b946daf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_poll_user_type_sem_err</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_poll_user_type_sem_err</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll with NULL sem event in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Define a poll event, and using API k_poll with NULL sem as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="58" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="58" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gacfd370ab1ea34620a09cad9c007477fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_poll_user_type_signal_err</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_poll_user_type_signal_err</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll with NULL signal event in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Define a poll, and using API k_poll with NULL signal as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="80" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga05e911f0cb23de131c9352a9364c5931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_poll_user_type_fifo_err</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_poll_user_type_fifo_err</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll with NULL fifo event in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Define a poll, and using API k_poll with NULL fifo as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="102" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga034438b6c5a00aae23fe42f0008d9a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_poll_user_type_msgq_err</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_poll_user_type_msgq_err</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll with NULL message queue event in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Define a poll, and using API k_poll with NULL message queue as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="124" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="124" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga8fd308c741cb03467c09ed193646f9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_signal_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_signal_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll_signal_init with NULL in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using API k_poll_signal_init with NULL as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" kindref="member">k_poll_signal_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="147" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga726a5757c414a0f46f0367c62937505c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_signal_check_obj</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_signal_check_obj</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll_signal_check with NULL object in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using API k_poll with NULL object as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" kindref="member">k_poll_signal_check()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="163" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="163" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga6e1aaf0b6ae9c535541276ee10482583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_signal_check_signal</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_signal_check_signal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll_signal_check with unread address in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using k_poll_signal_check with unread results as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" kindref="member">k_poll_signal_check()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="184" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="184" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1ga350b0399049658cffe3d06cdc1ce5563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_signal_check_result</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_signal_check_result</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll_signal_check with unread address in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using k_poll_signal_check with unread signaled as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" kindref="member">k_poll_signal_check()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="208" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="208" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gac370b5bf1dee0790f0f43e86e9955e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_signal_raise_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_signal_raise_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll_signal_raise with unread address in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using k_poll_signal_raise with NULL as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="230" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="230" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__poll__tests_1gad1e04aa9bff12b18f10e6e89d795b0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_poll_signal_reset_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_poll_signal_reset_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test API k_poll_signal_reset with unread address in user mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Using k_poll_signal_reset with NULL as parameter to check if a error will be met.</para>
<para><simplesect kind="see"><para><ref refid="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" kindref="member">k_poll_signal_reset()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/poll/src/test_poll_fail.c" line="250" column="6" bodyfile="tests/kernel/poll/src/test_poll_fail.c" bodystart="250" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test cases to verify poll. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
