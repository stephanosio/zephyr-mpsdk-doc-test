<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__i2c__interface" kind="group">
    <compoundname>i2c_interface</compoundname>
    <title>I2C Interface</title>
    <innerclass refid="structi2c__dt__spec" prot="public">i2c_dt_spec</innerclass>
    <innerclass refid="structi2c__msg" prot="public">i2c_msg</innerclass>
    <innerclass refid="structi2c__slave__callbacks" prot="public">i2c_slave_callbacks</innerclass>
    <innerclass refid="structi2c__slave__config" prot="public">i2c_slave_config</innerclass>
    <innerclass refid="structi2c__device__state" prot="public">i2c_device_state</innerclass>
    <innerclass refid="structi2c__client__config" prot="public">i2c_client_config</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__i2c__interface_1ga6634657eae50c6316cd39dcf154308ee" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_write_requested_cb_t) (struct i2c_slave_config *config)</definition>
        <argsstring>)(struct i2c_slave_config *config)</argsstring>
        <name>i2c_slave_write_requested_cb_t</name>
        <briefdescription>
<para>Function called when a write to the device is initiated. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus completes a start condition for a write operation to the address associated with a particular device.</para>
<para>A success return shall cause the controller to ACK the next byte received. An error return shall cause the controller to NACK the next byte received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the write is accepted, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="217" column="9" bodyfile="include/drivers/i2c.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1gac126848d8d110e3f91441043ae04bf92" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_write_received_cb_t) (struct i2c_slave_config *config, uint8_t val)</definition>
        <argsstring>)(struct i2c_slave_config *config, uint8_t val)</argsstring>
        <name>i2c_slave_write_received_cb_t</name>
        <briefdescription>
<para>Function called when a write to the device is continued. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when it completes reception of a byte of data in an ongoing write operation to the device.</para>
<para>A success return shall cause the controller to ACK the next byte received. An error return shall cause the controller to NACK the next byte received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte received by the controller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if more data can be accepted, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="238" column="9" bodyfile="include/drivers/i2c.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1ga2fcb4c6f2cf5d72406715ce00af621a2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_read_requested_cb_t) (struct i2c_slave_config *config, uint8_t *val)</definition>
        <argsstring>)(struct i2c_slave_config *config, uint8_t *val)</argsstring>
        <name>i2c_slave_read_requested_cb_t</name>
        <briefdescription>
<para>Function called when a read from the device is initiated. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus completes a start condition for a read operation from the address associated with a particular device.</para>
<para>The value returned in <computeroutput>*val</computeroutput> will be transmitted. A success return shall cause the controller to react to additional read operations. An error return shall cause the controller to ignore bus operations until a new start condition is received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage for the first byte of data to return for the read request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if more data can be requested, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="260" column="9" bodyfile="include/drivers/i2c.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1ga6a5f74bc6673f7d88e01457818ac2c74" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_read_processed_cb_t) (struct i2c_slave_config *config, uint8_t *val)</definition>
        <argsstring>)(struct i2c_slave_config *config, uint8_t *val)</argsstring>
        <name>i2c_slave_read_processed_cb_t</name>
        <briefdescription>
<para>Function called when a read from the device is continued. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus is ready to provide additional data for a read operation from the address associated with the device device.</para>
<para>The value returned in <computeroutput>*val</computeroutput> will be transmitted. A success return shall cause the controller to react to additional read operations. An error return shall cause the controller to ignore bus operations until a new start condition is received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage for the next byte of data to return for the read request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if data has been provided, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="282" column="9" bodyfile="include/drivers/i2c.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__i2c__interface_1ga76cd96ad8d9109151f544fc5ecaa6d36" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* i2c_slave_stop_cb_t) (struct i2c_slave_config *config)</definition>
        <argsstring>)(struct i2c_slave_config *config)</argsstring>
        <name>i2c_slave_stop_cb_t</name>
        <briefdescription>
<para>Function called when a stop condition is observed after a start condition addressed to a particular device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is invoked by the controller when the bus is ready to provide additional data for a read operation from the address associated with the device device. After the function returns the controller shall enter a state where it is ready to react to new start conditions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration structure associated with the device to which the operation is addressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ignored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="299" column="9" bodyfile="include/drivers/i2c.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__i2c__interface_1gab2a84398805e2be7662e9ae9cd4f9299" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_xfer_stats</definition>
        <argsstring>(const struct device *dev, struct i2c_msg *msgs, uint8_t num_msgs)</argsstring>
        <name>i2c_xfer_stats</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <briefdescription>
<para>Updates the i2c stats for i2c transfers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device to update stats for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of i2c_msgs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="378" column="20" bodyfile="include/drivers/i2c.h" bodystart="378" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga75326a6f38c011d35df9f3e72f2259e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_configure</definition>
        <argsstring>(const struct device *dev, uint32_t dev_config)</argsstring>
        <name>i2c_configure</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>dev_config</declname>
        </param>
        <briefdescription>
<para>Configure operation of a host controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit-packed 32-bit value to the device runtime configuration for the I2C controller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="507" column="6" declfile="include/drivers/i2c.h" declline="507" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga6858e0f1a942b22964105135c334baed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_get_config</definition>
        <argsstring>(const struct device *dev, uint32_t *dev_config)</argsstring>
        <name>i2c_get_config</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>dev_config</declname>
        </param>
        <briefdescription>
<para>Get configuration of a host controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a way to get current configuration. It is allowed to call the function before i2c_configure, because some I2C ports can be configured during init process. However, if the I2C port is not configured, i2c_get_config returns an error.</para>
<para>i2c_get_config can return cached config or probe hardware, but it has to be up to date with current configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to return bit-packed 32-bit value of the I2C controller configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ERANGE</parametername>
</parameternamelist>
<parameterdescription>
<para>Configured I2C frequency is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If get config is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="538" column="6" declfile="include/drivers/i2c.h" declline="538" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_transfer</definition>
        <argsstring>(const struct device *dev, struct i2c_msg *msgs, uint8_t num_msgs, uint16_t addr)</argsstring>
        <name>i2c_transfer</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Perform data transfer to another I2C device in master mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to perform data transfer to another I2C device synchronously. Use <ref refid="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" kindref="member">i2c_read()</ref>/i2c_write() for simple read or write.</para>
<para>The array of message <emphasis>msgs</emphasis> must not be NULL. The number of message <emphasis>num_msgs</emphasis> may be zero,in which case no transfer occurs.</para>
<para><simplesect kind="note"><para>Not all scatter/gather transactions can be supported by all drivers. As an example, a gather write (multiple consecutive <computeroutput><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref></computeroutput> buffers all configured for <computeroutput>I2C_MSG_WRITE</computeroutput>) may be packed into a single transaction by some drivers, but others may emit each fragment as a distinct write transaction, which will not produce the same behavior. See the documentation of <computeroutput>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref></computeroutput> for limitations on support for multi-message bus transactions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of messages to transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of messages to transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C target device.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="578" column="6" declfile="include/drivers/i2c.h" declline="578" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga8dce931e2dd637d811ff651062cec17b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_transfer_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, struct i2c_msg *msgs, uint8_t num_msgs)</argsstring>
        <name>i2c_transfer_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <briefdescription>
<para>Perform data transfer to another I2C device in master mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_transfer(spec-&gt;bus, msgs, num_msgs, spec-&gt;addr);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of messages to transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of messages to transfer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga2958e6fe92ffb17851052d5c9a5c058e" kindref="member">i2c_transfer()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="609" column="19" bodyfile="include/drivers/i2c.h" bodystart="609" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga93117c531c39259d89ab69d52bbde85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_recover_bus</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>i2c_recover_bus</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Recover the I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempt to recover the I2C bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If bus is not clear after recovery attempt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If bus recovery is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="627" column="6" declfile="include/drivers/i2c.h" declline="627" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_slave_register</definition>
        <argsstring>(const struct device *dev, struct i2c_slave_config *cfg)</argsstring>
        <name>i2c_slave_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Registers the provided config as Slave device of a controller. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable I2C slave mode for the &apos;dev&apos; I2C bus driver using the provided &apos;config&apos; struct containing the functions and parameters to send bus events. The I2C slave will be registered at the address provided as &apos;address&apos; struct member. Addressing mode - 7 or 10 bit - depends on the &apos;flags&apos; struct member. Any I2C bus events related to the slave mode will be passed onto I2C slave device driver via a set of callback functions provided in the &apos;callbacks&apos; struct member.</para>
<para>Most of the existing hardware allows simultaneous support for master and slave mode. This is however not guaranteed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in slave mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Config struct with functions and parameters used by the I2C driver to send bus events</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If slave mode is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="665" column="19" bodyfile="include/drivers/i2c.h" bodystart="665" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gaee67eefa3f8cb078c14ff0a3aab2527c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_slave_unregister</definition>
        <argsstring>(const struct device *dev, struct i2c_slave_config *cfg)</argsstring>
        <name>i2c_slave_unregister</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structi2c__slave__config" kindref="compound">i2c_slave_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Unregisters the provided config as Slave device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine disables I2C slave mode for the &apos;dev&apos; I2C bus driver using the provided &apos;config&apos; struct containing the functions and parameters to send bus events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in slave mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Config struct with functions and parameters used by the I2C driver to send bus events</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If slave mode is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="694" column="19" bodyfile="include/drivers/i2c.h" bodystart="694" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gab8f2b9e19ceb0ebc15fdd8fc2bf304a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_slave_driver_register</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>i2c_slave_driver_register</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Instructs the I2C Slave device to register itself to the I2C Controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine instructs the I2C Slave device to register itself to the I2C Controller via its parent controller&apos;s <ref refid="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" kindref="member">i2c_slave_register()</ref> API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the I2C slave device (not itself an I2C controller).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="720" column="6" declfile="include/drivers/i2c.h" declline="720" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga5fce9f78a267f638b111c19cac242278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_slave_driver_unregister</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>i2c_slave_driver_unregister</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Instructs the I2C Slave device to unregister itself from the I2C Controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine instructs the I2C Slave device to unregister itself from the I2C Controller via its parent controller&apos;s <ref refid="group__i2c__interface_1ga2b3b52d19b1fe12c6c693bef6f2106ce" kindref="member">i2c_slave_register()</ref> API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the I2C slave device (not itself an I2C controller).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If parameters are invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="743" column="6" declfile="include/drivers/i2c.h" declline="743" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write</definition>
        <argsstring>(const struct device *dev, const uint8_t *buf, uint32_t num_bytes, uint16_t addr)</argsstring>
        <name>i2c_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Write a set amount of data to an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes a set amount of data synchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to the target I2C device for writing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="771" column="19" bodyfile="include/drivers/i2c.h" bodystart="771" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga2d17b714ba6ebe47d7bdfcb1cf97e44f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, const uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_write_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Write a set amount of data to an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_write(spec-&gt;bus, buf, num_bytes, spec-&gt;addr);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" kindref="member">i2c_write()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="796" column="19" bodyfile="include/drivers/i2c.h" bodystart="796" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_read</definition>
        <argsstring>(const struct device *dev, uint8_t *buf, uint32_t num_bytes, uint16_t addr)</argsstring>
        <name>i2c_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Read a set amount of data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads a set amount of data synchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device being read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="816" column="19" bodyfile="include/drivers/i2c.h" bodystart="816" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga5cf80d20dca0d5f1d16e16c151f57ef6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_read_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_read_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Read a set amount of data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_read(spec-&gt;bus, buf, num_bytes, spec-&gt;addr);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga935d1fdcbf9a40c9a673aa8977048ee7" kindref="member">i2c_read()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="841" column="19" bodyfile="include/drivers/i2c.h" bodystart="841" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write_read</definition>
        <argsstring>(const struct device *dev, uint16_t addr, const void *write_buf, size_t num_write, void *read_buf, size_t num_read)</argsstring>
        <name>i2c_write_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>write_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_write</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>read_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_read</declname>
        </param>
        <briefdescription>
<para>Write then read data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This supports the common operation &quot;this is what I want&quot;, &quot;now give
it to me&quot; transaction pair through a combined write-then-read bus transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to storage for read data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_read</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>negative</parametername>
</parameternamelist>
<parameterdescription>
<para>on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="865" column="19" bodyfile="include/drivers/i2c.h" bodystart="865" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga301733586dcc2a353bdf149b49df5758" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_write_read_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, const void *write_buf, size_t num_write, void *read_buf, size_t num_read)</argsstring>
        <name>i2c_write_read_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>write_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_write</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>read_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_read</declname>
        </param>
        <briefdescription>
<para>Write then read data from an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_write_read(spec-&gt;bus, spec-&gt;addr,
               write_buf, num_write,
               read_buf, num_read);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to storage for read data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_read</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="899" column="19" bodyfile="include/drivers/i2c.h" bodystart="899" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga4bbb79898f53d0a2fad1bd302369ae9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_read</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t start_addr, uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Read multiple bytes from an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads multiple bytes from an internal address of an I2C device synchronously.</para>
<para>Instances of this may be replaced by <ref refid="group__i2c__interface_1ga1273a9f8bdb002e0d6ece3a8c893a709" kindref="member">i2c_write_read()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address from which the data is being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes being read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="926" column="19" bodyfile="include/drivers/i2c.h" bodystart="926" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga9d2654bbf80f4d253532adaec8566fc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_read_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t start_addr, uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_read_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Read multiple bytes from an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_burst_read(spec-&gt;bus, spec-&gt;addr, start_addr, buf, num_bytes);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address from which the data is being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga4bbb79898f53d0a2fad1bd302369ae9e" kindref="member">i2c_burst_read()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="951" column="19" bodyfile="include/drivers/i2c.h" bodystart="951" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gaf995812f31e7bf1ea7f203905db13822" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_write</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t start_addr, const uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Write multiple bytes to an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes multiple bytes to an internal address of an I2C device synchronously.</para>
<para><simplesect kind="warning"><para>The combined write synthesized by this API may not be supported on all I2C devices. Uses of this API may be made more portable by replacing them with calls to <ref refid="group__i2c__interface_1ga2cc5f49493dce89e128ccbfa9d6149a0" kindref="member">i2c_write()</ref> passing a buffer containing the combined address and data.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address to which the data is being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes being written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="981" column="19" bodyfile="include/drivers/i2c.h" bodystart="981" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga0e590c99d3b9c1a7dd8174a318ee5a7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_burst_write_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t start_addr, const uint8_t *buf, uint32_t num_bytes)</argsstring>
        <name>i2c_burst_write_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Write multiple bytes to an internal address of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_burst_write(spec-&gt;bus, spec-&gt;addr, start_addr, buf, num_bytes);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address to which the data is being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool from which the data is transferred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes being written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1gaf995812f31e7bf1ea7f203905db13822" kindref="member">i2c_burst_write()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1014" column="19" bodyfile="include/drivers/i2c.h" bodystart="1014" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_read_byte</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t reg_addr, uint8_t *value)</argsstring>
        <name>i2c_reg_read_byte</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads the value of an 8-bit internal register of an I2C device synchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved register value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1038" column="19" bodyfile="include/drivers/i2c.h" bodystart="1038" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga6fc14d75c41b8c8d9dd2f77c59533640" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_read_byte_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t reg_addr, uint8_t *value)</argsstring>
        <name>i2c_reg_read_byte_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_reg_read_byte(spec-&gt;bus, spec-&gt;addr, reg_addr, value);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool that stores the retrieved register value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1gaf8d1722ff4ebe97122293aef6ccf332a" kindref="member">i2c_reg_read_byte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1060" column="19" bodyfile="include/drivers/i2c.h" bodystart="1060" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_write_byte</definition>
        <argsstring>(const struct device *dev, uint16_t dev_addr, uint8_t reg_addr, uint8_t value)</argsstring>
        <name>i2c_reg_write_byte</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes a value to an 8-bit internal register of an I2C device synchronously.</para>
<para><simplesect kind="note"><para>This function internally combines the register and value into a single bus transaction.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written to internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1084" column="19" bodyfile="include/drivers/i2c.h" bodystart="1084" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga664cd76bf4fae0dba848f5c284699a04" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_write_byte_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t reg_addr, uint8_t value)</argsstring>
        <name>i2c_reg_write_byte_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_reg_write_byte(spec-&gt;bus, spec-&gt;addr, reg_addr, value);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written to internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1ga687a0da74c22b299b66db8198c6fdcb1" kindref="member">i2c_reg_write_byte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1106" column="19" bodyfile="include/drivers/i2c.h" bodystart="1106" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1gad07710d37bf6bd4fa6ccfe62be625eb4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_update_byte</definition>
        <argsstring>(const struct device *dev, uint8_t dev_addr, uint8_t reg_addr, uint8_t mask, uint8_t value)</argsstring>
        <name>i2c_reg_update_byte</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Update internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine updates the value of a set of bits from an 8-bit internal register of an I2C device synchronously.</para>
<para><simplesect kind="note"><para>If the calculated new register value matches the value that was read this function will not generate a write operation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for an I2C controller driver configured in master mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C device for updating. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask for updating internal register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for updating internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1131" column="19" bodyfile="include/drivers/i2c.h" bodystart="1131" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga5000c5e49eabe712b5fd532d3842c3f5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int i2c_reg_update_byte_dt</definition>
        <argsstring>(const struct i2c_dt_spec *spec, uint8_t reg_addr, uint8_t mask, uint8_t value)</argsstring>
        <name>i2c_reg_update_byte_dt</name>
        <param>
          <type>const struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Update internal register of an I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to: <verbatim>i2c_reg_update_byte(spec-&gt;bus, spec-&gt;addr, reg_addr, mask, value);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C specification from devicetree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the internal register being updated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask for updating internal register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for updating internal register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a value from <ref refid="group__i2c__interface_1gad07710d37bf6bd4fa6ccfe62be625eb4" kindref="member">i2c_reg_update_byte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1166" column="19" bodyfile="include/drivers/i2c.h" bodystart="1166" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="group__i2c__interface_1ga685640115771a60564ae1c53c3308c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void i2c_dump_msgs</definition>
        <argsstring>(const char *name, const struct i2c_msg *msgs, uint8_t num_msgs, uint16_t addr)</argsstring>
        <name>i2c_dump_msgs</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const struct <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>num_msgs</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Dump out an I2C message. </para>
        </briefdescription>
        <detaileddescription>
<para>Dumps out a list of I2C messages. For any that are writes (W), the data is displayed in hex.</para>
<para>It looks something like this (with name &quot;testing&quot;):</para>
<para>D: I2C msg: testing, addr=56 D: W len=01: D: contents: D: 06 |. D: W len=0e: D: contents: D: 00 01 02 03 04 05 06 07 |........ D: 08 09 0a 0b 0c 0d |......</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this dump, displayed at the top. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of messages to dump. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of messages to dump. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C target device. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1196" column="6" declfile="include/drivers/i2c.h" declline="1196" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__i2c__interface_1ga5ca8c5fbb2caa99ab0b7007ce2c11633" prot="public" static="no">
        <name>I2C_SPEED_STANDARD</name>
        <initializer>(0x1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Standard Speed: 100 kHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="34" column="9" bodyfile="include/drivers/i2c.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaef9d097ed2b58676498a33f3cf76f38d" prot="public" static="no">
        <name>I2C_SPEED_FAST</name>
        <initializer>(0x2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Fast Speed: 400 kHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="37" column="9" bodyfile="include/drivers/i2c.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga9c867195c4a99615ed9c0011293a2155" prot="public" static="no">
        <name>I2C_SPEED_FAST_PLUS</name>
        <initializer>(0x3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Fast Plus Speed: 1 MHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="40" column="9" bodyfile="include/drivers/i2c.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gac7bce1bbfb422a123d3228e97e2cbb71" prot="public" static="no">
        <name>I2C_SPEED_HIGH</name>
        <initializer>(0x4U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C High Speed: 3.4 MHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="43" column="9" bodyfile="include/drivers/i2c.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga213468d14d1241632c957873cf2d9628" prot="public" static="no">
        <name>I2C_SPEED_ULTRA</name>
        <initializer>(0x5U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C Ultra Fast Speed: 5 MHz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="46" column="9" bodyfile="include/drivers/i2c.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" prot="public" static="no">
        <name>I2C_SPEED_SHIFT</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="48" column="9" bodyfile="include/drivers/i2c.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga6d64fdac5a2d9008e7856e670b3c4305" prot="public" static="no">
        <name>I2C_SPEED_SET</name>
        <param><defname>speed</defname></param>
        <initializer>						(((speed) &lt;&lt; <ref refid="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" kindref="member">I2C_SPEED_SHIFT</ref>) \
						&amp; <ref refid="group__i2c__interface_1gade41614d9cb3efd61b22eda9c1715e4c" kindref="member">I2C_SPEED_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="49" column="9" bodyfile="include/drivers/i2c.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gade41614d9cb3efd61b22eda9c1715e4c" prot="public" static="no">
        <name>I2C_SPEED_MASK</name>
        <initializer>(0x7U &lt;&lt; <ref refid="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" kindref="member">I2C_SPEED_SHIFT</ref>) /* 3 bits */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="51" column="9" bodyfile="include/drivers/i2c.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga0eda328bb70285895d09154f9a828040" prot="public" static="no">
        <name>I2C_SPEED_GET</name>
        <param><defname>cfg</defname></param>
        <initializer>						(((cfg) &amp; <ref refid="group__i2c__interface_1gade41614d9cb3efd61b22eda9c1715e4c" kindref="member">I2C_SPEED_MASK</ref>) \
						&gt;&gt; <ref refid="group__i2c__interface_1ga6d0aaaec30d1e64e1b4ad674423d131f" kindref="member">I2C_SPEED_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="52" column="9" bodyfile="include/drivers/i2c.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga66836d37196ce866681f506c44c8766d" prot="public" static="no">
        <name>I2C_ADDR_10_BITS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use 10-bit addressing. DEPRECATED - Use I2C_MSG_ADDR_10_BITS instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="56" column="9" bodyfile="include/drivers/i2c.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaf5b67041f761d0c4b62d6827239418e2" prot="public" static="no">
        <name>I2C_MODE_MASTER</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controller to act as Master. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="59" column="9" bodyfile="include/drivers/i2c.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gabb3ae5225cea677f3f3b36e4477ed045" prot="public" static="no">
        <name>I2C_DT_SPEC_GET</name>
        <param><defname>node_id</defname></param>
        <initializer>	{							     \
		.bus = <ref refid="group__device__model_1ga9a65996ce21f43acb7db061e23b48ec7" kindref="member">DEVICE_DT_GET</ref>(<ref refid="group__devicetree-generic-bus_1ga1082d31ac2dafdf9e085d4c23f2169dc" kindref="member">DT_BUS</ref>(node_id)),		     \
		.addr = <ref refid="group__devicetree-reg-prop_1gac6d8279c32351ced4c0ac7f32270974e" kindref="member">DT_REG_ADDR</ref>(node_id) \
	}</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> from devicetree. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper macro expands to a static initializer for a <computeroutput>struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref></computeroutput> by reading the relevant bus and address data from the devicetree.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree node identifier for the I2C device whose struct <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> to create an initializer for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="82" column="9" bodyfile="include/drivers/i2c.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga2197cbc5122f0d8b2e0788113bcb5963" prot="public" static="no">
        <name>I2C_DT_SPEC_INST_GET</name>
        <param><defname>inst</defname></param>
        <initializer>	<ref refid="group__i2c__interface_1gabb3ae5225cea677f3f3b36e4477ed045" kindref="member">I2C_DT_SPEC_GET</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst))</initializer>
        <briefdescription>
<para>Structure initializer for <ref refid="structi2c__dt__spec" kindref="compound">i2c_dt_spec</ref> from devicetree instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <computeroutput><ref refid="group__i2c__interface_1gabb3ae5225cea677f3f3b36e4477ed045" kindref="member">I2C_DT_SPEC_GET(DT_DRV_INST(inst))</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Devicetree instance number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="96" column="9" bodyfile="include/drivers/i2c.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaf622d3c4aa1c832f90fff7200bb33732" prot="public" static="no">
        <name>I2C_MSG_WRITE</name>
        <initializer>(0U &lt;&lt; 0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write message to I2C bus. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="105" column="9" bodyfile="include/drivers/i2c.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga6c3042e882e6a817a6498b7a4e1f0a95" prot="public" static="no">
        <name>I2C_MSG_READ</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read message from I2C bus. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="108" column="9" bodyfile="include/drivers/i2c.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaad55262ad277ee60b786372c71f217aa" prot="public" static="no">
        <name>I2C_MSG_STOP</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send STOP after this message. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="115" column="9" bodyfile="include/drivers/i2c.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga8c6cf7be2a04979fdb9d0b7dd9c4f831" prot="public" static="no">
        <name>I2C_MSG_RESTART</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RESTART I2C transaction for this message.</para>
<para><simplesect kind="note"><para>Not all I2C drivers have or require explicit support for this feature. Some drivers require this be present on a read message that follows a write, or vice-versa. Some drivers will merge adjacent fragments into a single transaction using this flag; some will not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="124" column="9" bodyfile="include/drivers/i2c.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga5569e8a3e4f6660928dfe443067c472c" prot="public" static="no">
        <name>I2C_MSG_ADDR_10_BITS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use 10-bit addressing for this message.</para>
<para><simplesect kind="note"><para>Not all SoC I2C implementations support this feature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="129" column="9" bodyfile="include/drivers/i2c.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gad751db45cf2dec40137ffdd088352a4a" prot="public" static="no">
        <name>I2C_SLAVE_FLAGS_ADDR_10_BITS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Slave device responds to 10-bit addressing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="200" column="9" bodyfile="include/drivers/i2c.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" prot="public" static="no">
        <name>I2C_DEVICE_DT_DEFINE</name>
        <param><defname>node_id</defname></param>
        <param><defname>init_fn</defname></param>
        <param><defname>pm_device</defname></param>
        <param><defname>data_ptr</defname></param>
        <param><defname>cfg_ptr</defname></param>
        <param><defname>level</defname></param>
        <param><defname>prio</defname></param>
        <param><defname>api_ptr</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_I2C_DEVICE_STATE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id)); \
	Z_I2C_INIT_FN(Z_DEVICE_DT_DEV_NAME(node_id), init_fn)		\
	Z_DEVICE_DEFINE(node_id, Z_DEVICE_DT_DEV_NAME(node_id),		\
			<ref refid="group__device__model_1gad864d7a50ee45285dacd68be1e5a49ce" kindref="member">DEVICE_DT_NAME</ref>(node_id),			\
			&amp;<ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(Z_DEVICE_DT_DEV_NAME(node_id), _init), \
			pm_device,					\
			data_ptr, cfg_ptr, level, prio,			\
			api_ptr,					\
			&amp;(Z_DEVICE_STATE_NAME(Z_DEVICE_DT_DEV_NAME(node_id)).devstate), \
			__VA_ARGS__)</initializer>
        <briefdescription>
<para>Like <ref refid="group__device__model_1gaac590af7705a3223968164406a483548" kindref="member">DEVICE_DT_DEFINE()</ref> with I2C specifics. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines a device which implements the I2C API. May generate a custom <ref refid="structdevice__state" kindref="compound">device_state</ref> container struct and init_fn wrapper when needed depending on I2C <verbatim>embed:rst:inline :kconfig:option:`CONFIG_I2C_STATS` </verbatim>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The devicetree node identifier.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the init function of the driver.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pm_device</parametername>
</parameternamelist>
<parameterdescription>
<para>PM device resources reference (NULL if device does not use PM).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device&apos;s private data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to the structure containing the configuration information for this instance of the driver.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority within the selected initialization level. See <ref refid="group__device__model_1ga1e50fdff086356a75b0e91179952cc8d" kindref="member">SYS_INIT()</ref> for details.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>api_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Provides an initial pointer to the API function struct used by the driver. Can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="457" column="9" bodyfile="include/drivers/i2c.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gabfd94bccb99bd1a958cd8d7902b2072a" prot="public" static="no">
        <name>I2C_DEVICE_DT_INST_DEFINE</name>
        <param><defname>inst</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE</ref>(<ref refid="group__devicetree-inst_1ga219f413efba2f4c0151468b9a25a8dc1" kindref="member">DT_DRV_INST</ref>(inst), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Like <ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE()</ref> for an instance of a DT_DRV_COMPAT compatible. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inst</parametername>
</parameternamelist>
<parameterdescription>
<para>instance number. This is replaced by <computeroutput><ref refid="mmio_8c_1a5d94980d4c538356e9abcf30eb73d1d4" kindref="member">DT_DRV_COMPAT(inst)</ref></computeroutput> in the call to <ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>other parameters as expected by <ref refid="group__i2c__interface_1gaf550b2d134994f1f5b0249a591fac1ec" kindref="member">I2C_DEVICE_DT_DEFINE()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="493" column="9" bodyfile="include/drivers/i2c.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga1ea3a529bda7d896262c97bf305641ac" prot="public" static="no">
        <name>I2C_DECLARE_CLIENT_CONFIG</name>
        <initializer>struct <ref refid="structi2c__client__config" kindref="compound">i2c_client_config</ref> i2c_client</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1204" column="9" bodyfile="include/drivers/i2c.h" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga29d683222a96276b7aee09ddab034af7" prot="public" static="no">
        <name>I2C_CLIENT</name>
        <param><defname>_master</defname></param>
        <param><defname>_addr</defname></param>
        <initializer>	.i2c_client = {				\
		.i2c_master = (_master),	\
		.i2c_addr = (_addr),		\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1206" column="9" bodyfile="include/drivers/i2c.h" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1ga2b42e3f282659da16ae5a8a6e569e8d9" prot="public" static="no">
        <name>I2C_GET_MASTER</name>
        <param><defname>_conf</defname></param>
        <initializer>((_conf)-&gt;i2c_client.i2c_master)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1212" column="9" bodyfile="include/drivers/i2c.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__i2c__interface_1gae26008d851b43232e04b32b1eb1c0dba" prot="public" static="no">
        <name>I2C_GET_ADDR</name>
        <param><defname>_conf</defname></param>
        <initializer>((_conf)-&gt;i2c_client.i2c_addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/i2c.h" line="1213" column="9" bodyfile="include/drivers/i2c.h" bodystart="1213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>I2C Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
