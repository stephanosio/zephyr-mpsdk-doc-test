<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__sched__tests" kind="group">
    <compoundname>kernel_sched_tests</compoundname>
    <title>Scheduling Tests</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__sched__tests_1ga26d08fc3b91cee16a29de99045d9db67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_unqueued</definition>
        <argsstring>(void)</argsstring>
        <name>test_unqueued</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the behavior of dealine_set when the thread is not queued. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a bunch of threads with scheduling delay which make the thread in unqueued state. The <ref refid="group__thread__apis_1gad887f16c1dd6f3247682a83beb22d1ce" kindref="member">k_thread_deadline_set()</ref> call should not make these threads run before there delay time pass. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/deadline/src/main.c" line="180" column="6" bodyfile="tests/kernel/sched/deadline/src/main.c" bodystart="180" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga9d41c0cba432ab7b6c38cbfe81b35b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_preempt</definition>
        <argsstring>(void)</argsstring>
        <name>test_preempt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test preemption. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/preempt/src/main.c" line="311" column="6" bodyfile="tests/kernel/sched/preempt/src/main.c" bodystart="311" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga43f9fb9bd47c18d171883a37f51d4d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_scheduling</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_scheduling</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the behavior of preemptive threads with different priorities. </para>
        </briefdescription>
        <detaileddescription>
<para>Create multiple threads of different priorities - all are preemptive, current thread is also made preemptive. Check how the threads get chance to execute based on their priorities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_priority_scheduling.c" line="68" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_priority_scheduling.c" bodystart="68" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga0c8ecd714cfe8b18c43a9c7b50e1f713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sched_is_preempt_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_sched_is_preempt_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the correctness of <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Create a preemptive thread, lock the scheduler and call <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref>. Unlock the scheduler and call <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> again. Create a cooperative thread and lock the scheduler <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> and unlock the scheduler and call <ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" kindref="member">k_is_preempt_thread()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c" line="68" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c" bodystart="68" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gadcaa67e72a6c021339110eb4ff1242e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate that the cooperative thread will not be preempted. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a cooperative thread with priority higher than the current cooperative thread. Make sure that the higher priority thread will not preempt the lower priority cooperative thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_priority.c" line="47" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="47" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gac04ad4372fb87d1c0cfa525ef5cb6940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate preemptiveness of preemptive thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a preemptive thread which is of priority lower than current thread. Current thread is made has preemptive. Make sure newly created thread is not preempted. Now create a preemptive thread which is of priority higher than current thread. Make sure newly created thread is preempted </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_priority.c" line="83" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="83" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga25b3cd1ed71cdb636f8d02f2b9f058d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_priority_preemptible_wait_prio</definition>
        <argsstring>(void)</argsstring>
        <name>test_priority_preemptible_wait_prio</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate scheduling sequence of preemptive threads with start delay. </para>
        </briefdescription>
        <detaileddescription>
<para>Create four preemptive threads which are of priority higher than current thread. Make sure that the highest priority and longest waiting thread is scheduled first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_priority.c" line="123" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="123" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga06468ec560826bb502b6d94712278cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bad_priorities</definition>
        <argsstring>(void)</argsstring>
        <name>test_bad_priorities</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validate checking priority values</para>
<para>Our test cases don&apos;t cover every outcome of whether a priority is valid, do so here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_priority.c" line="184" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_priority.c" bodystart="184" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga224c79245d2b7fff8648fa4d94b75c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_yield_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_yield_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the behavior of cooperative thread when it yields. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads of priority -2, -1 and 0. Yield the main thread which is cooperative. Check if all the threads gets executed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="99" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="99" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga0035834d2e4db3813ad4e8183e65fe32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sleep_cooperative</definition>
        <argsstring>(void)</argsstring>
        <name>test_sleep_cooperative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate the behavior of cooperative thread when it sleeps. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads of priority -2, -1 and 0. Put the main thread in timeout queue by calling <ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep()</ref> which is cooperative. Check if all the threads gets executed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="126" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="126" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga2154e8dce668a294824c0a13edfc3739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sleep_wakeup_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_sleep_wakeup_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads with main thread with priority 0 and other threads with -1, 0 ,+1 priority. Now -1 priority thread gets executed and it is made to sleep for 10 sec. Now, wake up the -1 priority thread and check if it starts executing.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="172" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="172" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gaf7dddee86d5a24ec7f8db1b0381c8970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_pending_thread_wakeup</definition>
        <argsstring>(void)</argsstring>
        <name>test_pending_thread_wakeup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> behavior on pending thread. </para>
        </briefdescription>
        <detaileddescription>
<para>The test creates a cooperative thread and let it wait for semaphore. Then calls <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref>. The <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> call should return gracefully without waking up the thread</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="207" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="207" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga29c073bdfd6c751628afe7ba9eda7502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_time_slicing_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_time_slicing_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate preemptive thread behavior with time slice. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads with -1, 0, and 1 as priority, setup time slice for threads with priority 0. Make sure the threads with equal priorities are executed in time slice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="242" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="242" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gabb7c9c0f75ed7b62f3e03a4e267e65f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_time_slicing_disable_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_time_slicing_disable_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check the behavior of preemptive thread with <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads with -1, 0, and 1 as priority, setup time slice for threads with priority 0. Make sure the threads with equal priorities are executed in time slice. Also run <ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> for 5 secs and check if other threads are not executed at that time.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga550b642e071480323e589866abb99c22" kindref="member">k_busy_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="281" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="281" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga5747d604fdb0a85e0d45c6530058ef24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_lock_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_lock_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the scheduler when preemptive threads are running. </para>
        </briefdescription>
        <detaileddescription>
<para>Create 3 threads and lock the scheduler. Make sure that the threads are not executed. Call <ref refid="group__thread__apis_1ga48d4b041790454da4d68ac8711f29657" kindref="member">k_sleep()</ref> and check if the threads have executed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="313" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="313" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga7b6a31f45b525d56ad33131daaf8adee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_unlock_preemptible</definition>
        <argsstring>(void)</argsstring>
        <name>test_unlock_preemptible</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate <ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref> and <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Lock the scheduler and create 3 threads. Check that the threads are not executed. Call <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> and check if the threads have executed.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref>, <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="348" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="348" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga4fcc88261fe2fb8292a5d8c059ce82ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_unlock_nested_sched_lock</definition>
        <argsstring>(void)</argsstring>
        <name>test_unlock_nested_sched_lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate nested <ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref> and <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>In a preemptive thread, lock the scheduler twice and create a cooperative thread. Call <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> and check the cooperative thread haven&apos;t executed. Unlock it again to see the thread have executed this time.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga4f0c5d0b9f279b12a4ad97db0c116a5f" kindref="member">k_sched_lock()</ref>, <ref refid="group__thread__apis_1ga7b26f64523cc4c36522cc828ccf85580" kindref="member">k_sched_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="385" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="385" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gab015586c36d9616495578d57be339631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_wakeup_expired_timer_thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_wakeup_expired_timer_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>validate <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> in some corner scenario </para>
        </briefdescription>
        <detaileddescription>
<para>trigger a timer and after expiration of timer call <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref>, even the thread is not in sleep state neither in pending state</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" line="434" column="6" bodyfile="tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c" bodystart="434" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga6a2dd1ce9277d13299bbcf4edfece202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_suspend_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_suspend_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> input param to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga66cf8682fb65870eceb5e57d667a8d4e" kindref="member">k_thread_suspend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/user_api.c" line="116" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga0031bfdb3c5051c053fd98ac4cd2424e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_resume_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_resume_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> input param to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga117b26f8569ec3045ead1fad1851663d" kindref="member">k_thread_resume()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/user_api.c" line="153" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="153" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga280a0acbd9dea9af67ee56b05fc4639d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_get_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_get_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga3a46ed8ad2c3b12416fafe11325f82b3" kindref="member">k_thread_priority_get()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set thread_k_thread_priority_get() param input to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para>thread_k_thread_priority_get() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/user_api.c" line="190" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga8c5f191cc509c98818f332daea80c7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_set_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_set_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> param input to NULL will trigger a fatal error.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/user_api.c" line="227" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1gac6dc9abbe00729f2054f72348b5a7e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_set_overmax</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_set_overmax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Check input param range overmax in userspace test.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/user_api.c" line="265" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="265" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga3beb62b6bd5c58af01c51bfd844da87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_thread_priority_set_upgrade</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_thread_priority_set_upgrade</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Check input param range fail in userspace test.</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga24e50a60c524d1eb22fe21cdf269b6a6" kindref="member">k_thread_priority_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/user_api.c" line="305" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__sched__tests_1ga2530535cc5b87a91008bb5fb6f519629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_k_wakeup_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_k_wakeup_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> API. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a thread and set <ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> input param to NULL will trigger a fatal error</para>
<para><simplesect kind="see"><para><ref refid="group__thread__apis_1ga9275a019c8ff3c7fe49a81f8c078157e" kindref="member">k_wakeup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/sched/schedule_api/src/user_api.c" line="342" column="6" bodyfile="tests/kernel/sched/schedule_api/src/user_api.c" bodystart="342" bodyend="351"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test scheduling. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
