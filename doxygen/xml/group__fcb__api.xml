<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__fcb__api" kind="group">
    <compoundname>fcb_api</compoundname>
    <title>fcb API</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__fcb__api_1gaeed5144438ee00d83c9b3d3b4b7490ea" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* fcb_walk_cb) (struct fcb_entry_ctx *loc_ctx, void *arg)</definition>
        <argsstring>)(struct fcb_entry_ctx *loc_ctx, void *arg)</argsstring>
        <name>fcb_walk_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FCB Walk callback function type.</para>
<para>Type of function which is expected to be called while walking over fcb entries thanks to a <ref refid="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" kindref="member">fcb_walk</ref> call.</para>
<para>Entry data can be read using <ref refid="group__flash__area__api_1ga7c55704b0c0061a4715470676114b127" kindref="member">flash_area_read()</ref>, using loc_ctx fields as arguments. If cb wants to stop the walk, it should return non-zero value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">loc_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information (full context) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>callback context, transferred from <ref refid="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" kindref="member">fcb_walk</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 continue walking, non-zero stop walking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="197" column="9" bodyfile="include/fs/fcb.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__fcb__api_1ga318d35b6f023bb4079aaf76c01a59b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_init</definition>
        <argsstring>(int f_area_id, struct fcb *fcb)</argsstring>
        <name>fcb_init</name>
        <param>
          <type>int</type>
          <declname>f_area_id</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize FCB instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">f_area_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of flash area where fcb storage resides. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="153" column="5" declfile="include/fs/fcb.h" declline="153" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga46a06d5c3bf945ba807b6960a354d744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_append</definition>
        <argsstring>(struct fcb *fcb, uint16_t len, struct fcb_entry *loc)</argsstring>
        <name>fcb_append</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends an entry to circular buffer.</para>
<para>When writing the contents for the entry, use loc-&gt;fe_sector and loc-&gt;fe_data_off with <ref refid="group__flash__area__api_1gaa56052f8d6bf4f6966752bc21f5cceb8" kindref="member">flash_area_write()</ref> to fcb <ref refid="structflash__area" kindref="compound">flash_area</ref>. When you&apos;re finished, call <ref refid="group__fcb__api_1ga2d8581e0784546fd73e4cd2f8baeebd9" kindref="member">fcb_append_finish()</ref> with loc as argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data which are expected to be written as the entry payload. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">loc</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="170" column="5" declfile="include/fs/fcb.h" declline="170" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga2d8581e0784546fd73e4cd2f8baeebd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_append_finish</definition>
        <argsstring>(struct fcb *fcb, struct fcb_entry *append_loc)</argsstring>
        <name>fcb_append_finish</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>append_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finishes entry append operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">append_loc</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="180" column="5" declfile="include/fs/fcb.h" declline="180" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga2e22f120b3f1d729f8e861f0c0e448fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_walk</definition>
        <argsstring>(struct fcb *fcb, struct flash_sector *sector, fcb_walk_cb cb, void *cb_arg)</argsstring>
        <name>fcb_walk</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>struct <ref refid="structflash__sector" kindref="compound">flash_sector</ref> *</type>
          <declname>sector</declname>
        </param>
        <param>
          <type><ref refid="group__fcb__api_1gaeed5144438ee00d83c9b3d3b4b7490ea" kindref="member">fcb_walk_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cb_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Walk over all entries in the FCB sector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sector</parametername>
</parameternamelist>
<parameterdescription>
<para>fcb sector to be walked. If null, traverse entire storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the function which gets called for every entry. If cb wants to stop the walk, it should return non-zero value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">cb_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>callback context, transferred to the callback implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative on failure (or transferred form callback return-value), positive transferred form callback return-value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="214" column="5" declfile="include/fs/fcb.h" declline="214" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gaeeeb1d66ebc6dcefde1e07c3d8bdf4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_getnext</definition>
        <argsstring>(struct fcb *fcb, struct fcb_entry *loc)</argsstring>
        <name>fcb_getnext</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next fcb entry location.</para>
<para>Function to obtain fcb entry location in relation to entry pointed by </para>
<para>loc. If loc-&gt;fe_sector is set and loc-&gt;fe_elem_off is not 0 function fetches next fcb entry location. If loc-&gt;fe_sector is NULL function fetches the oldest entry location within FCB storage. loc-&gt;fe_sector is set and loc-&gt;fe_elem_off is 0 function fetches the first entry location in the fcb sector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">loc</parametername>
</parameternamelist>
<parameterdescription>
<para>entry location information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="233" column="5" declfile="include/fs/fcb.h" declline="233" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gab749a92fa5890a35996c27f9f2b8f98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_rotate</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_rotate</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="243" column="5" declfile="include/fs/fcb.h" declline="243" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gaf26d681ddea9b22d06122184b5a09566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_append_to_scratch</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_append_to_scratch</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="255" column="5" declfile="include/fs/fcb.h" declline="255" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga2dec5f90b687466997eb25be43448daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_free_sector_cnt</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_free_sector_cnt</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get free sector count.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of free sectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="264" column="5" declfile="include/fs/fcb.h" declline="264" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1ga76d29d337d5e457f065ed897297ba6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_is_empty</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_is_empty</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether FCB has any data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive value if fcb is empty, otherwise 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="273" column="5" declfile="include/fs/fcb.h" declline="273" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gacf4b86d660b7f3a3b73477defd86590c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_offset_last_n</definition>
        <argsstring>(struct fcb *fcb, uint8_t entries, struct fcb_entry *last_n_entry)</argsstring>
        <name>fcb_offset_last_n</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>entries</declname>
        </param>
        <param>
          <type>struct <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> *</type>
          <declname>last_n_entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the fcb entry that gives back up to n entries at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">entries</parametername>
</parameternamelist>
<parameterdescription>
<para>number of fcb entries the user wants to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">last_n_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>last_n_entry the <ref refid="structfcb__entry" kindref="compound">fcb_entry</ref> to be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on there are any fcbs available; -ENOENT otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="284" column="5" declfile="include/fs/fcb.h" declline="284" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__fcb__api_1gab3d5c09980af72f0de1692682c8dfef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fcb_clear</definition>
        <argsstring>(struct fcb *fcb)</argsstring>
        <name>fcb_clear</name>
        <param>
          <type>struct <ref refid="structfcb" kindref="compound">fcb</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear fcb instance storage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>FCB instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/fs/fcb.h" line="294" column="5" declfile="include/fs/fcb.h" declline="294" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Flash Circular Buffer APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
