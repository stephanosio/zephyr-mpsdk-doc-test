<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="tty_8h" kind="file" language="C++">
    <compoundname>tty.h</compoundname>
    <includes refid="lib_2libc_2minimal_2include_2sys_2types_8h" local="no">sys/types.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">kernel.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/console/tty.h</label>
        <link refid="tty_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtty__serial" prot="public">tty_serial</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="tty_8h_1a5a880bb61f0bdb0f37c501acc0408d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tty_init</definition>
        <argsstring>(struct tty_serial *tty, const struct device *uart_dev)</argsstring>
        <name>tty_init</name>
        <param>
          <type>struct <ref refid="structtty__serial" kindref="compound">tty_serial</ref> *</type>
          <declname>tty</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>uart_dev</declname>
        </param>
        <briefdescription>
<para>Initialize serial port object (classically known as tty). </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;tty&quot; device provides support for buffered, interrupt-driven, timeout-controlled access to an underlying UART device. For completeness, it also support non-interrupt-driven, busy-polling access mode. After initialization, tty is in the &quot;most conservative&quot; unbuffered mode with infinite timeouts (this is guaranteed to work on any hardware). Users should configure buffers and timeouts as they need using functions <ref refid="tty_8h_1ad05b854f19b3bd97e2635bc8ebc07ce2" kindref="member">tty_set_rx_buf()</ref>, <ref refid="tty_8h_1af6383a47f82797af9a45bc81d84de1be" kindref="member">tty_set_tx_buf()</ref>, <ref refid="tty_8h_1a109fd8ee6b581a796d67025a0e33abde" kindref="member">tty_set_rx_timeout()</ref>, <ref refid="tty_8h_1a1c19c6ed8207ae711e047f9ae446e399" kindref="member">tty_set_tx_timeout()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tty</parametername>
</parameternamelist>
<parameterdescription>
<para>tty device structure to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uart_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying UART device to use (should support interrupt-driven operation)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, error code (&lt;0) otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/tty.h" line="52" column="5" declfile="include/console/tty.h" declline="52" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tty_8h_1a109fd8ee6b581a796d67025a0e33abde" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void tty_set_rx_timeout</definition>
        <argsstring>(struct tty_serial *tty, int32_t timeout)</argsstring>
        <name>tty_set_rx_timeout</name>
        <param>
          <type>struct <ref refid="structtty__serial" kindref="compound">tty_serial</ref> *</type>
          <declname>tty</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set receive timeout for tty device. </para>
        </briefdescription>
        <detaileddescription>
<para>Set timeout for getchar() operation. Default timeout after device initialization is SYS_FOREVER_MS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tty</parametername>
</parameternamelist>
<parameterdescription>
<para>tty device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds, or 0, or SYS_FOREVER_MS. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/tty.h" line="63" column="20" bodyfile="include/console/tty.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="tty_8h_1a1c19c6ed8207ae711e047f9ae446e399" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void tty_set_tx_timeout</definition>
        <argsstring>(struct tty_serial *tty, int32_t timeout)</argsstring>
        <name>tty_set_tx_timeout</name>
        <param>
          <type>struct <ref refid="structtty__serial" kindref="compound">tty_serial</ref> *</type>
          <declname>tty</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set transmit timeout for tty device. </para>
        </briefdescription>
        <detaileddescription>
<para>Set timeout for <ref refid="stdio_8h_1a9d9602e9b5b0c97228a16ea84a3541d8" kindref="member">putchar()</ref> operation, for a case when output buffer is full. Default timeout after device initialization is SYS_FOREVER_MS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tty</parametername>
</parameternamelist>
<parameterdescription>
<para>tty device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds, or 0, or SYS_FOREVER_MS. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/tty.h" line="77" column="20" bodyfile="include/console/tty.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="tty_8h_1ad05b854f19b3bd97e2635bc8ebc07ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tty_set_rx_buf</definition>
        <argsstring>(struct tty_serial *tty, void *buf, size_t size)</argsstring>
        <name>tty_set_rx_buf</name>
        <param>
          <type>struct <ref refid="structtty__serial" kindref="compound">tty_serial</ref> *</type>
          <declname>tty</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set receive buffer for tty device. </para>
        </briefdescription>
        <detaileddescription>
<para>Set receive buffer or switch to unbuffered operation for receive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tty</parametername>
</parameternamelist>
<parameterdescription>
<para>tty device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer, or NULL for unbuffered operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer buffer size, 0 for unbuffered operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, error code (&lt;0) otherwise: EINVAL: unsupported buffer (size) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/tty.h" line="93" column="5" declfile="include/console/tty.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tty_8h_1af6383a47f82797af9a45bc81d84de1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tty_set_tx_buf</definition>
        <argsstring>(struct tty_serial *tty, void *buf, size_t size)</argsstring>
        <name>tty_set_tx_buf</name>
        <param>
          <type>struct <ref refid="structtty__serial" kindref="compound">tty_serial</ref> *</type>
          <declname>tty</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set transmit buffer for tty device. </para>
        </briefdescription>
        <detaileddescription>
<para>Set transmit buffer or switch to unbuffered operation for transmit. Note that unbuffered mode is implicitly blocking, i.e. behaves as if tty_set_tx_timeout(SYS_FOREVER_MS) was set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tty</parametername>
</parameternamelist>
<parameterdescription>
<para>tty device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer, or NULL for unbuffered operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer buffer size, 0 for unbuffered operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, error code (&lt;0) otherwise: EINVAL: unsupported buffer (size) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/tty.h" line="108" column="5" declfile="include/console/tty.h" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tty_8h_1a90ec3fbbe5f0fad19361d23e821c960c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t tty_read</definition>
        <argsstring>(struct tty_serial *tty, void *buf, size_t size)</argsstring>
        <name>tty_read</name>
        <param>
          <type>struct <ref refid="structtty__serial" kindref="compound">tty_serial</ref> *</type>
          <declname>tty</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data from a tty device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tty</parametername>
</parameternamelist>
<parameterdescription>
<para>tty device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of bytes to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;0, number of actually read bytes (can be less than size param) =0, for EOF-like condition (e.g., break signaled) &lt;0, in case of error (e.g. -EAGAIN if timeout expired). errno variable is also set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/tty.h" line="121" column="9" declfile="include/console/tty.h" declline="121" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tty_8h_1af60d8a57ac3cb81a0a003a011a0f31e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t tty_write</definition>
        <argsstring>(struct tty_serial *tty, const void *buf, size_t size)</argsstring>
        <name>tty_write</name>
        <param>
          <type>struct <ref refid="structtty__serial" kindref="compound">tty_serial</ref> *</type>
          <declname>tty</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write data to tty device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tty</parametername>
</parameternamelist>
<parameterdescription>
<para>tty device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of bytes to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>=&gt;0, number of actually written bytes (can be less than size param) &lt;0, in case of error (e.g. -EAGAIN if timeout expired). errno variable is also set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/tty.h" line="133" column="9" declfile="include/console/tty.h" declline="133" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>Linaro<sp/>Limited</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_CONSOLE_TTY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_CONSOLE_TTY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="structtty__serial" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>{</highlight></codeline>
<codeline lineno="19" refid="structtty__serial_1a6264c52c87ee712552dc5278bfd2cade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdevice" kindref="compound">device</ref><sp/>*<ref refid="structtty__serial_1a6264c52c87ee712552dc5278bfd2cade" kindref="member">uart_dev</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structtty__serial_1a7a3e934bc78b098cbe65789c58dd6076" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="structtty__serial_1a7a3e934bc78b098cbe65789c58dd6076" kindref="member">rx_sem</ref>;</highlight></codeline>
<codeline lineno="22" refid="structtty__serial_1a21484e1aa96bdf6281fdca4abbcc076e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structtty__serial_1a21484e1aa96bdf6281fdca4abbcc076e" kindref="member">rx_ringbuf</ref>;</highlight></codeline>
<codeline lineno="23" refid="structtty__serial_1a6a05698de6e3a1e1e17b74e3f2c976ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structtty__serial_1a6a05698de6e3a1e1e17b74e3f2c976ea" kindref="member">rx_ringbuf_sz</ref>;</highlight></codeline>
<codeline lineno="24" refid="structtty__serial_1a6fb2a066e70acd11257f525909463997" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structtty__serial_1a6fb2a066e70acd11257f525909463997" kindref="member">rx_get</ref>,<sp/><ref refid="structtty__serial_1a4c86a08aa09213f67b4695644d9379b6" kindref="member">rx_put</ref>;</highlight></codeline>
<codeline lineno="25" refid="structtty__serial_1a78c894c6cf667bd81db68d4cfbac76fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="structtty__serial_1a78c894c6cf667bd81db68d4cfbac76fe" kindref="member">rx_timeout</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structtty__serial_1adf19fb8b5d7446037ae316ec1f72e759" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">k_sem<sp/><ref refid="structtty__serial_1adf19fb8b5d7446037ae316ec1f72e759" kindref="member">tx_sem</ref>;</highlight></codeline>
<codeline lineno="28" refid="structtty__serial_1ad06fda068fe0cc27be516e6533ecef83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structtty__serial_1ad06fda068fe0cc27be516e6533ecef83" kindref="member">tx_ringbuf</ref>;</highlight></codeline>
<codeline lineno="29" refid="structtty__serial_1a37e46e6176c0726465b558bedadfd890" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structtty__serial_1a37e46e6176c0726465b558bedadfd890" kindref="member">tx_ringbuf_sz</ref>;</highlight></codeline>
<codeline lineno="30" refid="structtty__serial_1a71d580fe2224a5c68ba02eb089df3bad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structtty__serial_1a71d580fe2224a5c68ba02eb089df3bad" kindref="member">tx_get</ref>,<sp/><ref refid="structtty__serial_1a63f204b21deb4381157d7f6b46e0d922" kindref="member">tx_put</ref>;</highlight></codeline>
<codeline lineno="31" refid="structtty__serial_1ac3c6954da53e2e89bc6fa56af80ef8b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="structtty__serial_1ac3c6954da53e2e89bc6fa56af80ef8b3" kindref="member">tx_timeout</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="tty_8h_1a5a880bb61f0bdb0f37c501acc0408d32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tty_8h_1a5a880bb61f0bdb0f37c501acc0408d32" kindref="member">tty_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>*tty,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*uart_dev);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="tty_8h_1a109fd8ee6b581a796d67025a0e33abde" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tty_8h_1a109fd8ee6b581a796d67025a0e33abde" kindref="member">tty_set_rx_timeout</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>*tty,<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tty-&gt;<ref refid="structtty__serial_1a78c894c6cf667bd81db68d4cfbac76fe" kindref="member">rx_timeout</ref><sp/>=<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="tty_8h_1a1c19c6ed8207ae711e047f9ae446e399" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tty_8h_1a1c19c6ed8207ae711e047f9ae446e399" kindref="member">tty_set_tx_timeout</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>*tty,<sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tty-&gt;<ref refid="structtty__serial_1ac3c6954da53e2e89bc6fa56af80ef8b3" kindref="member">tx_timeout</ref><sp/>=<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="tty_8h_1ad05b854f19b3bd97e2635bc8ebc07ce2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tty_8h_1ad05b854f19b3bd97e2635bc8ebc07ce2" kindref="member">tty_set_rx_buf</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>*tty,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="tty_8h_1af6383a47f82797af9a45bc81d84de1be" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tty_8h_1af6383a47f82797af9a45bc81d84de1be" kindref="member">tty_set_tx_buf</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>*tty,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="tty_8h_1a90ec3fbbe5f0fad19361d23e821c960c" refkind="member"><highlight class="normal"><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="tty_8h_1a90ec3fbbe5f0fad19361d23e821c960c" kindref="member">tty_read</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>*tty,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="tty_8h_1af60d8a57ac3cb81a0a003a011a0f31e5" refkind="member"><highlight class="normal"><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="tty_8h_1af60d8a57ac3cb81a0a003a011a0f31e5" kindref="member">tty_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtty__serial" kindref="compound">tty_serial</ref><sp/>*tty,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_CONSOLE_TTY_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/console/tty.h"/>
  </compounddef>
</doxygen>
