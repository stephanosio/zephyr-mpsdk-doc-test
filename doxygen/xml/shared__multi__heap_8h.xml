<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="shared__multi__heap_8h" kind="file" language="C++">
    <compoundname>shared_multi_heap.h</compoundname>
    <includedby refid="mem__heap_2shared__multi__heap_2src_2main_8c" local="no">tests/kernel/mem_heap/shared_multi_heap/src/main.c</includedby>
    <invincdepgraph>
      <node id="1">
        <label>include/multi_heap/shared_multi_heap.h</label>
        <link refid="shared__multi__heap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tests/kernel/mem_heap/shared_multi_heap/src/main.c</label>
        <link refid="mem__heap_2shared__multi__heap_2src_2main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structshared__multi__heap__region" prot="public">shared_multi_heap_region</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__shared__multi__heap_1gad3617533a50c35c71f7c476b13061ae1" prot="public" static="no" strong="no">
        <type></type>
        <name>smh_reg_attr</name>
        <enumvalue id="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1afb2e0bb04859ff231dee953279b8bf3a" prot="public">
          <name>SMH_REG_ATTR_CACHEABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>cacheable </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1a2625b9b8aea429ab748f9e39d55f0dff" prot="public">
          <name>SMH_REG_ATTR_NON_CACHEABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>non-cacheable </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1a0a41317e94fcdf459708be4a78b74c91" prot="public">
          <name>SMH_REG_ATTR_NUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>must be the last item </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Memory region attributes / capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para>** This list needs to be kept in sync with shared-multi-heap.yaml ** </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/multi_heap/shared_multi_heap.h" line="36" column="1" bodyfile="include/multi_heap/shared_multi_heap.h" bodystart="36" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__shared__multi__heap_1ga88c9661dd24b8b6e974ee4ca2762d201" prot="public" static="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>typedef bool(* smh_init_reg_fn_t) (struct shared_multi_heap_region *reg, uint8_t **v_addr, size_t *size)</definition>
        <argsstring>)(struct shared_multi_heap_region *reg, uint8_t **v_addr, size_t *size)</argsstring>
        <name>smh_init_reg_fn_t</name>
        <briefdescription>
<para>Region init function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a user-provided function whose responsibility is to setup or initialize the memory region passed in input before this is added to the heap pool by the shared multi-heap manager. This function can be used by architectures using MMU / MPU that must correctly map the region before this is considered valid and accessible.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the SMH region structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address obtained after mapping. For non-MMU architectures this value is the physical address of the region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the region after mapping.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the region is ready to be added to the heap pool. False if the region must be skipped. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/multi_heap/shared_multi_heap.h" line="78" column="9" bodyfile="include/multi_heap/shared_multi_heap.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__shared__multi__heap_1ga59c5c0d6bb27c49bf58d31485bb23e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int shared_multi_heap_pool_init</definition>
        <argsstring>(smh_init_reg_fn_t smh_init_reg_fn)</argsstring>
        <name>shared_multi_heap_pool_init</name>
        <param>
          <type><ref refid="group__shared__multi__heap_1ga88c9661dd24b8b6e974ee4ca2762d201" kindref="member">smh_init_reg_fn_t</ref></type>
          <declname>smh_init_reg_fn</declname>
        </param>
        <briefdescription>
<para>Init the pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the shared multi-heap pool and hook-up the region init function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smh_init_reg_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function pointer to the region init function. Can be NULL for non-MPU / non-MMU architectures. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/multi_heap/shared_multi_heap.h" line="90" column="5" declfile="include/multi_heap/shared_multi_heap.h" declline="90" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__shared__multi__heap_1gadfe601d1fe68d1833c97b078381d680a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * shared_multi_heap_alloc</definition>
        <argsstring>(enum smh_reg_attr attr, size_t bytes)</argsstring>
        <name>shared_multi_heap_alloc</name>
        <param>
          <type>enum <ref refid="group__shared__multi__heap_1gad3617533a50c35c71f7c476b13061ae1" kindref="member">smh_reg_attr</ref></type>
          <declname>attr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocate memory from the memory shared multi-heap pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of memory of the specified size in bytes and with a specified capability / attribute.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Capability / attribute requested for the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested size of the allocation in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A valid pointer to heap memory or NULL if no memory is available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/multi_heap/shared_multi_heap.h" line="103" column="6" declfile="include/multi_heap/shared_multi_heap.h" declline="103" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__shared__multi__heap_1gab968bf26483d22939aaa7c2b1b6743ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shared_multi_heap_free</definition>
        <argsstring>(void *block)</argsstring>
        <name>shared_multi_heap_free</name>
        <param>
          <type>void *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>Free memory from the shared multi-heap pool. </para>
        </briefdescription>
        <detaileddescription>
<para>Free the passed block of memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>Block to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/multi_heap/shared_multi_heap.h" line="112" column="6" declfile="include/multi_heap/shared_multi_heap.h" declline="112" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Carlo<sp/>Caione,<sp/>&lt;ccaione@baylibre.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_MULTI_HEAP_MANAGER_SMH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_MULTI_HEAP_MANAGER_SMH_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="group__shared__multi__heap_1gad3617533a50c35c71f7c476b13061ae1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shared__multi__heap_1gad3617533a50c35c71f7c476b13061ae1" kindref="member">smh_reg_attr</ref><sp/>{</highlight></codeline>
<codeline lineno="38" refid="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1afb2e0bb04859ff231dee953279b8bf3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1afb2e0bb04859ff231dee953279b8bf3a" kindref="member">SMH_REG_ATTR_CACHEABLE</ref>,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1a2625b9b8aea429ab748f9e39d55f0dff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1a2625b9b8aea429ab748f9e39d55f0dff" kindref="member">SMH_REG_ATTR_NON_CACHEABLE</ref>,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1a0a41317e94fcdf459708be4a78b74c91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__shared__multi__heap_1ggad3617533a50c35c71f7c476b13061ae1a0a41317e94fcdf459708be4a78b74c91" kindref="member">SMH_REG_ATTR_NUM</ref>,</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structshared__multi__heap__region" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshared__multi__heap__region" kindref="compound">shared_multi_heap_region</ref><sp/>{</highlight></codeline>
<codeline lineno="55" refid="structshared__multi__heap__region_1a9e6389b1c7ed71faa345e11ef42f22b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shared__multi__heap_1gad3617533a50c35c71f7c476b13061ae1" kindref="member">smh_reg_attr</ref><sp/><ref refid="structshared__multi__heap__region_1a9e6389b1c7ed71faa345e11ef42f22b8" kindref="member">attr</ref>;</highlight></codeline>
<codeline lineno="56" refid="structshared__multi__heap__region_1a905df61648eaa18cebf53bb10dcde91d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="structshared__multi__heap__region_1a905df61648eaa18cebf53bb10dcde91d" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="57" refid="structshared__multi__heap__region_1a3f6565062f70b2c8d25c3a0be579482c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structshared__multi__heap__region_1a3f6565062f70b2c8d25c3a0be579482c" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__shared__multi__heap_1ga88c9661dd24b8b6e974ee4ca2762d201" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref><sp/>(*<ref refid="group__shared__multi__heap_1ga88c9661dd24b8b6e974ee4ca2762d201" kindref="member">smh_init_reg_fn_t</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structshared__multi__heap__region" kindref="compound">shared_multi_heap_region</ref><sp/>*<ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1a698b4ae5d990c4030b61afb7e057cb03" kindref="member">reg</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>**<ref refid="mem__heap_2shared__multi__heap_2src_2main_8c_1ae392315a60a2a6743596eaa8dc276977" kindref="member">v_addr</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<ref refid="structshared__multi__heap__region_1a3f6565062f70b2c8d25c3a0be579482c" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="group__shared__multi__heap_1ga59c5c0d6bb27c49bf58d31485bb23e04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__shared__multi__heap_1ga59c5c0d6bb27c49bf58d31485bb23e04" kindref="member">shared_multi_heap_pool_init</ref>(<ref refid="group__shared__multi__heap_1ga88c9661dd24b8b6e974ee4ca2762d201" kindref="member">smh_init_reg_fn_t</ref><sp/>smh_init_reg_fn);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="group__shared__multi__heap_1gadfe601d1fe68d1833c97b078381d680a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__shared__multi__heap_1gadfe601d1fe68d1833c97b078381d680a" kindref="member">shared_multi_heap_alloc</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__shared__multi__heap_1gad3617533a50c35c71f7c476b13061ae1" kindref="member">smh_reg_attr</ref><sp/><ref refid="structshared__multi__heap__region_1a9e6389b1c7ed71faa345e11ef42f22b8" kindref="member">attr</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="group__shared__multi__heap_1gab968bf26483d22939aaa7c2b1b6743ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__shared__multi__heap_1gab968bf26483d22939aaa7c2b1b6743ad" kindref="member">shared_multi_heap_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__threads__cancel__abort_8c_1ad9dc995b581e61d5b3a7f92a0a600526" kindref="member">block</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_MULTI_HEAP_MANAGER_SMH_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/multi_heap/shared_multi_heap.h"/>
  </compounddef>
</doxygen>
