<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__adc__interface" kind="group">
    <compoundname>adc_interface</compoundname>
    <title>ADC driver APIs</title>
    <innerclass refid="structadc__channel__cfg" prot="public">adc_channel_cfg</innerclass>
    <innerclass refid="structadc__sequence__options" prot="public">adc_sequence_options</innerclass>
    <innerclass refid="structadc__sequence" prot="public">adc_sequence</innerclass>
    <innerclass refid="structadc__driver__api" prot="public">adc_driver_api</innerclass>
    <innergroup refid="group__adc__emul">Emulated ADC</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__adc__interface_1ga306f882323c66b263d3797124ca5f3a0" prot="public" static="no" strong="no">
        <type></type>
        <name>adc_gain</name>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0abb26700162bfc68a2beadc1e78b758c1" prot="public">
          <name>ADC_GAIN_1_6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 1/6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a198c40369bddfc3c0eaa8ae3bb1be0c9" prot="public">
          <name>ADC_GAIN_1_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 1/5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0afa55c5a94bfebb9a70638e9ab32eabf8" prot="public">
          <name>ADC_GAIN_1_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 1/4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0af896fe01119930815ac78a4ee87635ee" prot="public">
          <name>ADC_GAIN_1_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 1/3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a2d36559128c21834d1188aed43d236d2" prot="public">
          <name>ADC_GAIN_1_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 1/2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0ac720b0730cfef7c55f97777fec75dc62" prot="public">
          <name>ADC_GAIN_2_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 2/3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a76b3097b0b38d33266d36f5a5d534e54" prot="public">
          <name>ADC_GAIN_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0aff4b7cc577e333a3a684e4e56b124868" prot="public">
          <name>ADC_GAIN_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a113a3324782a4517bb71fc3b03aeef5e" prot="public">
          <name>ADC_GAIN_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a12756ff0f6a345ff3fee2077e1153300" prot="public">
          <name>ADC_GAIN_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0aba255a08f5ff25388778057d725a77c8" prot="public">
          <name>ADC_GAIN_6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0ae9a429f8b69dd0e5cae0e1ab7dbe7dc3" prot="public">
          <name>ADC_GAIN_8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a3ff31845095f2b0fe7e62b2b826411e8" prot="public">
          <name>ADC_GAIN_12</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 12. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a4b18ba08d86e630f2deeeea5b329f970" prot="public">
          <name>ADC_GAIN_16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 16. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a5d19226b1d1728180101e65b8386ff33" prot="public">
          <name>ADC_GAIN_24</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 24. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0ac693403ea0f70f5723a98fe11967c13f" prot="public">
          <name>ADC_GAIN_32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 32. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a064c567978a50dd58d48d481388dd6eb" prot="public">
          <name>ADC_GAIN_64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 64. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga306f882323c66b263d3797124ca5f3a0a1b3c6d80db15acf962192341d4754829" prot="public">
          <name>ADC_GAIN_128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>x 128. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ADC channel gain factors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="31" column="1" bodyfile="include/drivers/adc.h" bodystart="31" bodyend="50"/>
      </memberdef>
      <memberdef kind="enum" id="group__adc__interface_1ga91b0f997d73739cf9f7349b7581e1f56" prot="public" static="no" strong="no">
        <type></type>
        <name>adc_reference</name>
        <enumvalue id="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56ae41651d9d2ba0d3c2a976177fc6ed1b3" prot="public">
          <name>ADC_REF_VDD_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VDD. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56a5f47fb0b239da79577887baf2576eb0d" prot="public">
          <name>ADC_REF_VDD_1_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VDD/2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56a8e5dfe37c3993e118d6e316c9fa0aad1" prot="public">
          <name>ADC_REF_VDD_1_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VDD/3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56a93d4dc4332b3346a7332383ecf745d2c" prot="public">
          <name>ADC_REF_VDD_1_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VDD/4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56a239921743b35d32a558a43deee2ce709" prot="public">
          <name>ADC_REF_INTERNAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56afc15362bdf426f412e150ae9f8d224e6" prot="public">
          <name>ADC_REF_EXTERNAL0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External, input 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56a2733819da753b01a8116d076498fe52a" prot="public">
          <name>ADC_REF_EXTERNAL1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External, input 1. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ADC references. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="72" column="1" bodyfile="include/drivers/adc.h" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="enum" id="group__adc__interface_1ga8f6df993405679f852ae4cd8c63c6917" prot="public" static="no" strong="no">
        <type></type>
        <name>adc_action</name>
        <enumvalue id="group__adc__interface_1gga8f6df993405679f852ae4cd8c63c6917ac875a64d997cb883b49447006554ba92" prot="public">
          <name>ADC_ACTION_CONTINUE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The sequence should be continued normally. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga8f6df993405679f852ae4cd8c63c6917a8efc10c77ea616d568f88d3ef88b1715" prot="public">
          <name>ADC_ACTION_REPEAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The sampling should be repeated. New samples or sample should be read from the ADC and written in the same place as the recent ones. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__adc__interface_1gga8f6df993405679f852ae4cd8c63c6917a68a21759522a3d584417fa12359b4dc9" prot="public">
          <name>ADC_ACTION_FINISH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The sequence should be finished immediately. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Action to be performed after a sampling is done. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="191" column="1" bodyfile="include/drivers/adc.h" bodystart="191" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__adc__interface_1ga9150eb6dc53d1c62b9fa225c0a371d6d" prot="public" static="no">
        <type>enum <ref refid="group__adc__interface_1ga8f6df993405679f852ae4cd8c63c6917" kindref="member">adc_action</ref>(*</type>
        <definition>typedef enum adc_action(* adc_sequence_callback) (const struct device *dev, const struct adc_sequence *sequence, uint16_t sampling_index)</definition>
        <argsstring>)(const struct device *dev, const struct adc_sequence *sequence, uint16_t sampling_index)</argsstring>
        <name>adc_sequence_callback</name>
        <briefdescription>
<para>Type definition of the optional callback function to be called after a requested sampling is done. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sequence structure that triggered the sampling. This parameter points to a copy of the structure that was supplied to the call that started the sampling sequence, thus it cannot be used with the <ref refid="group__sys-util_1gac5bc561d1bfd1bf68877fe577779bd2f" kindref="member">CONTAINER_OF()</ref> macro to retrieve some other data associated with the sequence. Instead, the <ref refid="structadc__sequence__options_1a262fd6daefb22df02c726aafcddc6d47" kindref="member">adc_sequence_options::user_data</ref> field should be used for such purpose.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index (0-65535) of the sampling done.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Action to be performed by the driver. See <ref refid="group__adc__interface_1ga8f6df993405679f852ae4cd8c63c6917" kindref="member">adc_action</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="170" column="19" bodyfile="include/drivers/adc.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__adc__interface_1ga871680cf9f390bfe19a10a61eb1ca092" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* adc_api_channel_setup) (const struct device *dev, const struct adc_channel_cfg *channel_cfg)</definition>
        <argsstring>)(const struct device *dev, const struct adc_channel_cfg *channel_cfg)</argsstring>
        <name>adc_api_channel_setup</name>
        <briefdescription>
<para>Type definition of ADC API function for configuring a channel. See <ref refid="group__adc__interface_1ga7bc0488b2d08ae2ee4996c0eed11f0bf" kindref="member">adc_channel_setup()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="332" column="9" bodyfile="include/drivers/adc.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__adc__interface_1ga4d4484e52ff7727fd316f50b2f404adf" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* adc_api_read) (const struct device *dev, const struct adc_sequence *sequence)</definition>
        <argsstring>)(const struct device *dev, const struct adc_sequence *sequence)</argsstring>
        <name>adc_api_read</name>
        <briefdescription>
<para>Type definition of ADC API function for setting a read request. See <ref refid="group__adc__interface_1ga7567ce3b03ebb294620b4e32b7561ab3" kindref="member">adc_read()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="339" column="9" bodyfile="include/drivers/adc.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__adc__interface_1gad0160f455d1901ebfe06568e8418a22c" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* adc_api_read_async) (const struct device *dev, const struct adc_sequence *sequence, struct k_poll_signal *async)</definition>
        <argsstring>)(const struct device *dev, const struct adc_sequence *sequence, struct k_poll_signal *async)</argsstring>
        <name>adc_api_read_async</name>
        <briefdescription>
<para>Type definition of ADC API function for setting an asynchronous read request. See <ref refid="group__adc__interface_1ga009e3733b5b20eb6b26a201c9f9734fc" kindref="member">adc_read_async()</ref> for argument descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="347" column="9" bodyfile="include/drivers/adc.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__adc__interface_1ga5af65795f58e8e92672bf31dc2418e23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int adc_gain_invert</definition>
        <argsstring>(enum adc_gain gain, int32_t *value)</argsstring>
        <name>adc_gain_invert</name>
        <param>
          <type>enum <ref refid="group__adc__interface_1ga306f882323c66b263d3797124ca5f3a0" kindref="member">adc_gain</ref></type>
          <declname>gain</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Invert the application of gain to a measurement value. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, if the gain passed in is ADC_GAIN_1_6 and the referenced value is 10, the value after the function returns is 60.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the gain used to amplify the input signal.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a value that initially has the effect of the applied gain but has that effect removed when this function successfully returns. If the gain cannot be reversed the value remains unchanged.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if the gain was successfully reversed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if the gain could not be interpreted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="68" column="5" declfile="include/drivers/adc.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__adc__interface_1gaef98dabea3e0dc1cef8add298171a950" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int adc_raw_to_millivolts</definition>
        <argsstring>(int32_t ref_mv, enum adc_gain gain, uint8_t resolution, int32_t *valp)</argsstring>
        <name>adc_raw_to_millivolts</name>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>ref_mv</declname>
        </param>
        <param>
          <type>enum <ref refid="group__adc__interface_1ga306f882323c66b263d3797124ca5f3a0" kindref="member">adc_gain</ref></type>
          <declname>gain</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>resolution</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref> *</type>
          <declname>valp</declname>
        </param>
        <briefdescription>
<para>Convert a raw ADC value to millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs the necessary conversion to transform a raw ADC measurement to a voltage in millivolts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref_mv</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference voltage used for the measurement, in millivolts. This may be from <ref refid="group__adc__interface_1gad11845f5621d0b0d03da4b6484d79aa4" kindref="member">adc_ref_internal()</ref> or a known external reference.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC gain configuration used to sample the input</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bits in the absolute value of the sample. For differential sampling this may be one less than the resolution in struct <ref refid="structadc__sequence" kindref="compound">adc_sequence</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the raw measurement value on input, and the corresponding millivolt value on successful conversion. If conversion fails the stored value is left unchanged.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on successful conversion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if the gain is not reversible </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="170" column="19" bodyfile="include/drivers/adc.h" bodystart="170" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__adc__interface_1ga7bc0488b2d08ae2ee4996c0eed11f0bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int adc_channel_setup</definition>
        <argsstring>(const struct device *dev, const struct adc_channel_cfg *channel_cfg)</argsstring>
        <name>adc_channel_setup</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structadc__channel__cfg" kindref="compound">adc_channel_cfg</ref> *</type>
          <declname>channel_cfg</declname>
        </param>
        <briefdescription>
<para>Configure an ADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para>It is required to call this function and configure each channel before it is selected for a read request.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If a parameter with an invalid value has been provided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="377" column="6" declfile="include/drivers/adc.h" declline="377" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__adc__interface_1ga7567ce3b03ebb294620b4e32b7561ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int adc_read</definition>
        <argsstring>(const struct device *dev, const struct adc_sequence *sequence)</argsstring>
        <name>adc_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structadc__sequence" kindref="compound">adc_sequence</ref> *</type>
          <declname>sequence</declname>
        </param>
        <briefdescription>
<para>Set a read request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure specifying requested sequence of samplings.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If invoked from user mode, any sequence struct options for callback must be NULL.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If a parameter with an invalid value has been provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>If the provided buffer is to small to hold the results of all requested samplings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If the requested mode of operation is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If another sampling was triggered while the previous one was still in progress. This may occur only when samplings are done with intervals, and it indicates that the selected interval was too small. All requested samples are written in the buffer, but at least some of them were taken with an extra delay compared to what was scheduled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="410" column="6" declfile="include/drivers/adc.h" declline="410" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__adc__interface_1ga009e3733b5b20eb6b26a201c9f9734fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int adc_read_async</definition>
        <argsstring>(const struct device *dev, const struct adc_sequence *sequence, struct k_poll_signal *async)</argsstring>
        <name>adc_read_async</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structadc__sequence" kindref="compound">adc_sequence</ref> *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>async</declname>
        </param>
        <briefdescription>
<para>Set an asynchronous read request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is available only if <verbatim>embed:rst:inline :kconfig:option:`CONFIG_ADC_ASYNC` </verbatim> is selected.</para>
</simplesect>
If invoked from user mode, any sequence struct options for callback must be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure specifying requested sequence of samplings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>async</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a valid and ready to be signaled struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref>. (Note: if NULL this function will not notify the end of the transaction, and whether it went successfully or not).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative error code otherwise. See <ref refid="group__adc__interface_1ga7567ce3b03ebb294620b4e32b7561ab3" kindref="member">adc_read()</ref> for a list of possible error codes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="442" column="6" declfile="include/drivers/adc.h" declline="442" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__adc__interface_1gad11845f5621d0b0d03da4b6484d79aa4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t adc_ref_internal</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>adc_ref_internal</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the internal reference voltage. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the voltage corresponding to <ref refid="group__adc__interface_1gga91b0f997d73739cf9f7349b7581e1f56a239921743b35d32a558a43deee2ce709" kindref="member">ADC_REF_INTERNAL</ref>, measured in millivolts.</para>
<para><simplesect kind="return"><para>a positive value is the reference voltage value. Returns zero if reference voltage information is not available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/adc.h" line="468" column="24" bodyfile="include/drivers/adc.h" bodystart="468" bodyend="474"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ADC driver APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
