<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="eventfd_8h" kind="file" language="C++">
    <compoundname>eventfd.h</compoundname>
    <includes local="no">zephyr.h</includes>
    <includes refid="fdtable_8h" local="no">sys/fdtable.h</includes>
    <includes refid="lib_2libc_2minimal_2include_2sys_2types_8h" local="no">sys/types.h</includes>
    <includes refid="fcntl_8h" local="no">fcntl.h</includes>
    <incdepgraph>
      <node id="8">
        <label>fs/fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>fs/fs_interface.h</label>
        <link refid="fs__interface_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/posix/sys/eventfd.h</label>
        <link refid="eventfd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/fdtable.h</label>
        <link refid="fdtable_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="14">
        <label>fcntl.h</label>
        <link refid="fcntl_8h"/>
      </node>
      <node id="11">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="6">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="7">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="10">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="eventfd_8h_1abcdfb656e756cf2a492aff987df8d5f2" prot="public" static="no">
        <name>EFD_IN_USE</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="20" column="9" bodyfile="include/posix/sys/eventfd.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="eventfd_8h_1aa1cf1f9ea4d84916ad5fdf7105d4ee1f" prot="public" static="no">
        <name>EFD_SEMAPHORE</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="21" column="9" bodyfile="include/posix/sys/eventfd.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="eventfd_8h_1a04677f5ad8d61c569b9c32ec35b05e7a" prot="public" static="no">
        <name>EFD_NONBLOCK</name>
        <initializer><ref refid="fcntl_8h_1a39d33ce33804efd4d52606d59071c6d8" kindref="member">O_NONBLOCK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="22" column="9" bodyfile="include/posix/sys/eventfd.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="eventfd_8h_1a0959e68b487308e9dd8586e56f072781" prot="public" static="no">
        <name>EFD_FLAGS_SET</name>
        <initializer>(<ref refid="eventfd_8h_1aa1cf1f9ea4d84916ad5fdf7105d4ee1f" kindref="member">EFD_SEMAPHORE</ref> | <ref refid="eventfd_8h_1a04677f5ad8d61c569b9c32ec35b05e7a" kindref="member">EFD_NONBLOCK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="23" column="9" bodyfile="include/posix/sys/eventfd.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" prot="public" static="no">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>typedef uint64_t eventfd_t</definition>
        <argsstring></argsstring>
        <name>eventfd_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="25" column="18" bodyfile="include/posix/sys/eventfd.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="eventfd_8h_1ab06039421a08cedb36946381608fa7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int eventfd</definition>
        <argsstring>(unsigned int initval, int flags)</argsstring>
        <name>eventfd</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Create a file descriptor for event notification. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned file descriptor can be used with POSIX read/write calls or with the eventfd_read/eventfd_write functions.</para>
<para>It also supports polling and by including an eventfd in a call to poll, it is possible to signal and wake the polling thread by simply writing to the eventfd.</para>
<para>When using read() and write() on an eventfd, the size must always be at least 8 bytes or the operation will fail with EINVAL.</para>
<para><simplesect kind="return"><para>New eventfd file descriptor on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="42" column="5" declfile="include/posix/sys/eventfd.h" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="eventfd_8h_1a28abf91db9cfa3093fc2fb9c1620efb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int eventfd_read</definition>
        <argsstring>(int fd, eventfd_t *value)</argsstring>
        <name>eventfd_read</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" kindref="member">eventfd_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Read from an eventfd. </para>
        </briefdescription>
        <detaileddescription>
<para>If call is successful, the value parameter will have the value 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer for storing the read value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="54" column="19" bodyfile="include/posix/sys/eventfd.h" bodystart="54" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="eventfd_8h_1aad689914403fa1b0c4f2a03eb6a107ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int eventfd_write</definition>
        <argsstring>(int fd, eventfd_t value)</argsstring>
        <name>eventfd_write</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" kindref="member">eventfd_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write to an eventfd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/posix/sys/eventfd.h" line="80" column="19" bodyfile="include/posix/sys/eventfd.h" bodystart="80" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Tobias<sp/>Svehagen</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_POSIX_SYS_EVENTFD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_POSIX_SYS_EVENTFD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fdtable_8h" kindref="compound">sys/fdtable.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fcntl_8h" kindref="compound">fcntl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="eventfd_8h_1abcdfb656e756cf2a492aff987df8d5f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EFD_IN_USE<sp/><sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="eventfd_8h_1aa1cf1f9ea4d84916ad5fdf7105d4ee1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EFD_SEMAPHORE<sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="eventfd_8h_1a04677f5ad8d61c569b9c32ec35b05e7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EFD_NONBLOCK<sp/><sp/>O_NONBLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="eventfd_8h_1a0959e68b487308e9dd8586e56f072781" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EFD_FLAGS_SET<sp/>(EFD_SEMAPHORE<sp/>|<sp/>EFD_NONBLOCK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" kindref="member">eventfd_t</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="eventfd_8h_1ab06039421a08cedb36946381608fa7f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="eventfd_8h_1ab06039421a08cedb36946381608fa7f7" kindref="member">eventfd</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="eventfd_8h_1a28abf91db9cfa3093fc2fb9c1620efb3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="eventfd_8h_1a28abf91db9cfa3093fc2fb9c1620efb3" kindref="member">eventfd_read</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/><ref refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" kindref="member">eventfd_t</ref><sp/>*value)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfd__op__vtable" kindref="compound">fd_op_vtable</ref><sp/>*efd_vtable;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>z_get_fd_obj_and_vtable(fd,<sp/>&amp;efd_vtable,<sp/>&amp;<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<ref refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" kindref="member">k_mutex_lock</ref>(<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/>efd_vtable-&gt;<ref refid="structfd__op__vtable_1a8caad0c1e96cdb67ef02f918ab8aff17" kindref="member">read</ref>(obj,<sp/>value,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*value));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" kindref="member">k_mutex_unlock</ref>(<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" kindref="member">eventfd_t</ref>)<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="eventfd_8h_1aad689914403fa1b0c4f2a03eb6a107ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="eventfd_8h_1aad689914403fa1b0c4f2a03eb6a107ff" kindref="member">eventfd_write</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/><ref refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" kindref="member">eventfd_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfd__op__vtable" kindref="compound">fd_op_vtable</ref><sp/>*efd_vtable;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>*<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*obj;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>z_get_fd_obj_and_vtable(fd,<sp/>&amp;efd_vtable,<sp/>&amp;<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<ref refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" kindref="member">k_mutex_lock</ref>(<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>,<sp/><ref refid="group__clock__apis_1ga0bb4b83f0222193b21a8910311bab0ca" kindref="member">K_FOREVER</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/>efd_vtable-&gt;<ref refid="structfd__op__vtable_1ac59ee326ff54a6a2324bf3425f4a3d5a" kindref="member">write</ref>(obj,<sp/>&amp;value,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" kindref="member">k_mutex_unlock</ref>(<ref refid="spinlock__error__case_8c_1a16a34769989160878f34fc5cb06ec9f5" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="eventfd_8h_1ad6a5579f52209e68c4196c5473677db5" kindref="member">eventfd_t</ref>)<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_POSIX_SYS_EVENTFD_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/posix/sys/eventfd.h"/>
  </compounddef>
</doxygen>
