<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="console_2console_8h" kind="file" language="C++">
    <compoundname>console.h</compoundname>
    <includes refid="lib_2libc_2minimal_2include_2sys_2types_8h" local="no">sys/types.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">kernel.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/console/console.h</label>
        <link refid="console_2console_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4">
        <label>sys/_types.h</label>
        <link refid="__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys/types.h</label>
        <link refid="lib_2libc_2minimal_2include_2sys_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>kernel.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="console_2console_8h_1a0bf949437e32d17992435003cf8b46b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int console_init</definition>
        <argsstring>(void)</argsstring>
        <name>console_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize console device. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called once to initialize pull-style access to console via <ref refid="console_2console_8h_1a2ba36eb1081cd0b98aa43216ccd6fbd5" kindref="member">console_getchar()</ref> function and buffered output using <ref refid="console_2console_8h_1a7bd842f1cda6c8218cb1d41420e4de49" kindref="member">console_putchar()</ref> function. This function supersedes, and incompatible with, callback (push-style) console handling (via console_input_fn callback, etc.).</para>
<para><simplesect kind="return"><para>0 on success, error code (&lt;0) otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/console.h" line="28" column="5" declfile="include/console/console.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="console_2console_8h_1a27785534c14d4098822db2b870b7d81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t console_read</definition>
        <argsstring>(void *dummy, void *buf, size_t size)</argsstring>
        <name>console_read</name>
        <param>
          <type>void *</type>
          <declname>dummy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data from console. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dummy</parametername>
</parameternamelist>
<parameterdescription>
<para>ignored, present to follow read() prototype </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of bytes to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt;0, number of actually read bytes (can be less than size param) =0, in case of EOF &lt;0, in case of error (e.g. -EAGAIN if timeout expired). errno variable is also set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/console.h" line="41" column="9" declfile="include/console/console.h" declline="41" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="console_2console_8h_1a204fd795daf9ef6b1f2803547747545e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref></type>
        <definition>ssize_t console_write</definition>
        <argsstring>(void *dummy, const void *buf, size_t size)</argsstring>
        <name>console_write</name>
        <param>
          <type>void *</type>
          <declname>dummy</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write data to console. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dummy</parametername>
</parameternamelist>
<parameterdescription>
<para>ignored, present to follow write() prototype </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of bytes to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>=&gt;0, number of actually written bytes (can be less than size param) &lt;0, in case of error (e.g. -EAGAIN if timeout expired). errno variable is also set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/console.h" line="53" column="9" declfile="include/console/console.h" declline="53" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="console_2console_8h_1a2ba36eb1081cd0b98aa43216ccd6fbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int console_getchar</definition>
        <argsstring>(void)</argsstring>
        <name>console_getchar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get next char from console input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Return next input character from console. If no characters available, this function will block. This function is similar to ANSI C getchar() function and is intended to ease porting of existing software. Before this function can be used, <ref refid="console_2console_8h_1a0bf949437e32d17992435003cf8b46b5" kindref="member">console_init()</ref> should be called once. This function is incompatible with native Zephyr callback-based console input processing, shell subsystem, or <ref refid="console_2console_8h_1a3454f5b84d38d46a6c2bbf7fd6baa815" kindref="member">console_getline()</ref>.</para>
<para><simplesect kind="return"><para>0-255: a character read, including control characters. &lt;0: error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/console.h" line="68" column="5" declfile="include/console/console.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="console_2console_8h_1a7bd842f1cda6c8218cb1d41420e4de49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int console_putchar</definition>
        <argsstring>(char c)</argsstring>
        <name>console_putchar</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Output a char to console (buffered). </para>
        </briefdescription>
        <detaileddescription>
<para>Puts a character into console output buffer. It will be sent to a console asynchronously, e.g. using an IRQ handler.</para>
<para><simplesect kind="return"><para>&lt;0 on error, otherwise 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/console.h" line="77" column="5" declfile="include/console/console.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="console_2console_8h_1acd13267df8567c63f2285ce0e1cbbc20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void console_getline_init</definition>
        <argsstring>(void)</argsstring>
        <name>console_getline_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize <ref refid="console_2console_8h_1a3454f5b84d38d46a6c2bbf7fd6baa815" kindref="member">console_getline()</ref> call. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called once to initialize pull-style access to console via <ref refid="console_2console_8h_1a3454f5b84d38d46a6c2bbf7fd6baa815" kindref="member">console_getline()</ref> function. This function supersedes, and incompatible with, callback (push-style) console handling (via console_input_fn callback, etc.). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/console.h" line="86" column="6" declfile="include/console/console.h" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="console_2console_8h_1a3454f5b84d38d46a6c2bbf7fd6baa815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * console_getline</definition>
        <argsstring>(void)</argsstring>
        <name>console_getline</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get next line from console input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Return next input line from console. Until full line is available, this function will block. This function is similar to ANSI C gets() function (except a line is returned in system-owned buffer, and system takes care of the buffer overflow checks) and is intended to ease porting of existing software. Before this function can be used, <ref refid="console_2console_8h_1acd13267df8567c63f2285ce0e1cbbc20" kindref="member">console_getline_init()</ref> should be called once. This function is incompatible with native Zephyr callback-based console input processing, shell subsystem, or <ref refid="console_2console_8h_1a2ba36eb1081cd0b98aa43216ccd6fbd5" kindref="member">console_getchar()</ref>.</para>
<para><simplesect kind="return"><para>A pointer to a line read, not including EOL character(s). A line resides in a system-owned buffer, so an application should finish any processing of this line immediately after <ref refid="console_2console_8h_1a3454f5b84d38d46a6c2bbf7fd6baa815" kindref="member">console_getline()</ref> call, or the buffer can be reused. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/console/console.h" line="104" column="6" declfile="include/console/console.h" declline="104" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>Linaro<sp/>Limited</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_CONSOLE_CONSOLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_CONSOLE_CONSOLE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h" kindref="compound">sys/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="console_2console_8h_1a0bf949437e32d17992435003cf8b46b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="console_2console_8h_1a0bf949437e32d17992435003cf8b46b5" kindref="member">console_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="console_2console_8h_1a27785534c14d4098822db2b870b7d81d" refkind="member"><highlight class="normal"><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="console_2console_8h_1a27785534c14d4098822db2b870b7d81d" kindref="member">console_read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dummy,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="console_2console_8h_1a204fd795daf9ef6b1f2803547747545e" refkind="member"><highlight class="normal"><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a5c5d83d87790efd59ea916c2b99f9118" kindref="member">ssize_t</ref><sp/><ref refid="console_2console_8h_1a204fd795daf9ef6b1f2803547747545e" kindref="member">console_write</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dummy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="console_2console_8h_1a2ba36eb1081cd0b98aa43216ccd6fbd5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="console_2console_8h_1a2ba36eb1081cd0b98aa43216ccd6fbd5" kindref="member">console_getchar</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="console_2console_8h_1a7bd842f1cda6c8218cb1d41420e4de49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="console_2console_8h_1a7bd842f1cda6c8218cb1d41420e4de49" kindref="member">console_putchar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="printk_8c_1adc08ed1554f35803d229aeaf11216b3f" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="console_2console_8h_1acd13267df8567c63f2285ce0e1cbbc20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="console_2console_8h_1acd13267df8567c63f2285ce0e1cbbc20" kindref="member">console_getline_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="console_2console_8h_1a3454f5b84d38d46a6c2bbf7fd6baa815" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="console_2console_8h_1a3454f5b84d38d46a6c2bbf7fd6baa815" kindref="member">console_getline</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_CONSOLE_CONSOLE_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/console/console.h"/>
  </compounddef>
</doxygen>
