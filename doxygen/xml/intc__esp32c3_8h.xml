<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="intc__esp32c3_8h" kind="file" language="C++">
    <compoundname>intc_esp32c3.h</compoundname>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes local="no">soc.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/drivers/interrupt_controller/intc_esp32c3.h</label>
        <link refid="intc__esp32c3_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="2">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4">
        <label>soc.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="intc__esp32c3_8h_1ab1ef5952bffcb1811d4f831b98ecf42a" prot="public" static="no">
        <name>ESP_INTR_FLAG_LEVEL1</name>
        <initializer>(1&lt;&lt;1)	/* Accept a Level 1 int vector, lowest priority */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="19" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32c3.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="intc__esp32c3_8h_1a0ab957dd5055fe20725624db223f9535" prot="public" static="no">
        <name>ESP_INTR_FLAG_EDGE</name>
        <initializer>(1&lt;&lt;9)	/* Edge-triggered interrupt */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="20" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32c3.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="intc__esp32c3_8h_1ae96c682b20638830cd816926696e781a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* isr_handler_t) (const void *arg)</definition>
        <argsstring>)(const void *arg)</argsstring>
        <name>isr_handler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="23" column="9" bodyfile="include/drivers/interrupt_controller/intc_esp32c3.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="intc__esp32c3_8h_1aede8e7c90fd3138cf165a0eea1c920fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_intr_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>esp_intr_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes interrupt table to its defaults. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="28" column="6" declfile="include/drivers/interrupt_controller/intc_esp32c3.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32c3_8h_1aa2dbfcb97856d74deaf1054cdc5521a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_alloc</definition>
        <argsstring>(int source, int flags, isr_handler_t handler, void *arg, void **ret_handle)</argsstring>
        <name>esp_intr_alloc</name>
        <param>
          <type>int</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="intc__esp32c3_8h_1ae96c682b20638830cd816926696e781a" kindref="member">isr_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>ret_handle</declname>
        </param>
        <briefdescription>
<para>Allocate an interrupt with the given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This finds an interrupt that matches the restrictions as given in the flags parameter, maps the given interrupt source to it and hooks up the given interrupt handler (with optional argument) as well. If needed, it can return a handle for the interrupt as well.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>An ORred mask of the ESP_INTR_FLAG_* defines. These restrict the choice of interrupts that this routine can choose from. If this value is 0, it will default to allocating a non-shared interrupt of level 1, 2 or 3. If this is ESP_INTR_FLAG_SHARED, it will allocate a shared interrupt of level 1. Setting ESP_INTR_FLAG_INTRDISABLED will return from this function with the interrupt disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional argument for passed to the interrupt handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a struct <ref refid="structintr__handle__data__t" kindref="compound">intr_handle_data_t</ref> pointer to store a handle that can later be used to request details or free the interrupt. Can be NULL if no handle is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. -ENODEV No free interrupt found with the specified flags 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="55" column="5" declfile="include/drivers/interrupt_controller/intc_esp32c3.h" declline="55" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32c3_8h_1abaf6326b21c234959e34e8bef32987be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_disable</definition>
        <argsstring>(int source)</argsstring>
        <name>esp_intr_disable</name>
        <param>
          <type>int</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Disable the interrupt associated with the source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt source</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="69" column="5" declfile="include/drivers/interrupt_controller/intc_esp32c3.h" declline="69" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32c3_8h_1af52c1b16bd4c4d05167401e34bf03983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int esp_intr_enable</definition>
        <argsstring>(int source)</argsstring>
        <name>esp_intr_enable</name>
        <param>
          <type>int</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Enable the interrupt associated with the source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-EINVAL if the combination of arguments is invalid. 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="78" column="5" declfile="include/drivers/interrupt_controller/intc_esp32c3.h" declline="78" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="intc__esp32c3_8h_1ae5cd92e8d61acc30607bf4acdb992aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t esp_intr_get_enabled_intmask</definition>
        <argsstring>(int status_mask_number)</argsstring>
        <name>esp_intr_get_enabled_intmask</name>
        <param>
          <type>int</type>
          <declname>status_mask_number</declname>
        </param>
        <briefdescription>
<para>Gets the current enabled interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status_mask_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the status mask can be 0 or 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bitmask of enabled interrupt sources </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/interrupt_controller/intc_esp32c3.h" line="86" column="10" declfile="include/drivers/interrupt_controller/intc_esp32c3.h" declline="86" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Espressif<sp/>Systems<sp/>(Shanghai)<sp/>Co.,<sp/>Ltd.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_ESP_INTR_ALLOC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_ESP_INTR_ALLOC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;soc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Interrupt<sp/>allocation<sp/>flags<sp/>-<sp/>These<sp/>flags<sp/>can<sp/>be<sp/>used<sp/>to<sp/>specify</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>which<sp/>interrupt<sp/>qualities<sp/>the<sp/>code<sp/>calling<sp/>esp_intr_alloc*<sp/>needs.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Keep<sp/>the<sp/>LEVELx<sp/>values<sp/>as<sp/>they<sp/>are<sp/>here;<sp/>they<sp/>match<sp/>up<sp/>with<sp/>(1&lt;&lt;level)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="intc__esp32c3_8h_1ab1ef5952bffcb1811d4f831b98ecf42a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_LEVEL1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;1)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accept<sp/>a<sp/>Level<sp/>1<sp/>int<sp/>vector,<sp/>lowest<sp/>priority<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="intc__esp32c3_8h_1a0ab957dd5055fe20725624db223f9535" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_INTR_FLAG_EDGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;9)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Edge-triggered<sp/>interrupt<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>prototype<sp/>for<sp/>interrupt<sp/>handler<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="intc__esp32c3_8h_1ae96c682b20638830cd816926696e781a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="intc__esp32c3_8h_1ae96c682b20638830cd816926696e781a" kindref="member">isr_handler_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="intc__esp32c3_8h_1aede8e7c90fd3138cf165a0eea1c920fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="intc__esp32c3_8h_1aede8e7c90fd3138cf165a0eea1c920fe" kindref="member">esp_intr_initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="intc__esp32c3_8h_1aa2dbfcb97856d74deaf1054cdc5521a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32c3_8h_1aa2dbfcb97856d74deaf1054cdc5521a5" kindref="member">esp_intr_alloc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>source,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="intc__esp32c3_8h_1ae96c682b20638830cd816926696e781a" kindref="member">isr_handler_t</ref><sp/><ref refid="timer_2starve_2src_2main_8c_1ab28ee8b6412d992f77f819e17b664869" kindref="member">handler</ref>,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**ret_handle);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="intc__esp32c3_8h_1abaf6326b21c234959e34e8bef32987be" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32c3_8h_1abaf6326b21c234959e34e8bef32987be" kindref="member">esp_intr_disable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>source);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="intc__esp32c3_8h_1af52c1b16bd4c4d05167401e34bf03983" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="intc__esp32c3_8h_1af52c1b16bd4c4d05167401e34bf03983" kindref="member">esp_intr_enable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>source);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="intc__esp32c3_8h_1ae5cd92e8d61acc30607bf4acdb992aaa" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="intc__esp32c3_8h_1ae5cd92e8d61acc30607bf4acdb992aaa" kindref="member">esp_intr_get_enabled_intmask</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_mask_number);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/drivers/interrupt_controller/intc_esp32c3.h"/>
  </compounddef>
</doxygen>
