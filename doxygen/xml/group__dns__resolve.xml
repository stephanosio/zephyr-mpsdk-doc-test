<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__dns__resolve" kind="group">
    <compoundname>dns_resolve</compoundname>
    <title>DNS Resolve Library</title>
    <innerclass refid="structdns__addrinfo" prot="public">dns_addrinfo</innerclass>
    <innerclass refid="structdns__resolve__context" prot="public">dns_resolve_context</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__dns__resolve_1ga7169c5a920fb1b0d77910a6ab922e3f0" prot="public" static="no" strong="no">
        <type></type>
        <name>dns_query_type</name>
        <enumvalue id="group__dns__resolve_1gga7169c5a920fb1b0d77910a6ab922e3f0a96b4b4e07f1560cd046cac010ac32134" prot="public">
          <name>DNS_QUERY_TYPE_A</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv4 query </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga7169c5a920fb1b0d77910a6ab922e3f0aad661f3510af499212143370a81b9049" prot="public">
          <name>DNS_QUERY_TYPE_AAAA</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv6 query </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DNS query type enum </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="33" column="1" bodyfile="include/net/dns_resolve.h" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="group__dns__resolve_1ga5baf1fea0482fb3a940b4f5350a3c58e" prot="public" static="no" strong="no">
        <type></type>
        <name>dns_resolve_status</name>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea9989bb26c930dcf90b5aaab224f19793" prot="public">
          <name>DNS_EAI_BADFLAGS</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalid value for <lsquo/>ai_flags<rsquo/> field </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea7280a03e2eaec0be6ee1369c25a13d7f" prot="public">
          <name>DNS_EAI_NONAME</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NAME or SERVICE is unknown </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea517a9b3ce92e064eb50f40ec72e341b9" prot="public">
          <name>DNS_EAI_AGAIN</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Temporary failure in name resolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea512c526ee3142b8f00330e5009672455" prot="public">
          <name>DNS_EAI_FAIL</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Non-recoverable failure in name res </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea5c3e54fabe22199b2d27018ef8851fa2" prot="public">
          <name>DNS_EAI_NODATA</name>
          <initializer>= -5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No address associated with NAME </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea8440de8b7109dfcca71acca6c7ac4103" prot="public">
          <name>DNS_EAI_FAMILY</name>
          <initializer>= -6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><lsquo/>ai_family<rsquo/> not supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58eaba718125a826939380fdbcc9c1fb4512" prot="public">
          <name>DNS_EAI_SOCKTYPE</name>
          <initializer>= -7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><lsquo/>ai_socktype<rsquo/> not supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58eaeb7d2677167f5bc230da2eea2a81d06c" prot="public">
          <name>DNS_EAI_SERVICE</name>
          <initializer>= -8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SRV not supported for <lsquo/>ai_socktype<rsquo/> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea4092e3cb6e36bba4ea8fce4bc0352e5d" prot="public">
          <name>DNS_EAI_ADDRFAMILY</name>
          <initializer>= -9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Address family for NAME not supported </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea23a80de9adbce595e2bf1556d92c4673" prot="public">
          <name>DNS_EAI_MEMORY</name>
          <initializer>= -10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory allocation failure </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58eae932d5596c55d090cf2ebe43ad59bd35" prot="public">
          <name>DNS_EAI_SYSTEM</name>
          <initializer>= -11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System error returned in <lsquo/>errno<rsquo/> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea8c1f83b2e79dbec7a3f42cc37301271f" prot="public">
          <name>DNS_EAI_OVERFLOW</name>
          <initializer>= -12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Argument buffer overflow </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea4281a05dd374dc24758896fb8d4000f3" prot="public">
          <name>DNS_EAI_INPROGRESS</name>
          <initializer>= -100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Processing request in progress </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea935a23488ff9e1f51f91ac3598a4cbc3" prot="public">
          <name>DNS_EAI_CANCELED</name>
          <initializer>= -101</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request canceled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea2839d8cf68a4d668ccfdb38898a2414f" prot="public">
          <name>DNS_EAI_NOTCANCELED</name>
          <initializer>= -102</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request not canceled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58eac9a19751ef16468e8f46b9f59bc8d836" prot="public">
          <name>DNS_EAI_ALLDONE</name>
          <initializer>= -103</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>All requests done </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1gga5baf1fea0482fb3a940b4f5350a3c58ea3f7d3cecbaf3b7ca061f163f7769cda4" prot="public">
          <name>DNS_EAI_IDN_ENCODE</name>
          <initializer>= -105</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IDN encoding failed </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Status values for the callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="100" column="1" bodyfile="include/net/dns_resolve.h" bodystart="100" bodyend="135"/>
      </memberdef>
      <memberdef kind="enum" id="group__dns__resolve_1gaf190da074df1b14130c0af6370bbd56c" prot="public" static="no" strong="no">
        <type></type>
        <name>dns_resolve_context_state</name>
        <enumvalue id="group__dns__resolve_1ggaf190da074df1b14130c0af6370bbd56cab4bde91ceae9786f84712e7bd20ab994" prot="public">
          <name>DNS_RESOLVE_CONTEXT_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1ggaf190da074df1b14130c0af6370bbd56ca776ec347989a1bb2cee6242720a321fa" prot="public">
          <name>DNS_RESOLVE_CONTEXT_DEACTIVATING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dns__resolve_1ggaf190da074df1b14130c0af6370bbd56ca2ff3849fda38c36c3859b08562f35708" prot="public">
          <name>DNS_RESOLVE_CONTEXT_INACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="160" column="1" bodyfile="include/net/dns_resolve.h" bodystart="160" bodyend="164"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__dns__resolve_1ga79a1d3b79f665959331956c1e48b1739" prot="public" static="no">
        <type>void(*</type>
        <definition>dns_resolve_cb_t</definition>
        <argsstring>)(enum dns_resolve_status status, struct dns_addrinfo *info, void *user_data)</argsstring>
        <name>dns_resolve_cb_t</name>
        <briefdescription>
<para>DNS resolve callback. </para>
        </briefdescription>
        <detaileddescription>
<para>The DNS resolve callback is called after a successful DNS resolving. The resolver can call this callback multiple times, one for each resolved address.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the query: DNS_EAI_INPROGRESS returned for each resolved address DNS_EAI_ALLDONE mark end of the resolving, info is set to NULL in this case DNS_EAI_CANCELED if the query was canceled manually or timeout happened DNS_EAI_FAIL if the name cannot be resolved by the server DNS_EAI_NODATA if there is no such name other values means that an error happened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Query results are stored here. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data given in <ref refid="group__dns__resolve_1ga24f9bc24e2021b6b528bb15e4fcca49b" kindref="member">dns_resolve_name()</ref> call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="156" column="9" bodyfile="include/net/dns_resolve.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dns__resolve_1ga74e2be49894100fe5da641331ef083de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dns_resolve_init</definition>
        <argsstring>(struct dns_resolve_context *ctx, const char *dns_servers_str[], const struct sockaddr *dns_servers_sa[])</argsstring>
        <name>dns_resolve_init</name>
        <param>
          <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>dns_servers_str</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>dns_servers_sa</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Init DNS resolving context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the DNS server address and initializes the DNS context that is used by the actual resolver. DNS server addresses can be specified either in textual form, or as struct sockaddr (or both). Note that the recommended way to resolve DNS names is to use the <ref refid="group__dns__resolve_1gaf891d7e21bddc8fbd029209b4339c01d" kindref="member">dns_get_addr_info()</ref> API. In that case user does not need to call <ref refid="group__dns__resolve_1ga74e2be49894100fe5da641331ef083de" kindref="member">dns_resolve_init()</ref> as the DNS servers are already setup by the system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS context. If the context variable is allocated from the stack, then the variable needs to be valid for the whole duration of the resolving. Caller does not need to fill the variable beforehand or edit the context afterwards. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dns_servers_str</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS server addresses using textual strings. The array is NULL terminated. The port number can be given in the string. Syntax for the server addresses with or without port numbers: IPv4 : 10.0.9.1 IPv4 + port : 10.0.9.1:5353 IPv6 : 2001:db8::22:42 IPv6 + port : [2001:db8::22:42]:5353 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dns_servers_sa</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS server addresses as struct sockaddr. The array is NULL terminated. Port numbers are optional in struct sockaddr, the default will be used if set to 0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="276" column="5" declfile="include/net/dns_resolve.h" declline="276" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1gab04f3b2347e9c59346c10180c6c9ffbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dns_resolve_close</definition>
        <argsstring>(struct dns_resolve_context *ctx)</argsstring>
        <name>dns_resolve_close</name>
        <param>
          <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Close DNS resolving context. </para>
        </briefdescription>
        <detaileddescription>
<para>This releases DNS resolving context and marks the context unusable. Caller must call the <ref refid="group__dns__resolve_1ga74e2be49894100fe5da641331ef083de" kindref="member">dns_resolve_init()</ref> again to make context usable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="290" column="5" declfile="include/net/dns_resolve.h" declline="290" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1ga9da2d7299cfafcdea7d6bfe0e4a2223c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dns_resolve_reconfigure</definition>
        <argsstring>(struct dns_resolve_context *ctx, const char *servers_str[], const struct sockaddr *servers_sa[])</argsstring>
        <name>dns_resolve_reconfigure</name>
        <param>
          <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>servers_str</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>servers_sa</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Reconfigure DNS resolving context. </para>
        </briefdescription>
        <detaileddescription>
<para>Reconfigures DNS context with new server list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>servers_str</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS server addresses using textual strings. The array is NULL terminated. The port number can be given in the string. Syntax for the server addresses with or without port numbers: IPv4 : 10.0.9.1 IPv4 + port : 10.0.9.1:5353 IPv6 : 2001:db8::22:42 IPv6 + port : [2001:db8::22:42]:5353 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>servers_sa</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS server addresses as struct sockaddr. The array is NULL terminated. Port numbers are optional in struct sockaddr, the default will be used if set to 0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="311" column="5" declfile="include/net/dns_resolve.h" declline="311" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1ga7701ddd6b6c5923f0d122a2bcf898cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dns_resolve_cancel</definition>
        <argsstring>(struct dns_resolve_context *ctx, uint16_t dns_id)</argsstring>
        <name>dns_resolve_cancel</name>
        <param>
          <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dns_id</declname>
        </param>
        <briefdescription>
<para>Cancel a pending DNS query. </para>
        </briefdescription>
        <detaileddescription>
<para>This releases DNS resources used by a pending query.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dns_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS id of the pending query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="325" column="5" declfile="include/net/dns_resolve.h" declline="325" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1gaf2854ca9b839e7cba073e75202ac7e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dns_resolve_cancel_with_name</definition>
        <argsstring>(struct dns_resolve_context *ctx, uint16_t dns_id, const char *query_name, enum dns_query_type query_type)</argsstring>
        <name>dns_resolve_cancel_with_name</name>
        <param>
          <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dns_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>query_name</declname>
        </param>
        <param>
          <type>enum <ref refid="group__dns__resolve_1ga7169c5a920fb1b0d77910a6ab922e3f0" kindref="member">dns_query_type</ref></type>
          <declname>query_type</declname>
        </param>
        <briefdescription>
<para>Cancel a pending DNS query using id, name and type. </para>
        </briefdescription>
        <detaileddescription>
<para>This releases DNS resources used by a pending query.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dns_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS id of the pending query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the resource we are trying to query (hostname) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the query (A or AAAA)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="340" column="5" declfile="include/net/dns_resolve.h" declline="340" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1ga24f9bc24e2021b6b528bb15e4fcca49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dns_resolve_name</definition>
        <argsstring>(struct dns_resolve_context *ctx, const char *query, enum dns_query_type type, uint16_t *dns_id, dns_resolve_cb_t cb, void *user_data, int32_t timeout)</argsstring>
        <name>dns_resolve_name</name>
        <param>
          <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>enum <ref refid="group__dns__resolve_1ga7169c5a920fb1b0d77910a6ab922e3f0" kindref="member">dns_query_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>dns_id</declname>
        </param>
        <param>
          <type><ref refid="group__dns__resolve_1ga79a1d3b79f665959331956c1e48b1739" kindref="member">dns_resolve_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Resolve DNS name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to resolve e.g., IPv4 or IPv6 address. Note that this is asynchronous call, the function will return immediately and system will call the callback after resolving has finished or timeout has occurred. We might send the query to multiple servers (if there are more than one server configured), but we only use the result of the first received response.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>What the caller wants to resolve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>What kind of data the caller wants to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dns_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS id is returned to the caller. This is needed if one wishes to cancel the query. This can be set to NULL if there is no need to cancel the query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to call after the resolving has finished or timeout has happened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout value for the query. Possible values: SYS_FOREVER_MS: the query is tried forever, user needs to cancel it manually if it takes too long time to finish &gt;0: start the query and let the system timeout it after specified ms</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if resolving was started ok, &lt; 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="372" column="5" declfile="include/net/dns_resolve.h" declline="372" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1gae69cd758e99ea93ef8aac28366918b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
        <definition>struct dns_resolve_context * dns_resolve_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>dns_resolve_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get default DNS context. </para>
        </briefdescription>
        <detaileddescription>
<para>The system level DNS context uses DNS servers that are defined in project config file. If no DNS servers are defined by the user, then resolving DNS names using default DNS context will do nothing. The configuration options are described in subsys/net/lib/dns/Kconfig file.</para>
<para><simplesect kind="return"><para>Default DNS context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="390" column="26" declfile="include/net/dns_resolve.h" declline="390" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1gaf891d7e21bddc8fbd029209b4339c01d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int dns_get_addr_info</definition>
        <argsstring>(const char *query, enum dns_query_type type, uint16_t *dns_id, dns_resolve_cb_t cb, void *user_data, int32_t timeout)</argsstring>
        <name>dns_get_addr_info</name>
        <param>
          <type>const char *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>enum <ref refid="group__dns__resolve_1ga7169c5a920fb1b0d77910a6ab922e3f0" kindref="member">dns_query_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>dns_id</declname>
        </param>
        <param>
          <type><ref refid="group__dns__resolve_1ga79a1d3b79f665959331956c1e48b1739" kindref="member">dns_resolve_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get IP address info from DNS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to resolve e.g., IPv4 or IPv6 address. Note that this is asynchronous call, the function will return immediately and system will call the callback after resolving has finished or timeout has occurred. We might send the query to multiple servers (if there are more than one server configured), but we only use the result of the first received response. This variant uses system wide DNS servers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>What the caller wants to resolve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>What kind of data the caller wants to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dns_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS id is returned to the caller. This is needed if one wishes to cancel the query. This can be set to NULL if there is no need to cancel the query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to call after the resolving has finished or timeout has happened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout value for the connection. Possible values: SYS_FOREVER_MS: the query is tried forever, user needs to cancel it manually if it takes too long time to finish &gt;0: start the query and let the system timeout it after specified ms</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if resolving was started ok, &lt; 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="419" column="19" bodyfile="include/net/dns_resolve.h" bodystart="419" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="group__dns__resolve_1ga54ae7aaf53b36951b27f09e1cc82df55" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int dns_cancel_addr_info</definition>
        <argsstring>(uint16_t dns_id)</argsstring>
        <name>dns_cancel_addr_info</name>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>dns_id</declname>
        </param>
        <briefdescription>
<para>Cancel a pending DNS query. </para>
        </briefdescription>
        <detaileddescription>
<para>This releases DNS resources used by a pending query.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dns_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DNS id of the pending query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="444" column="19" bodyfile="include/net/dns_resolve.h" bodystart="444" bodyend="447"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__dns__resolve_1gaba564a71c4fb4c44fae69015e880b0db" prot="public" static="no">
        <name>DNS_MAX_NAME_SIZE</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max size of the resolved name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="42" column="9" bodyfile="include/net/dns_resolve.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>DNS resolving library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
