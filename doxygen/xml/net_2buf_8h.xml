<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="net_2buf_8h" kind="file" language="C++">
    <compoundname>buf.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes local="no">zephyr.h</includes>
    <includedby refid="mcc_8h" local="no">include/bluetooth/audio/mcc.h</includedby>
    <includedby refid="bluetooth_8h" local="no">include/bluetooth/bluetooth.h</includedby>
    <includedby refid="bluetooth_2buf_8h" local="no">include/bluetooth/buf.h</includedby>
    <includedby refid="hci_8h" local="no">include/bluetooth/hci.h</includedby>
    <includedby refid="mesh_8h" local="no">include/bluetooth/mesh.h</includedby>
    <includedby refid="msg_8h" local="no">include/bluetooth/mesh/msg.h</includedby>
    <includedby refid="isotp_8h" local="no">include/canbus/isotp.h</includedby>
    <includedby refid="hci__driver_8h" local="no">include/drivers/bluetooth/hci_driver.h</includedby>
    <includedby refid="net__l2_8h" local="no">include/net/net_l2.h</includedby>
    <includedby refid="net__offload_8h" local="no">include/net/net_offload.h</includedby>
    <includedby refid="net__pkt_8h" local="no">include/net/net_pkt.h</includedby>
    <includedby refid="usb__audio_8h" local="no">include/usb/class/usb_audio.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/net/buf.h</label>
        <link refid="net_2buf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="6">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18">
        <label>include/bluetooth/a2dp.h</label>
        <link refid="a2dp_8h"/>
      </node>
      <node id="4">
        <label>include/bluetooth/audio/aics.h</label>
        <link refid="aics_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/bluetooth/audio/audio.h</label>
        <link refid="audio_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/bluetooth/audio/capabilities.h</label>
        <link refid="capabilities_8h"/>
      </node>
      <node id="11">
        <label>include/bluetooth/audio/csis.h</label>
        <link refid="csis_8h"/>
      </node>
      <node id="2">
        <label>include/bluetooth/audio/mcc.h</label>
        <link refid="mcc_8h"/>
      </node>
      <node id="7">
        <label>include/bluetooth/audio/media_proxy.h</label>
        <link refid="media__proxy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/bluetooth/audio/mics.h</label>
        <link refid="mics_8h"/>
      </node>
      <node id="6">
        <label>include/bluetooth/audio/vcs.h</label>
        <link refid="vcs_8h"/>
      </node>
      <node id="17">
        <label>include/bluetooth/avdtp.h</label>
        <link refid="avdtp_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bluetooth/bluetooth.h</label>
        <link refid="bluetooth_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>include/bluetooth/buf.h</label>
        <link refid="bluetooth_2buf_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/bluetooth/conn.h</label>
        <link refid="conn_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/bluetooth/gatt.h</label>
        <link refid="gatt_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/bluetooth/hci.h</label>
        <link refid="hci_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>include/bluetooth/hci_vs.h</label>
        <link refid="hci__vs_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>include/bluetooth/hfp_hf.h</label>
        <link refid="hfp__hf_8h"/>
      </node>
      <node id="15">
        <label>include/bluetooth/iso.h</label>
        <link refid="iso_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/bluetooth/l2cap.h</label>
        <link refid="l2cap_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>include/bluetooth/mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>include/bluetooth/mesh/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>include/bluetooth/mesh/msg.h</label>
        <link refid="msg_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/bluetooth/mesh/shell.h</label>
        <link refid="bluetooth_2mesh_2shell_8h"/>
      </node>
      <node id="19">
        <label>include/bluetooth/rfcomm.h</label>
        <link refid="rfcomm_8h"/>
      </node>
      <node id="22">
        <label>include/bluetooth/sdp.h</label>
        <link refid="sdp_8h"/>
      </node>
      <node id="23">
        <label>include/bluetooth/services/ots.h</label>
        <link refid="ots_8h"/>
      </node>
      <node id="29">
        <label>include/canbus/isotp.h</label>
        <link refid="isotp_8h"/>
      </node>
      <node id="20">
        <label>include/drivers/bluetooth/hci_driver.h</label>
        <link refid="hci__driver_8h"/>
      </node>
      <node id="1">
        <label>include/net/buf.h</label>
        <link refid="net_2buf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>include/net/can.h</label>
        <link refid="net_2can_8h"/>
      </node>
      <node id="42">
        <label>include/net/dns_resolve.h</label>
        <link refid="dns__resolve_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>include/net/dsa.h</label>
        <link refid="dsa_8h"/>
      </node>
      <node id="34">
        <label>include/net/dummy.h</label>
        <link refid="dummy_8h"/>
      </node>
      <node id="35">
        <label>include/net/ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>include/net/ethernet_mgmt.h</label>
        <link refid="ethernet__mgmt_8h"/>
      </node>
      <node id="38">
        <label>include/net/ieee802154_radio.h</label>
        <link refid="ieee802154__radio_8h"/>
      </node>
      <node id="39">
        <label>include/net/igmp.h</label>
        <link refid="igmp_8h"/>
      </node>
      <node id="40">
        <label>include/net/net_config.h</label>
        <link refid="net__config_8h"/>
      </node>
      <node id="41">
        <label>include/net/net_context.h</label>
        <link refid="net__context_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>include/net/net_if.h</label>
        <link refid="net__if_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>include/net/net_l2.h</label>
        <link refid="net__l2_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>include/net/net_offload.h</label>
        <link refid="net__offload_8h"/>
      </node>
      <node id="56">
        <label>include/net/net_pkt.h</label>
        <link refid="net__pkt_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>include/net/net_pkt_filter.h</label>
        <link refid="net__pkt__filter_8h"/>
      </node>
      <node id="62">
        <label>include/net/openthread.h</label>
        <link refid="openthread_8h"/>
      </node>
      <node id="57">
        <label>include/net/ppp.h</label>
        <link refid="ppp_8h"/>
      </node>
      <node id="58">
        <label>include/net/promiscuous.h</label>
        <link refid="promiscuous_8h"/>
      </node>
      <node id="53">
        <label>include/net/sntp.h</label>
        <link refid="sntp_8h"/>
      </node>
      <node id="43">
        <label>include/net/socket.h</label>
        <link refid="net_2socket_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>include/net/socket_can.h</label>
        <link refid="socket__can_8h"/>
      </node>
      <node id="64">
        <label>include/net/socket_net_mgmt.h</label>
        <link refid="socket__net__mgmt_8h"/>
      </node>
      <node id="44">
        <label>include/net/socket_offload.h</label>
        <link refid="socket__offload_8h"/>
      </node>
      <node id="49">
        <label>include/net/socketutils.h</label>
        <link refid="socketutils_8h"/>
      </node>
      <node id="45">
        <label>include/net/tftp.h</label>
        <link refid="tftp_8h"/>
      </node>
      <node id="59">
        <label>include/net/udp.h</label>
        <link refid="udp_8h"/>
      </node>
      <node id="60">
        <label>include/net/virtual.h</label>
        <link refid="virtual_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>include/net/virtual_mgmt.h</label>
        <link refid="virtual__mgmt_8h"/>
      </node>
      <node id="65">
        <label>include/net/wifi_mgmt.h</label>
        <link refid="wifi__mgmt_8h"/>
      </node>
      <node id="46">
        <label>include/posix/arpa/inet.h</label>
        <link refid="inet_8h"/>
      </node>
      <node id="47">
        <label>include/posix/net/if.h</label>
        <link refid="if_8h"/>
      </node>
      <node id="48">
        <label>include/posix/netdb.h</label>
        <link refid="netdb_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>include/posix/netinet/in.h</label>
        <link refid="in_8h"/>
      </node>
      <node id="51">
        <label>include/posix/netinet/tcp.h</label>
        <link refid="tcp_8h"/>
      </node>
      <node id="52">
        <label>include/posix/poll.h</label>
        <link refid="poll_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>include/posix/sys/socket.h</label>
        <link refid="posix_2sys_2socket_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>include/usb/class/usb_audio.h</label>
        <link refid="usb__audio_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structnet__buf__simple" prot="public">net_buf_simple</innerclass>
    <innerclass refid="structnet__buf__simple__state" prot="public">net_buf_simple_state</innerclass>
    <innerclass refid="structnet__buf" prot="public">net_buf</innerclass>
    <innerclass refid="structnet__buf__data__cb" prot="public">net_buf_data_cb</innerclass>
    <innerclass refid="structnet__buf__data__alloc" prot="public">net_buf_data_alloc</innerclass>
    <innerclass refid="structnet__buf__pool" prot="public">net_buf_pool</innerclass>
    <innerclass refid="structnet__buf__pool__fixed" prot="public">net_buf_pool_fixed</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__net__buf_1gaf85aa0b705bb4fbe2630191fde802501" prot="public" static="no">
        <name>NET_BUF_SIMPLE_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_size</defname></param>
        <initializer>	<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> net_buf_data_##_name[_size];       \
	struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> _name = {         \
		.<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>   = net_buf_data_##_name, \
		.len    = 0,                    \
		.size   = _size,                \
		.__buf  = net_buf_data_##_name, \
	}</initializer>
        <briefdescription>
<para>Define a <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> stack variable. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a helper macro which is used to define a <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object on the stack.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum data storage for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="42" column="9" bodyfile="include/net/buf.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1ga21ced8b3082d57bf071008de5fffc0f4" prot="public" static="no">
        <name>NET_BUF_SIMPLE_DEFINE_STATIC</name>
        <param><defname>_name</defname></param>
        <param><defname>_size</defname></param>
        <initializer>	static __noinit <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> net_buf_data_##_name[_size]; \
	static struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> _name = {            \
		.<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>   = net_buf_data_##_name,           \
		.len    = 0,                              \
		.size   = _size,                          \
		.__buf  = net_buf_data_##_name,           \
	}</initializer>
        <briefdescription>
<para>Define a static <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> variable. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a helper macro which is used to define a static <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum data storage for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="61" column="9" bodyfile="include/net/buf.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1ga0b01dc80027d13b1895379d4d1397207" prot="public" static="no">
        <name>NET_BUF_SIMPLE</name>
        <param><defname>_size</defname></param>
        <initializer>	((struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *)(&amp;(struct {        \
		struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> buf;           \
		<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> <ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>[_size];                 \
	}) {                                         \
		.buf.size = _size,                   \
	}))</initializer>
        <briefdescription>
<para>Define a <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> stack variable and get a pointer to it. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a helper macro which is used to define a <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object on the stack and the get a pointer to it as follows:</para>
<para>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *my_buf = <ref refid="group__net__buf_1ga0b01dc80027d13b1895379d4d1397207" kindref="member">NET_BUF_SIMPLE(10)</ref>;</para>
<para>After creating the object it needs to be initialized by calling <ref refid="group__net__buf_1ga040279b601191367dee013bab9916d8d" kindref="member">net_buf_simple_init()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum data storage for the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to stack-allocated <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="119" column="9" bodyfile="include/net/buf.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1ga7a818d395a17868ea4c954b344b58a8f" prot="public" static="no">
        <name>NET_BUF_FRAGS</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag indicating that the buffer has associated fragments. Only used internally by the buffer handling code while the buffer is inside a FIFO, meaning this never needs to be explicitly set or unset by the <ref refid="structnet__buf" kindref="compound">net_buf</ref> API user. As long as the buffer is outside of a FIFO, i.e. in practice always for the user for this API, the buf-&gt;frags pointer should be used instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="896" column="9" bodyfile="include/net/buf.h" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1gaaeacbdf3cfda12691c75253015e5c19a" prot="public" static="no">
        <name>NET_BUF_EXTERNAL_DATA</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag indicating that the buffer&apos;s associated data pointer, points to externally allocated memory. Therefore once ref goes down to zero, the pointed data will not need to be deallocated. This never needs to be explicitly set or unet by the <ref refid="structnet__buf" kindref="compound">net_buf</ref> API user. Such <ref refid="structnet__buf" kindref="compound">net_buf</ref> is exclusively instantiated via <ref refid="group__net__buf_1ga8c24d0761d6d38facb6cca60c7c13c0c" kindref="member">net_buf_alloc_with_data()</ref> function. Reference count mechanism however will behave the same way, and ref count going to 0 will free the <ref refid="structnet__buf" kindref="compound">net_buf</ref> but no the data pointer in it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="906" column="9" bodyfile="include/net/buf.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1ga61671ac866081d31dfe9eddbf3b6f210" prot="public" static="no">
        <name>NET_BUF_POOL_HEAP_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_count</defname></param>
        <param><defname>_ud_size</defname></param>
        <param><defname>_destroy</defname></param>
        <initializer>	_NET_BUF_ARRAY_DEFINE(_name, _count, _ud_size);                      \
	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref>, _name) =                \
		NET_BUF_POOL_INITIALIZER(_name, &amp;net_buf_heap_alloc,         \
					 _net_buf_##_name, _count, _ud_size, \
					 _destroy)</initializer>
        <briefdescription>
<para>Define a new pool for buffers using the heap for the data. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines a <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> struct and the necessary memory storage (array of structs) for the needed amount of buffers. After this, the buffers can be accessed from the pool through net_buf_alloc. The pool is defined as a static variable, so if it needs to be exported outside the current module this needs to happen with the help of a separate pointer rather than an extern declaration.</para>
<para>The data payload of the buffers will be allocated from the heap using k_malloc, so CONFIG_HEAP_MEM_POOL_SIZE must be set to a positive value. This kind of pool does not support blocking on the data allocation, so the timeout passed to net_buf_alloc will be always treated as K_NO_WAIT when trying to allocate the data. This means that allocation failures, i.e. NULL returns, must always be handled cleanly.</para>
<para>If provided with a custom destroy callback, this callback is responsible for eventually calling <ref refid="group__net__buf_1ga739249547eb37b839b3c1ebdbcb88d28" kindref="member">net_buf_destroy()</ref> to complete the process of returning the buffer to the pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the pool variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of buffers in the pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ud_size</parametername>
</parameternamelist>
<parameterdescription>
<para>User data space to reserve per buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_destroy</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional destroy callback when buffer is freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1091" column="9" bodyfile="include/net/buf.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1gacc53824e01db7935bcc9cad564b716cd" prot="public" static="no">
        <name>NET_BUF_POOL_FIXED_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_count</defname></param>
        <param><defname>_data_size</defname></param>
        <param><defname>_ud_size</defname></param>
        <param><defname>_destroy</defname></param>
        <initializer>	_NET_BUF_ARRAY_DEFINE(_name, _count, _ud_size);                        \
	static <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> __noinit net_buf_data_##_name[_count][_data_size];      \
	static const struct <ref refid="structnet__buf__pool__fixed" kindref="compound">net_buf_pool_fixed</ref> net_buf_fixed_##_name = {       \
		.data_size = _data_size,                                       \
		.data_pool = (<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)net_buf_data_##_name,                  \
	};                                                                     \
	static const struct <ref refid="structnet__buf__data__alloc" kindref="compound">net_buf_data_alloc</ref> net_buf_fixed_alloc_##_name = { \
		.cb = &amp;net_buf_fixed_cb,                                       \
		.alloc_data = (void *)&amp;net_buf_fixed_##_name,                  \
	};                                                                     \
	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref>, _name) =                  \
		NET_BUF_POOL_INITIALIZER(_name, &amp;net_buf_fixed_alloc_##_name,  \
					 _net_buf_##_name, _count, _ud_size,   \
					 _destroy)</initializer>
        <briefdescription>
<para>Define a new pool for buffers based on fixed-size data. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines a <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> struct and the necessary memory storage (array of structs) for the needed amount of buffers. After this, the buffers can be accessed from the pool through net_buf_alloc. The pool is defined as a static variable, so if it needs to be exported outside the current module this needs to happen with the help of a separate pointer rather than an extern declaration.</para>
<para>The data payload of the buffers will be allocated from a byte array of fixed sized chunks. This kind of pool does not support blocking on the data allocation, so the timeout passed to net_buf_alloc will be always treated as K_NO_WAIT when trying to allocate the data. This means that allocation failures, i.e. NULL returns, must always be handled cleanly.</para>
<para>If provided with a custom destroy callback, this callback is responsible for eventually calling <ref refid="group__net__buf_1ga739249547eb37b839b3c1ebdbcb88d28" kindref="member">net_buf_destroy()</ref> to complete the process of returning the buffer to the pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the pool variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of buffers in the pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum data payload per buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ud_size</parametername>
</parameternamelist>
<parameterdescription>
<para>User data space to reserve per buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_destroy</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional destroy callback when buffer is freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1135" column="9" bodyfile="include/net/buf.h" bodystart="1135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1ga90e691e793c964847d737f5ecf7646ec" prot="public" static="no">
        <name>NET_BUF_POOL_VAR_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_count</defname></param>
        <param><defname>_data_size</defname></param>
        <param><defname>_ud_size</defname></param>
        <param><defname>_destroy</defname></param>
        <initializer>	_NET_BUF_ARRAY_DEFINE(_name, _count, _ud_size);                        \
	<ref refid="stack_2stack_2src_2main_8c_1a584037d797b4d8bda265a55c6f49ff41" kindref="member">K_HEAP_DEFINE</ref>(net_buf_mem_pool_##_name, _data_size);                   \
	static const struct <ref refid="structnet__buf__data__alloc" kindref="compound">net_buf_data_alloc</ref> net_buf_data_alloc_##_name = {  \
		.cb = &amp;net_buf_var_cb,                                         \
		.alloc_data = &amp;net_buf_mem_pool_##_name,                       \
	};                                                                     \
	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref>, _name) =                  \
		NET_BUF_POOL_INITIALIZER(_name, &amp;net_buf_data_alloc_##_name,   \
					 _net_buf_##_name, _count, _ud_size,   \
					 _destroy)</initializer>
        <briefdescription>
<para>Define a new pool for buffers with variable size payloads. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines a <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> struct and the necessary memory storage (array of structs) for the needed amount of buffers. After this, the buffers can be accessed from the pool through net_buf_alloc. The pool is defined as a static variable, so if it needs to be exported outside the current module this needs to happen with the help of a separate pointer rather than an extern declaration.</para>
<para>The data payload of the buffers will be based on a memory pool from which variable size payloads may be allocated.</para>
<para>If provided with a custom destroy callback, this callback is responsible for eventually calling <ref refid="group__net__buf_1ga739249547eb37b839b3c1ebdbcb88d28" kindref="member">net_buf_destroy()</ref> to complete the process of returning the buffer to the pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the pool variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of buffers in the pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Total amount of memory available for data payloads. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ud_size</parametername>
</parameternamelist>
<parameterdescription>
<para>User data space to reserve per buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_destroy</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional destroy callback when buffer is freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1179" column="9" bodyfile="include/net/buf.h" bodystart="1179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__buf_1ga810aba8ba321fd012edc238ea9fe19dc" prot="public" static="no">
        <name>NET_BUF_POOL_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_count</defname></param>
        <param><defname>_size</defname></param>
        <param><defname>_ud_size</defname></param>
        <param><defname>_destroy</defname></param>
        <initializer>	<ref refid="group__net__buf_1gacc53824e01db7935bcc9cad564b716cd" kindref="member">NET_BUF_POOL_FIXED_DEFINE</ref>(_name, _count, _size, _ud_size, _destroy)</initializer>
        <briefdescription>
<para>Define a new pool for buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines a <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> struct and the necessary memory storage (array of structs) for the needed amount of buffers. After this,the buffers can be accessed from the pool through net_buf_alloc. The pool is defined as a static variable, so if it needs to be exported outside the current module this needs to happen with the help of a separate pointer rather than an extern declaration.</para>
<para>If provided with a custom destroy callback this callback is responsible for eventually calling <ref refid="group__net__buf_1ga739249547eb37b839b3c1ebdbcb88d28" kindref="member">net_buf_destroy()</ref> to complete the process of returning the buffer to the pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the pool variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of buffers in the pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum data size for each buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ud_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of user data space to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_destroy</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional destroy callback when buffer is freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1212" column="9" bodyfile="include/net/buf.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__net__buf_1ga2d500726f502256748fc71ea384a5f4c" prot="public" static="no">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *(*</type>
        <definition>net_buf_allocator_cb</definition>
        <argsstring>)(k_timeout_t timeout, void *user_data)</argsstring>
        <name>net_buf_allocator_cb</name>
        <briefdescription>
<para>Network buffer allocator callback. </para>
        </briefdescription>
        <detaileddescription>
<para>The allocator callback is called when net_buf_append_bytes needs to allocate a new <ref refid="structnet__buf" kindref="compound">net_buf</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the net buf pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait until the specified timeout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data given in net_buf_append_bytes call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to allocated <ref refid="structnet__buf" kindref="compound">net_buf</ref> or NULL on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2383" column="8" bodyfile="include/net/buf.h" bodystart="2400" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__buf_1ga040279b601191367dee013bab9916d8d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_simple_init</definition>
        <argsstring>(struct net_buf_simple *buf, size_t reserve_head)</argsstring>
        <name>net_buf_simple_init</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserve_head</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This needs to be called after creating a <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object using the NET_BUF_SIMPLE macro.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserve_head</parametername>
</parameternamelist>
<parameterdescription>
<para>Headroom to reserve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="136" column="20" bodyfile="include/net/buf.h" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga7fac47a2a25eaca39c5d14f1f55b485d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_init_with_data</definition>
        <argsstring>(struct net_buf_simple *buf, void *data, size_t size)</argsstring>
        <name>net_buf_simple_init_with_data</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> object with data. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialized buffer object with external data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>External data pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of data the pointed data buffer if able to fit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="156" column="6" declfile="include/net/buf.h" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga4b537e913e132448cbf56976504ddddd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_simple_reset</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_reset</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Reset buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Reset buffer data so it can be reused for other purposes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="166" column="20" bodyfile="include/net/buf.h" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0186c153b72a379affdd3e2e3994b5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_clone</definition>
        <argsstring>(const struct net_buf_simple *original, struct net_buf_simple *clone)</argsstring>
        <name>net_buf_simple_clone</name>
        <param>
          <type>const struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>original</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>clone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone buffer state, using the same data buffer.</para>
<para>Initializes a buffer to point to the same data as an existing buffer. Allows operations on the same data without altering the length and offset of the original.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>original</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to clone. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clone</parametername>
</parameternamelist>
<parameterdescription>
<para>The new clone. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="182" column="6" declfile="include/net/buf.h" declline="182" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga1906e637c848948f5780428a99b3341e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_buf_simple_add</definition>
        <argsstring>(struct net_buf_simple *buf, size_t len)</argsstring>
        <name>net_buf_simple_add</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Prepare data to be added at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to increment the length with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The original tail of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="196" column="6" declfile="include/net/buf.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gac37209c1e5097e5610860943fb7d0115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_buf_simple_add_mem</definition>
        <argsstring>(struct net_buf_simple *buf, const void *mem, size_t len)</argsstring>
        <name>net_buf_simple_add_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Copy given number of bytes from memory to the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Increments the data length of the buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of data to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The original tail of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="210" column="6" declfile="include/net/buf.h" declline="210" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8ff9344b8d8deba1b72b8fca048a525c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>uint8_t * net_buf_simple_add_u8</definition>
        <argsstring>(struct net_buf_simple *buf, uint8_t val)</argsstring>
        <name>net_buf_simple_add_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add (8-bit) byte at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Increments the data length of the buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value to be added.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the value added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="224" column="9" declfile="include/net/buf.h" declline="224" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaa2daf3b20074ff1a23806ce88becebf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_le16</definition>
        <argsstring>(struct net_buf_simple *buf, uint16_t val)</argsstring>
        <name>net_buf_simple_add_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 16-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="236" column="6" declfile="include/net/buf.h" declline="236" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga910f2b9df58fb0706aa40e3b80f235aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_be16</definition>
        <argsstring>(struct net_buf_simple *buf, uint16_t val)</argsstring>
        <name>net_buf_simple_add_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 16-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="248" column="6" declfile="include/net/buf.h" declline="248" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaf1a89eb15eed79003412ba5a32a35cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_le24</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_add_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 24-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="260" column="6" declfile="include/net/buf.h" declline="260" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga5eb09afeff062af577094d2d3f5fdec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_be24</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_add_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 24-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="272" column="6" declfile="include/net/buf.h" declline="272" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga3bf1bcff840dddd721f2c49ef0ed7c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_le32</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_add_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 32-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="284" column="6" declfile="include/net/buf.h" declline="284" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaac5cd20776d8e7bb4db77cbe5366373c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_be32</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_add_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 32-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="296" column="6" declfile="include/net/buf.h" declline="296" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga5be8c9f33df5b31c15df193a7116ce25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_le48</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_add_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 48-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="308" column="6" declfile="include/net/buf.h" declline="308" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gadb433fb4a1a61702c0615359a4340171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_be48</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_add_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 48-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="320" column="6" declfile="include/net/buf.h" declline="320" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga79dc411da328b847dcf1903d71eaf011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_le64</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_add_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 64-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="332" column="6" declfile="include/net/buf.h" declline="332" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8e31a7b6537d7634e346236534d2a6d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_add_be64</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_add_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 64-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="344" column="6" declfile="include/net/buf.h" declline="344" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_buf_simple_remove_mem</definition>
        <argsstring>(struct net_buf_simple *buf, size_t len)</argsstring>
        <name>net_buf_simple_remove_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Remove data from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes data from the end of the buffer by modifying the buffer length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New end of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="356" column="6" declfile="include/net/buf.h" declline="356" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaf508f74e5e050a7294e8a70bd3725fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t net_buf_simple_remove_u8</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove a 8-bit value from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 8-bit values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The 8-bit removed value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="368" column="9" declfile="include/net/buf.h" declline="368" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0b57f9ca2f3837e94cd7862e37efc01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_buf_simple_remove_le16</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 16-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="380" column="10" declfile="include/net/buf.h" declline="380" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga93f9f84845601df4ffc118be1ffd2fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_buf_simple_remove_be16</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 16-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="392" column="10" declfile="include/net/buf.h" declline="392" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga4e2fef883228f7de41af3cf90648c3c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_remove_le24</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 24-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="404" column="10" declfile="include/net/buf.h" declline="404" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga9b39384162a91d7d07e037a9ada782dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_remove_be24</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 24-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="416" column="10" declfile="include/net/buf.h" declline="416" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga9e8d016ce384378142fdec6c8dde2457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_remove_le32</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 32-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="428" column="10" declfile="include/net/buf.h" declline="428" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gae8ecc1fbc9dfc007f1b4e932cfaf2f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_remove_be32</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 32-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="440" column="10" declfile="include/net/buf.h" declline="440" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gac0628bbbe5d9c2b82766d5a17e767696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_remove_le48</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 48-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="452" column="10" declfile="include/net/buf.h" declline="452" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gab93d22797c3f406179c4c145241d6abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_remove_be48</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 48-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="464" column="10" declfile="include/net/buf.h" declline="464" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga560bd7b181c7f08599ae9241b6ce99fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_remove_le64</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 64-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="476" column="10" declfile="include/net/buf.h" declline="476" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga602fae83e2ecf47552a11f9282619932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_remove_be64</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_remove_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem()</ref>, but a helper for operating on 64-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="488" column="10" declfile="include/net/buf.h" declline="488" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga64df9754665440370340c6dddde625d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_buf_simple_push</definition>
        <argsstring>(struct net_buf_simple *buf, size_t len)</argsstring>
        <name>net_buf_simple_push</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Prepare data to be added to the start of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the data pointer and buffer length to account for more data in the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to add to the beginning.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new beginning of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="501" column="6" declfile="include/net/buf.h" declline="501" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaaa838083c610f7426c509efaae69a511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_buf_simple_push_mem</definition>
        <argsstring>(struct net_buf_simple *buf, const void *mem, size_t len)</argsstring>
        <name>net_buf_simple_push_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Copy given number of bytes from memory to the start of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the data pointer and buffer length to account for more data in the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of data to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be added.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new beginning of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="515" column="6" declfile="include/net/buf.h" declline="515" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga50cd64438d8f218e3d1ef8b53b7d41a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_le16</definition>
        <argsstring>(struct net_buf_simple *buf, uint16_t val)</argsstring>
        <name>net_buf_simple_push_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 16-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="527" column="6" declfile="include/net/buf.h" declline="527" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga827bd85eba0dbd098790d84d22e8e32d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_be16</definition>
        <argsstring>(struct net_buf_simple *buf, uint16_t val)</argsstring>
        <name>net_buf_simple_push_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 16-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="538" column="6" declfile="include/net/buf.h" declline="538" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0f19da70bfc8f597680ee02c21226a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_u8</definition>
        <argsstring>(struct net_buf_simple *buf, uint8_t val)</argsstring>
        <name>net_buf_simple_push_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 8-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 8-bit value the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="548" column="6" declfile="include/net/buf.h" declline="548" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gabe52d6735d835edc361666bb3413b907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_le24</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_push_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 24-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="559" column="6" declfile="include/net/buf.h" declline="559" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gabfddd4956ec1e356002a3122fea74b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_be24</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_push_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 24-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="570" column="6" declfile="include/net/buf.h" declline="570" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8662e6bada476c0d48cebea4661b2ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_le32</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_push_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 32-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="581" column="6" declfile="include/net/buf.h" declline="581" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gad0c3b8fdeaad6437c3dfcbb03fa52426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_be32</definition>
        <argsstring>(struct net_buf_simple *buf, uint32_t val)</argsstring>
        <name>net_buf_simple_push_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 32-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="592" column="6" declfile="include/net/buf.h" declline="592" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga66b44897e336f31e3ecbf4717bec274e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_le48</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_push_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 48-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="603" column="6" declfile="include/net/buf.h" declline="603" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga1ea39c7d7e9ba4e10d31d818e45e192a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_be48</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_push_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 48-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="614" column="6" declfile="include/net/buf.h" declline="614" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga771634e50e2bf7c291565ce6b2af7e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_le64</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_push_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 64-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="625" column="6" declfile="include/net/buf.h" declline="625" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gafea2201655955ab004b5f77106998ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_push_be64</definition>
        <argsstring>(struct net_buf_simple *buf, uint64_t val)</argsstring>
        <name>net_buf_simple_push_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 64-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="636" column="6" declfile="include/net/buf.h" declline="636" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_buf_simple_pull</definition>
        <argsstring>(struct net_buf_simple *buf, size_t len)</argsstring>
        <name>net_buf_simple_pull</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Remove data from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes data from the beginning of the buffer by modifying the data pointer and buffer length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New beginning of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="649" column="6" declfile="include/net/buf.h" declline="649" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga9c676fdbd6e999a9eab26b13d3608e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_buf_simple_pull_mem</definition>
        <argsstring>(struct net_buf_simple *buf, size_t len)</argsstring>
        <name>net_buf_simple_pull_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Remove data from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes data from the beginning of the buffer by modifying the data pointer and buffer length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the old location of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="662" column="6" declfile="include/net/buf.h" declline="662" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga09a261c615136fd39834cd301fc692e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t net_buf_simple_pull_u8</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove a 8-bit value from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 8-bit values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The 8-bit removed value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="674" column="9" declfile="include/net/buf.h" declline="674" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gad59d180ae81b55f6d618565a37d25dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_buf_simple_pull_le16</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 16-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="686" column="10" declfile="include/net/buf.h" declline="686" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gae36458ba05a4ab89e429be4cfd264440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_buf_simple_pull_be16</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 16-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="698" column="10" declfile="include/net/buf.h" declline="698" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga4c9d2ac72a176c49ec224353b5566eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_pull_le24</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 24-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="710" column="10" declfile="include/net/buf.h" declline="710" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga4c24d445d6b75c850a9e95fb242a50e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_pull_be24</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 24-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="722" column="10" declfile="include/net/buf.h" declline="722" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga38df82e6ba9bc2c75133200f7fa75353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_pull_le32</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 32-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="734" column="10" declfile="include/net/buf.h" declline="734" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga1a53892ed75f994bbbb3a2bcf1743d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t net_buf_simple_pull_be32</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 32-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="746" column="10" declfile="include/net/buf.h" declline="746" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga69fbfbd72b17783c5ee12b4b2ac9af46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_pull_le48</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 48-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="758" column="10" declfile="include/net/buf.h" declline="758" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga19bdefe740fe94a42fba76d71b4ef6e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_pull_be48</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 48-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="770" column="10" declfile="include/net/buf.h" declline="770" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga7e0e2d0adbe9062d08f5d8afc7acd89e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_pull_le64</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 64-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="782" column="10" declfile="include/net/buf.h" declline="782" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gad07f0d49a7db99063077de493e7b0712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t net_buf_simple_pull_be64</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_pull_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull()</ref>, but a helper for operating on 64-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="794" column="10" declfile="include/net/buf.h" declline="794" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8d623415477ed880ceb1fb8861832309" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>static uint8_t * net_buf_simple_tail</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_tail</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the tail pointer for a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a pointer to the end of the data in a buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tail pointer for the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="805" column="23" bodyfile="include/net/buf.h" bodystart="805" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gacfdef39367c6de8a1b4479c3647cca76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_buf_simple_headroom</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_headroom</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Check buffer headroom. </para>
        </briefdescription>
        <detaileddescription>
<para>Check how much free space there is in the beginning of the buffer.</para>
<para>buf A valid pointer on a buffer</para>
<para><simplesect kind="return"><para>Number of bytes available in the beginning of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="819" column="8" declfile="include/net/buf.h" declline="819" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga59b2e4d1c5c5743ba20eba3bf35ac39e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_buf_simple_tailroom</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_tailroom</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Check buffer tailroom. </para>
        </briefdescription>
        <detaileddescription>
<para>Check how much free space there is at the end of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes available at the end of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="830" column="8" declfile="include/net/buf.h" declline="830" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga7deeb4a89b90a3784e582abcb81d5126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_buf_simple_max_len</definition>
        <argsstring>(struct net_buf_simple *buf)</argsstring>
        <name>net_buf_simple_max_len</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Check maximum <ref refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" kindref="member">net_buf_simple::len</ref> value. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is depending on the number of bytes being reserved as headroom.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes usable behind the <ref refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" kindref="member">net_buf_simple::data</ref> pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="841" column="10" declfile="include/net/buf.h" declline="841" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga5b891f335480830a71a5ee2d71f1a3db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_simple_save</definition>
        <argsstring>(struct net_buf_simple *buf, struct net_buf_simple_state *state)</argsstring>
        <name>net_buf_simple_save</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf__simple__state" kindref="compound">net_buf_simple_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Save the parsing state of a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Saves the parsing state of a buffer so it can be restored later.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer from which the state should be saved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage for the state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="865" column="20" bodyfile="include/net/buf.h" bodystart="865" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaedd36481657a7a9d108659d56e131721" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_simple_restore</definition>
        <argsstring>(struct net_buf_simple *buf, struct net_buf_simple_state *state)</argsstring>
        <name>net_buf_simple_restore</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf__simple__state" kindref="compound">net_buf_simple_state</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Restore the parsing state of a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Restores the parsing state of a buffer from a state previously stored by <ref refid="group__net__buf_1ga5b891f335480830a71a5ee2d71f1a3db" kindref="member">net_buf_simple_save()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which the state should be restored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Stored state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="881" column="20" bodyfile="include/net/buf.h" bodystart="881" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga145f4b2de7548814eaa7ba86fb123989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> *</type>
        <definition>struct net_buf_pool * net_buf_pool_get</definition>
        <argsstring>(int id)</argsstring>
        <name>net_buf_pool_get</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Looks up a pool based on its ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool ID (e.g. from buf-&gt;pool_id).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to pool. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1222" column="19" declfile="include/net/buf.h" declline="1222" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gad89e43832ff01c4b333a3d6fd34d0517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_buf_id</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_id</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get a zero-based index for a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will translate a buffer into a zero-based index, based on its placement in its buffer pool. This can be useful if you want to associate an external array of meta-data contexts with the buffers of a pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Network buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero-based index for the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1236" column="5" declfile="include/net/buf.h" declline="1236" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga686df794ec6881625b54454a33587bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_alloc_fixed</definition>
        <argsstring>(struct net_buf_pool *pool, k_timeout_t timeout)</argsstring>
        <name>net_buf_alloc_fixed</name>
        <param>
          <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate a new fixed buffer from a pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pool to allocate the buffer from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait until the specified timeout. Note that some types of data allocators do not support blocking (such as the HEAP type). In this case it&apos;s still possible for <ref refid="group__net__buf_1ga534366f3b5c7f41a28372c12149ca005" kindref="member">net_buf_alloc()</ref> to fail (return NULL) even if it was given K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New buffer or NULL if out of buffers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1260" column="16" declfile="include/net/buf.h" declline="1260" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga534366f3b5c7f41a28372c12149ca005" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>static struct net_buf * net_buf_alloc</definition>
        <argsstring>(struct net_buf_pool *pool, k_timeout_t timeout)</argsstring>
        <name>net_buf_alloc</name>
        <param>
          <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pool to allocate the buffer from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait until the specified timeout. Note that some types of data allocators do not support blocking (such as the HEAP type). In this case it&apos;s still possible for <ref refid="group__net__buf_1ga534366f3b5c7f41a28372c12149ca005" kindref="member">net_buf_alloc()</ref> to fail (return NULL) even if it was given K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New buffer or NULL if out of buffers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1267" column="30" bodyfile="include/net/buf.h" bodystart="1267" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga11d489aedcca82117965fa6ba9d11ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_alloc_len</definition>
        <argsstring>(struct net_buf_pool *pool, size_t size, k_timeout_t timeout)</argsstring>
        <name>net_buf_alloc_len</name>
        <param>
          <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate a new variable length buffer from a pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pool to allocate the buffer from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of data the buffer must be able to fit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait until the specified timeout. Note that some types of data allocators do not support blocking (such as the HEAP type). In this case it&apos;s still possible for <ref refid="group__net__buf_1ga534366f3b5c7f41a28372c12149ca005" kindref="member">net_buf_alloc()</ref> to fail (return NULL) even if it was given K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New buffer or NULL if out of buffers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1297" column="16" declfile="include/net/buf.h" declline="1297" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8c24d0761d6d38facb6cca60c7c13c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_alloc_with_data</definition>
        <argsstring>(struct net_buf_pool *pool, void *data, size_t size, k_timeout_t timeout)</argsstring>
        <name>net_buf_alloc_with_data</name>
        <param>
          <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate a new buffer from a pool but with external data pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new buffer from a pool, where the data pointer comes from the user and not from the pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pool to allocate the buffer from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>External data pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of data the pointed data buffer if able to fit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait until the specified timeout. Note that some types of data allocators do not support blocking (such as the HEAP type). In this case it&apos;s still possible for <ref refid="group__net__buf_1ga534366f3b5c7f41a28372c12149ca005" kindref="member">net_buf_alloc()</ref> to fail (return NULL) even if it was given K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New buffer or NULL if out of buffers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1330" column="16" declfile="include/net/buf.h" declline="1330" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga014a0e87afc143d06a7eaf6c2f04c742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_get</definition>
        <argsstring>(struct k_fifo *fifo, k_timeout_t timeout)</argsstring>
        <name>net_buf_get</name>
        <param>
          <type>struct <ref refid="structk__fifo" kindref="compound">k_fifo</ref> *</type>
          <declname>fifo</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get a buffer from a FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is NOT thread-safe if the buffers in the FIFO contain fragments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Which FIFO to take the buffer from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the FIFO be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait until the specified timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New buffer or NULL if the FIFO is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1355" column="16" declfile="include/net/buf.h" declline="1355" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga739249547eb37b839b3c1ebdbcb88d28" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_destroy</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_destroy</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Destroy buffer from custom destroy callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper is only intended to be used from custom destroy callbacks. If no custom destroy callback is given to NET_BUF_POOL_*_DEFINE() then there is no need to use this API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1368" column="20" bodyfile="include/net/buf.h" bodystart="1368" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga1292f38b096fd80e31889aff44b0c021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_reset</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_reset</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Reset buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Reset buffer data and flags so it can be reused for other purposes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1382" column="6" declfile="include/net/buf.h" declline="1382" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0e5d3d938becfefc4f4b4d083cb467aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_simple_reserve</definition>
        <argsstring>(struct net_buf_simple *buf, size_t reserve)</argsstring>
        <name>net_buf_simple_reserve</name>
        <param>
          <type>struct <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserve</declname>
        </param>
        <briefdescription>
<para>Initialize buffer with the given headroom. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer is not expected to contain any data when this API is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserve</parametername>
</parameternamelist>
<parameterdescription>
<para>How much headroom to reserve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1392" column="6" declfile="include/net/buf.h" declline="1392" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga6d2dfc45e1e5acf21fe08359a4f92a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_slist_put</definition>
        <argsstring>(sys_slist_t *list, struct net_buf *buf)</argsstring>
        <name>net_buf_slist_put</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Put a buffer into a list. </para>
        </briefdescription>
        <detaileddescription>
<para>If the buffer contains follow-up fragments this function will take care of inserting them as well into the list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Which list to append the buffer to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1403" column="6" declfile="include/net/buf.h" declline="1403" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga218d4a0c160c57a44946154478724cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_slist_get</definition>
        <argsstring>(sys_slist_t *list)</argsstring>
        <name>net_buf_slist_get</name>
        <param>
          <type><ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Get a buffer from a list. </para>
        </briefdescription>
        <detaileddescription>
<para>If the buffer had any fragments, these will automatically be recovered from the list as well and be placed to the buffer&apos;s fragment list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Which list to take the buffer from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New buffer or NULL if the FIFO is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1415" column="16" declfile="include/net/buf.h" declline="1415" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga7e1bcc520b7bffcbd9c1d3d308100047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_put</definition>
        <argsstring>(struct k_fifo *fifo, struct net_buf *buf)</argsstring>
        <name>net_buf_put</name>
        <param>
          <type>struct <ref refid="structk__fifo" kindref="compound">k_fifo</ref> *</type>
          <declname>fifo</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Put a buffer to the end of a FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para>If the buffer contains follow-up fragments this function will take care of inserting them as well into the FIFO.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fifo</parametername>
</parameternamelist>
<parameterdescription>
<para>Which FIFO to put the buffer to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1426" column="6" declfile="include/net/buf.h" declline="1426" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gabedcb728bc2fc0c2b5319a8fd87e8273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_unref</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_unref</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Decrements the reference count of a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer is put back into the pool if the reference count reaches zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1440" column="6" declfile="include/net/buf.h" declline="1440" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga29387b2a672bf2bb8739046a46f3601f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_ref</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_ref</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Increment the reference count of a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buffer newly referenced </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1450" column="16" declfile="include/net/buf.h" declline="1450" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaf4d80e2878e3c790fff206bec820f03f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_clone</definition>
        <argsstring>(struct net_buf *buf, k_timeout_t timeout)</argsstring>
        <name>net_buf_clone</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Clone buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Duplicate given buffer including any data and headers currently stored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait until the specified timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cloned buffer or NULL if out of buffers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1465" column="16" declfile="include/net/buf.h" declline="1465" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaf2df457abe3e56d47107b76bdc004756" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_user_data</definition>
        <argsstring>(const struct net_buf *buf)</argsstring>
        <name>net_buf_user_data</name>
        <param>
          <type>const struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the user data of a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the user data of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1475" column="22" bodyfile="include/net/buf.h" bodystart="1475" bodyend="1478"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8ac58ad4f73b498bef2ff3ac7e30c6c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_reserve</definition>
        <argsstring>(struct net_buf *buf, size_t reserve)</argsstring>
        <name>net_buf_reserve</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reserve</declname>
        </param>
        <briefdescription>
<para>Initialize buffer with the given headroom. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer is not expected to contain any data when this API is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserve</parametername>
</parameternamelist>
<parameterdescription>
<para>How much headroom to reserve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1488" column="20" bodyfile="include/net/buf.h" bodystart="1488" bodyend="1491"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga30776d2b21f06d244c083af5c25b0f3e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_add</definition>
        <argsstring>(struct net_buf *buf, size_t len)</argsstring>
        <name>net_buf_add</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Prepare data to be added at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to increment the length with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The original tail of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1504" column="20" bodyfile="include/net/buf.h" bodystart="1504" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gacf4e2eba52975ba6728c79274a769d0f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_add_mem</definition>
        <argsstring>(struct net_buf *buf, const void *mem, size_t len)</argsstring>
        <name>net_buf_add_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Copies the given number of bytes to the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Increments the data length of the buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of data to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The original tail of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1521" column="20" bodyfile="include/net/buf.h" bodystart="1521" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga868ac2bea103fed568b461cbcd45eda2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>static uint8_t * net_buf_add_u8</definition>
        <argsstring>(struct net_buf *buf, uint8_t val)</argsstring>
        <name>net_buf_add_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add (8-bit) byte at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Increments the data length of the buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value to be added.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the value added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1538" column="23" bodyfile="include/net/buf.h" bodystart="1538" bodyend="1541"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gadd6d01a3b1efd0de16f9bef975809404" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_le16</definition>
        <argsstring>(struct net_buf *buf, uint16_t val)</argsstring>
        <name>net_buf_add_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 16-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1553" column="20" bodyfile="include/net/buf.h" bodystart="1553" bodyend="1556"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga61878a9bd7462ca925eac39181f2972c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_be16</definition>
        <argsstring>(struct net_buf *buf, uint16_t val)</argsstring>
        <name>net_buf_add_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 16-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1568" column="20" bodyfile="include/net/buf.h" bodystart="1568" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga32b90364091ade229830686f03b25d4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_le24</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_add_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 24-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1583" column="20" bodyfile="include/net/buf.h" bodystart="1583" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0f3cd9f9b364a2d2125aea19221d3e1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_be24</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_add_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 24-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1598" column="20" bodyfile="include/net/buf.h" bodystart="1598" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gae8ba33b6592ef7fd859b35d63b285d87" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_le32</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_add_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 32-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1613" column="20" bodyfile="include/net/buf.h" bodystart="1613" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga5543d00c96f83970f8dbf3670a9dc3fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_be32</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_add_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 32-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1628" column="20" bodyfile="include/net/buf.h" bodystart="1628" bodyend="1631"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaf19bf75c3d4d645b1eebf9254aa22790" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_le48</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_add_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 48-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1643" column="20" bodyfile="include/net/buf.h" bodystart="1643" bodyend="1646"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8fe6feb191ab338e91bd62f44e184deb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_be48</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_add_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 48-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1658" column="20" bodyfile="include/net/buf.h" bodystart="1658" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gac3f955f8fecc0e5971d2e5e8176e973e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_le64</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_add_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 64-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in little endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1673" column="20" bodyfile="include/net/buf.h" bodystart="1673" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga055f6eb7d5fbc9a3cf529a9ed00970c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_add_be64</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_add_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add 64-bit value at the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in big endian format at the end of buffer. Increments the data length of a buffer to account for more data at the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1688" column="20" bodyfile="include/net/buf.h" bodystart="1688" bodyend="1691"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_remove_mem</definition>
        <argsstring>(struct net_buf *buf, size_t len)</argsstring>
        <name>net_buf_remove_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Remove data from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes data from the end of the buffer by modifying the buffer length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New end of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1703" column="20" bodyfile="include/net/buf.h" bodystart="1703" bodyend="1706"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gad954b9f37790d5e7087db7db7bdedd41" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t net_buf_remove_u8</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove a 8-bit value from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 8-bit values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The 8-bit removed value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1718" column="23" bodyfile="include/net/buf.h" bodystart="1718" bodyend="1721"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaaf654110fb6a8bdfc27433945d4d1308" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t net_buf_remove_le16</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 16-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1733" column="24" bodyfile="include/net/buf.h" bodystart="1733" bodyend="1736"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga5da86c8ea703ab3f01c408cce73b0651" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t net_buf_remove_be16</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 16-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1748" column="24" bodyfile="include/net/buf.h" bodystart="1748" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga6f346a9af570528d238592851240fd74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_remove_be24</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 24-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1763" column="24" bodyfile="include/net/buf.h" bodystart="1763" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga903f59c8dea1b2c54969b567fe315041" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_remove_le24</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 24-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1778" column="24" bodyfile="include/net/buf.h" bodystart="1778" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gae9321a469cc751c58cfb532afd57d265" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_remove_le32</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 32-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1793" column="24" bodyfile="include/net/buf.h" bodystart="1793" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gacce707d646d7008ec3167af1a0b20da8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_remove_be32</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 32-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1808" column="24" bodyfile="include/net/buf.h" bodystart="1808" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0c147d9f95e2224696a8ace26f63a300" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_remove_le48</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 48-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1823" column="24" bodyfile="include/net/buf.h" bodystart="1823" bodyend="1826"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaab0e3bcc21c958c01ef076cd0efe087c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_remove_be48</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 48-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1838" column="24" bodyfile="include/net/buf.h" bodystart="1838" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga447b9c6be3fe04a50eb35dd29f190b6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_remove_le64</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 64-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1853" column="24" bodyfile="include/net/buf.h" bodystart="1853" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8b9edd213da2d48dfb8d70a8d307ba13" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_remove_be64</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_remove_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the end of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem()</ref>, but a helper for operating on 64-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1868" column="24" bodyfile="include/net/buf.h" bodystart="1868" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga96a2b1f07f3a7958057d9c7cc1f01b73" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_push</definition>
        <argsstring>(struct net_buf *buf, size_t len)</argsstring>
        <name>net_buf_push</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Prepare data to be added at the start of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the data pointer and buffer length to account for more data in the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to add to the beginning.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new beginning of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1884" column="20" bodyfile="include/net/buf.h" bodystart="1884" bodyend="1887"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga7e9daccec8cae1b9bfda52b0758adf0c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_push_mem</definition>
        <argsstring>(struct net_buf *buf, const void *mem, size_t len)</argsstring>
        <name>net_buf_push_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Copies the given number of bytes to the start of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the data pointer and buffer length to account for more data in the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of data to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be added.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new beginning of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1901" column="20" bodyfile="include/net/buf.h" bodystart="1901" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga9093202ba0a22bfa519bbe32d4585186" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_u8</definition>
        <argsstring>(struct net_buf *buf, uint8_t val)</argsstring>
        <name>net_buf_push_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 8-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 8-bit value the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1915" column="20" bodyfile="include/net/buf.h" bodystart="1915" bodyend="1918"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gab6c84c6846c06c2b339bc88df35e2655" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_le16</definition>
        <argsstring>(struct net_buf *buf, uint16_t val)</argsstring>
        <name>net_buf_push_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 16-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1929" column="20" bodyfile="include/net/buf.h" bodystart="1929" bodyend="1932"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga6dd756ff8332d076f5d37c69e6c534b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_be16</definition>
        <argsstring>(struct net_buf *buf, uint16_t val)</argsstring>
        <name>net_buf_push_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 16-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 16-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1943" column="20" bodyfile="include/net/buf.h" bodystart="1943" bodyend="1946"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga87524ac50e53ba59c6692af10cf001b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_le24</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_push_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 24-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1957" column="20" bodyfile="include/net/buf.h" bodystart="1957" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga87338399d8ecd64a894908ed4a2f710b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_be24</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_push_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 24-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 24-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>24-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1971" column="20" bodyfile="include/net/buf.h" bodystart="1971" bodyend="1974"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga97c9046185d6a1e9235bf6914c72dfc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_le32</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_push_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 32-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1985" column="20" bodyfile="include/net/buf.h" bodystart="1985" bodyend="1988"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gae4e64a23708ed910fb6c3ab8ba481a4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_be32</definition>
        <argsstring>(struct net_buf *buf, uint32_t val)</argsstring>
        <name>net_buf_push_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 32-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 32-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="1999" column="20" bodyfile="include/net/buf.h" bodystart="1999" bodyend="2002"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga852654f7e59951bf3536e3f4e98761bf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_le48</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_push_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 48-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2013" column="20" bodyfile="include/net/buf.h" bodystart="2013" bodyend="2016"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gabfbcb051019ff210cc2b85adcf4bc821" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_be48</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_push_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 48-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 48-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>48-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2027" column="20" bodyfile="include/net/buf.h" bodystart="2027" bodyend="2030"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gad4ee42b023881f80211fbeca53a0f25d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_le64</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_push_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 64-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in little endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2041" column="20" bodyfile="include/net/buf.h" bodystart="2041" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga43ff5faab0b099a355b9b96b7b0e3d8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_buf_push_be64</definition>
        <argsstring>(struct net_buf *buf, uint64_t val)</argsstring>
        <name>net_buf_push_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push 64-bit value to the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds 64-bit value in big endian format to the beginning of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit value to be pushed to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2055" column="20" bodyfile="include/net/buf.h" bodystart="2055" bodyend="2058"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_pull</definition>
        <argsstring>(struct net_buf *buf, size_t len)</argsstring>
        <name>net_buf_pull</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Remove data from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes data from the beginning of the buffer by modifying the data pointer and buffer length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New beginning of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2071" column="20" bodyfile="include/net/buf.h" bodystart="2071" bodyend="2074"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaedc5ffe19bb0ec438e633023c3c5de74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_buf_pull_mem</definition>
        <argsstring>(struct net_buf *buf, size_t len)</argsstring>
        <name>net_buf_pull_mem</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Remove data from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes data from the beginning of the buffer by modifying the data pointer and buffer length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to update. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the old beginning of the buffer data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2087" column="20" bodyfile="include/net/buf.h" bodystart="2087" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga71bb306d2ce459a60a8c3fc6dac54c90" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t net_buf_pull_u8</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_u8</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove a 8-bit value from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 8-bit values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The 8-bit removed value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2102" column="23" bodyfile="include/net/buf.h" bodystart="2102" bodyend="2105"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaed64e9f2b969f2c0d99cd281e73c860a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t net_buf_pull_le16</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_le16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 16-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2117" column="24" bodyfile="include/net/buf.h" bodystart="2117" bodyend="2120"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga97909a33c374a5c757fd2faf582139b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t net_buf_pull_be16</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_be16</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 16 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 16-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2132" column="24" bodyfile="include/net/buf.h" bodystart="2132" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga85c505321484a50ed9422f24934ed077" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_pull_le24</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_le24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 24-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2147" column="24" bodyfile="include/net/buf.h" bodystart="2147" bodyend="2150"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga8de937e8775879712ea0acbf60327a95" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_pull_be24</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_be24</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 24 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 24-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>24-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2162" column="24" bodyfile="include/net/buf.h" bodystart="2162" bodyend="2165"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga5f051078f1ffcc40e9ad40e7545a084f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_pull_le32</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_le32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 32-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2177" column="24" bodyfile="include/net/buf.h" bodystart="2177" bodyend="2180"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga5f8f2e2244eb574b3e57d09d85412967" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t net_buf_pull_be32</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_be32</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 32 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 32-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2192" column="24" bodyfile="include/net/buf.h" bodystart="2192" bodyend="2195"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga7eeee45b6639146d1492f92263ee4f51" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_pull_le48</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_le48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 48-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2207" column="24" bodyfile="include/net/buf.h" bodystart="2207" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga68934e105c4b3a8e27aa61b3ec5526db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_pull_be48</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_be48</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 48 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 48-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>48-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2222" column="24" bodyfile="include/net/buf.h" bodystart="2222" bodyend="2225"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga9a3df35e2287cbcfe1b60e2efa52c64e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_pull_le64</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_le64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 64-bit little endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from little endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2237" column="24" bodyfile="include/net/buf.h" bodystart="2237" bodyend="2240"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga3c1e80741a49691e69e57c891d3edb05" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t net_buf_pull_be64</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_pull_be64</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Remove and convert 64 bits from the beginning of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same idea as with <ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull()</ref>, but a helper for operating on 64-bit big endian data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit value converted from big endian to host endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2252" column="24" bodyfile="include/net/buf.h" bodystart="2252" bodyend="2255"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga605f725e051ddf153ad7f7d50340d812" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t net_buf_tailroom</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_tailroom</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Check buffer tailroom. </para>
        </briefdescription>
        <detaileddescription>
<para>Check how much free space there is at the end of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes available at the end of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2266" column="22" bodyfile="include/net/buf.h" bodystart="2266" bodyend="2269"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0962940eddb100072e075088629b5bb5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t net_buf_headroom</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_headroom</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Check buffer headroom. </para>
        </briefdescription>
        <detaileddescription>
<para>Check how much free space there is in the beginning of the buffer.</para>
<para>buf A valid pointer on a buffer</para>
<para><simplesect kind="return"><para>Number of bytes available in the beginning of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2280" column="22" bodyfile="include/net/buf.h" bodystart="2280" bodyend="2283"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaab5b7f481c8e31a3b6439cbc7bbe31e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t net_buf_max_len</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_max_len</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Check maximum <ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">net_buf::len</ref> value. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is depending on the number of bytes being reserved as headroom.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on a buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes usable behind the <ref refid="structnet__buf_1ac6eef59915e7ce167442fdacbbfb5e56" kindref="member">net_buf::data</ref> pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2294" column="24" bodyfile="include/net/buf.h" bodystart="2294" bodyend="2297"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gac8271c56f28b68cc58ee9e7a062eebe0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>static uint8_t * net_buf_tail</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_tail</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the tail pointer for a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Get a pointer to the end of the data in a buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tail pointer for the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2308" column="23" bodyfile="include/net/buf.h" bodystart="2308" bodyend="2311"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga042ce3f2e7e3fd0948ca2623fff36746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_frag_last</definition>
        <argsstring>(struct net_buf *frags)</argsstring>
        <name>net_buf_frag_last</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frags</declname>
        </param>
        <briefdescription>
<para>Find the last fragment in the fragment list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to last fragment in the list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2318" column="14" declfile="include/net/buf.h" declline="2318" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gac032b44db4a845dba8303fecfe1b63e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_buf_frag_insert</definition>
        <argsstring>(struct net_buf *parent, struct net_buf *frag)</argsstring>
        <name>net_buf_frag_insert</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Insert a new fragment to a chain of bufs. </para>
        </briefdescription>
        <detaileddescription>
<para>Insert a new fragment into the buffer fragments list after the parent.</para>
<para>Note: This function takes ownership of the fragment reference so the caller is not required to unref.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent buffer/fragment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2331" column="6" declfile="include/net/buf.h" declline="2331" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga0d7e310802a2bc7b2078f9310827535f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_frag_add</definition>
        <argsstring>(struct net_buf *head, struct net_buf *frag)</argsstring>
        <name>net_buf_frag_add</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Add a new fragment to the end of a chain of bufs. </para>
        </briefdescription>
        <detaileddescription>
<para>Append a new fragment into the buffer fragments list.</para>
<para>Note: This function takes ownership of the fragment reference so the caller is not required to unref.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the fragment chain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New head of the fragment chain. Either head (if head was non-NULL) or frag (if head was NULL). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2347" column="14" declfile="include/net/buf.h" declline="2347" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga602a99833bd401a0ada5bd5defa7a2ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_buf_frag_del</definition>
        <argsstring>(struct net_buf *parent, struct net_buf *frag)</argsstring>
        <name>net_buf_frag_del</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Delete existing fragment from a chain of bufs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent buffer/fragment, or NULL if there is no parent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment to delete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the buffer following the fragment, or NULL if it had no further fragments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2365" column="14" declfile="include/net/buf.h" declline="2365" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaf99e2d191233b285cef18aa43c828a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_buf_linearize</definition>
        <argsstring>(void *dst, size_t dst_len, struct net_buf *src, size_t offset, size_t len)</argsstring>
        <name>net_buf_linearize</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_len</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Copy bytes from <ref refid="structnet__buf" kindref="compound">net_buf</ref> chain starting at offset to linear buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy (extract) <emphasis>len</emphasis> bytes from <emphasis>src</emphasis> <ref refid="structnet__buf" kindref="compound">net_buf</ref> chain, starting from <emphasis>offset</emphasis> in it, to a linear buffer <emphasis>dst</emphasis>. Return number of bytes actually copied, which may be less than requested, if <ref refid="structnet__buf" kindref="compound">net_buf</ref> chain doesn&apos;t have enough data, or destination buffer is too small.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source <ref refid="structnet__buf" kindref="compound">net_buf</ref> chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting offset to copy from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes actually copied </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2383" column="8" declfile="include/net/buf.h" declline="2383" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga646d680491753b3ed29fa83c26732d1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_buf_append_bytes</definition>
        <argsstring>(struct net_buf *buf, size_t len, const void *value, k_timeout_t timeout, net_buf_allocator_cb allocate_cb, void *user_data)</argsstring>
        <name>net_buf_append_bytes</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__net__buf_1ga2d500726f502256748fc71ea384a5f4c" kindref="member">net_buf_allocator_cb</ref></type>
          <declname>allocate_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Append data to a list of <ref refid="structnet__buf" kindref="compound">net_buf</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Append data to a <ref refid="structnet__buf" kindref="compound">net_buf</ref>. If there is not enough space in the <ref refid="structnet__buf" kindref="compound">net_buf</ref> then more <ref refid="structnet__buf" kindref="compound">net_buf</ref> will be added, unless there are no free <ref refid="structnet__buf" kindref="compound">net_buf</ref> and timeout occurs. If not allocator is provided it attempts to allocate from the same pool as the original buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Network buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of input data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout is passed to the <ref refid="structnet__buf" kindref="compound">net_buf</ref> allocator callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocate_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>When a new <ref refid="structnet__buf" kindref="compound">net_buf</ref> is required, use this callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A user data pointer to be supplied to the allocate_cb. This pointer is can be anything from a mem_pool or a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>, the logic is left up to the allocate_cb function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of data actually added. This may be less than input length if other timeout than K_FOREVER was used, and there were no free fragments in a pool to accommodate all data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2424" column="8" declfile="include/net/buf.h" declline="2424" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1ga2d7096280d4fa6f5e32c4674d542889b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>static struct net_buf * net_buf_skip</definition>
        <argsstring>(struct net_buf *buf, size_t len)</argsstring>
        <name>net_buf_skip</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Skip N number of bytes in a <ref refid="structnet__buf" kindref="compound">net_buf</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Skip N number of bytes starting from fragment&apos;s offset. If the total length of data is placed in multiple fragments, this function will skip from all fragments until it reaches N number of bytes. Any fully skipped buffers are removed from the <ref refid="structnet__buf" kindref="compound">net_buf</ref> list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Network buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of data to be skipped.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the fragment or NULL and pos is 0 after successful skip, NULL and pos is 0xffff otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2443" column="28" bodyfile="include/net/buf.h" bodystart="2443" bodyend="2453"/>
      </memberdef>
      <memberdef kind="function" id="group__net__buf_1gaea38d8a418b739fa335e30ed91d9943d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t net_buf_frags_len</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>net_buf_frags_len</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Calculate amount of bytes stored in fragments. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the total amount of data stored in the given buffer and the fragments linked to it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to start off with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes in the buffer and its fragments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="2465" column="22" bodyfile="include/net/buf.h" bodystart="2465" bodyend="2475"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Buffer management. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_NET_BUF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_NET_BUF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zephyr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Alignment<sp/>needed<sp/>for<sp/>various<sp/>parts<sp/>of<sp/>the<sp/>buffer<sp/>definition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__net_buf_align<sp/>__aligned(sizeof(void<sp/>*))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__net__buf_1gaf85aa0b705bb4fbe2630191fde802501" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_SIMPLE_DEFINE(_name,<sp/>_size)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>net_buf_data_##_name[_size];<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>net_buf_simple<sp/>_name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/><sp/><sp/>=<sp/>net_buf_data_##_name,<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.len<sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/><sp/><sp/>=<sp/>_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__buf<sp/><sp/>=<sp/>net_buf_data_##_name,<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__net__buf_1ga21ced8b3082d57bf071008de5fffc0f4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_SIMPLE_DEFINE_STATIC(_name,<sp/>_size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>__noinit<sp/>uint8_t<sp/>net_buf_data_##_name[_size];<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>net_buf_simple<sp/>_name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/><sp/><sp/>=<sp/>net_buf_data_##_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.len<sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/><sp/><sp/>=<sp/>_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__buf<sp/><sp/>=<sp/>net_buf_data_##_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structnet__buf__simple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>{</highlight></codeline>
<codeline lineno="85" refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structnet__buf__simple_1ae6dc4aa029a67d3911293618eb30caa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf__simple_1ae6dc4aa029a67d3911293618eb30caa6" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*__buf;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="group__net__buf_1ga0b01dc80027d13b1895379d4d1397207" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_SIMPLE(_size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((struct<sp/>net_buf_simple<sp/>*)(&amp;(struct<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>net_buf_simple<sp/>buf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>data[_size];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buf.size<sp/>=<sp/>_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group__net__buf_1ga040279b601191367dee013bab9916d8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga040279b601191367dee013bab9916d8d" kindref="member">net_buf_simple_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserve_head)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buf-&gt;__buf)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf-&gt;__buf<sp/>=<sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*)buf<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*buf);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf-&gt;<ref refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" kindref="member">data</ref><sp/>=<sp/>buf-&gt;__buf<sp/>+<sp/>reserve_head;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf-&gt;<ref refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" kindref="member">len</ref><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="group__net__buf_1ga7fac47a2a25eaca39c5d14f1f55b485d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga7fac47a2a25eaca39c5d14f1f55b485d" kindref="member">net_buf_simple_init_with_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="group__net__buf_1ga4b537e913e132448cbf56976504ddddd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga4b537e913e132448cbf56976504ddddd" kindref="member">net_buf_simple_reset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf-&gt;<ref refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" kindref="member">len</ref><sp/><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf-&gt;<ref refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" kindref="member">data</ref><sp/>=<sp/>buf-&gt;__buf;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="group__net__buf_1ga0186c153b72a379affdd3e2e3994b5a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga0186c153b72a379affdd3e2e3994b5a7" kindref="member">net_buf_simple_clone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*original,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*clone);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="group__net__buf_1ga1906e637c848948f5780428a99b3341e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1ga1906e637c848948f5780428a99b3341e" kindref="member">net_buf_simple_add</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="group__net__buf_1gac37209c1e5097e5610860943fb7d0115" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1gac37209c1e5097e5610860943fb7d0115" kindref="member">net_buf_simple_add_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group__net__buf_1ga8ff9344b8d8deba1b72b8fca048a525c" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="group__net__buf_1ga8ff9344b8d8deba1b72b8fca048a525c" kindref="member">net_buf_simple_add_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="group__net__buf_1gaa2daf3b20074ff1a23806ce88becebf5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaa2daf3b20074ff1a23806ce88becebf5" kindref="member">net_buf_simple_add_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="group__net__buf_1ga910f2b9df58fb0706aa40e3b80f235aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga910f2b9df58fb0706aa40e3b80f235aa" kindref="member">net_buf_simple_add_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group__net__buf_1gaf1a89eb15eed79003412ba5a32a35cf6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaf1a89eb15eed79003412ba5a32a35cf6" kindref="member">net_buf_simple_add_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="group__net__buf_1ga5eb09afeff062af577094d2d3f5fdec8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga5eb09afeff062af577094d2d3f5fdec8" kindref="member">net_buf_simple_add_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="group__net__buf_1ga3bf1bcff840dddd721f2c49ef0ed7c56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga3bf1bcff840dddd721f2c49ef0ed7c56" kindref="member">net_buf_simple_add_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="group__net__buf_1gaac5cd20776d8e7bb4db77cbe5366373c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaac5cd20776d8e7bb4db77cbe5366373c" kindref="member">net_buf_simple_add_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="group__net__buf_1ga5be8c9f33df5b31c15df193a7116ce25" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga5be8c9f33df5b31c15df193a7116ce25" kindref="member">net_buf_simple_add_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="group__net__buf_1gadb433fb4a1a61702c0615359a4340171" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gadb433fb4a1a61702c0615359a4340171" kindref="member">net_buf_simple_add_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="group__net__buf_1ga79dc411da328b847dcf1903d71eaf011" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga79dc411da328b847dcf1903d71eaf011" kindref="member">net_buf_simple_add_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="group__net__buf_1ga8e31a7b6537d7634e346236534d2a6d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga8e31a7b6537d7634e346236534d2a6d0" kindref="member">net_buf_simple_add_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="group__net__buf_1gaf508f74e5e050a7294e8a70bd3725fc3" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__net__buf_1gaf508f74e5e050a7294e8a70bd3725fc3" kindref="member">net_buf_simple_remove_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="group__net__buf_1ga0b57f9ca2f3837e94cd7862e37efc01c" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1ga0b57f9ca2f3837e94cd7862e37efc01c" kindref="member">net_buf_simple_remove_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="group__net__buf_1ga93f9f84845601df4ffc118be1ffd2fee" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1ga93f9f84845601df4ffc118be1ffd2fee" kindref="member">net_buf_simple_remove_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="group__net__buf_1ga4e2fef883228f7de41af3cf90648c3c5" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga4e2fef883228f7de41af3cf90648c3c5" kindref="member">net_buf_simple_remove_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="group__net__buf_1ga9b39384162a91d7d07e037a9ada782dd" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga9b39384162a91d7d07e037a9ada782dd" kindref="member">net_buf_simple_remove_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="group__net__buf_1ga9e8d016ce384378142fdec6c8dde2457" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga9e8d016ce384378142fdec6c8dde2457" kindref="member">net_buf_simple_remove_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="group__net__buf_1gae8ecc1fbc9dfc007f1b4e932cfaf2f1d" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1gae8ecc1fbc9dfc007f1b4e932cfaf2f1d" kindref="member">net_buf_simple_remove_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="group__net__buf_1gac0628bbbe5d9c2b82766d5a17e767696" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1gac0628bbbe5d9c2b82766d5a17e767696" kindref="member">net_buf_simple_remove_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="group__net__buf_1gab93d22797c3f406179c4c145241d6abb" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1gab93d22797c3f406179c4c145241d6abb" kindref="member">net_buf_simple_remove_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="group__net__buf_1ga560bd7b181c7f08599ae9241b6ce99fd" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga560bd7b181c7f08599ae9241b6ce99fd" kindref="member">net_buf_simple_remove_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="group__net__buf_1ga602fae83e2ecf47552a11f9282619932" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga602fae83e2ecf47552a11f9282619932" kindref="member">net_buf_simple_remove_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="group__net__buf_1ga64df9754665440370340c6dddde625d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1ga64df9754665440370340c6dddde625d1" kindref="member">net_buf_simple_push</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="group__net__buf_1gaaa838083c610f7426c509efaae69a511" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1gaaa838083c610f7426c509efaae69a511" kindref="member">net_buf_simple_push_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="group__net__buf_1ga50cd64438d8f218e3d1ef8b53b7d41a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga50cd64438d8f218e3d1ef8b53b7d41a6" kindref="member">net_buf_simple_push_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="group__net__buf_1ga827bd85eba0dbd098790d84d22e8e32d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga827bd85eba0dbd098790d84d22e8e32d" kindref="member">net_buf_simple_push_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="group__net__buf_1ga0f19da70bfc8f597680ee02c21226a77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga0f19da70bfc8f597680ee02c21226a77" kindref="member">net_buf_simple_push_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="group__net__buf_1gabe52d6735d835edc361666bb3413b907" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gabe52d6735d835edc361666bb3413b907" kindref="member">net_buf_simple_push_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="group__net__buf_1gabfddd4956ec1e356002a3122fea74b72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gabfddd4956ec1e356002a3122fea74b72" kindref="member">net_buf_simple_push_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="group__net__buf_1ga8662e6bada476c0d48cebea4661b2ac1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga8662e6bada476c0d48cebea4661b2ac1" kindref="member">net_buf_simple_push_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="592" refid="group__net__buf_1gad0c3b8fdeaad6437c3dfcbb03fa52426" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gad0c3b8fdeaad6437c3dfcbb03fa52426" kindref="member">net_buf_simple_push_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="group__net__buf_1ga66b44897e336f31e3ecbf4717bec274e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga66b44897e336f31e3ecbf4717bec274e" kindref="member">net_buf_simple_push_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="group__net__buf_1ga1ea39c7d7e9ba4e10d31d818e45e192a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga1ea39c7d7e9ba4e10d31d818e45e192a" kindref="member">net_buf_simple_push_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="group__net__buf_1ga771634e50e2bf7c291565ce6b2af7e85" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga771634e50e2bf7c291565ce6b2af7e85" kindref="member">net_buf_simple_push_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="group__net__buf_1gafea2201655955ab004b5f77106998ae9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gafea2201655955ab004b5f77106998ae9" kindref="member">net_buf_simple_push_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="group__net__buf_1ga9c676fdbd6e999a9eab26b13d3608e0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1ga9c676fdbd6e999a9eab26b13d3608e0c" kindref="member">net_buf_simple_pull_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="group__net__buf_1ga09a261c615136fd39834cd301fc692e7" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__net__buf_1ga09a261c615136fd39834cd301fc692e7" kindref="member">net_buf_simple_pull_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="686" refid="group__net__buf_1gad59d180ae81b55f6d618565a37d25dba" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1gad59d180ae81b55f6d618565a37d25dba" kindref="member">net_buf_simple_pull_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="group__net__buf_1gae36458ba05a4ab89e429be4cfd264440" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1gae36458ba05a4ab89e429be4cfd264440" kindref="member">net_buf_simple_pull_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="group__net__buf_1ga4c9d2ac72a176c49ec224353b5566eb9" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga4c9d2ac72a176c49ec224353b5566eb9" kindref="member">net_buf_simple_pull_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="group__net__buf_1ga4c24d445d6b75c850a9e95fb242a50e1" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga4c24d445d6b75c850a9e95fb242a50e1" kindref="member">net_buf_simple_pull_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="734" refid="group__net__buf_1ga38df82e6ba9bc2c75133200f7fa75353" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga38df82e6ba9bc2c75133200f7fa75353" kindref="member">net_buf_simple_pull_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="group__net__buf_1ga1a53892ed75f994bbbb3a2bcf1743d3c" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga1a53892ed75f994bbbb3a2bcf1743d3c" kindref="member">net_buf_simple_pull_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="group__net__buf_1ga69fbfbd72b17783c5ee12b4b2ac9af46" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga69fbfbd72b17783c5ee12b4b2ac9af46" kindref="member">net_buf_simple_pull_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="group__net__buf_1ga19bdefe740fe94a42fba76d71b4ef6e2" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga19bdefe740fe94a42fba76d71b4ef6e2" kindref="member">net_buf_simple_pull_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="group__net__buf_1ga7e0e2d0adbe9062d08f5d8afc7acd89e" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga7e0e2d0adbe9062d08f5d8afc7acd89e" kindref="member">net_buf_simple_pull_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="794" refid="group__net__buf_1gad07f0d49a7db99063077de493e7b0712" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1gad07f0d49a7db99063077de493e7b0712" kindref="member">net_buf_simple_pull_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="group__net__buf_1ga8d623415477ed880ceb1fb8861832309" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="group__net__buf_1ga8d623415477ed880ceb1fb8861832309" kindref="member">net_buf_simple_tail</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf-&gt;<ref refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" kindref="member">data</ref><sp/>+<sp/>buf-&gt;<ref refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="group__net__buf_1gacfdef39367c6de8a1b4479c3647cca76" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gacfdef39367c6de8a1b4479c3647cca76" kindref="member">net_buf_simple_headroom</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="830" refid="group__net__buf_1ga59b2e4d1c5c5743ba20eba3bf35ac39e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga59b2e4d1c5c5743ba20eba3bf35ac39e" kindref="member">net_buf_simple_tailroom</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="group__net__buf_1ga7deeb4a89b90a3784e582abcb81d5126" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1ga7deeb4a89b90a3784e582abcb81d5126" kindref="member">net_buf_simple_max_len</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="850" refid="structnet__buf__simple__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple__state" kindref="compound">net_buf_simple_state</ref><sp/>{</highlight></codeline>
<codeline lineno="852" refid="structnet__buf__simple__state_1a4061f8e50e14289b1ec999ef490c8fbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf__simple__state_1a4061f8e50e14289b1ec999ef490c8fbf" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="854" refid="structnet__buf__simple__state_1af0e544fe2b018a7ff0b30970e9de8253" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf__simple__state_1af0e544fe2b018a7ff0b30970e9de8253" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">};</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="group__net__buf_1ga5b891f335480830a71a5ee2d71f1a3db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga5b891f335480830a71a5ee2d71f1a3db" kindref="member">net_buf_simple_save</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple__state" kindref="compound">net_buf_simple_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;offset<sp/>=<sp/><ref refid="group__net__buf_1gacfdef39367c6de8a1b4479c3647cca76" kindref="member">net_buf_simple_headroom</ref>(buf);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;len<sp/>=<sp/>buf-&gt;<ref refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="881" refid="group__net__buf_1gaedd36481657a7a9d108659d56e131721" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaedd36481657a7a9d108659d56e131721" kindref="member">net_buf_simple_restore</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple__state" kindref="compound">net_buf_simple_state</ref><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf-&gt;<ref refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" kindref="member">data</ref><sp/>=<sp/>buf-&gt;__buf<sp/>+<sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;offset;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf-&gt;<ref refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" kindref="member">len</ref><sp/>=<sp/><ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>-&gt;len;</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="group__net__buf_1ga7a818d395a17868ea4c954b344b58a8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_FRAGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906" refid="group__net__buf_1gaaeacbdf3cfda12691c75253015e5c19a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_EXTERNAL_DATA<sp/><sp/>BIT(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="915" refid="structnet__buf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="918" refid="structnet__buf_1a5cc70f57e5b776cfa12b2d556e5958f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="slist_8h_1a69bf43aad81e3ee2d55250c59b857493" kindref="member">sys_snode_t</ref><sp/><ref refid="structnet__buf_1a5cc70f57e5b776cfa12b2d556e5958f3" kindref="member">node</ref>;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="structnet__buf_1a1fa032cc23854c35eae013020823fa88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="structnet__buf_1a1fa032cc23854c35eae013020823fa88" kindref="member">frags</ref>;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="structnet__buf_1a42da518a82f4c37c45814b4f8c5f2731" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structnet__buf_1a42da518a82f4c37c45814b4f8c5f2731" kindref="member">ref</ref>;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="928" refid="structnet__buf_1aa4fcce2e2894fc5dbd9cc74fc020647e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structnet__buf_1aa4fcce2e2894fc5dbd9cc74fc020647e" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="structnet__buf_1a45f294bac054d64034bddcc4c6574d29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structnet__buf_1a45f294bac054d64034bddcc4c6574d29" kindref="member">pool_id</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>user<sp/>data<sp/>on<sp/>this<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934" refid="structnet__buf_1a65db7bed62d7211114767e6ce58dad75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structnet__buf_1a65db7bed62d7211114767e6ce58dad75" kindref="member">user_data_size</ref>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Union<sp/>for<sp/>convenience<sp/>access<sp/>to<sp/>the<sp/>net_buf_simple<sp/>members,<sp/>also</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>preserving<sp/>the<sp/>old<sp/>API.</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>ABI<sp/>of<sp/>this<sp/>struct<sp/>must<sp/>match<sp/>net_buf_simple<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="943" refid="structnet__buf_1ac6eef59915e7ce167442fdacbbfb5e56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structnet__buf_1ac6eef59915e7ce167442fdacbbfb5e56" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="structnet__buf_1a1522d81a002804223e25300a6961f527" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*__buf;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958" refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/><ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="962" refid="structnet__buf_1ade8055f804d5a1fea13e55d71d92a5e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structnet__buf_1ade8055f804d5a1fea13e55d71d92a5e7" kindref="member">user_data</ref>[]<sp/>__net_buf_align;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">};</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965" refid="structnet__buf__data__cb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__data__cb" kindref="compound">net_buf_data_cb</ref><sp/>{</highlight></codeline>
<codeline lineno="966" refid="structnet__buf__data__cb_1a34bf941a262975eef4ff1c6e14a0c78f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<sp/>__must_check<sp/>(*<ref refid="structnet__buf__data__cb_1a34bf941a262975eef4ff1c6e14a0c78f" kindref="member">alloc</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="968" refid="structnet__buf__data__cb_1a099e08c1dc2a48c821e381a8ce20cd51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<sp/>__must_check<sp/>(*<ref refid="structnet__buf__data__cb_1a099e08c1dc2a48c821e381a8ce20cd51" kindref="member">ref</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="969" refid="structnet__buf__data__cb_1a80c307edcf878bde8d43813854185575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/>(*<ref refid="structnet__buf__data__cb_1a80c307edcf878bde8d43813854185575" kindref="member">unref</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="970"><highlight class="normal">};</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972" refid="structnet__buf__data__alloc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__data__alloc" kindref="compound">net_buf_data_alloc</ref><sp/>{</highlight></codeline>
<codeline lineno="973" refid="structnet__buf__data__alloc_1a5e69e95df9a975707d45f7682e5d7f56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__data__cb" kindref="compound">net_buf_data_cb</ref><sp/>*<ref refid="structnet__buf__data__alloc_1a5e69e95df9a975707d45f7682e5d7f56" kindref="member">cb</ref>;</highlight></codeline>
<codeline lineno="974" refid="structnet__buf__data__alloc_1adcc085065789af4a8e641c2ad7e670af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structnet__buf__data__alloc_1adcc085065789af4a8e641c2ad7e670af" kindref="member">alloc_data</ref>;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">};</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="982" refid="structnet__buf__pool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>{</highlight></codeline>
<codeline lineno="984" refid="structnet__buf__pool_1a97e5b2e51238e859f93882a8008ba305" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__lifo" kindref="compound">k_lifo</ref><sp/><ref refid="structnet__buf__pool_1a97e5b2e51238e859f93882a8008ba305" kindref="member">free</ref>;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>prevent<sp/>concurrent<sp/>access/modifications<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="structnet__buf__pool_1ae92fc3f3f51be63ccdeee9614d21cc34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__spinlock" kindref="compound">k_spinlock</ref><sp/><ref refid="structnet__buf__pool_1ae92fc3f3f51be63ccdeee9614d21cc34" kindref="member">lock</ref>;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="990" refid="structnet__buf__pool_1a55b57f4f573c7e752c3ccf2f92f25626" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf__pool_1a55b57f4f573c7e752c3ccf2f92f25626" kindref="member">buf_count</ref>;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="993" refid="structnet__buf__pool_1a3fdf83b4c0b5acefbb761da285791ad2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__buf__pool_1a3fdf83b4c0b5acefbb761da285791ad2" kindref="member">uninit_count</ref>;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>user<sp/>data<sp/>allocated<sp/>to<sp/>this<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="structnet__buf__pool_1a4718ecec19d7e2ccaf04b6ff61120975" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structnet__buf__pool_1a4718ecec19d7e2ccaf04b6ff61120975" kindref="member">user_data_size</ref>;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_POOL_USAGE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/>avail_count;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>pool_size;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_NET_BUF_POOL_USAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="structnet__buf__pool_1a2a9141d7cd20cd98818a92dc5bc99f56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool_1a2a9141d7cd20cd98818a92dc5bc99f56" kindref="member">destroy</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013" refid="structnet__buf__pool_1a617bd8f77e55481d97183da8c0c62cc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__data__alloc" kindref="compound">net_buf_data_alloc</ref><sp/>*<ref refid="structnet__buf__pool_1a617bd8f77e55481d97183da8c0c62cc5" kindref="member">alloc</ref>;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__bufs;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_POOL_USAGE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_POOL_INITIALIZER(_pool,<sp/>_alloc,<sp/>_bufs,<sp/>_count,<sp/>_ud_size,<sp/>_destroy)<sp/>\</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1023"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.free<sp/>=<sp/>Z_LIFO_INITIALIZER(_pool.free),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lock<sp/>=<sp/>{<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1025"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buf_count<sp/>=<sp/>_count,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1026"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.uninit_count<sp/>=<sp/>_count,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1027"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.user_data_size<sp/>=<sp/>_ud_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.avail_count<sp/>=<sp/>ATOMIC_INIT(_count),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>STRINGIFY(_pool),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1030"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.destroy<sp/>=<sp/>_destroy,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1031"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.alloc<sp/>=<sp/>_alloc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1032"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__bufs<sp/>=<sp/>(struct<sp/>net_buf<sp/>*)_bufs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1033"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_POOL_INITIALIZER(_pool,<sp/>_alloc,<sp/>_bufs,<sp/>_count,<sp/>_ud_size,<sp/>_destroy)<sp/>\</highlight></codeline>
<codeline lineno="1036"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1037"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.free<sp/>=<sp/>Z_LIFO_INITIALIZER(_pool.free),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1038"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lock<sp/>=<sp/>{<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1039"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buf_count<sp/>=<sp/>_count,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1040"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.uninit_count<sp/>=<sp/>_count,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1041"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.user_data_size<sp/>=<sp/>_ud_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.destroy<sp/>=<sp/>_destroy,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1043"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.alloc<sp/>=<sp/>_alloc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1044"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__bufs<sp/>=<sp/>(struct<sp/>net_buf<sp/>*)_bufs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1045"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_NET_BUF_POOL_USAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_NET_BUF_ARRAY_DEFINE(_name,<sp/>_count,<sp/>_ud_size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1049"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>_net_buf_##_name<sp/>{<sp/>uint8_t<sp/>b[sizeof(struct<sp/>net_buf)];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ud[_ud_size];<sp/>}<sp/>__net_buf_align;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1051"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(_ud_size<sp/>&lt;=<sp/>UINT8_MAX);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1052"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(offsetof(struct<sp/>net_buf,<sp/>user_data)<sp/>==<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1053"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsetof(struct<sp/>_net_buf_##_name,<sp/>ud),<sp/>&quot;Invalid<sp/>offset&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(__alignof__(struct<sp/>net_buf)<sp/>==<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__alignof__(struct<sp/>_net_buf_##_name),<sp/>&quot;Invalid<sp/>alignment&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUILD_ASSERT(sizeof(struct<sp/>_net_buf_##_name)<sp/>==<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROUND_UP(sizeof(struct<sp/>net_buf)<sp/>+<sp/>_ud_size,<sp/>__alignof__(struct<sp/>net_buf)),<sp/>\</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Size<sp/>cannot<sp/>be<sp/>determined&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>struct<sp/>_net_buf_##_name<sp/>_net_buf_##_name[_count]<sp/>__noinit</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__data__alloc" kindref="compound">net_buf_data_alloc</ref><sp/>net_buf_heap_alloc;</highlight></codeline>
<codeline lineno="1091" refid="group__net__buf_1ga61671ac866081d31dfe9eddbf3b6f210" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_POOL_HEAP_DEFINE(_name,<sp/>_count,<sp/>_ud_size,<sp/>_destroy)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1092"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NET_BUF_ARRAY_DEFINE(_name,<sp/>_count,<sp/>_ud_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1093"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>STRUCT_SECTION_ITERABLE(net_buf_pool,<sp/>_name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1094"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NET_BUF_POOL_INITIALIZER(_name,<sp/>&amp;net_buf_heap_alloc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_net_buf_##_name,<sp/>_count,<sp/>_ud_size,<sp/>\</highlight></codeline>
<codeline lineno="1096"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_destroy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098" refid="structnet__buf__pool__fixed" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__pool__fixed" kindref="compound">net_buf_pool_fixed</ref><sp/>{</highlight></codeline>
<codeline lineno="1099" refid="structnet__buf__pool__fixed_1a409c6ee1146afefb2dbeb60bd15e5599" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool__fixed_1a409c6ee1146afefb2dbeb60bd15e5599" kindref="member">data_size</ref>;</highlight></codeline>
<codeline lineno="1100" refid="structnet__buf__pool__fixed_1a6e17291c5aa8dfe8a478d9b5e4e74596" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="structnet__buf__pool__fixed_1a6e17291c5aa8dfe8a478d9b5e4e74596" kindref="member">data_pool</ref>;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__data__cb" kindref="compound">net_buf_data_cb</ref><sp/>net_buf_fixed_cb;</highlight></codeline>
<codeline lineno="1135" refid="group__net__buf_1gacc53824e01db7935bcc9cad564b716cd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_POOL_FIXED_DEFINE(_name,<sp/>_count,<sp/>_data_size,<sp/>_ud_size,<sp/>_destroy)<sp/>\</highlight></codeline>
<codeline lineno="1136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NET_BUF_ARRAY_DEFINE(_name,<sp/>_count,<sp/>_ud_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>uint8_t<sp/>__noinit<sp/>net_buf_data_##_name[_count][_data_size];<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>net_buf_pool_fixed<sp/>net_buf_fixed_##_name<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_size<sp/>=<sp/>_data_size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_pool<sp/>=<sp/>(uint8_t<sp/>*)net_buf_data_##_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>net_buf_data_alloc<sp/>net_buf_fixed_alloc_##_name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.cb<sp/>=<sp/>&amp;net_buf_fixed_cb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.alloc_data<sp/>=<sp/>(void<sp/>*)&amp;net_buf_fixed_##_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>STRUCT_SECTION_ITERABLE(net_buf_pool,<sp/>_name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NET_BUF_POOL_INITIALIZER(_name,<sp/>&amp;net_buf_fixed_alloc_##_name,<sp/><sp/>\</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_net_buf_##_name,<sp/>_count,<sp/>_ud_size,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_destroy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__data__cb" kindref="compound">net_buf_data_cb</ref><sp/>net_buf_var_cb;</highlight></codeline>
<codeline lineno="1179" refid="group__net__buf_1ga90e691e793c964847d737f5ecf7646ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_POOL_VAR_DEFINE(_name,<sp/>_count,<sp/>_data_size,<sp/>_ud_size,<sp/>_destroy)<sp/>\</highlight></codeline>
<codeline lineno="1180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NET_BUF_ARRAY_DEFINE(_name,<sp/>_count,<sp/>_ud_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K_HEAP_DEFINE(net_buf_mem_pool_##_name,<sp/>_data_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>net_buf_data_alloc<sp/>net_buf_data_alloc_##_name<sp/>=<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.cb<sp/>=<sp/>&amp;net_buf_var_cb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.alloc_data<sp/>=<sp/>&amp;net_buf_mem_pool_##_name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>STRUCT_SECTION_ITERABLE(net_buf_pool,<sp/>_name)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NET_BUF_POOL_INITIALIZER(_name,<sp/>&amp;net_buf_data_alloc_##_name,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_net_buf_##_name,<sp/>_count,<sp/>_ud_size,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_destroy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="group__net__buf_1ga810aba8ba321fd012edc238ea9fe19dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_BUF_POOL_DEFINE(_name,<sp/>_count,<sp/>_size,<sp/>_ud_size,<sp/>_destroy)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NET_BUF_POOL_FIXED_DEFINE(_name,<sp/>_count,<sp/>_size,<sp/>_ud_size,<sp/>_destroy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222" refid="group__net__buf_1ga145f4b2de7548814eaa7ba86fb123989" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*<ref refid="group__net__buf_1ga145f4b2de7548814eaa7ba86fb123989" kindref="member">net_buf_pool_get</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236" refid="group__net__buf_1gad89e43832ff01c4b333a3d6fd34d0517" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gad89e43832ff01c4b333a3d6fd34d0517" kindref="member">net_buf_id</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/>net_buf_alloc_fixed_debug(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*func,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>net_buf_alloc_fixed(_pool,<sp/>_timeout)<sp/>\</highlight></codeline>
<codeline lineno="1258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net_buf_alloc_fixed_debug(_pool,<sp/>_timeout,<sp/>__func__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260" refid="group__net__buf_1ga686df794ec6881625b54454a33587bab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1ga686df794ec6881625b54454a33587bab" kindref="member">net_buf_alloc_fixed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="group__net__buf_1ga534366f3b5c7f41a28372c12149ca005" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1ga534366f3b5c7f41a28372c12149ca005" kindref="member">net_buf_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga686df794ec6881625b54454a33587bab" kindref="member">net_buf_alloc_fixed</ref>(pool,<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/>net_buf_alloc_len_debug(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*func,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>net_buf_alloc_len(_pool,<sp/>_size,<sp/>_timeout)<sp/>\</highlight></codeline>
<codeline lineno="1295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net_buf_alloc_len_debug(_pool,<sp/>_size,<sp/>_timeout,<sp/>__func__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297" refid="group__net__buf_1ga11d489aedcca82117965fa6ba9d11ca5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1ga11d489aedcca82117965fa6ba9d11ca5" kindref="member">net_buf_alloc_len</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/>net_buf_alloc_with_data_debug(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>net_buf_alloc_with_data(_pool,<sp/>_data_,<sp/>_size,<sp/>_timeout)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net_buf_alloc_with_data_debug(_pool,<sp/>_data_,<sp/>_size,<sp/>_timeout,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__func__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330" refid="group__net__buf_1ga8c24d0761d6d38facb6cca60c7c13c0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1ga8c24d0761d6d38facb6cca60c7c13c0c" kindref="member">net_buf_alloc_with_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/>net_buf_get_debug(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__fifo" kindref="compound">k_fifo</ref><sp/>*<ref refid="errno_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>net_buf_get(_fifo,<sp/>_timeout)<sp/>\</highlight></codeline>
<codeline lineno="1353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net_buf_get_debug(_fifo,<sp/>_timeout,<sp/>__func__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355" refid="group__net__buf_1ga014a0e87afc143d06a7eaf6c2f04c742" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1ga014a0e87afc143d06a7eaf6c2f04c742" kindref="member">net_buf_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__fifo" kindref="compound">k_fifo</ref><sp/>*<ref refid="errno_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>,</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368" refid="group__net__buf_1ga739249547eb37b839b3c1ebdbcb88d28" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga739249547eb37b839b3c1ebdbcb88d28" kindref="member">net_buf_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref><sp/>*pool<sp/>=<sp/><ref refid="group__net__buf_1ga145f4b2de7548814eaa7ba86fb123989" kindref="member">net_buf_pool_get</ref>(buf-&gt;<ref refid="structnet__buf_1a45f294bac054d64034bddcc4c6574d29" kindref="member">pool_id</ref>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lifo__apis_1gad662e36b1df8b9013e2dc61f9dfe3a8b" kindref="member">k_lifo_put</ref>(&amp;pool-&gt;<ref refid="structnet__buf__pool_1a97e5b2e51238e859f93882a8008ba305" kindref="member">free</ref>,<sp/>buf);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382" refid="group__net__buf_1ga1292f38b096fd80e31889aff44b0c021" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga1292f38b096fd80e31889aff44b0c021" kindref="member">net_buf_reset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392" refid="group__net__buf_1ga0e5d3d938becfefc4f4b4d083cb467aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga0e5d3d938becfefc4f4b4d083cb467aa" kindref="member">net_buf_simple_reserve</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserve);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403" refid="group__net__buf_1ga6d2dfc45e1e5acf21fe08359a4f92a18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga6d2dfc45e1e5acf21fe08359a4f92a18" kindref="member">net_buf_slist_put</ref>(<ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref><sp/>*list,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415" refid="group__net__buf_1ga218d4a0c160c57a44946154478724cb3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1ga218d4a0c160c57a44946154478724cb3" kindref="member">net_buf_slist_get</ref>(<ref refid="slist_8h_1a44658c336b634c03938a251cdc8134f8" kindref="member">sys_slist_t</ref><sp/>*list);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426" refid="group__net__buf_1ga7e1bcc520b7bffcbd9c1d3d308100047" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga7e1bcc520b7bffcbd9c1d3d308100047" kindref="member">net_buf_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__fifo" kindref="compound">k_fifo</ref><sp/>*<ref refid="errno_8c_1a4c78dc47164573bcfb8130a8d52e1b77" kindref="member">fifo</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>net_buf_unref_debug(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>net_buf_unref(_buf)<sp/>\</highlight></codeline>
<codeline lineno="1438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net_buf_unref_debug(_buf,<sp/>__func__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440" refid="group__net__buf_1gabedcb728bc2fc0c2b5319a8fd87e8273" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gabedcb728bc2fc0c2b5319a8fd87e8273" kindref="member">net_buf_unref</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450" refid="group__net__buf_1ga29387b2a672bf2bb8739046a46f3601f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1ga29387b2a672bf2bb8739046a46f3601f" kindref="member">net_buf_ref</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465" refid="group__net__buf_1gaf4d80e2878e3c790fff206bec820f03f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1gaf4d80e2878e3c790fff206bec820f03f" kindref="member">net_buf_clone</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475" refid="group__net__buf_1gaf2df457abe3e56d47107b76bdc004756" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>__must_check<sp/><ref refid="group__net__buf_1gaf2df457abe3e56d47107b76bdc004756" kindref="member">net_buf_user_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)buf-&gt;<ref refid="structnet__buf_1ade8055f804d5a1fea13e55d71d92a5e7" kindref="member">user_data</ref>;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488" refid="group__net__buf_1ga8ac58ad4f73b498bef2ff3ac7e30c6c3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga8ac58ad4f73b498bef2ff3ac7e30c6c3" kindref="member">net_buf_reserve</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reserve)</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga0e5d3d938becfefc4f4b4d083cb467aa" kindref="member">net_buf_simple_reserve</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>reserve);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504" refid="group__net__buf_1ga30776d2b21f06d244c083af5c25b0f3e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1ga30776d2b21f06d244c083af5c25b0f3e" kindref="member">net_buf_add</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga1906e637c848948f5780428a99b3341e" kindref="member">net_buf_simple_add</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521" refid="group__net__buf_1gacf4e2eba52975ba6728c79274a769d0f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1gacf4e2eba52975ba6728c79274a769d0f" kindref="member">net_buf_add_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gac37209c1e5097e5610860943fb7d0115" kindref="member">net_buf_simple_add_mem</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>mem,<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538" refid="group__net__buf_1ga868ac2bea103fed568b461cbcd45eda2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="group__net__buf_1ga868ac2bea103fed568b461cbcd45eda2" kindref="member">net_buf_add_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga8ff9344b8d8deba1b72b8fca048a525c" kindref="member">net_buf_simple_add_u8</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553" refid="group__net__buf_1gadd6d01a3b1efd0de16f9bef975809404" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gadd6d01a3b1efd0de16f9bef975809404" kindref="member">net_buf_add_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gaa2daf3b20074ff1a23806ce88becebf5" kindref="member">net_buf_simple_add_le16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568" refid="group__net__buf_1ga61878a9bd7462ca925eac39181f2972c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga61878a9bd7462ca925eac39181f2972c" kindref="member">net_buf_add_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga910f2b9df58fb0706aa40e3b80f235aa" kindref="member">net_buf_simple_add_be16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583" refid="group__net__buf_1ga32b90364091ade229830686f03b25d4c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga32b90364091ade229830686f03b25d4c" kindref="member">net_buf_add_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gaf1a89eb15eed79003412ba5a32a35cf6" kindref="member">net_buf_simple_add_le24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598" refid="group__net__buf_1ga0f3cd9f9b364a2d2125aea19221d3e1e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga0f3cd9f9b364a2d2125aea19221d3e1e" kindref="member">net_buf_add_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga5eb09afeff062af577094d2d3f5fdec8" kindref="member">net_buf_simple_add_be24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613" refid="group__net__buf_1gae8ba33b6592ef7fd859b35d63b285d87" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gae8ba33b6592ef7fd859b35d63b285d87" kindref="member">net_buf_add_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga3bf1bcff840dddd721f2c49ef0ed7c56" kindref="member">net_buf_simple_add_le32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628" refid="group__net__buf_1ga5543d00c96f83970f8dbf3670a9dc3fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga5543d00c96f83970f8dbf3670a9dc3fc" kindref="member">net_buf_add_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gaac5cd20776d8e7bb4db77cbe5366373c" kindref="member">net_buf_simple_add_be32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643" refid="group__net__buf_1gaf19bf75c3d4d645b1eebf9254aa22790" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaf19bf75c3d4d645b1eebf9254aa22790" kindref="member">net_buf_add_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga5be8c9f33df5b31c15df193a7116ce25" kindref="member">net_buf_simple_add_le48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658" refid="group__net__buf_1ga8fe6feb191ab338e91bd62f44e184deb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga8fe6feb191ab338e91bd62f44e184deb" kindref="member">net_buf_add_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gadb433fb4a1a61702c0615359a4340171" kindref="member">net_buf_simple_add_be48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673" refid="group__net__buf_1gac3f955f8fecc0e5971d2e5e8176e973e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gac3f955f8fecc0e5971d2e5e8176e973e" kindref="member">net_buf_add_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga79dc411da328b847dcf1903d71eaf011" kindref="member">net_buf_simple_add_le64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688" refid="group__net__buf_1ga055f6eb7d5fbc9a3cf529a9ed00970c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga055f6eb7d5fbc9a3cf529a9ed00970c4" kindref="member">net_buf_add_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga8e31a7b6537d7634e346236534d2a6d0" kindref="member">net_buf_simple_add_be64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703" refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1gace5ad98eac4772db3b0fa2181912f1f0" kindref="member">net_buf_remove_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga8473bdffadc05b22335a321df89f4b83" kindref="member">net_buf_simple_remove_mem</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718" refid="group__net__buf_1gad954b9f37790d5e7087db7db7bdedd41" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__net__buf_1gad954b9f37790d5e7087db7db7bdedd41" kindref="member">net_buf_remove_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaf508f74e5e050a7294e8a70bd3725fc3" kindref="member">net_buf_simple_remove_u8</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733" refid="group__net__buf_1gaaf654110fb6a8bdfc27433945d4d1308" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1gaaf654110fb6a8bdfc27433945d4d1308" kindref="member">net_buf_remove_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga0b57f9ca2f3837e94cd7862e37efc01c" kindref="member">net_buf_simple_remove_le16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748" refid="group__net__buf_1ga5da86c8ea703ab3f01c408cce73b0651" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1ga5da86c8ea703ab3f01c408cce73b0651" kindref="member">net_buf_remove_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga93f9f84845601df4ffc118be1ffd2fee" kindref="member">net_buf_simple_remove_be16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763" refid="group__net__buf_1ga6f346a9af570528d238592851240fd74" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga6f346a9af570528d238592851240fd74" kindref="member">net_buf_remove_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga9b39384162a91d7d07e037a9ada782dd" kindref="member">net_buf_simple_remove_be24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778" refid="group__net__buf_1ga903f59c8dea1b2c54969b567fe315041" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga903f59c8dea1b2c54969b567fe315041" kindref="member">net_buf_remove_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga4e2fef883228f7de41af3cf90648c3c5" kindref="member">net_buf_simple_remove_le24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793" refid="group__net__buf_1gae9321a469cc751c58cfb532afd57d265" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1gae9321a469cc751c58cfb532afd57d265" kindref="member">net_buf_remove_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga9e8d016ce384378142fdec6c8dde2457" kindref="member">net_buf_simple_remove_le32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808" refid="group__net__buf_1gacce707d646d7008ec3167af1a0b20da8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1gacce707d646d7008ec3167af1a0b20da8" kindref="member">net_buf_remove_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gae8ecc1fbc9dfc007f1b4e932cfaf2f1d" kindref="member">net_buf_simple_remove_be32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823" refid="group__net__buf_1ga0c147d9f95e2224696a8ace26f63a300" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga0c147d9f95e2224696a8ace26f63a300" kindref="member">net_buf_remove_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gac0628bbbe5d9c2b82766d5a17e767696" kindref="member">net_buf_simple_remove_le48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838" refid="group__net__buf_1gaab0e3bcc21c958c01ef076cd0efe087c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1gaab0e3bcc21c958c01ef076cd0efe087c" kindref="member">net_buf_remove_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gab93d22797c3f406179c4c145241d6abb" kindref="member">net_buf_simple_remove_be48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853" refid="group__net__buf_1ga447b9c6be3fe04a50eb35dd29f190b6d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga447b9c6be3fe04a50eb35dd29f190b6d" kindref="member">net_buf_remove_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1854"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga560bd7b181c7f08599ae9241b6ce99fd" kindref="member">net_buf_simple_remove_le64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868" refid="group__net__buf_1ga8b9edd213da2d48dfb8d70a8d307ba13" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga8b9edd213da2d48dfb8d70a8d307ba13" kindref="member">net_buf_remove_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="1869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga602fae83e2ecf47552a11f9282619932" kindref="member">net_buf_simple_remove_be64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884" refid="group__net__buf_1ga96a2b1f07f3a7958057d9c7cc1f01b73" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1ga96a2b1f07f3a7958057d9c7cc1f01b73" kindref="member">net_buf_push</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga64df9754665440370340c6dddde625d1" kindref="member">net_buf_simple_push</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901" refid="group__net__buf_1ga7e9daccec8cae1b9bfda52b0758adf0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1ga7e9daccec8cae1b9bfda52b0758adf0c" kindref="member">net_buf_push_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem,</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1903"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaaa838083c610f7426c509efaae69a511" kindref="member">net_buf_simple_push_mem</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>mem,<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915" refid="group__net__buf_1ga9093202ba0a22bfa519bbe32d4585186" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga9093202ba0a22bfa519bbe32d4585186" kindref="member">net_buf_push_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1916"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga0f19da70bfc8f597680ee02c21226a77" kindref="member">net_buf_simple_push_u8</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929" refid="group__net__buf_1gab6c84c6846c06c2b339bc88df35e2655" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gab6c84c6846c06c2b339bc88df35e2655" kindref="member">net_buf_push_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga50cd64438d8f218e3d1ef8b53b7d41a6" kindref="member">net_buf_simple_push_le16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943" refid="group__net__buf_1ga6dd756ff8332d076f5d37c69e6c534b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga6dd756ff8332d076f5d37c69e6c534b5" kindref="member">net_buf_push_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga827bd85eba0dbd098790d84d22e8e32d" kindref="member">net_buf_simple_push_be16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957" refid="group__net__buf_1ga87524ac50e53ba59c6692af10cf001b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga87524ac50e53ba59c6692af10cf001b9" kindref="member">net_buf_push_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gabe52d6735d835edc361666bb3413b907" kindref="member">net_buf_simple_push_le24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971" refid="group__net__buf_1ga87338399d8ecd64a894908ed4a2f710b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga87338399d8ecd64a894908ed4a2f710b" kindref="member">net_buf_push_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gabfddd4956ec1e356002a3122fea74b72" kindref="member">net_buf_simple_push_be24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985" refid="group__net__buf_1ga97c9046185d6a1e9235bf6914c72dfc4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga97c9046185d6a1e9235bf6914c72dfc4" kindref="member">net_buf_push_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga8662e6bada476c0d48cebea4661b2ac1" kindref="member">net_buf_simple_push_le32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999" refid="group__net__buf_1gae4e64a23708ed910fb6c3ab8ba481a4c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gae4e64a23708ed910fb6c3ab8ba481a4c" kindref="member">net_buf_push_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gad0c3b8fdeaad6437c3dfcbb03fa52426" kindref="member">net_buf_simple_push_be32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013" refid="group__net__buf_1ga852654f7e59951bf3536e3f4e98761bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga852654f7e59951bf3536e3f4e98761bf" kindref="member">net_buf_push_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga66b44897e336f31e3ecbf4717bec274e" kindref="member">net_buf_simple_push_le48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027" refid="group__net__buf_1gabfbcb051019ff210cc2b85adcf4bc821" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gabfbcb051019ff210cc2b85adcf4bc821" kindref="member">net_buf_push_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga1ea39c7d7e9ba4e10d31d818e45e192a" kindref="member">net_buf_simple_push_be48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041" refid="group__net__buf_1gad4ee42b023881f80211fbeca53a0f25d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gad4ee42b023881f80211fbeca53a0f25d" kindref="member">net_buf_push_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga771634e50e2bf7c291565ce6b2af7e85" kindref="member">net_buf_simple_push_le64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055" refid="group__net__buf_1ga43ff5faab0b099a355b9b96b7b0e3d8c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga43ff5faab0b099a355b9b96b7b0e3d8c" kindref="member">net_buf_push_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1gafea2201655955ab004b5f77106998ae9" kindref="member">net_buf_simple_push_be64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071" refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1gaef433d92734dd8691c292abdb823ba0e" kindref="member">net_buf_pull</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="2072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaf5ab4a5fe4a6226be72a510fea0ed8a8" kindref="member">net_buf_simple_pull</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087" refid="group__net__buf_1gaedc5ffe19bb0ec438e633023c3c5de74" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__net__buf_1gaedc5ffe19bb0ec438e633023c3c5de74" kindref="member">net_buf_pull_mem</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="2088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga9c676fdbd6e999a9eab26b13d3608e0c" kindref="member">net_buf_simple_pull_mem</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>,<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102" refid="group__net__buf_1ga71bb306d2ce459a60a8c3fc6dac54c90" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__net__buf_1ga71bb306d2ce459a60a8c3fc6dac54c90" kindref="member">net_buf_pull_u8</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga09a261c615136fd39834cd301fc692e7" kindref="member">net_buf_simple_pull_u8</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117" refid="group__net__buf_1gaed64e9f2b969f2c0d99cd281e73c860a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1gaed64e9f2b969f2c0d99cd281e73c860a" kindref="member">net_buf_pull_le16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gad59d180ae81b55f6d618565a37d25dba" kindref="member">net_buf_simple_pull_le16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132" refid="group__net__buf_1ga97909a33c374a5c757fd2faf582139b7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1ga97909a33c374a5c757fd2faf582139b7" kindref="member">net_buf_pull_be16</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gae36458ba05a4ab89e429be4cfd264440" kindref="member">net_buf_simple_pull_be16</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147" refid="group__net__buf_1ga85c505321484a50ed9422f24934ed077" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga85c505321484a50ed9422f24934ed077" kindref="member">net_buf_pull_le24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga4c9d2ac72a176c49ec224353b5566eb9" kindref="member">net_buf_simple_pull_le24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162" refid="group__net__buf_1ga8de937e8775879712ea0acbf60327a95" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga8de937e8775879712ea0acbf60327a95" kindref="member">net_buf_pull_be24</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga4c24d445d6b75c850a9e95fb242a50e1" kindref="member">net_buf_simple_pull_be24</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177" refid="group__net__buf_1ga5f051078f1ffcc40e9ad40e7545a084f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga5f051078f1ffcc40e9ad40e7545a084f" kindref="member">net_buf_pull_le32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga38df82e6ba9bc2c75133200f7fa75353" kindref="member">net_buf_simple_pull_le32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192" refid="group__net__buf_1ga5f8f2e2244eb574b3e57d09d85412967" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__net__buf_1ga5f8f2e2244eb574b3e57d09d85412967" kindref="member">net_buf_pull_be32</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga1a53892ed75f994bbbb3a2bcf1743d3c" kindref="member">net_buf_simple_pull_be32</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207" refid="group__net__buf_1ga7eeee45b6639146d1492f92263ee4f51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga7eeee45b6639146d1492f92263ee4f51" kindref="member">net_buf_pull_le48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga69fbfbd72b17783c5ee12b4b2ac9af46" kindref="member">net_buf_simple_pull_le48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222" refid="group__net__buf_1ga68934e105c4b3a8e27aa61b3ec5526db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga68934e105c4b3a8e27aa61b3ec5526db" kindref="member">net_buf_pull_be48</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga19bdefe740fe94a42fba76d71b4ef6e2" kindref="member">net_buf_simple_pull_be48</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237" refid="group__net__buf_1ga9a3df35e2287cbcfe1b60e2efa52c64e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga9a3df35e2287cbcfe1b60e2efa52c64e" kindref="member">net_buf_pull_le64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga7e0e2d0adbe9062d08f5d8afc7acd89e" kindref="member">net_buf_simple_pull_le64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252" refid="group__net__buf_1ga3c1e80741a49691e69e57c891d3edb05" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__net__buf_1ga3c1e80741a49691e69e57c891d3edb05" kindref="member">net_buf_pull_be64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gad07f0d49a7db99063077de493e7b0712" kindref="member">net_buf_simple_pull_be64</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266" refid="group__net__buf_1ga605f725e051ddf153ad7f7d50340d812" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga605f725e051ddf153ad7f7d50340d812" kindref="member">net_buf_tailroom</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga59b2e4d1c5c5743ba20eba3bf35ac39e" kindref="member">net_buf_simple_tailroom</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280" refid="group__net__buf_1ga0962940eddb100072e075088629b5bb5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga0962940eddb100072e075088629b5bb5" kindref="member">net_buf_headroom</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gacfdef39367c6de8a1b4479c3647cca76" kindref="member">net_buf_simple_headroom</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294" refid="group__net__buf_1gaab5b7f481c8e31a3b6439cbc7bbe31e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="group__net__buf_1gaab5b7f481c8e31a3b6439cbc7bbe31e8" kindref="member">net_buf_max_len</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga7deeb4a89b90a3784e582abcb81d5126" kindref="member">net_buf_simple_max_len</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308" refid="group__net__buf_1gac8271c56f28b68cc58ee9e7a062eebe0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="group__net__buf_1gac8271c56f28b68cc58ee9e7a062eebe0" kindref="member">net_buf_tail</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga8d623415477ed880ceb1fb8861832309" kindref="member">net_buf_simple_tail</ref>(&amp;buf-&gt;<ref refid="structnet__buf_1ae0c5a1a6613fc2779cbb8c4fc1b25750" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318" refid="group__net__buf_1ga042ce3f2e7e3fd0948ca2623fff36746" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__net__buf_1ga042ce3f2e7e3fd0948ca2623fff36746" kindref="member">net_buf_frag_last</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="structnet__buf_1a1fa032cc23854c35eae013020823fa88" kindref="member">frags</ref>);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331" refid="group__net__buf_1gac032b44db4a845dba8303fecfe1b63e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gac032b44db4a845dba8303fecfe1b63e7" kindref="member">net_buf_frag_insert</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*parent,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*frag);</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347" refid="group__net__buf_1ga0d7e310802a2bc7b2078f9310827535f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__net__buf_1ga0d7e310802a2bc7b2078f9310827535f" kindref="member">net_buf_frag_add</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*head,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*frag);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_BUF_LOG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*net_buf_frag_del_debug(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*parent,</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*frag,</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>net_buf_frag_del(_parent,<sp/>_frag)<sp/>\</highlight></codeline>
<codeline lineno="2363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net_buf_frag_del_debug(_parent,<sp/>_frag,<sp/>__func__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365" refid="group__net__buf_1ga602a99833bd401a0ada5bd5defa7a2ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__net__buf_1ga602a99833bd401a0ada5bd5defa7a2ff" kindref="member">net_buf_frag_del</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*parent,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*frag);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383" refid="group__net__buf_1ga2d500726f502256748fc71ea384a5f4c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaf99e2d191233b285cef18aa43c828a86" kindref="member">net_buf_linearize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_len,</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<sp/>__must_check<sp/>(*<ref refid="group__net__buf_1ga2d500726f502256748fc71ea384a5f4c" kindref="member">net_buf_allocator_cb</ref>)(<ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424" refid="group__net__buf_1ga646d680491753b3ed29fa83c26732d1a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1ga646d680491753b3ed29fa83c26732d1a" kindref="member">net_buf_append_bytes</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>,</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga2d500726f502256748fc71ea384a5f4c" kindref="member">net_buf_allocator_cb</ref><sp/>allocate_cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timer_2timer__api_2src_2main_8c_1a862de962130decf51321624c10294338" kindref="member">user_data</ref>);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443" refid="group__net__buf_1ga2d7096280d4fa6f5e32c4674d542889b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__net__buf_1ga2d7096280d4fa6f5e32c4674d542889b" kindref="member">net_buf_skip</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="2444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buf<sp/>&amp;&amp;<sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>--)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__net__buf_1ga71bb306d2ce459a60a8c3fc6dac54c90" kindref="member">net_buf_pull_u8</ref>(buf);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buf-&gt;<ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/><ref refid="group__net__buf_1ga602a99833bd401a0ada5bd5defa7a2ff" kindref="member">net_buf_frag_del</ref>(NULL,<sp/>buf);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465" refid="group__net__buf_1gaea38d8a418b739fa335e30ed91d9943d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__net__buf_1gaea38d8a418b739fa335e30ed91d9943d" kindref="member">net_buf_frags_len</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="2466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buf)<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>buf-&gt;<ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>buf-&gt;<ref refid="structnet__buf_1a1fa032cc23854c35eae013020823fa88" kindref="member">frags</ref>;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bytes;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_NET_BUF_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/net/buf.h"/>
  </compounddef>
</doxygen>
