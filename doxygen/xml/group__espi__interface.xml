<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__espi__interface" kind="group">
    <compoundname>espi_interface</compoundname>
    <title>ESPI Driver APIs</title>
    <innerclass refid="structespi__evt__data__kbc" prot="public">espi_evt_data_kbc</innerclass>
    <innerclass refid="structespi__evt__data__acpi" prot="public">espi_evt_data_acpi</innerclass>
    <innerclass refid="structespi__event" prot="public">espi_event</innerclass>
    <innerclass refid="structespi__cfg" prot="public">espi_cfg</innerclass>
    <innerclass refid="structespi__request__packet" prot="public">espi_request_packet</innerclass>
    <innerclass refid="structespi__oob__packet" prot="public">espi_oob_packet</innerclass>
    <innerclass refid="structespi__flash__packet" prot="public">espi_flash_packet</innerclass>
    <innerclass refid="structespi__saf__cfg" prot="public">espi_saf_cfg</innerclass>
    <innerclass refid="structespi__saf__packet" prot="public">espi_saf_packet</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__espi__interface_1ga0d7c61f1f4ec611d0c8a67ba73e2b4f0" prot="public" static="no" strong="no">
        <type></type>
        <name>espi_io_mode</name>
        <enumvalue id="group__espi__interface_1gga0d7c61f1f4ec611d0c8a67ba73e2b4f0a9f47188ebd9bb4cb6e426d0bc0b6595c" prot="public">
          <name>ESPI_IO_MODE_SINGLE_LINE</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga0d7c61f1f4ec611d0c8a67ba73e2b4f0af766582d28d16af7c5aff6372e4ee243" prot="public">
          <name>ESPI_IO_MODE_DUAL_LINES</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga0d7c61f1f4ec611d0c8a67ba73e2b4f0a87e70bb0f5c4f6a3a21ca1bcfa4540fc" prot="public">
          <name>ESPI_IO_MODE_QUAD_LINES</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>eSPI I/O mode capabilities </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="33" column="1" bodyfile="include/drivers/espi.h" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="group__espi__interface_1gafaa3f7d54503c901ab23bd79a7f8a755" prot="public" static="no" strong="no">
        <type></type>
        <name>espi_channel</name>
        <enumvalue id="group__espi__interface_1ggafaa3f7d54503c901ab23bd79a7f8a755a32f636bbad2618a6b1554656d3b53206" prot="public">
          <name>ESPI_CHANNEL_PERIPHERAL</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggafaa3f7d54503c901ab23bd79a7f8a755ac2e84a127870ff50359cf96528c9a7c6" prot="public">
          <name>ESPI_CHANNEL_VWIRE</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggafaa3f7d54503c901ab23bd79a7f8a755a0ccb80544cbda501cc90ea0c3b868e54" prot="public">
          <name>ESPI_CHANNEL_OOB</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggafaa3f7d54503c901ab23bd79a7f8a755a5616bf2bf49a8c457fcc2f27d9fe0518" prot="public">
          <name>ESPI_CHANNEL_FLASH</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>eSPI channel. </para>
        </briefdescription>
        <detaileddescription>
<para>+-------------------------------------------------------------------<mdash/>+ | | | eSPI host +----------<mdash/>+ | | +--------<mdash/>+ | Power | +-------<mdash/>+ | | |Out of band| | management | | GPIO | | | +---------<mdash/>+ |processor | | controller | | sources | | | | SPI flash | +--------<mdash/>+ +----------<mdash/>+ +-------<mdash/>+ | | | controller | | | | | | +---------<mdash/>+ | | | | | | | | +-----<mdash/>+ +------------<mdash/>+ | | | | | | | | | | | +--<mdash/>+ +-----<mdash/>+ +-------<mdash/>+ +-<mdash/>v--<mdash/>+ | | | | | | LPC | | Tunneled | | Tunneled | | | | | | | bridge | | SMBus | | GPIO | | | | | | +-----<mdash/>+ +-------<mdash/>+ +-------<mdash/>+ | | | | | | | | | | | | | ---<mdash/>+ | | | | | | | | | | | | | | +---<mdash/>v--<mdash/>+ +<mdash/>v----<mdash/>v----------<mdash/>v-<mdash/>+ | | | | | eSPI Flash | | eSPI protocol block | | | | | | access +<mdash/>&gt;+ | | | | | +---------<mdash/>+ +---------------------------<mdash/>+ | | | | | | | | +--------<mdash/>+ | | | | v v | | | XXXXXXXXXXXXXXXXXXXXXXX | | | XXXXXXXXXXXXXXXXXXXXX | | | XXXXXXXXXXXXXXXXXXX | +-------------------------------------------------------------------<mdash/>+ | | v +--------------<mdash/>+ +------<mdash/>+ | | | | | | | Flash | | | | | | | +------<mdash/>+ | + + + + | eSPI bus | CH0 CH1 CH2 CH3 | (logical channels) | + + + + | | | | | | | +--------------<mdash/>+ | +--------------------------------------------------------------------<mdash/>+ | eSPI slave | | | | CH0 | CH1 | CH2 | CH3 | | eSPI endpoint | VWIRE | OOB | Flash | +--------------------------------------------------------------------<mdash/>+</para>
<para>Identifies each eSPI logical channel supported by eSPI controller Each channel allows independent traffic, but the assignment of channel type to channel number is fixed.</para>
<para>Note that generic commands are not associated with any channel, so traffic over eSPI can occur if all channels are disabled or not ready </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="98" column="1" bodyfile="include/drivers/espi.h" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="group__espi__interface_1ga36ac3fbf9813f78bad90f047e1eb1128" prot="public" static="no" strong="no">
        <type></type>
        <name>espi_bus_event</name>
        <enumvalue id="group__espi__interface_1gga36ac3fbf9813f78bad90f047e1eb1128ae6d4d43eded0d8a368c90ea653a60956" prot="public">
          <name>ESPI_BUS_RESET</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga36ac3fbf9813f78bad90f047e1eb1128a996aee0a8f8ba0cead11cea0d39d2973" prot="public">
          <name>ESPI_BUS_EVENT_CHANNEL_READY</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga36ac3fbf9813f78bad90f047e1eb1128aa09f7dcd4b2d3addfaddbad5b8f2e5a2" prot="public">
          <name>ESPI_BUS_EVENT_VWIRE_RECEIVED</name>
          <initializer>= BIT(2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga36ac3fbf9813f78bad90f047e1eb1128a3b5e529d1d0ba11c59172ab01c30e203" prot="public">
          <name>ESPI_BUS_EVENT_OOB_RECEIVED</name>
          <initializer>= BIT(3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga36ac3fbf9813f78bad90f047e1eb1128a9ac837699f302bd10332814c7014adea" prot="public">
          <name>ESPI_BUS_PERIPHERAL_NOTIFICATION</name>
          <initializer>= BIT(4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>eSPI bus event. </para>
        </briefdescription>
        <detaileddescription>
<para>eSPI bus event to indicate events for which user can register callbacks </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="110" column="1" bodyfile="include/drivers/espi.h" bodystart="110" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="group__espi__interface_1ga2629a5518a94f031419eeccd05f07373" prot="public" static="no" strong="no">
        <type></type>
        <name>espi_virtual_peripheral</name>
        <enumvalue id="group__espi__interface_1gga2629a5518a94f031419eeccd05f07373a24478711945fd5258d8ca86bbb79b867" prot="public">
          <name>ESPI_PERIPHERAL_UART</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga2629a5518a94f031419eeccd05f07373aaea75bb5ab8a5ff31dd6b8787f44df30" prot="public">
          <name>ESPI_PERIPHERAL_8042_KBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga2629a5518a94f031419eeccd05f07373a8948a6f18bfbe87859a529d5f6e669b8" prot="public">
          <name>ESPI_PERIPHERAL_HOST_IO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga2629a5518a94f031419eeccd05f07373af51b7171cf6085fa7946333ff32fe2f0" prot="public">
          <name>ESPI_PERIPHERAL_DEBUG_PORT80</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga2629a5518a94f031419eeccd05f07373aa217b4786d7b8bacbaa4ec740550e71e" prot="public">
          <name>ESPI_PERIPHERAL_HOST_IO_PVT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>eSPI peripheral notification type. </para>
        </briefdescription>
        <detaileddescription>
<para>eSPI peripheral notification event details to indicate which peripheral trigger the eSPI callback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="154" column="1" bodyfile="include/drivers/espi.h" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="enum" id="group__espi__interface_1ga3e52615f244d7fa8ccda495ab8ec8a5b" prot="public" static="no" strong="no">
        <type></type>
        <name>espi_cycle_type</name>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5ba5b480e093a58849d4181bba22d5868a5" prot="public">
          <name>ESPI_CYCLE_MEMORY_READ32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5bac8ec7673b4466b278dfb5e468f7a4d79" prot="public">
          <name>ESPI_CYCLE_MEMORY_READ64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5ba2e5a736cf8a63491ee13d51ae4f8f073" prot="public">
          <name>ESPI_CYCLE_MEMORY_WRITE32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5ba54c11e63fcfe3f859af57e65af3f31f7" prot="public">
          <name>ESPI_CYCLE_MEMORY_WRITE64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5ba5f2ae0575ca4e9b61c0acd7d4f08ee82" prot="public">
          <name>ESPI_CYCLE_MESSAGE_NODATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5ba380e3d4e6b5579c8bb94e792fcb7d71f" prot="public">
          <name>ESPI_CYCLE_MESSAGE_DATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5ba0335f2d34fab46960939e2d2c1c12e3f" prot="public">
          <name>ESPI_CYCLE_OK_COMPLETION_NODATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5baf3dbc2bcc0ed883bc4d4160c21e6934f" prot="public">
          <name>ESPI_CYCLE_OKCOMPLETION_DATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1gga3e52615f244d7fa8ccda495ab8ec8a5ba0edb306e5fabcbf8b009375cde6a8a2b" prot="public">
          <name>ESPI_CYCLE_NOK_COMPLETION_NODATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>eSPI cycle types supported over eSPI peripheral channel </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="168" column="1" bodyfile="include/drivers/espi.h" bodystart="168" bodyend="178"/>
      </memberdef>
      <memberdef kind="enum" id="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" prot="public" static="no" strong="no">
        <type></type>
        <name>espi_vwire_signal</name>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35ab880a7156e489d5f7b8f78550e72b166" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLP_S3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a4ef1fe12bd09be0875864d6c32164f73" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLP_S4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35ac4b4e30c097a4ef49f21549a799e1e13" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLP_S5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a2f3f97b51b750050cd98e887e39431d1" prot="public">
          <name>ESPI_VWIRE_SIGNAL_OOB_RST_WARN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a0bafcd0bb7f592f0e308dcfce39bcd08" prot="public">
          <name>ESPI_VWIRE_SIGNAL_PLTRST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a0e13f250ba0c5a37451c7f3b0e98e663" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SUS_STAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35ad14b4b7a25141346bfefc507c588a238" prot="public">
          <name>ESPI_VWIRE_SIGNAL_NMIOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a1d54a71c6d2e52cb66cfaa0b55b61152" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SMIOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35af44250de6f60eabf9b0d85b8860ac56e" prot="public">
          <name>ESPI_VWIRE_SIGNAL_HOST_RST_WARN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35aa4c8c69475b48d88302066823d2f3592" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLP_A</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35ab4f0bedd5717660cc8cac2d85c6c3d18" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SUS_PWRDN_ACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a9e32eee077aaa1668c356fe1d4ab1cc5" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SUS_WARN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a3d95f095ae41bba9ef916fc68ddd4779" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLP_WLAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35aba8b891a643ca567966d091963be4615" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLP_LAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35ab9deb0dd6d4e878eff6413ddc34bb36c" prot="public">
          <name>ESPI_VWIRE_SIGNAL_HOST_C10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a923f3e602d9f8ac821ece2a625183146" prot="public">
          <name>ESPI_VWIRE_SIGNAL_DNX_WARN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35aa87af5b5de184238e5f371851aaee692" prot="public">
          <name>ESPI_VWIRE_SIGNAL_PME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a736724f8229aebc356c2720a34a0143f" prot="public">
          <name>ESPI_VWIRE_SIGNAL_WAKE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a8e15df6f8159b4c275dc4b20aaec352e" prot="public">
          <name>ESPI_VWIRE_SIGNAL_OOB_RST_ACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35ae47cb1e53323e2fd42d7f40c21cd583d" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLV_BOOT_STS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a504ae332b89262f70a0bf1a9c8b6f527" prot="public">
          <name>ESPI_VWIRE_SIGNAL_ERR_NON_FATAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35aae0a3fd882c5765db33a4e7bd05e1ab1" prot="public">
          <name>ESPI_VWIRE_SIGNAL_ERR_FATAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35aa90439bef2746a982cac6eb3ea2c515d" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SLV_BOOT_DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a89420628ae26df4c45ef7fba04a3a85e" prot="public">
          <name>ESPI_VWIRE_SIGNAL_HOST_RST_ACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a19c40230e0bb4cee7b6ee42580c28a8d" prot="public">
          <name>ESPI_VWIRE_SIGNAL_RST_CPU_INIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a2d9b2eef499d1bfd13bec1d2caa0e2f3" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SMI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35afa1f99a7e45b306c6736888e280f527c" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SCI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35a58280c68c980476aabefa16e0509dd1c" prot="public">
          <name>ESPI_VWIRE_SIGNAL_DNX_ACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggab65a0951a8912d9de398cfec0aef7d35abe28432b566619d8c6cce5e5034e5333" prot="public">
          <name>ESPI_VWIRE_SIGNAL_SUS_ACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>eSPI system platform signals that can be send or receive through virtual wire channel </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="184" column="1" bodyfile="include/drivers/espi.h" bodystart="184" bodyend="218"/>
      </memberdef>
      <memberdef kind="enum" id="group__espi__interface_1gad00b6a22843e5df9c6d6945d0d82310e" prot="public" static="no" strong="no">
        <type></type>
        <name>lpc_peripheral_opcode</name>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310eac172afb38cb38970ef6242a4f45132f9" prot="public">
          <name>E8042_OBF_HAS_CHAR</name>
          <initializer>= 0x50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310eab70684413d736c8583f3dc53f14b7c7a" prot="public">
          <name>E8042_IBF_HAS_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310eaa9135a5ea9a5ebd9d25660c37983c5d6" prot="public">
          <name>E8042_WRITE_KB_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310eaaef0649f867424ec0c7889acb7354911" prot="public">
          <name>E8042_WRITE_MB_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310eac5b666b3319dc2ef0fc571684c2ea198" prot="public">
          <name>E8042_RESUME_IRQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea5e7205b5f1371f1a0f2eaed299389475" prot="public">
          <name>E8042_PAUSE_IRQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310eacdeb74a9534310f5dab3f1bfb5def534" prot="public">
          <name>E8042_CLEAR_OBF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea8c62cd1266681c88aa0cb1af65ab551b" prot="public">
          <name>E8042_READ_KB_STS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea83266d88740588d45be6667a4034c447" prot="public">
          <name>E8042_SET_FLAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea5c592b1cad381b296cde832c67264cd1" prot="public">
          <name>E8042_CLEAR_FLAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea3cce8bd0205691ecda53fc469606929d" prot="public">
          <name>EACPI_OBF_HAS_CHAR</name>
          <initializer>= EACPI_START_OPCODE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea09f241a3f6ffcb5b7839c81c7fc4ea6e" prot="public">
          <name>EACPI_IBF_HAS_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea689643f6feb724a303d3b790ff2899f7" prot="public">
          <name>EACPI_WRITE_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea02bf8538a66f633e3d2ec094f57c6173" prot="public">
          <name>EACPI_READ_STS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__espi__interface_1ggad00b6a22843e5df9c6d6945d0d82310ea02c7b1c69d803a5c45304260786afb6f" prot="public">
          <name>EACPI_WRITE_STS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="221" column="1" bodyfile="include/drivers/espi.h" bodystart="221" bodyend="254"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__espi__interface_1ga30c892463e0da5c58e7e7a3f7e7145a8" prot="public" static="no">
        <type>void(*</type>
        <definition>espi_callback_handler_t</definition>
        <argsstring>)(const struct device *dev, struct espi_callback *cb, struct espi_event espi_evt)</argsstring>
        <name>espi_callback_handler_t</name>
        <briefdescription>
<para>Define the application callback handler function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device struct for the eSPI device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Original struct espi_callback owning this handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>espi_evt</parametername>
</parameternamelist>
<parameterdescription>
<para>event details that trigger the callback handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="342" column="9" bodyfile="include/drivers/espi.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__espi__interface_1ga7227c53d384eb0dc666361261f069f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_config</definition>
        <argsstring>(const struct device *dev, struct espi_cfg *cfg)</argsstring>
        <name>espi_config</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__cfg" kindref="compound">espi_cfg</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Configure operation of a eSPI controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to override eSPI controller capabilities.</para>
<para>If this eSPI controller is acting as slave, the values set here will be discovered as part through the GET_CONFIGURATION command issued by the eSPI master during initialization.</para>
<para>If this eSPI controller is acting as master, the values set here will be used by eSPI master to determine minimum common capabilities with eSPI slave then send via SET_CONFIGURATION command.</para>
<para>+-----<mdash/>+ +------<mdash/>+ +---<mdash/>+ +------<mdash/>+ +------<mdash/>+ | eSPI | | eSPI | | eSPI | | eSPI | | eSPI | | slave | | driver | | bus | | driver | | host | +-----<mdash/>+ +------<mdash/>+ +---<mdash/>+ +------<mdash/>+ +------<mdash/>+ | | | | | | espi_config | Set eSPI | Set eSPI | espi_config | +-----------<mdash/>+ ctrl regs | cap ctrl reg| +--------<mdash/>+ | +----<mdash/>+ | +-----<mdash/>+ | <table rows="3" cols="4"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>&lt;---<mdash/>+   </para>
</entry><entry thead="yes"><para>+----<mdash/>&gt;   </para>
</entry><entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>GET_CONFIGURATION   </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
| | +&lt;---------------<mdash/>+ | | |&lt;--------<mdash/>| | | | | eSPI caps | | | | |--------<mdash/>&gt;+ response | | | | |---------------<mdash/>&gt;+ | | | | | | | | | SET_CONFIGURATION | | | | +&lt;---------------<mdash/>+ | | | | accept | | | | +---------------<mdash/>&gt;+ |<itemizedlist>
<listitem><para>+ + + +</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>the device runtime configuration for the eSPI controller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid capabilities, failed to configure device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>capability not supported by eSPI slave. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="484" column="6" declfile="include/drivers/espi.h" declline="484" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga869551e20fc2c3be4311c21c3c53999d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool espi_get_channel_status</definition>
        <argsstring>(const struct device *dev, enum espi_channel ch)</argsstring>
        <name>espi_get_channel_status</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1gafaa3f7d54503c901ab23bd79a7f8a755" kindref="member">espi_channel</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Query to see if it a channel is ready. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows to check if logical channel is ready before use. Note that queries for channels not supported will always return false.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>the eSPI channel for which status is to be retrieved.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If eSPI channel is ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="507" column="7" declfile="include/drivers/espi.h" declline="507" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga112f7554ba614c8e5f239b1319b4a763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_read_request</definition>
        <argsstring>(const struct device *dev, struct espi_request_packet *req)</argsstring>
        <name>espi_read_request</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__request__packet" kindref="compound">espi_request_packet</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Sends memory, I/O or message read request over eSPI. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides a generic interface to send a read request packet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of structure representing a memory, I/O or message read request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if eSPI controller doesn&apos;t support raw packets and instead low memory transactions are handled by controller hardware directly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to send over the bus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="533" column="6" declfile="include/drivers/espi.h" declline="533" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga143ed88b1f220f9582c809165fd983fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_write_request</definition>
        <argsstring>(const struct device *dev, struct espi_request_packet *req)</argsstring>
        <name>espi_write_request</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__request__packet" kindref="compound">espi_request_packet</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Sends memory, I/O or message write request over eSPI. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides a generic interface to send a write request packet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of structure representing a memory, I/O or message write request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if eSPI controller doesn&apos;t support raw packets and instead low memory transactions are handled by controller hardware directly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to send over the bus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="563" column="6" declfile="include/drivers/espi.h" declline="563" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gaeaae20afa90d9d825d80997369f31465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_read_lpc_request</definition>
        <argsstring>(const struct device *dev, enum lpc_peripheral_opcode op, uint32_t *data)</argsstring>
        <name>espi_read_lpc_request</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1gad00b6a22843e5df9c6d6945d0d82310e" kindref="member">lpc_peripheral_opcode</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads SOC data from a LPC peripheral with information updated over eSPI. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to read a block whose information was updated by an eSPI transaction. Reading may trigger a transaction. The eSPI packet is assembled by the HW block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum representing opcode for peripheral type and read request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter to be read from to the LPC peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if eSPI peripheral is off or not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>for unimplemented lpc opcode, but in range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="595" column="6" declfile="include/drivers/espi.h" declline="595" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga880b6b04824f9f0deea10e8018573b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_write_lpc_request</definition>
        <argsstring>(const struct device *dev, enum lpc_peripheral_opcode op, uint32_t *data)</argsstring>
        <name>espi_write_lpc_request</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1gad00b6a22843e5df9c6d6945d0d82310e" kindref="member">lpc_peripheral_opcode</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes data to a LPC peripheral which generates an eSPI transaction. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to write data to a block which triggers an eSPI transaction. The eSPI packet is assembled by the HW block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum representing an opcode for peripheral type and write request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Represents the parameter passed to the LPC peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if eSPI peripheral is off or not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>for unimplemented lpc opcode, but in range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="628" column="6" declfile="include/drivers/espi.h" declline="628" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gacab2b3bff7d940e71ee1c2a9fdedf782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_send_vwire</definition>
        <argsstring>(const struct device *dev, enum espi_vwire_signal signal, uint8_t level)</argsstring>
        <name>espi_send_vwire</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" kindref="member">espi_vwire_signal</ref></type>
          <declname>signal</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sends system/platform signal as a virtual wire packet. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides a generic interface to send a virtual wire packet from slave to master.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to be send to eSPI master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of signal requested LOW or HIGH.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to send over the bus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="659" column="6" declfile="include/drivers/espi.h" declline="659" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gaa8bb48b5592c4b49d27c9b8a42432410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_receive_vwire</definition>
        <argsstring>(const struct device *dev, enum espi_vwire_signal signal, uint8_t *level)</argsstring>
        <name>espi_receive_vwire</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1gab65a0951a8912d9de398cfec0aef7d35" kindref="member">espi_vwire_signal</ref></type>
          <declname>signal</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Retrieves level status for a signal encapsulated in a virtual wire. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides a generic interface to request a virtual wire packet from eSPI master and retrieve the signal level.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>the signal to be requested from eSPI master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the level of signal requested 0b LOW, 1b HIGH.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="685" column="6" declfile="include/drivers/espi.h" declline="685" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga2557cfc7a38f669d14e9826e3fb0fdee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_send_oob</definition>
        <argsstring>(const struct device *dev, struct espi_oob_packet *pckt)</argsstring>
        <name>espi_send_oob</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__oob__packet" kindref="compound">espi_oob_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Sends SMBus transaction (out-of-band) packet over eSPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to encapsulate a SMBus transaction and send into packet over eSPI bus</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the packet representation of SMBus transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="710" column="6" declfile="include/drivers/espi.h" declline="710" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga4b8f4fbf66a2b2ae394e00b16500f70d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_receive_oob</definition>
        <argsstring>(const struct device *dev, struct espi_oob_packet *pckt)</argsstring>
        <name>espi_receive_oob</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__oob__packet" kindref="compound">espi_oob_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Receives SMBus transaction (out-of-band) packet from eSPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to receive and decoded a SMBus transaction from eSPI bus</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the packet representation of SMBus transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="737" column="6" declfile="include/drivers/espi.h" declline="737" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga0a97d11167367342283bfe6b6d66726e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_read_flash</definition>
        <argsstring>(const struct device *dev, struct espi_flash_packet *pckt)</argsstring>
        <name>espi_read_flash</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__flash__packet" kindref="compound">espi_flash_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Sends a read request packet for shared flash. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to send a request to read the flash component shared between the eSPI master and eSPI slaves.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Adddress of the representation of read flash transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash logical channel transactions not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash channel is not ready or disabled by master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="766" column="6" declfile="include/drivers/espi.h" declline="766" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gab02d46fd690e33875cc1b2433c976891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_write_flash</definition>
        <argsstring>(const struct device *dev, struct espi_flash_packet *pckt)</argsstring>
        <name>espi_write_flash</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__flash__packet" kindref="compound">espi_flash_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Sends a write request packet for shared flash. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to send a request to write to the flash components shared between the eSPI master and eSPI slaves.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the representation of write flash transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash logical channel transactions not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash channel is not ready or disabled by master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="795" column="6" declfile="include/drivers/espi.h" declline="795" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gab42be7c76c4523cea96365aa77fd18be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_flash_erase</definition>
        <argsstring>(const struct device *dev, struct espi_flash_packet *pckt)</argsstring>
        <name>espi_flash_erase</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__flash__packet" kindref="compound">espi_flash_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Sends a write request packet for shared flash. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to send a request to write to the flash components shared between the eSPI master and eSPI slaves.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the representation of write flash transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash logical channel transactions not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash channel is not ready or disabled by master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="824" column="6" declfile="include/drivers/espi.h" declline="824" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga8d88e4e3893d610713195e5352ec2565" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void espi_init_callback</definition>
        <argsstring>(struct espi_callback *callback, espi_callback_handler_t handler, enum espi_bus_event evt_type)</argsstring>
        <name>espi_init_callback</name>
        <param>
          <type>struct espi_callback *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="group__espi__interface_1ga30c892463e0da5c58e7e7a3f7e7145a8" kindref="member">espi_callback_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1ga36ac3fbf9813f78bad90f047e1eb1128" kindref="member">espi_bus_event</ref></type>
          <declname>evt_type</declname>
        </param>
        <briefdescription>
<para>Helper to initialize a struct espi_callback properly. </para>
        </briefdescription>
        <detaileddescription>
<para>Callback model</para>
<para>+----<mdash/>+ +----------<mdash/>+ +---<mdash/>+ +------<mdash/>+ | App | | eSPI driver | | HW | |eSPI Host| +<mdash/>+<mdash/>+ +----<mdash/>+--<mdash/>+ +<mdash/>+<ndash/>+ +-<mdash/>+-<mdash/>+ | | | | | espi_init_callback | | | +-------------------------<mdash/>&gt; | | | | espi_add_callback | | +--------------------------<mdash/>&gt;+ | | | | eSPI reset | eSPI host | | IRQ +&lt;---------<mdash/>+ resets the <table rows="5" cols="3"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>&lt;--------<mdash/>+   </para>
</entry><entry thead="yes"><para>bus    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>Processed   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>within the   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>driver   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
<para>| | | VW CH ready| eSPI host | | IRQ +&lt;---------<mdash/>+ enables VW <table rows="5" cols="3"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>&lt;--------<mdash/>+   </para>
</entry><entry thead="yes"><para>channel    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>Processed   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>within the   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>driver   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
| | | Memory I/O | Peripheral | | &lt;----------<mdash/>+ event | +&lt;---------<mdash/>+ | +&lt;--------------------------<mdash/>+ callback | | | Report peripheral event | | | | and data for the event | | | | | | | | | | SLP_S5 | eSPI host | | &lt;----------<mdash/>+ send VWire | +&lt;---------<mdash/>+ | +&lt;--------------------------<mdash/>+ callback | | | App enables/configures | | | <table rows="2" cols="3"><row>
<entry thead="yes"><para>discrete regulator   </para>
</entry><entry thead="yes"><para></para>
</entry><entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>espi_send_vwire_signal   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
+---------------------------<mdash/>&gt;---------<mdash/>&gt;|---------<mdash/>&gt;| | | | | | | | HOST_RST | eSPI host | | &lt;----------<mdash/>+ send VWire | +&lt;---------<mdash/>+ | +&lt;--------------------------<mdash/>+ callback | | | App reset host-related | | | | data structures | | | | | | | | | | C10 | eSPI host | | +&lt;---------<mdash/>+ send VWire | &lt;----------<mdash/>+ | &lt;---------------------------<mdash/>+ | | | App executes | | |<itemizedlist>
<listitem><para>power mgmt policy | | |</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid Application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handler function pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evt_type</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates the eSPI event relevant for the handler. for VWIRE_RECEIVED event the data will indicate the new level asserted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="908" column="20" bodyfile="include/drivers/espi.h" bodystart="908" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gabf5f0ea01ec8ed5345b2e119181c2313" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int espi_add_callback</definition>
        <argsstring>(const struct device *dev, struct espi_callback *callback)</argsstring>
        <name>espi_add_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct espi_callback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Add an application callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid Application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code on failure.</para>
</simplesect>
<simplesect kind="note"><para>Callbacks may be added to the device from within a callback handler invocation, but whether they are invoked for the current eSPI event is not specified.</para>
</simplesect>
Note: enables to add as many callback as needed on the same device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="931" column="19" bodyfile="include/drivers/espi.h" bodystart="931" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga7f04f98ea6a4671b821cf6ddf6bbf2a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int espi_remove_callback</definition>
        <argsstring>(const struct device *dev, struct espi_callback *callback)</argsstring>
        <name>espi_remove_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct espi_callback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Remove an application callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code on failure.</para>
</simplesect>
<simplesect kind="warning"><para>It is explicitly permitted, within a callback handler, to remove the registration for the callback that is running, i.e. <computeroutput>callback</computeroutput>. Attempts to remove other registrations on the same device may result in undefined behavior, including failure to invoke callbacks that remain registered and unintended invocation of removed callbacks.</para>
</simplesect>
Note: enables to remove as many callbacks as added through <ref refid="group__espi__interface_1gabf5f0ea01ec8ed5345b2e119181c2313" kindref="member">espi_add_callback()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="960" column="19" bodyfile="include/drivers/espi.h" bodystart="960" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga34b0f6336aec45016d97528767b09434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_saf_config</definition>
        <argsstring>(const struct device *dev, const struct espi_saf_cfg *cfg)</argsstring>
        <name>espi_saf_config</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structespi__saf__cfg" kindref="compound">espi_saf_cfg</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Configure operation of a eSPI controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides a generic interface to override eSPI controller capabilities.</para>
<para>If this eSPI controller is acting as slave, the values set here will be discovered as part through the GET_CONFIGURATION command issued by the eSPI master during initialization.</para>
<para>If this eSPI controller is acting as master, the values set here will be used by eSPI master to determine minimum common capabilities with eSPI slave then send via SET_CONFIGURATION command.</para>
<para>+-----<mdash/>+ +------<mdash/>+ +---<mdash/>+ +------<mdash/>+ +------<mdash/>+ | eSPI | | eSPI | | eSPI | | eSPI | | eSPI | | slave | | driver | | bus | | driver | | host | +-----<mdash/>+ +------<mdash/>+ +---<mdash/>+ +------<mdash/>+ +------<mdash/>+ | | | | | | espi_config | Set eSPI | Set eSPI | espi_config | +-----------<mdash/>+ ctrl regs | cap ctrl reg| +--------<mdash/>+ | +----<mdash/>+ | +-----<mdash/>+ | <table rows="3" cols="4"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>&lt;---<mdash/>+   </para>
</entry><entry thead="yes"><para>+----<mdash/>&gt;   </para>
</entry><entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>GET_CONFIGURATION   </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
| | +&lt;---------------<mdash/>+ | | |&lt;--------<mdash/>| | | | | eSPI caps | | | | |--------<mdash/>&gt;+ response | | | | |---------------<mdash/>&gt;+ | | | | | | | | | SET_CONFIGURATION | | | | +&lt;---------------<mdash/>+ | | | | accept | | | | +---------------<mdash/>&gt;+ |<itemizedlist>
<listitem><para>+ + + +</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>the device runtime configuration for the eSPI controller.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid capabilities, failed to configure device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>capability not supported by eSPI slave. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="212" column="6" declfile="include/drivers/espi_saf.h" declline="212" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga273a9707f3ca501ed2dd3019cdeaa363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_saf_set_protection_regions</definition>
        <argsstring>(const struct device *dev, const struct espi_saf_protection *pr)</argsstring>
        <name>espi_saf_set_protection_regions</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct espi_saf_protection *</type>
          <declname>pr</declname>
        </param>
        <briefdescription>
<para>Set one or more SAF protection regions. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides an interface to override the default flash protection regions of the SAF controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the SAF protection region structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed to configure device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid capabilities, failed to configure device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>capability not supported by eSPI slave. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="238" column="6" declfile="include/drivers/espi_saf.h" declline="238" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gaafe30738c18a16b056ed8dcf8638eb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_saf_activate</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>espi_saf_activate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Activate SAF block. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine activates the SAF block and should only be called after SAF has been configured and the eSPI Master has enabled the Flash Channel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if failed to activate SAF. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="264" column="6" declfile="include/drivers/espi_saf.h" declline="264" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga8b53a93559f0c67953e283f59107aa22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool espi_saf_get_channel_status</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>espi_saf_get_channel_status</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Query to see if SAF is ready. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows to check if SAF is ready before use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If eSPI SAF is ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="284" column="7" declfile="include/drivers/espi_saf.h" declline="284" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga0f5017eac05f928e635fec8e5f877c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_saf_flash_read</definition>
        <argsstring>(const struct device *dev, struct espi_saf_packet *pckt)</argsstring>
        <name>espi_saf_flash_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__saf__packet" kindref="compound">espi_saf_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Sends a read request packet for slave attached flash. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to send a request to read the flash component shared between the eSPI master and eSPI slaves.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Adddress of the representation of read flash transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash logical channel transactions not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash channel is not ready or disabled by master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="308" column="6" declfile="include/drivers/espi_saf.h" declline="308" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga104175f74019e58b8b7901f3dae245db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_saf_flash_write</definition>
        <argsstring>(const struct device *dev, struct espi_saf_packet *pckt)</argsstring>
        <name>espi_saf_flash_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__saf__packet" kindref="compound">espi_saf_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Sends a write request packet for slave attached flash. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to send a request to write to the flash components shared between the eSPI master and eSPI slaves.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the representation of write flash transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash logical channel transactions not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash channel is not ready or disabled by master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="337" column="6" declfile="include/drivers/espi_saf.h" declline="337" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga15855a2ac593b97dc1a3e83ac9eda300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int espi_saf_flash_erase</definition>
        <argsstring>(const struct device *dev, struct espi_saf_packet *pckt)</argsstring>
        <name>espi_saf_flash_erase</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structespi__saf__packet" kindref="compound">espi_saf_packet</ref> *</type>
          <declname>pckt</declname>
        </param>
        <briefdescription>
<para>Sends a write request packet for slave attached flash. </para>
        </briefdescription>
        <detaileddescription>
<para>This routines provides an interface to send a request to write to the flash components shared between the eSPI master and eSPI slaves.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pckt</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the representation of erase flash transaction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash logical channel transactions not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>eSPI flash channel is not ready or disabled by master. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>General input / output error, failed request to master. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="366" column="6" declfile="include/drivers/espi_saf.h" declline="366" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1ga324283c28e6a33be112571621d1568e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void espi_saf_init_callback</definition>
        <argsstring>(struct espi_callback *callback, espi_callback_handler_t handler, enum espi_bus_event evt_type)</argsstring>
        <name>espi_saf_init_callback</name>
        <param>
          <type>struct espi_callback *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="group__espi__interface_1ga30c892463e0da5c58e7e7a3f7e7145a8" kindref="member">espi_callback_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>enum <ref refid="group__espi__interface_1ga36ac3fbf9813f78bad90f047e1eb1128" kindref="member">espi_bus_event</ref></type>
          <declname>evt_type</declname>
        </param>
        <briefdescription>
<para>Helper to initialize a struct espi_callback properly. </para>
        </briefdescription>
        <detaileddescription>
<para>Callback model</para>
<para>+----<mdash/>+ +----------<mdash/>+ +---<mdash/>+ +------<mdash/>+ | App | | eSPI driver | | HW | |eSPI Host| +<mdash/>+<mdash/>+ +----<mdash/>+--<mdash/>+ +<mdash/>+<ndash/>+ +-<mdash/>+-<mdash/>+ | | | | | espi_init_callback | | | +-------------------------<mdash/>&gt; | | | | espi_add_callback | | +--------------------------<mdash/>&gt;+ | | | | eSPI reset | eSPI host | | IRQ +&lt;---------<mdash/>+ resets the <table rows="5" cols="3"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>&lt;--------<mdash/>+   </para>
</entry><entry thead="yes"><para>bus    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>Processed   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>within the   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>driver   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
<para>| | | VW CH ready| eSPI host | | IRQ +&lt;---------<mdash/>+ enables VW <table rows="5" cols="3"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>&lt;--------<mdash/>+   </para>
</entry><entry thead="yes"><para>channel    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>Processed   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>within the   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>driver   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
| | | Memory I/O | Peripheral | | &lt;----------<mdash/>+ event | +&lt;---------<mdash/>+ | +&lt;--------------------------<mdash/>+ callback | | | Report peripheral event | | | | and data for the event | | | | | | | | | | SLP_S5 | eSPI host | | &lt;----------<mdash/>+ send VWire | +&lt;---------<mdash/>+ | +&lt;--------------------------<mdash/>+ callback | | | App enables/configures | | | <table rows="2" cols="3"><row>
<entry thead="yes"><para>discrete regulator   </para>
</entry><entry thead="yes"><para></para>
</entry><entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>espi_send_vwire_signal   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
+---------------------------<mdash/>&gt;---------<mdash/>&gt;|---------<mdash/>&gt;| | | | | | | | HOST_RST | eSPI host | | &lt;----------<mdash/>+ send VWire | +&lt;---------<mdash/>+ | +&lt;--------------------------<mdash/>+ callback | | | App reset host-related | | | | data structures | | | | | | | | | | C10 | eSPI host | | +&lt;---------<mdash/>+ send VWire | &lt;----------<mdash/>+ | &lt;---------------------------<mdash/>+ | | | App executes | | |<itemizedlist>
<listitem><para>power mgmt policy | | |</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid Application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid handler function pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evt_type</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates the eSPI event relevant for the handler. for VWIRE_RECEIVED event the data will indicate the new level asserted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="450" column="20" bodyfile="include/drivers/espi_saf.h" bodystart="450" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gadb881f847082f713bb0159d1e474980a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int espi_saf_add_callback</definition>
        <argsstring>(const struct device *dev, struct espi_callback *callback)</argsstring>
        <name>espi_saf_add_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct espi_callback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Add an application callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid Application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code on failure.</para>
</simplesect>
<simplesect kind="note"><para>Callbacks may be added to the device from within a callback handler invocation, but whether they are invoked for the current eSPI event is not specified.</para>
</simplesect>
Note: enables to add as many callback as needed on the same device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="473" column="19" bodyfile="include/drivers/espi_saf.h" bodystart="473" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="group__espi__interface_1gaf987842bc7dad310c7270aed50086af9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int espi_saf_remove_callback</definition>
        <argsstring>(const struct device *dev, struct espi_callback *callback)</argsstring>
        <name>espi_saf_remove_callback</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct espi_callback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Remove an application callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid application&apos;s callback structure pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, negative errno code on failure.</para>
</simplesect>
<simplesect kind="warning"><para>It is explicitly permitted, within a callback handler, to remove the registration for the callback that is running, i.e. <computeroutput>callback</computeroutput>. Attempts to remove other registrations on the same device may result in undefined behavior, including failure to invoke callbacks that remain registered and unintended invocation of removed callbacks.</para>
</simplesect>
Note: enables to remove as many callbacks as added through <ref refid="group__espi__interface_1gabf5f0ea01ec8ed5345b2e119181c2313" kindref="member">espi_add_callback()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi_saf.h" line="502" column="19" bodyfile="include/drivers/espi_saf.h" bodystart="502" bodyend="513"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__espi__interface_1gaa0807c908666cdcbb3a85f310bfbfccc" prot="public" static="no">
        <name>HOST_KBC_EVT_IBF</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="257" column="9" bodyfile="include/drivers/espi.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__espi__interface_1ga807bb75027f24e040cd28eba4bc1002c" prot="public" static="no">
        <name>HOST_KBC_EVT_OBE</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/espi.h" line="259" column="9" bodyfile="include/drivers/espi.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>eSPI Driver APIs </para>
    </briefdescription>
    <detaileddescription>
<para>eSPI SAF Driver APIs</para>
    </detaileddescription>
  </compounddef>
</doxygen>
