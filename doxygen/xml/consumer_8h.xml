<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="consumer_8h" kind="file" language="C++">
    <compoundname>consumer.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="regulator_8h" local="no">drivers/regulator.h</includes>
    <incdepgraph>
      <node id="6">
        <label>drivers/gpio.h</label>
        <link refid="drivers_2gpio_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>drivers/regulator.h</label>
        <link refid="regulator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/drivers/regulator/consumer.h</label>
        <link refid="consumer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>dt-bindings/gpio/gpio.h</label>
        <link refid="dt-bindings_2gpio_2gpio_8h"/>
      </node>
      <node id="7">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sys/notify.h</label>
        <link refid="notify_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>sys/onoff.h</label>
        <link refid="onoff_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="16">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="19">
        <label>device.h</label>
      </node>
      <node id="23">
        <label>kernel.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="21">
        <label>syscalls/gpio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="consumer_8h_1a0be4ba775071a3f6ba4ce0f94a2dc794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int regulator_count_voltages</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>regulator_count_voltages</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Return the number of supported voltage levels Returns the number of selectors, or negative errno. Selectors are numbered starting at zero, and typically correspond to bitfields in hardware registers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulator device to count voltage levels for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of selectors, or negative errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/regulator/consumer.h" line="35" column="5" declfile="include/drivers/regulator/consumer.h" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="consumer_8h_1a2594f956e1d5b63f20a6ec49f9f12e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int regulator_list_voltages</definition>
        <argsstring>(const struct device *dev, unsigned int selector)</argsstring>
        <name>regulator_list_voltages</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Return supported voltage Returns a voltage that can be passed to <ref refid="consumer_8h_1afe36174494f6b3178ba73601af21f170" kindref="member">regulator_set_voltage()</ref>, zero if the selector code can&apos;t be used, or a negative errno. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulator device to get voltage for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selector</parametername>
</parameternamelist>
<parameterdescription>
<para>voltage selector code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voltage level in uV, or zero if selector code can&apos;t be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/regulator/consumer.h" line="46" column="5" declfile="include/drivers/regulator/consumer.h" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="consumer_8h_1a7182ff3463000be2d2ff44e6d56c159c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int regulator_is_supported_voltage</definition>
        <argsstring>(const struct device *dev, int min_uV, int max_uV)</argsstring>
        <name>regulator_is_supported_voltage</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_uV</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_uV</declname>
        </param>
        <briefdescription>
<para>Check if a voltage range can be supported. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulator to check range against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_uV</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum voltage in microvolts </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_uV</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum voltage in microvolts </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean or negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/regulator/consumer.h" line="56" column="5" declfile="include/drivers/regulator/consumer.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="consumer_8h_1afe36174494f6b3178ba73601af21f170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int regulator_set_voltage</definition>
        <argsstring>(const struct device *dev, int min_uV, int max_uV)</argsstring>
        <name>regulator_set_voltage</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_uV</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_uV</declname>
        </param>
        <briefdescription>
<para>Set regulator output voltage. Sets a regulator to the closest supported output voltage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulator to set voltage </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_uV</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum acceptable voltage in microvolts </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_uV</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum acceptable voltage in microvolts </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/regulator/consumer.h" line="65" column="5" declfile="include/drivers/regulator/consumer.h" declline="65" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="consumer_8h_1a0093b2e7f514f7634b07f0adf884cc99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int regulator_get_voltage</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>regulator_get_voltage</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get regulator output voltage. Returns the current regulator voltage in microvolts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulator to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voltage level in uV </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/regulator/consumer.h" line="74" column="5" declfile="include/drivers/regulator/consumer.h" declline="74" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="consumer_8h_1a996a4842ef86232113047c8755136a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int regulator_set_current_limit</definition>
        <argsstring>(const struct device *dev, int min_uA, int max_uA)</argsstring>
        <name>regulator_set_current_limit</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_uA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_uA</declname>
        </param>
        <briefdescription>
<para>Set regulator output current limit Sets current sink to desired output current. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulator to set output current level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_uA</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum microamps </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_uA</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum microamps </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or errno on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/regulator/consumer.h" line="84" column="5" declfile="include/drivers/regulator/consumer.h" declline="84" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="consumer_8h_1ad2b9e1d9873c4b7dc6d1a943ee6f0195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int regulator_get_current_limit</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>regulator_get_current_limit</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get regulator output current. Note the current limit must have been set for this call to succeed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulator to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>current limit in uA, or errno </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/regulator/consumer.h" line="92" column="5" declfile="include/drivers/regulator/consumer.h" declline="92" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regulator consumer API based on linux regulator API. </para>
    </briefdescription>
    <detaileddescription>
<para>Copyright (c) 2021 NXP</para>
<para>SPDX-License-Identifier: Apache-2.0</para>
<para>This API extends the Zephyr regulator API by implementing voltage and current level control for supported regulators. Currently, the only supported device is the NXP PCA9420 PMIC. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_PMIC_CONSUMER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_PMIC_CONSUMER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="regulator_8h" kindref="compound">drivers/regulator.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="consumer_8h_1a0be4ba775071a3f6ba4ce0f94a2dc794" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="consumer_8h_1a0be4ba775071a3f6ba4ce0f94a2dc794" kindref="member">regulator_count_voltages</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="consumer_8h_1a2594f956e1d5b63f20a6ec49f9f12e75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="consumer_8h_1a2594f956e1d5b63f20a6ec49f9f12e75" kindref="member">regulator_list_voltages</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selector);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="consumer_8h_1a7182ff3463000be2d2ff44e6d56c159c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="consumer_8h_1a7182ff3463000be2d2ff44e6d56c159c" kindref="member">regulator_is_supported_voltage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_uV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_uV);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="consumer_8h_1afe36174494f6b3178ba73601af21f170" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="consumer_8h_1afe36174494f6b3178ba73601af21f170" kindref="member">regulator_set_voltage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_uV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_uV);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="consumer_8h_1a0093b2e7f514f7634b07f0adf884cc99" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="consumer_8h_1a0093b2e7f514f7634b07f0adf884cc99" kindref="member">regulator_get_voltage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="consumer_8h_1a996a4842ef86232113047c8755136a6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="consumer_8h_1a996a4842ef86232113047c8755136a6f" kindref="member">regulator_set_current_limit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_uA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_uA);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="consumer_8h_1ad2b9e1d9873c4b7dc6d1a943ee6f0195" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="consumer_8h_1ad2b9e1d9873c4b7dc6d1a943ee6f0195" kindref="member">regulator_get_current_limit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/drivers/regulator/consumer.h"/>
  </compounddef>
</doxygen>
