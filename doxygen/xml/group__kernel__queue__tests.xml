<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__kernel__queue__tests" kind="group">
    <compoundname>kernel_queue_tests</compoundname>
    <title>Queues</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__kernel__queue__tests_1gac2b4619b80e450b376058832ce1442af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_thread2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_thread2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between threads using queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Static define and Dynamic define queues, Then initialize them. Create a new thread to wait for reading data. Current thread will append item into queue. Verify if rx_data is equal insert-data address. Verify queue can be define at compile time.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" kindref="member">k_queue_insert()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref> <ref refid="test__queue__contexts_8c_1a5fdc5fb7330e19795cc524bb2650a6f3" kindref="member">K_THREAD_STACK_DEFINE()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init via k_queue_init</para>
<para>TESTPOINT: test K_QUEUE_DEFINEed queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="154" column="6" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="154" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga4e99828657b64f710660f7c49c79fe9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_thread2isr</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_thread2isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between thread and ISR. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new ISR to insert data And current thread is used for getting data Verify if the rx_data is equal insert-data address. If the received data address is the same as the created array, prove that the queue data structures are stored within the provided data items.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" kindref="member">k_queue_insert()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: init via k_queue_init</para>
<para>TESTPOINT: test K_QUEUE_DEFINEed queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="178" column="6" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaf33994f0f39f2b46dfaf2af17ccf99fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_isr2thread</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_isr2thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify data passing between ISR and thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new ISR and ready for getting data And current thread is used for inserting data Verify if the rx_data is equal insert-data address.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1gad47336f27e433a52600a3b67ab89556a" kindref="member">k_queue_insert()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" kindref="member">k_queue_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_queue_init queue</para>
<para>TESTPOINT: test K_QUEUE_DEFINE queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="200" column="6" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="200" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga625832221d8e19245df0f01989cf680e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_get_2threads</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_get_2threads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: test k_queue_init queue</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="247" column="6" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="247" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaed02bb7c545405e0dd51019037e7522b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test queue alloc append and prepend. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref>, <ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref>, z_thread_heap_assign(), <ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" kindref="member">k_queue_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="300" column="6" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="300" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga0e791336265c0bac2f7d7a90fa92dbe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_multithread_competition</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_multithread_competition</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test multi-threads to get data from a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Define three threads, and set a higher priority for two of them, and set a lower priority for the last one. Then Add a delay between creating the two high priority threads. Test point:<orderedlist>
<listitem><para>Any number of threads may wait on an empty FIFO simultaneously.</para>
</listitem><listitem><para>When a data item is added, it is given to the highest priority thread that has waited longest. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="479" column="6" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="479" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga459dda9caedbf5d1adf693f7fcc22be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_unique_append</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_unique_append</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify <ref refid="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" kindref="member">k_queue_unique_append()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Append the same data to the queue repeatedly, see if it returns expected value. And verify operation succeed if append different data to the queue.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga287a2d81e2e3041be1cd45164e72f127" kindref="member">k_queue_unique_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="542" column="6" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="542" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga85974775e88b2531ec0523f5608f31e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_get_fail</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_get_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>TESTPOINT: queue get returns NULL</para>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="23" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="23" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga1b66e52c74e2329141e2ba65b0d82e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_append_list_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_append_list_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" kindref="member">k_queue_append_list()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Accroding to the API k_queue_append_list to design some error condition to verify error branch of the API.<orderedlist>
<listitem><para>Verify that the list&apos;s head is empty.</para>
</listitem><listitem><para>Verify that the list&apos;s tail is empty.</para>
</listitem><listitem><para>Verify that append list to the queue when a sub-thread is waiting for data.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga91d1a144fc2aeb3dd655accc94ca43aa" kindref="member">k_queue_append_list()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="59" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="59" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga9b3e57bae9d525826336df40eb898427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_merge_list_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_merge_list_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify the API k_queue_merge_slist when a slist is empty or a slist&apos;s tail is null.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="105" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="105" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga54cff7c6001a273568c1bf1470e1c873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_init_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_init_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of API <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref> is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="137" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaacbdb2a8ad3d0df49424dd45472c0ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_append_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_append_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="153" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaec1ce0a17ea48f08b35dd458a85d8cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_prepend_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_prepend_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="172" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="172" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga5de910e4136d8ab5b3156766581e9a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_get_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_get_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="191" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga0ea444f9d37157c2a147423a54a5487e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_is_empty_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_is_empty_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gadb2bb8088868b3c5801c72b320389ca9" kindref="member">k_queue_is_empty()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="207" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga0573db4d5d51480c6de8ac0b078cf939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_peek_head_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_peek_head_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" kindref="member">k_queue_peek_head()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga8ccd5137690c127a0f7d67619b88a52b" kindref="member">k_queue_peek_head()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="223" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga6e44e5cff0edfd4a94ca8a73e590ab5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_peek_tail_null</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_peek_tail_null</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" kindref="member">k_queue_peek_tail()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga27a460c42836d8b093ad9274c14bb176" kindref="member">k_queue_peek_tail()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="239" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gac1dc28c3ee4c6096c06fcc63c0b36f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_cancel_wait_error</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_cancel_wait_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test <ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> failure scenario. </para>
        </briefdescription>
        <detaileddescription>
<para>Verify that the parameter of the API is NULL, what will happen.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga4eee0da7442d60572b05d60a9996e69d" kindref="member">k_queue_merge_slist()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_fail.c" line="255" column="6" bodyfile="tests/kernel/queue/src/test_queue_fail.c" bodystart="255" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gadbd9ee6195052890fd1b61f4a016a8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_loop</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_loop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test queue operations in loop. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1ga0a77d8556e7d253319275de034f01619" kindref="member">k_queue_get()</ref>, <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga4bff929ed1d366a06e00865a5bbe2544" kindref="member">k_queue_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_loop.c" line="110" column="6" bodyfile="tests/kernel/queue/src/test_queue_loop.c" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1ga8dbdde7179df55dbcfff1cbebae0901b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_supv_to_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_supv_to_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify queue elements and cancel wait from a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para>The test adds elements to queue and then verified by the child user thread. Get data from a empty queue,and use K_FORVER to wait for available And to cancel wait from current thread.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gaa84522a5ace6e7f8ba61033baca6972f" kindref="member">k_queue_append()</ref>, <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref>, <ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" kindref="member">k_queue_cancel_wait()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_user.c" line="73" column="6" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="73" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gacf4a07403bef6fa6caa29c0abbfbf960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_prepend_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_prepend_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>verify allocate and feature &quot;Last In, First Out&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new queue And allocated memory for the queue Initialize and insert data item in sequence. Verify the feather &quot;Last in,First out&quot;</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1gacf3dba40125073c11075e5a134919f88" kindref="member">k_queue_alloc_prepend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_user.c" line="129" column="6" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="129" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gaa517a1497728197f4cada7f397ba6fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_queue_alloc_append_user</definition>
        <argsstring>(void)</argsstring>
        <name>test_queue_alloc_append_user</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>verify feature of queue &quot;First In, First Out&quot; </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new queue And allocated memory for the queue Initialize and insert data item in sequence. Verify the feather &quot;First in,First out&quot;</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref>, <ref refid="group__queue__apis_1ga690f3a1450e946d75f31b3e499d1d06a" kindref="member">k_queue_alloc_append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_user.c" line="163" column="6" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="163" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__kernel__queue__tests_1gab194fe3b40e86eb2c6178e372cc8d8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_auto_free</definition>
        <argsstring>(void)</argsstring>
        <name>test_auto_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test to verify free of allocated elements of queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_user.c" line="189" column="6" bodyfile="tests/kernel/queue/src/test_queue_user.c" bodystart="189" bodyend="205"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__kernel__queue__tests_1ga0a1e9850c03451c0ae29e134b57b6780" prot="public" static="no">
        <name>QUEUE_NUM</name>
        <initializer>10</initializer>
        <briefdescription>
<para>Verify that multiple queues can be defined simultaneously. </para>
        </briefdescription>
        <detaileddescription>
<para>define multiple queues to verify they can work.</para>
<para><simplesect kind="see"><para><ref refid="group__queue__apis_1ga0236222d42768c2bf00942f328146c21" kindref="member">k_queue_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/kernel/queue/src/test_queue_contexts.c" line="386" column="9" bodyfile="tests/kernel/queue/src/test_queue_contexts.c" bodystart="386" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tests for queue. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
