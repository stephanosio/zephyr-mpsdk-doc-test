<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__audio__unicast__server__cb" kind="struct" language="C++" prot="public">
    <compoundname>bt_audio_unicast_server_cb</compoundname>
    <includes refid="audio_8h" local="no">audio.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1adca50cc6d44b0d539d454cc3f64d36d4" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::config) (struct bt_conn *conn, const struct bt_audio_ep *ep, uint8_t type, const struct bt_codec *codec, struct bt_audio_stream **stream, struct bt_codec_qos_pref *const pref)</definition>
        <argsstring>)(struct bt_conn *conn, const struct bt_audio_ep *ep, uint8_t type, const struct bt_codec *codec, struct bt_audio_stream **stream, struct bt_codec_qos_pref *const pref)</argsstring>
        <name>config</name>
        <briefdescription>
<para>Endpoint config request callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Config callback is called whenever an endpoint is requested to be configured</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Local Audio Endpoint being configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the endpoint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to stream that will be configured for the endpoint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pref</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a QoS preference object that shall be populated with values. Invalid values will reject the codec configuration request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="940" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="940" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1a5c6b5961df913f6ac8bf51edd831ba66" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::reconfig) (struct bt_audio_stream *stream, uint8_t type, const struct bt_codec *codec, struct bt_codec_qos_pref *const pref)</definition>
        <argsstring>)(struct bt_audio_stream *stream, uint8_t type, const struct bt_codec *codec, struct bt_codec_qos_pref *const pref)</argsstring>
        <name>reconfig</name>
        <briefdescription>
<para>Stream reconfig request callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Reconfig callback is called whenever an Audio Stream needs to be reconfigured with different codec configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being reconfigured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the endpoint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pref</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a QoS preference object that shall be populated with values. Invalid values will reject the codec configuration request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="961" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1a52a74c397d300d9ef7ed9ab90f014d64" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::qos) (struct bt_audio_stream *stream, const struct bt_codec_qos *qos)</definition>
        <argsstring>)(struct bt_audio_stream *stream, const struct bt_codec_qos *qos)</argsstring>
        <name>qos</name>
        <briefdescription>
<para>Stream QoS request callback. </para>
        </briefdescription>
        <detaileddescription>
<para>QoS callback is called whenever an Audio Stream Quality of Service needs to be configured.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being reconfigured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qos</parametername>
</parameternamelist>
<parameterdescription>
<para>Quality of Service configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="976" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1ab2b157a23493d53500cc042ecd3e2205" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::enable) (struct bt_audio_stream *stream, uint8_t meta_count, const struct bt_codec_data *meta)</definition>
        <argsstring>)(struct bt_audio_stream *stream, uint8_t meta_count, const struct bt_codec_data *meta)</argsstring>
        <name>enable</name>
        <briefdescription>
<para>Stream Enable request callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Enable callback is called whenever an Audio Stream is requested to be enabled to stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of metadata entries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata entries</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="990" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1a5654c307fa48af7920608d7c6c4d316e" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::start) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>start</name>
        <briefdescription>
<para>Stream Start request callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Start callback is called whenever an Audio Stream is requested to start streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1002" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1ae196eab231f9d7d2c05209170064752e" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::metadata) (struct bt_audio_stream *stream, uint8_t meta_count, const struct bt_codec_data *meta)</definition>
        <argsstring>)(struct bt_audio_stream *stream, uint8_t meta_count, const struct bt_codec_data *meta)</argsstring>
        <name>metadata</name>
        <briefdescription>
<para>Stream Metadata update request callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Metadata callback is called whenever an Audio Stream is requested to update its metadata.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of metadata entries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata entries</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1015" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1a968d05506cbe0f1427c40989a8fba7f3" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::disable) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>disable</name>
        <briefdescription>
<para>Stream Disable request callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Disable callback is called whenever an Audio Stream is requested to disable the stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object being disabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1027" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1a81f6505255112c45240ccb1ef353fde0" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::stop) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stream Stop callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Stop callback is called whenever an Audio Stream is requested to stop streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1038" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1ac3029a7a660de9cc1f734a1e1e3931c6" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::release) (struct bt_audio_stream *stream)</definition>
        <argsstring>)(struct bt_audio_stream *stream)</argsstring>
        <name>release</name>
        <briefdescription>
<para>Stream release callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Release callback is called whenever a new Audio Stream needs to be released and thus deallocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1049" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__audio__unicast__server__cb_1ad4576d6dc302e863ef72df1f1e4b99cc" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_audio_unicast_server_cb::publish_capability) (struct bt_conn *conn, uint8_t type, uint8_t index, struct bt_codec *const codec)</definition>
        <argsstring>)(struct bt_conn *conn, uint8_t type, uint8_t index, struct bt_codec *const codec)</argsstring>
        <name>publish_capability</name>
        <briefdescription>
<para>Publish Capability callback. </para>
        </briefdescription>
        <detaileddescription>
<para>Publish Capability callback is called whenever a remote client requests to read the Published Audio Capabilities (PAC) records. The callback will be called iteratively until it returns an error, increasing the <computeroutput>index</computeroutput> each time. Once an error value (non-zero) is returned, the previously returned <computeroutput>codec</computeroutput> values (if any) will be sent to the client that requested the value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the endpoint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the codec object requested. Multiple objects may be returned, and this value keep tracks of how many have previously been returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codec</parametername>
</parameternamelist>
<parameterdescription>
<para>Codec object that shall be populated if returning success (0). Ignored if returning non-zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/audio/audio.h" line="1069" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="1069" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Unicast Server callback structure </para>
    </detaileddescription>
    <location file="include/bluetooth/audio/audio.h" line="922" column="1" bodyfile="include/bluetooth/audio/audio.h" bodystart="922" bodyend="1071"/>
    <listofallmembers>
      <member refid="structbt__audio__unicast__server__cb_1adca50cc6d44b0d539d454cc3f64d36d4" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>config</name></member>
      <member refid="structbt__audio__unicast__server__cb_1a968d05506cbe0f1427c40989a8fba7f3" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>disable</name></member>
      <member refid="structbt__audio__unicast__server__cb_1ab2b157a23493d53500cc042ecd3e2205" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>enable</name></member>
      <member refid="structbt__audio__unicast__server__cb_1ae196eab231f9d7d2c05209170064752e" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>metadata</name></member>
      <member refid="structbt__audio__unicast__server__cb_1ad4576d6dc302e863ef72df1f1e4b99cc" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>publish_capability</name></member>
      <member refid="structbt__audio__unicast__server__cb_1a52a74c397d300d9ef7ed9ab90f014d64" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>qos</name></member>
      <member refid="structbt__audio__unicast__server__cb_1a5c6b5961df913f6ac8bf51edd831ba66" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>reconfig</name></member>
      <member refid="structbt__audio__unicast__server__cb_1ac3029a7a660de9cc1f734a1e1e3931c6" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>release</name></member>
      <member refid="structbt__audio__unicast__server__cb_1a5654c307fa48af7920608d7c6c4d316e" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>start</name></member>
      <member refid="structbt__audio__unicast__server__cb_1a81f6505255112c45240ccb1ef353fde0" prot="public" virt="non-virtual"><scope>bt_audio_unicast_server_cb</scope><name>stop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
