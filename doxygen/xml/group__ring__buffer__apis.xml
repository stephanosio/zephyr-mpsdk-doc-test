<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ring__buffer__apis" kind="group">
    <compoundname>ring_buffer_apis</compoundname>
    <title>Ring Buffer APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ring__buffer__apis_1gae621d076beb93dd6a53ad8924c34e3db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ring_buf_init</definition>
        <argsstring>(struct ring_buf *buf, uint32_t size, void *data)</argsstring>
        <name>ring_buf_init</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Initialize a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a ring buffer, prior to its first use. It is only used for ring buffers not defined using RING_BUF_DECLARE, RING_BUF_ITEM_DECLARE_POW2 or RING_BUF_ITEM_DECLARE_SIZE.</para>
<para>Setting <emphasis>size</emphasis> to a power of 2 establishes a high performance ring buffer that doesn&apos;t require the use of modulo arithmetic operations to maintain itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Ring buffer size (in 32-bit words or bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Ring buffer data area (uint32_t data[size] or uint8_t data[size] for bytes mode). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="154" column="20" bodyfile="include/sys/ring_buffer.h" bodystart="154" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1gadcc6bbeedaa8621f0f48b9a8d336b3b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ring_buf_is_empty</definition>
        <argsstring>(struct ring_buf *buf)</argsstring>
        <name>ring_buf_is_empty</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Determine if a ring buffer is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the ring buffer is empty, or 0 if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="177" column="5" declfile="include/sys/ring_buffer.h" declline="177" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga9cc0cd445eeeeba7183c3ac0778c7e18" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ring_buf_reset</definition>
        <argsstring>(struct ring_buf *buf)</argsstring>
        <name>ring_buf_reset</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Reset ring buffer state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="184" column="20" bodyfile="include/sys/ring_buffer.h" bodystart="184" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga6c2ff3b520e8e4c03566cbd15af52348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ring_buf_space_get</definition>
        <argsstring>(struct ring_buf *buf)</argsstring>
        <name>ring_buf_space_get</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Determine free space in a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ring buffer free space (in 32-bit words or bytes). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="198" column="10" declfile="include/sys/ring_buffer.h" declline="198" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga9c06a3c6f77584ce8317a236cc2de35c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t ring_buf_capacity_get</definition>
        <argsstring>(struct ring_buf *buf)</argsstring>
        <name>ring_buf_capacity_get</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Return ring buffer capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ring buffer capacity (in 32-bit words or bytes). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="207" column="24" bodyfile="include/sys/ring_buffer.h" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga85111fbe0755a1fb737f1a7563ea27dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ring_buf_size_get</definition>
        <argsstring>(struct ring_buf *buf)</argsstring>
        <name>ring_buf_size_get</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Determine used space in a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ring buffer space used (in 32-bit words or bytes). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="219" column="10" declfile="include/sys/ring_buffer.h" declline="219" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga6cb71d7c1a36b6e142b251f08ed40599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ring_buf_item_put</definition>
        <argsstring>(struct ring_buf *buf, uint16_t type, uint8_t value, uint32_t *data, uint8_t size32)</argsstring>
        <name>ring_buf_item_put</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>size32</declname>
        </param>
        <briefdescription>
<para>Write a data item to a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes a data item to ring buffer <emphasis>buf</emphasis>. The data item is an array of 32-bit words (from zero to 1020 bytes in length), coupled with a 16-bit type identifier and an 8-bit integer value.</para>
<para><simplesect kind="warning"><para>Use cases involving multiple writers to the ring buffer must prevent concurrent write operations, either by preventing all writers from being preempted or by using a mutex to govern writes to the ring buffer.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item&apos;s type identifier (application specific). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item&apos;s integer value (application specific). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of data item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size32</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item size (number of 32-bit words).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item was written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EMSGSIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Ring buffer has insufficient free space. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="242" column="5" declfile="include/sys/ring_buffer.h" declline="242" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1gae0c62af11cab8a661638e50b312b58f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ring_buf_item_get</definition>
        <argsstring>(struct ring_buf *buf, uint16_t *type, uint8_t *value, uint32_t *data, uint8_t *size32)</argsstring>
        <name>ring_buf_item_get</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>size32</declname>
        </param>
        <briefdescription>
<para>Read a data item from a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads a data item from ring buffer <emphasis>buf</emphasis>. The data item is an array of 32-bit words (up to 1020 bytes in length), coupled with a 16-bit type identifier and an 8-bit integer value.</para>
<para><simplesect kind="warning"><para>Use cases involving multiple reads of the ring buffer must prevent concurrent read operations, either by preventing all readers from being preempted or by using a mutex to govern reads to the ring buffer.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Area to store the data item&apos;s type identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Area to store the data item&apos;s integer value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Area to store the data item. Can be NULL to discard data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size32</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data item storage area (number of 32-bit chunks).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item was fetched; <emphasis>size32</emphasis> now contains the number of 32-bit words read into data area <emphasis>data</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Ring buffer is empty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EMSGSIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Data area <emphasis>data</emphasis> is too small; <emphasis>size32</emphasis> now contains the number of 32-bit words needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="269" column="5" declfile="include/sys/ring_buffer.h" declline="269" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1gae15934b40fd208a63eba98b2382e8ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ring_buf_put_claim</definition>
        <argsstring>(struct ring_buf *buf, uint8_t **data, uint32_t size)</argsstring>
        <name>ring_buf_put_claim</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> **</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate buffer for writing data to a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>With this routine, memory copying can be reduced since internal ring buffer can be used directly by the user. Once data is written to allocated area number of bytes written can be confirmed (see <ref refid="group__ring__buffer__apis_1ga465feaf6cf5312e75060ecf65db963ad" kindref="member">ring_buf_put_finish</ref>).</para>
<para><simplesect kind="warning"><para>Use cases involving multiple writers to the ring buffer must prevent concurrent write operations, either by preventing all writers from being preempted or by using a mutex to govern writes to the ring buffer.</para>
</simplesect>
<simplesect kind="warning"><para>Ring buffer instance should not mix byte access and item access (calls prefixed with ring_buf_item_).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the address. It is set to a location within ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested allocation size (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of allocated buffer which can be smaller than requested if there is not enough free space or buffer wraps. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="296" column="10" declfile="include/sys/ring_buffer.h" declline="296" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga465feaf6cf5312e75060ecf65db963ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ring_buf_put_finish</definition>
        <argsstring>(struct ring_buf *buf, uint32_t size)</argsstring>
        <name>ring_buf_put_finish</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Indicate number of bytes written to allocated buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Use cases involving multiple writers to the ring buffer must prevent concurrent write operations, either by preventing all writers from being preempted or by using a mutex to govern writes to the ring buffer.</para>
</simplesect>
<simplesect kind="warning"><para>Ring buffer instance should not mix byte access and item access (calls prefixed with ring_buf_item_).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of valid bytes in the allocated buffers.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Provided <emphasis>size</emphasis> exceeds free space in the ring buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="318" column="5" declfile="include/sys/ring_buffer.h" declline="318" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga6c7e76e3ca798e994f738d114cb9a7e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ring_buf_put</definition>
        <argsstring>(struct ring_buf *buf, const uint8_t *data, uint32_t size)</argsstring>
        <name>ring_buf_put</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write (copy) data to a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine writes data to a ring buffer <emphasis>buf</emphasis>.</para>
<para><simplesect kind="warning"><para>Use cases involving multiple writers to the ring buffer must prevent concurrent write operations, either by preventing all writers from being preempted or by using a mutex to govern writes to the ring buffer.</para>
</simplesect>
<simplesect kind="warning"><para>Ring buffer instance should not mix byte access and item access (calls prefixed with ring_buf_item_).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="340" column="10" declfile="include/sys/ring_buffer.h" declline="340" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga7ab4fea7b19b1ffa58a7d3a581396b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ring_buf_get_claim</definition>
        <argsstring>(struct ring_buf *buf, uint8_t **data, uint32_t size)</argsstring>
        <name>ring_buf_get_claim</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> **</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Get address of a valid data in a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>With this routine, memory copying can be reduced since internal ring buffer can be used directly by the user. Once data is processed it can be freed using <ref refid="group__ring__buffer__apis_1ga36177459f4e352b52a6f2046a33c3aa1" kindref="member">ring_buf_get_finish</ref>.</para>
<para><simplesect kind="warning"><para>Use cases involving multiple reads of the ring buffer must prevent concurrent read operations, either by preventing all readers from being preempted or by using a mutex to govern reads to the ring buffer.</para>
</simplesect>
<simplesect kind="warning"><para>Ring buffer instance should not mix byte access and item access (calls prefixed with ring_buf_item_).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the address. It is set to a location within ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested size (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of valid bytes in the provided buffer which can be smaller than requested if there is not enough free space or buffer wraps. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="366" column="10" declfile="include/sys/ring_buffer.h" declline="366" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga36177459f4e352b52a6f2046a33c3aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ring_buf_get_finish</definition>
        <argsstring>(struct ring_buf *buf, uint32_t size)</argsstring>
        <name>ring_buf_get_finish</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Indicate number of bytes read from claimed buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Use cases involving multiple reads of the ring buffer must prevent concurrent read operations, either by preventing all readers from being preempted or by using a mutex to govern reads to the ring buffer.</para>
</simplesect>
<simplesect kind="warning"><para>Ring buffer instance should not mix byte access and item mode (calls prefixed with ring_buf_item_).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes that can be freed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Successful operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Provided <emphasis>size</emphasis> exceeds valid bytes in the ring buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="388" column="5" declfile="include/sys/ring_buffer.h" declline="388" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga209bef22c47f3938a36d7eb6c3b3dbc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ring_buf_get</definition>
        <argsstring>(struct ring_buf *buf, uint8_t *data, uint32_t size)</argsstring>
        <name>ring_buf_get</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data from a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads data from a ring buffer <emphasis>buf</emphasis>.</para>
<para><simplesect kind="warning"><para>Use cases involving multiple reads of the ring buffer must prevent concurrent read operations, either by preventing all readers from being preempted or by using a mutex to govern reads to the ring buffer.</para>
</simplesect>
<simplesect kind="warning"><para>Ring buffer instance should not mix byte access and item mode (calls prefixed with ring_buf_item_).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the output buffer. Can be NULL to discard data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes written to the output buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="410" column="10" declfile="include/sys/ring_buffer.h" declline="410" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__ring__buffer__apis_1ga8ba75a313b2ad7d55e390fa3f1fcadc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t ring_buf_peek</definition>
        <argsstring>(struct ring_buf *buf, uint8_t *data, uint32_t size)</argsstring>
        <name>ring_buf_peek</name>
        <param>
          <type>struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Peek at data from a ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reads data from a ring buffer <emphasis>buf</emphasis> without removal.</para>
<para><simplesect kind="warning"><para>Use cases involving multiple reads of the ring buffer must prevent concurrent read operations, either by preventing all readers from being preempted or by using a mutex to govern reads to the ring buffer.</para>
</simplesect>
<simplesect kind="warning"><para>Ring buffer instance should not mix byte access and item mode (calls prefixed with ring_buf_item_).</para>
</simplesect>
<simplesect kind="warning"><para>Multiple calls to peek will result in the same data being &apos;peeked&apos; multiple times. To remove data, use either <ref refid="group__ring__buffer__apis_1ga209bef22c47f3938a36d7eb6c3b3dbc7" kindref="member">ring_buf_get</ref> or <ref refid="group__ring__buffer__apis_1ga7ab4fea7b19b1ffa58a7d3a581396b1c" kindref="member">ring_buf_get_claim</ref> followed by <ref refid="group__ring__buffer__apis_1ga36177459f4e352b52a6f2046a33c3aa1" kindref="member">ring_buf_get_finish</ref> with a non-zero <computeroutput>size</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the output buffer. Cannot be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes written to the output buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="438" column="10" declfile="include/sys/ring_buffer.h" declline="438" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ring__buffer__apis_1gaca98f407b222dff12e2bbfcf3746a9e3" prot="public" static="no">
        <name>RING_BUF_ITEM_DECLARE_POW2</name>
        <param><defname>name</defname></param>
        <param><defname>pow</defname></param>
        <initializer>	BUILD_ASSERT((1 &lt;&lt; pow) &lt; <ref refid="ring__buffer_8h_1a2f583f9c16e4ca7ac3aad993dc628dc7" kindref="member">RING_BUFFER_MAX_SIZE</ref>,\
		<ref refid="ring__buffer_8h_1a07c03ef7f72236dcbe6136fb4960180a" kindref="member">RING_BUFFER_SIZE_ASSERT_MSG</ref>); \
	static <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> __noinit _ring_buffer_data_##name[<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pow)]; \
	struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> name = { \
		.size = (<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pow)),	  \
		.mask = (<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pow)) - 1, \
		.buf = { .buf32 = _ring_buffer_data_##name } \
	}</initializer>
        <briefdescription>
<para>Define and initialize a high performance ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro establishes a ring buffer whose size must be a power of 2; that is, the ring buffer contains 2^pow 32-bit words, where <emphasis>pow</emphasis> is the specified ring buffer size exponent. A high performance ring buffer doesn&apos;t require the use of modulo arithmetic operations to maintain itself.</para>
<para>The ring buffer can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>ring_buf<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pow</parametername>
</parameternamelist>
<parameterdescription>
<para>Ring buffer size exponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="82" column="9" bodyfile="include/sys/ring_buffer.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ring__buffer__apis_1ga205e93b5431112da0d191526906c7e01" prot="public" static="no">
        <name>RING_BUF_ITEM_DECLARE_SIZE</name>
        <param><defname>name</defname></param>
        <param><defname>size32</defname></param>
        <initializer>	BUILD_ASSERT(size32 &lt; <ref refid="ring__buffer_8h_1a2f583f9c16e4ca7ac3aad993dc628dc7" kindref="member">RING_BUFFER_MAX_SIZE</ref>,\
		<ref refid="ring__buffer_8h_1a07c03ef7f72236dcbe6136fb4960180a" kindref="member">RING_BUFFER_SIZE_ASSERT_MSG</ref>); \
	static <ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> __noinit _ring_buffer_data_##name[size32]; \
	struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> name = { \
		.size = size32, \
		.buf = { .buf32 = _ring_buffer_data_##name} \
	}</initializer>
        <briefdescription>
<para>Define and initialize a standard ring buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro establishes a ring buffer of an arbitrary size. A standard ring buffer uses modulo arithmetic operations to maintain itself.</para>
<para>The ring buffer can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>ring_buf<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size32</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of ring buffer (in 32-bit words). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="106" column="9" bodyfile="include/sys/ring_buffer.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ring__buffer__apis_1ga803e45abf48ee207fc0ab4028726a82b" prot="public" static="no">
        <name>RING_BUF_DECLARE</name>
        <param><defname>name</defname></param>
        <param><defname>size8</defname></param>
        <initializer>	BUILD_ASSERT(size8 &lt; <ref refid="ring__buffer_8h_1a2f583f9c16e4ca7ac3aad993dc628dc7" kindref="member">RING_BUFFER_MAX_SIZE</ref>,\
		<ref refid="ring__buffer_8h_1a07c03ef7f72236dcbe6136fb4960180a" kindref="member">RING_BUFFER_SIZE_ASSERT_MSG</ref>); \
	static <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> __noinit _ring_buffer_data_##name[size8]; \
	struct <ref refid="structring__buf" kindref="compound">ring_buf</ref> name = { \
		.size = size8, \
		.buf = { .buf8 = _ring_buffer_data_##name} \
	}</initializer>
        <briefdescription>
<para>Define and initialize a ring buffer for byte data. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro establishes a ring buffer of an arbitrary size.</para>
<para>The ring buffer can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>ring_buf<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the ring buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size8</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of ring buffer (in bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/ring_buffer.h" line="128" column="9" bodyfile="include/sys/ring_buffer.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
