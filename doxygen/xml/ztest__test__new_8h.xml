<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="ztest__test__new_8h" kind="file" language="C++">
    <compoundname>ztest_test_new.h</compoundname>
    <includes refid="app__memdomain_8h" local="no">app_memory/app_memdomain.h</includes>
    <includes refid="init_8h" local="no">init.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <incdepgraph>
      <node id="2">
        <label>app_memory/app_memdomain.h</label>
        <link refid="app__memdomain_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>app_memory/mem_domain.h</label>
        <link refid="mem__domain_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="58">
        <label>arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>arch/structs.h</label>
        <link refid="structs_8h"/>
      </node>
      <node id="57">
        <label>arch/syscall.h</label>
        <link refid="arch_2syscall_8h"/>
      </node>
      <node id="18">
        <label>devicetree.h</label>
        <link refid="devicetree_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>devicetree/clocks.h</label>
        <link refid="clocks_8h"/>
      </node>
      <node id="25">
        <label>devicetree/dma.h</label>
        <link refid="devicetree_2dma_8h"/>
      </node>
      <node id="27">
        <label>devicetree/fixed-partitions.h</label>
        <link refid="fixed-partitions_8h"/>
      </node>
      <node id="23">
        <label>devicetree/gpio.h</label>
        <link refid="devicetree_2gpio_8h"/>
      </node>
      <node id="21">
        <label>devicetree/io-channels.h</label>
        <link refid="io-channels_8h"/>
      </node>
      <node id="29">
        <label>devicetree/ordinals.h</label>
        <link refid="ordinals_8h"/>
      </node>
      <node id="30">
        <label>devicetree/pinctrl.h</label>
        <link refid="devicetree_2pinctrl_8h"/>
      </node>
      <node id="26">
        <label>devicetree/pwms.h</label>
        <link refid="pwms_8h"/>
      </node>
      <node id="24">
        <label>devicetree/spi.h</label>
        <link refid="devicetree_2spi_8h"/>
      </node>
      <node id="28">
        <label>devicetree/zephyr.h</label>
        <link refid="devicetree_2zephyr_8h"/>
      </node>
      <node id="67">
        <label>fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="34">
        <label>kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>kernel/mempool_heap.h</label>
        <link refid="mempool__heap_8h"/>
      </node>
      <node id="43">
        <label>kernel/sched_priq.h</label>
        <link refid="sched__priq_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>kernel/stats.h</label>
        <link refid="kernel_2stats_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>kernel/thread.h</label>
        <link refid="kernel_2thread_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>kernel/thread_stack.h</label>
        <link refid="kernel_2thread__stack_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>kernel_structs.h</label>
        <link refid="kernel__structs_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>kernel_version.h</label>
        <link refid="kernel__version_8h"/>
      </node>
      <node id="17">
        <label>linker/devicetree_reserved.h</label>
        <link refid="devicetree__reserved_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>linker/linker-defs.h</label>
        <link refid="linker-defs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="31">
        <label>sys/dlist.h</label>
        <link refid="dlist_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>sys/kobject.h</label>
        <link refid="include_2sys_2kobject_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>sys/rb.h</label>
        <link refid="rb_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/sys_heap.h</label>
        <link refid="sys__heap_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>sys/time_units.h</label>
        <link refid="time__units_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>sys_clock.h</label>
        <link refid="include_2sys__clock_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="5">
        <label>toolchain/common.h</label>
        <link refid="common_8h"/>
      </node>
      <node id="78">
        <label>tracing/tracing.h</label>
        <link refid="tracing_2tracing_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>tracing/tracing_macros.h</label>
        <link refid="tracing__macros_8h"/>
      </node>
      <node id="79">
        <label>tracking.h</label>
        <link refid="tracking_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="12">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="15">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="16">
        <label>offsets.h</label>
        <link refid="offsets_8h"/>
      </node>
      <node id="56">
        <label>syscall_list.h</label>
        <link refid="syscall__list_8h"/>
      </node>
      <node id="80">
        <label>syscalls/kernel.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kernel_8h"/>
      </node>
      <node id="73">
        <label>syscalls/kobject.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2syscalls_2kobject_8h"/>
      </node>
      <node id="1">
        <label>subsys/testsuite/ztest/include/ztest_test_new.h</label>
        <link refid="ztest__test__new_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>alloca.h</label>
      </node>
      <node id="60">
        <label>arch/cpu.h</label>
      </node>
      <node id="20">
        <label>devicetree_fixups.h</label>
      </node>
      <node id="19">
        <label>devicetree_unfixed.h</label>
      </node>
      <node id="32">
        <label>kernel.h</label>
      </node>
      <node id="41">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stddef.h</label>
      </node>
      <node id="76">
        <label>syscalls/errno_private.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structztest__unit__test" prot="public">ztest_unit_test</innerclass>
    <innerclass refid="structztest__suite__stats" prot="public">ztest_suite_stats</innerclass>
    <innerclass refid="structztest__suite__node" prot="public">ztest_suite_node</innerclass>
    <innerclass refid="structztest__test__rule" prot="public">ztest_test_rule</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ztest__test__new_8h_1aef8892743e2d47c983efcb61beeedeb3" prot="public" static="no">
        <name>ZTEST_SUITE</name>
        <param><defname>SUITE_NAME</defname></param>
        <param><defname>PREDICATE</defname></param>
        <param><defname>setup_fn</defname></param>
        <param><defname>before_fn</defname></param>
        <param><defname>after_fn</defname></param>
        <param><defname>teardown_fn</defname></param>
        <initializer>	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structztest__suite__node" kindref="compound">ztest_suite_node</ref>,				\
				       <ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(z_ztest_test_node_, SUITE_NAME)) = {	\
		.name = <ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(SUITE_NAME),						\
		.setup = (setup_fn),							\
		.before = (before_fn),							\
		.after = (after_fn),							\
		.teardown = (teardown_fn),						\
		.predicate = PREDICATE,							\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and register a ztest suite. Using this macro creates a new test suite (using ztest_test_suite). It then creates a struct <ref refid="structztest__suite__node" kindref="compound">ztest_suite_node</ref> in a specific linker section.</para>
<para>Tests can then be run by calling <ref refid="ztest__test__new_8h_1abd0177fd931d390c1e3f6dbdcaf85605" kindref="member">ztest_run_test_suites(const void *state)</ref> by passing in the current state. See the documentation for ztest_run_test_suites for more info.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SUITE_NAME</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the suite (see ztest_test_suite for more info) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PREDICATE</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to test against the state and determine if the test should run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setup_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The setup function to call before running this test suite </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call before each unit test in this suite </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call after each unit test in this suite </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>teardown_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call after running all the tests in this suite </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="106" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1gac25858f76ea667d07de422a3b489cb15" prot="public" static="no">
        <name>ZTEST</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST(suite, fn, 0)</initializer>
        <briefdescription>
<para>Create and register a new unit test. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this macro will create a new unit test and attach it to the declared <computeroutput>suite</computeroutput>. The <computeroutput>suite</computeroutput> does not need to be defined in the same compilational unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="222" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga7121acc7ee00646cacefa773ff9631c8" prot="public" static="no">
        <name>ZTEST_USER</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST(suite, fn, <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(CONFIG_USERSPACE, (<ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>), (0)))</initializer>
        <briefdescription>
<para>Define a test function that should run as a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro behaves exactly the same as ZTEST, but calls the test function in user space if <computeroutput>CONFIG_USERSPACE</computeroutput> was enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="233" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1gacd3ab522e0e5c8a270e86b0cb6bd81b2" prot="public" static="no">
        <name>ZTEST_F</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST_F(suite, fn, 0)</initializer>
        <briefdescription>
<para>Define a test function. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro behaves exactly the same as <ref refid="group__ztest__test_1gac25858f76ea667d07de422a3b489cb15" kindref="member">ZTEST()</ref>, but the function takes an argument for the fixture of type <computeroutput>struct suite##_fixture*</computeroutput> named <computeroutput>this</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="244" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga12ccce144e577cac6ba763982ad14def" prot="public" static="no">
        <name>ZTEST_USER_F</name>
        <param><defname>suite</defname></param>
        <param><defname>fn</defname></param>
        <initializer>Z_ZTEST_F(suite, fn, <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(CONFIG_USERSPACE, (<ref refid="group__thread__apis_1gacb5340339892f22301e02697c6039ccc" kindref="member">K_USER</ref>), (0)))</initializer>
        <briefdescription>
<para>Define a test function that should run as a user thread. </para>
        </briefdescription>
        <detaileddescription>
<para>If CONFIG_USERSPACE is not enabled, this is functionally identical to <ref refid="group__ztest__test_1gacd3ab522e0e5c8a270e86b0cb6bd81b2" kindref="member">ZTEST_F()</ref>. The test function takes a single fixture argument of type <computeroutput>struct suite##_fixture*</computeroutput> named <computeroutput>this</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test suite to attach this test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The test function to call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="255" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga2a0a5e3b6e8fa1c9a03e7600895d875f" prot="public" static="no">
        <name>ZTEST_RULE</name>
        <param><defname>name</defname></param>
        <param><defname>before_each_fn</defname></param>
        <param><defname>after_each_fn</defname></param>
        <initializer>	static <ref refid="group__iterable__section__apis_1gabed6642b8cc06863ce97dd536698004d" kindref="member">STRUCT_SECTION_ITERABLE</ref>(<ref refid="structztest__test__rule" kindref="compound">ztest_test_rule</ref>, z_ztest_test_rule_##name) = {              \
		.before_each = (before_each_fn),                                                   \
		.after_each = (after_each_fn),                                                     \
	}</initializer>
        <briefdescription>
<para>Define a test rule that will run before/after each unit test. </para>
        </briefdescription>
        <detaileddescription>
<para>Functions defined here will run before/after each unit test for every test suite. Along with the callback, the test functions are provided a pointer to the test being run, and the data. This provides a mechanism for tests to perform custom operations depending on the specific test or the data (for example logging may use the test&apos;s name).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name for the test rule (must be unique within the compilational unit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_each_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call before each test (may be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after_each_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call after each test (may be NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="285" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" prot="public" static="no">
        <name>ZTEST_DMEM</name>
        <initializer><ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM</ref>(<ref refid="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="314" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" prot="public" static="no">
        <name>ZTEST_BMEM</name>
        <initializer><ref refid="threads_2tls_2src_2main_8c_1a7a1968d4832a53406449a3ace7019fa2" kindref="member">K_APP_BMEM</ref>(<ref refid="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="315" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga44777f5011728bbff63fe3639c1b4aa8" prot="public" static="no">
        <name>ZTEST_SECTION</name>
        <initializer><ref refid="app__memdomain_8h_1a81962bb530118ffa13fccdf99f973787" kindref="member">K_APP_DMEM_SECTION</ref>(<ref refid="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="316" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ztest__test_1ga7f76df4df4bf68a605b923fed8e5465c" prot="public" static="no">
        <name>ztest_run_test_suite</name>
        <param><defname>suite</defname></param>
        <initializer>z_ztest_run_test_suite(<ref refid="common_8h_1a4689212d5a549893cabb9d7782eecfb6" kindref="member">STRINGIFY</ref>(suite))</initializer>
        <briefdescription>
<para>Run the specified test suite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suite</parametername>
</parameternamelist>
<parameterdescription>
<para>Test suite to run. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="329" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ztest__test_1ga2090c493018a95112b89c5f83b5d8162" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ztest_rule_cb) (const struct ztest_unit_test *test, void *data)</definition>
        <argsstring>)(const struct ztest_unit_test *test, void *data)</argsstring>
        <name>ztest_rule_cb</name>
        <briefdescription>
<para>Test rule callback function signature. </para>
        </briefdescription>
        <detaileddescription>
<para>The function signature that can be used to register a test rule&apos;s before/after callback. This provides access to the test and the fixture data (if provided).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the unit test in context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the test&apos;s fixture data (may be NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="266" column="9" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref></type>
        <definition>struct k_mem_partition ztest_mem_partition</definition>
        <argsstring></argsstring>
        <name>ztest_mem_partition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="317" column="29" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="317" declcolumn="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ztest__test__new_8h_1abd0177fd931d390c1e3f6dbdcaf85605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ztest_run_test_suites</definition>
        <argsstring>(const void *state)</argsstring>
        <name>ztest_run_test_suites</name>
        <param>
          <type>const void *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run the registered unit tests which return true from their pragma function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>The current state of the machine as it relates to the test executable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of tests that ran. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="123" column="5" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="123" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ztest__test__new_8h_1a349fda278dff713debfd2a3b94b8b1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_verify_all_test_suites_ran</definition>
        <argsstring>(void)</argsstring>
        <name>ztest_verify_all_test_suites_ran</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Fails the test if any of the registered tests did not run. </para>
        </briefdescription>
        <detaileddescription>
<para>When registering test suites, a pragma function can be provided to determine WHEN the test should run. It is possible that a test suite could be registered but the pragma always prevents it from running. In cases where a test should make sure that ALL suites ran at least once, this function may be called at the end of <ref refid="ztest_8h_1a8a4533f287d99bb2d7c24c0e29c9a449" kindref="member">test_main()</ref>. It will cause the test to fail if any suite was registered but never ran. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="134" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gacd6eb423f54dce8544f7c3b1618c0374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_test_fail</definition>
        <argsstring>(void)</argsstring>
        <name>ztest_test_fail</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Fail the currently running test. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the function called from failed assertions and the like. You probably don&apos;t need to call it yourself. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="163" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1ga085d30a04102ebb8c3f2206020723ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_test_pass</definition>
        <argsstring>(void)</argsstring>
        <name>ztest_test_pass</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Pass the currently running test. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally a test passes just by returning without an assertion failure. However, if the success case for your test involves a fatal fault, you can call this function from k_sys_fatal_error_handler to indicate that the test passed before aborting the thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="173" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="173" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gada3b1fcfa71db1bf7787c03ff45256d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_test_skip</definition>
        <argsstring>(void)</argsstring>
        <name>ztest_test_skip</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Skip the current test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="179" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gaeb99bd1d29675ca8c31b519853cec422" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void unit_test_noop</definition>
        <argsstring>(void)</argsstring>
        <name>unit_test_noop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Do nothing, successfully. </para>
        </briefdescription>
        <detaileddescription>
<para>Unit test / setup function / teardown function that does nothing, successfully. Can be used as a parameter to <ref refid="group__ztest__test__deprecated_1gafb04820b89dbc76bf28cb5e1c98764f8" kindref="member">ztest_unit_test_setup_teardown()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="188" column="20" bodyfile="subsys/testsuite/ztest/include/ztest_test_new.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gac7ddc33b5a0d11e2ffa0a564019c5e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_simple_1cpu_before</definition>
        <argsstring>(void *data)</argsstring>
        <name>ztest_simple_1cpu_before</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>A &apos;before&apos; function to use in test suites that just need to start 1cpu. </para>
        </briefdescription>
        <detaileddescription>
<para>Ignores data, and calls z_test_1cpu_start()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The test suite&apos;s data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="301" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="301" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ztest__test_1gaa53486873430dd8fa978745d8a1d0686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ztest_simple_1cpu_after</definition>
        <argsstring>(void *data)</argsstring>
        <name>ztest_simple_1cpu_after</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>A &apos;after&apos; function to use in test suites that just need to stop 1cpu. </para>
        </briefdescription>
        <detaileddescription>
<para>Ignores data, and calls z_test_1cpu_stop()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The test suite&apos;s data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="subsys/testsuite/ztest/include/ztest_test_new.h" line="310" column="6" declfile="subsys/testsuite/ztest/include/ztest_test_new.h" declline="310" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Zephyr testing framework _test. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_TESTSUITE_ZTEST_TEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_TESTSUITE_ZTEST_TEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="app__memdomain_8h" kindref="compound">app_memory/app_memdomain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="init_8h" kindref="compound">init.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structztest__unit__test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__unit__test" kindref="compound">ztest_unit_test</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="structztest__unit__test_1ac94283459e71728180420d66b3a4a53a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structztest__unit__test_1ac94283459e71728180420d66b3a4a53a" kindref="member">test_suite_name</ref>;</highlight></codeline>
<codeline lineno="26" refid="structztest__unit__test_1a1176caba02accac7bd2eb02c715a0d38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structztest__unit__test_1a1176caba02accac7bd2eb02c715a0d38" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="27" refid="structztest__unit__test_1a5fe0425dde921834acb2c0e387bcc524" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structztest__unit__test_1a5fe0425dde921834acb2c0e387bcc524" kindref="member">test</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="28" refid="structztest__unit__test_1a9c151bd9e948788c861503b53c52b24d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structztest__unit__test_1a9c151bd9e948788c861503b53c52b24d" kindref="member">thread_options</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__unit__test" kindref="compound">ztest_unit_test</ref><sp/>_ztest_unit_test_list_start[];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__unit__test" kindref="compound">ztest_unit_test</ref><sp/>_ztest_unit_test_list_end[];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__suite__stats" kindref="compound">ztest_suite_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structztest__suite__stats_1a94a4d70901b2d2b57cbaf03b9c6d21a9" kindref="member">run_count</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structztest__suite__stats_1a04d888a17a39bdf62f1b935968d58b92" kindref="member">skip_count</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structztest__suite__stats_1a58f7c9379bc9bf18c2184fdcd2bbff8c" kindref="member">fail_count</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__suite__node" kindref="compound">ztest_suite_node</ref><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structztest__suite__node_1ad28a3d7f4ac80a2aee55c95385426f23" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="58" refid="structztest__suite__node_1a1e951156ee38e11a00e536d18dec60aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*setup)(void);</highlight></codeline>
<codeline lineno="64" refid="structztest__suite__node_1a62a762724fb81ed04f77841d0837ea97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structztest__suite__node_1a62a762724fb81ed04f77841d0837ea97" kindref="member">before</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="70" refid="structztest__suite__node_1aa9e753a97c1ebd10e40a9d4b654c9b6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structztest__suite__node_1aa9e753a97c1ebd10e40a9d4b654c9b6d" kindref="member">after</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="76" refid="structztest__suite__node_1a816d1095f551dfcff518543ae1ef7894" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structztest__suite__node_1a816d1095f551dfcff518543ae1ef7894" kindref="member">teardown</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref><sp/>(*<ref refid="structztest__suite__node_1abd125d188f1f2b43efd4e93a334bf648" kindref="member">predicate</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__suite__stats" kindref="compound">ztest_suite_stats</ref><sp/><ref refid="structztest__suite__node_1a5f5c9722ac32f6fb0ef49e84c40b2e80" kindref="member">stats</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__suite__node" kindref="compound">ztest_suite_node</ref><sp/>_ztest_suite_node_list_start[];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__suite__node" kindref="compound">ztest_suite_node</ref><sp/>_ztest_suite_node_list_end[];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="ztest__test__new_8h_1aef8892743e2d47c983efcb61beeedeb3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_SUITE(SUITE_NAME,<sp/>PREDICATE,<sp/>setup_fn,<sp/>before_fn,<sp/>after_fn,<sp/>teardown_fn)<sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>STRUCT_SECTION_ITERABLE(ztest_suite_node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTIL_CAT(z_ztest_test_node_,<sp/>SUITE_NAME))<sp/>=<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>STRINGIFY(SUITE_NAME),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setup<sp/>=<sp/>(setup_fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.before<sp/>=<sp/>(before_fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.after<sp/>=<sp/>(after_fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.teardown<sp/>=<sp/>(teardown_fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.predicate<sp/>=<sp/>PREDICATE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="ztest__test__new_8h_1abd0177fd931d390c1e3f6dbdcaf85605" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ztest__test__new_8h_1abd0177fd931d390c1e3f6dbdcaf85605" kindref="member">ztest_run_test_suites</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="ztest__test__new_8h_1a349fda278dff713debfd2a3b94b8b1eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ztest__test__new_8h_1a349fda278dff713debfd2a3b94b8b1eb" kindref="member">ztest_verify_all_test_suites_ran</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_ztest_run_test_suite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structztest__suite__node_1ad28a3d7f4ac80a2aee55c95385426f23" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group__ztest__test_1gacd6eb423f54dce8544f7c3b1618c0374" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test_1gacd6eb423f54dce8544f7c3b1618c0374" kindref="member">ztest_test_fail</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="group__ztest__test_1ga085d30a04102ebb8c3f2206020723ee0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test_1ga085d30a04102ebb8c3f2206020723ee0" kindref="member">ztest_test_pass</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="group__ztest__test_1gada3b1fcfa71db1bf7787c03ff45256d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test_1gada3b1fcfa71db1bf7787c03ff45256d5" kindref="member">ztest_test_skip</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="group__ztest__test_1gaeb99bd1d29675ca8c31b519853cec422" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test_1gaeb99bd1d29675ca8c31b519853cec422" kindref="member">unit_test_noop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_TEST(suite,<sp/>fn,<sp/>t_options,<sp/>use_fixture)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_##suite##_##fn##_wrapper(void<sp/>*data);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>suite##_##fn(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(use_fixture,<sp/>(struct<sp/>suite##_fixture<sp/>*this),<sp/>(void)));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>STRUCT_SECTION_ITERABLE(ztest_unit_test,<sp/>z_ztest_unit_test_##suite##_##fn)<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test_suite_name<sp/>=<sp/>STRINGIFY(suite),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>STRINGIFY(fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test<sp/>=<sp/>(_##suite##_##fn##_wrapper),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.thread_options<sp/>=<sp/>t_options,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_##suite##_##fn##_wrapper(void<sp/>*data)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(use_fixture,<sp/>(suite##_##fn((struct<sp/>suite##_fixture<sp/>*)data);),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ARG_UNUSED(data);<sp/>suite##_##fn();))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>void<sp/>suite##_##fn(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COND_CODE_1(use_fixture,<sp/>(struct<sp/>suite##_fixture<sp/>*this),<sp/>(void)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ZTEST(suite,<sp/>fn,<sp/>t_options)<sp/>Z_TEST(suite,<sp/>fn,<sp/>t_options,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_ZTEST_F(suite,<sp/>fn,<sp/>t_options)<sp/>Z_TEST(suite,<sp/>fn,<sp/>t_options,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="group__ztest__test_1gac25858f76ea667d07de422a3b489cb15" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST(suite,<sp/>fn)<sp/>Z_ZTEST(suite,<sp/>fn,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="group__ztest__test_1ga7121acc7ee00646cacefa773ff9631c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_USER(suite,<sp/>fn)<sp/>Z_ZTEST(suite,<sp/>fn,<sp/>COND_CODE_1(CONFIG_USERSPACE,<sp/>(K_USER),<sp/>(0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="group__ztest__test_1gacd3ab522e0e5c8a270e86b0cb6bd81b2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_F(suite,<sp/>fn)<sp/>Z_ZTEST_F(suite,<sp/>fn,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group__ztest__test_1ga12ccce144e577cac6ba763982ad14def" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_USER_F(suite,<sp/>fn)<sp/>Z_ZTEST_F(suite,<sp/>fn,<sp/>COND_CODE_1(CONFIG_USERSPACE,<sp/>(K_USER),<sp/>(0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="group__ztest__test_1ga2090c493018a95112b89c5f83b5d8162" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__ztest__test_1ga2090c493018a95112b89c5f83b5d8162" kindref="member">ztest_rule_cb</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__unit__test" kindref="compound">ztest_unit_test</ref><sp/>*<ref refid="structztest__unit__test_1a5fe0425dde921834acb2c0e387bcc524" kindref="member">test</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="structztest__test__rule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__test__rule" kindref="compound">ztest_test_rule</ref><sp/>{</highlight></codeline>
<codeline lineno="269" refid="structztest__test__rule_1a50f3014f7fa897e1090db91873d343da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test_1ga2090c493018a95112b89c5f83b5d8162" kindref="member">ztest_rule_cb</ref><sp/><ref refid="structztest__test__rule_1a50f3014f7fa897e1090db91873d343da" kindref="member">before_each</ref>;</highlight></codeline>
<codeline lineno="270" refid="structztest__test__rule_1a3d336ae0b64dd5c4c0b56d0a25c8ac77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ztest__test_1ga2090c493018a95112b89c5f83b5d8162" kindref="member">ztest_rule_cb</ref><sp/><ref refid="structztest__test__rule_1a3d336ae0b64dd5c4c0b56d0a25c8ac77" kindref="member">after_each</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group__ztest__test_1ga2a0a5e3b6e8fa1c9a03e7600895d875f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_RULE(name,<sp/>before_each_fn,<sp/>after_each_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>STRUCT_SECTION_ITERABLE(ztest_test_rule,<sp/>z_ztest_test_rule_##name)<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.before_each<sp/>=<sp/>(before_each_fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.after_each<sp/>=<sp/>(after_each_fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__test__rule" kindref="compound">ztest_test_rule</ref><sp/>_ztest_test_rule_list_start[];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structztest__test__rule" kindref="compound">ztest_test_rule</ref><sp/>_ztest_test_rule_list_end[];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="group__ztest__test_1gac7ddc33b5a0d11e2ffa0a564019c5e3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test_1gac7ddc33b5a0d11e2ffa0a564019c5e3d" kindref="member">ztest_simple_1cpu_before</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="group__ztest__test_1gaa53486873430dd8fa978745d8a1d0686" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ztest__test_1gaa53486873430dd8fa978745d8a1d0686" kindref="member">ztest_simple_1cpu_after</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>definitions<sp/>for<sp/>use<sp/>with<sp/>testing<sp/>application<sp/>shared<sp/>memory<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="group__ztest__test_1ga2c7d0aa85e7f320d582395c5ded90133" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_DMEM<sp/>K_APP_DMEM(ztest_mem_partition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="group__ztest__test_1gac3de5965061b1164a8033712c9094e23" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_BMEM<sp/>K_APP_BMEM(ztest_mem_partition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="group__ztest__test_1ga44777f5011728bbff63fe3639c1b4aa8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_SECTION<sp/>K_APP_DMEM_SECTION(ztest_mem_partition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__partition" kindref="compound">k_mem_partition</ref><sp/><ref refid="group__ztest__test_1ga3adced2fdda96833e6b1ecbf3d61d446" kindref="member">ztest_mem_partition</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_DMEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_BMEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZTEST_SECTION<sp/>.data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="group__ztest__test_1ga7f76df4df4bf68a605b923fed8e5465c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ztest_run_test_suite(suite)<sp/>z_ztest_run_test_suite(STRINGIFY(suite))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_TESTSUITE_ZTEST_TEST_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="subsys/testsuite/ztest/include/ztest_test_new.h"/>
  </compounddef>
</doxygen>
