<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__net__pkt" kind="group">
    <compoundname>net_pkt</compoundname>
    <title>Network Packet Library</title>
    <innerclass refid="structnet__pkt__cursor" prot="public">net_pkt_cursor</innerclass>
    <innerclass refid="structnet__pkt" prot="public">net_pkt</innerclass>
    <innerclass refid="structnet__pkt__data__access" prot="public">net_pkt_data_access</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__net__pkt_1ga30d0b8741abd594f90a7f206f554035f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_pkt_get_reserve_rx_data</definition>
        <argsstring>(k_timeout_t timeout)</argsstring>
        <name>net_pkt_get_reserve_rx_data</name>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get RX DATA buffer from pool. Normally you should use <ref refid="group__net__pkt_1gae4d0c53b29d2fbd6e324a274e35f6b9d" kindref="member">net_pkt_get_frag()</ref> instead. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally this version is not useful for applications but is mainly used by network fragmentation code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the net buf pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait up to the specified time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network buffer if successful, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1379" column="14" declfile="include/net/net_pkt.h" declline="1379" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaca0174ee16d43448a265675b54a57758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_pkt_get_reserve_tx_data</definition>
        <argsstring>(k_timeout_t timeout)</argsstring>
        <name>net_pkt_get_reserve_tx_data</name>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get TX DATA buffer from pool. Normally you should use <ref refid="group__net__pkt_1gae4d0c53b29d2fbd6e324a274e35f6b9d" kindref="member">net_pkt_get_frag()</ref> instead. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally this version is not useful for applications but is mainly used by network fragmentation code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the net buf pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait up to the specified time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network buffer if successful, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1396" column="14" declfile="include/net/net_pkt.h" declline="1396" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gae4d0c53b29d2fbd6e324a274e35f6b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_pkt_get_frag</definition>
        <argsstring>(struct net_pkt *pkt, k_timeout_t timeout)</argsstring>
        <name>net_pkt_get_frag</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Get a data fragment that might be from user specific buffer pool or from global DATA pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Affects the action taken should the net buf pool be empty. If K_NO_WAIT, then return immediately. If K_FOREVER, then wait as long as necessary. Otherwise, wait up to the specified time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network buffer if successful, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1411" column="14" declfile="include/net/net_pkt.h" declline="1411" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga893d1660fd18ad5842224fda78466099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_unref</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_unref</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Place packet back into the available packets slab. </para>
        </briefdescription>
        <detaileddescription>
<para>Releases the packet to other use. This needs to be called by application after it has finished with the packet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet to release. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1424" column="6" declfile="include/net/net_pkt.h" declline="1424" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga4e83d4f60b46db8f57798c0e96d6cd7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_ref</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_ref</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Increase the packet ref count. </para>
        </briefdescription>
        <detaileddescription>
<para>Mark the packet to be used still.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet to ref.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network packet if successful, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1437" column="14" declfile="include/net/net_pkt.h" declline="1437" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaea5e1045d188b3abbd85717ff09d563a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_pkt_frag_ref</definition>
        <argsstring>(struct net_buf *frag)</argsstring>
        <name>net_pkt_frag_ref</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Increase the packet fragment ref count. </para>
        </briefdescription>
        <detaileddescription>
<para>Mark the fragment to be used still.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Network fragment to ref.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer on the referenced Network fragment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1450" column="14" declfile="include/net/net_pkt.h" declline="1450" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga5c75ef2149d2ba5ff07525988e0fb7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_frag_unref</definition>
        <argsstring>(struct net_buf *frag)</argsstring>
        <name>net_pkt_frag_unref</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Decrease the packet fragment ref count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Network fragment to unref. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1459" column="6" declfile="include/net/net_pkt.h" declline="1459" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga956c784f5417f0f79976c6e106ad0d76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * net_pkt_frag_del</definition>
        <argsstring>(struct net_pkt *pkt, struct net_buf *parent, struct net_buf *frag)</argsstring>
        <name>net_pkt_frag_del</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Delete existing fragment from a packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet from which frag belongs to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent fragment of frag, or NULL if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment to delete.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the following fragment, or NULL if it had no further fragments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1473" column="14" declfile="include/net/net_pkt.h" declline="1473" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga03a53365cfc2b6c3448763d81f56c2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_frag_add</definition>
        <argsstring>(struct net_pkt *pkt, struct net_buf *frag)</argsstring>
        <name>net_pkt_frag_add</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Add a fragment to a packet at the end of its fragment list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>pkt Network packet where to add the fragment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1485" column="6" declfile="include/net/net_pkt.h" declline="1485" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gabcd375d9dbdca21855abe27d7b5a0a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_frag_insert</definition>
        <argsstring>(struct net_pkt *pkt, struct net_buf *frag)</argsstring>
        <name>net_pkt_frag_insert</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>frag</declname>
        </param>
        <briefdescription>
<para>Insert a fragment to a packet at the beginning of its fragment list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>pkt Network packet where to insert the fragment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>Fragment to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1495" column="6" declfile="include/net/net_pkt.h" declline="1495" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga8d18adc7dc87bf6b54f45f0227c12423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_pkt_compact</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_compact</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Compact the fragment list of a packet. </para>
        </briefdescription>
        <detaileddescription>
<para>After this there is no more any free space in individual fragments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if compact success, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1506" column="6" declfile="include/net/net_pkt.h" declline="1506" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga7b02b95838b928febfd4970de5e9c9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_get_info</definition>
        <argsstring>(struct k_mem_slab **rx, struct k_mem_slab **tx, struct net_buf_pool **rx_data, struct net_buf_pool **tx_data)</argsstring>
        <name>net_pkt_get_info</name>
        <param>
          <type>struct k_mem_slab **</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>struct k_mem_slab **</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> **</type>
          <declname>rx_data</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf__pool" kindref="compound">net_buf_pool</ref> **</type>
          <declname>tx_data</declname>
        </param>
        <briefdescription>
<para>Get information about predefined RX, TX and DATA pools. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to RX pool is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to TX pool is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to RX DATA pool is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to TX DATA pool is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1516" column="6" declfile="include/net/net_pkt.h" declline="1516" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga90d97ba913a875b3ee438e0ea8a970fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_alloc</definition>
        <argsstring>(k_timeout_t timeout)</argsstring>
        <name>net_pkt_alloc</name>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate an initialized <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>for the time being, 2 pools are used. One for TX and one for RX. This allocator has to be used for TX.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time to wait for an allocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a newly allocated <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> on success, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1631" column="14" declfile="include/net/net_pkt.h" declline="1631" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaf1edbaab59576262647089fa1751d9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_alloc_from_slab</definition>
        <argsstring>(struct k_mem_slab *slab, k_timeout_t timeout)</argsstring>
        <name>net_pkt_alloc_from_slab</name>
        <param>
          <type>struct k_mem_slab *</type>
          <declname>slab</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate an initialized <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> from a specific slab. </para>
        </briefdescription>
        <detaileddescription>
<para>unlike <ref refid="group__net__pkt_1ga90d97ba913a875b3ee438e0ea8a970fd" kindref="member">net_pkt_alloc()</ref> which uses core slabs, this one will use an external slab (see <ref refid="group__net__pkt_1gafc7e98d5b64d816faabcbaa2ec22a2bb" kindref="member">NET_PKT_SLAB_DEFINE()</ref>). Do <emphasis>not</emphasis> use it unless you know what you are doing. Basically, only <ref refid="structnet__context" kindref="compound">net_context</ref> should be using this, in order to allocate packet and then buffer on its local slab/pool (if any).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>The slab to use for allocating the packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time to wait for an allocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a newly allocated <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> on success, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1649" column="14" declfile="include/net/net_pkt.h" declline="1649" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga4cec027a0de4807879fd3bd3aed4f12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_rx_alloc</definition>
        <argsstring>(k_timeout_t timeout)</argsstring>
        <name>net_pkt_rx_alloc</name>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate an initialized <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> for RX. </para>
        </briefdescription>
        <detaileddescription>
<para>for the time being, 2 pools are used. One for TX and one for RX. This allocator has to be used for RX.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time to wait for an allocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a newly allocated <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> on success, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1664" column="14" declfile="include/net/net_pkt.h" declline="1664" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga770ffe22fc797691b1fc89954d60b2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_alloc_on_iface</definition>
        <argsstring>(struct net_if *iface, k_timeout_t timeout)</argsstring>
        <name>net_pkt_alloc_on_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate a network packet for a specific network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>The network interface the packet is supposed to go through. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time to wait for an allocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a newly allocated <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> on success, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1676" column="14" declfile="include/net/net_pkt.h" declline="1676" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gab64f7551b1995c301232ab4cd39b9efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_rx_alloc_on_iface</definition>
        <argsstring>(struct net_if *iface, k_timeout_t timeout)</argsstring>
        <name>net_pkt_rx_alloc_on_iface</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1680" column="14" declfile="include/net/net_pkt.h" declline="1680" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gae31b4afd510bce346f7d00a9ec5d190d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_alloc_buffer</definition>
        <argsstring>(struct net_pkt *pkt, size_t size, enum net_ip_protocol proto, k_timeout_t timeout)</argsstring>
        <name>net_pkt_alloc_buffer</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" kindref="member">net_ip_protocol</ref></type>
          <declname>proto</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate buffer for a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>: such allocator will take into account space necessary for headers, MTU, and existing buffer (if any). Beware that, due to all these criteria, the allocated size might be smaller/bigger than requested one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet requiring buffer to be allocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of buffer being requested. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP protocol type (can be 0 for none). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time to wait for an allocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1700" column="5" declfile="include/net/net_pkt.h" declline="1700" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga57e2f5138acd92ad49864e3d709d9419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_alloc_with_buffer</definition>
        <argsstring>(struct net_if *iface, size_t size, sa_family_t family, enum net_ip_protocol proto, k_timeout_t timeout)</argsstring>
        <name>net_pkt_alloc_with_buffer</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" kindref="member">net_ip_protocol</ref></type>
          <declname>proto</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate a network packet and buffer at once. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>The network interface the packet is supposed to go through. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>The family to which the packet belongs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP protocol type (can be 0 for none). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time to wait for an allocation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a newly allocated <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> on success, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1718" column="14" declfile="include/net/net_pkt.h" declline="1718" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga623794964a35e0e24c1f41a75bfba626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_rx_alloc_with_buffer</definition>
        <argsstring>(struct net_if *iface, size_t size, sa_family_t family, enum net_ip_protocol proto, k_timeout_t timeout)</argsstring>
        <name>net_pkt_rx_alloc_with_buffer</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" kindref="member">net_ip_protocol</ref></type>
          <declname>proto</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1725" column="14" declfile="include/net/net_pkt.h" declline="1725" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga2b11492ae3c16368aa6a0ab8f47b67e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_append_buffer</definition>
        <argsstring>(struct net_pkt *pkt, struct net_buf *buffer)</argsstring>
        <name>net_pkt_append_buffer</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Append a buffer in packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet where to append the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1738" column="6" declfile="include/net/net_pkt.h" declline="1738" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaeed119d192e3a14ea3eea6e623334519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_pkt_available_buffer</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_available_buffer</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Get available buffer space from a pkt. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Reserved bytes (headroom) in any of the fragments are not considered to be available.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> which buffer availability should be evaluated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the amount of buffer available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1750" column="8" declfile="include/net/net_pkt.h" declline="1750" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaa9f63047b7945a4a155e5d88eac5203b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_pkt_available_payload_buffer</definition>
        <argsstring>(struct net_pkt *pkt, enum net_ip_protocol proto)</argsstring>
        <name>net_pkt_available_payload_buffer</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" kindref="member">net_ip_protocol</ref></type>
          <declname>proto</declname>
        </param>
        <briefdescription>
<para>Get available buffer space for payload from a pkt. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Reserved bytes (headroom) in any of the fragments are not considered to be available.</para>
</simplesect>
Unlike <ref refid="group__net__pkt_1gaeed119d192e3a14ea3eea6e623334519" kindref="member">net_pkt_available_buffer()</ref>, this will take into account the headers space.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> which payload buffer availability should be evaluated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP protocol type (can be 0 for none).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the amount of buffer available for payload </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1767" column="8" declfile="include/net/net_pkt.h" declline="1767" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga71d1c49f68afab07324cebd835f08a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_trim_buffer</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_trim_buffer</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Trim <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This will basically check for unused buffers and deallocates them relevantly</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> which buffer will be trimmed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1778" column="6" declfile="include/net/net_pkt.h" declline="1778" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gab657c80669733a4afefaf1be6310107e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_remove_tail</definition>
        <argsstring>(struct net_pkt *pkt, size_t length)</argsstring>
        <name>net_pkt_remove_tail</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Remove <emphasis>length</emphasis> bytes from tail of packet. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does not take packet cursor into account. It is a helper to remove unneeded bytes from tail of packet (like appended CRC). It takes care of buffer deallocation if removed bytes span whole buffer(s).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be removed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>On success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>If packet length is shorter than <emphasis>length</emphasis>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1794" column="5" declfile="include/net/net_pkt.h" declline="1794" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga1b7da39f62dfc8b8948d7689e2dd114a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void net_pkt_cursor_init</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_cursor_init</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Initialize <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> cursor. </para>
        </briefdescription>
        <detaileddescription>
<para>This will initialize the <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> cursor from its buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> whose cursor is going to be initialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1803" column="6" declfile="include/net/net_pkt.h" declline="1803" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gabd352b66cdeaff2fb45361a0fae62876" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_pkt_cursor_backup</definition>
        <argsstring>(struct net_pkt *pkt, struct net_pkt_cursor *backup)</argsstring>
        <name>net_pkt_cursor_backup</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt__cursor" kindref="compound">net_pkt_cursor</ref> *</type>
          <declname>backup</declname>
        </param>
        <briefdescription>
<para>Backup <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> cursor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> whose cursor is going to be backed up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cursor where to backup <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> cursor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1811" column="20" bodyfile="include/net/net_pkt.h" bodystart="1811" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gad5ab788f01b4bb3640755e8c4a2c612e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_pkt_cursor_restore</definition>
        <argsstring>(struct net_pkt *pkt, struct net_pkt_cursor *backup)</argsstring>
        <name>net_pkt_cursor_restore</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt__cursor" kindref="compound">net_pkt_cursor</ref> *</type>
          <declname>backup</declname>
        </param>
        <briefdescription>
<para>Restore <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> cursor from a backup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> whose cursor is going to be restored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cursor from where to restore <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> cursor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1824" column="20" bodyfile="include/net/net_pkt.h" bodystart="1824" bodyend="1829"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gabc42ba1bcd0801a116651d965e65b9cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * net_pkt_cursor_get_pos</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_cursor_get_pos</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Returns current position of the cursor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> whose cursor position is going to be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cursor&apos;s position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1838" column="20" bodyfile="include/net/net_pkt.h" bodystart="1838" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga223a79baa1e740a53c4ed0f083d62185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_skip</definition>
        <argsstring>(struct net_pkt *pkt, size_t length)</argsstring>
        <name>net_pkt_skip</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Skip some data from a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized Cursor position will be updated after the operation. Depending on the value of pkt-&gt;overwrite bit, this function will affect the buffer length or not. If it&apos;s true, it will advance the cursor to the requested length. If it&apos;s false, it will do the same but if the cursor was already also at the end of existing data, it will increment the buffer length. So in this case, its behavior is just like net_pkt_write or net_pkt_memset, difference being that it will not affect the buffer content itself (which may be just garbage then).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> whose cursor will be updated to skip given amount of data from the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of data to skip in the buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1863" column="5" declfile="include/net/net_pkt.h" declline="1863" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gabd241a539bf1290f3d45610fd15b2c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_memset</definition>
        <argsstring>(struct net_pkt *pkt, int byte, size_t length)</argsstring>
        <name>net_pkt_memset</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>byte</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Memset some data in a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> whose buffer to fill starting at the current cursor position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte to write in memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of data to memset with given byte</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1879" column="5" declfile="include/net/net_pkt.h" declline="1879" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga4648828ca353c8c0ecf00ae2648e963a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_copy</definition>
        <argsstring>(struct net_pkt *pkt_dst, struct net_pkt *pkt_src, size_t length)</argsstring>
        <name>net_pkt_copy</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt_dst</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt_src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Copy data from a packet into another one. </para>
        </briefdescription>
        <detaileddescription>
<para>Both <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> cursors should be properly initialized and, if needed, positioned using net_pkt_skip. The cursors will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt_dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination network packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pkt_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source network packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1894" column="5" declfile="include/net/net_pkt.h" declline="1894" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaefefe50d0c68fb4997abc7b309740959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_clone</definition>
        <argsstring>(struct net_pkt *pkt, k_timeout_t timeout)</argsstring>
        <name>net_pkt_clone</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Clone pkt and its buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Original pkt to be cloned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout to wait for free buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if error, cloned packet otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1906" column="14" declfile="include/net/net_pkt.h" declline="1906" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga26ae9d1286cb98d255f1bfb65201f1e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
        <definition>struct net_pkt * net_pkt_shallow_clone</definition>
        <argsstring>(struct net_pkt *pkt, k_timeout_t timeout)</argsstring>
        <name>net_pkt_shallow_clone</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Clone pkt and increase the refcount of its buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Original pkt to be shallow cloned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout to wait for free packet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if error, cloned packet otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1916" column="14" declfile="include/net/net_pkt.h" declline="1916" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga914be010ddd225a4fc2d6ab521ee7b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_read</definition>
        <argsstring>(struct net_pkt *pkt, void *data, size_t length)</argsstring>
        <name>net_pkt_read</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Read some data from a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet from where to read some data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer where to copy the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of data to copy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1932" column="5" declfile="include/net/net_pkt.h" declline="1932" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaf9b2753cb514804a77d9494c9f070089" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_pkt_read_u8</definition>
        <argsstring>(struct net_pkt *pkt, uint8_t *data)</argsstring>
        <name>net_pkt_read_u8</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1935" column="19" bodyfile="include/net/net_pkt.h" bodystart="1935" bodyend="1938"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga500a318977cfecd4ec7c60cea01db2fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_read_be16</definition>
        <argsstring>(struct net_pkt *pkt, uint16_t *data)</argsstring>
        <name>net_pkt_read_be16</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read uint16_t big endian data from a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet from where to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination uint16_t where to copy the data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1952" column="5" declfile="include/net/net_pkt.h" declline="1952" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gab1735ef4f6a2e538a2692358295dd8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_read_le16</definition>
        <argsstring>(struct net_pkt *pkt, uint16_t *data)</argsstring>
        <name>net_pkt_read_le16</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read uint16_t little endian data from a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet from where to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination uint16_t where to copy the data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1966" column="5" declfile="include/net/net_pkt.h" declline="1966" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gab38c99947d02982073df65c0d5893d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_read_be32</definition>
        <argsstring>(struct net_pkt *pkt, uint32_t *data)</argsstring>
        <name>net_pkt_read_be32</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read uint32_t big endian data from a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet from where to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination uint32_t where to copy the data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1980" column="5" declfile="include/net/net_pkt.h" declline="1980" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gae99eadd977b7f66ecc91d2ccba34c6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_write</definition>
        <argsstring>(struct net_pkt *pkt, const void *data, size_t length)</argsstring>
        <name>net_pkt_write</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Write data into a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet where to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1995" column="5" declfile="include/net/net_pkt.h" declline="1995" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaa5129f661075c13d9b59627ae9110bd1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_pkt_write_u8</definition>
        <argsstring>(struct net_pkt *pkt, uint8_t data)</argsstring>
        <name>net_pkt_write_u8</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1998" column="19" bodyfile="include/net/net_pkt.h" bodystart="1998" bodyend="2001"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga8e5083388ccb0333fdcf745bc60ad260" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_pkt_write_be16</definition>
        <argsstring>(struct net_pkt *pkt, uint16_t data)</argsstring>
        <name>net_pkt_write_be16</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2004" column="19" bodyfile="include/net/net_pkt.h" bodystart="2004" bodyend="2009"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga053aff4ff0a501f336132c35b7fb2022" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_pkt_write_be32</definition>
        <argsstring>(struct net_pkt *pkt, uint32_t data)</argsstring>
        <name>net_pkt_write_be32</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2012" column="19" bodyfile="include/net/net_pkt.h" bodystart="2012" bodyend="2017"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaf2388032e4e0b76fe32e4618ef3ea548" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_pkt_write_le32</definition>
        <argsstring>(struct net_pkt *pkt, uint32_t data)</argsstring>
        <name>net_pkt_write_le32</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2020" column="19" bodyfile="include/net/net_pkt.h" bodystart="2020" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gac8a6ea1b0dc1bcd7b6a3f15869027dd1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_pkt_write_le16</definition>
        <argsstring>(struct net_pkt *pkt, uint16_t data)</argsstring>
        <name>net_pkt_write_le16</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2028" column="19" bodyfile="include/net/net_pkt.h" bodystart="2028" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gadee5307216b6b3b725a2fd7584a224c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_pkt_remaining_data</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_remaining_data</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Get the amount of data which can be read from current cursor position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Amount of data which can be read from current pkt cursor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2042" column="8" declfile="include/net/net_pkt.h" declline="2042" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga2e7a0f9348a623c5160124da188445ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_update_length</definition>
        <argsstring>(struct net_pkt *pkt, size_t length)</argsstring>
        <name>net_pkt_update_length</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Update the overall length of a packet. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="group__net__pkt_1ga434c347a32600ee113c0e1cc13f70cd4" kindref="member">net_pkt_pull()</ref> below, this does not take packet cursor into account. It&apos;s mainly a helper dedicated for ipv4 and ipv6 input functions. It shrinks the overall length by given parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The new length of the packet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2056" column="5" declfile="include/net/net_pkt.h" declline="2056" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga434c347a32600ee113c0e1cc13f70cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_pull</definition>
        <argsstring>(struct net_pkt *pkt, size_t length)</argsstring>
        <name>net_pkt_pull</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Remove data from the packet at current location. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, eventually, properly positioned using net_pkt_skip/read/write. Note that <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor is reset by this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be removed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2070" column="5" declfile="include/net/net_pkt.h" declline="2070" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gadb3b705a0431b3bb98fb2e8193c3b510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_pkt_get_current_offset</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_get_current_offset</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
<para>Get the actual offset in the packet from its cursor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a valid offset on success, 0 otherwise as there is nothing that can be done to evaluate the offset. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2080" column="10" declfile="include/net/net_pkt.h" declline="2080" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaf4ee5a8903b495e000a3a4c8a8493160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_pkt_is_contiguous</definition>
        <argsstring>(struct net_pkt *pkt, size_t size)</argsstring>
        <name>net_pkt_is_contiguous</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Check if a data size could fit contiguously. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size to check for contiguity</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if that is the case, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2093" column="6" declfile="include/net/net_pkt.h" declline="2093" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gafbd6c0ab33139b134f67a8f8c0096445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t net_pkt_get_contiguous_len</definition>
        <argsstring>(struct net_pkt *pkt)</argsstring>
        <name>net_pkt_get_contiguous_len</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the contiguous buffer space</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network packet</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The available contiguous buffer space in bytes starting from the current cursor position. 0 in case of an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2103" column="8" declfile="include/net/net_pkt.h" declline="2103" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gaa00da4276fd4a01faf80a92796f78e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * net_pkt_get_data</definition>
        <argsstring>(struct net_pkt *pkt, struct net_pkt_data_access *access)</argsstring>
        <name>net_pkt_get_data</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt__data__access" kindref="compound">net_pkt_data_access</ref> *</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Get data from a network packet in a contiguous way. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet from where to get the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid <ref refid="structnet__pkt__data__access" kindref="compound">net_pkt_data_access</ref> describing the data to get in a contiguous way.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the requested contiguous data, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2150" column="6" declfile="include/net/net_pkt.h" declline="2150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1ga98df84477b35e203b11029fc4ddec1cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_pkt_set_data</definition>
        <argsstring>(struct net_pkt *pkt, struct net_pkt_data_access *access)</argsstring>
        <name>net_pkt_set_data</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt__data__access" kindref="compound">net_pkt_data_access</ref> *</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Set contiguous data into a network packet. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structnet__pkt" kindref="compound">net_pkt</ref>&apos;s cursor should be properly initialized and, if needed, positioned using net_pkt_skip. Cursor position will be updated after the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>The network packet to where the data should be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid <ref refid="structnet__pkt__data__access" kindref="compound">net_pkt_data_access</ref> describing the data to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, a negative errno otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2166" column="5" declfile="include/net/net_pkt.h" declline="2166" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__net__pkt_1gac7226cbfa2da28408f9691d375bc8f9f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int net_pkt_acknowledge_data</definition>
        <argsstring>(struct net_pkt *pkt, struct net_pkt_data_access *access)</argsstring>
        <name>net_pkt_acknowledge_data</name>
        <param>
          <type>struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> *</type>
          <declname>pkt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__pkt__data__access" kindref="compound">net_pkt_data_access</ref> *</type>
          <declname>access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acknowledge previously contiguous data taken from a network packet Packet needs to be set to overwrite mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2173" column="19" bodyfile="include/net/net_pkt.h" bodystart="2173" bodyend="2177"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__net__pkt_1gafc7e98d5b64d816faabcbaa2ec22a2bb" prot="public" static="no">
        <name>NET_PKT_SLAB_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>count</defname></param>
        <initializer>	<ref refid="obj__tracking_2src_2main_8c_1a28f95631efa7f8ce6a04bc473f52af4e" kindref="member">K_MEM_SLAB_DEFINE</ref>(name, sizeof(struct <ref refid="structnet__pkt" kindref="compound">net_pkt</ref>), <ref refid="semaphore_2sys__sem_2src_2main_8c_1a7624b580dc5672d7564cdc73212de784" kindref="member">count</ref>, 4)</initializer>
        <briefdescription>
<para>Create a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> slab. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> slab is used to store meta-information about network packets. It must be coupled with a data fragment pool (:c:macro:<computeroutput>NET_PKT_DATA_POOL_DEFINE</computeroutput>) used to store the actual packet data. The macro can be used by an application to define additional custom per-context TX packet slabs (see :c:func:<computeroutput>net_context_setup_pools</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the slab. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> in this slab. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1253" column="9" bodyfile="include/net/net_pkt.h" bodystart="1253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt_1gacb3bb7347aa5dccb902531a1d6fbd190" prot="public" static="no">
        <name>NET_PKT_TX_SLAB_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__net__pkt_1gafc7e98d5b64d816faabcbaa2ec22a2bb" kindref="member">NET_PKT_SLAB_DEFINE</ref>(name, <ref refid="semaphore_2sys__sem_2src_2main_8c_1a7624b580dc5672d7564cdc73212de784" kindref="member">count</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1257" column="9" bodyfile="include/net/net_pkt.h" bodystart="1257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt_1ga94ab6300b59d739c4e3c5604d3fbe8a5" prot="public" static="no">
        <name>NET_PKT_DATA_POOL_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>count</defname></param>
        <initializer>	<ref refid="group__net__buf_1ga810aba8ba321fd012edc238ea9fe19dc" kindref="member">NET_BUF_POOL_DEFINE</ref>(name, <ref refid="semaphore_2sys__sem_2src_2main_8c_1a7624b580dc5672d7564cdc73212de784" kindref="member">count</ref>, CONFIG_NET_BUF_DATA_SIZE,	\
			    0, NULL)</initializer>
        <briefdescription>
<para>Create a data fragment <ref refid="structnet__buf" kindref="compound">net_buf</ref> pool. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="structnet__buf" kindref="compound">net_buf</ref> pool is used to store actual data for network packets. It must be coupled with a <ref refid="structnet__pkt" kindref="compound">net_pkt</ref> slab (:c:macro:<computeroutput>NET_PKT_SLAB_DEFINE</computeroutput>) used to store the packet meta-information. The macro can be used by an application to define additional custom per-context TX packet pools (see :c:func:<computeroutput>net_context_setup_pools</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the pool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of <ref refid="structnet__buf" kindref="compound">net_buf</ref> in this pool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1272" column="9" bodyfile="include/net/net_pkt.h" bodystart="1272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt_1ga2b2d0900ae76674d418918ec955bad48" prot="public" static="no">
        <name>net_pkt_print_frags</name>
        <param><defname>pkt</defname></param>
        <briefdescription>
<para>Print fragment list and the fragment sizes. </para>
        </briefdescription>
        <detaileddescription>
<para>Only available if debugging is activated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pkt</parametername>
</parameternamelist>
<parameterdescription>
<para>Network pkt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="1362" column="10" bodyfile="include/net/net_pkt.h" bodystart="1362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt_1gafd11f2d4f773bf247296eb08b7006c27" prot="public" static="no">
        <name>NET_PKT_DATA_ACCESS_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	_type _hdr_##_name;					\
	struct <ref refid="structnet__pkt__data__access" kindref="compound">net_pkt_data_access</ref> _name = {			\
		.<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref> = &amp;_hdr_##_name,				\
		.size = sizeof(_type),				\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2122" column="10" bodyfile="include/net/net_pkt.h" bodystart="2122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__net__pkt_1gaa6a48974656755dcc0979683b8431c37" prot="public" static="no">
        <name>NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE</name>
        <param><defname>_name</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	struct <ref refid="structnet__pkt__data__access" kindref="compound">net_pkt_data_access</ref> _name = {			\
		.<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref> = NULL,					\
		.size = sizeof(_type),				\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_pkt.h" line="2129" column="9" bodyfile="include/net/net_pkt.h" bodystart="2129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Network packet management library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
