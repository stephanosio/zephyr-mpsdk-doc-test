<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__heap__listener__apis" kind="group">
    <compoundname>heap_listener_apis</compoundname>
    <title>Heap Listener APIs</title>
    <innerclass refid="structheap__listener" prot="public">heap_listener</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__heap__listener__apis_1ga9679320e1c32dcbad726789946565510" prot="public" static="no" strong="no">
        <type></type>
        <name>heap_event_types</name>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510ae82b3e0225bde5553f472c5f00985b18" prot="public">
          <name>HEAP_EVT_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a198aa2475e58078a46cf79ffb0914408" prot="public">
          <name>HEAP_RESIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a23ece0bd476a164e251ebd1af61f0008" prot="public">
          <name>HEAP_ALLOC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a82e2137ada931f068fa36d40245f5a80" prot="public">
          <name>HEAP_FREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510aa64f229b21eedbca9a581b60e3da5a50" prot="public">
          <name>HEAP_REALLOC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510afb3a6f56a29d74c35db90fbeaa61a3b6" prot="public">
          <name>HEAP_MAX_EVENTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="25" column="1" bodyfile="include/sys/heap_listener.h" bodystart="25" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__heap__listener__apis_1ga38ae35495e88e699bfa26685e36ae0cc" prot="public" static="no">
        <type>void(*</type>
        <definition>heap_listener_resize_cb_t</definition>
        <argsstring>)(uintptr_t heap_id, void *old_heap_end, void *new_heap_end)</argsstring>
        <name>heap_listener_resize_cb_t</name>
        <briefdescription>
<para>Callback used when heap is resized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Minimal C library does not emit this event.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of heap being resized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to end of heap before resize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to end of heap after resize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="50" column="9" bodyfile="include/sys/heap_listener.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__heap__listener__apis_1ga9bcf93f882c1af68fe7ae0e7fe4235c3" prot="public" static="no">
        <type>void(*</type>
        <definition>heap_listener_alloc_cb_t</definition>
        <argsstring>)(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_alloc_cb_t</name>
        <briefdescription>
<para>Callback used when there is heap allocation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Heaps managed by libraries outside of code in Zephyr main code repository may not emit this event.</para>
</simplesect>
<simplesect kind="note"><para>The number of bytes allocated may not match exactly to the request to the allocation function. Internal mechanism of the heap may allocate more than requested.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of allocated memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="70" column="9" bodyfile="include/sys/heap_listener.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__heap__listener__apis_1gacaf76642922706c2bff8a57f9efe7e8f" prot="public" static="no">
        <type>void(*</type>
        <definition>heap_listener_free_cb_t</definition>
        <argsstring>)(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_free_cb_t</name>
        <briefdescription>
<para>Callback used when memory is freed from heap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Heaps managed by libraries outside of code in Zephyr main code repository may not emit this event.</para>
</simplesect>
<simplesect kind="note"><para>The number of bytes freed may not match exactly to the request to the allocation function. Internal mechanism of the heap dictates how memory is allocated or freed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the freed memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of freed memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="89" column="9" bodyfile="include/sys/heap_listener.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__heap__listener__apis_1ga63d5470d9ca312ccc80d35c7f8dea200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_register</definition>
        <argsstring>(struct heap_listener *listener)</argsstring>
        <name>heap_listener_register</name>
        <param>
          <type>struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Register heap event listener. </para>
        </briefdescription>
        <detaileddescription>
<para>Add the listener to the global list of heap listeners that can be notified by different heap implementations upon certain events related to the heap usage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structheap__listener" kindref="compound">heap_listener</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="124" column="6" declfile="include/sys/heap_listener.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1ga872e123af0a5349e45fcedfd8b83b508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_unregister</definition>
        <argsstring>(struct heap_listener *listener)</argsstring>
        <name>heap_listener_unregister</name>
        <param>
          <type>struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Unregister heap event listener. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the listener from the global list of heap listeners that can be notified by different heap implementations upon certain events related to the heap usage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structheap__listener" kindref="compound">heap_listener</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="135" column="6" declfile="include/sys/heap_listener.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1gaebe49e01cba6d327c635da4795e37e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_notify_alloc</definition>
        <argsstring>(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_notify_alloc</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>heap_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Notify listeners of heap allocation event. </para>
        </briefdescription>
        <detaileddescription>
<para>Notify registered heap event listeners with matching heap identifier that an allocation has been done on heap</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of allocated memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="147" column="6" declfile="include/sys/heap_listener.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1ga8fd3dc5b65e3bc8bbc1dadaa741d47fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_notify_free</definition>
        <argsstring>(uintptr_t heap_id, void *mem, size_t bytes)</argsstring>
        <name>heap_listener_notify_free</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>heap_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Notify listeners of heap free event. </para>
        </briefdescription>
        <detaileddescription>
<para>Notify registered heap event listeners with matching heap identifier that memory is freed on heap</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the freed memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of freed memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="159" column="6" declfile="include/sys/heap_listener.h" declline="159" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__listener__apis_1ga9d3062fbcdc10edc3839193e8ea79654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void heap_listener_notify_resize</definition>
        <argsstring>(uintptr_t heap_id, void *old_heap_end, void *new_heap_end)</argsstring>
        <name>heap_listener_notify_resize</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>heap_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>old_heap_end</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>new_heap_end</declname>
        </param>
        <briefdescription>
<para>Notify listeners of heap resize event. </para>
        </briefdescription>
        <detaileddescription>
<para>Notify registered heap event listeners with matching heap identifier that the heap has been resized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the heap end before the change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_heap_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the heap end after the change </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="171" column="6" declfile="include/sys/heap_listener.h" declline="171" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__heap__listener__apis_1ga77e603053a5b69caae2a49e441a525c0" prot="public" static="no">
        <name>HEAP_ID_FROM_POINTER</name>
        <param><defname>heap_pointer</defname></param>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)heap_pointer)</initializer>
        <briefdescription>
<para>Construct heap identifier from heap pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct a heap identifer from a pointer to the heap object, such as <ref refid="structsys__heap" kindref="compound">sys_heap</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heap_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the heap object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="181" column="9" bodyfile="include/sys/heap_listener.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1ga7627d1b500bb7e833770c99071f9255d" prot="public" static="no">
        <name>HEAP_ID_LIBC</name>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>)0)</initializer>
        <briefdescription>
<para>Libc heap identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Identifier of the global libc heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="188" column="9" bodyfile="include/sys/heap_listener.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1ga1854b23cbd41dec0d8262e8f122ebd5d" prot="public" static="no">
        <name>HEAP_LISTENER_ALLOC_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>_heap_id</defname></param>
        <param><defname>_alloc_cb</defname></param>
        <initializer>	struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> name = { \
		.heap_id = _heap_id, \
		.event = <ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a23ece0bd476a164e251ebd1af61f0008" kindref="member">HEAP_ALLOC</ref>, \
		{ \
			.alloc_cb = _alloc_cb \
		}, \
	}</initializer>
        <briefdescription>
<para>Define heap event listener node for allocation event. </para>
        </briefdescription>
        <detaileddescription>
<para>Sample usage: <programlisting><codeline><highlight class="normal">void<sp/>on_heap_alloc(uintptr_t<sp/>heap_id,<sp/>void<sp/>*mem,<sp/>size_t<sp/>bytes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LOG_INF(&quot;Memory<sp/>allocated<sp/>at<sp/>%p,<sp/>size<sp/>%ld&quot;,<sp/>heap_id,<sp/>mem,<sp/>bytes);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">HEAP_LISTENER_ALLOC_DEFINE(my_listener,<sp/>HEAP_ID_LIBC,<sp/>on_heap_alloc);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the heap event listener object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the heap to be listened </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_alloc_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be called for allocation event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="207" column="9" bodyfile="include/sys/heap_listener.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1ga7e5822ebd4c08235b01cf99cd6fe10e8" prot="public" static="no">
        <name>HEAP_LISTENER_FREE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>_heap_id</defname></param>
        <param><defname>_free_cb</defname></param>
        <initializer>	struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> name = { \
		.heap_id = _heap_id, \
		.event = <ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a82e2137ada931f068fa36d40245f5a80" kindref="member">HEAP_FREE</ref>, \
		{ \
			.free_cb = _free_cb \
		}, \
	}</initializer>
        <briefdescription>
<para>Define heap event listener node for free event. </para>
        </briefdescription>
        <detaileddescription>
<para>Sample usage: <programlisting><codeline><highlight class="normal">void<sp/>on_heap_free(uintptr_t<sp/>heap_id,<sp/>void<sp/>*mem,<sp/>size_t<sp/>bytes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LOG_INF(&quot;Memory<sp/>freed<sp/>at<sp/>%p,<sp/>size<sp/>%ld&quot;,<sp/>heap_id,<sp/>mem,<sp/>bytes);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">HEAP_LISTENER_FREE_DEFINE(my_listener,<sp/>HEAP_ID_LIBC,<sp/>on_heap_free);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the heap event listener object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the heap to be listened </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_free_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be called for free event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="233" column="9" bodyfile="include/sys/heap_listener.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__listener__apis_1gaa4fa9685749e050ca06e7cdc99b7c970" prot="public" static="no">
        <name>HEAP_LISTENER_RESIZE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>_heap_id</defname></param>
        <param><defname>_resize_cb</defname></param>
        <initializer>	struct <ref refid="structheap__listener" kindref="compound">heap_listener</ref> name = { \
		.heap_id = _heap_id, \
		.event = <ref refid="group__heap__listener__apis_1gga9679320e1c32dcbad726789946565510a198aa2475e58078a46cf79ffb0914408" kindref="member">HEAP_RESIZE</ref>, \
		{ \
			.resize_cb = _resize_cb \
		}, \
	}</initializer>
        <briefdescription>
<para>Define heap event listener node for resize event. </para>
        </briefdescription>
        <detaileddescription>
<para>Sample usage: <programlisting><codeline><highlight class="normal">void<sp/>on_heap_resized(uintptr_t<sp/>heap_id,<sp/>void<sp/>*old_heap_end,<sp/>void<sp/>*new_heap_end)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LOG_INF(&quot;Libc<sp/>heap<sp/>end<sp/>moved<sp/>from<sp/>%p<sp/>to<sp/>%p&quot;,<sp/>old_heap_end,<sp/>new_heap_end);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">HEAP_LISTENER_RESIZE_DEFINE(my_listener,<sp/>HEAP_ID_LIBC,<sp/>on_heap_resized);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the heap event listener object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_heap_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the heap to be listened </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_resize_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be called when the listened heap is resized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/heap_listener.h" line="259" column="9" bodyfile="include/sys/heap_listener.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
