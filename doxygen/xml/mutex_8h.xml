<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mutex_8h" kind="file" language="C++">
    <compoundname>mutex.h</compoundname>
    <includes refid="atomic_8h" local="no">sys/atomic.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">sys_clock.h</includes>
    <includes local="no">syscalls/mutex.h</includes>
    <includedby refid="lwm2m_8h" local="no">include/net/lwm2m.h</includedby>
    <includedby refid="mqtt_8h" local="no">include/net/mqtt.h</includedby>
    <includedby refid="mem__protect_2futex_2src_2main_8c" local="no">tests/kernel/mem_protect/futex/src/main.c</includedby>
    <includedby refid="mutex_2sys__mutex_2src_2main_8c" local="no">tests/kernel/mutex/sys_mutex/src/main.c</includedby>
    <includedby refid="thread__12_8c" local="no">tests/kernel/mutex/sys_mutex/src/thread_12.c</includedby>
    <includedby refid="thread__competition_8c" local="no">tests/kernel/mutex/sys_mutex/src/thread_competition.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>sys/atomic.h</label>
        <link refid="atomic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/atomic_builtin.h</label>
        <link refid="atomic__builtin_8h"/>
      </node>
      <node id="1">
        <label>include/sys/mutex.h</label>
        <link refid="mutex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="8">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="6">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="7">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="12">
        <label>sys_clock.h</label>
      </node>
      <node id="13">
        <label>syscalls/mutex.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/net/lwm2m.h</label>
        <link refid="lwm2m_8h"/>
      </node>
      <node id="3">
        <label>include/net/mqtt.h</label>
        <link refid="mqtt_8h"/>
      </node>
      <node id="1">
        <label>include/sys/mutex.h</label>
        <link refid="mutex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tests/kernel/mem_protect/futex/src/main.c</label>
        <link refid="mem__protect_2futex_2src_2main_8c"/>
      </node>
      <node id="5">
        <label>tests/kernel/mutex/sys_mutex/src/main.c</label>
        <link refid="mutex_2sys__mutex_2src_2main_8c"/>
      </node>
      <node id="6">
        <label>tests/kernel/mutex/sys_mutex/src/thread_12.c</label>
        <link refid="thread__12_8c"/>
      </node>
      <node id="7">
        <label>tests/kernel/mutex/sys_mutex/src/thread_competition.c</label>
        <link refid="thread__competition_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsys__mutex" prot="public">sys_mutex</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__user__mutex__apis_1ga486bd6a11d0b0d312cdf8a6a8f66c1a3" prot="public" static="no">
        <name>SYS_MUTEX_DEFINE</name>
        <param><defname>name</defname></param>
        <initializer>	struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> name</initializer>
        <briefdescription>
<para>Statically define and initialize a <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The mutex can be accessed outside the module where it is defined using:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>struct<sp/>sys_mutex<sp/>&lt;name&gt;;<sp/></highlight></codeline>
</programlisting></para>
<para>Route this to memory domains using <ref refid="mem__protect_2userspace_2src_2main_8c_1a9067a0a2728b358c511417b2de42c731" kindref="member">K_APP_DMEM()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mutex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="53" column="9" bodyfile="include/sys/mutex.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__user__mutex__apis_1ga5456b75934cb26abc974a45ae82d717b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_mutex_init</definition>
        <argsstring>(struct sys_mutex *mutex)</argsstring>
        <name>sys_mutex_init</name>
        <param>
          <type>struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Initialize a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes a mutex object, prior to its first use.</para>
<para>Upon completion, the mutex is available and does not have an owner.</para>
<para>This routine is only necessary to call when userspace is disabled and the mutex was not created with <ref refid="group__user__mutex__apis_1ga486bd6a11d0b0d312cdf8a6a8f66c1a3" kindref="member">SYS_MUTEX_DEFINE()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="68" column="20" bodyfile="include/sys/mutex.h" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__user__mutex__apis_1ga6887005f8223d4f36de5ae5c02ba4b17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sys_mutex_lock</definition>
        <argsstring>(struct sys_mutex *mutex, k_timeout_t timeout)</argsstring>
        <name>sys_mutex_lock</name>
        <param>
          <type>struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Lock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine locks <emphasis>mutex</emphasis>. If the mutex is locked by another thread, the calling thread waits until the mutex becomes available or until a timeout occurs.</para>
<para>A thread is permitted to lock a mutex it has already locked. The operation completes immediately and the lock count is increased by 1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex, which may reside in user memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period to lock the mutex, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned without waiting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller has no access to provided mutex address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Provided mutex not recognized by the kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="102" column="19" bodyfile="include/sys/mutex.h" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__user__mutex__apis_1ga7d4babcd161600dab5f1842c58be2a1f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sys_mutex_unlock</definition>
        <argsstring>(struct sys_mutex *mutex)</argsstring>
        <name>sys_mutex_unlock</name>
        <param>
          <type>struct <ref refid="structsys__mutex" kindref="compound">sys_mutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlock a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine unlocks <emphasis>mutex</emphasis>. The mutex must already be locked by the calling thread.</para>
<para>The mutex cannot be claimed by another thread until it has been unlocked by the calling thread as many times as it was previously locked by that thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the mutex, which may reside in user memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex unlocked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller has no access to provided mutex address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Provided mutex not recognized by the kernel or mutex wasn&apos;t locked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPERM</parametername>
</parameternamelist>
<parameterdescription>
<para>Caller does not own the mutex </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mutex.h" line="125" column="19" bodyfile="include/sys/mutex.h" bodystart="125" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_MUTEX_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_MUTEX_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>sys_mutex<sp/>behaves<sp/>almost<sp/>exactly<sp/>like<sp/>k_mutex,<sp/>with<sp/>the<sp/>added<sp/>advantage</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>that<sp/>a<sp/>sys_mutex<sp/>instance<sp/>can<sp/>reside<sp/>in<sp/>user<sp/>memory.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Further<sp/>enhancements<sp/>will<sp/>support<sp/>locking/unlocking<sp/>uncontended<sp/>sys_mutexes</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>with<sp/>simple<sp/>atomic<sp/>ops<sp/>instead<sp/>of<sp/>syscalls,<sp/>similar<sp/>to<sp/>Linux&apos;s</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>FUTEX_LOCK_PI<sp/>and<sp/>FUTEX_UNLOCK_PI</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="atomic_8h" kindref="compound">sys/atomic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys_clock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structsys__mutex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Currently<sp/>unused,<sp/>but<sp/>will<sp/>be<sp/>used<sp/>to<sp/>store<sp/>state<sp/>for<sp/>fast<sp/>mutexes</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>can<sp/>be<sp/>locked/unlocked<sp/>with<sp/>atomic<sp/>ops<sp/>if<sp/>there<sp/>is<sp/>no</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>contention</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structsys__mutex_1adbb6c644b680b81a11ab183f97102de4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="atomic_8h_1a124f07c3a788e53c3a40e4e1c06d8af8" kindref="member">atomic_t</ref><sp/><ref refid="structsys__mutex_1adbb6c644b680b81a11ab183f97102de4" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="group__user__mutex__apis_1ga486bd6a11d0b0d312cdf8a6a8f66c1a3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_MUTEX_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>sys_mutex<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="group__user__mutex__apis_1ga5456b75934cb26abc974a45ae82d717b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__user__mutex__apis_1ga5456b75934cb26abc974a45ae82d717b" kindref="member">sys_mutex_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>do,<sp/>kernel-side<sp/>data<sp/>structures<sp/>are<sp/>initialized<sp/>at</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>boot</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_sys_mutex_kernel_lock(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_sys_mutex_kernel_unlock(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="group__user__mutex__apis_1ga6887005f8223d4f36de5ae5c02ba4b17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__mutex__apis_1ga6887005f8223d4f36de5ae5c02ba4b17" kindref="member">sys_mutex_lock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>now,<sp/>make<sp/>the<sp/>syscall<sp/>unconditionally<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_sys_mutex_kernel_lock(<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>,<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="group__user__mutex__apis_1ga7d4babcd161600dab5f1842c58be2a1f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__mutex__apis_1ga7d4babcd161600dab5f1842c58be2a1f" kindref="member">sys_mutex_unlock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>now,<sp/>make<sp/>the<sp/>syscall<sp/>unconditionally<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z_sys_mutex_kernel_unlock(<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/mutex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="kernel__structs_8h" kindref="compound">kernel_structs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mutex" kindref="compound">k_mutex</ref><sp/>kernel_mutex;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_MUTEX_DEFINE(name)<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>sys_mutex<sp/>name<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.kernel_mutex<sp/>=<sp/>Z_MUTEX_INITIALIZER(name.kernel_mutex)<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__user__mutex__apis_1ga5456b75934cb26abc974a45ae82d717b" kindref="member">sys_mutex_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mutex__apis_1ga56b64952fb8b78b00268a21c28b41480" kindref="member">k_mutex_init</ref>(&amp;<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>-&gt;kernel_mutex);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__mutex__apis_1ga6887005f8223d4f36de5ae5c02ba4b17" kindref="member">sys_mutex_lock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__mutex__apis_1ga850549358645249c285669baa49c33b0" kindref="member">k_mutex_lock</ref>(&amp;<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>-&gt;kernel_mutex,<sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__user__mutex__apis_1ga7d4babcd161600dab5f1842c58be2a1f" kindref="member">sys_mutex_unlock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsys__mutex" kindref="compound">sys_mutex</ref><sp/>*<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__mutex__apis_1ga360f4c0e7258b0d7030cdb1f452b2c31" kindref="member">k_mutex_unlock</ref>(&amp;<ref refid="kobject_8c_1a43c9c7088b4ad31d8e2f02cbaa428c93" kindref="member">mutex</ref>-&gt;kernel_mutex);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_USERSPACE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_MUTEX_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/mutex.h"/>
  </compounddef>
</doxygen>
