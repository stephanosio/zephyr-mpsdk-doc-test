<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="serial_8h" kind="file" language="C++">
    <compoundname>serial.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/mgmt/mcumgr/serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmcumgr__serial__rx__ctxt" prot="public">mcumgr_serial_rx_ctxt</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="serial_8h_1a67c8df024da7e6ff3ceaa06fc0b9b168" prot="public" static="no">
        <name>MCUMGR_SERIAL_HDR_PKT</name>
        <initializer>0x0609</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="69" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="serial_8h_1a133a20780bbcd019b00c57d9e6da2884" prot="public" static="no">
        <name>MCUMGR_SERIAL_HDR_FRAG</name>
        <initializer>0x0414</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="70" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="serial_8h_1a33ba8e4d44edccce44101888d69eea18" prot="public" static="no">
        <name>MCUMGR_SERIAL_MAX_FRAME</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="71" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="serial_8h_1aa54b69e1d1440f957e0a5f7946487871" prot="public" static="no">
        <name>MCUMGR_SERIAL_HDR_PKT_1</name>
        <initializer>(<ref refid="serial_8h_1a67c8df024da7e6ff3ceaa06fc0b9b168" kindref="member">MCUMGR_SERIAL_HDR_PKT</ref> &gt;&gt; 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="73" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="serial_8h_1a09386427eb67c2e07535b79eb8ca9fbc" prot="public" static="no">
        <name>MCUMGR_SERIAL_HDR_PKT_2</name>
        <initializer>(<ref refid="serial_8h_1a67c8df024da7e6ff3ceaa06fc0b9b168" kindref="member">MCUMGR_SERIAL_HDR_PKT</ref> &amp; 0xff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="74" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="serial_8h_1a1edd532f85b7037096b2033b70ea5985" prot="public" static="no">
        <name>MCUMGR_SERIAL_HDR_FRAG_1</name>
        <initializer>(<ref refid="serial_8h_1a133a20780bbcd019b00c57d9e6da2884" kindref="member">MCUMGR_SERIAL_HDR_FRAG</ref> &gt;&gt; 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="75" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="serial_8h_1a50ca5a231808ab473ea1d2fe89fd53f2" prot="public" static="no">
        <name>MCUMGR_SERIAL_HDR_FRAG_2</name>
        <initializer>(<ref refid="serial_8h_1a133a20780bbcd019b00c57d9e6da2884" kindref="member">MCUMGR_SERIAL_HDR_FRAG</ref> &amp; 0xff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="76" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="serial_8h_1a4a3696a35de3cfb9b3f307fae8acf5dd" prot="public" static="no">
        <type>int(*</type>
        <definition>mcumgr_serial_tx_cb</definition>
        <argsstring>)(const void *data, int len, void *arg)</argsstring>
        <name>mcumgr_serial_tx_cb</name>
        <briefdescription>
<para>Transmits a chunk of raw response data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="100" column="9" bodyfile="include/mgmt/mcumgr/serial.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="serial_8h_1aa510a98df8b01ccf5bae8eacc9c59078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * mcumgr_serial_process_frag</definition>
        <argsstring>(struct mcumgr_serial_rx_ctxt *rx_ctxt, const uint8_t *frag, int frag_len)</argsstring>
        <name>mcumgr_serial_process_frag</name>
        <param>
          <type>struct <ref refid="structmcumgr__serial__rx__ctxt" kindref="compound">mcumgr_serial_rx_ctxt</ref> *</type>
          <declname>rx_ctxt</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>frag</declname>
        </param>
        <param>
          <type>int</type>
          <declname>frag_len</declname>
        </param>
        <briefdescription>
<para>Processes an mcumgr request fragment received over a serial transport. </para>
        </briefdescription>
        <detaileddescription>
<para>Processes an mcumgr request fragment received over a serial transport. If the fragment is the end of a valid mcumgr request, this function returns a <ref refid="structnet__buf" kindref="compound">net_buf</ref> containing the decoded request. It is the caller&apos;s responsibility to free the <ref refid="structnet__buf" kindref="compound">net_buf</ref> after it has been processed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rx_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>The receive context associated with the serial transport being used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag</parametername>
</parameternamelist>
<parameterdescription>
<para>The incoming fragment to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frag_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the fragment, in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structnet__buf" kindref="compound">net_buf</ref> containing the decoded request if a complete and valid request has been received. NULL if the packet is incomplete or invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="121" column="14" declfile="include/mgmt/mcumgr/serial.h" declline="121" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="serial_8h_1a38cefcc38ae2ca35ad2a1e04441c4a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mcumgr_serial_tx_pkt</definition>
        <argsstring>(const uint8_t *data, int len, mcumgr_serial_tx_cb cb, void *arg)</argsstring>
        <name>mcumgr_serial_tx_pkt</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="serial_8h_1a4a3696a35de3cfb9b3f307fae8acf5dd" kindref="member">mcumgr_serial_tx_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Encodes and transmits an mcumgr packet over serial. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The mcumgr packet data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the unencoded mcumgr packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback used to transmit raw bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional argument to pass to the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mgmt/mcumgr/serial.h" line="135" column="5" declfile="include/mgmt/mcumgr/serial.h" declline="135" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility functions used by the UART and shell mcumgr transports. </para>
    </briefdescription>
    <detaileddescription>
<para>Mcumgr packets sent over serial are fragmented into frames of 128 bytes or fewer.</para>
<para>The initial frame in a packet has the following format: offset 0: 0x06 0x09 === Begin base64 encoding === offset 2: {16-bit packet-length} offset ?: {body} offset ?: {crc16} (if final frame) === End base64 encoding === offset ?: 0x0a (newline)</para>
<para>All subsequent frames have the following format: offset 0: 0x04 0x14 === Begin base64 encoding === offset 2: {body} offset ?: {crc16} (if final frame) === End base64 encoding === offset ?: 0x0a (newline)</para>
<para>All integers are represented in big-endian. The packet fields are described below:</para>
<para><table rows="11" cols="2"><row>
<entry thead="yes"><para>Field   </para>
</entry><entry thead="yes"><para>Description    </para>
</entry></row>
<row>
<entry thead="no"><para>0x06 0x09   </para>
</entry><entry thead="no"><para>Byte pair indicating the start of a packet.    </para>
</entry></row>
<row>
<entry thead="no"><para>0x04 0x14   </para>
</entry><entry thead="no"><para>Byte pair indicating the start of a continuation frame.    </para>
</entry></row>
<row>
<entry thead="no"><para>Packet length   </para>
</entry><entry thead="no"><para>The combined total length of the <emphasis>unencoded</emphasis> body plus    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>the final CRC (2 bytes). Length is in Big-Endian format.    </para>
</entry></row>
<row>
<entry thead="no"><para>Body   </para>
</entry><entry thead="no"><para>The actual SMP data (i.e., 8-byte header and CBOR    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>key-value map).    </para>
</entry></row>
<row>
<entry thead="no"><para>CRC16   </para>
</entry><entry thead="no"><para>A CRC16 of the <emphasis>unencoded</emphasis> body of the entire packet.    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>This field is only present in the final frame of a    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>packet.    </para>
</entry></row>
<row>
<entry thead="no"><para>Newline   </para>
</entry><entry thead="no"><para>A 0x0a byte; terminates a frame.   </para>
</entry></row>
</table>
</para>
<para>The packet is fully received when {packet-length} bytes of body has been received.</para>
<sect2 id="serial_8h_1autotoc_md4">
<title>CRC details</title>
<para>The CRC16 should be calculated with the following parameters:</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Field   </para>
</entry><entry thead="yes"><para>Value    </para>
</entry></row>
<row>
<entry thead="no"><para>Polynomial   </para>
</entry><entry thead="no"><para>0x1021    </para>
</entry></row>
<row>
<entry thead="no"><para>Initial Value   </para>
</entry><entry thead="no"><para>0   </para>
</entry></row>
</table>
</para>
</sect2>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>Runtime.io<sp/>2018.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_MGMT_SERIAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_MGMT_SERIAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="serial_8h_1a67c8df024da7e6ff3ceaa06fc0b9b168" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCUMGR_SERIAL_HDR_PKT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0609</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="serial_8h_1a133a20780bbcd019b00c57d9e6da2884" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCUMGR_SERIAL_HDR_FRAG<sp/><sp/><sp/><sp/><sp/><sp/>0x0414</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="serial_8h_1a33ba8e4d44edccce44101888d69eea18" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCUMGR_SERIAL_MAX_FRAME<sp/><sp/><sp/><sp/><sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="serial_8h_1aa54b69e1d1440f957e0a5f7946487871" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCUMGR_SERIAL_HDR_PKT_1<sp/><sp/><sp/><sp/><sp/>(MCUMGR_SERIAL_HDR_PKT<sp/>&gt;&gt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="serial_8h_1a09386427eb67c2e07535b79eb8ca9fbc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCUMGR_SERIAL_HDR_PKT_2<sp/><sp/><sp/><sp/><sp/>(MCUMGR_SERIAL_HDR_PKT<sp/>&amp;<sp/>0xff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="serial_8h_1a1edd532f85b7037096b2033b70ea5985" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCUMGR_SERIAL_HDR_FRAG_1<sp/><sp/><sp/><sp/>(MCUMGR_SERIAL_HDR_FRAG<sp/>&gt;&gt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="serial_8h_1a50ca5a231808ab473ea1d2fe89fd53f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCUMGR_SERIAL_HDR_FRAG_2<sp/><sp/><sp/><sp/>(MCUMGR_SERIAL_HDR_FRAG<sp/>&amp;<sp/>0xff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="structmcumgr__serial__rx__ctxt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcumgr__serial__rx__ctxt" kindref="compound">mcumgr_serial_rx_ctxt</ref><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Contains<sp/>the<sp/>partially-<sp/>or<sp/>fully-received<sp/>mcumgr<sp/>request.<sp/><sp/>Data</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>stored<sp/>in<sp/>this<sp/>buffer<sp/>has<sp/>already<sp/>been<sp/>base64-decoded.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structmcumgr__serial__rx__ctxt_1a5fdf2dd95185a49806c1900184c7bdfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="structmcumgr__serial__rx__ctxt_1a5fdf2dd95185a49806c1900184c7bdfc" kindref="member">nb</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>full<sp/>packet,<sp/>as<sp/>read<sp/>from<sp/>header.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structmcumgr__serial__rx__ctxt_1a4ded2b7748334b0f3166f4c18cd1d6b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structmcumgr__serial__rx__ctxt_1a4ded2b7748334b0f3166f4c18cd1d6b0" kindref="member">pkt_len</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="serial_8h_1a4a3696a35de3cfb9b3f307fae8acf5dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="serial_8h_1a4a3696a35de3cfb9b3f307fae8acf5dd" kindref="member">mcumgr_serial_tx_cb</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="serial_8h_1aa510a98df8b01ccf5bae8eacc9c59078" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="serial_8h_1aa510a98df8b01ccf5bae8eacc9c59078" kindref="member">mcumgr_serial_process_frag</ref>(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmcumgr__serial__rx__ctxt" kindref="compound">mcumgr_serial_rx_ctxt</ref><sp/>*rx_ctxt,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*frag,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frag_len);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="serial_8h_1a38cefcc38ae2ca35ad2a1e04441c4a30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="serial_8h_1a38cefcc38ae2ca35ad2a1e04441c4a30" kindref="member">mcumgr_serial_tx_pkt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1ae75b7ca728fb7440ea483be8bf88bc38" kindref="member">len</ref>,<sp/><ref refid="serial_8h_1a4a3696a35de3cfb9b3f307fae8acf5dd" kindref="member">mcumgr_serial_tx_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/mgmt/mcumgr/serial.h"/>
  </compounddef>
</doxygen>
