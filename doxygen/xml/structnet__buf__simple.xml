<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structnet__buf__simple" kind="struct" language="C++" prot="public">
    <compoundname>net_buf_simple</compoundname>
    <includes refid="net_2buf_8h" local="no">buf.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
        <definition>uint8_t* net_buf_simple::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the start of data in the buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="85" column="9" bodyfile="include/net/buf.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_buf_simple::len</definition>
        <argsstring></argsstring>
        <name>len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of the data behind the data pointer.</para>
<para>To determine the max length, use <ref refid="group__net__buf_1ga7deeb4a89b90a3784e582abcb81d5126" kindref="member">net_buf_simple_max_len()</ref>, not <ref refid="structnet__buf__simple_1ae6dc4aa029a67d3911293618eb30caa6" kindref="member">size</ref>! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="92" column="10" bodyfile="include/net/buf.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnet__buf__simple_1ae6dc4aa029a67d3911293618eb30caa6" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t net_buf_simple::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Amount of data that net_buf_simple::__buf can store. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/buf.h" line="95" column="10" bodyfile="include/net/buf.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Simple network buffer representation. </para>
    </briefdescription>
    <detaileddescription>
<para>This is a simpler variant of the <ref refid="structnet__buf" kindref="compound">net_buf</ref> object (in fact <ref refid="structnet__buf" kindref="compound">net_buf</ref> uses <ref refid="structnet__buf__simple" kindref="compound">net_buf_simple</ref> internally). It doesn&apos;t provide any kind of reference counting, user data, dynamic allocation, or in general the ability to pass through kernel objects such as FIFOs.</para>
<para>The main use of this is for scenarios where the meta-data of the normal <ref refid="structnet__buf" kindref="compound">net_buf</ref> isn&apos;t needed and causes too much overhead. This could be e.g. when the buffer only needs to be allocated on the stack or when the access to and lifetime of the buffer is well controlled and constrained. </para>
    </detaileddescription>
    <location file="include/net/buf.h" line="83" column="1" bodyfile="include/net/buf.h" bodystart="83" bodyend="101"/>
    <listofallmembers>
      <member refid="structnet__buf__simple_1ad232efff435f425d30ac78f5abf2d8b1" prot="public" virt="non-virtual"><scope>net_buf_simple</scope><name>data</name></member>
      <member refid="structnet__buf__simple_1ae8707c50d70c26b53281b40eb1720cf3" prot="public" virt="non-virtual"><scope>net_buf_simple</scope><name>len</name></member>
      <member refid="structnet__buf__simple_1ae6dc4aa029a67d3911293618eb30caa6" prot="public" virt="non-virtual"><scope>net_buf_simple</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
