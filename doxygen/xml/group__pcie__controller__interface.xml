<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__pcie__controller__interface" kind="group">
    <compoundname>pcie_controller_interface</compoundname>
    <title>PCI Express Controller Interface</title>
    <innerclass refid="structpcie__ctrl__driver__api" prot="public">pcie_ctrl_driver_api</innerclass>
    <innerclass refid="structpcie__ctrl__config" prot="public">pcie_ctrl_config</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__pcie__controller__interface_1gac3d0f7e90bcc30996ce23324d2d7356a" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref>(*</type>
        <definition>typedef uint32_t(* pcie_ctrl_conf_read_t) (const struct device *dev, pcie_bdf_t bdf, unsigned int reg)</definition>
        <argsstring>)(const struct device *dev, pcie_bdf_t bdf, unsigned int reg)</argsstring>
        <name>pcie_ctrl_conf_read_t</name>
        <briefdescription>
<para>Function called to read a 32-bit word from an endpoint&apos;s configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>Read a 32-bit word from an endpoint&apos;s configuration space with the PCI Express Controller configuration space access method (I/O port, memory mapped or custom method)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration word index (not address) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the word read (0xFFFFFFFFU if nonexistent endpoint or word) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="40" column="9" bodyfile="include/drivers/pcie/controller.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pcie__controller__interface_1ga3241acc7de4af2b73cf3f47a25349109" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* pcie_ctrl_conf_write_t) (const struct device *dev, pcie_bdf_t bdf, unsigned int reg, uint32_t data)</definition>
        <argsstring>)(const struct device *dev, pcie_bdf_t bdf, unsigned int reg, uint32_t data)</argsstring>
        <name>pcie_ctrl_conf_write_t</name>
        <briefdescription>
<para>Function called to write a 32-bit word to an endpoint&apos;s configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>Write a 32-bit word to an endpoint&apos;s configuration space with the PCI Express Controller configuration space access method (I/O port, memory mapped or custom method)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration word index (not address) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="54" column="9" bodyfile="include/drivers/pcie/controller.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pcie__controller__interface_1ga62ce18e7495256c148168b773eabd37d" prot="public" static="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>typedef bool(* pcie_ctrl_region_allocate_t) (const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, size_t bar_size, uintptr_t *bar_bus_addr)</definition>
        <argsstring>)(const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, size_t bar_size, uintptr_t *bar_bus_addr)</argsstring>
        <name>pcie_ctrl_region_allocate_t</name>
        <briefdescription>
<para>Function called to allocate a memory region subset for an endpoint Base Address Register. </para>
        </briefdescription>
        <detaileddescription>
<para>When enumerating PCIe Endpoints, Type0 endpoints can require up to 6 memory zones via the Base Address Registers from I/O or Memory types.</para>
<para>This call allocates such zone in the PCI Express Controller memory regions if such region is available and space is still available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem64</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of 64bit memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the Base Address Register as returned by HW </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_bus_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>bus-centric address allocated to be written in the BAR register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if allocation was possible, False if allocation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="74" column="9" bodyfile="include/drivers/pcie/controller.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pcie__controller__interface_1gaa9d5bd27c841e36f65e65dec0b057e9a" prot="public" static="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>typedef bool(* pcie_ctrl_region_get_allocate_base_t) (const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, size_t align, uintptr_t *bar_base_addr)</definition>
        <argsstring>)(const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, size_t align, uintptr_t *bar_base_addr)</argsstring>
        <name>pcie_ctrl_region_get_allocate_base_t</name>
        <briefdescription>
<para>Function called to get the current allocation base of a memory region subset for an endpoint Base Address Register. </para>
        </briefdescription>
        <detaileddescription>
<para>When enumerating PCIe Endpoints, Type1 bridge endpoints requires a range of memory allocated by all endpoints in the bridged bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem64</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of 64bit memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>size to take in account for alignment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_base_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>bus-centric address allocation base </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if allocation was possible, False if allocation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="93" column="9" bodyfile="include/drivers/pcie/controller.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pcie__controller__interface_1gab144356b1c3ec3754aae0008634f2d2f" prot="public" static="no">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref>(*</type>
        <definition>typedef bool(* pcie_ctrl_region_translate_t) (const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, uintptr_t bar_bus_addr, uintptr_t *bar_addr)</definition>
        <argsstring>)(const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, uintptr_t bar_bus_addr, uintptr_t *bar_addr)</argsstring>
        <name>pcie_ctrl_region_translate_t</name>
        <briefdescription>
<para>Function called to translate an endpoint Base Address Register bus-centric address into Physical address. </para>
        </briefdescription>
        <detaileddescription>
<para>When enumerating PCIe Endpoints, Type0 endpoints can require up to 6 memory zones via the Base Address Registers from I/O or Memory types.</para>
<para>The bus-centric address set in this BAR register is not necessarely accessible from the CPU, thus must be translated by using the PCI Express Controller memory regions translation ranges to permit mapping from the CPU.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem64</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of 64bit memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_bus_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>bus-centric address written in the BAR register </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU-centric address translated from the bus-centric address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if translation was possible, False if translation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="116" column="9" bodyfile="include/drivers/pcie/controller.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pcie__controller__interface_1gaa16b59c39f273a654b72d9e209f3ba2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t pcie_generic_ctrl_conf_read</definition>
        <argsstring>(mm_reg_t cfg_addr, pcie_bdf_t bdf, unsigned int reg)</argsstring>
        <name>pcie_generic_ctrl_conf_read</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>cfg_addr</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Read a 32-bit word from a Memory-Mapped endpoint&apos;s configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>Read a 32-bit word from an endpoint&apos;s configuration space from a Memory-Mapped configuration space access method, known as PCI Control Access Method (CAM) or PCIe Extended Control Access Method (ECAM).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical address of Memory-Mapped configuration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration word index (not address) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the word read (0xFFFFFFFFU if nonexistent endpoint or word) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="132" column="10" declfile="include/drivers/pcie/controller.h" declline="132" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__pcie__controller__interface_1ga709ecedbd0585b4eb17fc2f5923a8f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pcie_generic_ctrl_conf_write</definition>
        <argsstring>(mm_reg_t cfg_addr, pcie_bdf_t bdf, unsigned int reg, uint32_t data)</argsstring>
        <name>pcie_generic_ctrl_conf_write</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref></type>
          <declname>cfg_addr</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write a 32-bit word to a Memory-Mapped endpoint&apos;s configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>Write a 32-bit word to an endpoint&apos;s configuration space from a Memory-Mapped configuration space access method, known as PCI Control Access Method (CAM) or PCIe Extended Control Access Method (ECAM).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cfg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical address of Memory-Mapped configuration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration word index (not address) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="147" column="6" declfile="include/drivers/pcie/controller.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pcie__controller__interface_1ga75910ea4255a740b57e35a596a90b7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pcie_generic_ctrl_enumerate</definition>
        <argsstring>(const struct device *dev, pcie_bdf_t bdf_start)</argsstring>
        <name>pcie_generic_ctrl_enumerate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf_start</declname>
        </param>
        <briefdescription>
<para>Start PCIe Endpoints enumeration. </para>
        </briefdescription>
        <detaileddescription>
<para>Start a PCIe Endpoints enumeration from a Bus number. When on non-x86 architecture or when firmware didn&apos;t setup the PCIe Bus hierarchy, the PCIe bus complex must be enumerated to setup the Endpoints Base Address Registers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf_start</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) start endpoint (only bus &amp; dev are used to start enumeration) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="160" column="6" declfile="include/drivers/pcie/controller.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pcie__controller__interface_1ga1d978b8075191d6e571349684c731a43" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t pcie_ctrl_conf_read</definition>
        <argsstring>(const struct device *dev, pcie_bdf_t bdf, unsigned int reg)</argsstring>
        <name>pcie_ctrl_conf_read</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Read a 32-bit word from an endpoint&apos;s configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>Read a 32-bit word from an endpoint&apos;s configuration space with the PCI Express Controller configuration space access method (I/O port, memory mapped or custom method)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration word index (not address) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the word read (0xFFFFFFFFU if nonexistent endpoint or word) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="184" column="24" bodyfile="include/drivers/pcie/controller.h" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group__pcie__controller__interface_1ga5cfe01762e5af8dc0cc5fbd550ff7e74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pcie_ctrl_conf_write</definition>
        <argsstring>(const struct device *dev, pcie_bdf_t bdf, unsigned int reg, uint32_t data)</argsstring>
        <name>pcie_ctrl_conf_write</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write a 32-bit word to an endpoint&apos;s configuration space. </para>
        </briefdescription>
        <detaileddescription>
<para>Write a 32-bit word to an endpoint&apos;s configuration space with the PCI Express Controller configuration space access method (I/O port, memory mapped or custom method)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration word index (not address) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="204" column="20" bodyfile="include/drivers/pcie/controller.h" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="group__pcie__controller__interface_1ga1de030e2e8b07509d75de5a348297f42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool pcie_ctrl_region_allocate</definition>
        <argsstring>(const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, size_t bar_size, uintptr_t *bar_bus_addr)</argsstring>
        <name>pcie_ctrl_region_allocate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>mem64</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bar_size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>bar_bus_addr</declname>
        </param>
        <briefdescription>
<para>Allocate a memory region subset for an endpoint Base Address Register. </para>
        </briefdescription>
        <detaileddescription>
<para>When enumerating PCIe Endpoints, Type0 endpoints can require up to 6 memory zones via the Base Address Registers from I/O or Memory types.</para>
<para>This call allocates such zone in the PCI Express Controller memory regions if such region is available and space is still available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem64</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of 64bit memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the Base Address Register as returned by HW </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_bus_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>bus-centric address allocated to be written in the BAR register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if allocation was possible, False if allocation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="230" column="20" bodyfile="include/drivers/pcie/controller.h" bodystart="230" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="group__pcie__controller__interface_1gae7c109ca138adfd906fef5b6f3dca385" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool pcie_ctrl_region_get_allocate_base</definition>
        <argsstring>(const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, size_t align, uintptr_t *bar_base_addr)</argsstring>
        <name>pcie_ctrl_region_get_allocate_base</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>mem64</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>bar_base_addr</declname>
        </param>
        <briefdescription>
<para>Function called to get the current allocation base of a memory region subset for an endpoint Base Address Register. </para>
        </briefdescription>
        <detaileddescription>
<para>When enumerating PCIe Endpoints, Type1 bridge endpoints requires a range of memory allocated by all endpoints in the bridged bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem64</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of 64bit memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>size to take in account for alignment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_base_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>bus-centric address allocation base </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if allocation was possible, False if allocation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="255" column="20" bodyfile="include/drivers/pcie/controller.h" bodystart="255" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__pcie__controller__interface_1gae6fa104ea2cc85912ebb1cfe0a1a3ddf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool pcie_ctrl_region_translate</definition>
        <argsstring>(const struct device *dev, pcie_bdf_t bdf, bool mem, bool mem64, uintptr_t bar_bus_addr, uintptr_t *bar_addr)</argsstring>
        <name>pcie_ctrl_region_translate</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="drivers_2pcie_2pcie_8h_1a84bb3c734945ebaee0e9801495eebe90" kindref="member">pcie_bdf_t</ref></type>
          <declname>bdf</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>mem</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>mem64</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>bar_bus_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>bar_addr</declname>
        </param>
        <briefdescription>
<para>Translate an endpoint Base Address Register bus-centric address into Physical address. </para>
        </briefdescription>
        <detaileddescription>
<para>When enumerating PCIe Endpoints, Type0 endpoints can require up to 6 memory zones via the Base Address Registers from I/O or Memory types.</para>
<para>The bus-centric address set in this BAR register is not necessarely accessible from the CPU, thus must be translated by using the PCI Express Controller memory regions translation ranges to permit mapping from the CPU.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI Express Controller device pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bdf</parametername>
</parameternamelist>
<parameterdescription>
<para>PCI(e) endpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem64</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the BAR is of 64bit memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_bus_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>bus-centric address written in the BAR register </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bar_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU-centric address translated from the bus-centric address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if translation was possible, False if translation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="283" column="20" bodyfile="include/drivers/pcie/controller.h" bodystart="283" bodyend="296"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__pcie__controller__interface_1ga91525130b94b07187633abd1e017aa61" prot="public" static="no">
        <name>PCIE_RANGE_FORMAT</name>
        <param><defname>node_id</defname></param>
        <param><defname>idx</defname></param>
        <initializer>{											\
	.<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref> = <ref refid="group__devicetree-ranges-prop_1ga32a9c873d3ec1f5d7922c38eaafd1af8" kindref="member">DT_RANGES_CHILD_BUS_FLAGS_BY_IDX</ref>(node_id, idx),			\
	.pcie_bus_addr = <ref refid="group__devicetree-ranges-prop_1ga449940559213086b15151ec00e46607d" kindref="member">DT_RANGES_CHILD_BUS_ADDRESS_BY_IDX</ref>(node_id, idx),		\
	.host_map_addr = <ref refid="group__devicetree-ranges-prop_1ga48d493ad616438ace2396c0312a242ba" kindref="member">DT_RANGES_PARENT_BUS_ADDRESS_BY_IDX</ref>(node_id, idx),		\
	.map_length = <ref refid="group__devicetree-ranges-prop_1ga52677a5bc86f9132a09b6bc37153afb2" kindref="member">DT_RANGES_LENGTH_BY_IDX</ref>(node_id, idx),				\
},</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/pcie/controller.h" line="323" column="9" bodyfile="include/drivers/pcie/controller.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PCI Express Controller Interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
