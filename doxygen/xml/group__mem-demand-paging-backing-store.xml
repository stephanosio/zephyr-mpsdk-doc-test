<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__mem-demand-paging-backing-store" kind="group">
    <compoundname>mem-demand-paging-backing-store</compoundname>
    <title>Backing Store APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mem-demand-paging-backing-store_1gaadedcda81ca04a2044332a8f6787967a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_mem_paging_backing_store_location_get</definition>
        <argsstring>(struct z_page_frame *pf, uintptr_t *location, bool page_fault)</argsstring>
        <name>k_mem_paging_backing_store_location_get</name>
        <param>
          <type>struct z_page_frame *</type>
          <declname>pf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref> *</type>
          <declname>location</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>page_fault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reserve or fetch a storage location for a data page loaded into a page frame</para>
<para>The returned location token must be unique to the mapped virtual address. This location will be used in the backing store to page out data page contents for later retrieval. The location value must be page-aligned.</para>
<para>This function may be called multiple times on the same data page. If its page frame has its Z_PAGE_FRAME_BACKED bit set, it is expected to return the previous backing store location for the data page containing a cached clean copy. This clean copy may be updated on page-out, or used to discard clean pages without needing to write out their contents.</para>
<para>If the backing store is full, some other backing store location which caches a loaded data page may be selected, in which case its associated page frame will have the Z_PAGE_FRAME_BACKED bit cleared (as it is no longer cached).</para>
<para>pf-&gt;addr will indicate the virtual address the page is currently mapped to. Large, sparse backing stores which can contain the entire address space may simply generate location tokens purely as a function of pf-&gt;addr with no other management necessary.</para>
<para>This function distinguishes whether it was called on behalf of a page fault. A free backing store location must always be reserved in order for page faults to succeed. If the page_fault parameter is not set, this function should return -ENOMEM even if one location is available.</para>
<para>This function is invoked with interrupts locked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pf</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address to obtain a storage location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">location</parametername>
</parameternamelist>
<parameterdescription>
<para>storage location token </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page_fault</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this request was for a page fault </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 Success </para>
</simplesect>
<simplesect kind="return"><para>-ENOMEM Backing store is full </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="582" column="5" declfile="include/sys/mem_manage.h" declline="582" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging-backing-store_1ga6ad421ad5671d9df3d96e03361f672e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_backing_store_location_free</definition>
        <argsstring>(uintptr_t location)</argsstring>
        <name>k_mem_paging_backing_store_location_free</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a backing store location</para>
<para>Any stored data may be discarded, and the location token associated with this address may be re-used for some other data page.</para>
<para>This function is invoked with interrupts locked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Location token to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="596" column="6" declfile="include/sys/mem_manage.h" declline="596" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging-backing-store_1ga51f663e0a8c31367082e78097359af6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_backing_store_page_out</definition>
        <argsstring>(uintptr_t location)</argsstring>
        <name>k_mem_paging_backing_store_page_out</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a data page from Z_SCRATCH_PAGE to the specified location</para>
<para>Immediately before this is called, Z_SCRATCH_PAGE will be mapped read-write to the intended source page frame for the calling context.</para>
<para>Calls to this and <ref refid="group__mem-demand-paging-backing-store_1ga9becb4908cc7840ece93a2360692962d" kindref="member">k_mem_paging_backing_store_page_in()</ref> will always be serialized, but interrupts may be enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Location token for the data page, for later retrieval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="609" column="6" declfile="include/sys/mem_manage.h" declline="609" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging-backing-store_1ga9becb4908cc7840ece93a2360692962d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_backing_store_page_in</definition>
        <argsstring>(uintptr_t location)</argsstring>
        <name>k_mem_paging_backing_store_page_in</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a data page from the provided location to Z_SCRATCH_PAGE.</para>
<para>Immediately before this is called, Z_SCRATCH_PAGE will be mapped read-write to the intended destination page frame for the calling context.</para>
<para>Calls to this and <ref refid="group__mem-demand-paging-backing-store_1ga51f663e0a8c31367082e78097359af6d" kindref="member">k_mem_paging_backing_store_page_out()</ref> will always be serialized, but interrupts may be enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Location token for the data page </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="622" column="6" declfile="include/sys/mem_manage.h" declline="622" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging-backing-store_1ga0902bc03fecfe8c7b51eb1f3efe587b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_backing_store_page_finalize</definition>
        <argsstring>(struct z_page_frame *pf, uintptr_t location)</argsstring>
        <name>k_mem_paging_backing_store_page_finalize</name>
        <param>
          <type>struct z_page_frame *</type>
          <declname>pf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update internal accounting after a page-in</para>
<para>This is invoked after <ref refid="group__mem-demand-paging-backing-store_1ga9becb4908cc7840ece93a2360692962d" kindref="member">k_mem_paging_backing_store_page_in()</ref> and interrupts have been* re-locked, making it safe to access the z_page_frame data. The location value will be the same passed to <ref refid="group__mem-demand-paging-backing-store_1ga9becb4908cc7840ece93a2360692962d" kindref="member">k_mem_paging_backing_store_page_in()</ref>.</para>
<para>The primary use-case for this is to update custom fields for the backing store in the page frame, to reflect where the data should be evicted to if it is paged out again. This may be a no-op in some implementations.</para>
<para>If the backing store caches paged-in data pages, this is the appropriate time to set the Z_PAGE_FRAME_BACKED bit. The kernel only skips paging out clean data pages if they are noted as clean in the page tables and the Z_PAGE_FRAME_BACKED bit is set in their associated page frame.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pf</parametername>
</parameternamelist>
<parameterdescription>
<para>Page frame that was loaded in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of where the loaded data page was retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="644" column="6" declfile="include/sys/mem_manage.h" declline="644" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mem-demand-paging-backing-store_1ga7ff441f23619b2678bfb72559d5bd592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_mem_paging_backing_store_init</definition>
        <argsstring>(void)</argsstring>
        <name>k_mem_paging_backing_store_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Backing store initialization function.</para>
<para>The implementation may expect to receive page in/out calls as soon as this returns, but not before that. Called at POST_KERNEL.</para>
<para>This function is expected to do two things:<itemizedlist>
<listitem><para>Initialize any internal data structures and accounting for the backing store.</para>
</listitem><listitem><para>If the backing store already contains all or some loaded kernel data pages at boot time, Z_PAGE_FRAME_BACKED should be appropriately set for their associated page frames, and any internal accounting set up appropriately. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/mem_manage.h" line="660" column="6" declfile="include/sys/mem_manage.h" declline="660" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Backing store APIs </para>
    </detaileddescription>
  </compounddef>
</doxygen>
