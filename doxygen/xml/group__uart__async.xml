<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__uart__async" kind="group">
    <compoundname>uart_async</compoundname>
    <title>Async UART API</title>
    <innerclass refid="structuart__event__tx" prot="public">uart_event_tx</innerclass>
    <innerclass refid="structuart__event__rx" prot="public">uart_event_rx</innerclass>
    <innerclass refid="structuart__event__rx__buf" prot="public">uart_event_rx_buf</innerclass>
    <innerclass refid="structuart__event__rx__stop" prot="public">uart_event_rx_stop</innerclass>
    <innerclass refid="structuart__event" prot="public">uart_event</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__uart__async_1gaf0c9513cbafa36d86b4c83f2b6a03dcd" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_event_type</name>
        <enumvalue id="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda4b5cdf863d8b6e5cd7b58f611808a6e4" prot="public">
          <name>UART_TX_DONE</name>
          <briefdescription>
<para>Whole TX buffer was transmitted. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0abcf565ba1011815285bb3845f8d5a1" prot="public">
          <name>UART_TX_ABORTED</name>
          <briefdescription>
<para>Transmitting aborted due to timeout or uart_tx_abort call. </para>
          </briefdescription>
          <detaileddescription>
<para>When flow control is enabled, there is a possibility that TX transfer won&apos;t finish in the allotted time. Some data may have been transferred, information about it can be found in event data. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" prot="public">
          <name>UART_RX_RDY</name>
          <briefdescription>
<para>Received data is ready for processing. </para>
          </briefdescription>
          <detaileddescription>
<para>This event is generated in the following cases:<itemizedlist>
<listitem><para>When RX timeout occurred, and data was stored in provided buffer. This can happen multiple times in the same buffer.</para>
</listitem><listitem><para>When provided buffer is full.</para>
</listitem><listitem><para>After <ref refid="group__uart__async_1gafd4753bee51b230091a3c6ddb26ea734" kindref="member">uart_rx_disable()</ref>.</para>
</listitem><listitem><para>After stopping due to external event (<ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda05b81ddf74d208aeabace6ac90ae52dd" kindref="member">uart_event_type::UART_RX_STOPPED</ref>). </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0d250f372702526f1bce6d4dfe166abe" prot="public">
          <name>UART_RX_BUF_REQUEST</name>
          <briefdescription>
<para>Driver requests next buffer for continuous reception. </para>
          </briefdescription>
          <detaileddescription>
<para>This event is triggered when receiving has started for a new buffer, i.e. it&apos;s time to provide a next buffer for a seamless switchover to it. For continuous reliable receiving, user should provide another RX buffer in response to this event, using uart_rx_buf_rsp function</para>
<para>If uart_rx_buf_rsp is not called before current buffer is filled up, receiving will stop. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdab2d152bd84f659d4fc4060df29811b48" prot="public">
          <name>UART_RX_BUF_RELEASED</name>
          <briefdescription>
<para>Buffer is no longer used by UART driver. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdaa8ff5629c002a61bc3bdf5baa2ebc203" prot="public">
          <name>UART_RX_DISABLED</name>
          <briefdescription>
<para>RX has been disabled and can be reenabled. </para>
          </briefdescription>
          <detaileddescription>
<para>This event is generated whenever receiver has been stopped, disabled or finished its operation and can be enabled again using uart_rx_enable </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda05b81ddf74d208aeabace6ac90ae52dd" prot="public">
          <name>UART_RX_STOPPED</name>
          <briefdescription>
<para>RX has stopped due to external event. </para>
          </briefdescription>
          <detaileddescription>
<para>Reason is one of uart_rx_stop_reason. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of events passed to callback in UART_ASYNC_API. </para>
        </briefdescription>
        <detaileddescription>
<para>Receiving:<orderedlist>
<listitem><para>To start receiving, uart_rx_enable has to be called with first buffer</para>
</listitem><listitem><para>When receiving starts to current buffer, <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0d250f372702526f1bce6d4dfe166abe" kindref="member">uart_event_type::UART_RX_BUF_REQUEST</ref> will be generated, in response to that user can either:<itemizedlist>
<listitem><para>Provide second buffer using uart_rx_buf_rsp, when first buffer is filled, receiving will automatically start to second buffer.</para>
</listitem><listitem><para>Ignore the event, this way when current buffer is filled <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> event will be generated and receiving will be stopped.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>If some data was received and timeout occurred <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> event will be generated. It can happen multiples times for the same buffer. RX timeout is counted from last byte received i.e. if no data was received, there won&apos;t be any timeout event.</para>
</listitem><listitem><para>After buffer is filled <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> will be generated, immediately followed by <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdab2d152bd84f659d4fc4060df29811b48" kindref="member">uart_event_type::UART_RX_BUF_RELEASED</ref> indicating that current buffer is no longer used.</para>
</listitem><listitem><para>If there was second buffer provided, it will become current buffer and we start again at point 2. If no second buffer was specified receiving is stopped and <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdaa8ff5629c002a61bc3bdf5baa2ebc203" kindref="member">uart_event_type::UART_RX_DISABLED</ref> event is generated. After that whole process can be repeated.</para>
</listitem></orderedlist>
</para>
<para>Any time during reception <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda05b81ddf74d208aeabace6ac90ae52dd" kindref="member">uart_event_type::UART_RX_STOPPED</ref> event can occur. if there is any data received, <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> event will be generated. It will be followed by <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdab2d152bd84f659d4fc4060df29811b48" kindref="member">uart_event_type::UART_RX_BUF_RELEASED</ref> event for every buffer currently passed to driver and finally by <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdaa8ff5629c002a61bc3bdf5baa2ebc203" kindref="member">uart_event_type::UART_RX_DISABLED</ref> event.</para>
<para>Receiving can be disabled using uart_rx_disable, after calling that function, if there is any data received, <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> event will be generated. <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdab2d152bd84f659d4fc4060df29811b48" kindref="member">uart_event_type::UART_RX_BUF_RELEASED</ref> event will be generated for every buffer currently passed to driver and finally <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdaa8ff5629c002a61bc3bdf5baa2ebc203" kindref="member">uart_event_type::UART_RX_DISABLED</ref> event will occur.</para>
<para>Transmitting:<orderedlist>
<listitem><para>Transmitting starts by uart_tx function.</para>
</listitem><listitem><para>If whole buffer was transmitted <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda4b5cdf863d8b6e5cd7b58f611808a6e4" kindref="member">uart_event_type::UART_TX_DONE</ref> is generated. If timeout occurred <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0abcf565ba1011815285bb3845f8d5a1" kindref="member">uart_event_type::UART_TX_ABORTED</ref> will be generated.</para>
</listitem></orderedlist>
</para>
<para>Transmitting can be aborted using <ref refid="group__uart__async_1gaa8a26d3ea685fb98030ea03613be6280" kindref="member">uart_tx_abort</ref>, after calling that function <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0abcf565ba1011815285bb3845f8d5a1" kindref="member">uart_event_type::UART_TX_ABORTED</ref> event will be generated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="211" column="1" bodyfile="include/drivers/uart.h" bodystart="211" bodyend="264"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__uart__async_1ga7b90c86ad81b06e3e16dd466e29b1151" prot="public" static="no">
        <type>void(*</type>
        <definition>uart_callback_t</definition>
        <argsstring>)(const struct device *dev, struct uart_event *evt, void *user_data)</argsstring>
        <name>uart_callback_t</name>
        <briefdescription>
<para>Define the application callback function signature for <ref refid="group__uart__async_1gad33e627ed8729409b14e92453e53459c" kindref="member">uart_callback_set()</ref> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structuart__event" kindref="compound">uart_event</ref> instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data specified by user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="333" column="9" bodyfile="include/drivers/uart.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__uart__async_1gad33e627ed8729409b14e92453e53459c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_callback_set</definition>
        <argsstring>(const struct device *dev, uart_callback_t callback, void *user_data)</argsstring>
        <name>uart_callback_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__uart__async_1ga7b90c86ad81b06e3e16dd466e29b1151" kindref="member">uart_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Set event handler function. </para>
        </briefdescription>
        <detaileddescription>
<para>Since it is mandatory to set callback to use other asynchronous functions, it can be used to detect if the device supports asynchronous API. Remaining API does not have that detection.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to pass to event handler function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>If not supported by the device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1199" column="19" bodyfile="include/drivers/uart.h" bodystart="1199" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1gaf99f32ce2e2d9beb32a2f2e5a26320dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_tx</definition>
        <argsstring>(const struct device *dev, const uint8_t *buf, size_t len, int32_t timeout)</argsstring>
        <name>uart_tx</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Send given number of bytes from buffer through UART. </para>
        </briefdescription>
        <detaileddescription>
<para>Function returns immediately and event handler, set using <ref refid="group__uart__async_1gad33e627ed8729409b14e92453e53459c" kindref="member">uart_callback_set</ref>, is called after transfer is finished.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to transmit buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of transmit buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in microseconds. Valid only if flow control is enabled. <ref refid="time__units_8h_1ad8743aaa97d3b2650908020ffb76ef0e" kindref="member">SYS_FOREVER_US</ref> disables timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If There is already an ongoing transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1234" column="6" declfile="include/drivers/uart.h" declline="1234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1gab0ea611cd072fa459a6f1780ce62c9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_tx_u16</definition>
        <argsstring>(const struct device *dev, const uint16_t *buf, size_t len, int32_t timeout)</argsstring>
        <name>uart_tx_u16</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Send given number of datum from buffer through UART. </para>
        </briefdescription>
        <detaileddescription>
<para>Function returns immediately and event handler, set using <ref refid="group__uart__async_1gad33e627ed8729409b14e92453e53459c" kindref="member">uart_callback_set</ref>, is called after transfer is finished.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to wide data transmit buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of wide data transmit buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds. Valid only if flow control is enabled. <ref refid="time__units_8h_1a9f9c4c41f62c7578a30209475201efed" kindref="member">SYS_FOREVER_MS</ref> disables timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>If there is already an ongoing transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1269" column="6" declfile="include/drivers/uart.h" declline="1269" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1gaa8a26d3ea685fb98030ea03613be6280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_tx_abort</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_tx_abort</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Abort current TX transmission. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda4b5cdf863d8b6e5cd7b58f611808a6e4" kindref="member">uart_event_type::UART_TX_DONE</ref> event will be generated with amount of data sent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no active transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1300" column="6" declfile="include/drivers/uart.h" declline="1300" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1ga902e18c2a727ed2988e1b6caa6a444b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_rx_enable</definition>
        <argsstring>(const struct device *dev, uint8_t *buf, size_t len, int32_t timeout)</argsstring>
        <name>uart_rx_enable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Start receiving data through UART. </para>
        </briefdescription>
        <detaileddescription>
<para>Function sets given buffer as first buffer for receiving and returns immediately. After that event handler, set using <ref refid="group__uart__async_1gad33e627ed8729409b14e92453e53459c" kindref="member">uart_callback_set</ref>, is called with <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> or <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0d250f372702526f1bce6d4dfe166abe" kindref="member">uart_event_type::UART_RX_BUF_REQUEST</ref> events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Inactivity period after receiving at least a byte which triggers <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> event. Given in microseconds. <ref refid="time__units_8h_1ad8743aaa97d3b2650908020ffb76ef0e" kindref="member">SYS_FOREVER_US</ref> disables timeout. See <ref refid="group__uart__async_1gaf0c9513cbafa36d86b4c83f2b6a03dcd" kindref="member">uart_event_type</ref> for details.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>RX already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1336" column="6" declfile="include/drivers/uart.h" declline="1336" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1ga12d91846133351a85fa471fa90f2a0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_rx_enable_u16</definition>
        <argsstring>(const struct device *dev, uint16_t *buf, size_t len, int32_t timeout)</argsstring>
        <name>uart_rx_enable_u16</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Start receiving wide data through UART. </para>
        </briefdescription>
        <detaileddescription>
<para>Function sets given buffer as first buffer for receiving and returns immediately. After that event handler, set using <ref refid="group__uart__async_1gad33e627ed8729409b14e92453e53459c" kindref="member">uart_callback_set</ref>, is called with <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> or <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0d250f372702526f1bce6d4dfe166abe" kindref="member">uart_event_type::UART_RX_BUF_REQUEST</ref> events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to wide data receive buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Inactivity period after receiving at least a byte which triggers <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> event. Given in milliseconds. <ref refid="time__units_8h_1a9f9c4c41f62c7578a30209475201efed" kindref="member">SYS_FOREVER_MS</ref> disables timeout. See <ref refid="group__uart__async_1gaf0c9513cbafa36d86b4c83f2b6a03dcd" kindref="member">uart_event_type</ref> for details.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>RX already in progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1376" column="6" declfile="include/drivers/uart.h" declline="1376" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1ga3970fe2818e214b0814ea8b73a816a6a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_rx_buf_rsp</definition>
        <argsstring>(const struct device *dev, uint8_t *buf, size_t len)</argsstring>
        <name>uart_rx_buf_rsp</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Provide receive buffer in response to <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0d250f372702526f1bce6d4dfe166abe" kindref="member">uart_event_type::UART_RX_BUF_REQUEST</ref> event. </para>
        </briefdescription>
        <detaileddescription>
<para>Provide pointer to RX buffer, which will be used when current buffer is filled.</para>
<para><simplesect kind="note"><para>Providing buffer that is already in usage by driver leads to undefined behavior. Buffer can be reused when it has been released by driver.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Next buffer already set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Receiver is already disabled (function called too late?). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1414" column="19" bodyfile="include/drivers/uart.h" bodystart="1414" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1ga778bcfc30be853c8d320f295b34c17c0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int uart_rx_buf_rsp_u16</definition>
        <argsstring>(const struct device *dev, uint16_t *buf, size_t len)</argsstring>
        <name>uart_rx_buf_rsp_u16</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Provide wide data receive buffer in response to <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda0d250f372702526f1bce6d4dfe166abe" kindref="member">uart_event_type::UART_RX_BUF_REQUEST</ref> event. </para>
        </briefdescription>
        <detaileddescription>
<para>Provide pointer to RX buffer, which will be used when current buffer is filled.</para>
<para><simplesect kind="note"><para>Providing buffer that is already in usage by driver leads to undefined behavior. Buffer can be reused when it has been released by driver.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to wide data receive buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Next buffer already set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EACCES</parametername>
</parameternamelist>
<parameterdescription>
<para>Receiver is already disabled (function called too late?). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1448" column="19" bodyfile="include/drivers/uart.h" bodystart="1448" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__async_1gafd4753bee51b230091a3c6ddb26ea734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uart_rx_disable</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>uart_rx_disable</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Disable RX. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdab2d152bd84f659d4fc4060df29811b48" kindref="member">uart_event_type::UART_RX_BUF_RELEASED</ref> event will be generated for every buffer scheduled, after that <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdaa8ff5629c002a61bc3bdf5baa2ebc203" kindref="member">uart_event_type::UART_RX_DISABLED</ref> event will be generated. Additionally, if there is any pending received data, the <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcda7c70c3a56f64602f3d808b46e7b047f7" kindref="member">uart_event_type::UART_RX_RDY</ref> event for that data will be generated before the <ref refid="group__uart__async_1ggaf0c9513cbafa36d86b4c83f2b6a03dcdab2d152bd84f659d4fc4060df29811b48" kindref="member">uart_event_type::UART_RX_BUF_RELEASED</ref> events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>UART device instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>If API is not enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EFAULT</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no active reception. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-errno</parametername>
</parameternamelist>
<parameterdescription>
<para>Other negative errno value in case of failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/uart.h" line="1477" column="6" declfile="include/drivers/uart.h" declline="1477" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
