<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structsmf__state" kind="struct" language="C++" prot="public">
    <compoundname>smf_state</compoundname>
    <includes refid="smf_8h" local="no">smf.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structsmf__state_1a63ea395c90fa8118cf355e55e60cee26" prot="public" static="no" mutable="no">
        <type>const <ref refid="smf_8h_1aff08e9a57d55107fd8d13ffe86295ca6" kindref="member">state_execution</ref></type>
        <definition>const state_execution smf_state::entry</definition>
        <argsstring></argsstring>
        <name>entry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional method that will be run when this state is entered </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/smf.h" line="71" column="23" bodyfile="include/smf.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsmf__state_1a94adbcd4e1a8bce8f3b30082874f1911" prot="public" static="no" mutable="no">
        <type>const <ref refid="smf_8h_1aff08e9a57d55107fd8d13ffe86295ca6" kindref="member">state_execution</ref></type>
        <definition>const state_execution smf_state::run</definition>
        <argsstring></argsstring>
        <name>run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional method that will be run repeatedly during state machine loop. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/smf.h" line="76" column="23" bodyfile="include/smf.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsmf__state_1a2df810ca49fbb9438ee78317feaaf09b" prot="public" static="no" mutable="no">
        <type>const <ref refid="smf_8h_1aff08e9a57d55107fd8d13ffe86295ca6" kindref="member">state_execution</ref></type>
        <definition>const state_execution smf_state::exit</definition>
        <argsstring></argsstring>
        <name>exit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional method that will be run when this state exists </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/smf.h" line="78" column="23" bodyfile="include/smf.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsmf__state_1ac4267b2d8279d9c2d4897d97357b8e25" prot="public" static="no" mutable="no">
        <type>const struct <ref refid="structsmf__state" kindref="compound">smf_state</ref> *</type>
        <definition>const struct smf_state* smf_state::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional parent state that contains common entry/run/exit implementation among various child states. entry: Parent function executes BEFORE child function. run: Parent function executes AFTER child function. exit: Parent function executes AFTER child function.</para>
<para>Note: When transitioning between two child states with a shared parent, that parent&apos;s exit and entry functions do not execute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/smf.h" line="89" column="22" bodyfile="include/smf.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>General state that can be used in multiple state machines. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>smf_state</label>
        <link refid="structsmf__state"/>
        <childnode refid="1" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/smf.h" line="69" column="1" bodyfile="include/smf.h" bodystart="69" bodyend="90"/>
    <listofallmembers>
      <member refid="structsmf__state_1a63ea395c90fa8118cf355e55e60cee26" prot="public" virt="non-virtual"><scope>smf_state</scope><name>entry</name></member>
      <member refid="structsmf__state_1a2df810ca49fbb9438ee78317feaaf09b" prot="public" virt="non-virtual"><scope>smf_state</scope><name>exit</name></member>
      <member refid="structsmf__state_1ac4267b2d8279d9c2d4897d97357b8e25" prot="public" virt="non-virtual"><scope>smf_state</scope><name>parent</name></member>
      <member refid="structsmf__state_1a94adbcd4e1a8bce8f3b30082874f1911" prot="public" virt="non-virtual"><scope>smf_state</scope><name>run</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
