<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__gna__interface" kind="group">
    <compoundname>gna_interface</compoundname>
    <title>GNA Interface</title>
    <innerclass refid="structgna__config" prot="public">gna_config</innerclass>
    <innerclass refid="structgna__model__header" prot="public">gna_model_header</innerclass>
    <innerclass refid="structgna__model__info" prot="public">gna_model_info</innerclass>
    <innerclass refid="structgna__inference__req" prot="public">gna_inference_req</innerclass>
    <innerclass refid="structgna__inference__stats" prot="public">gna_inference_stats</innerclass>
    <innerclass refid="structgna__inference__resp" prot="public">gna_inference_resp</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__gna__interface_1ga438bac13012dfd1b5fb40879ae4bb338" prot="public" static="no" strong="no">
        <type></type>
        <name>gna_result</name>
        <enumvalue id="group__gna__interface_1gga438bac13012dfd1b5fb40879ae4bb338a1b7f44ece1c841e1c20da678274dbfde" prot="public">
          <name>GNA_RESULT_INFERENCE_COMPLETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__gna__interface_1gga438bac13012dfd1b5fb40879ae4bb338a1cdf041d73114fa63530237a3f669d20" prot="public">
          <name>GNA_RESULT_SATURATION_OCCURRED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__gna__interface_1gga438bac13012dfd1b5fb40879ae4bb338a28b41ca571655027d806adf9823a8699" prot="public">
          <name>GNA_RESULT_OUTPUT_BUFFER_FULL_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__gna__interface_1gga438bac13012dfd1b5fb40879ae4bb338a7e80b9737561a658f820c4d7dd6aa10c" prot="public">
          <name>GNA_RESULT_PARAM_OUT_OF_RANGE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__gna__interface_1gga438bac13012dfd1b5fb40879ae4bb338a813a9df9fe6d3096af2f651ba4845fb6" prot="public">
          <name>GNA_RESULT_GENERIC_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Result of an inference operation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gna.h" line="89" column="1" bodyfile="include/drivers/gna.h" bodystart="89" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gna__interface_1gafcb6aea4dce9bd40182868444d93a024" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gna_configure</definition>
        <argsstring>(const struct device *dev, struct gna_config *cfg)</argsstring>
        <name>gna_configure</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structgna__config" kindref="compound">gna_config</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Configure the GNA device. </para>
        </briefdescription>
        <detaileddescription>
<para>Configure the GNA device. The GNA device must be configured before registering a model or performing inference</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Device configuration information</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the configuration is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>negative error code in case of a failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gna.h" line="148" column="19" bodyfile="include/drivers/gna.h" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__gna__interface_1gac227f92c5c9c5caf5e3553f7237a5aa8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gna_register_model</definition>
        <argsstring>(const struct device *dev, struct gna_model_info *model, void **model_handle)</argsstring>
        <name>gna_register_model</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structgna__model__info" kindref="compound">gna_model_info</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>model_handle</declname>
        </param>
        <briefdescription>
<para>Register a neural network model. </para>
        </briefdescription>
        <detaileddescription>
<para>Register a neural network model with the GNA device A model needs to be registered before it can be used to perform inference</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Information about the neural network model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the registered model if registration succeeds</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If registration of the model is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>negative error code in case of a failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gna.h" line="170" column="19" bodyfile="include/drivers/gna.h" bodystart="170" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__gna__interface_1ga647864b6df3ebc844d0181cf9fdf8130" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gna_deregister_model</definition>
        <argsstring>(const struct device *dev, void *model)</argsstring>
        <name>gna_deregister_model</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>De-register a previously registered neural network model. </para>
        </briefdescription>
        <detaileddescription>
<para>De-register a previously registered neural network model from the GNA device De-registration may be done to free up memory for registering another model Once de-registered, the model can no longer be used to perform inference</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model handle output by gna_register_model API</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If de-registration of the model is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>negative error code in case of a failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gna.h" line="193" column="19" bodyfile="include/drivers/gna.h" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group__gna__interface_1ga2c186fe0fed072f980bdac76b264bbbb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gna_infer</definition>
        <argsstring>(const struct device *dev, struct gna_inference_req *req, gna_callback callback)</argsstring>
        <name>gna_infer</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structgna__inference__req" kindref="compound">gna_inference_req</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>gna_callback</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Perform inference on a model with input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Make an inference request on a previously registered model with an of input data vector A callback is provided for notification of inference completion</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure for the driver instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Information required to perform inference on a neural network </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function to notify inference completion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the request is accepted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>negative error code in case of a failure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gna.h" line="215" column="19" bodyfile="include/drivers/gna.h" bodystart="215" bodyend="223"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This file contains the driver APIs for Intel&apos;s Gaussian Mixture Model and Neural Network Accelerator (GNA) </para>
    </detaileddescription>
  </compounddef>
</doxygen>
