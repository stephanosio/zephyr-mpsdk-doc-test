<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__isr__apis" kind="group">
    <compoundname>isr_apis</compoundname>
    <title>Interrupt Service Routine APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__isr__apis_1ga4e9915b92b09df49b99bc449f0cc31a1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int irq_connect_dynamic</definition>
        <argsstring>(unsigned int irq, unsigned int priority, void(*routine)(const void *parameter), const void *parameter, uint32_t flags)</argsstring>
        <name>irq_connect_dynamic</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>void(*)(const void *parameter)</type>
          <declname>routine</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configure a dynamic interrupt.</para>
<para>Use this instead of <ref refid="group__isr__apis_1ga131739d1faf501a15590053817aba984" kindref="member">IRQ_CONNECT()</ref> if arguments cannot be known at build time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>routine</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt service routine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>ISR parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Arch-specific IRQ configuration flags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector assigned to this interrupt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="65" column="1" bodyfile="include/irq.h" bodystart="65" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__isr__apis_1ga45afd68784e71521606e489d965b1c13" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>static unsigned int irq_get_level</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>irq_get_level</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="268" column="28" bodyfile="include/irq.h" bodystart="268" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__isr__apis_1ga8482b0dd2283d12677a9ebe321667d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool k_is_in_isr</definition>
        <argsstring>(void)</argsstring>
        <name>k_is_in_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if code is running at interrupt level. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows the caller to customize its actions, depending on whether it is a thread or an ISR.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="return"><para>false if invoked by a thread. </para>
</simplesect>
<simplesect kind="return"><para>true if invoked by an ISR. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="885" column="13" declfile="include/kernel.h" declline="885" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__isr__apis_1ga91e1cf0dc7fc93a3214cadb74ed86666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_is_preempt_thread</definition>
        <argsstring>(void)</argsstring>
        <name>k_is_preempt_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if code is running in a preemptible thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows the caller to customize its actions, depending on whether it can be preempted by another thread. The routine returns a &apos;true&apos; value if all of the following conditions are met:</para>
<para><itemizedlist>
<listitem><para>The code is running in a thread, not at ISR.</para>
</listitem><listitem><para>The thread&apos;s priority is in the preemptible range.</para>
</listitem><listitem><para>The thread has not locked the scheduler.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="return"><para>0 if invoked by an ISR or by a cooperative thread. </para>
</simplesect>
<simplesect kind="return"><para>Non-zero if invoked by a preemptible thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="903" column="6" declfile="include/kernel.h" declline="903" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__isr__apis_1gae74e5de996276df767b96d4b50fa47ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool k_is_pre_kernel</definition>
        <argsstring>(void)</argsstring>
        <name>k_is_pre_kernel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test whether startup is in the before-main-task phase. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows the caller to customize its actions, depending on whether it being invoked before the kernel is fully active.</para>
<para><simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<simplesect kind="return"><para>true if invoked before post-kernel initialization </para>
</simplesect>
<simplesect kind="return"><para>false if invoked during/after post-kernel initialization </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="916" column="20" bodyfile="include/kernel.h" bodystart="916" bodyend="921"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__isr__apis_1ga131739d1faf501a15590053817aba984" prot="public" static="no">
        <name>IRQ_CONNECT</name>
        <param><defname>irq_p</defname></param>
        <param><defname>priority_p</defname></param>
        <param><defname>isr_p</defname></param>
        <param><defname>isr_param_p</defname></param>
        <param><defname>flags_p</defname></param>
        <initializer>	<ref refid="xtensa_2arch_8h_1accdf8a59e00ac1c1fcedc18b78be4b8a" kindref="member">ARCH_IRQ_CONNECT</ref>(irq_p, priority_p, isr_p, isr_param_p, flags_p)</initializer>
        <briefdescription>
<para>Initialize an interrupt handler. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes an interrupt handler for an IRQ. The IRQ must be subsequently enabled before the interrupt handler begins servicing interrupts.</para>
<para><simplesect kind="warning"><para>Although this routine is invoked at run-time, all of its arguments must be computable by the compiler at build time.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq_p</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isr_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of interrupt service routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isr_param_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter passed to interrupt service routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Architecture-specific IRQ configuration flags.. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="48" column="9" bodyfile="include/irq.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1gac6c8746ac28da6ce02b24714f4144ff3" prot="public" static="no">
        <name>IRQ_DIRECT_CONNECT</name>
        <param><defname>irq_p</defname></param>
        <param><defname>priority_p</defname></param>
        <param><defname>isr_p</defname></param>
        <param><defname>flags_p</defname></param>
        <initializer>	<ref refid="x86_2ia32_2arch_8h_1a875f2b1ca924721fe3854796bd96c2db" kindref="member">ARCH_IRQ_DIRECT_CONNECT</ref>(irq_p, priority_p, isr_p, flags_p)</initializer>
        <briefdescription>
<para>Initialize a &apos;direct&apos; interrupt handler. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine initializes an interrupt handler for an IRQ. The IRQ must be subsequently enabled via <ref refid="group__isr__apis_1ga7ea700ee31e4ff036c997a554dbedfeb" kindref="member">irq_enable()</ref> before the interrupt handler begins servicing interrupts.</para>
<para>These ISRs are designed for performance-critical interrupt handling and do not go through common interrupt handling code. They must be implemented in such a way that it is safe to put them directly in the vector table. For ISRs written in C, The <ref refid="group__isr__apis_1gaf86866cd07fd37f381d98866f8874ebf" kindref="member">ISR_DIRECT_DECLARE()</ref> macro will do this automatically. For ISRs written in assembly it is entirely up to the developer to ensure that the right steps are taken.</para>
<para>This type of interrupt currently has a few limitations compared to normal Zephyr interrupts:<itemizedlist>
<listitem><para>No parameters are passed to the ISR.</para>
</listitem><listitem><para>No stack switch is done, the ISR will run on the interrupted context&apos;s stack, unless the architecture automatically does the stack switch in HW.</para>
</listitem><listitem><para>Interrupt locking state is unchanged from how the HW sets it when the ISR runs. On arches that enter ISRs with interrupts locked, they will remain locked.</para>
</listitem><listitem><para>Scheduling decisions are now optional, controlled by the return value of ISRs implemented with the <ref refid="group__isr__apis_1gaf86866cd07fd37f381d98866f8874ebf" kindref="member">ISR_DIRECT_DECLARE()</ref> macro</para>
</listitem><listitem><para>The call into the OS to exit power management idle state is now optional. Normal interrupts always do this before the ISR is run, but when it runs is now controlled by the placement of a <ref refid="group__isr__apis_1ga3c1327551dfca7818975e3fbf1470227" kindref="member">ISR_DIRECT_PM()</ref> macro, or omitted entirely.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>Although this routine is invoked at run-time, all of its arguments must be computable by the compiler at build time.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq_p</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isr_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of interrupt service routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Architecture-specific IRQ configuration flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="111" column="9" bodyfile="include/irq.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga1ab99dbeb50b228001e1fca808cbaeea" prot="public" static="no">
        <name>ISR_DIRECT_HEADER</name>
        <param></param>
        <initializer><ref refid="x86_2ia32_2arch_8h_1a6c6d57983c066fe8ab21a78f86f7adb3" kindref="member">ARCH_ISR_DIRECT_HEADER</ref>()</initializer>
        <briefdescription>
<para>Common tasks before executing the body of an ISR. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro must be at the beginning of all direct interrupts and performs minimal architecture-specific tasks before the ISR itself can run. It takes no arguments and has no return value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="121" column="9" bodyfile="include/irq.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga31581157c9dbacf935f0e6a8dd456335" prot="public" static="no">
        <name>ISR_DIRECT_FOOTER</name>
        <param><defname>check_reschedule</defname></param>
        <initializer>	<ref refid="x86_2ia32_2arch_8h_1aa7c471213fa28b3685f153ea2a72cf9d" kindref="member">ARCH_ISR_DIRECT_FOOTER</ref>(check_reschedule)</initializer>
        <briefdescription>
<para>Common tasks before exiting the body of an ISR. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro must be at the end of all direct interrupts and performs minimal architecture-specific tasks like EOI. It has no return value.</para>
<para>In a normal interrupt, a check is done at end of interrupt to invoke z_swap() logic if the current thread is preemptible and there is another thread ready to run in the kernel&apos;s ready queue cache. This is now optional and controlled by the check_reschedule argument. If unsure, set to nonzero. On systems that do stack switching and nested interrupt tracking in software, z_swap() should only be called if this was a non-nested interrupt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>check_reschedule</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, additionally invoke scheduling logic </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="138" column="9" bodyfile="include/irq.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga3c1327551dfca7818975e3fbf1470227" prot="public" static="no">
        <name>ISR_DIRECT_PM</name>
        <param></param>
        <initializer><ref refid="x86_2ia32_2arch_8h_1a491cb79acec18c83b9a61b0b45dfab69" kindref="member">ARCH_ISR_DIRECT_PM</ref>()</initializer>
        <briefdescription>
<para>Perform power management idle exit logic. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro may optionally be invoked somewhere in between IRQ_DIRECT_HEADER() and IRQ_DIRECT_FOOTER() invocations. It performs tasks necessary to exit power management idle state. It takes no parameters and returns no arguments. It may be omitted, but be careful! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="149" column="9" bodyfile="include/irq.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1gaf86866cd07fd37f381d98866f8874ebf" prot="public" static="no">
        <name>ISR_DIRECT_DECLARE</name>
        <param><defname>name</defname></param>
        <initializer><ref refid="x86_2ia32_2arch_8h_1a5279598e93dd914614a2ae52557be1a5" kindref="member">ARCH_ISR_DIRECT_DECLARE</ref>(name)</initializer>
        <briefdescription>
<para>Helper macro to declare a direct interrupt service routine. </para>
        </briefdescription>
        <detaileddescription>
<para>This will declare the function in a proper way and automatically include the <ref refid="group__isr__apis_1ga31581157c9dbacf935f0e6a8dd456335" kindref="member">ISR_DIRECT_FOOTER()</ref> and <ref refid="group__isr__apis_1ga1ab99dbeb50b228001e1fca808cbaeea" kindref="member">ISR_DIRECT_HEADER()</ref> macros. The function should return nonzero status if a scheduling decision should potentially be made. See <ref refid="group__isr__apis_1ga31581157c9dbacf935f0e6a8dd456335" kindref="member">ISR_DIRECT_FOOTER()</ref> for more details on the scheduling decision.</para>
<para>For architectures that support &apos;regular&apos; and &apos;fast&apos; interrupt types, where these interrupt types require different assembly language handling of registers by the ISR, this will always generate code for the &apos;fast&apos; interrupt type.</para>
<para>Example usage: <verbatim>ISR_DIRECT_DECLARE(my_isr)
{
        bool done = do_stuff();
        ISR_DIRECT_PM(); // done after do_stuff() due to latency concerns
        if (!done) {
            return 0; // don&apos;t bother checking if we have to z_swap()
        }

        k_sem_give(some_sem);
        return 1;
 }
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name of the ISR </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="180" column="9" bodyfile="include/irq.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" prot="public" static="no">
        <name>irq_lock</name>
        <param></param>
        <initializer>z_smp_global_lock()</initializer>
        <briefdescription>
<para>Lock interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine disables all interrupts on the CPU. It returns an unsigned integer &quot;lock-out key&quot;, which is an architecture-dependent indicator of whether interrupts were locked prior to the call. The lock-out key must be passed to <ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock()</ref> to re-enable interrupts.</para>
<para><simplesect kind="note"><para>This routine must also serve as a memory barrier to ensure the uniprocessor implementation of <computeroutput>k_spinlock_t</computeroutput> is correct.</para>
</simplesect>
This routine can be called recursively, as long as the caller keeps track of each lock-out key that is generated. Interrupts are re-enabled by passing each of the keys to <ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock()</ref> in the reverse order they were acquired. (That is, each call to <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref> must be balanced by a corresponding call to <ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock()</ref>.)</para>
<para>This routine can only be invoked from supervisor mode. Some architectures (for example, ARM) will fail silently if invoked from user mode instead of generating an exception.</para>
<para><simplesect kind="note"><para>This routine can be called by ISRs or by threads. If it is called by a thread, the interrupt lock is thread-specific; this means that interrupts remain disabled only while the thread is running. If the thread performs an operation that allows another thread to run (for example, giving a semaphore or sleeping for N milliseconds), the interrupt lock no longer applies and interrupts may be re-enabled while other processing occurs. When the thread once again becomes the current thread, the kernel re-establishes its interrupt lock; this ensures the thread won&apos;t be interrupted until it has explicitly released the interrupt lock it established.</para>
</simplesect>
<simplesect kind="warning"><para>The lock-out key should never be used to manually re-enable interrupts or to inspect or manipulate the contents of the CPU&apos;s interrupt bits.</para>
</simplesect>
<simplesect kind="return"><para>An architecture-dependent lock-out key representing the &quot;interrupt disable state&quot; prior to the call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="225" column="9" bodyfile="include/irq.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" prot="public" static="no">
        <name>irq_unlock</name>
        <param><defname>key</defname></param>
        <initializer>z_smp_global_unlock(<ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>)</initializer>
        <briefdescription>
<para>Unlock interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine reverses the effect of a previous call to <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref> using the associated lock-out key. The caller must call the routine once for each time it called <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref>, supplying the keys in the reverse order they were acquired, before interrupts are enabled.</para>
<para><simplesect kind="note"><para>This routine must also serve as a memory barrier to ensure the uniprocessor implementation of <computeroutput>k_spinlock_t</computeroutput> is correct.</para>
</simplesect>
This routine can only be invoked from supervisor mode. Some architectures (for example, ARM) will fail silently if invoked from user mode instead of generating an exception.</para>
<para><simplesect kind="note"><para>Can be called by ISRs.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock-out key generated by <ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="253" column="9" bodyfile="include/irq.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga7ea700ee31e4ff036c997a554dbedfeb" prot="public" static="no">
        <name>irq_enable</name>
        <param><defname>irq</defname></param>
        <initializer><ref refid="group__arch-irq_1gaa278d630653b33cb339621d725ed295a" kindref="member">arch_irq_enable</ref>(irq)</initializer>
        <briefdescription>
<para>Enable an IRQ. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine enables interrupts from source <emphasis>irq</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="393" column="9" bodyfile="include/irq.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga82c3a15d812f58e0f6525f358d031e6d" prot="public" static="no">
        <name>irq_disable</name>
        <param><defname>irq</defname></param>
        <initializer><ref refid="group__arch-irq_1ga216d692e87bfba955a60f8e570e127df" kindref="member">arch_irq_disable</ref>(irq)</initializer>
        <briefdescription>
<para>Disable an IRQ. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine disables interrupts from source <emphasis>irq</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="402" column="9" bodyfile="include/irq.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__isr__apis_1ga71fef3867ba9818cf0a5baf8410a6354" prot="public" static="no">
        <name>irq_is_enabled</name>
        <param><defname>irq</defname></param>
        <initializer><ref refid="group__arch-irq_1ga3bd8e963a124421bb372dab4bdc6cd83" kindref="member">arch_irq_is_enabled</ref>(irq)</initializer>
        <briefdescription>
<para>Get IRQ enable state. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine indicates if interrupts from source <emphasis>irq</emphasis> are enabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>interrupt enable state, true or false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/irq.h" line="413" column="9" bodyfile="include/irq.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
