<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__modbus" kind="group">
    <compoundname>modbus</compoundname>
    <title>MODBUS</title>
    <innerclass refid="structmodbus__adu" prot="public">modbus_adu</innerclass>
    <innerclass refid="structmodbus__user__callbacks" prot="public">modbus_user_callbacks</innerclass>
    <innerclass refid="structmodbus__serial__param" prot="public">modbus_serial_param</innerclass>
    <innerclass refid="structmodbus__server__param" prot="public">modbus_server_param</innerclass>
    <innerclass refid="structmodbus__iface__param" prot="public">modbus_iface_param</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__modbus_1ga4bd8913e1c77a1e4b19585caa9f77c2e" prot="public" static="no" strong="no">
        <type></type>
        <name>modbus_mode</name>
        <enumvalue id="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea52033dc2ef37fc286a590b1f97d946ef" prot="public">
          <name>MODBUS_MODE_RTU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Modbus over serial line RTU mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2eafdf029741cc1bdecb2cb9baf4f06732a" prot="public">
          <name>MODBUS_MODE_ASCII</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Modbus over serial line ASCII mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modbus_1gga4bd8913e1c77a1e4b19585caa9f77c2ea4d05b2cfd56ccf15eb1d8c7bb71071ec" prot="public">
          <name>MODBUS_MODE_RAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Modbus raw ADU mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modbus interface mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="388" column="1" bodyfile="include/modbus/modbus.h" bodystart="388" bodyend="395"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__modbus_1ga96e98f3f98831e9cd45faf21264f8f5e" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* modbus_raw_cb_t) (const int iface, const struct modbus_adu *adu)</definition>
        <argsstring>)(const int iface, const struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_cb_t</name>
        <briefdescription>
<para>ADU raw callback function signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct to send</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If transfer was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="383" column="9" bodyfile="include/modbus/modbus.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__modbus_1ga05b118dc87ebe3739cac4e9572104ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_coils</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint8_t *const coil_tbl, const uint16_t num_coils)</argsstring>
        <name>modbus_read_coils</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>coil_tbl</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_coils</declname>
        </param>
        <briefdescription>
<para>Coil read (FC01) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the status of coils from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coil starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_tbl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of bytes containing the value of the coils read. The format is: <verbatim>                MSB                               LSB
                B7   B6   B5   B4   B3   B2   B1   B0
                -------------------------------------
coil_tbl[0]     #8   #7                            #1
coil_tbl[1]     #16  #15                           #9
     :
     :
</verbatim> Note that the array that will be receiving the coil values must be greater than or equal to: (num_coils - 1) / 8 + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coils</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of coils to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="91" column="5" declfile="include/modbus/modbus.h" declline="91" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga921fd6036ff1b8a416dc02e30bb6e653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_dinputs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint8_t *const di_tbl, const uint16_t num_di)</argsstring>
        <name>modbus_read_dinputs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>di_tbl</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_di</declname>
        </param>
        <briefdescription>
<para>Read discrete inputs (FC02) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the status of discrete inputs from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Discrete input starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>di_tbl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array that will receive the state of the discrete inputs. The format of the array is as follows: <verbatim>              MSB                               LSB
              B7   B6   B5   B4   B3   B2   B1   B0
              -------------------------------------
di_tbl[0]     #8   #7                            #1
di_tbl[1]     #16  #15                           #9
     :
     :
</verbatim> Note that the array that will be receiving the discrete input values must be greater than or equal to: (num_di - 1) / 8 + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_di</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of discrete inputs to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="125" column="5" declfile="include/modbus/modbus.h" declline="125" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga7d7221b32fbf2395e69e25ef2dbaa036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_holding_regs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint16_t *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_read_holding_regs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Read holding registers (FC03) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the value of holding registers from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array that will receive the current values of the holding registers from the server. The array pointed to by &apos;reg_buf&apos; needs to be able to hold at least &apos;num_regs&apos; entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="148" column="5" declfile="include/modbus/modbus.h" declline="148" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga5ff31ca21cf2d1b081d172228d6c2154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_input_regs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint16_t *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_read_input_regs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Read input registers (FC04) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the value of input registers from a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array that will receive the current value of the holding registers from the server. The array pointed to by &apos;reg_buf&apos; needs to be able to hold at least &apos;num_regs&apos; entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="171" column="5" declfile="include/modbus/modbus.h" declline="171" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gaccac4f72b5d66a5a2e6c444dda251c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_coil</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t coil_addr, const bool coil_state)</argsstring>
        <name>modbus_write_coil</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>coil_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>coil_state</declname>
        </param>
        <briefdescription>
<para>Write single coil (FC05) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write the value of single coil to a server.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coils starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the desired state of the coil</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="189" column="5" declfile="include/modbus/modbus.h" declline="189" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gaf06d2553af8b8e9ab58f54b8b7e2055b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_holding_reg</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, const uint16_t reg_val)</argsstring>
        <name>modbus_write_holding_reg</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>reg_val</declname>
        </param>
        <briefdescription>
<para>Write single holding register (FC06) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write the value of single holding register to a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coils starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired value of the holding register</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="207" column="5" declfile="include/modbus/modbus.h" declline="207" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gac924251f66ca6f357d8b7d90075df210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_request_diagnostic</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t sfunc, const uint16_t data, uint16_t *const data_out)</argsstring>
        <name>modbus_request_diagnostic</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>sfunc</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>data_out</declname>
        </param>
        <briefdescription>
<para>Read diagnostic (FC08) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to perform a diagnostic function of a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sfunc</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagnostic sub-function code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub-function data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="225" column="5" declfile="include/modbus/modbus.h" declline="225" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gac0fa22cd0d1fa861fdbc04b65ea60d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_coils</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint8_t *const coil_tbl, const uint16_t num_coils)</argsstring>
        <name>modbus_write_coils</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *const</type>
          <declname>coil_tbl</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_coils</declname>
        </param>
        <briefdescription>
<para>Write coils (FC15) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write to coils on a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Coils starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coil_tbl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of bytes containing the value of the coils to write. The format is: <verbatim>                MSB                               LSB
                B7   B6   B5   B4   B3   B2   B1   B0
                -------------------------------------
coil_tbl[0]     #8   #7                            #1
coil_tbl[1]     #16  #15                           #9
     :
     :
</verbatim> Note that the array that will be receiving the coil values must be greater than or equal to: (num_coils - 1) / 8 + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coils</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of coils to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="258" column="5" declfile="include/modbus/modbus.h" declline="258" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gadc8273292e0efc8c0d65c00eea7a22c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_holding_regs</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, uint16_t *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_write_holding_regs</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref> *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Write holding registers (FC16) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write to integer holding registers to a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array containing the value of the holding registers to write. Note that the array containing the register values must be greater than or equal to &apos;num_regs&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="281" column="5" declfile="include/modbus/modbus.h" declline="281" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga9a8ae6fb4b1aee398f5b19f074d07ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_read_holding_regs_fp</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, float *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_read_holding_regs_fp</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Read floating-point holding registers (FC03) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to read the value of floating-point holding registers from a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array that will receive the current values of the holding registers from the server. The array pointed to by &apos;reg_buf&apos; needs to be able to hold at least &apos;num_regs&apos; entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="304" column="5" declfile="include/modbus/modbus.h" declline="304" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga762da245db3ca4f60fb3aa6c5783c73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_write_holding_regs_fp</definition>
        <argsstring>(const int iface, const uint8_t unit_id, const uint16_t start_addr, float *const reg_buf, const uint16_t num_regs)</argsstring>
        <name>modbus_write_holding_regs_fp</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>unit_id</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>start_addr</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>reg_buf</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>num_regs</declname>
        </param>
        <briefdescription>
<para>Write floating-point holding registers (FC16) </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a Modbus message to write to floating-point holding registers to a server unit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus unit ID of the server </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Register starting address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to an array containing the value of the holding registers to write. Note that the array containing the register values must be greater than or equal to &apos;num_regs&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_regs</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantity of registers to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="327" column="5" declfile="include/modbus/modbus.h" declline="327" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gaa17880a268d6b3b9553de835c800af27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_iface_get_by_name</definition>
        <argsstring>(const char *iface_name)</argsstring>
        <name>modbus_iface_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>iface_name</declname>
        </param>
        <briefdescription>
<para>Get Modbus interface index according to interface name. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is more than one interface, it can be used to clearly identify interfaces in the application.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Modbus</parametername>
</parameternamelist>
<parameterdescription>
<para>interface index or negative error value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="373" column="5" declfile="include/modbus/modbus.h" declline="373" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gae4d34276c467bf54e0849a1098e56f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_init_server</definition>
        <argsstring>(const int iface, struct modbus_iface_param param)</argsstring>
        <name>modbus_init_server</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodbus__iface__param" kindref="compound">modbus_iface_param</ref></type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Configure Modbus Interface as raw ADU server. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration parameter of the server interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="451" column="5" declfile="include/modbus/modbus.h" declline="451" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga943eff819ecf1bc268714783047888ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_init_client</definition>
        <argsstring>(const int iface, struct modbus_iface_param param)</argsstring>
        <name>modbus_init_client</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodbus__iface__param" kindref="compound">modbus_iface_param</ref></type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Configure Modbus Interface as raw ADU client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration parameter of the client interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="461" column="5" declfile="include/modbus/modbus.h" declline="461" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga32a6319cc51eb5a98dcb58b3231b9d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_disable</definition>
        <argsstring>(const uint8_t iface)</argsstring>
        <name>modbus_disable</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>Disable Modbus Interface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called to disable Modbus interface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus interface index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If the function was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="472" column="5" declfile="include/modbus/modbus.h" declline="472" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga6d40e9eda6b8ead6d071d4192ffe489b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_raw_submit_rx</definition>
        <argsstring>(const int iface, const struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_submit_rx</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <briefdescription>
<para>Submit raw ADU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus RTU interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct that is received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If transfer was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="482" column="5" declfile="include/modbus/modbus.h" declline="482" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga8fdae6a92e27a845296c9d8ce4b8078e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modbus_raw_put_header</definition>
        <argsstring>(const struct modbus_adu *adu, uint8_t *header)</argsstring>
        <name>modbus_raw_put_header</name>
        <param>
          <type>const struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Put MBAP header into a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer in which MBAP header will be placed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="491" column="6" declfile="include/modbus/modbus.h" declline="491" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga333072d3536d7b6f0680ceecc2c5bddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modbus_raw_get_header</definition>
        <argsstring>(struct modbus_adu *adu, const uint8_t *header)</argsstring>
        <name>modbus_raw_get_header</name>
        <param>
          <type>struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Get MBAP header from a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer containing MBAP header </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="499" column="6" declfile="include/modbus/modbus.h" declline="499" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1gad250c40ba13a7d8c9189de17d1fd31aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modbus_raw_set_server_failure</definition>
        <argsstring>(struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_set_server_failure</name>
        <param>
          <type>struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <briefdescription>
<para>Set Server Device Failure exception. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies ADU passed by the pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="508" column="6" declfile="include/modbus/modbus.h" declline="508" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__modbus_1ga7aa5dfd6e457980e9e9b8a77810ec31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int modbus_raw_backend_txn</definition>
        <argsstring>(const int iface, struct modbus_adu *adu)</argsstring>
        <name>modbus_raw_backend_txn</name>
        <param>
          <type>const int</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodbus__adu" kindref="compound">modbus_adu</ref> *</type>
          <declname>adu</declname>
        </param>
        <briefdescription>
<para>Use interface as backend to send and receive ADU. </para>
        </briefdescription>
        <detaileddescription>
<para>This function overwrites ADU passed by the pointer and generates exception responses if backend interface is misconfigured or target device is unreachable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Modbus client interface index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adu</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RAW ADU struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If transfer was successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="522" column="5" declfile="include/modbus/modbus.h" declline="522" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__modbus_1ga1015513d4d3b6621fc18dcfda79116a2" prot="public" static="no">
        <name>MODBUS_MBAP_LENGTH</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of MBAP Header </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="40" column="9" bodyfile="include/modbus/modbus.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modbus_1gae8a6fcfc117e7c4b2ac32aef90155698" prot="public" static="no">
        <name>MODBUS_MBAP_AND_FC_LENGTH</name>
        <initializer>(<ref refid="group__modbus_1ga1015513d4d3b6621fc18dcfda79116a2" kindref="member">MODBUS_MBAP_LENGTH</ref> + 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of MBAP Header plus function code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/modbus/modbus.h" line="42" column="9" bodyfile="include/modbus/modbus.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>MODBUS transport protocol API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
