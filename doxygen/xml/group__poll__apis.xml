<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__poll__apis" kind="group">
    <compoundname>poll_apis</compoundname>
    <title>Async polling APIs</title>
    <innerclass refid="structk__poll__signal" prot="public">k_poll_signal</innerclass>
    <innerclass refid="structk__poll__event" prot="public">k_poll_event</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__poll__apis_1ga36d7978872a83191dd3cc16d62165add" prot="public" static="no" strong="no">
        <type></type>
        <name>k_poll_modes</name>
        <enumvalue id="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda22874743e2f6b0f1fd55c5375732b681" prot="public">
          <name>K_POLL_MODE_NOTIFY_ONLY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__poll__apis_1gga36d7978872a83191dd3cc16d62165adda71e08944b3e944c28056f9a5fbfb018c" prot="public">
          <name>K_POLL_NUM_MODES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5376" column="1" bodyfile="include/kernel.h" bodystart="5376" bodyend="5381"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__poll__apis_1gaa06bddd93a024fc5326d93187d80eb03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_event_init</definition>
        <argsstring>(struct k_poll_event *event, uint32_t type, int mode, void *obj)</argsstring>
        <name>k_poll_event_init</name>
        <param>
          <type>struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Initialize one struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para>After this routine is called on a poll event, the event it ready to be placed in an event array to be passed to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to initialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitfield of the types of event, from the K_POLL_TYPE_xxx values. Only values that apply to the same object being polled can be used together. Choosing K_POLL_TYPE_IGNORE disables the event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Future. Use K_POLL_MODE_NOTIFY_ONLY. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel object or poll signal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5490" column="13" declfile="include/kernel.h" declline="5490" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_poll</definition>
        <argsstring>(struct k_poll_event *events, int num_events, k_timeout_t timeout)</argsstring>
        <name>k_poll</name>
        <param>
          <type>struct <ref refid="structk__poll__event" kindref="compound">k_poll_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_events</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for one or many of multiple poll events to occur. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine allows a thread to wait concurrently for one or many of multiple poll events to have occurred. Such events can be a kernel object being available, like a semaphore, or a poll signal event.</para>
<para>When an event notifies that a kernel object is available, the kernel object is not &quot;given&quot; to the thread calling <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>: it merely signals the fact that the object was available when the <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> call was in effect. Also, all threads trying to acquire an object the regular way, i.e. by pending on the object, have precedence over the thread polling on the object. This means that the polling thread will never get the poll event on an object until the object becomes available and its pend queue is empty. For this reason, the <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> call is more effective when the objects being polled only have one thread, the polling thread, trying to acquire them.</para>
<para>When <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> returns 0, the caller should loop on all the events that were passed to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> and check the state field for the values that were expected and take the associated actions.</para>
<para>Before being reused for another call to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref>, the user has to reset the state field to K_POLL_STATE_NOT_READY.</para>
<para>When called from user mode, a temporary memory allocation is required from the caller&apos;s resource pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of events to be polled for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of events in the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period for an event to be ready, or one of the special values K_NO_WAIT and K_FOREVER.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more events are ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>Waiting period timed out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINTR</parametername>
</parameternamelist>
<parameterdescription>
<para>Polling has been interrupted, e.g. with <ref refid="group__queue__apis_1ga7c39d86cc6509f59ff9223cac3ea5071" kindref="member">k_queue_cancel_wait()</ref>. All output events are still set and valid, cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other words, -EINTR status means that at least one of output events is K_POLL_STATE_CANCELLED. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOMEM</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread resource pool insufficient memory (user mode only) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Bad parameters (user mode only) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5536" column="6" declfile="include/kernel.h" declline="5536" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1gaee3090c2a912b93b6a5855e3018c3551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_signal_init</definition>
        <argsstring>(struct k_poll_signal *sig)</argsstring>
        <name>k_poll_signal_init</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Initialize a poll signal object. </para>
        </briefdescription>
        <detaileddescription>
<para>Ready a poll signal object to be signaled via <ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>A poll signal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5547" column="7" declfile="include/kernel.h" declline="5547" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_signal_reset</definition>
        <argsstring>(struct k_poll_signal *sig)</argsstring>
        <name>k_poll_signal_reset</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5554" column="7" declfile="include/kernel.h" declline="5554" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1ga69dae11c7cb2c669caa411c3e7001311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_poll_signal_check</definition>
        <argsstring>(struct k_poll_signal *sig, unsigned int *signaled, int *result)</argsstring>
        <name>k_poll_signal_check</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int *</type>
          <declname>signaled</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Fetch the signaled state and result value of a poll signal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>A poll signal object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signaled</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer buffer which will be written nonzero if the object was signaled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer destination buffer which will be written with the result value if the object was signaled, or an undefined value if it was not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5566" column="7" declfile="include/kernel.h" declline="5566" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int k_poll_signal_raise</definition>
        <argsstring>(struct k_poll_signal *sig, int result)</argsstring>
        <name>k_poll_signal_raise</name>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>int</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Signal a poll signal object. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine makes ready a poll signal, which is basically a poll event of type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be made ready to run. A <emphasis>result</emphasis> value can be specified.</para>
<para>The poll signal contains a &apos;signaled&apos; field that, when set by <ref refid="group__poll__apis_1gad0bf3825f828ec3ca37481bf3cbd6723" kindref="member">k_poll_signal_raise()</ref>, stays set until the user sets it back to 0 with <ref refid="group__poll__apis_1ga02d899d1455ae1f3f55ffe8f1ebd6994" kindref="member">k_poll_signal_reset()</ref>. It thus has to be reset by the user before being passed again to <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> or <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> will consider it being signaled, and will return immediately.</para>
<para><simplesect kind="note"><para>The result is stored and the &apos;signaled&apos; field is set even if this function returns an error indicating that an expiring poll was not notified. The next <ref refid="group__poll__apis_1gac550dc93662ce164fb22a5a91d6830db" kindref="member">k_poll()</ref> will detect the missed raise.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>A poll signal. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the result field of the signal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal was delivered successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The polling thread&apos;s timeout is in the process of expiring. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5593" column="6" declfile="include/kernel.h" declline="5593" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__poll__apis_1gafd5d801eb9e9cf6097b2c08b4933998e" prot="public" static="no">
        <name>K_POLL_TYPE_IGNORE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5368" column="9" bodyfile="include/kernel.h" bodystart="5368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga144d8eb34d85f6053e454410a10bf56a" prot="public" static="no">
        <name>K_POLL_TYPE_SIGNAL</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_SIGNAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5369" column="9" bodyfile="include/kernel.h" bodystart="5369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga0fd7605bdffd43dff7480a90a603ffde" prot="public" static="no">
        <name>K_POLL_TYPE_SEM_AVAILABLE</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_SEM_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5370" column="9" bodyfile="include/kernel.h" bodystart="5370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga58d656f73f031a39b8a936133fe5504f" prot="public" static="no">
        <name>K_POLL_TYPE_DATA_AVAILABLE</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5371" column="9" bodyfile="include/kernel.h" bodystart="5371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga71734fee18c523cf70276260118afb91" prot="public" static="no">
        <name>K_POLL_TYPE_FIFO_DATA_AVAILABLE</name>
        <initializer><ref refid="group__poll__apis_1ga58d656f73f031a39b8a936133fe5504f" kindref="member">K_POLL_TYPE_DATA_AVAILABLE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5372" column="9" bodyfile="include/kernel.h" bodystart="5372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gaa83509b54175fb6c98324422a928d5e1" prot="public" static="no">
        <name>K_POLL_TYPE_MSGQ_DATA_AVAILABLE</name>
        <initializer>Z_POLL_TYPE_BIT(_POLL_TYPE_MSGQ_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5373" column="9" bodyfile="include/kernel.h" bodystart="5373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" prot="public" static="no">
        <name>K_POLL_STATE_NOT_READY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5384" column="9" bodyfile="include/kernel.h" bodystart="5384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga478aae7fe4fb5c7b7c76ed216c22a7f1" prot="public" static="no">
        <name>K_POLL_STATE_SIGNALED</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_SIGNALED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5385" column="9" bodyfile="include/kernel.h" bodystart="5385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gae9e3eefd5a29a538d22f53592578bb37" prot="public" static="no">
        <name>K_POLL_STATE_SEM_AVAILABLE</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_SEM_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5386" column="9" bodyfile="include/kernel.h" bodystart="5386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gac166d9919d591bace163c5211e7b41f4" prot="public" static="no">
        <name>K_POLL_STATE_DATA_AVAILABLE</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5387" column="9" bodyfile="include/kernel.h" bodystart="5387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gabd5ac3341698534f39ded718079d6168" prot="public" static="no">
        <name>K_POLL_STATE_FIFO_DATA_AVAILABLE</name>
        <initializer><ref refid="group__poll__apis_1gac166d9919d591bace163c5211e7b41f4" kindref="member">K_POLL_STATE_DATA_AVAILABLE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5388" column="9" bodyfile="include/kernel.h" bodystart="5388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gac236074cd43f59f28b803fe2c4a4f6f7" prot="public" static="no">
        <name>K_POLL_STATE_MSGQ_DATA_AVAILABLE</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_MSGQ_DATA_AVAILABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5389" column="9" bodyfile="include/kernel.h" bodystart="5389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gadaf4b4c8e13afb54114af72d133e1fdb" prot="public" static="no">
        <name>K_POLL_STATE_CANCELLED</name>
        <initializer>Z_POLL_STATE_BIT(_POLL_STATE_CANCELLED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5390" column="9" bodyfile="include/kernel.h" bodystart="5390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga6d6321e189afca73a276cd671ec531ae" prot="public" static="no">
        <name>K_POLL_SIGNAL_INITIALIZER</name>
        <param><defname>obj</defname></param>
        <initializer>	{ \
	.poll_events = <ref refid="group__doubly-linked-list__apis_1ga3681d4600f9cbd9237ea9ce6f67e508d" kindref="member">SYS_DLIST_STATIC_INIT</ref>(&amp;obj.poll_events), \
	.signaled = 0, \
	.<ref refid="structresult" kindref="compound">result</ref> = 0, \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5407" column="9" bodyfile="include/kernel.h" bodystart="5407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1ga8e3889f2bac281a6e65e31068e58047e" prot="public" static="no">
        <name>K_POLL_EVENT_INITIALIZER</name>
        <param><defname>_event_type</defname></param>
        <param><defname>_event_mode</defname></param>
        <param><defname>_event_obj</defname></param>
        <initializer>	{ \
	.poller = NULL, \
	.type = _event_type, \
	.<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref> = <ref refid="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" kindref="member">K_POLL_STATE_NOT_READY</ref>, \
	.mode = _event_mode, \
	.unused = 0, \
	{ \
		.obj = _event_obj, \
	}, \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5450" column="9" bodyfile="include/kernel.h" bodystart="5450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__poll__apis_1gada2366896d913dc916b3c28642648b63" prot="public" static="no">
        <name>K_POLL_EVENT_STATIC_INITIALIZER</name>
        <param><defname>_event_type</defname></param>
        <param><defname>_event_mode</defname></param>
        <param><defname>_event_obj</defname></param>
        <param><defname>event_tag</defname></param>
        <initializer>	{ \
	.<ref refid="timer_2starve_2src_2main_8c_1aa7eccd3911dd697c8b39d08273f3e64e" kindref="member">tag</ref> = event_tag, \
	.type = _event_type, \
	.<ref refid="http__parser__state_8h_1adc6e5733fc3c22f0a7b2914188c49c90" kindref="member">state</ref> = <ref refid="group__poll__apis_1ga522822c5e06a89b22ce4dcefd10c66aa" kindref="member">K_POLL_STATE_NOT_READY</ref>, \
	.mode = _event_mode, \
	.unused = 0, \
	{ \
		.obj = _event_obj, \
	}, \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5463" column="9" bodyfile="include/kernel.h" bodystart="5462" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
