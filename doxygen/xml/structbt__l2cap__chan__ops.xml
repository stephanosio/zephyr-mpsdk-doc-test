<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structbt__l2cap__chan__ops" kind="struct" language="C++" prot="public">
    <compoundname>bt_l2cap_chan_ops</compoundname>
    <includes refid="l2cap_8h" local="no">l2cap.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1a3a4dd75a11c9867adcade6d288dec2de" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_l2cap_chan_ops::connected) (struct bt_l2cap_chan *chan)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan)</argsstring>
        <name>connected</name>
        <briefdescription>
<para>Channel connected callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever the connection completes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel that has been connected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="240" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1a2e5fcc77a5174de6e3933bb6a14e4ad3" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_l2cap_chan_ops::disconnected) (struct bt_l2cap_chan *chan)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan)</argsstring>
        <name>disconnected</name>
        <briefdescription>
<para>Channel disconnected callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever the channel is disconnected, including when a connection gets rejected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel that has been Disconnected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="250" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1a12f3290f9bd04fb5fe562c620dff6984" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_l2cap_chan_ops::encrypt_change) (struct bt_l2cap_chan *chan, uint8_t hci_status)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan, uint8_t hci_status)</argsstring>
        <name>encrypt_change</name>
        <briefdescription>
<para>Channel encrypt_change callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever the security level changed (indirectly link encryption done) or authentication procedure fails. In both cases security initiator and responder got the final status (HCI status) passed by related to encryption and authentication events from local host&apos;s controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel which has made encryption status changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>HCI status of performed security procedure caused by channel security requirements. The value is populated by HCI layer and set to 0 when success and to non-zero (reference to HCI Error Codes) when security/authentication failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="267" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1ab973539dd8b5e3ab115042a03362f141" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *(*</type>
        <definition>struct net_buf *(* bt_l2cap_chan_ops::alloc_buf) (struct bt_l2cap_chan *chan)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan)</argsstring>
        <name>alloc_buf</name>
        <briefdescription>
<para>Channel alloc_buf callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided the channel will use it to allocate buffers to store incoming data. Channels that requires segmentation must set this callback. If the application has not set a callback the L2CAP SDU MTU will be truncated to <ref refid="group__bt__l2cap_1ga13b93a8f09157fbcf739fa4949840efe" kindref="member">BT_L2CAP_SDU_RX_MTU</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel requesting a buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="267" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1a0ab419d3c52c08e0dfda236466d7cadd" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* bt_l2cap_chan_ops::recv) (struct bt_l2cap_chan *chan, struct net_buf *buf)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan, struct net_buf *buf)</argsstring>
        <name>recv</name>
        <briefdescription>
<para>Channel recv callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel receiving data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing incoming data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success or negative value in case of error. </para>
</simplesect>
<simplesect kind="return"><para>-EINPROGRESS in case where user has to confirm once the data has been processed by calling <ref refid="group__bt__l2cap_1gad53f5fc31314121ff84e740879eae3cf" kindref="member">bt_l2cap_chan_recv_complete</ref> passing back the buffer received with its original user_data which contains the number of segments/credits used by the packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="296" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1a770c09f3fb10c9d1e069333d22803d1a" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_l2cap_chan_ops::sent) (struct bt_l2cap_chan *chan)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan)</argsstring>
        <name>sent</name>
        <briefdescription>
<para>Channel sent callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever a SDU has been completely sent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel which has sent data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="305" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1a4be7fadf07368750cc33cf034d3073e7" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_l2cap_chan_ops::status) (struct bt_l2cap_chan *chan, atomic_t *status)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan, atomic_t *status)</argsstring>
        <name>status</name>
        <briefdescription>
<para>Channel status callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever the channel status changes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel which status changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="315" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1a6d974d0e472626cb1e5cd898a3dcbca6" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_l2cap_chan_ops::released) (struct bt_l2cap_chan *chan)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan)</argsstring>
        <name>released</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="322" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbt__l2cap__chan__ops_1afba426353897bc3a57c936a98acab839" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* bt_l2cap_chan_ops::reconfigured) (struct bt_l2cap_chan *chan)</definition>
        <argsstring>)(struct bt_l2cap_chan *chan)</argsstring>
        <name>reconfigured</name>
        <briefdescription>
<para>Channel reconfigured callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If this callback is provided it will be called whenever peer or local device requested reconfiguration. Application may check updated MTU and MPS values by inspecting chan-&gt;le endpoints.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel which was reconfigured </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/l2cap.h" line="332" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>L2CAP Channel operations structure. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>_snode</label>
      </node>
      <node id="1">
        <label>bt_l2cap_chan_ops</label>
        <link refid="structbt__l2cap__chan__ops"/>
        <childnode refid="2" relation="usage">
          <edgelabel>alloc_buf</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>net_buf</label>
        <link refid="structnet__buf"/>
        <childnode refid="3" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>frags</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>b</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>net_buf_simple</label>
        <link refid="structnet__buf__simple"/>
      </node>
    </collaborationgraph>
    <location file="include/bluetooth/l2cap.h" line="232" column="1" bodyfile="include/bluetooth/l2cap.h" bodystart="232" bodyend="333"/>
    <listofallmembers>
      <member refid="structbt__l2cap__chan__ops_1ab973539dd8b5e3ab115042a03362f141" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>alloc_buf</name></member>
      <member refid="structbt__l2cap__chan__ops_1a3a4dd75a11c9867adcade6d288dec2de" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>connected</name></member>
      <member refid="structbt__l2cap__chan__ops_1a2e5fcc77a5174de6e3933bb6a14e4ad3" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>disconnected</name></member>
      <member refid="structbt__l2cap__chan__ops_1a12f3290f9bd04fb5fe562c620dff6984" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>encrypt_change</name></member>
      <member refid="structbt__l2cap__chan__ops_1afba426353897bc3a57c936a98acab839" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>reconfigured</name></member>
      <member refid="structbt__l2cap__chan__ops_1a0ab419d3c52c08e0dfda236466d7cadd" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>recv</name></member>
      <member refid="structbt__l2cap__chan__ops_1a6d974d0e472626cb1e5cd898a3dcbca6" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>released</name></member>
      <member refid="structbt__l2cap__chan__ops_1a770c09f3fb10c9d1e069333d22803d1a" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>sent</name></member>
      <member refid="structbt__l2cap__chan__ops_1a4be7fadf07368750cc33cf034d3073e7" prot="public" virt="non-virtual"><scope>bt_l2cap_chan_ops</scope><name>status</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
