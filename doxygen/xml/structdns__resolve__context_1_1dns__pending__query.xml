<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structdns__resolve__context_1_1dns__pending__query" kind="struct" language="C++" prot="public">
    <compoundname>dns_resolve_context::dns_pending_query</compoundname>
    <includes refid="dns__resolve_8h" local="no">dns_resolve.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1a6f76b200b8c421399987be83b72b9230" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structk__work__delayable" kindref="compound">k_work_delayable</ref></type>
        <definition>struct k_work_delayable dns_resolve_context::dns_pending_query::timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timeout timer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="200" column="23" bodyfile="include/net/dns_resolve.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1a4260371a741b3c2e752848955eee5cae" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdns__resolve__context" kindref="compound">dns_resolve_context</ref> *</type>
        <definition>struct dns_resolve_context* dns_resolve_context::dns_pending_query::ctx</definition>
        <argsstring></argsstring>
        <name>ctx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Back pointer to ctx, needed in timeout handler </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="203" column="26" bodyfile="include/net/dns_resolve.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1aacf4003ce035658038ae44773091f2d0" prot="public" static="no" mutable="no">
        <type><ref refid="group__dns__resolve_1ga79a1d3b79f665959331956c1e48b1739" kindref="member">dns_resolve_cb_t</ref></type>
        <definition>dns_resolve_cb_t dns_resolve_context::dns_pending_query::cb</definition>
        <argsstring></argsstring>
        <name>cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Result callback.</para>
<para>A null value indicates the slot is not in use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="209" column="18" bodyfile="include/net/dns_resolve.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1a6a1c93f3eab8f9aa55dbb26e704bb343" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* dns_resolve_context::dns_pending_query::user_data</definition>
        <argsstring></argsstring>
        <name>user_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="212" column="6" bodyfile="include/net/dns_resolve.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1aa2b1f1db21ab4a05240ebb62512c24d5" prot="public" static="no" mutable="no">
        <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
        <definition>k_timeout_t dns_resolve_context::dns_pending_query::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TX timeout </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="215" column="13" bodyfile="include/net/dns_resolve.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1a106464bda8d56283b06251c37964906b" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* dns_resolve_context::dns_pending_query::query</definition>
        <argsstring></argsstring>
        <name>query</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String containing the thing to resolve like www.example.com</para>
<para>This is set to a non-null value when the query is started, and is not used thereafter.</para>
<para>If the query completed at a point where the work item was still pending the pointer is cleared to indicate that the query is complete, but release of the query slot will be deferred until a request for a slot determines that the work item has been released. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="228" column="12" bodyfile="include/net/dns_resolve.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1af5796eb469e2fe3bcebea2ad55a8fd78" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__dns__resolve_1ga7169c5a920fb1b0d77910a6ab922e3f0" kindref="member">dns_query_type</ref></type>
        <definition>enum dns_query_type dns_resolve_context::dns_pending_query::query_type</definition>
        <argsstring></argsstring>
        <name>query_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="231" column="20" bodyfile="include/net/dns_resolve.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1a773e2ad2bedb2d1030df3590e9a14173" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t dns_resolve_context::dns_pending_query::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DNS id of this query </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="234" column="10" bodyfile="include/net/dns_resolve.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdns__resolve__context_1_1dns__pending__query_1a168fea99e8c6760cab49611ceb5a6fc1" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
        <definition>uint16_t dns_resolve_context::dns_pending_query::query_hash</definition>
        <argsstring></argsstring>
        <name>query_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hash of the DNS name + query type we are querying. This hash is calculated so we can match the response that we are receiving. This is needed mainly for mDNS which is setting the DNS id to 0, which means that the id alone cannot be used to find correct pending query. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/dns_resolve.h" line="242" column="10" bodyfile="include/net/dns_resolve.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Result callbacks. We have multiple callbacks here so that it is possible to do multiple queries at the same time.</para>
<para>Contents of this structure can be inspected and changed only when the lock is held. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>__thread_entry</label>
      </node>
      <node id="8">
        <label>_callee_saved</label>
      </node>
      <node id="12">
        <label>_mem_domain_info</label>
      </node>
      <node id="18">
        <label>_slist</label>
      </node>
      <node id="4">
        <label>_snode</label>
      </node>
      <node id="17">
        <label>_thread_arch</label>
      </node>
      <node id="7">
        <label>_thread_base</label>
      </node>
      <node id="11">
        <label>_thread_stack_info</label>
      </node>
      <node id="19">
        <label>_timeout</label>
      </node>
      <node id="9">
        <label>_wait_q_t</label>
      </node>
      <node id="25">
        <label>dns_addrinfo</label>
        <link refid="structdns__addrinfo"/>
        <childnode refid="21" relation="usage">
          <edgelabel>ai_addr</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dns_resolve_context</label>
        <link refid="structdns__resolve__context"/>
        <childnode refid="21" relation="usage">
          <edgelabel>dns_server</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>net_ctx</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>buf_timeout</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>queries</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dns_resolve_context::dns_pending_query</label>
        <link refid="structdns__resolve__context_1_1dns__pending__query"/>
        <childnode refid="2" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>cb</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>k_heap</label>
        <link refid="structk__heap"/>
        <childnode refid="15" relation="usage">
          <edgelabel>heap</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>k_mutex</label>
        <link refid="structk__mutex"/>
        <childnode refid="9" relation="usage">
          <edgelabel>wait_q</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>k_spinlock</label>
        <link refid="structk__spinlock"/>
      </node>
      <node id="6">
        <label>k_thread</label>
        <link refid="structk__thread"/>
        <childnode refid="7" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>callee_saved</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>join_queue</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>entry</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>next_thread</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>stack_info</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mem_domain_info</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>stack_obj</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>resource_pool</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>arch</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>k_timeout_t</label>
        <link refid="structk__timeout__t"/>
      </node>
      <node id="3">
        <label>k_work</label>
        <link refid="structk__work"/>
        <childnode refid="4" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>handler</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>k_work_delayable</label>
        <link refid="structk__work__delayable"/>
        <childnode refid="3" relation="usage">
          <edgelabel>work</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>k_work_q</label>
        <link refid="structk__work__q"/>
        <childnode refid="6" relation="usage">
          <edgelabel>thread</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>pending</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>drainq</edgelabel>
          <edgelabel>notifyq</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>net_context</label>
        <link refid="structnet__context"/>
        <childnode refid="23" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>remote</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>connect_cb</edgelabel>
          <edgelabel>recv_cb</edgelabel>
          <edgelabel>send_cb</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>sockaddr</label>
        <link refid="structsockaddr"/>
      </node>
      <node id="15">
        <label>sys_heap</label>
        <link refid="structsys__heap"/>
      </node>
      <node id="13">
        <label>z_thread_stack_element</label>
      </node>
    </collaborationgraph>
    <location file="include/net/dns_resolve.h" line="198" column="1" bodyfile="include/net/dns_resolve.h" bodystart="198" bodyend="243"/>
    <listofallmembers>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1aacf4003ce035658038ae44773091f2d0" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>cb</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1a4260371a741b3c2e752848955eee5cae" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>ctx</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1a773e2ad2bedb2d1030df3590e9a14173" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>id</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1a106464bda8d56283b06251c37964906b" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>query</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1a168fea99e8c6760cab49611ceb5a6fc1" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>query_hash</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1af5796eb469e2fe3bcebea2ad55a8fd78" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>query_type</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1aa2b1f1db21ab4a05240ebb62512c24d5" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>timeout</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1a6f76b200b8c421399987be83b72b9230" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>timer</name></member>
      <member refid="structdns__resolve__context_1_1dns__pending__query_1a6a1c93f3eab8f9aa55dbb26e704bb343" prot="public" virt="non-virtual"><scope>dns_resolve_context::dns_pending_query</scope><name>user_data</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
