<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="bluetooth_2buf_8h" kind="file" language="C++">
    <compoundname>buf.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="net_2buf_8h" local="no">net/buf.h</includes>
    <includes refid="hci_8h" local="no">bluetooth/hci.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includedby refid="audio_8h" local="no">include/bluetooth/audio/audio.h</includedby>
    <includedby refid="iso_8h" local="no">include/bluetooth/iso.h</includedby>
    <includedby refid="l2cap_8h" local="no">include/bluetooth/l2cap.h</includedby>
    <includedby refid="rfcomm_8h" local="no">include/bluetooth/rfcomm.h</includedby>
    <includedby refid="hci__driver_8h" local="no">include/drivers/bluetooth/hci_driver.h</includedby>
    <incdepgraph>
      <node id="15">
        <label>bluetooth/addr.h</label>
        <link refid="addr_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>bluetooth/bluetooth.h</label>
        <link refid="bluetooth_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/buf.h</label>
        <link refid="bluetooth_2buf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>bluetooth/conn.h</label>
        <link refid="conn_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>bluetooth/crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>bluetooth/direction.h</label>
        <link refid="direction_8h"/>
      </node>
      <node id="22">
        <label>bluetooth/gap.h</label>
        <link refid="gap_8h"/>
      </node>
      <node id="12">
        <label>bluetooth/hci.h</label>
        <link refid="hci_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>bluetooth/hci_err.h</label>
        <link refid="hci__err_8h"/>
      </node>
      <node id="5">
        <label>net/buf.h</label>
        <link refid="net_2buf_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="7">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="14">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="11">
        <label>zephyr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>include/bluetooth/a2dp.h</label>
        <link refid="a2dp_8h"/>
      </node>
      <node id="2">
        <label>include/bluetooth/audio/audio.h</label>
        <link refid="audio_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bluetooth/audio/capabilities.h</label>
        <link refid="capabilities_8h"/>
      </node>
      <node id="6">
        <label>include/bluetooth/avdtp.h</label>
        <link refid="avdtp_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/bluetooth/buf.h</label>
        <link refid="bluetooth_2buf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/bluetooth/iso.h</label>
        <link refid="iso_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/bluetooth/l2cap.h</label>
        <link refid="l2cap_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/bluetooth/rfcomm.h</label>
        <link refid="rfcomm_8h"/>
      </node>
      <node id="9">
        <label>include/drivers/bluetooth/hci_driver.h</label>
        <link refid="hci__driver_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbt__buf__data" prot="public">bt_buf_data</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__bt__buf_1ga41f80f3995e79982f704f832394a6bef" prot="public" static="no">
        <name>BT_BUF_RESERVE</name>
        <initializer>CONFIG_BT_HCI_RESERVE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="56" column="10" bodyfile="include/bluetooth/buf.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1ga9c114a415dc8fc2b84503736b1283468" prot="public" static="no">
        <name>BT_BUF_SIZE</name>
        <param><defname>size</defname></param>
        <initializer>(<ref refid="group__bt__buf_1ga41f80f3995e79982f704f832394a6bef" kindref="member">BT_BUF_RESERVE</ref> + (size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to include reserved HCI data in buffer calculations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="60" column="9" bodyfile="include/bluetooth/buf.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1ga8f570211d5e391be63bd46c189eac637" prot="public" static="no">
        <name>BT_BUF_ACL_SIZE</name>
        <param><defname>size</defname></param>
        <initializer><ref refid="group__bt__buf_1ga9c114a415dc8fc2b84503736b1283468" kindref="member">BT_BUF_SIZE</ref>(<ref refid="hci_8h_1a7418d845532d6b077a9695454fa65bc5" kindref="member">BT_HCI_ACL_HDR_SIZE</ref> + (size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to calculate needed buffer size for HCI ACL packets </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="63" column="9" bodyfile="include/bluetooth/buf.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1ga098d042ed58592d7c2428967928ee478" prot="public" static="no">
        <name>BT_BUF_EVT_SIZE</name>
        <param><defname>size</defname></param>
        <initializer><ref refid="group__bt__buf_1ga9c114a415dc8fc2b84503736b1283468" kindref="member">BT_BUF_SIZE</ref>(<ref refid="hci_8h_1a0edb7e700cfa557e7fb8ec44f5eea961" kindref="member">BT_HCI_EVT_HDR_SIZE</ref> + (size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to calculate needed buffer size for HCI Event packets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="66" column="9" bodyfile="include/bluetooth/buf.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1ga9dc9de00be5e8bf673ec60921ea6681b" prot="public" static="no">
        <name>BT_BUF_CMD_SIZE</name>
        <param><defname>size</defname></param>
        <initializer><ref refid="group__bt__buf_1ga9c114a415dc8fc2b84503736b1283468" kindref="member">BT_BUF_SIZE</ref>(<ref refid="hci_8h_1acdf2b6de1459a7492415a8987ad9a896" kindref="member">BT_HCI_CMD_HDR_SIZE</ref> + (size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to calculate needed buffer size for HCI Command packets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="69" column="9" bodyfile="include/bluetooth/buf.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1gaa820dee05a7202304e1aaa9a36386ca4" prot="public" static="no">
        <name>BT_BUF_ISO_SIZE</name>
        <param><defname>size</defname></param>
        <initializer>					  <ref refid="group__bt__buf_1ga9c114a415dc8fc2b84503736b1283468" kindref="member">BT_BUF_SIZE</ref>(<ref refid="hci_8h_1a75c1f5e8a44b034004ecfebdb75ee4be" kindref="member">BT_HCI_ISO_HDR_SIZE</ref> + \
					  <ref refid="hci_8h_1a7c351e4eb31cdd5469cfecbbff0a1db0" kindref="member">BT_HCI_ISO_DATA_HDR_SIZE</ref> + \
					  (size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper to calculate needed buffer size for HCI ISO packets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="72" column="9" bodyfile="include/bluetooth/buf.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1ga3ad106326ce13d6eb61d0ac16f592003" prot="public" static="no">
        <name>BT_BUF_ACL_RX_SIZE</name>
        <initializer><ref refid="group__bt__buf_1ga8f570211d5e391be63bd46c189eac637" kindref="member">BT_BUF_ACL_SIZE</ref>(CONFIG_BT_BUF_ACL_RX_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data size needed for HCI ACL RX buffers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="77" column="9" bodyfile="include/bluetooth/buf.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1gac76caf2a7fce82ba652eab094162ec66" prot="public" static="no">
        <name>BT_BUF_EVT_RX_SIZE</name>
        <initializer><ref refid="group__bt__buf_1ga098d042ed58592d7c2428967928ee478" kindref="member">BT_BUF_EVT_SIZE</ref>(CONFIG_BT_BUF_EVT_RX_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data size needed for HCI Event RX buffers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="80" column="9" bodyfile="include/bluetooth/buf.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1gae5db5f9f282f9675fe620842e0c50337" prot="public" static="no">
        <name>BT_BUF_ISO_RX_SIZE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="86" column="10" bodyfile="include/bluetooth/buf.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1gac45f7915fff9516d9d156a42794e8221" prot="public" static="no">
        <name>BT_BUF_ISO_RX_COUNT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="87" column="9" bodyfile="include/bluetooth/buf.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1ga3e16a5f4c0c9c4c9117d972b7043d82b" prot="public" static="no">
        <name>BT_BUF_RX_SIZE</name>
        <initializer>			    (<ref refid="group__sys-util_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f" kindref="member">MAX</ref>(<ref refid="group__sys-util_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f" kindref="member">MAX</ref>(<ref refid="group__bt__buf_1ga3ad106326ce13d6eb61d0ac16f592003" kindref="member">BT_BUF_ACL_RX_SIZE</ref>, <ref refid="group__bt__buf_1gac76caf2a7fce82ba652eab094162ec66" kindref="member">BT_BUF_EVT_RX_SIZE</ref>), \
			    <ref refid="group__bt__buf_1gae5db5f9f282f9675fe620842e0c50337" kindref="member">BT_BUF_ISO_RX_SIZE</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data size needed for HCI ACL, HCI ISO or Event RX buffers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="91" column="9" bodyfile="include/bluetooth/buf.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1gaa3ab0861dfd4ebc5f7485f36c1b0fdf1" prot="public" static="no">
        <name>BT_BUF_RX_COUNT</name>
        <initializer>				 (<ref refid="group__sys-util_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f" kindref="member">MAX</ref>(<ref refid="group__sys-util_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f" kindref="member">MAX</ref>(CONFIG_BT_BUF_EVT_RX_COUNT, \
				 CONFIG_BT_BUF_ACL_RX_COUNT), \
			     <ref refid="group__bt__buf_1gac45f7915fff9516d9d156a42794e8221" kindref="member">BT_BUF_ISO_RX_COUNT</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Buffer count needed for HCI ACL, HCI ISO or Event RX buffers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="95" column="9" bodyfile="include/bluetooth/buf.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__bt__buf_1ga366c2eee5dcc6056430b203d1c020042" prot="public" static="no">
        <name>BT_BUF_CMD_TX_SIZE</name>
        <initializer><ref refid="group__bt__buf_1ga9dc9de00be5e8bf673ec60921ea6681b" kindref="member">BT_BUF_CMD_SIZE</ref>(CONFIG_BT_BUF_CMD_TX_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data size needed for HCI Command buffers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="100" column="9" bodyfile="include/bluetooth/buf.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" prot="public" static="no" strong="no">
        <type></type>
        <name>bt_buf_type</name>
        <enumvalue id="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baead9b640992dd72bd90ebd5d1fa3aaf1" prot="public">
          <name>BT_BUF_CMD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HCI command </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba350a2419b238423e479203a61d45a6e5" prot="public">
          <name>BT_BUF_EVT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HCI event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba4332d09d0ae276cf48aa550cf2ab4091" prot="public">
          <name>BT_BUF_ACL_OUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Outgoing ACL data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baff31d58d06bf1d330f570bf8f1600c13" prot="public">
          <name>BT_BUF_ACL_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Incoming ACL data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba4137aa547b58a7dbf69ef9c29127fa7e" prot="public">
          <name>BT_BUF_ISO_OUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Outgoing ISO data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7badd49c17ef6b2f452c9172fce6f96fb9e" prot="public">
          <name>BT_BUF_ISO_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Incoming ISO data </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baf9a0d91bbd7c45c285615c6e4d9e5b57" prot="public">
          <name>BT_BUF_H4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>H:4 data </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible types of buffers passed around the Bluetooth stack </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="31" column="1" bodyfile="include/bluetooth/buf.h" bodystart="31" bodyend="46"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bt__buf_1ga4013cce9637f5aa2742d1f1aaa00e7ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * bt_buf_get_rx</definition>
        <argsstring>(enum bt_buf_type type, k_timeout_t timeout)</argsstring>
        <name>bt_buf_get_rx</name>
        <param>
          <type>enum <ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a buffer for incoming data</para>
<para>This will set the buffer type so <ref refid="group__bt__buf_1gaec645aec3d6fb845f214c07f2a864fec" kindref="member">bt_buf_set_type()</ref> does not need to be explicitly called before <ref refid="group__bt__hci__driver_1ga19c61df1660d6049ae6b03afe3554fee" kindref="member">bt_recv_prio()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of buffer. Only BT_BUF_EVT and BT_BUF_ACL_IN are allowed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to obtain a buffer or one of the special values K_NO_WAIT and K_FOREVER. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="113" column="14" declfile="include/bluetooth/buf.h" declline="113" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__buf_1ga761a31b7fb19f2325b3a9ac6b1fb1700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * bt_buf_get_tx</definition>
        <argsstring>(enum bt_buf_type type, k_timeout_t timeout, const void *data, size_t size)</argsstring>
        <name>bt_buf_get_tx</name>
        <param>
          <type>enum <ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a buffer for outgoing data</para>
<para>This will set the buffer type so <ref refid="group__bt__buf_1gaec645aec3d6fb845f214c07f2a864fec" kindref="member">bt_buf_set_type()</ref> does not need to be explicitly called before <ref refid="group__hci__raw_1ga8de934e01eb9a16a3c9d096151e58313" kindref="member">bt_send()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of buffer. Only BT_BUF_CMD, BT_BUF_ACL_OUT or BT_BUF_H4, when operating on H:4 mode, are allowed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to obtain a buffer or one of the special values K_NO_WAIT and K_FOREVER. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial data to append to buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial data size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="128" column="14" declfile="include/bluetooth/buf.h" declline="128" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__buf_1ga8d38c64230d8e3b6bc30122f2f40afb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * bt_buf_get_cmd_complete</definition>
        <argsstring>(k_timeout_t timeout)</argsstring>
        <name>bt_buf_get_cmd_complete</name>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a buffer for an HCI Command Complete/Status Event</para>
<para>This will set the buffer type so <ref refid="group__bt__buf_1gaec645aec3d6fb845f214c07f2a864fec" kindref="member">bt_buf_set_type()</ref> does not need to be explicitly called before <ref refid="group__bt__hci__driver_1ga19c61df1660d6049ae6b03afe3554fee" kindref="member">bt_recv_prio()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to obtain a buffer or one of the special values K_NO_WAIT and K_FOREVER. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="140" column="14" declfile="include/bluetooth/buf.h" declline="140" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__buf_1ga7b7a19302881dea458fbd2e9e2309b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
        <definition>struct net_buf * bt_buf_get_evt</definition>
        <argsstring>(uint8_t evt, bool discardable, k_timeout_t timeout)</argsstring>
        <name>bt_buf_get_evt</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>evt</declname>
        </param>
        <param>
          <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
          <declname>discardable</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a buffer for an HCI Event</para>
<para>This will set the buffer type so <ref refid="group__bt__buf_1gaec645aec3d6fb845f214c07f2a864fec" kindref="member">bt_buf_set_type()</ref> does not need to be explicitly called before <ref refid="group__bt__hci__driver_1ga19c61df1660d6049ae6b03afe3554fee" kindref="member">bt_recv_prio()</ref> or <ref refid="group__bt__hci__driver_1gaca80bc9dacc4fa44416bd545bd185ef7" kindref="member">bt_recv()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>HCI event code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>discardable</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the driver considers the event discardable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-negative waiting period to obtain a buffer or one of the special values K_NO_WAIT and K_FOREVER. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="153" column="14" declfile="include/bluetooth/buf.h" declline="153" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__buf_1gaec645aec3d6fb845f214c07f2a864fec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bt_buf_set_type</definition>
        <argsstring>(struct net_buf *buf, enum bt_buf_type type)</argsstring>
        <name>bt_buf_set_type</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>enum <ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the buffer type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The BT_* type to set the buffer to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="160" column="20" bodyfile="include/bluetooth/buf.h" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="group__bt__buf_1ga2e35f0593e54d28bad62d6b8933f1599" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>enum <ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref></type>
        <definition>static enum bt_buf_type bt_buf_get_type</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>bt_buf_get_type</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the buffer type</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Bluetooth buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The BT_* type to of the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/buf.h" line="171" column="31" bodyfile="include/bluetooth/buf.h" bodystart="171" bodyend="175"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bluetooth data buffer API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_BLUETOOTH_BUF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_BLUETOOTH_BUF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="net_2buf_8h" kindref="compound">net/buf.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hci_8h" kindref="compound">bluetooth/hci.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref><sp/>{</highlight></codeline>
<codeline lineno="33" refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baead9b640992dd72bd90ebd5d1fa3aaf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baead9b640992dd72bd90ebd5d1fa3aaf1" kindref="member">BT_BUF_CMD</ref>,</highlight></codeline>
<codeline lineno="35" refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba350a2419b238423e479203a61d45a6e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba350a2419b238423e479203a61d45a6e5" kindref="member">BT_BUF_EVT</ref>,</highlight></codeline>
<codeline lineno="37" refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba4332d09d0ae276cf48aa550cf2ab4091" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba4332d09d0ae276cf48aa550cf2ab4091" kindref="member">BT_BUF_ACL_OUT</ref>,</highlight></codeline>
<codeline lineno="39" refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baff31d58d06bf1d330f570bf8f1600c13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baff31d58d06bf1d330f570bf8f1600c13" kindref="member">BT_BUF_ACL_IN</ref>,</highlight></codeline>
<codeline lineno="41" refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba4137aa547b58a7dbf69ef9c29127fa7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7ba4137aa547b58a7dbf69ef9c29127fa7e" kindref="member">BT_BUF_ISO_OUT</ref>,</highlight></codeline>
<codeline lineno="43" refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7badd49c17ef6b2f452c9172fce6f96fb9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7badd49c17ef6b2f452c9172fce6f96fb9e" kindref="member">BT_BUF_ISO_IN</ref>,</highlight></codeline>
<codeline lineno="45" refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baf9a0d91bbd7c45c285615c6e4d9e5b57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__bt__buf_1ggafe1539a89ba3389d52d010a071620d7baf9a0d91bbd7c45c285615c6e4d9e5b57" kindref="member">BT_BUF_H4</ref>,</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structbt__buf__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__buf__data" kindref="compound">bt_buf_data</ref><sp/>{</highlight></codeline>
<codeline lineno="50" refid="structbt__buf__data_1a4001ab2a10e2970ce19cc7e0d25a0896" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structbt__buf__data_1a4001ab2a10e2970ce19cc7e0d25a0896" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_BT_HCI_RAW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_RESERVE<sp/>MAX(CONFIG_BT_HCI_RESERVE,<sp/>CONFIG_BT_HCI_RAW_RESERVE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__bt__buf_1ga41f80f3995e79982f704f832394a6bef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_RESERVE<sp/>CONFIG_BT_HCI_RESERVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group__bt__buf_1ga9c114a415dc8fc2b84503736b1283468" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_SIZE(size)<sp/>(BT_BUF_RESERVE<sp/>+<sp/>(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="group__bt__buf_1ga8f570211d5e391be63bd46c189eac637" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_ACL_SIZE(size)<sp/>BT_BUF_SIZE(BT_HCI_ACL_HDR_SIZE<sp/>+<sp/>(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="group__bt__buf_1ga098d042ed58592d7c2428967928ee478" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_EVT_SIZE(size)<sp/>BT_BUF_SIZE(BT_HCI_EVT_HDR_SIZE<sp/>+<sp/>(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group__bt__buf_1ga9dc9de00be5e8bf673ec60921ea6681b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_CMD_SIZE(size)<sp/>BT_BUF_SIZE(BT_HCI_CMD_HDR_SIZE<sp/>+<sp/>(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="group__bt__buf_1gaa820dee05a7202304e1aaa9a36386ca4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_ISO_SIZE(size)<sp/>BT_BUF_SIZE(BT_HCI_ISO_HDR_SIZE<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_HCI_ISO_DATA_HDR_SIZE<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="group__bt__buf_1ga3ad106326ce13d6eb61d0ac16f592003" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_ACL_RX_SIZE<sp/>BT_BUF_ACL_SIZE(CONFIG_BT_BUF_ACL_RX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="group__bt__buf_1gac76caf2a7fce82ba652eab094162ec66" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_EVT_RX_SIZE<sp/>BT_BUF_EVT_SIZE(CONFIG_BT_BUF_EVT_RX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_BT_ISO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_ISO_RX_SIZE<sp/>BT_BUF_ISO_SIZE(CONFIG_BT_ISO_RX_MTU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_ISO_RX_COUNT<sp/>CONFIG_BT_ISO_RX_BUF_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="group__bt__buf_1gae5db5f9f282f9675fe620842e0c50337" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_ISO_RX_SIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="group__bt__buf_1gac45f7915fff9516d9d156a42794e8221" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_ISO_RX_COUNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_BT_ISO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__bt__buf_1ga3e16a5f4c0c9c4c9117d972b7043d82b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_RX_SIZE<sp/>(MAX(MAX(BT_BUF_ACL_RX_SIZE,<sp/>BT_BUF_EVT_RX_SIZE),<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_BUF_ISO_RX_SIZE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group__bt__buf_1gaa3ab0861dfd4ebc5f7485f36c1b0fdf1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_RX_COUNT<sp/>(MAX(MAX(CONFIG_BT_BUF_EVT_RX_COUNT,<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONFIG_BT_BUF_ACL_RX_COUNT),<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT_BUF_ISO_RX_COUNT))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="group__bt__buf_1ga366c2eee5dcc6056430b203d1c020042" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_BUF_CMD_TX_SIZE<sp/>BT_BUF_CMD_SIZE(CONFIG_BT_BUF_CMD_TX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="group__bt__buf_1ga4013cce9637f5aa2742d1f1aaa00e7ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__bt__buf_1ga4013cce9637f5aa2742d1f1aaa00e7ee" kindref="member">bt_buf_get_rx</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref><sp/>type,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group__bt__buf_1ga761a31b7fb19f2325b3a9ac6b1fb1700" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__bt__buf_1ga761a31b7fb19f2325b3a9ac6b1fb1700" kindref="member">bt_buf_get_tx</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref><sp/>type,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__bt__buf_1ga8d38c64230d8e3b6bc30122f2f40afb7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__bt__buf_1ga8d38c64230d8e3b6bc30122f2f40afb7" kindref="member">bt_buf_get_cmd_complete</ref>(<ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="group__bt__buf_1ga7b7a19302881dea458fbd2e9e2309b30" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*<ref refid="group__bt__buf_1ga7b7a19302881dea458fbd2e9e2309b30" kindref="member">bt_buf_get_evt</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>evt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>discardable,<sp/><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a4c6a88cdddeff1bdde597c2658c9e7d2" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="group__bt__buf_1gaec645aec3d6fb845f214c07f2a864fec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__bt__buf_1gaec645aec3d6fb845f214c07f2a864fec" kindref="member">bt_buf_set_type</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref><sp/>type)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__buf__data" kindref="compound">bt_buf_data</ref><sp/>*)<ref refid="group__net__buf_1gaf2df457abe3e56d47107b76bdc004756" kindref="member">net_buf_user_data</ref>(buf))-&gt;<ref refid="structbt__buf__data_1a4001ab2a10e2970ce19cc7e0d25a0896" kindref="member">type</ref><sp/>=<sp/><ref refid="structbt__buf__data_1a4001ab2a10e2970ce19cc7e0d25a0896" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="group__bt__buf_1ga2e35f0593e54d28bad62d6b8933f1599" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref><sp/><ref refid="group__bt__buf_1ga2e35f0593e54d28bad62d6b8933f1599" kindref="member">bt_buf_get_type</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__bt__buf_1gafe1539a89ba3389d52d010a071620d7b" kindref="member">bt_buf_type</ref>)((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__buf__data" kindref="compound">bt_buf_data</ref><sp/>*)<ref refid="group__net__buf_1gaf2df457abe3e56d47107b76bdc004756" kindref="member">net_buf_user_data</ref>(buf))</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<ref refid="structbt__buf__data_1a4001ab2a10e2970ce19cc7e0d25a0896" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_BLUETOOTH_BUF_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/buf.h"/>
  </compounddef>
</doxygen>
