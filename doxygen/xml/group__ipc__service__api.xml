<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__ipc__service__api" kind="group">
    <compoundname>ipc_service_api</compoundname>
    <title>IPC service APIs</title>
    <innerclass refid="structipc__service__cb" prot="public">ipc_service_cb</innerclass>
    <innerclass refid="structipc__ept" prot="public">ipc_ept</innerclass>
    <innerclass refid="structipc__ept__cfg" prot="public">ipc_ept_cfg</innerclass>
    <innerclass refid="structipc__service__backend" prot="public">ipc_service_backend</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ipc__service__api_1gafef0b817299aedc870a004ab223bd20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipc_service_open_instance</definition>
        <argsstring>(const struct device *instance)</argsstring>
        <name>ipc_service_open_instance</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Open an instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to be used to open an instance before being able to register a new endpoint on it.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when instance configuration is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>when no backend is registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>when the instance is already opened (or being opened).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success or when not implemented on the backend (not needed). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>errno codes depending on the implementation of the backend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ipc/ipc_service.h" line="131" column="5" declfile="include/ipc/ipc_service.h" declline="131" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ipc__service__api_1gabfb8bab2e2e8cfe8908a050d4844666b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipc_service_register_endpoint</definition>
        <argsstring>(const struct device *instance, struct ipc_ept *ept, const struct ipc_ept_cfg *cfg)</argsstring>
        <name>ipc_service_register_endpoint</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>struct <ref refid="structipc__ept" kindref="compound">ipc_ept</ref> *</type>
          <declname>ept</declname>
        </param>
        <param>
          <type>const struct <ref refid="structipc__ept__cfg" kindref="compound">ipc_ept_cfg</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Register IPC endpoint onto an instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Registers IPC endpoint onto an instance to enable communication with a remote device.</para>
<para>The same function registers endpoints for both host and remote devices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to register the endpoint onto. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ept</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>when no backend is registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when instance, endpoint or configuration is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>when the instance is busy.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>errno codes depending on the implementation of the backend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ipc/ipc_service.h" line="152" column="5" declfile="include/ipc/ipc_service.h" declline="152" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ipc__service__api_1gac002253b7436902c6a3e0c93933d23fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ipc_service_send</definition>
        <argsstring>(struct ipc_ept *ept, const void *data, size_t len)</argsstring>
        <name>ipc_service_send</name>
        <param>
          <type>struct <ref refid="structipc__ept" kindref="compound">ipc_ept</ref> *</type>
          <declname>ept</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Send data using given IPC endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ept</parametername>
</parameternamelist>
<parameterdescription>
<para>Registered endpoint by <ref refid="group__ipc__service__api_1gabfb8bab2e2e8cfe8908a050d4844666b" kindref="member">ipc_service_register_endpoint</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to send.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EIO</parametername>
</parameternamelist>
<parameterdescription>
<para>when no backend is registered or send hook is missing from backend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>when instance or endpoint is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBADMSG</parametername>
</parameternamelist>
<parameterdescription>
<para>when the message is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>when the instance is busy.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>errno codes depending on the implementation of the backend. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ipc/ipc_service.h" line="171" column="5" declfile="include/ipc/ipc_service.h" declline="171" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>IPC Service API. </para>
    </briefdescription>
    <detaileddescription>
<para>Some terminology:</para>
<para><itemizedlist>
<listitem><para>INSTANCE: an instance is the external representation of a physical communication channel between two domains / CPUs.</para>
<para>The actual implementation and internal representation of the instance is peculiar to each backend. For example for OpenAMP-based backends, an instance is usually represented by a shared memory region and a couple of IPM devices for RX/TX signalling.</para>
<para>It&apos;s important to note that an instance per se is not used to send data between domains / CPUs. To send and receive data the user have to create (register) an endpoint in the instance connecting the two domains of interest.</para>
<para>It&apos;s possible to have zero or multiple endpoints in one single instance, each one used to exchange data, possibly with different priorities.</para>
<para>The creation of the instances is left to the backend (usually at init time), while the registration of the endpoints is left to the user (usually at run time).</para>
</listitem><listitem><para>ENDPOINT: an endpoint is the entity the user must use to send / receive data between two domains (connected by the instance). An endpoint is always associated to an instance.</para>
</listitem><listitem><para>BACKEND: the backend must take care of at least two different things: <verbatim>     1) creating the instances at init time
     2) creating / registering the endpoints onto an instance at run
        time when requested by the user

     The API doesn&apos;t mandate a way for the backend to create the
     instances but itis strongly recommended to use the DT to retrieve
     the configuration parameters for the instance.
</verbatim> </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
