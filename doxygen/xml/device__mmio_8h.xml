<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="device__mmio_8h" kind="file" language="C++">
    <compoundname>device_mmio.h</compoundname>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="sections_8h" local="no">linker/sections.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="mem__manage_8h" local="no">sys/mem_manage.h</includes>
    <includes refid="sys_2sys__io_8h" local="no">sys/sys_io.h</includes>
    <includedby refid="device_8h" local="no">include/device.h</includedby>
    <includedby refid="loapic_8h" local="no">include/drivers/interrupt_controller/loapic.h</includedby>
    <includedby refid="xen_2console_8h" local="no">include/xen/console.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>linker/section_tags.h</label>
        <link refid="section__tags_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>linker/sections.h</label>
        <link refid="sections_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sys/device_mmio.h</label>
        <link refid="device__mmio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sys/mem_manage.h</label>
        <link refid="mem__manage_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sys/sys_io.h</label>
        <link refid="sys_2sys__io_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="13">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="17">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>syscalls/mem_manage.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>include/arch/x86/arch.h</label>
        <link refid="x86_2arch_8h"/>
      </node>
      <node id="2">
        <label>include/device.h</label>
        <link refid="device_8h"/>
      </node>
      <node id="3">
        <label>include/drivers/interrupt_controller/loapic.h</label>
        <link refid="loapic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/drivers/interrupt_controller/sysapic.h</label>
        <link refid="sysapic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sys/device_mmio.h</label>
        <link refid="device__mmio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/xen/console.h</label>
        <link refid="xen_2console_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__device-mmio_1gabdae30483b01d470c357571e088dc51a" prot="public" static="no">
        <name>DEVICE_MMIO_IS_IN_RAM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="37" column="9" bodyfile="include/sys/device_mmio.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga47e037f86108c8da12d8a9b9a35e6ad5" prot="public" static="no">
        <name>DEVICE_MMIO_RAM</name>
        <initializer><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> _mmio</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare storage for MMIO information within a device&apos;s dev_data struct.</para>
<para>This gets accessed by the <ref refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" kindref="member">DEVICE_MMIO_MAP()</ref> and <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> macros.</para>
<para>Depending on configuration, no memory may be reserved at all. This must be the first member of the data struct.</para>
<para>There must be a corresponding DEVICE_MMIO_ROM in config_info if the physical address is known at build time, but may be omitted if not (such as with PCIe)</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_driver_data { DEVICE_MMIO_RAM; int wibble; ... }</para>
<para>No build-time initialization of this memory is necessary; it will be set up in the init function by <ref refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" kindref="member">DEVICE_MMIO_MAP()</ref>.</para>
<para>A pointer to this memory may be obtained with <ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="157" column="9" bodyfile="include/sys/device_mmio.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" prot="public" static="no">
        <name>DEVICE_MMIO_RAM_PTR</name>
        <param><defname>device</defname></param>
        <initializer>(<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> *)((<ref refid="structdevice" kindref="compound">device</ref>)-&gt;<ref refid="test__stack__fail_8c_1a4bb6fa6c719fd9021449009ab8befc04" kindref="member">data</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the RAM-based storage area for a device&apos;s MMIO address.</para>
<para>This is useful for the target MMIO address location when using <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>device node_id object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>mm_reg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="175" column="9" bodyfile="include/sys/device_mmio.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga1dfb620f6b3c7ee9b2bc54044d0bc875" prot="public" static="no">
        <name>DEVICE_MMIO_ROM</name>
        <initializer>struct z_device_mmio_rom _mmio</initializer>
        <briefdescription>
<para>Declare storage for MMIO data within a device&apos;s config struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This gets accessed by <ref refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" kindref="member">DEVICE_MMIO_MAP()</ref> and <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> macros.</para>
<para>What gets stored here varies considerably by configuration. This must be the first member of the config struct. There must be a corresponding DEVICE_MMIO_RAM in data.</para>
<para>This storage is not used if the device is PCIe and may be omitted.</para>
<para>This should be initialized at build time with information from DTS using <ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT()</ref>.</para>
<para>A pointer to this memory may be obtained with <ref refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" kindref="member">DEVICE_MMIO_ROM_PTR()</ref>.</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_config { DEVICE_MMIO_ROM; int baz; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="206" column="9" bodyfile="include/sys/device_mmio.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" prot="public" static="no">
        <name>DEVICE_MMIO_ROM_PTR</name>
        <param><defname>dev</defname></param>
        <initializer>	((struct z_device_mmio_rom *)((dev)-&gt;config))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the ROM-based storage area for a device&apos;s MMIO information. This macro will not work properly if the ROM storage was omitted from the config struct declaration, and should not be used in this case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device instance object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>struct</parametername>
</parameternamelist>
<parameterdescription>
<para>device_mmio_rom * pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="219" column="9" bodyfile="include/sys/device_mmio.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" prot="public" static="no">
        <name>DEVICE_MMIO_ROM_INIT</name>
        <param><defname>node_id</defname></param>
        <initializer>	._mmio = Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</initializer>
        <briefdescription>
<para>Initialize a DEVICE_MMIO_ROM member. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize MMIO-related information within a specific instance of a device config struct, using information from DTS.</para>
<para>Example for a driver belonging to the &quot;foo&quot; subsystem:</para>
<para>struct foo_config my_config = { <ref refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" kindref="member">DEVICE_MMIO_ROM_INIT(DT_DRV_INST(...))</ref>, .baz = 2; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-single_1ga1dfb620f6b3c7ee9b2bc54044d0bc875" kindref="member">DEVICE_MMIO_ROM()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DTS node_id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="242" column="9" bodyfile="include/sys/device_mmio.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" prot="public" static="no">
        <name>DEVICE_MMIO_MAP</name>
        <param><defname>dev</defname></param>
        <param><defname>flags</defname></param>
        <initializer>	<ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map</ref>(<ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR</ref>(dev), \
		   <ref refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" kindref="member">DEVICE_MMIO_ROM_PTR</ref>(dev)-&gt;phys_addr, \
		   <ref refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" kindref="member">DEVICE_MMIO_ROM_PTR</ref>(dev)-&gt;size, \
		   (<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>))</initializer>
        <briefdescription>
<para>Map MMIO memory into the address space. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not intended for PCIe devices; these must be probed at runtime and you will want to make a <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> call directly, using <ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR()</ref> as the target virtual address location.</para>
<para>The flags argument is currently used for caching mode, which should be one of the DEVICE_CACHE_* macros. Unused bits are reserved for future expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>cache mode flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="262" column="9" bodyfile="include/sys/device_mmio.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" prot="public" static="no">
        <name>DEVICE_MMIO_GET</name>
        <param><defname>dev</defname></param>
        <initializer>(*<ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR</ref>(dev))</initializer>
        <briefdescription>
<para>Obtain the MMIO address for a device. </para>
        </briefdescription>
        <detaileddescription>
<para>For most microcontrollers MMIO addresses can be fixed values known at build time, and we can store this in device-&gt;config, residing in ROM.</para>
<para>However, some devices can only know their MMIO addresses at runtime, because they need to be memory-mapped into the address space, enumerated from PCI, or both.</para>
<para>This macro returns the linear address of the driver&apos;s MMIO region. This is for drivers which have exactly one MMIO region. A call must have been made to <ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map()</ref> in the driver init function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mm_reg_t linear address of the MMIO region </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="291" column="9" bodyfile="include/sys/device_mmio.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga92b6570b0f7bd370bbdfbc4e474151e4" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_RAM</name>
        <param><defname>name</defname></param>
        <initializer><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> name</initializer>
        <briefdescription>
<para>Declare storage for MMIO data within a device&apos;s dev_data struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This gets accessed by the <ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP()</ref> and <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> macros.</para>
<para>Depending on configuration, no memory may be reserved at all. Multiple named regions may be declared.</para>
<para>There must be a corresponding DEVICE_MMIO_ROM in config if the physical address is known at build time, but may be omitted if not (such as with PCIe.</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_driver_data { int blarg; <ref refid="group__device-mmio-named_1ga92b6570b0f7bd370bbdfbc4e474151e4" kindref="member">DEVICE_MMIO_NAMED_RAM(corge)</ref>; <ref refid="group__device-mmio-named_1ga92b6570b0f7bd370bbdfbc4e474151e4" kindref="member">DEVICE_MMIO_NAMED_RAM(grault)</ref>; int wibble; ... }</para>
<para>No build-time initialization of this memory is necessary; it will be set up in the init function by <ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name to use to store within dev_data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="338" column="9" bodyfile="include/sys/device_mmio.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga42737f178f205bd90d4e523ae5d67a09" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_RAM_PTR</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <initializer>		(&amp;(<ref refid="mmio_8c_1aa90b045b0cf3a7fe70c69ba16eb135cc" kindref="member">DEV_DATA</ref>(dev)-&gt;name))</initializer>
        <briefdescription>
<para>Return a pointer to the RAM storage for a device&apos;s named MMIO address. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro requires that the macro DEV_DATA is locally defined and returns a properly typed pointer to the particular dev_data struct for this driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device instance object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name within dev_data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>mm_reg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="356" column="9" bodyfile="include/sys/device_mmio.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_ROM</name>
        <param><defname>name</defname></param>
        <initializer>struct z_device_mmio_rom name</initializer>
        <briefdescription>
<para>Declare storage for MMIO data within a device&apos;s config struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This gets accessed by <ref refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" kindref="member">DEVICE_MMIO_NAMED_MAP()</ref> and <ref refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" kindref="member">DEVICE_MMIO_NAMED_GET()</ref> macros.</para>
<para>What gets stored here varies considerably by configuration. Multiple named regions may be declared. There must be corresponding entries in the dev_data struct.</para>
<para>This storage is not used if the device is PCIe and may be omitted.</para>
<para>If used, this must be initialized at build time with information from DTS using <ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT()</ref></para>
<para>A pointer to this memory may be obtained with <ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR()</ref>.</para>
<para>Example for a driver named &quot;foo&quot;:</para>
<para>struct foo_config { int bar; <ref refid="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" kindref="member">DEVICE_MMIO_NAMED_ROM(corge)</ref>; <ref refid="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" kindref="member">DEVICE_MMIO_NAMED_ROM(grault)</ref>; int baz; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name to store within config </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="393" column="9" bodyfile="include/sys/device_mmio.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_ROM_PTR</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <initializer>(&amp;(<ref refid="mmio_8c_1ab5c3864067257693d9bef98c3fe8fc2b" kindref="member">DEV_CFG</ref>(dev)-&gt;name))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the ROM-based storage area for a device&apos;s MMIO information.</para>
<para>This macro requires that the macro DEV_CFG is locally defined and returns a properly typed pointer to the particular config struct for this driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>device instance object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name within config </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>struct</parametername>
</parameternamelist>
<parameterdescription>
<para>device_mmio_rom * pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="409" column="9" bodyfile="include/sys/device_mmio.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_ROM_INIT</name>
        <param><defname>name</defname></param>
        <param><defname>node_id</defname></param>
        <initializer>	.name = Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</initializer>
        <briefdescription>
<para>Initialize a named DEVICE_MMIO_NAMED_ROM member. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize MMIO-related information within a specific instance of a device config struct, using information from DTS.</para>
<para>Example for an instance of a driver belonging to the &quot;foo&quot; subsystem that will have two regions named &apos;corge&apos; and &apos;grault&apos;:</para>
<para>struct foo_config my_config = { bar = 7; <ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT(corge, DT_DRV_INST(...))</ref>; <ref refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" kindref="member">DEVICE_MMIO_NAMED_ROM_INIT(grault, DT_DRV_INST(...))</ref>; baz = 2; ... }</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" kindref="member">DEVICE_MMIO_NAMED_ROM()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name within config for the MMIO region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DTS node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="435" column="9" bodyfile="include/sys/device_mmio.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_MAP</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <param><defname>flags</defname></param>
        <initializer>	<ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map</ref>(<ref refid="group__device-mmio-named_1ga42737f178f205bd90d4e523ae5d67a09" kindref="member">DEVICE_MMIO_NAMED_RAM_PTR</ref>((dev), name), \
		   (<ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR</ref>((dev), name)-&gt;phys_addr), \
		   (<ref refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" kindref="member">DEVICE_MMIO_NAMED_ROM_PTR</ref>((dev), name)-&gt;size), \
		   (<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>))</initializer>
        <briefdescription>
<para>Set up memory for a named MMIO region. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs the necessary PCI probing and/or MMU virtual memory mapping such that <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET(name)</ref> returns a suitable linear memory address for the MMIO region.</para>
<para>If such operations are not required by the target hardware, this expands to nothing.</para>
<para>This should be called from the driver&apos;s init function, once for each MMIO region that needs to be mapped.</para>
<para>This macro requires that the macros DEV_DATA and DEV_CFG are locally defined and return properly typed pointers to the particular dev_data and config structs for this driver.</para>
<para>The flags argument is currently used for caching mode, which should be one of the DEVICE_CACHE_* macros. Unused bits are reserved for future expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name for MMIO information, as declared with DEVICE_MMIO_NAMED_RAM/DEVICE_MMIO_NAMED_ROM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the DEVICE_CACHE_* caching modes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="467" column="9" bodyfile="include/sys/device_mmio.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" prot="public" static="no">
        <name>DEVICE_MMIO_NAMED_GET</name>
        <param><defname>dev</defname></param>
        <param><defname>name</defname></param>
        <initializer>		(*<ref refid="group__device-mmio-named_1ga42737f178f205bd90d4e523ae5d67a09" kindref="member">DEVICE_MMIO_NAMED_RAM_PTR</ref>((dev), name))</initializer>
        <briefdescription>
<para>Obtain a named MMIO address for a device. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro returns the MMIO base address for a named region from the appropriate place within the device object&apos;s linked data structures.</para>
<para>This is for drivers which have multiple MMIO regions.</para>
<para>This macro requires that the macros DEV_DATA and DEV_CFG are locally defined and return properly typed pointers to the particular dev_data and config structs for this driver.</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name for MMIO information, as declared with DEVICE_MMIO_NAMED_RAM/DEVICE_MMIO_NAMED_ROM </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mm_reg_t linear address of the MMIO region </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="498" column="9" bodyfile="include/sys/device_mmio.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-toplevel_1gad60e6840b8a9c18c19693da0028c2488" prot="public" static="no">
        <name>DEVICE_MMIO_TOPLEVEL</name>
        <param><defname>name</defname></param>
        <param><defname>node_id</defname></param>
        <initializer>	__pinned_bss \
	<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> Z_TOPLEVEL_RAM_NAME(name); \
	__pinned_rodata \
	const struct z_device_mmio_rom Z_TOPLEVEL_ROM_NAME(name) = \
		Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</initializer>
        <briefdescription>
<para>Declare top-level storage for MMIO information, global scope. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for drivers which do not use Zephyr&apos;s driver model of config/dev_data linked to a struct device.</para>
<para>Instead, this is a top-level declaration for the driver&apos;s C file. The scope of this declaration is global and may be referenced by other C files, using DEVICE_MMIO_TOPLEVEL_DECLARE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Base symbol name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Device-tree node identifier for this region </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="543" column="9" bodyfile="include/sys/device_mmio.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-toplevel_1ga8a712886defe59972f4cf00bb2266f95" prot="public" static="no">
        <name>DEVICE_MMIO_TOPLEVEL_DECLARE</name>
        <param><defname>name</defname></param>
        <initializer>	extern <ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> Z_TOPLEVEL_RAM_NAME(name); \
	extern const struct z_device_mmio_rom Z_TOPLEVEL_ROM_NAME(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide an extern reference to a top-level MMIO region</para>
<para>If a top-level MMIO region defined with DEVICE_MMIO_DEFINE needs to be referenced from other C files, this macro provides the necessary extern definitions.</para>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-toplevel_1gad60e6840b8a9c18c19693da0028c2488" kindref="member">DEVICE_MMIO_TOPLEVEL</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the top-level MMIO region </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="571" column="9" bodyfile="include/sys/device_mmio.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-toplevel_1ga80456633db67dbb23d32e2ae7cc93512" prot="public" static="no">
        <name>DEVICE_MMIO_TOPLEVEL_STATIC</name>
        <param><defname>name</defname></param>
        <param><defname>node_id</defname></param>
        <initializer>	__pinned_bss \
	static <ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> Z_TOPLEVEL_RAM_NAME(name); \
	__pinned_rodata \
	static const struct z_device_mmio_rom Z_TOPLEVEL_ROM_NAME(name) = \
		Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</initializer>
        <briefdescription>
<para>Declare top-level storage for MMIO information, static scope. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for drivers which do not use Zephyr&apos;s driver model of config/dev_data linked to a struct device.</para>
<para>Instead, this is a top-level declaration for the driver&apos;s C file. The scope of this declaration is static.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the top-level MMIO region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Device-tree node identifier for this region </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="594" column="9" bodyfile="include/sys/device_mmio.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-toplevel_1ga746bfe0c817dbd60f1c1f60d47f1560e" prot="public" static="no">
        <name>DEVICE_MMIO_TOPLEVEL_RAM_PTR</name>
        <param><defname>name</defname></param>
        <initializer>&amp;Z_TOPLEVEL_RAM_NAME(name)</initializer>
        <briefdescription>
<para>Return a pointer to the RAM storage for a device&apos;s toplevel MMIO address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of toplevel MMIO region </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>mm_reg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="617" column="9" bodyfile="include/sys/device_mmio.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-toplevel_1ga2877cda5f9780ecff45a4abe150e2504" prot="public" static="no">
        <name>DEVICE_MMIO_TOPLEVEL_ROM_PTR</name>
        <param><defname>name</defname></param>
        <initializer>&amp;Z_TOPLEVEL_ROM_NAME(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the ROM-based storage area for a toplevel MMIO region.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>MMIO region name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>struct</parametername>
</parameternamelist>
<parameterdescription>
<para>device_mmio_rom * pointer to storage location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="628" column="9" bodyfile="include/sys/device_mmio.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-toplevel_1ga6533dfab1e1bab2a11654abf4231379b" prot="public" static="no">
        <name>DEVICE_MMIO_TOPLEVEL_MAP</name>
        <param><defname>name</defname></param>
        <param><defname>flags</defname></param>
        <initializer>	<ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map</ref>(&amp;Z_TOPLEVEL_RAM_NAME(name), \
		   Z_TOPLEVEL_ROM_NAME(name).phys_addr, \
		   Z_TOPLEVEL_ROM_NAME(name).size, <ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>)</initializer>
        <briefdescription>
<para>Set up memory for a driver&apos;sMMIO region. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs the necessary MMU virtual memory mapping such that <ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET()</ref> returns a suitable linear memory address for the MMIO region.</para>
<para>If such operations are not required by the target hardware, this expands to nothing.</para>
<para>This should be called once from the driver&apos;s init function.</para>
<para>The flags argument is currently used for caching mode, which should be one of the DEVICE_CACHE_* macros. Unused bits are reserved for future expansion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the top-level MMIO region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the DEVICE_CACHE_* caching modes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="652" column="9" bodyfile="include/sys/device_mmio.h" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" prot="public" static="no">
        <name>DEVICE_MMIO_TOPLEVEL_GET</name>
        <param><defname>name</defname></param>
        <initializer>		((<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref>)Z_TOPLEVEL_RAM_NAME(name))</initializer>
        <briefdescription>
<para>Obtain the MMIO address for a device declared top-level. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" kindref="member">DEVICE_MMIO_GET</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the top-level MMIO region </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mm_reg_t linear address of the MMIO region </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="671" column="9" bodyfile="include/sys/device_mmio.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__boot_func void</type>
        <definition>static __boot_func void device_map</definition>
        <argsstring>(mm_reg_t *virt_addr, uintptr_t phys_addr, size_t size, uint32_t flags)</argsstring>
        <name>device_map</name>
        <param>
          <type><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref> *</type>
          <declname>virt_addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>phys_addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set linear address for device MMIO access</para>
<para>This function sets the <computeroutput>virt_addr</computeroutput> parameter to the correct linear address for the MMIO region.</para>
<para>If the MMU is enabled, mappings may be created in the page tables.</para>
<para>Normally, only a caching mode needs to be set for the &apos;flags&apos; parameter. The mapped linear address will have read-write access to supervisor mode.</para>
<para><simplesect kind="see"><para>k_map()</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>virt_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Output linear address storage location, most users will want some <ref refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" kindref="member">DEVICE_MMIO_RAM_PTR()</ref> value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phys_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical address base of the MMIO region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the MMIO region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Caching mode and access flags, see K_MEM_CACHE_* and K_MEM_PERM_* macros </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/device_mmio.h" line="86" column="20" bodyfile="include/sys/device_mmio.h" bodystart="86" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Definitions<sp/>and<sp/>helper<sp/>macros<sp/>for<sp/>managing<sp/>driver<sp/>memory-mapped</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>input/output<sp/>(MMIO)<sp/>regions<sp/>appropriately<sp/>in<sp/>either<sp/>RAM<sp/>or<sp/>ROM.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>In<sp/>most<sp/>cases<sp/>drivers<sp/>will<sp/>just<sp/>want<sp/>to<sp/>include<sp/>device.h,<sp/>but</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>including<sp/>this<sp/>separately<sp/>may<sp/>be<sp/>needed<sp/>for<sp/>arch-level<sp/>driver<sp/>code</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>which<sp/>uses<sp/>the<sp/>DEVICE_MMIO_TOPLEVEL<sp/>variants<sp/>and<sp/>including<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>main<sp/>device.h<sp/>would<sp/>introduce<sp/>header<sp/>dependency<sp/>loops<sp/>due<sp/>to<sp/>that</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>header&apos;s<sp/>reliance<sp/>on<sp/>kernel.h.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_DEVICE_MMIO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_DEVICE_MMIO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sections_8h" kindref="compound">linker/sections.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Storing<sp/>MMIO<sp/>addresses<sp/>in<sp/>RAM<sp/>is<sp/>a<sp/>system-wide<sp/>decision<sp/>based<sp/>on</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>configuration.<sp/>This<sp/>is<sp/>just<sp/>used<sp/>to<sp/>simplify<sp/>some<sp/>other<sp/>definitions.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>If<sp/>we<sp/>have<sp/>an<sp/>MMU<sp/>enabled,<sp/>all<sp/>physical<sp/>MMIO<sp/>regions<sp/>must<sp/>be<sp/>mapped<sp/>into</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>the<sp/>kernel&apos;s<sp/>virtual<sp/>address<sp/>space<sp/>at<sp/>runtime,<sp/>this<sp/>is<sp/>a<sp/>hard<sp/>requirement.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>If<sp/>we<sp/>have<sp/>PCIE<sp/>enabled,<sp/>this<sp/>does<sp/>mean<sp/>that<sp/>non-PCIE<sp/>drivers<sp/>may<sp/>waste</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>a<sp/>bit<sp/>of<sp/>RAM,<sp/>but<sp/>systems<sp/>with<sp/>PCI<sp/>express<sp/>are<sp/>not<sp/>RAM<sp/>constrained.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_MMU)<sp/>||<sp/>defined(CONFIG_PCIE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__device-mmio_1gabdae30483b01d470c357571e088dc51a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMLANGUAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="mem__manage_8h" kindref="compound">sys/mem_manage.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sys_2sys__io_8h" kindref="compound">sys/sys_io.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>physical<sp/>address<sp/>and<sp/>size<sp/>from<sp/>DTS,<sp/>we&apos;ll<sp/>memory</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>map<sp/>into<sp/>the<sp/>virtual<sp/>address<sp/>space<sp/>at<sp/>runtime.<sp/>This<sp/>is<sp/>not<sp/>applicable</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>to<sp/>PCIe<sp/>devices,<sp/>which<sp/>must<sp/>query<sp/>the<sp/>bus<sp/>for<sp/>BAR<sp/>information.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_device_mmio_rom<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>phys_addr;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.phys_addr<sp/>=<sp/>DT_REG_ADDR(node_id),<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/>=<sp/>DT_REG_SIZE(node_id)<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">__boot_func</highlight></codeline>
<codeline lineno="86" refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__device-mmio_1ga6b4a9841a5176104e1b63f7475d3d2a2" kindref="member">device_map</ref>(<ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>*virt_addr,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>phys_addr,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_MMU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pass<sp/>along<sp/>flags<sp/>and<sp/>add<sp/>that<sp/>we<sp/>want<sp/>supervisor<sp/>mode</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>read-write<sp/>access.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_phys_map((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>**)virt_addr,<sp/>phys_addr,<sp/>size,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>|<sp/><ref refid="mem__manage_8h_1ab9ea94b7155e276f0b653bc1a081866e" kindref="member">K_MEM_PERM_RW</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(size);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*virt_addr<sp/>=<sp/>phys_addr;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_MMU<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>No<sp/>MMU<sp/>or<sp/>PCIe.<sp/>Just<sp/>store<sp/>the<sp/>address<sp/>from<sp/>DTS<sp/>and<sp/>treat<sp/>as<sp/>a<sp/>linear</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>address</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_device_mmio_rom<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys_2sys__io_8h_1a7bcfa789a44940bccc5b9b98642744b0" kindref="member">mm_reg_t</ref><sp/>addr;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)<sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addr<sp/>=<sp/>DT_REG_ADDR(node_id)<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="group__device-mmio-single_1ga47e037f86108c8da12d8a9b9a35e6ad5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_RAM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mm_reg_t<sp/>_mmio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="group__device-mmio-single_1ga63f871dc2ec4c89839a1782e86e292bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_RAM_PTR(device)<sp/><sp/><sp/><sp/><sp/>(mm_reg_t<sp/>*)((device)-&gt;data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="group__device-mmio-single_1ga1dfb620f6b3c7ee9b2bc54044d0bc875" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_ROM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>z_device_mmio_rom<sp/>_mmio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="group__device-mmio-single_1ga6246f4c8bc1542d8960d3bda99a592e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_ROM_PTR(dev)<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((struct<sp/>z_device_mmio_rom<sp/>*)((dev)-&gt;config))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="group__device-mmio-single_1ga023516c60725f8c6d62110f74af22549" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_ROM_INIT(node_id)<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>._mmio<sp/>=<sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="group__device-mmio-single_1ga8e15770c4ec118edbefc1ef95f1ace80" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_MAP(dev,<sp/>flags)<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_map(DEVICE_MMIO_RAM_PTR(dev),<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_MMIO_ROM_PTR(dev)-&gt;phys_addr,<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEVICE_MMIO_ROM_PTR(dev)-&gt;size,<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(flags))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_MAP(dev,<sp/>flags)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="group__device-mmio-single_1ga8cb49d87ef6dc3b017d5b68860530b63" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_GET(dev)<sp/><sp/><sp/><sp/>(*DEVICE_MMIO_RAM_PTR(dev))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_GET(dev)<sp/><sp/><sp/><sp/>(DEVICE_MMIO_ROM_PTR(dev)-&gt;addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="group__device-mmio-named_1ga92b6570b0f7bd370bbdfbc4e474151e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_RAM(name)<sp/><sp/><sp/><sp/><sp/>mm_reg_t<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_RAM(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="group__device-mmio-named_1ga42737f178f205bd90d4e523ae5d67a09" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_RAM_PTR(dev,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;(DEV_DATA(dev)-&gt;name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="group__device-mmio-named_1gae3ad012160f657451a3f47487510bffb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_ROM(name)<sp/>struct<sp/>z_device_mmio_rom<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="group__device-mmio-named_1ga7f018db0d820b72a782759a4b674de94" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_ROM_PTR(dev,<sp/>name)<sp/>(&amp;(DEV_CFG(dev)-&gt;name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="group__device-mmio-named_1ga727a1946d2a315af720706a9c9e80465" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_ROM_INIT(name,<sp/>node_id)<sp/>\</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="group__device-mmio-named_1ga1059bb0020656ce6597e29c7dd6680c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_MAP(dev,<sp/>name,<sp/>flags)<sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_map(DEVICE_MMIO_NAMED_RAM_PTR((dev),<sp/>name),<sp/>\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DEVICE_MMIO_NAMED_ROM_PTR((dev),<sp/>name)-&gt;phys_addr),<sp/>\</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DEVICE_MMIO_NAMED_ROM_PTR((dev),<sp/>name)-&gt;size),<sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(flags))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_MAP(dev,<sp/>name,<sp/>flags)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="group__device-mmio-named_1ga5ca4b0cf0637f475b5da3b1ec0a7c995" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_GET(dev,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*DEVICE_MMIO_NAMED_RAM_PTR((dev),<sp/>name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_NAMED_GET(dev,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((DEVICE_MMIO_NAMED_ROM_PTR((dev),<sp/>name))-&gt;addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>Z_TOPLEVEL_ROM_NAME(name)<sp/>_CONCAT(z_mmio_rom__,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>Z_TOPLEVEL_RAM_NAME(name)<sp/>_CONCAT(z_mmio_ram__,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="group__device-mmio-toplevel_1gad60e6840b8a9c18c19693da0028c2488" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL(name,<sp/>node_id)<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pinned_bss<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mm_reg_t<sp/>Z_TOPLEVEL_RAM_NAME(name);<sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pinned_rodata<sp/>\</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>struct<sp/>z_device_mmio_rom<sp/>Z_TOPLEVEL_ROM_NAME(name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL(name,<sp/>node_id)<sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pinned_rodata<sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>struct<sp/>z_device_mmio_rom<sp/>Z_TOPLEVEL_ROM_NAME(name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="group__device-mmio-toplevel_1ga8a712886defe59972f4cf00bb2266f95" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_DECLARE(name)<sp/>\</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>mm_reg_t<sp/>Z_TOPLEVEL_RAM_NAME(name);<sp/>\</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>const<sp/>struct<sp/>z_device_mmio_rom<sp/>Z_TOPLEVEL_ROM_NAME(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_DECLARE(name)<sp/>\</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>const<sp/>struct<sp/>z_device_mmio_rom<sp/>Z_TOPLEVEL_ROM_NAME(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594" refid="group__device-mmio-toplevel_1ga80456633db67dbb23d32e2ae7cc93512" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_STATIC(name,<sp/>node_id)<sp/>\</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pinned_bss<sp/>\</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>mm_reg_t<sp/>Z_TOPLEVEL_RAM_NAME(name);<sp/>\</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pinned_rodata<sp/>\</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>z_device_mmio_rom<sp/>Z_TOPLEVEL_ROM_NAME(name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="599"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_STATIC(name,<sp/>node_id)<sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pinned_rodata<sp/>\</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>struct<sp/>z_device_mmio_rom<sp/>Z_TOPLEVEL_ROM_NAME(name)<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_DEVICE_MMIO_ROM_INITIALIZER(node_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617" refid="group__device-mmio-toplevel_1ga746bfe0c817dbd60f1c1f60d47f1560e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_RAM_PTR(name)<sp/>&amp;Z_TOPLEVEL_RAM_NAME(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEVICE_MMIO_IS_IN_RAM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="group__device-mmio-toplevel_1ga2877cda5f9780ecff45a4abe150e2504" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_ROM_PTR(name)<sp/>&amp;Z_TOPLEVEL_ROM_NAME(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="group__device-mmio-toplevel_1ga6533dfab1e1bab2a11654abf4231379b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_MAP(name,<sp/>flags)<sp/>\</highlight></codeline>
<codeline lineno="653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_map(&amp;Z_TOPLEVEL_RAM_NAME(name),<sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_TOPLEVEL_ROM_NAME(name).phys_addr,<sp/>\</highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_TOPLEVEL_ROM_NAME(name).size,<sp/>flags)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_MAP(name,<sp/>flags)<sp/>do<sp/>{<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEVICE_MMIO_IS_IN_RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="group__device-mmio-toplevel_1gaad7ad99277cf2be684bd70c46d358338" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_GET(name)<sp/><sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((mm_reg_t)Z_TOPLEVEL_RAM_NAME(name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEVICE_MMIO_TOPLEVEL_GET(name)<sp/><sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((mm_reg_t)Z_TOPLEVEL_ROM_NAME(name).addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_DEVICE_MMIO_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/device_mmio.h"/>
  </compounddef>
</doxygen>
