<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__edac" kind="group">
    <compoundname>edac</compoundname>
    <title>EDAC API</title>
    <innerclass refid="structedac__driver__api" prot="public">edac_driver_api</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__edac_1ga3eb3da4d056d8e6167083301eb1276d6" prot="public" static="no" strong="no">
        <type></type>
        <name>edac_error_type</name>
        <enumvalue id="group__edac_1gga3eb3da4d056d8e6167083301eb1276d6a941e09125e6040d7114ee17328fd4b02" prot="public">
          <name>EDAC_ERROR_TYPE_DRAM_COR</name>
          <initializer>= BIT(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Correctable error type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__edac_1gga3eb3da4d056d8e6167083301eb1276d6a5b03fd27f37f01171e50c2997bc29a2f" prot="public">
          <name>EDAC_ERROR_TYPE_DRAM_UC</name>
          <initializer>= BIT(1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Uncorrectable error type </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>EDAC error type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="28" column="1" bodyfile="include/drivers/edac.h" bodystart="28" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__edac_1gad058d74c811e77b00730e25f2060cce5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_inject_set_param1</definition>
        <argsstring>(const struct device *dev, uint64_t value)</argsstring>
        <name>edac_inject_set_param1</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set injection parameter param1. </para>
        </briefdescription>
        <detaileddescription>
<para>Set first error injection parameter value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>First injection parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the optional interface is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, other error code otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="78" column="19" bodyfile="include/drivers/edac.h" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1ga9817f47eeaf532e3789816e412eb5077" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_inject_get_param1</definition>
        <argsstring>(const struct device *dev, uint64_t *value)</argsstring>
        <name>edac_inject_get_param1</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get injection parameter param1. </para>
        </briefdescription>
        <detaileddescription>
<para>Get first error injection parameter value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first injection parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the optional interface is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="102" column="19" bodyfile="include/drivers/edac.h" bodystart="102" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1ga9ed608245ba68aee6b235752a87a5c39" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_inject_set_param2</definition>
        <argsstring>(const struct device *dev, uint64_t value)</argsstring>
        <name>edac_inject_set_param2</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set injection parameter param2. </para>
        </briefdescription>
        <detaileddescription>
<para>Set second error injection parameter value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Second injection parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the optional interface is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="127" column="19" bodyfile="include/drivers/edac.h" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1ga37e097d550f91072b890d6c2d4b215fa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_inject_get_param2</definition>
        <argsstring>(const struct device *dev, uint64_t *value)</argsstring>
        <name>edac_inject_get_param2</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get injection parameter param2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second injection parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the optional interface is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="149" column="19" bodyfile="include/drivers/edac.h" bodystart="149" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1ga2b0ea084501faf52aeec5af33a1ca97b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_inject_set_error_type</definition>
        <argsstring>(const struct device *dev, uint32_t error_type)</argsstring>
        <name>edac_inject_set_error_type</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>error_type</declname>
        </param>
        <briefdescription>
<para>Set error type value. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the value of error type to be injected</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Error type value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the optional interface is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="173" column="19" bodyfile="include/drivers/edac.h" bodystart="173" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1gafb0cbc5082e88250a1e5955dd7d1770c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_inject_get_error_type</definition>
        <argsstring>(const struct device *dev, uint32_t *error_type)</argsstring>
        <name>edac_inject_get_error_type</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>error_type</declname>
        </param>
        <briefdescription>
<para>Get error type value. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the value of error type to be injected</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to error type value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the optional interface is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="197" column="19" bodyfile="include/drivers/edac.h" bodystart="197" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1gaf02830c2e621e73a7c4add38a92f6d7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_inject_error_trigger</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>edac_inject_error_trigger</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Set injection control. </para>
        </briefdescription>
        <detaileddescription>
<para>Trigger error injection.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the optional interface is not implemented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="220" column="19" bodyfile="include/drivers/edac.h" bodystart="220" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1ga905539bb96ff8c9f6f6a9fde6b3928e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_ecc_error_log_get</definition>
        <argsstring>(const struct device *dev, uint64_t *value)</argsstring>
        <name>edac_ecc_error_log_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get ECC Error Log. </para>
        </briefdescription>
        <detaileddescription>
<para>Read value of ECC Error Log.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ECC Error Log value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the mandatory interface is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="245" column="19" bodyfile="include/drivers/edac.h" bodystart="245" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1gaa8c798b60b3b99ae6b8f8358253d1385" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_ecc_error_log_clear</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>edac_ecc_error_log_clear</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Clear ECC Error Log. </para>
        </briefdescription>
        <detaileddescription>
<para>Clear value of ECC Error Log.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the mandatory interface is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="268" column="19" bodyfile="include/drivers/edac.h" bodystart="268" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1gaa6cba09e19de241ed045387c85cc3f1c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_parity_error_log_get</definition>
        <argsstring>(const struct device *dev, uint64_t *value)</argsstring>
        <name>edac_parity_error_log_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get Parity Error Log. </para>
        </briefdescription>
        <detaileddescription>
<para>Read value of Parity Error Log.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the parity Error Log value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the mandatory interface is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="291" column="19" bodyfile="include/drivers/edac.h" bodystart="291" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1gab60aa37ba86e2038fe979481cc6134c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_parity_error_log_clear</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>edac_parity_error_log_clear</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Clear Parity Error Log. </para>
        </briefdescription>
        <detaileddescription>
<para>Clear value of Parity Error Log.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the mandatory interface is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="314" column="19" bodyfile="include/drivers/edac.h" bodystart="314" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1gaea2915b6c3c4eef2c94c6f60e788dcfe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_errors_cor_get</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>edac_errors_cor_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get number of correctable errors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of correctable errors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the mandatory interface is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="334" column="19" bodyfile="include/drivers/edac.h" bodystart="334" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1gaec79969648e56e98031d46abe73c2b82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_errors_uc_get</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>edac_errors_uc_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get number of uncorrectable errors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of uncorrectable errors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the mandatory interface is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="354" column="19" bodyfile="include/drivers/edac.h" bodystart="354" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="group__edac_1ga2def500f72a06271d9a10243bfdf6527" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int edac_notify_callback_set</definition>
        <argsstring>(const struct device *dev, edac_notify_callback_f cb)</argsstring>
        <name>edac_notify_callback_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="edac_8h_1a55c633fa28ca23e06e9c5fefb295d7fe" kindref="member">edac_notify_callback_f</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register callback function for memory error exception</para>
<para>This callback runs in interrupt context</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>EDAC driver device to install callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, error code otherwise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>if the mandatory interface is not implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/edac.h" line="377" column="19" bodyfile="include/drivers/edac.h" bodystart="377" bodyend="387"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
