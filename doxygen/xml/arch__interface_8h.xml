<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="arch__interface_8h" kind="file" language="C++">
    <compoundname>arch_interface.h</compoundname>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes local="no">arch/cpu.h</includes>
    <includes refid="irq__offload_8h" local="no">irq_offload.h</includes>
    <includes refid="include_2timing_2types_8h" local="no">timing/types.h</includes>
    <includes refid="arch__inlines_8h" local="no">arch/arch_inlines.h</includes>
    <includedby refid="include_2arch_2cpu_8h" local="no">include/arch/cpu.h</includedby>
    <includedby refid="syscall__handler_8h" local="no">include/syscall_handler.h</includedby>
    <includedby refid="timing_8h" local="no">include/timing/timing.h</includedby>
    <includedby refid="kernel__arch__interface_8h" local="no">kernel/include/kernel_arch_interface.h</includedby>
    <includedby refid="subsys_2testsuite_2ztest_2include_2arch_2cpu_8h" local="no">subsys/testsuite/ztest/include/arch/cpu.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>arch/arch_inlines.h</label>
        <link refid="arch__inlines_8h"/>
      </node>
      <node id="7">
        <label>irq_offload.h</label>
        <link refid="irq__offload_8h"/>
      </node>
      <node id="1">
        <label>include/sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>timing/types.h</label>
        <link refid="include_2timing_2types_8h"/>
      </node>
      <node id="2">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="4">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="6">
        <label>arch/cpu.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/arch/cpu.h</label>
        <link refid="include_2arch_2cpu_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/cache.h</label>
        <link refid="cache_8h"/>
      </node>
      <node id="8">
        <label>include/device.h</label>
        <link refid="device_8h"/>
      </node>
      <node id="9">
        <label>include/drivers/pcie/endpoint/pcie_ep.h</label>
        <link refid="pcie__ep_8h"/>
      </node>
      <node id="3">
        <label>include/fatal.h</label>
        <link refid="fatal_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/init.h</label>
        <link refid="init_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>include/irq.h</label>
        <link refid="irq_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="184">
        <label>include/posix/pthread.h</label>
        <link refid="pthread_8h"/>
      </node>
      <node id="186">
        <label>include/smf.h</label>
        <link refid="smf_8h"/>
      </node>
      <node id="188">
        <label>include/spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sys/arch_interface.h</label>
        <link refid="arch__interface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>include/syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>include/timeout_q.h</label>
        <link refid="timeout__q_8h"/>
        <childnode refid="183" relation="include">
        </childnode>
      </node>
      <node id="189">
        <label>include/timing/timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="183">
        <label>include/wait_q.h</label>
        <link refid="wait__q_8h"/>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>include/xen/console.h</label>
        <link refid="xen_2console_8h"/>
      </node>
      <node id="185">
        <label>include/zephyr.h</label>
        <link refid="zephyr_8h"/>
        <childnode refid="186" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>kernel/include/kernel_arch_interface.h</label>
        <link refid="kernel__arch__interface_8h"/>
      </node>
      <node id="191">
        <label>subsys/testsuite/ztest/include/arch/cpu.h</label>
        <link refid="subsys_2testsuite_2ztest_2include_2arch_2cpu_8h"/>
      </node>
      <node id="13">
        <label>subsys/testsuite/ztest/include/ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>subsys/testsuite/ztest/include/ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>subsys/testsuite/ztest/include/ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>subsys/testsuite/ztest/include/ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="180">
        <label>subsys/testsuite/ztest/include/ztest_test_new.h</label>
        <link refid="ztest__test__new_8h"/>
      </node>
      <node id="15">
        <label>tests/kernel/common/src/atomic.c</label>
        <link refid="atomic_8c"/>
      </node>
      <node id="16">
        <label>tests/kernel/common/src/bitarray.c</label>
        <link refid="bitarray_8c"/>
      </node>
      <node id="17">
        <label>tests/kernel/common/src/bitfield.c</label>
        <link refid="bitfield_8c"/>
      </node>
      <node id="18">
        <label>tests/kernel/common/src/boot_delay.c</label>
        <link refid="boot__delay_8c"/>
      </node>
      <node id="19">
        <label>tests/kernel/common/src/byteorder.c</label>
        <link refid="byteorder_8c"/>
      </node>
      <node id="20">
        <label>tests/kernel/common/src/clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="21">
        <label>tests/kernel/common/src/errno.c</label>
        <link refid="errno_8c"/>
      </node>
      <node id="22">
        <label>tests/kernel/common/src/irq_offload.c</label>
        <link refid="irq__offload_8c"/>
      </node>
      <node id="23">
        <label>tests/kernel/common/src/main.c</label>
        <link refid="common_2src_2main_8c"/>
      </node>
      <node id="24">
        <label>tests/kernel/common/src/multilib.c</label>
        <link refid="multilib_8c"/>
      </node>
      <node id="25">
        <label>tests/kernel/common/src/printk.c</label>
        <link refid="printk_8c"/>
      </node>
      <node id="26">
        <label>tests/kernel/common/src/timeout_order.c</label>
        <link refid="timeout__order_8c"/>
      </node>
      <node id="27">
        <label>tests/kernel/condvar/condvar_api/src/main.c</label>
        <link refid="condvar_2condvar__api_2src_2main_8c"/>
      </node>
      <node id="28">
        <label>tests/kernel/context/src/main.c</label>
        <link refid="context_2src_2main_8c"/>
      </node>
      <node id="29">
        <label>tests/kernel/device/src/abstract_driver.c</label>
        <link refid="abstract__driver_8c"/>
      </node>
      <node id="30">
        <label>tests/kernel/device/src/abstract_driver.h</label>
        <link refid="abstract__driver_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>tests/kernel/device/src/main.c</label>
        <link refid="device_2src_2main_8c"/>
      </node>
      <node id="32">
        <label>tests/kernel/device/src/mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="33">
        <label>tests/kernel/device/src/test_driver_init.c</label>
        <link refid="test__driver__init_8c"/>
      </node>
      <node id="34">
        <label>tests/kernel/early_sleep/src/main.c</label>
        <link refid="early__sleep_2src_2main_8c"/>
      </node>
      <node id="35">
        <label>tests/kernel/events/event_api/src/main.c</label>
        <link refid="events_2event__api_2src_2main_8c"/>
      </node>
      <node id="36">
        <label>tests/kernel/events/event_api/src/test_event_apis.c</label>
        <link refid="test__event__apis_8c"/>
      </node>
      <node id="37">
        <label>tests/kernel/events/sys_event/src/main.c</label>
        <link refid="events_2sys__event_2src_2main_8c"/>
      </node>
      <node id="38">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="39">
        <label>tests/kernel/fatal/no-multithreading/src/main.c</label>
        <link refid="fatal_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="40">
        <label>tests/kernel/fifo/fifo_api/src/main.c</label>
        <link refid="fifo_2fifo__api_2src_2main_8c"/>
      </node>
      <node id="41">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo.h</label>
        <link refid="test__fifo_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_cancel.c</label>
        <link refid="test__fifo__cancel_8c"/>
      </node>
      <node id="43">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c</label>
        <link refid="test__fifo__contexts_8c"/>
      </node>
      <node id="44">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_fail.c</label>
        <link refid="test__fifo__fail_8c"/>
      </node>
      <node id="45">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_loop.c</label>
        <link refid="test__fifo__loop_8c"/>
      </node>
      <node id="46">
        <label>tests/kernel/fifo/fifo_timeout/src/main.c</label>
        <link refid="fifo_2fifo__timeout_2src_2main_8c"/>
      </node>
      <node id="47">
        <label>tests/kernel/fifo/fifo_usage/src/main.c</label>
        <link refid="fifo_2fifo__usage_2src_2main_8c"/>
      </node>
      <node id="48">
        <label>tests/kernel/fpu_sharing/float_disable/src/k_float_disable.c</label>
        <link refid="k__float__disable_8c"/>
      </node>
      <node id="49">
        <label>tests/kernel/fpu_sharing/float_disable/src/main.c</label>
        <link refid="fpu__sharing_2float__disable_2src_2main_8c"/>
      </node>
      <node id="50">
        <label>tests/kernel/fpu_sharing/generic/src/load_store.c</label>
        <link refid="load__store_8c"/>
      </node>
      <node id="51">
        <label>tests/kernel/fpu_sharing/generic/src/main.c</label>
        <link refid="fpu__sharing_2generic_2src_2main_8c"/>
      </node>
      <node id="52">
        <label>tests/kernel/fpu_sharing/generic/src/pi.c</label>
        <link refid="pi_8c"/>
      </node>
      <node id="53">
        <label>tests/kernel/gen_isr_table/src/main.c</label>
        <link refid="gen__isr__table_2src_2main_8c"/>
      </node>
      <node id="54">
        <label>tests/kernel/interrupt/src/direct_isr.c</label>
        <link refid="direct__isr_8c"/>
      </node>
      <node id="55">
        <label>tests/kernel/interrupt/src/dynamic_isr.c</label>
        <link refid="dynamic__isr_8c"/>
      </node>
      <node id="56">
        <label>tests/kernel/interrupt/src/interrupt_offload.c</label>
        <link refid="interrupt__offload_8c"/>
      </node>
      <node id="57">
        <label>tests/kernel/interrupt/src/main.c</label>
        <link refid="interrupt_2src_2main_8c"/>
      </node>
      <node id="58">
        <label>tests/kernel/interrupt/src/nested_irq.c</label>
        <link refid="nested__irq_8c"/>
      </node>
      <node id="59">
        <label>tests/kernel/interrupt/src/prevent_irq.c</label>
        <link refid="prevent__irq_8c"/>
      </node>
      <node id="60">
        <label>tests/kernel/interrupt/src/regular_isr.c</label>
        <link refid="regular__isr_8c"/>
      </node>
      <node id="61">
        <label>tests/kernel/lifo/lifo_api/src/main.c</label>
        <link refid="lifo_2lifo__api_2src_2main_8c"/>
      </node>
      <node id="62">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo.h</label>
        <link refid="test__lifo_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_contexts.c</label>
        <link refid="test__lifo__contexts_8c"/>
      </node>
      <node id="64">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_fail.c</label>
        <link refid="test__lifo__fail_8c"/>
      </node>
      <node id="65">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_loop.c</label>
        <link refid="test__lifo__loop_8c"/>
      </node>
      <node id="66">
        <label>tests/kernel/lifo/lifo_usage/src/main.c</label>
        <link refid="lifo_2lifo__usage_2src_2main_8c"/>
      </node>
      <node id="67">
        <label>tests/kernel/mbox/mbox_api/src/main.c</label>
        <link refid="mbox_2mbox__api_2src_2main_8c"/>
      </node>
      <node id="68">
        <label>tests/kernel/mbox/mbox_api/src/test_mbox_api.c</label>
        <link refid="test__mbox__api_8c"/>
      </node>
      <node id="69">
        <label>tests/kernel/mbox/mbox_usage/src/main.c</label>
        <link refid="mbox_2mbox__usage_2src_2main_8c"/>
      </node>
      <node id="70">
        <label>tests/kernel/mem_heap/k_heap_api/src/main.c</label>
        <link refid="mem__heap_2k__heap__api_2src_2main_8c"/>
      </node>
      <node id="71">
        <label>tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c</label>
        <link refid="test__kheap__api_8c"/>
      </node>
      <node id="72">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/main.c</label>
        <link refid="mem__heap_2mheap__api__concept_2src_2main_8c"/>
      </node>
      <node id="73">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</label>
        <link refid="test__mheap__api_8c"/>
      </node>
      <node id="74">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c</label>
        <link refid="test__mheap__concept_8c"/>
      </node>
      <node id="75">
        <label>tests/kernel/mem_heap/shared_multi_heap/src/main.c</label>
        <link refid="mem__heap_2shared__multi__heap_2src_2main_8c"/>
      </node>
      <node id="76">
        <label>tests/kernel/mem_protect/demand_paging/src/main.c</label>
        <link refid="mem__protect_2demand__paging_2src_2main_8c"/>
      </node>
      <node id="77">
        <label>tests/kernel/mem_protect/futex/src/main.c</label>
        <link refid="mem__protect_2futex_2src_2main_8c"/>
      </node>
      <node id="78">
        <label>tests/kernel/mem_protect/mem_map/src/main.c</label>
        <link refid="mem__protect_2mem__map_2src_2main_8c"/>
      </node>
      <node id="79">
        <label>tests/kernel/mem_protect/mem_protect/src/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="82">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="83">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="80">
        <label>tests/kernel/mem_protect/mem_protect/src/main.c</label>
        <link refid="mem__protect_2mem__protect_2src_2main_8c"/>
      </node>
      <node id="84">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_domain.c</label>
        <link refid="mem__domain_8c"/>
      </node>
      <node id="85">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_partition.c</label>
        <link refid="mem__partition_8c"/>
      </node>
      <node id="81">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="87">
        <label>tests/kernel/mem_protect/protection/src/main.c</label>
        <link refid="mem__protect_2protection_2src_2main_8c"/>
      </node>
      <node id="88">
        <label>tests/kernel/mem_protect/stack_random/src/main.c</label>
        <link refid="mem__protect_2stack__random_2src_2main_8c"/>
      </node>
      <node id="89">
        <label>tests/kernel/mem_protect/stackprot/src/main.c</label>
        <link refid="mem__protect_2stackprot_2src_2main_8c"/>
      </node>
      <node id="90">
        <label>tests/kernel/mem_protect/sys_sem/src/main.c</label>
        <link refid="mem__protect_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="91">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="92">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="93">
        <label>tests/kernel/mem_slab/mslab/src/main.c</label>
        <link refid="mem__slab_2mslab_2src_2main_8c"/>
      </node>
      <node id="94">
        <label>tests/kernel/mem_slab/mslab_api/src/main.c</label>
        <link refid="mem__slab_2mslab__api_2src_2main_8c"/>
      </node>
      <node id="95">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c</label>
        <link refid="test__mslab__api_8c"/>
      </node>
      <node id="96">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_extern.c</label>
        <link refid="test__mslab__extern_8c"/>
      </node>
      <node id="97">
        <label>tests/kernel/mem_slab/mslab_concept/src/main.c</label>
        <link refid="mem__slab_2mslab__concept_2src_2main_8c"/>
      </node>
      <node id="98">
        <label>tests/kernel/mem_slab/mslab_concept/src/test_mslab_alloc_wait.c</label>
        <link refid="test__mslab__alloc__wait_8c"/>
      </node>
      <node id="99">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/main.c</label>
        <link refid="mem__slab_2mslab__threadsafe_2src_2main_8c"/>
      </node>
      <node id="100">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/test_mslab_threadsafe.c</label>
        <link refid="test__mslab__threadsafe_8c"/>
      </node>
      <node id="101">
        <label>tests/kernel/mp/src/main.c</label>
        <link refid="mp_2src_2main_8c"/>
      </node>
      <node id="102">
        <label>tests/kernel/msgq/msgq_api/src/main.c</label>
        <link refid="msgq_2msgq__api_2src_2main_8c"/>
      </node>
      <node id="103">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq.h</label>
        <link refid="test__msgq_8h"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_attrs.c</label>
        <link refid="test__msgq__attrs_8c"/>
      </node>
      <node id="105">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_contexts.c</label>
        <link refid="test__msgq__contexts_8c"/>
      </node>
      <node id="106">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_fail.c</label>
        <link refid="test__msgq__fail_8c"/>
      </node>
      <node id="107">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_purge.c</label>
        <link refid="test__msgq__purge_8c"/>
      </node>
      <node id="108">
        <label>tests/kernel/msgq/msgq_usage/src/main.c</label>
        <link refid="msgq_2msgq__usage_2src_2main_8c"/>
      </node>
      <node id="109">
        <label>tests/kernel/mutex/mutex_api/src/test_mutex_apis.c</label>
        <link refid="test__mutex__apis_8c"/>
      </node>
      <node id="110">
        <label>tests/kernel/mutex/mutex_error_case/src/test_mutex_error.c</label>
        <link refid="test__mutex__error_8c"/>
      </node>
      <node id="111">
        <label>tests/kernel/mutex/sys_mutex/src/main.c</label>
        <link refid="mutex_2sys__mutex_2src_2main_8c"/>
      </node>
      <node id="112">
        <label>tests/kernel/mutex/sys_mutex/src/thread_competition.c</label>
        <link refid="thread__competition_8c"/>
      </node>
      <node id="113">
        <label>tests/kernel/obj_tracking/src/main.c</label>
        <link refid="obj__tracking_2src_2main_8c"/>
      </node>
      <node id="114">
        <label>tests/kernel/pending/src/main.c</label>
        <link refid="pending_2src_2main_8c"/>
      </node>
      <node id="115">
        <label>tests/kernel/pipe/pipe/src/main.c</label>
        <link refid="pipe_2pipe_2src_2main_8c"/>
      </node>
      <node id="116">
        <label>tests/kernel/pipe/pipe/src/test_pipe.c</label>
        <link refid="test__pipe_8c"/>
      </node>
      <node id="117">
        <label>tests/kernel/pipe/pipe_api/src/main.c</label>
        <link refid="pipe_2pipe__api_2src_2main_8c"/>
      </node>
      <node id="118">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_avail.c</label>
        <link refid="test__pipe__avail_8c"/>
      </node>
      <node id="119">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c</label>
        <link refid="test__pipe__contexts_8c"/>
      </node>
      <node id="120">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_fail.c</label>
        <link refid="test__pipe__fail_8c"/>
      </node>
      <node id="121">
        <label>tests/kernel/poll/src/main.c</label>
        <link refid="poll_2src_2main_8c"/>
      </node>
      <node id="122">
        <label>tests/kernel/poll/src/test_poll.c</label>
        <link refid="test__poll_8c"/>
      </node>
      <node id="123">
        <label>tests/kernel/poll/src/test_poll_fail.c</label>
        <link refid="test__poll__fail_8c"/>
      </node>
      <node id="124">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="125">
        <label>tests/kernel/queue/src/main.c</label>
        <link refid="queue_2src_2main_8c"/>
      </node>
      <node id="126">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>tests/kernel/queue/src/test_queue_contexts.c</label>
        <link refid="test__queue__contexts_8c"/>
      </node>
      <node id="128">
        <label>tests/kernel/queue/src/test_queue_fail.c</label>
        <link refid="test__queue__fail_8c"/>
      </node>
      <node id="129">
        <label>tests/kernel/queue/src/test_queue_loop.c</label>
        <link refid="test__queue__loop_8c"/>
      </node>
      <node id="130">
        <label>tests/kernel/queue/src/test_queue_user.c</label>
        <link refid="test__queue__user_8c"/>
      </node>
      <node id="131">
        <label>tests/kernel/sched/deadline/src/main.c</label>
        <link refid="sched_2deadline_2src_2main_8c"/>
      </node>
      <node id="132">
        <label>tests/kernel/sched/metairq/src/main.c</label>
        <link refid="sched_2metairq_2src_2main_8c"/>
      </node>
      <node id="133">
        <label>tests/kernel/sched/preempt/src/main.c</label>
        <link refid="sched_2preempt_2src_2main_8c"/>
      </node>
      <node id="136">
        <label>tests/kernel/sched/schedule_api/src/main.c</label>
        <link refid="sched_2schedule__api_2src_2main_8c"/>
      </node>
      <node id="134">
        <label>tests/kernel/sched/schedule_api/src/test_priority_scheduling.c</label>
        <link refid="test__priority__scheduling_8c"/>
      </node>
      <node id="135">
        <label>tests/kernel/sched/schedule_api/src/test_sched.h</label>
        <link refid="test__sched_8h"/>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c</label>
        <link refid="test__sched__is__preempt__thread_8c"/>
      </node>
      <node id="138">
        <label>tests/kernel/sched/schedule_api/src/test_sched_priority.c</label>
        <link refid="test__sched__priority_8c"/>
      </node>
      <node id="139">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c</label>
        <link refid="test__sched__timeslice__and__lock_8c"/>
      </node>
      <node id="140">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c</label>
        <link refid="test__sched__timeslice__reset_8c"/>
      </node>
      <node id="141">
        <label>tests/kernel/sched/schedule_api/src/test_slice_scheduling.c</label>
        <link refid="test__slice__scheduling_8c"/>
      </node>
      <node id="142">
        <label>tests/kernel/sched/schedule_api/src/user_api.c</label>
        <link refid="user__api_8c"/>
      </node>
      <node id="143">
        <label>tests/kernel/semaphore/semaphore/src/main.c</label>
        <link refid="semaphore_2semaphore_2src_2main_8c"/>
      </node>
      <node id="144">
        <label>tests/kernel/semaphore/sys_sem/src/main.c</label>
        <link refid="semaphore_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="145">
        <label>tests/kernel/sleep/src/main.c</label>
        <link refid="sleep_2src_2main_8c"/>
      </node>
      <node id="146">
        <label>tests/kernel/sleep/src/usleep.c</label>
        <link refid="usleep_8c"/>
      </node>
      <node id="147">
        <label>tests/kernel/smp/src/main.c</label>
        <link refid="smp_2src_2main_8c"/>
      </node>
      <node id="148">
        <label>tests/kernel/smp_boot_delay/src/main.c</label>
        <link refid="smp__boot__delay_2src_2main_8c"/>
      </node>
      <node id="149">
        <label>tests/kernel/spinlock/src/main.c</label>
        <link refid="spinlock_2src_2main_8c"/>
      </node>
      <node id="150">
        <label>tests/kernel/spinlock/src/spinlock_error_case.c</label>
        <link refid="spinlock__error__case_8c"/>
      </node>
      <node id="151">
        <label>tests/kernel/stack/stack/src/main.c</label>
        <link refid="stack_2stack_2src_2main_8c"/>
      </node>
      <node id="152">
        <label>tests/kernel/stack/stack/src/test_stack_contexts.c</label>
        <link refid="test__stack__contexts_8c"/>
      </node>
      <node id="153">
        <label>tests/kernel/stack/stack/src/test_stack_fail.c</label>
        <link refid="test__stack__fail_8c"/>
      </node>
      <node id="154">
        <label>tests/kernel/threads/dynamic_thread/src/main.c</label>
        <link refid="threads_2dynamic__thread_2src_2main_8c"/>
      </node>
      <node id="155">
        <label>tests/kernel/threads/no-multithreading/src/main.c</label>
        <link refid="threads_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="156">
        <label>tests/kernel/threads/thread_apis/src/main.c</label>
        <link refid="threads_2thread__apis_2src_2main_8c"/>
      </node>
      <node id="157">
        <label>tests/kernel/threads/thread_apis/src/test_essential_thread.c</label>
        <link refid="test__essential__thread_8c"/>
      </node>
      <node id="158">
        <label>tests/kernel/threads/thread_apis/src/test_kthread_for_each.c</label>
        <link refid="test__kthread__for__each_8c"/>
      </node>
      <node id="159">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c</label>
        <link refid="test__threads__cancel__abort_8c"/>
      </node>
      <node id="160">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cpu_mask.c</label>
        <link refid="test__threads__cpu__mask_8c"/>
      </node>
      <node id="161">
        <label>tests/kernel/threads/thread_apis/src/test_threads_set_priority.c</label>
        <link refid="test__threads__set__priority_8c"/>
      </node>
      <node id="162">
        <label>tests/kernel/threads/thread_apis/src/test_threads_spawn.c</label>
        <link refid="test__threads__spawn_8c"/>
      </node>
      <node id="163">
        <label>tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c</label>
        <link refid="test__threads__suspend__resume_8c"/>
      </node>
      <node id="164">
        <label>tests/kernel/threads/thread_error_case/src/main.c</label>
        <link refid="threads_2thread__error__case_2src_2main_8c"/>
      </node>
      <node id="165">
        <label>tests/kernel/threads/thread_init/src/main.c</label>
        <link refid="threads_2thread__init_2src_2main_8c"/>
      </node>
      <node id="166">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
      <node id="167">
        <label>tests/kernel/threads/tls/src/main.c</label>
        <link refid="threads_2tls_2src_2main_8c"/>
      </node>
      <node id="168">
        <label>tests/kernel/tickless/tickless_concept/src/main.c</label>
        <link refid="tickless_2tickless__concept_2src_2main_8c"/>
      </node>
      <node id="169">
        <label>tests/kernel/timer/cycle64/src/main.c</label>
        <link refid="timer_2cycle64_2src_2main_8c"/>
      </node>
      <node id="170">
        <label>tests/kernel/timer/starve/src/main.c</label>
        <link refid="timer_2starve_2src_2main_8c"/>
      </node>
      <node id="171">
        <label>tests/kernel/timer/timer_api/src/main.c</label>
        <link refid="timer_2timer__api_2src_2main_8c"/>
      </node>
      <node id="172">
        <label>tests/kernel/timer/timer_api/src/timer_convert.c</label>
        <link refid="timer__convert_8c"/>
      </node>
      <node id="173">
        <label>tests/kernel/timer/timer_error_case/src/main.c</label>
        <link refid="timer_2timer__error__case_2src_2main_8c"/>
      </node>
      <node id="174">
        <label>tests/kernel/timer/timer_monotonic/src/main.c</label>
        <link refid="timer_2timer__monotonic_2src_2main_8c"/>
      </node>
      <node id="175">
        <label>tests/kernel/workq/critical/src/main.c</label>
        <link refid="workq_2critical_2src_2main_8c"/>
      </node>
      <node id="176">
        <label>tests/kernel/workq/user_work/src/main.c</label>
        <link refid="workq_2user__work_2src_2main_8c"/>
      </node>
      <node id="177">
        <label>tests/kernel/workq/work/src/main.c</label>
        <link refid="workq_2work_2src_2main_8c"/>
      </node>
      <node id="178">
        <label>tests/kernel/workq/work_queue/src/main.c</label>
        <link refid="workq_2work__queue_2src_2main_8c"/>
      </node>
      <node id="179">
        <label>tests/kernel/xip/src/main.c</label>
        <link refid="xip_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__arch-timing_1ga5d9923569b40437c28879ff4b3ff77c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_timing_init</definition>
        <argsstring>(void)</argsstring>
        <name>arch_timing_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the timing subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform the necessary steps to initialize the timing subsystem.</para>
<para><simplesect kind="see"><para><ref refid="group__timing__api_1ga50ff9040b99d95c56f494014831e4b47" kindref="member">timing_init()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1094" column="6" declfile="include/sys/arch_interface.h" declline="1094" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1gaf8cd88e81c2104b5eb0fbe42967b7834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_timing_start</definition>
        <argsstring>(void)</argsstring>
        <name>arch_timing_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Signal the start of the timing information gathering. </para>
        </briefdescription>
        <detaileddescription>
<para>Signal to the timing subsystem that timing information will be gathered from this point forward.</para>
<para><simplesect kind="see"><para><ref refid="group__timing__api_1ga3c28bb4ced0467c284d33c800e070bde" kindref="member">timing_start()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1104" column="6" declfile="include/sys/arch_interface.h" declline="1104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1ga566483c64f5c5d2f0465e3f969303fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_timing_stop</definition>
        <argsstring>(void)</argsstring>
        <name>arch_timing_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Signal the end of the timing information gathering. </para>
        </briefdescription>
        <detaileddescription>
<para>Signal to the timing subsystem that timing information is no longer being gathered from this point forward.</para>
<para><simplesect kind="see"><para><ref refid="group__timing__api_1gade1584bf683c9c61905513efa4d99cf2" kindref="member">timing_stop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1114" column="6" declfile="include/sys/arch_interface.h" declline="1114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1gad7a709477650c8596a96fe080f583fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="include_2timing_2types_8h_1a08ae2ef7b1cd6f125db0cb548ea1f0e2" kindref="member">timing_t</ref></type>
        <definition>timing_t arch_timing_counter_get</definition>
        <argsstring>(void)</argsstring>
        <name>arch_timing_counter_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return timing counter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Timing counter.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__timing__api_1gaa5736c87362de09749af1d8ff30b8208" kindref="member">timing_counter_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1123" column="10" declfile="include/sys/arch_interface.h" declline="1123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1ga44d3a7bd8b7008c9cd6c0524e97f128c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t arch_timing_cycles_get</definition>
        <argsstring>(volatile timing_t *const start, volatile timing_t *const end)</argsstring>
        <name>arch_timing_cycles_get</name>
        <param>
          <type>volatile <ref refid="include_2timing_2types_8h_1a08ae2ef7b1cd6f125db0cb548ea1f0e2" kindref="member">timing_t</ref> *const</type>
          <declname>start</declname>
        </param>
        <param>
          <type>volatile <ref refid="include_2timing_2types_8h_1a08ae2ef7b1cd6f125db0cb548ea1f0e2" kindref="member">timing_t</ref> *const</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Get number of cycles between <computeroutput>start</computeroutput> and <computeroutput>end</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>For some architectures or SoCs, the raw numbers from counter need to be scaled to obtain actual number of cycles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to counter at start of a measured execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to counter at stop of a measured execution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of cycles between start and end.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__timing__api_1gaa12074c7645b19578e7ca573c6aa2955" kindref="member">timing_cycles_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1137" column="10" declfile="include/sys/arch_interface.h" declline="1137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1ga026409e1dc323ceddb82b2a6f1cc7ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t arch_timing_freq_get</definition>
        <argsstring>(void)</argsstring>
        <name>arch_timing_freq_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get frequency of counter used (in Hz). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Frequency of counter used for timing in Hz.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__timing__api_1gab72ed08d19630cb4cbea4977f2e6723b" kindref="member">timing_freq_get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1147" column="10" declfile="include/sys/arch_interface.h" declline="1147" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1ga8424bc96c05dcae34b7ffd445e2916fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t arch_timing_cycles_to_ns</definition>
        <argsstring>(uint64_t cycles)</argsstring>
        <name>arch_timing_cycles_to_ns</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>cycles</declname>
        </param>
        <briefdescription>
<para>Convert number of <computeroutput>cycles</computeroutput> into nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of cycles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted time value</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__timing__api_1ga14a85981068350f33c63c93c4b71afe2" kindref="member">timing_cycles_to_ns()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1157" column="10" declfile="include/sys/arch_interface.h" declline="1157" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1ga925b4caff80f1dbac36531b479b24364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>uint64_t arch_timing_cycles_to_ns_avg</definition>
        <argsstring>(uint64_t cycles, uint32_t count)</argsstring>
        <name>arch_timing_cycles_to_ns_avg</name>
        <param>
          <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
          <declname>cycles</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Convert number of <computeroutput>cycles</computeroutput> into nanoseconds with averaging. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of cycles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Times of accumulated cycles to average over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted time value</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__timing__api_1ga28b0252f3395b6e6b549cb03ea4dbef4" kindref="member">timing_cycles_to_ns_avg()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1168" column="10" declfile="include/sys/arch_interface.h" declline="1168" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1ga1f7bfb9ce0588f3b423c2a63933d40eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>uint32_t arch_timing_freq_get_mhz</definition>
        <argsstring>(void)</argsstring>
        <name>arch_timing_freq_get_mhz</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get frequency of counter used (in MHz). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Frequency of counter used for timing in MHz.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__timing__api_1ga65370ad32eadf61c84b90dc04ecd1d56" kindref="member">timing_freq_get_mhz()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="1177" column="10" declfile="include/sys/arch_interface.h" declline="1177" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" prot="public" static="no">
        <type>struct z_thread_stack_element</type>
        <definition>k_thread_stack_t</definition>
        <argsstring></argsstring>
        <name>k_thread_stack_t</name>
        <briefdescription>
<para>Typedef of struct z_thread_stack_element. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>z_thread_stack_element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="44" column="37" bodyfile="include/sys/arch_interface.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" prot="public" static="no">
        <type>void(*</type>
        <definition>k_thread_entry_t</definition>
        <argsstring>)(void *p1, void *p2, void *p3)</argsstring>
        <name>k_thread_entry_t</name>
        <briefdescription>
<para>Thread entry point function type. </para>
        </briefdescription>
        <detaileddescription>
<para>A thread&apos;s entry point function is invoked when the thread starts executing. Up to 3 argument values can be passed to the function.</para>
<para>The thread terminates execution permanently if the entry point function returns. The thread is responsible for releasing any shared resources it may own (such as mutexes and dynamically allocated memory), prior to returning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="46" column="9" bodyfile="include/sys/arch_interface.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__arch-smp_1gacf11540c44fdc8e74b060007b7e5a456" prot="public" static="no">
        <type>FUNC_NORETURN void(*</type>
        <definition>typedef FUNC_NORETURN void(* arch_cpustart_t) (void *data)</definition>
        <argsstring>)(void *data)</argsstring>
        <name>arch_cpustart_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Per-cpu entry function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>context parameter, implementation specific </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="202" column="23" bodyfile="include/sys/arch_interface.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__arch-timing_1ga9ee9f897ec750957de45bf8d43349d5e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t arch_k_cycle_get_32</definition>
        <argsstring>(void)</argsstring>
        <name>arch_k_cycle_get_32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtain the current cycle count, in units that are hardware-specific</para>
<para><simplesect kind="see"><para><ref refid="group__clock__apis_1ga208687de625e0036558343b4e66143d3" kindref="member">k_cycle_get_32()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="59" column="24" declfile="include/sys/arch_interface.h" declline="59" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-timing_1gacc1ed8d949f694a1d39e389334caf971" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t arch_k_cycle_get_64</definition>
        <argsstring>(void)</argsstring>
        <name>arch_k_cycle_get_64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtain the current cycle count, in units that are hardware-specific</para>
<para><simplesect kind="see"><para><ref refid="group__clock__apis_1gae09f509d02bf75a7b45d2800d823bb3a" kindref="member">k_cycle_get_64()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="66" column="24" declfile="include/sys/arch_interface.h" declline="66" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-pm_1ga6ce051203e6cc091d0fb42a15f662a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_cpu_idle</definition>
        <argsstring>(void)</argsstring>
        <name>arch_cpu_idle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Power save idle routine. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will be called by the kernel idle loop or possibly within an implementation of z_pm_save_idle in the kernel when the &apos;_pm_save_flag&apos; variable is non-zero.</para>
<para>Architectures that do not implement power management instructions may immediately return, otherwise a power-saving instruction should be issued to wait for an interrupt.</para>
<para><simplesect kind="note"><para>The function is expected to return after the interrupt that has caused the CPU to exit power-saving mode has been serviced, although this is not a firm requirement.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__cpu__idle__apis_1ga7b25e1bed511a813b32fbd0f91b09356" kindref="member">k_cpu_idle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="167" column="6" declfile="include/sys/arch_interface.h" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-pm_1ga4d0297717c23a3cc5df434549e26924d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_cpu_atomic_idle</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_cpu_atomic_idle</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Atomically re-enable interrupts and enter low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para>The requirements for <ref refid="group__arch-pm_1ga4d0297717c23a3cc5df434549e26924d" kindref="member">arch_cpu_atomic_idle()</ref> are as follows:</para>
<para><orderedlist>
<listitem><para>Enabling interrupts and entering a low-power mode needs to be atomic, i.e. there should be no period of time where interrupts are enabled before the processor enters a low-power mode. See the comments in <ref refid="group__lifo__apis_1gad5f1775947b07a2a77f667aa9e41db5a" kindref="member">k_lifo_get()</ref>, for example, of the race condition that occurs if this requirement is not met.</para>
</listitem><listitem><para>After waking up from the low-power mode, the interrupt lockout state must be restored as indicated in the &apos;key&apos; input parameter.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__cpu__idle__apis_1gadf88ece6447b65b7d0d2f3a70ab4fe8f" kindref="member">k_cpu_atomic_idle()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Lockout key returned by previous invocation of <ref refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" kindref="member">arch_irq_lock()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="187" column="6" declfile="include/sys/arch_interface.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-smp_1gad25e65419116c6bb3e6d6362e780fb83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_start_cpu</definition>
        <argsstring>(int cpu_num, k_thread_stack_t *stack, int sz, arch_cpustart_t fn, void *arg)</argsstring>
        <name>arch_start_cpu</name>
        <param>
          <type>int</type>
          <declname>cpu_num</declname>
        </param>
        <param>
          <type><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="group__arch-smp_1gacf11540c44fdc8e74b060007b7e5a456" kindref="member">arch_cpustart_t</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Start a numbered CPU on a MP-capable system. </para>
        </briefdescription>
        <detaileddescription>
<para>This starts and initializes a specific CPU. The main thread on startup is running on CPU zero, other processors are numbered sequentially. On return from this function, the CPU is known to have begun operating and will enter the provided function. Its interrupts will be initialized but disabled such that <ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock()</ref> with the provided key will work to enable them.</para>
<para>Normally, in SMP mode this function will be called by the kernel initialization and should not be used as a user API. But it is defined here for special-purpose apps which want Zephyr running on one core and to use others for design-specific processing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer number of the CPU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack memory for the CPU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack buffer size, in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to begin running on the CPU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Untyped argument to be passed to &quot;fn&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="224" column="6" declfile="include/sys/arch_interface.h" declline="224" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-smp_1ga5a7f0198ee061551c300129bffe64717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool arch_cpu_active</definition>
        <argsstring>(int cpu_num)</argsstring>
        <name>arch_cpu_active</name>
        <param>
          <type>int</type>
          <declname>cpu_num</declname>
        </param>
        <briefdescription>
<para>Return CPU power status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer number of the CPU </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="232" column="6" declfile="include/sys/arch_interface.h" declline="232" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>static unsigned int arch_irq_lock</definition>
        <argsstring>(void)</argsstring>
        <name>arch_irq_lock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock interrupts on the current CPU</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga19fdde73c3b02fcca6cf1d1e67631228" kindref="member">irq_lock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="247" column="28" declfile="include/sys/arch_interface.h" declline="247" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaa2b2745d8e99b8730b44805f4d3bbf05" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void arch_irq_unlock</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_irq_unlock</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock interrupts on the current CPU</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga646045943b3b2a130738bcc48867bf57" kindref="member">irq_unlock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="254" column="20" declfile="include/sys/arch_interface.h" declline="254" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga1b827afafc622d412962f568b78726dc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool arch_irq_unlocked</definition>
        <argsstring>(unsigned int key)</argsstring>
        <name>arch_irq_unlocked</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if calling <ref refid="group__arch-irq_1gaa2b2745d8e99b8730b44805f4d3bbf05" kindref="member">arch_irq_unlock()</ref> with this key would unlock irqs</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>value returned by <ref refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" kindref="member">arch_irq_lock()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if interrupts were unlocked prior to the <ref refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" kindref="member">arch_irq_lock()</ref> call that produced the key argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="263" column="20" declfile="include/sys/arch_interface.h" declline="263" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga216d692e87bfba955a60f8e570e127df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_disable</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_disable</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable the specified interrupt line</para>
<para><simplesect kind="note"><para>: The behavior of interrupts that arrive after this call returns and before the corresponding call to <ref refid="group__arch-irq_1gaa278d630653b33cb339621d725ed295a" kindref="member">arch_irq_enable()</ref> is undefined. The hardware is not required to latch and deliver such an interrupt, though on some architectures that may work. Other architectures will simply lose such an interrupt and never deliver it. Many drivers and subsystems are not tolerant of such dropped interrupts and it is the job of the application layer to ensure that behavior remains correct.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__isr__apis_1ga82c3a15d812f58e0f6525f358d031e6d" kindref="member">irq_disable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="279" column="6" declfile="include/sys/arch_interface.h" declline="279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaa278d630653b33cb339621d725ed295a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_enable</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_enable</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable the specified interrupt line</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga7ea700ee31e4ff036c997a554dbedfeb" kindref="member">irq_enable()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="286" column="6" declfile="include/sys/arch_interface.h" declline="286" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga3bd8e963a124421bb372dab4bdc6cd83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_irq_is_enabled</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_is_enabled</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if an interrupt line is enabled</para>
<para><simplesect kind="see"><para><ref refid="group__isr__apis_1ga71fef3867ba9818cf0a5baf8410a6354" kindref="member">irq_is_enabled()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="293" column="5" declfile="include/sys/arch_interface.h" declline="293" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaa4d733913e12a12e104dc4781cca7308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_irq_connect_dynamic</definition>
        <argsstring>(unsigned int irq, unsigned int priority, void(*routine)(const void *parameter), const void *parameter, uint32_t flags)</argsstring>
        <name>arch_irq_connect_dynamic</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>void(*)(const void *parameter)</type>
          <declname>routine</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Arch-specific hook to install a dynamic interrupt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ line number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>routine</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt service routine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>ISR parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Arch-specific IRQ configuration flag</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector assigned to this interrupt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="306" column="5" declfile="include/sys/arch_interface.h" declline="306" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1gaac8f60e7dfc5ce3222372798e96316ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
        <definition>unsigned int arch_irq_allocate</definition>
        <argsstring>(void)</argsstring>
        <name>arch_irq_allocate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Arch-specific hook for allocating IRQs. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: disable/enable IRQ relevantly inside the implementation of such function to avoid concurrency issues. Also, an allocated IRQ is assumed to be used thus a following <simplesect kind="see"><para><ref refid="group__arch-irq_1ga5c85d7bf54a83190ed27587dc5a01de5" kindref="member">arch_irq_is_used()</ref> should return <ref refid="stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" kindref="member">true</ref>.</para>
</simplesect>
<simplesect kind="return"><para>The newly allocated IRQ or UINT_MAX on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="364" column="14" declfile="include/sys/arch_interface.h" declline="364" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga5f0942bd035c50c9d2d91ada472f37c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_irq_set_used</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_set_used</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
<para>Arch-specific hook for declaring an IRQ being used. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: disable/enable IRQ relevantly inside the implementation of such function to avoid concurrency issues.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>the IRQ to declare being used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="374" column="6" declfile="include/sys/arch_interface.h" declline="374" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-irq_1ga5c85d7bf54a83190ed27587dc5a01de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool arch_irq_is_used</definition>
        <argsstring>(unsigned int irq)</argsstring>
        <name>arch_irq_is_used</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>irq</declname>
        </param>
        <briefdescription>
<para>Arch-specific hook for checking if an IRQ is being used already. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>the IRQ to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if being, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="383" column="6" declfile="include/sys/arch_interface.h" declline="383" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-smp_1gad42138d41dff6a4aad8abf7d77fcd8b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct _cpu *</type>
        <definition>static struct _cpu * arch_curr_cpu</definition>
        <argsstring>(void)</argsstring>
        <name>arch_curr_cpu</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the CPU struct for the currently executing CPU </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="432" column="25" declfile="include/sys/arch_interface.h" declline="432" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-smp_1gadd3d6c84e3c57babc859314718e0f231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_sched_ipi</definition>
        <argsstring>(void)</argsstring>
        <name>arch_sched_ipi</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Broadcast an interrupt to all CPUs</para>
<para>This will invoke z_sched_ipi() on other CPUs in the system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="439" column="6" declfile="include/sys/arch_interface.h" declline="439" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke0</definition>
        <argsstring>(uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke0</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 0 arguments.</para>
<para>No general-purpose register state other than return value may be preserved when transitioning from supervisor mode back down to user mode for security reasons.</para>
<para>It is required that all arguments be stored in registers when elevating privileges from user to supervisor mode.</para>
<para>Processing of the syscall takes place on a separate kernel stack. Interrupts should be enabled when invoking the system call marshallers from the dispatch table. Thread preemption may occur when handling system calls.</para>
<para>Call ids are untrusted and must be bounds-checked, as the value is used to index the system call dispatch table, containing function pointers to the specific system call code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="473" column="25" declfile="include/sys/arch_interface.h" declline="473" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga4cfb3b2b38e5afca889e8b9765d6c3df" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke1</definition>
        <argsstring>(uintptr_t arg1, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke1</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 1 argument.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="485" column="25" declfile="include/sys/arch_interface.h" declline="485" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga1e78f1022aaf10e88727b142b56d4ef0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke2</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke2</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 2 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="499" column="25" declfile="include/sys/arch_interface.h" declline="499" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1gaacb1c66a1b7bf2293fea269f6b5e1c7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke3</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke3</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 3 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="514" column="25" declfile="include/sys/arch_interface.h" declline="514" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga0ba3ae2290827385b226ebdbf3de3b53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke4</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke4</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 4 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg4</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="531" column="25" declfile="include/sys/arch_interface.h" declline="531" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga9971c78bc8f579a0dadf84225dc0c3ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke5</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke5</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg5</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 5 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg4</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg5</parametername>
</parameternamelist>
<parameterdescription>
<para>Fifth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="549" column="25" declfile="include/sys/arch_interface.h" declline="549" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1gac6cae2197637993a86b6ec6803b5742b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
        <definition>static uintptr_t arch_syscall_invoke6</definition>
        <argsstring>(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t call_id)</argsstring>
        <name>arch_syscall_invoke6</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg5</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>arg6</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>call_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a system call with 6 arguments.</para>
<para><simplesect kind="see"><para><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg4</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg5</parametername>
</parameternamelist>
<parameterdescription>
<para>Fifth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg6</parametername>
</parameternamelist>
<parameterdescription>
<para>Sixth argument to the system call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_id</parametername>
</parameternamelist>
<parameterdescription>
<para>System call ID, will be bounds-checked and used to reference kernel-side dispatch table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return value of the system call. Void system calls return 0 here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="569" column="25" declfile="include/sys/arch_interface.h" declline="569" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga89ab53a218add419e37f89c1f5fd955f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool arch_is_user_context</definition>
        <argsstring>(void)</argsstring>
        <name>arch_is_user_context</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate whether we are currently running in user mode</para>
<para><simplesect kind="return"><para>true if the CPU is currently running with user permissions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="579" column="20" declfile="include/sys/arch_interface.h" declline="579" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga71542fcc679a94ad9ea60d7ac46da361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_mem_domain_max_partitions_get</definition>
        <argsstring>(void)</argsstring>
        <name>arch_mem_domain_max_partitions_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the maximum number of partitions for a memory domain. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Max number of partitions, or -1 if there is no limit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="586" column="5" declfile="include/sys/arch_interface.h" declline="586" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga1532ef5705aa71f0f93899abca0939da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_buffer_validate</definition>
        <argsstring>(void *addr, size_t size, int write)</argsstring>
        <name>arch_buffer_validate</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>write</declname>
        </param>
        <briefdescription>
<para>Check memory region permissions. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a memory region, return whether the current memory management hardware configuration would allow a user thread to read/write that region. Used by system calls to validate buffers coming in from userspace.</para>
<para>Notes: The function is guaranteed to never return validation success, if the entire buffer area is not user accessible.</para>
<para>The function is guaranteed to correctly validate the permissions of the supplied buffer, if the user access permissions of the entire buffer are enforced by a single, enabled memory management region.</para>
<para>In some architectures the validation will always return failure if the supplied memory buffer spans multiple enabled memory management regions (even if all such regions permit user access).</para>
<para><simplesect kind="warning"><para>0 size buffer has undefined behavior.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>start address of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, additionally check if the area is writable. Otherwise, just check if the memory can be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nonzero if the permissions don&apos;t match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="713" column="5" declfile="include/sys/arch_interface.h" declline="713" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga48be2412ba65ec550ded63e2f1a0470f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_virt_region_align</definition>
        <argsstring>(uintptr_t phys, size_t size)</argsstring>
        <name>arch_virt_region_align</name>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>phys</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the optimal virtual region alignment to optimize the MMU table layout</para>
<para>Some MMU HW requires some region to be aligned to some of the intermediate block alignment in order to reduce table usage. This call returns the optimal virtual address alignment in order to permit such optimization in the following MMU mapping call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">phys</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical address of region to be mapped, aligned to MMU_PAGE_SIZE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of region to be mapped, aligned to MMU_PAGE_SIZE</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>to apply on the virtual address of this region </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="728" column="8" declfile="include/sys/arch_interface.h" declline="728" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga447daa0454a90a7a3a247de01e522567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FUNC_NORETURN void</type>
        <definition>FUNC_NORETURN void arch_user_mode_enter</definition>
        <argsstring>(k_thread_entry_t user_entry, void *p1, void *p2, void *p3)</argsstring>
        <name>arch_user_mode_enter</name>
        <param>
          <type><ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref></type>
          <declname>user_entry</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a one-way transition from supervisor to kernel mode.</para>
<para>Implementations of this function must do the following:</para>
<para><itemizedlist>
<listitem><para>Reset the thread&apos;s stack pointer to a suitable initial value. We do not need any prior context since this is a one-way operation.</para>
</listitem><listitem><para>Set up any kernel stack region for the CPU to use during privilege elevation</para>
</listitem><listitem><para>Put the CPU in whatever its equivalent of user mode is</para>
</listitem><listitem><para>Transfer execution to <ref refid="group__arch-threads_1gade449838e445fa8201266e38215c616c" kindref="member">arch_new_thread()</ref> passing along all the supplied arguments, in user mode.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry point to start executing as a user thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st parameter to user thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd parameter to user thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>3rd parameter to user thread </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="748" column="20" declfile="include/sys/arch_interface.h" declline="748" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1gad53908f229d7e2c333574b009493644b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FUNC_NORETURN void</type>
        <definition>FUNC_NORETURN void arch_syscall_oops</definition>
        <argsstring>(void *ssf)</argsstring>
        <name>arch_syscall_oops</name>
        <param>
          <type>void *</type>
          <declname>ssf</declname>
        </param>
        <briefdescription>
<para>Induce a kernel oops that appears to come from a specific location. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally, <ref refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" kindref="member">k_oops()</ref> generates an exception that appears to come from the call site of the <ref refid="include_2kernel_8h_1abde5aa8ca5e64a045b25b88f91370dcd" kindref="member">k_oops()</ref> itself.</para>
<para>However, when validating arguments to a system call, if there are problems we want the oops to appear to come from where the system call was invoked and not inside the validation function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssf</parametername>
</parameternamelist>
<parameterdescription>
<para>System call stack frame pointer. This gets passed as an argument to _k_syscall_handler_t functions and its contents are completely architecture specific. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="765" column="20" declfile="include/sys/arch_interface.h" declline="765" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga174c4f356fe315c523cefbf513858c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_user_string_nlen</definition>
        <argsstring>(const char *s, size_t maxsize, int *err)</argsstring>
        <name>arch_user_string_nlen</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxsize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Safely take the length of a potentially bad string. </para>
        </briefdescription>
        <detaileddescription>
<para>This must not fault, instead the err parameter must have -1 written to it. This function otherwise should work exactly like libc <ref refid="string_8h_1afc92d2231e45d19988c7894aa2a07f0c" kindref="member">strnlen()</ref>. On success *err should be set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String to measure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Error value to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the string, not counting NULL byte, up to maxsize </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="779" column="8" declfile="include/sys/arch_interface.h" declline="779" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga8c6bb0f6730c115689452b016ac1761f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool arch_mem_coherent</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>arch_mem_coherent</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Detect memory coherence type. </para>
        </briefdescription>
        <detaileddescription>
<para>Required when ARCH_HAS_COHERENCE is true. This function returns true if the byte pointed to lies within an architecture-defined &quot;coherence region&quot; (typically implemented with uncached memory) and can safely be used in multiprocessor code without explicit flush or invalidate operations.</para>
<para><simplesect kind="note"><para>The result is for only the single byte at the specified address, this API is not required to check region boundaries or to expect aligned pointers. The expectation is that the code above will have queried the appropriate address(es). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="797" column="20" bodyfile="include/sys/arch_interface.h" bodystart="797" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-userspace_1ga306e9d0e5f8094cb75686f1c43d068a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void arch_cohere_stacks</definition>
        <argsstring>(struct k_thread *old_thread, void *old_switch_handle, struct k_thread *new_thread)</argsstring>
        <name>arch_cohere_stacks</name>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>old_thread</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>old_switch_handle</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__thread" kindref="compound">k_thread</ref> *</type>
          <declname>new_thread</declname>
        </param>
        <briefdescription>
<para>Ensure cache coherence prior to context switch. </para>
        </briefdescription>
        <detaileddescription>
<para>Required when ARCH_HAS_COHERENCE is true. On cache-incoherent multiprocessor architectures, thread stacks are cached by default for performance reasons. They must therefore be flushed appropriately on context switch. The rules are:</para>
<para><orderedlist>
<listitem><para>The region containing live data in the old stack (generally the bytes between the current stack pointer and the top of the stack memory) must be flushed to underlying storage so a new CPU that runs the same thread sees the correct data. This must happen before the assignment of the switch_handle field in the thread struct which signals the completion of context switch.</para>
</listitem><listitem><para>Any data areas to be read from the new stack (generally the same as the live region when it was saved) should be invalidated (and NOT flushed!) in the data cache. This is because another CPU may have run or re-initialized the thread since this CPU suspended it, and any data present in cache will be stale.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="note"><para>The kernel will call this function during interrupt exit when a new thread has been chosen to run, and also immediately before entering <ref refid="group__arch-threads_1gab411d82ce5b60f062171f5a19e33e025" kindref="member">arch_switch()</ref> to effect a code-driven context switch. In the latter case, it is very likely that more data will be written to the old_thread stack region after this function returns but before the completion of the switch. Simply flushing naively here is not sufficient on many architectures and coordination with the <ref refid="group__arch-threads_1gab411d82ce5b60f062171f5a19e33e025" kindref="member">arch_switch()</ref> implementation is likely required.</para>
</simplesect>
<itemizedlist>
<listitem><para>old_thread The old thread to be flushed before being allowed to run on other CPUs. </para>
</listitem>
<listitem><para>old_switch_handle The switch handle to be stored into old_thread (it will not be valid until the cache is flushed so is not present yet). This will be NULL if inside z_swap() (because the <ref refid="group__arch-threads_1gab411d82ce5b60f062171f5a19e33e025" kindref="member">arch_switch()</ref> has not saved it yet). </para>
</listitem>
<listitem><para>new_thread The new thread to be invalidated before it runs locally. </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="845" column="20" bodyfile="include/sys/arch_interface.h" bodystart="845" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1ga21c8a32d35c4d267b8306d595ff1d726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_gdb_init</definition>
        <argsstring>(void)</argsstring>
        <name>arch_gdb_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Architecture layer debug start. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by <computeroutput>gdb_init()</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="871" column="6" declfile="include/sys/arch_interface.h" declline="871" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1ga9c130421feeee919651828511743b346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_gdb_continue</definition>
        <argsstring>(void)</argsstring>
        <name>arch_gdb_continue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Continue running program. </para>
        </briefdescription>
        <detaileddescription>
<para>Continue software execution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="878" column="6" declfile="include/sys/arch_interface.h" declline="878" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1ga2aa577d5e55c8b739e2be6187336aaf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arch_gdb_step</definition>
        <argsstring>(void)</argsstring>
        <name>arch_gdb_step</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Continue with one step. </para>
        </briefdescription>
        <detaileddescription>
<para>Continue software execution until reaches the next statement. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="885" column="6" declfile="include/sys/arch_interface.h" declline="885" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1ga5317106a8022bea2a0d42af0789cc016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_gdb_reg_readall</definition>
        <argsstring>(struct gdb_ctx *ctx, uint8_t *buf, size_t buflen)</argsstring>
        <name>arch_gdb_reg_readall</name>
        <param>
          <type>struct <ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Read all registers, and outputs as hexadecimal string. </para>
        </briefdescription>
        <detaileddescription>
<para>This reads all CPU registers and outputs as hexadecimal string. The output string must be parsable by GDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>GDB context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to output hexadecimal string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of hexadecimal string written. Return 0 if error or not supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="900" column="8" declfile="include/sys/arch_interface.h" declline="900" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1ga0ef78d7e193e98549d9665632e53d5ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_gdb_reg_writeall</definition>
        <argsstring>(struct gdb_ctx *ctx, uint8_t *hex, size_t hexlen)</argsstring>
        <name>arch_gdb_reg_writeall</name>
        <param>
          <type>struct <ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>hex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hexlen</declname>
        </param>
        <briefdescription>
<para>Take a hexadecimal string and update all registers. </para>
        </briefdescription>
        <detaileddescription>
<para>This takes in a hexadecimal string as presented from GDB, and updates all CPU registers with new values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>GDB context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hex</parametername>
</parameternamelist>
<parameterdescription>
<para>Input hexadecimal string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of hexadecimal string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of hexadecimal string parsed. Return 0 if error or not supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="915" column="8" declfile="include/sys/arch_interface.h" declline="915" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1gaa3216e9f381f974c374a6399af5cdba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_gdb_reg_readone</definition>
        <argsstring>(struct gdb_ctx *ctx, uint8_t *buf, size_t buflen, uint32_t regno)</argsstring>
        <name>arch_gdb_reg_readone</name>
        <param>
          <type>struct <ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>regno</declname>
        </param>
        <briefdescription>
<para>Read one register, and outputs as hexadecimal string. </para>
        </briefdescription>
        <detaileddescription>
<para>This reads one CPU register and outputs as hexadecimal string. The output string must be parsable by GDB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>GDB context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to output hexadecimal string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>Register number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of hexadecimal string written. Return 0 if error or not supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="931" column="8" declfile="include/sys/arch_interface.h" declline="931" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1gad717b520d774294bbda78a56cddcaeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arch_gdb_reg_writeone</definition>
        <argsstring>(struct gdb_ctx *ctx, uint8_t *hex, size_t hexlen, uint32_t regno)</argsstring>
        <name>arch_gdb_reg_writeone</name>
        <param>
          <type>struct <ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>hex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hexlen</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>regno</declname>
        </param>
        <briefdescription>
<para>Take a hexadecimal string and update one register. </para>
        </briefdescription>
        <detaileddescription>
<para>This takes in a hexadecimal string as presented from GDB, and updates one CPU registers with new value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>GDB context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hex</parametername>
</parameternamelist>
<parameterdescription>
<para>Input hexadecimal string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of hexadecimal string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regno</parametername>
</parameternamelist>
<parameterdescription>
<para>Register number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of hexadecimal string parsed. Return 0 if error or not supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="948" column="8" declfile="include/sys/arch_interface.h" declline="948" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1gab6f42110cf2340132bf2b3916810c01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_gdb_add_breakpoint</definition>
        <argsstring>(struct gdb_ctx *ctx, uint8_t type, uintptr_t addr, uint32_t kind)</argsstring>
        <name>arch_gdb_add_breakpoint</name>
        <param>
          <type>struct <ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Add breakpoint or watchpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>GDB context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Breakpoint or watchpoint type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of breakpoint or watchpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of breakpoint/watchpoint in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>Error encountered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-2</parametername>
</parameternamelist>
<parameterdescription>
<para>Not supported </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="963" column="5" declfile="include/sys/arch_interface.h" declline="963" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__arch-gdbstub_1ga734041433f69030ad98439d10ef56ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arch_gdb_remove_breakpoint</definition>
        <argsstring>(struct gdb_ctx *ctx, uint8_t type, uintptr_t addr, uint32_t kind)</argsstring>
        <name>arch_gdb_remove_breakpoint</name>
        <param>
          <type>struct <ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Remove breakpoint or watchpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>GDB context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Breakpoint or watchpoint type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of breakpoint or watchpoint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of breakpoint/watchpoint in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>Error encountered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-2</parametername>
</parameternamelist>
<parameterdescription>
<para>Not supported </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/arch_interface.h" line="978" column="5" declfile="include/sys/arch_interface.h" declline="978" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_ARCH_INTERFACE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_ARCH_INTERFACE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMLANGUAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arch/cpu.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="irq__offload_8h" kindref="compound">irq_offload.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>We<sp/>cannot<sp/>pull<sp/>in<sp/>kernel.h<sp/>here,<sp/>need<sp/>some<sp/>forward<sp/>declarations<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__thread" kindref="compound">k_thread</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">z_thread_stack_element<sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="group__arch-timing_1ga9ee9f897ec750957de45bf8d43349d5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__arch-timing_1ga9ee9f897ec750957de45bf8d43349d5e" kindref="member">arch_k_cycle_get_32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="group__arch-timing_1gacc1ed8d949f694a1d39e389334caf971" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__arch-timing_1gacc1ed8d949f694a1d39e389334caf971" kindref="member">arch_k_cycle_get_64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="group__arch-pm_1ga6ce051203e6cc091d0fb42a15f662a48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-pm_1ga6ce051203e6cc091d0fb42a15f662a48" kindref="member">arch_cpu_idle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="group__arch-pm_1ga4d0297717c23a3cc5df434549e26924d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-pm_1ga4d0297717c23a3cc5df434549e26924d" kindref="member">arch_cpu_atomic_idle</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="group__arch-smp_1gacf11540c44fdc8e74b060007b7e5a456" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FUNC_NORETURN<sp/>void<sp/>(*<ref refid="group__arch-smp_1gacf11540c44fdc8e74b060007b7e5a456" kindref="member">arch_cpustart_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group__arch-smp_1gad25e65419116c6bb3e6d6362e780fb83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-smp_1gad25e65419116c6bb3e6d6362e780fb83" kindref="member">arch_start_cpu</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_num,<sp/><ref refid="arch__interface_8h_1a3e4bde3075edb41069b258d999333b0e" kindref="member">k_thread_stack_t</ref><sp/>*<ref refid="smp__boot__delay_2src_2main_8c_1a96786824adbf96016a9dbf6eded02b94" kindref="member">stack</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__arch-smp_1gacf11540c44fdc8e74b060007b7e5a456" kindref="member">arch_cpustart_t</ref><sp/>fn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="group__arch-smp_1ga5a7f0198ee061551c300129bffe64717" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__arch-smp_1ga5a7f0198ee061551c300129bffe64717" kindref="member">arch_cpu_active</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_num);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1ga25bca3069cb999b6d4f924b87bf7de38" kindref="member">arch_irq_lock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="group__arch-irq_1gaa2b2745d8e99b8730b44805f4d3bbf05" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1gaa2b2745d8e99b8730b44805f4d3bbf05" kindref="member">arch_irq_unlock</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="group__arch-irq_1ga1b827afafc622d412962f568b78726dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1ga1b827afafc622d412962f568b78726dc" kindref="member">arch_irq_unlocked</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock__error__case_8c_1ac67cfa528fbe6d605bc5a011b74611cc" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="group__arch-irq_1ga216d692e87bfba955a60f8e570e127df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1ga216d692e87bfba955a60f8e570e127df" kindref="member">arch_irq_disable</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="group__arch-irq_1gaa278d630653b33cb339621d725ed295a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1gaa278d630653b33cb339621d725ed295a" kindref="member">arch_irq_enable</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="group__arch-irq_1ga3bd8e963a124421bb372dab4bdc6cd83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1ga3bd8e963a124421bb372dab4bdc6cd83" kindref="member">arch_irq_is_enabled</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="group__arch-irq_1gaa4d733913e12a12e104dc4781cca7308" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1gaa4d733913e12a12e104dc4781cca7308" kindref="member">arch_irq_connect_dynamic</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*routine)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parameter),</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parameter,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PCIE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_PCIE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_PCIE_CONTROLLER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="group__arch-irq_1gaac8f60e7dfc5ce3222372798e96316ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1gaac8f60e7dfc5ce3222372798e96316ae" kindref="member">arch_irq_allocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="group__arch-irq_1ga5f0942bd035c50c9d2d91ada472f37c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1ga5f0942bd035c50c9d2d91ada472f37c4" kindref="member">arch_irq_set_used</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="group__arch-irq_1ga5c85d7bf54a83190ed27587dc5a01de5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__arch-irq_1ga5c85d7bf54a83190ed27587dc5a01de5" kindref="member">arch_irq_is_used</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>irq);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_PCIE_CONTROLLER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_IRQ_OFFLOAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arch_irq_offload(<ref refid="irq__offload_8h_1a5bcf9956ddbf5ea75619f0cef91e1214" kindref="member">irq_offload_routine_t</ref><sp/>routine,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parameter);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_IRQ_OFFLOAD<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_SMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="group__arch-smp_1gad42138d41dff6a4aad8abf7d77fcd8b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_cpu<sp/>*<ref refid="group__arch-smp_1gad42138d41dff6a4aad8abf7d77fcd8b2" kindref="member">arch_curr_cpu</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="group__arch-smp_1gadd3d6c84e3c57babc859314718e0f231" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-smp_1gadd3d6c84e3c57babc859314718e0f231" kindref="member">arch_sched_ipi</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_SMP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_USERSPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="group__arch-userspace_1ga5e9ab24b9c980e327903fbe3f5bd97f3" kindref="member">arch_syscall_invoke0</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>call_id);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="group__arch-userspace_1ga4cfb3b2b38e5afca889e8b9765d6c3df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="group__arch-userspace_1ga4cfb3b2b38e5afca889e8b9765d6c3df" kindref="member">arch_syscall_invoke1</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg1,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>call_id);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="group__arch-userspace_1ga1e78f1022aaf10e88727b142b56d4ef0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="group__arch-userspace_1ga1e78f1022aaf10e88727b142b56d4ef0" kindref="member">arch_syscall_invoke2</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg1,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg2,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>call_id);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="group__arch-userspace_1gaacb1c66a1b7bf2293fea269f6b5e1c7e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="group__arch-userspace_1gaacb1c66a1b7bf2293fea269f6b5e1c7e" kindref="member">arch_syscall_invoke3</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg1,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg2,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg3,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>call_id);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="group__arch-userspace_1ga0ba3ae2290827385b226ebdbf3de3b53" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="group__arch-userspace_1ga0ba3ae2290827385b226ebdbf3de3b53" kindref="member">arch_syscall_invoke4</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg1,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg2,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg3,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg4,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>call_id);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="group__arch-userspace_1ga9971c78bc8f579a0dadf84225dc0c3ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="group__arch-userspace_1ga9971c78bc8f579a0dadf84225dc0c3ff" kindref="member">arch_syscall_invoke5</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg1,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg2,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg3,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg4,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg5,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>call_id);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="group__arch-userspace_1gac6cae2197637993a86b6ec6803b5742b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/><ref refid="group__arch-userspace_1gac6cae2197637993a86b6ec6803b5742b" kindref="member">arch_syscall_invoke6</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg1,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg2,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg3,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg4,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg5,<sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>arg6,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>call_id);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="group__arch-userspace_1ga89ab53a218add419e37f89c1f5fd955f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga89ab53a218add419e37f89c1f5fd955f" kindref="member">arch_is_user_context</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="586" refid="group__arch-userspace_1ga71542fcc679a94ad9ea60d7ac46da361" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga71542fcc679a94ad9ea60d7ac46da361" kindref="member">arch_mem_domain_max_partitions_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_ARCH_MEM_DOMAIN_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_mem_domain_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/>*domain);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_ARCH_MEM_DOMAIN_DATA<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_ARCH_MEM_DOMAIN_SYNCHRONOUS_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_mem_domain_thread_add(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_mem_domain_thread_remove(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*<ref refid="atomic_8c_1ae3e7b70821cb2fc4b41ff1189e70bc92" kindref="member">thread</ref>);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_mem_domain_partition_remove(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/>*domain,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>partition_id);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_mem_domain_partition_add(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__mem__domain" kindref="compound">k_mem_domain</ref><sp/>*domain,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>partition_id);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_ARCH_MEM_DOMAIN_SYNCHRONOUS_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="group__arch-userspace_1ga1532ef5705aa71f0f93899abca0939da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga1532ef5705aa71f0f93899abca0939da" kindref="member">arch_buffer_validate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="728" refid="group__arch-userspace_1ga48be2412ba65ec550ded63e2f1a0470f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga48be2412ba65ec550ded63e2f1a0470f" kindref="member">arch_virt_region_align</ref>(<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>phys,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="748" refid="group__arch-userspace_1ga447daa0454a90a7a3a247de01e522567" refkind="member"><highlight class="normal">FUNC_NORETURN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga447daa0454a90a7a3a247de01e522567" kindref="member">arch_user_mode_enter</ref>(<ref refid="arch__interface_8h_1af1bd193a26c6e6a8658140185cae42e1" kindref="member">k_thread_entry_t</ref><sp/>user_entry,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p3);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="group__arch-userspace_1gad53908f229d7e2c333574b009493644b" refkind="member"><highlight class="normal">FUNC_NORETURN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1gad53908f229d7e2c333574b009493644b" kindref="member">arch_syscall_oops</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ssf);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="779" refid="group__arch-userspace_1ga174c4f356fe315c523cefbf513858c9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga174c4f356fe315c523cefbf513858c9c" kindref="member">arch_user_string_nlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="asm-macro-32-bit-gnu_8h_1a39e110111e0f42a0d4fb025a96888293" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*err);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_USERSPACE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_ARCH_HAS_COHERENCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="group__arch-userspace_1ga8c6bb0f6730c115689452b016ac1761f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga8c6bb0f6730c115689452b016ac1761f" kindref="member">arch_mem_coherent</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CONFIG_KERNEL_COHERENCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="group__arch-userspace_1ga306e9d0e5f8094cb75686f1c43d068a9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-userspace_1ga306e9d0e5f8094cb75686f1c43d068a9" kindref="member">arch_cohere_stacks</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*old_thread,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_switch_handle,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__thread" kindref="compound">k_thread</ref><sp/>*new_thread)</highlight></codeline>
<codeline lineno="848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(old_thread);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(old_switch_handle);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(new_thread);</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_GDBSTUB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref>;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="group__arch-gdbstub_1ga21c8a32d35c4d267b8306d595ff1d726" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1ga21c8a32d35c4d267b8306d595ff1d726" kindref="member">arch_gdb_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="group__arch-gdbstub_1ga9c130421feeee919651828511743b346" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1ga9c130421feeee919651828511743b346" kindref="member">arch_gdb_continue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="885" refid="group__arch-gdbstub_1ga2aa577d5e55c8b739e2be6187336aaf0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1ga2aa577d5e55c8b739e2be6187336aaf0" kindref="member">arch_gdb_step</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="group__arch-gdbstub_1ga5317106a8022bea2a0d42af0789cc016" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1ga5317106a8022bea2a0d42af0789cc016" kindref="member">arch_gdb_reg_readall</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref><sp/>*ctx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="915" refid="group__arch-gdbstub_1ga0ef78d7e193e98549d9665632e53d5ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1ga0ef78d7e193e98549d9665632e53d5ca" kindref="member">arch_gdb_reg_writeall</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref><sp/>*ctx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="printk_8c_1a8e1c24afea727e0d4baab03c6de252dc" kindref="member">hex</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hexlen);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="group__arch-gdbstub_1gaa3216e9f381f974c374a6399af5cdba5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1gaa3216e9f381f974c374a6399af5cdba5" kindref="member">arch_gdb_reg_readone</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref><sp/>*ctx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>regno);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="948" refid="group__arch-gdbstub_1gad717b520d774294bbda78a56cddcaeff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1gad717b520d774294bbda78a56cddcaeff" kindref="member">arch_gdb_reg_writeone</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref><sp/>*ctx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*<ref refid="printk_8c_1a8e1c24afea727e0d4baab03c6de252dc" kindref="member">hex</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hexlen,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>regno);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="group__arch-gdbstub_1gab6f42110cf2340132bf2b3916810c01d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1gab6f42110cf2340132bf2b3916810c01d" kindref="member">arch_gdb_add_breakpoint</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref><sp/>*ctx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>type,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>kind);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="group__arch-gdbstub_1ga734041433f69030ad98439d10ef56ad6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__arch-gdbstub_1ga734041433f69030ad98439d10ef56ad6" kindref="member">arch_gdb_remove_breakpoint</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgdb__ctx" kindref="compound">gdb_ctx</ref><sp/>*ctx,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>type,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref><sp/>addr,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>kind);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_CACHE_MANAGEMENT)<sp/>&amp;&amp;<sp/>defined(CONFIG_HAS_ARCH_CACHE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arch_dcache_enable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arch_dcache_disable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arch_icache_enable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arch_dcache_disable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_dcache_all(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_dcache_range(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_icache_all(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arch_icache_range(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_DCACHE_LINE_SIZE_DETECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arch_dcache_line_size_get(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_DCACHE_LINE_SIZE_DETECT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_ICACHE_LINE_SIZE_DETECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arch_icache_line_size_get(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_ICACHE_LINE_SIZE_DETECT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_CACHE_MANAGEMENT<sp/>&amp;&amp;<sp/>CONFIG_HAS_ARCH_CACHE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_TIMING_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2timing_2types_8h" kindref="compound">timing/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094" refid="group__arch-timing_1ga5d9923569b40437c28879ff4b3ff77c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-timing_1ga5d9923569b40437c28879ff4b3ff77c2" kindref="member">arch_timing_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="group__arch-timing_1gaf8cd88e81c2104b5eb0fbe42967b7834" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-timing_1gaf8cd88e81c2104b5eb0fbe42967b7834" kindref="member">arch_timing_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114" refid="group__arch-timing_1ga566483c64f5c5d2f0465e3f969303fd3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__arch-timing_1ga566483c64f5c5d2f0465e3f969303fd3" kindref="member">arch_timing_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123" refid="group__arch-timing_1gad7a709477650c8596a96fe080f583fdd" refkind="member"><highlight class="normal"><ref refid="include_2timing_2types_8h_1a08ae2ef7b1cd6f125db0cb548ea1f0e2" kindref="member">timing_t</ref><sp/><ref refid="group__arch-timing_1gad7a709477650c8596a96fe080f583fdd" kindref="member">arch_timing_counter_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="group__arch-timing_1ga44d3a7bd8b7008c9cd6c0524e97f128c" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__arch-timing_1ga44d3a7bd8b7008c9cd6c0524e97f128c" kindref="member">arch_timing_cycles_get</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="include_2timing_2types_8h_1a08ae2ef7b1cd6f125db0cb548ea1f0e2" kindref="member">timing_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>start,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="include_2timing_2types_8h_1a08ae2ef7b1cd6f125db0cb548ea1f0e2" kindref="member">timing_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>end);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147" refid="group__arch-timing_1ga026409e1dc323ceddb82b2a6f1cc7ca2" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__arch-timing_1ga026409e1dc323ceddb82b2a6f1cc7ca2" kindref="member">arch_timing_freq_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157" refid="group__arch-timing_1ga8424bc96c05dcae34b7ffd445e2916fe" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__arch-timing_1ga8424bc96c05dcae34b7ffd445e2916fe" kindref="member">arch_timing_cycles_to_ns</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>cycles);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168" refid="group__arch-timing_1ga925b4caff80f1dbac36531b479b24364" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="group__arch-timing_1ga925b4caff80f1dbac36531b479b24364" kindref="member">arch_timing_cycles_to_ns_avg</ref>(<ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/>cycles,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="condvar_2condvar__api_2src_2main_8c_1a612635fe60af527de1e4d54f66e27b94" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177" refid="group__arch-timing_1ga1f7bfb9ce0588f3b423c2a63933d40eb" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="group__arch-timing_1ga1f7bfb9ce0588f3b423c2a63933d40eb" kindref="member">arch_timing_freq_get_mhz</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_TIMING_FUNCTIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_PCIE_MSI_MULTI_VECTOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmsi__vector" kindref="compound">msi_vector</ref>;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmsi__vector" kindref="compound">msi_vector</ref><sp/><ref refid="structmsi__vector" kindref="compound">msi_vector_t</ref>;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>arch_pcie_msi_vectors_allocate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsi__vector" kindref="compound">msi_vector_t</ref><sp/>*vectors,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>n_vector);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>arch_pcie_msi_vector_connect(<ref refid="structmsi__vector" kindref="compound">msi_vector_t</ref><sp/>*vector,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*routine)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parameter),</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parameter,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CONFIG_PCIE_MSI_MULTI_VECTOR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="arch__inlines_8h" kindref="compound">arch/arch_inlines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ASMLANGUAGE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_ARCH_INTERFACE_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/arch_interface.h"/>
  </compounddef>
</doxygen>
