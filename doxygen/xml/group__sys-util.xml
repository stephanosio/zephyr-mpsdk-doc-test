<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__sys-util" kind="group">
    <compoundname>sys-util</compoundname>
    <title>Utility Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__sys-util_1gadfe7046eb6c39bb3c84c18d8ac7a230e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool is_power_of_two</definition>
        <argsstring>(unsigned int x)</argsstring>
        <name>is_power_of_two</name>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Is <computeroutput>x</computeroutput> a power of two? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>x</computeroutput> is a power of two, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="212" column="20" bodyfile="include/sys/util.h" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga1ffeb18b8ed73d37c2485c82988ed1ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref></type>
        <definition>static int64_t arithmetic_shift_right</definition>
        <argsstring>(int64_t value, uint8_t shift)</argsstring>
        <name>arithmetic_shift_right</name>
        <param>
          <type><ref refid="stdint_8h_1ac714c0d2c1a4adb10e73cab29623314b" kindref="member">int64_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>shift</declname>
        </param>
        <briefdescription>
<para>Arithmetic shift right. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to shift </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>value</computeroutput> shifted right by <computeroutput>shift</computeroutput>; opened bit positions are filled with the sign bit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="224" column="23" bodyfile="include/sys/util.h" bodystart="224" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga3379c356de17dbeebfa7588d8c964d5e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void bytecpy</definition>
        <argsstring>(void *dst, const void *src, size_t size)</argsstring>
        <name>bytecpy</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>byte by byte memcpy. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy <computeroutput>size</computeroutput> bytes of <computeroutput>src</computeroutput> into <computeroutput>dest</computeroutput>. This is guaranteed to be done byte by byte.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the destination memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the source of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="251" column="20" bodyfile="include/sys/util.h" bodystart="251" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga8624d1e5411703deac1ab8517f132d7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void byteswp</definition>
        <argsstring>(void *a, void *b, size_t size)</argsstring>
        <name>byteswp</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>byte by byte swap. </para>
        </briefdescription>
        <detaileddescription>
<para>Swap <emphasis>size</emphasis> bytes between memory regions <emphasis>a</emphasis> and <emphasis>b</emphasis>. This is guaranteed to be done byte by byte.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the the first memory region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the the second memory region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to swap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="270" column="20" bodyfile="include/sys/util.h" bodystart="270" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1gaaf91757f6fe86ab417536d5066ce14e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int char2hex</definition>
        <argsstring>(char c, uint8_t *x)</argsstring>
        <name>char2hex</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Convert a single character into a hexadecimal nibble. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of storage for the converted number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="291" column="5" declfile="include/sys/util.h" declline="291" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga9ed3bd04d5c0797aebf333733913028c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hex2char</definition>
        <argsstring>(uint8_t x, char *c)</argsstring>
        <name>hex2char</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Convert a single hexadecimal nibble into a character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of storage for the converted character.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="301" column="5" declfile="include/sys/util.h" declline="301" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1gaf8f2ab98cc3f045ba834dbbb13a5dfd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t bin2hex</definition>
        <argsstring>(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)</argsstring>
        <name>bin2hex</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>hex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hexlen</declname>
        </param>
        <briefdescription>
<para>Convert a binary array into string representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary array to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the binary array to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hex</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of where to store the string representation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the storage area for string representation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the converted string, or 0 if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="313" column="8" declfile="include/sys/util.h" declline="313" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga269a01ffa3f1a3485b79d8a54a78a3f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hex2bin</definition>
        <argsstring>(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)</argsstring>
        <name>hex2bin</name>
        <param>
          <type>const char *</type>
          <declname>hex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hexlen</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Convert a hexadecimal string into a binary array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hex</parametername>
</parameternamelist>
<parameterdescription>
<para>The hexadecimal string to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hexlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the hexadecimal string to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of where to store the binary data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the storage area for binary data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the binary array, or 0 if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="325" column="8" declfile="include/sys/util.h" declline="325" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1gaa0f77b877eb5db5a228b79cba110abe4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t bcd2bin</definition>
        <argsstring>(uint8_t bcd)</argsstring>
        <name>bcd2bin</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>bcd</declname>
        </param>
        <briefdescription>
<para>Convert a binary coded decimal (BCD 8421) value to binary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bcd</parametername>
</parameternamelist>
<parameterdescription>
<para>BCD 8421 value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Binary representation of input value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="334" column="23" bodyfile="include/sys/util.h" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga6dff7f443aa795258c64cee63b29b591" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t bin2bcd</definition>
        <argsstring>(uint8_t bin)</argsstring>
        <name>bin2bcd</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>bin</declname>
        </param>
        <briefdescription>
<para>Convert a binary value to binary coded decimal (BCD 8421). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bin</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BCD 8421 representation of input value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="346" column="23" bodyfile="include/sys/util.h" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1gabd42323692821c970e1038879f8f2f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t u8_to_dec</definition>
        <argsstring>(char *buf, uint8_t buflen, uint8_t value)</argsstring>
        <name>u8_to_dec</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>buflen</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a uint8_t into a decimal string representation. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert a uint8_t value into its ASCII decimal string representation. The string is terminated if there is enough space in buf.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of where to store the string representation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the storage area for string representation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to convert to decimal string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the converted string (excluding terminator if any), or 0 if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="364" column="9" declfile="include/sys/util.h" declline="364" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga1bbcfa5d7bfe757afab489d2ce41e30a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * utf8_trunc</definition>
        <argsstring>(char *utf8_str)</argsstring>
        <name>utf8_trunc</name>
        <param>
          <type>char *</type>
          <declname>utf8_str</declname>
        </param>
        <briefdescription>
<para>Properly truncate a NULL-terminated UTF-8 string. </para>
        </briefdescription>
        <detaileddescription>
<para>Take a NULL-terminated UTF-8 string and ensure that if the string has been truncated (by setting the NULL terminator) earlier by other means, that the string ends with a properly formatted UTF-8 character (1-4 bytes).</para>
<para><htmlonly> 
Example:
     char test_str[] = &quot;€€€&quot;;
     char trunc_utf8[8];

     printf(&quot;Original : %s\n&quot;, test_str); // €€€
     strncpy(trunc_utf8, test_str, sizeof(trunc_utf8));
     trunc_utf8[sizeof(trunc_utf8) - 1] = &apos;\0&apos;;
     printf(&quot;Bad      : %s\n&quot;, trunc_utf8); // €€�
     utf8_trunc(trunc_utf8);
     printf(&quot;Truncated: %s\n&quot;, trunc_utf8); // €€
</htmlonly></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utf8_str</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL-terminated string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the <computeroutput>utf8_str</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="390" column="6" declfile="include/sys/util.h" declline="390" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__sys-util_1ga376935d7e6eece7dbdd382de057ec2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * utf8_lcpy</definition>
        <argsstring>(char *dst, const char *src, size_t n)</argsstring>
        <name>utf8_lcpy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Copies a UTF-8 encoded string from <computeroutput>src</computeroutput> to <computeroutput>dst</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting <computeroutput>dst</computeroutput> will always be NULL terminated, and the <computeroutput>dst</computeroutput> string will always be properly UTF-8 truncated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination of the UTF-8 string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>dst</computeroutput> buffer. Shall not be 0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
return Pointer to the <computeroutput>dst</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="404" column="6" declfile="include/sys/util.h" declline="404" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__sys-util_1gae4ed3d05bcfbe9c8f4a5d81d8c969f19" prot="public" static="no">
        <name>POINTER_TO_UINT</name>
        <param><defname>x</defname></param>
        <initializer>((<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>) (x))</initializer>
        <briefdescription>
<para>Cast <computeroutput>x</computeroutput>, a pointer, to an unsigned integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="39" column="9" bodyfile="include/sys/util.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gab74ce0513c348e0b257d38473e77e1a1" prot="public" static="no">
        <name>UINT_TO_POINTER</name>
        <param><defname>x</defname></param>
        <initializer>((void *) (<ref refid="stdint_8h_1a4788399d1d0b37ccf098a7da82254808" kindref="member">uintptr_t</ref>) (x))</initializer>
        <briefdescription>
<para>Cast <computeroutput>x</computeroutput>, an unsigned integer, to a <computeroutput>void*</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="41" column="9" bodyfile="include/sys/util.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga6e5ec9c46d0140315a7c1d80d1cc3c38" prot="public" static="no">
        <name>POINTER_TO_INT</name>
        <param><defname>x</defname></param>
        <initializer>((<ref refid="stdint_8h_1a0bd5dec00e345e69027427f8621d6a6c" kindref="member">intptr_t</ref>) (x))</initializer>
        <briefdescription>
<para>Cast <computeroutput>x</computeroutput>, a pointer, to a signed integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="43" column="9" bodyfile="include/sys/util.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gae236ed18fe2ff18ab47c15d2e7eeb417" prot="public" static="no">
        <name>INT_TO_POINTER</name>
        <param><defname>x</defname></param>
        <initializer>((void *) (<ref refid="stdint_8h_1a0bd5dec00e345e69027427f8621d6a6c" kindref="member">intptr_t</ref>) (x))</initializer>
        <briefdescription>
<para>Cast <computeroutput>x</computeroutput>, a signed integer, to a <computeroutput>void*</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="45" column="9" bodyfile="include/sys/util.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga2f660aa23a5dbc0f4b8df48b4302b8c3" prot="public" static="no">
        <name>BITS_PER_LONG</name>
        <initializer>(__CHAR_BIT__ * __SIZEOF_LONG__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bits in a long int. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="52" column="9" bodyfile="include/sys/util.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga58530d20924859d16358c7400c37738d" prot="public" static="no">
        <name>GENMASK</name>
        <param><defname>h</defname></param>
        <param><defname>l</defname></param>
        <initializer>	(((~0UL) - (1UL &lt;&lt; (l)) + 1) &amp; (~0UL &gt;&gt; (<ref refid="group__sys-util_1ga2f660aa23a5dbc0f4b8df48b4302b8c3" kindref="member">BITS_PER_LONG</ref> - 1 - (h))))</initializer>
        <briefdescription>
<para>Create a contiguous bitmask starting at bit position <computeroutput>l</computeroutput> and ending at position <computeroutput>h</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="58" column="9" bodyfile="include/sys/util.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga92235ab2e350fbdc01ddf0f894e5e4c0" prot="public" static="no">
        <name>LSB_GET</name>
        <param><defname>value</defname></param>
        <initializer>((value) &amp; -(value))</initializer>
        <briefdescription>
<para>Extract the Least Significant Bit from <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="62" column="9" bodyfile="include/sys/util.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaa49a456f06f7bdbedfcf3517e461947e" prot="public" static="no">
        <name>FIELD_GET</name>
        <param><defname>mask</defname></param>
        <param><defname>value</defname></param>
        <initializer>(((value) &amp; (mask)) / <ref refid="group__sys-util_1ga92235ab2e350fbdc01ddf0f894e5e4c0" kindref="member">LSB_GET</ref>(mask))</initializer>
        <briefdescription>
<para>Extract a bitfield element from <computeroutput>value</computeroutput> corresponding to the field mask <computeroutput>mask</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="68" column="9" bodyfile="include/sys/util.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaa03c8b31bf67a097dd9f8153a04ef86b" prot="public" static="no">
        <name>FIELD_PREP</name>
        <param><defname>mask</defname></param>
        <param><defname>value</defname></param>
        <initializer>(((value) * <ref refid="group__sys-util_1ga92235ab2e350fbdc01ddf0f894e5e4c0" kindref="member">LSB_GET</ref>(mask)) &amp; (mask))</initializer>
        <briefdescription>
<para>Prepare a bitfield element using <computeroutput>value</computeroutput> with <computeroutput>mask</computeroutput> representing its field position and width. The result should be combined with other fields using a logical OR. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="75" column="9" bodyfile="include/sys/util.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga831cb8468911b8ebdb9b42682778e53d" prot="public" static="no">
        <name>ZERO_OR_COMPILE_ERROR</name>
        <param><defname>cond</defname></param>
        <initializer>((int) sizeof(char[1 - 2 * !(cond)]) - 1)</initializer>
        <briefdescription>
<para>0 if <computeroutput>cond</computeroutput> is true-ish; causes a compile error otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="78" column="9" bodyfile="include/sys/util.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaa0be479debd8300ab6b43f4d028ab5da" prot="public" static="no">
        <name>IS_ARRAY</name>
        <param><defname>array</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga831cb8468911b8ebdb9b42682778e53d" kindref="member">ZERO_OR_COMPILE_ERROR</ref>( \
		!__builtin_types_compatible_p(__typeof__(array), \
					      __typeof__(&amp;(array)[0])))</initializer>
        <briefdescription>
<para>Zero if <computeroutput>array</computeroutput> has an array type, a compile error otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro is available only from C, not C++. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="94" column="9" bodyfile="include/sys/util.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" prot="public" static="no">
        <name>ARRAY_SIZE</name>
        <param><defname>array</defname></param>
        <initializer>	((long) (<ref refid="group__sys-util_1gaa0be479debd8300ab6b43f4d028ab5da" kindref="member">IS_ARRAY</ref>(array) + (sizeof(array) / sizeof((array)[0]))))</initializer>
        <briefdescription>
<para>Number of elements in the given <computeroutput>array</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In C++, due to language limitations, this will accept as <computeroutput>array</computeroutput> any type that implements <computeroutput>operator[]</computeroutput>. The results may not be particulary meaningful in this case.</para>
<para>In C, passing a pointer as <computeroutput>array</computeroutput> causes a compile error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="108" column="9" bodyfile="include/sys/util.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga4fbecf59c021cb60fa1267b7818f90ef" prot="public" static="no">
        <name>PART_OF_ARRAY</name>
        <param><defname>array</defname></param>
        <param><defname>ptr</defname></param>
        <initializer>	((<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>) &amp;&amp; ((<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>) &gt;= &amp;array[0] &amp;&amp; (<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>) &lt; &amp;array[<ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(array)]))</initializer>
        <briefdescription>
<para>Check if a pointer <computeroutput>ptr</computeroutput> lies within <computeroutput>array</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>In C but not C++, this causes a compile error if <computeroutput>array</computeroutput> is not an array (e.g. if <computeroutput>ptr</computeroutput> and <computeroutput>array</computeroutput> are mixed up).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>an array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>ptr</computeroutput> is part of <computeroutput>array</computeroutput>, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="123" column="9" bodyfile="include/sys/util.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gac5bc561d1bfd1bf68877fe577779bd2f" prot="public" static="no">
        <name>CONTAINER_OF</name>
        <param><defname>ptr</defname></param>
        <param><defname>type</defname></param>
        <param><defname>field</defname></param>
        <initializer>	((type *)(((char *)(<ref refid="printk_8c_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>)) - offsetof(type, field)))</initializer>
        <briefdescription>
<para>Get a pointer to a structure containing the element. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <verbatim> struct foo {
    int bar;
 };

 struct foo my_foo;
 int *ptr = &amp;my_foo.bar;

 struct foo *container = CONTAINER_OF(ptr, struct foo, bar);
</verbatim> Above, <computeroutput>container</computeroutput> points at <computeroutput>my_foo</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a structure element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the type that <computeroutput>ptr</computeroutput> is an element of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the field within the struct <computeroutput>ptr</computeroutput> points to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the structure that contains <computeroutput>ptr</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="147" column="9" bodyfile="include/sys/util.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaada5610108b15d85c65d863b0c646ef3" prot="public" static="no">
        <name>ROUND_UP</name>
        <param><defname>x</defname></param>
        <param><defname>align</defname></param>
        <initializer>	(((<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> long)(x) + ((<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> long)(align) - 1)) &amp; \
	 ~((<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> long)(align) - 1))</initializer>
        <briefdescription>
<para>Value of <computeroutput>x</computeroutput> rounded up to the next multiple of <computeroutput>align</computeroutput>, which must be a power of 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="154" column="9" bodyfile="include/sys/util.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gad8d2389dbe7ea135eccf237dbafb76dd" prot="public" static="no">
        <name>ROUND_DOWN</name>
        <param><defname>x</defname></param>
        <param><defname>align</defname></param>
        <initializer>	((<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> long)(x) &amp; ~((<ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> long)(align) - 1))</initializer>
        <briefdescription>
<para>Value of <computeroutput>x</computeroutput> rounded down to the previous multiple of <computeroutput>align</computeroutput>, which must be a power of 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="162" column="9" bodyfile="include/sys/util.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga8b16b3a76faa15ea544e4b0edb3e62c7" prot="public" static="no">
        <name>WB_UP</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__sys-util_1gaada5610108b15d85c65d863b0c646ef3" kindref="member">ROUND_UP</ref>(x, sizeof(void *))</initializer>
        <briefdescription>
<para>Value of <computeroutput>x</computeroutput> rounded up to the next word boundary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="166" column="9" bodyfile="include/sys/util.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gadbc789ee99633a92584387ba2a4f7052" prot="public" static="no">
        <name>WB_DN</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__sys-util_1gad8d2389dbe7ea135eccf237dbafb76dd" kindref="member">ROUND_DOWN</ref>(x, sizeof(void *))</initializer>
        <briefdescription>
<para>Value of <computeroutput>x</computeroutput> rounded down to the previous word boundary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="169" column="9" bodyfile="include/sys/util.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaad408461e7ab356650bcd5c83bc0ed39" prot="public" static="no">
        <name>ceiling_fraction</name>
        <param><defname>numerator</defname></param>
        <param><defname>divider</defname></param>
        <initializer>	(((numerator) + ((divider) - 1)) / (divider))</initializer>
        <briefdescription>
<para>Ceiling function applied to <computeroutput>numerator</computeroutput> / <computeroutput>divider</computeroutput> as a fraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="174" column="9" bodyfile="include/sys/util.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f" prot="public" static="no">
        <name>MAX</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &gt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
<para>The larger value between <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Arguments are evaluated twice. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="184" column="9" bodyfile="include/sys/util.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga3acffbd305ee72dcd4593c0d8af64a4f" prot="public" static="no">
        <name>MIN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &lt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
<para>The smaller value between <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Arguments are evaluated twice. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="194" column="9" bodyfile="include/sys/util.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gad6e7d4f6ba5a77f9ee3c04026f1c2b67" prot="public" static="no">
        <name>CLAMP</name>
        <param><defname>val</defname></param>
        <param><defname>low</defname></param>
        <param><defname>high</defname></param>
        <initializer>(((val) &lt;= (low)) ? (low) : <ref refid="group__sys-util_1ga3acffbd305ee72dcd4593c0d8af64a4f" kindref="member">MIN</ref>(val, high))</initializer>
        <briefdescription>
<para>Clamp a value to a given range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Arguments are evaluated multiple times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="204" column="9" bodyfile="include/sys/util.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga5c723c0cc71b83224ead557db3ab74dd" prot="public" static="no">
        <name>KB</name>
        <param><defname>x</defname></param>
        <initializer>((x) &lt;&lt; 10)</initializer>
        <briefdescription>
<para>Number of bytes in <computeroutput>x</computeroutput> kibibytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="415" column="9" bodyfile="include/sys/util.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga44d2b171cc92225ec0a76ef70fc9b531" prot="public" static="no">
        <name>MB</name>
        <param><defname>x</defname></param>
        <initializer>(<ref refid="group__sys-util_1ga5c723c0cc71b83224ead557db3ab74dd" kindref="member">KB</ref>(x) &lt;&lt; 10)</initializer>
        <briefdescription>
<para>Number of bytes in <computeroutput>x</computeroutput> mebibytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="420" column="9" bodyfile="include/sys/util.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaf207e8203eedc05adcf341a24bfa6cbb" prot="public" static="no">
        <name>GB</name>
        <param><defname>x</defname></param>
        <initializer>(<ref refid="group__sys-util_1ga44d2b171cc92225ec0a76ef70fc9b531" kindref="member">MB</ref>(x) &lt;&lt; 10)</initializer>
        <briefdescription>
<para>Number of bytes in <computeroutput>x</computeroutput> gibibytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="422" column="9" bodyfile="include/sys/util.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaee55275295c076c6d23c994777623253" prot="public" static="no">
        <name>KHZ</name>
        <param><defname>x</defname></param>
        <initializer>((x) * 1000)</initializer>
        <briefdescription>
<para>Number of Hz in <computeroutput>x</computeroutput> kHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="425" column="9" bodyfile="include/sys/util.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gab7b18750ddf0850461f926ae151ca7fa" prot="public" static="no">
        <name>MHZ</name>
        <param><defname>x</defname></param>
        <initializer>(<ref refid="group__sys-util_1gaee55275295c076c6d23c994777623253" kindref="member">KHZ</ref>(x) * 1000)</initializer>
        <briefdescription>
<para>Number of Hz in <computeroutput>x</computeroutput> MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util.h" line="427" column="9" bodyfile="include/sys/util.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" prot="public" static="no">
        <name>BIT</name>
        <param><defname>n</defname></param>
        <initializer>(1UL &lt;&lt; (n))</initializer>
        <briefdescription>
<para>Unsigned integer with bit position <computeroutput>n</computeroutput> set (signed in assembly language). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="44" column="9" bodyfile="include/sys/util_macro.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gacfdade52af3ced2d87472cec47d14a76" prot="public" static="no">
        <name>BIT64</name>
        <param><defname>_n</defname></param>
        <initializer>(1ULL &lt;&lt; (_n))</initializer>
        <briefdescription>
<para>64-bit unsigned integer with bit position <computeroutput>_n</computeroutput> set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="49" column="9" bodyfile="include/sys/util_macro.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga23a900e882ecb48455e70f01fd45b246" prot="public" static="no">
        <name>WRITE_BIT</name>
        <param><defname>var</defname></param>
        <param><defname>bit</defname></param>
        <param><defname>set</defname></param>
        <initializer>	((var) = (set) ? ((var) | <ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(bit)) : ((var) &amp; ~<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(bit)))</initializer>
        <briefdescription>
<para>Set or clear a bit depending on a boolean value. </para>
        </briefdescription>
        <detaileddescription>
<para>The argument <computeroutput>var</computeroutput> is a variable whose value is written to as a side effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to be altered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>if 0, clears <computeroutput>bit</computeroutput> in <computeroutput>var</computeroutput>; any other value sets <computeroutput>bit</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="61" column="9" bodyfile="include/sys/util_macro.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga3c12c6d36ad0aa481a3436923d21f4f8" prot="public" static="no">
        <name>BIT_MASK</name>
        <param><defname>n</defname></param>
        <initializer>(<ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(n) - 1UL)</initializer>
        <briefdescription>
<para>Bit mask with bits 0 through <computeroutput>n-1</computeroutput> (inclusive) set, or 0 if <computeroutput>n</computeroutput> is 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="68" column="9" bodyfile="include/sys/util_macro.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga1a138896caafcb2429a6483ea7412d12" prot="public" static="no">
        <name>BIT64_MASK</name>
        <param><defname>n</defname></param>
        <initializer>(<ref refid="group__sys-util_1gacfdade52af3ced2d87472cec47d14a76" kindref="member">BIT64</ref>(n) - 1ULL)</initializer>
        <briefdescription>
<para>64-bit bit mask with bits 0 through <computeroutput>n-1</computeroutput> (inclusive) set, or 0 if <computeroutput>n</computeroutput> is 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="74" column="9" bodyfile="include/sys/util_macro.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" prot="public" static="no">
        <name>IS_ENABLED</name>
        <param><defname>config_macro</defname></param>
        <initializer>Z_IS_ENABLED1(config_macro)</initializer>
        <briefdescription>
<para>Check for macro definition in compiler-visible expressions. </para>
        </briefdescription>
        <detaileddescription>
<para>This trick was pioneered in Linux as the config_enabled() macro. It has the effect of taking a macro value that may be defined to &quot;1&quot; or may not be defined at all and turning it into a literal expression that can be handled by the C compiler instead of just the preprocessor. It is often used with a <computeroutput>CONFIG_FOO</computeroutput> macro which may be defined to 1 via Kconfig, or left undefined.</para>
<para>That is, it works similarly to <computeroutput>#if defined(CONFIG_FOO)</computeroutput> except that its expansion is a C expression. Thus, much <computeroutput>#ifdef</computeroutput> usage can be replaced with equivalents like: <verbatim>if (IS_ENABLED(CONFIG_FOO)) {
        do_something_with_foo
}
</verbatim> This is cleaner since the compiler can generate errors and warnings for <computeroutput>do_something_with_foo</computeroutput> even when <computeroutput>CONFIG_FOO</computeroutput> is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config_macro</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>config_macro</computeroutput> is defined to 1, 0 otherwise (including if <computeroutput>config_macro</computeroutput> is not defined) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="101" column="9" bodyfile="include/sys/util_macro.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" prot="public" static="no">
        <name>COND_CODE_1</name>
        <param><defname>_flag</defname></param>
        <param><defname>_if_1_code</defname></param>
        <param><defname>_else_code</defname></param>
        <initializer>	Z_COND_CODE_1(_flag, _if_1_code, _else_code)</initializer>
        <briefdescription>
<para>Insert code depending on whether <computeroutput>_flag</computeroutput> expands to 1 or not. </para>
        </briefdescription>
        <detaileddescription>
<para>This relies on similar tricks as <ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED()</ref>, but as the result of <computeroutput>_flag</computeroutput> expansion, results in either <computeroutput>_if_1_code</computeroutput> or <computeroutput>_else_code</computeroutput> is expanded.</para>
<para>To prevent the preprocessor from treating commas as argument separators, the <computeroutput>_if_1_code</computeroutput> and <computeroutput>_else_code</computeroutput> expressions must be inside brackets/parentheses: <computeroutput>()</computeroutput>. These are stripped away during macro expansion.</para>
<para>Example: <verbatim>COND_CODE_1(CONFIG_FLAG, (uint32_t x;), (there_is_no_flag();))
</verbatim> If <computeroutput>CONFIG_FLAG</computeroutput> is defined to 1, this expands to: <verbatim>uint32_t x;
</verbatim> It expands to <computeroutput>there_is_no_flag();</computeroutput> otherwise.</para>
<para>This could be used as an alternative to: <verbatim>#if defined(CONFIG_FLAG) &amp;&amp; (CONFIG_FLAG == 1)
#define MAYBE_DECLARE(x) uint32_t x
#else
#define MAYBE_DECLARE(x) there_is_no_flag()
#endif

MAYBE_DECLARE(x);
</verbatim> However, the advantage of <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1()</ref> is that code is resolved in place where it is used, while the <computeroutput>#if</computeroutput> method defines <computeroutput>MAYBE_DECLARE</computeroutput> on two lines and requires it to be invoked again on a separate line. This makes <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1()</ref> more concise and also sometimes more useful when used within another macro&apos;s expansion.</para>
<para><simplesect kind="note"><para><computeroutput>_flag</computeroutput> can be the result of preprocessor expansion, e.g. an expression involving <computeroutput><ref refid="group__sys-util_1ga8a0e9835e0a8f864ffc2359b9c419cc2" kindref="member">NUM_VA_ARGS_LESS_1(...)</ref></computeroutput>. However, <computeroutput>_if_1_code</computeroutput> is only expanded if <computeroutput>_flag</computeroutput> expands to the integer literal 1. Integer expressions that evaluate to 1, e.g. after doing some arithmetic, will not work.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluated flag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_if_1_code</parametername>
</parameternamelist>
<parameterdescription>
<para>result if <computeroutput>_flag</computeroutput> expands to 1; must be in parentheses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_else_code</parametername>
</parameternamelist>
<parameterdescription>
<para>result otherwise; must be in parentheses </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="156" column="9" bodyfile="include/sys/util_macro.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga5483ea38af79bc6c4509936288705377" prot="public" static="no">
        <name>COND_CODE_0</name>
        <param><defname>_flag</defname></param>
        <param><defname>_if_0_code</defname></param>
        <param><defname>_else_code</defname></param>
        <initializer>	Z_COND_CODE_0(_flag, _if_0_code, _else_code)</initializer>
        <briefdescription>
<para>Like <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1()</ref> except tests if <computeroutput>_flag</computeroutput> is 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1()</ref>, except that it tests whether <computeroutput>_flag</computeroutput> expands to the integer literal 0. It expands to <computeroutput>_if_0_code</computeroutput> if so, and <computeroutput>_else_code</computeroutput> otherwise; both of these must be enclosed in parentheses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluated flag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_if_0_code</parametername>
</parameternamelist>
<parameterdescription>
<para>result if <computeroutput>_flag</computeroutput> expands to 0; must be in parentheses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_else_code</parametername>
</parameternamelist>
<parameterdescription>
<para>result otherwise; must be in parentheses </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="172" column="9" bodyfile="include/sys/util_macro.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gae67ffe50e848951dbde309ed569ea925" prot="public" static="no">
        <name>IF_ENABLED</name>
        <param><defname>_flag</defname></param>
        <param><defname>_code</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(_flag, _code, ())</initializer>
        <briefdescription>
<para>Insert code if <computeroutput>_flag</computeroutput> is defined and equals 1. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1()</ref>, this expands to <computeroutput>_code</computeroutput> if <computeroutput>_flag</computeroutput> is defined to 1; it expands to nothing otherwise.</para>
<para>Example: <verbatim>IF_ENABLED(CONFIG_FLAG, (uint32_t foo;))
</verbatim> If <computeroutput>CONFIG_FLAG</computeroutput> is defined to 1, this expands to: <verbatim>uint32_t foo;
</verbatim> and to nothing otherwise.</para>
<para>It can be considered as a more compact alternative to: <verbatim>#if defined(CONFIG_FLAG) &amp;&amp; (CONFIG_FLAG == 1)
uint32_t foo;
#endif
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluated flag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_code</parametername>
</parameternamelist>
<parameterdescription>
<para>result if <computeroutput>_flag</computeroutput> expands to 1; must be in parentheses </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="200" column="9" bodyfile="include/sys/util_macro.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gab9487eea703d51cb1f235432dab4a1c7" prot="public" static="no">
        <name>IS_EMPTY</name>
        <param><defname>...</defname></param>
        <initializer>Z_IS_EMPTY_(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Check if a macro has a replacement expression. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>a</computeroutput> is a macro defined to a nonempty value, this will return true, otherwise it will return false. It only works with defined macros, so an additional <computeroutput>#ifdef</computeroutput> test may be needed in some cases.</para>
<para>This macro may be used with <ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1()</ref> and <ref refid="group__sys-util_1ga5483ea38af79bc6c4509936288705377" kindref="member">COND_CODE_0()</ref> while processing <computeroutput><bold>VA_ARGS</bold></computeroutput> to avoid processing empty arguments.</para>
<para>Example: <verbatim> #define EMPTY
 #define NON_EMPTY  1
 #undef  UNDEFINED
 IS_EMPTY(EMPTY)
 IS_EMPTY(NON_EMPTY)
 IS_EMPTY(UNDEFINED)
 #if defined(EMPTY) &amp;&amp; IS_EMPTY(EMPTY) == true
 some_conditional_code
 #endif
</verbatim> In above examples, the invocations of <ref refid="group__sys-util_1gab9487eea703d51cb1f235432dab4a1c7" kindref="member">IS_EMPTY(...)</ref> return <computeroutput>true</computeroutput>, <computeroutput>false</computeroutput>, and <computeroutput>true</computeroutput>; <computeroutput>some_conditional_code</computeroutput> is included.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>macro to check for emptiness (may be <computeroutput><bold>VA_ARGS</bold></computeroutput>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="230" column="9" bodyfile="include/sys/util_macro.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gab9762d5128988f7f4f5d51213ea52025" prot="public" static="no">
        <name>LIST_DROP_EMPTY</name>
        <param><defname>...</defname></param>
        <initializer>	Z_LIST_DROP_FIRST(<ref refid="threads_2no-multithreading_2src_2main_8c_1af2de6cd2b60b623046744e6314a5efb6" kindref="member">FOR_EACH</ref>(Z_LIST_NO_EMPTIES, (), __VA_ARGS__))</initializer>
        <briefdescription>
<para>Remove empty arguments from list. </para>
        </briefdescription>
        <detaileddescription>
<para>During macro expansion, <computeroutput><bold>VA_ARGS</bold></computeroutput> and other preprocessor generated lists may contain empty elements, e.g.: <verbatim> #define LIST ,a,b,,d,
</verbatim> Using EMPTY to show each empty element, LIST contains: <verbatim> EMPTY, a, b, EMPTY, d
</verbatim> When processing such lists, e.g. using <ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref>, all empty elements will be processed, and may require filtering out. To make that process easier, it is enough to invoke LIST_DROP_EMPTY which will remove all empty elements.</para>
<para>Example: <verbatim> LIST_DROP_EMPTY(LIST)
</verbatim> expands to: <verbatim> a, b, d
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>list to be processed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="259" column="9" bodyfile="include/sys/util_macro.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga2b7cf2a3641be7b89138615764d60ba3" prot="public" static="no">
        <name>EMPTY</name>
        <briefdescription>
<para>Macro with an empty expansion. </para>
        </briefdescription>
        <detaileddescription>
<para>This trivial definition is provided for readability when a macro should expand to an empty result, which e.g. is sometimes needed to silence checkpatch.</para>
<para>Example: <verbatim> #define LIST_ITEM(n) , item##n
</verbatim> The above would cause checkpatch to complain, but: <verbatim> #define LIST_ITEM(n) EMPTY, item##n
</verbatim> would not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="279" column="9" bodyfile="include/sys/util_macro.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaaed493c6115c04272077a0f3854b9a83" prot="public" static="no">
        <name>IDENTITY</name>
        <param><defname>V</defname></param>
        <initializer>V</initializer>
        <briefdescription>
<para>Macro that expands to its argument. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful in macros like <computeroutput><ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref></computeroutput> when there is no transformation required on the list elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>any value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="289" column="9" bodyfile="include/sys/util_macro.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gabbe04a4d59a495b2b86196304b937ec6" prot="public" static="no">
        <name>GET_ARG_N</name>
        <param><defname>N</defname></param>
        <param><defname>...</defname></param>
        <initializer>Z_GET_ARG_##N(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Get nth argument from argument list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument index to fetch. Counter from 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable list of argments from which one argument is returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nth argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="299" column="9" bodyfile="include/sys/util_macro.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga01e1dc9b92e5be6895528d1da5f0c88b" prot="public" static="no">
        <name>GET_ARGS_LESS_N</name>
        <param><defname>N</defname></param>
        <param><defname>...</defname></param>
        <initializer>Z_GET_ARGS_LESS_##N(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Strips n first arguments from the argument list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of arguments to discard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable list of argments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>argument list without N first arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="309" column="9" bodyfile="include/sys/util_macro.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga50cfdf948906976562c3f0625c84c2b2" prot="public" static="no">
        <name>UTIL_OR</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer><ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="util__internal_8h_1a80cbb3a182096676524d761113349bc8" kindref="member">UTIL_BOOL</ref>(a), (a), (b))</initializer>
        <briefdescription>
<para>Like <computeroutput>a || b</computeroutput>, but does evaluation and short-circuiting at C preprocessor time. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not the same as the binary <computeroutput>||</computeroutput> operator; in particular, <computeroutput>a</computeroutput> should expand to an integer literal 0 or 1. However, <computeroutput>b</computeroutput> can be any value.</para>
<para>This can be useful when <computeroutput>b</computeroutput> is an expression that would cause a build error when <computeroutput>a</computeroutput> is 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="322" column="9" bodyfile="include/sys/util_macro.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga26179b776b4a03143e8be1612ef6d853" prot="public" static="no">
        <name>UTIL_AND</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer><ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="util__internal_8h_1a80cbb3a182096676524d761113349bc8" kindref="member">UTIL_BOOL</ref>(a), (b), (0))</initializer>
        <briefdescription>
<para>Like <computeroutput>a &amp;&amp; b</computeroutput>, but does evaluation and short-circuiting at C preprocessor time. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not the same as the binary <computeroutput>&amp;&amp;</computeroutput>, however; in particular, <computeroutput>a</computeroutput> should expand to an integer literal 0 or 1. However, <computeroutput>b</computeroutput> can be any value.</para>
<para>This can be useful when <computeroutput>b</computeroutput> is an expression that would cause a build error when <computeroutput>a</computeroutput> is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="335" column="9" bodyfile="include/sys/util_macro.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga31079a877f7990c552cbfaf10225e37a" prot="public" static="no">
        <name>UTIL_LISTIFY</name>
        <param><defname>LEN</defname></param>
        <param><defname>F</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="util__internal_8h_1a7e7766e792d1638bfbbc9d0f328d3d0d" kindref="member">UTIL_CAT</ref>(Z_UTIL_LISTIFY_, LEN)(F, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Generates a sequence of code. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <verbatim>#define FOO(i, _) MY_PWM ## i ,
{ UTIL_LISTIFY(PWM_COUNT, FOO) }
</verbatim> The above two lines expand to:</para>
<para>{ MY_PWM0 , MY_PWM1 , }</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>LEN</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sequence. Must be an integer literal less than 255. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>A macro function that accepts at least two arguments: <computeroutput>F(i, ...)</computeroutput>. <computeroutput>F</computeroutput> is called repeatedly in the expansion. Its first argument <computeroutput>i</computeroutput> is the index in the sequence, and the variable list of arguments passed to UTIL_LISTIFY are passed through to <computeroutput>F</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Calling UTIL_LISTIFY with undefined arguments has undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="360" column="9" bodyfile="include/sys/util_macro.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" prot="public" static="no">
        <name>FOR_EACH</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_FOR_EACH(F, sep, <ref refid="group__sys-util_1ga58de032c2ed7b4094c447c512dfd3784" kindref="member">REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Call a macro <computeroutput>F</computeroutput> on each provided argument with a given separator between each call. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <verbatim>#define F(x) int a##x
FOR_EACH(F, (;), 4, 5, 6);
</verbatim> This expands to: <verbatim>int a4;
int a5;
int a6;
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; this is required to enable providing a comma as separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(element)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="383" column="9" bodyfile="include/sys/util_macro.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga24b3862161d725f5503b1bb08f4e339f" prot="public" static="no">
        <name>FOR_EACH_NONEMPTY_TERM</name>
        <param><defname>F</defname></param>
        <param><defname>term</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga5483ea38af79bc6c4509936288705377" kindref="member">COND_CODE_0</ref>(							\
		/* are there zero non-empty arguments ? */		\
		<ref refid="group__sys-util_1ga8a0e9835e0a8f864ffc2359b9c419cc2" kindref="member">NUM_VA_ARGS_LESS_1</ref>(<ref refid="group__sys-util_1gab9762d5128988f7f4f5d51213ea52025" kindref="member">LIST_DROP_EMPTY</ref>(__VA_ARGS__, _)),	\
		/* if so, expand to nothing */				\
		(),							\
		/* otherwise, expand to: */				\
		(/* <ref refid="threads_2no-multithreading_2src_2main_8c_1af2de6cd2b60b623046744e6314a5efb6" kindref="member">FOR_EACH</ref>() on nonempty elements, */		\
			<ref refid="threads_2no-multithreading_2src_2main_8c_1af2de6cd2b60b623046744e6314a5efb6" kindref="member">FOR_EACH</ref>(F, term, <ref refid="group__sys-util_1gab9762d5128988f7f4f5d51213ea52025" kindref="member">LIST_DROP_EMPTY</ref>(__VA_ARGS__))	\
			/* plus a final terminator */			\
			__DEBRACKET term				\
		))</initializer>
        <briefdescription>
<para>Like <ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref>, but with a terminator instead of a separator, and drops empty elements from the argument list. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>sep</computeroutput> argument to <computeroutput><ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH(F, (sep), a, b)</ref></computeroutput> is a separator which is placed between calls to <computeroutput>F</computeroutput>, like this: <verbatim>FOR_EACH(F, (sep), a, b) // F(a) sep F(b)
                         //               ^^^ no sep here!
</verbatim> By contrast, the <computeroutput>term</computeroutput> argument to <computeroutput>FOR_EACH_NONEMPTY_TERM(F, (term), a, b)</computeroutput> is added after each time <computeroutput>F</computeroutput> appears in the expansion: <verbatim>FOR_EACH_NONEMPTY_TERM(F, (term), a, b) // F(a) term F(b) term
                                        //                ^^^^
</verbatim> Further, any empty elements are dropped: <verbatim>FOR_EACH_NONEMPTY_TERM(F, (term), a, EMPTY, b) // F(a) term F(b) term
</verbatim> This is more convenient in some cases, because <ref refid="group__sys-util_1ga24b3862161d725f5503b1bb08f4e339f" kindref="member">FOR_EACH_NONEMPTY_TERM()</ref> expands to nothing when given an empty argument list, and it&apos;s often cumbersome to write a macro <computeroutput>F</computeroutput> that does the right thing even when given an empty argument.</para>
<para>One example is when <computeroutput><bold>VA_ARGS</bold></computeroutput> may or may not be empty, and the results are embedded in a larger initializer: <verbatim>#define SQUARE(x) ((x)*(x))

int my_array[] = {
        FOR_EACH_NONEMPTY_TERM(SQUARE, (,), FOO(...))
        FOR_EACH_NONEMPTY_TERM(SQUARE, (,), BAR(...))
        FOR_EACH_NONEMPTY_TERM(SQUARE, (,), BAZ(...))
};
</verbatim> This is more convenient than:</para>
<para><orderedlist>
<listitem><para>figuring out whether the <computeroutput>FOO</computeroutput>, <computeroutput>BAR</computeroutput>, and <computeroutput>BAZ</computeroutput> expansions are empty and adding a comma manually (or not) between <ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref> calls</para>
</listitem><listitem><para>rewriting SQUARE so it reacts appropriately when &quot;x&quot; is empty (which would be necessary if e.g. <computeroutput>FOO</computeroutput> expands to nothing)</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke on each nonempty element of the variable arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>Terminator (e.g. comma or semicolon) placed after each invocation of F. Must be in parentheses; this is required to enable providing a comma as separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(element)</computeroutput> for each nonempty element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="438" column="9" bodyfile="include/sys/util_macro.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga069f709e18eeafb8d276b5ff4fc09d31" prot="public" static="no">
        <name>FOR_EACH_IDX</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_FOR_EACH_IDX(F, sep, <ref refid="group__sys-util_1ga58de032c2ed7b4094c447c512dfd3784" kindref="member">REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Call macro <computeroutput>F</computeroutput> on each provided argument, with the argument&apos;s index as an additional parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref>, except <computeroutput>F</computeroutput> should be a macro which takes two arguments: <computeroutput>F(index, variable_arg)</computeroutput>.</para>
<para>Example: <verbatim>#define F(idx, x) int a##idx = x
FOR_EACH_IDX(F, (;), 4, 5, 6);
</verbatim> This expands to: <verbatim>int a0 = 4;
int a1 = 5;
int a2 = 6;
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; this is required to enable providing a comma as separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(index, element)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="475" column="9" bodyfile="include/sys/util_macro.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga1a2b2aa21d7cc37f33e6a62abd2ae340" prot="public" static="no">
        <name>FOR_EACH_FIXED_ARG</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>fixed_arg</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_FOR_EACH_FIXED_ARG(F, sep, fixed_arg, <ref refid="group__sys-util_1ga58de032c2ed7b4094c447c512dfd3784" kindref="member">REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Call macro <computeroutput>F</computeroutput> on each provided argument, with an additional fixed argument as a parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref>, except <computeroutput>F</computeroutput> should be a macro which takes two arguments: <computeroutput>F(variable_arg, fixed_arg)</computeroutput>.</para>
<para>Example: <verbatim>static void func(int val, void *dev);
FOR_EACH_FIXED_ARG(func, (;), dev, 4, 5, 6);
</verbatim> This expands to: <verbatim>func(4, dev);
func(5, dev);
func(6, dev);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; this is required to enable providing a comma as separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fixed_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Fixed argument passed to <computeroutput>F</computeroutput> as the second macro parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(element, fixed_arg)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="503" column="9" bodyfile="include/sys/util_macro.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga2ab7377f5493123ffd29ebd1286457a9" prot="public" static="no">
        <name>FOR_EACH_IDX_FIXED_ARG</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>fixed_arg</defname></param>
        <param><defname>...</defname></param>
        <initializer>	Z_FOR_EACH_IDX_FIXED_ARG(F, sep, fixed_arg, <ref refid="group__sys-util_1ga58de032c2ed7b4094c447c512dfd3784" kindref="member">REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Calls macro <computeroutput>F</computeroutput> for each variable argument with an index and fixed argument. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like the combination of <ref refid="group__sys-util_1ga069f709e18eeafb8d276b5ff4fc09d31" kindref="member">FOR_EACH_IDX()</ref> with <ref refid="group__sys-util_1ga1a2b2aa21d7cc37f33e6a62abd2ae340" kindref="member">FOR_EACH_FIXED_ARG()</ref>.</para>
<para>Example: <verbatim>#define F(idx, x, fixed_arg) int fixed_arg##idx = x
FOR_EACH_IDX_FIXED_ARG(F, (;), a, 4, 5, 6);
</verbatim> This expands to: <verbatim>int a0 = 4;
int a1 = 5;
int a2 = 6;
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; This is required to enable providing a comma as separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fixed_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Fixed argument passed to <computeroutput>F</computeroutput> as the third macro parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable list of arguments. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(index, element, fixed_arg)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="531" column="9" bodyfile="include/sys/util_macro.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga58de032c2ed7b4094c447c512dfd3784" prot="public" static="no">
        <name>REVERSE_ARGS</name>
        <param><defname>...</defname></param>
        <initializer>	Z_FOR_EACH_ENGINE(Z_FOR_EACH_EXEC, (,), Z_BYPASS, _, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Reverse arguments order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="538" column="9" bodyfile="include/sys/util_macro.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga8a0e9835e0a8f864ffc2359b9c419cc2" prot="public" static="no">
        <name>NUM_VA_ARGS_LESS_1</name>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="util__internal_8h_1a70e3443886f63259dc12b14cc26c365f" kindref="member">NUM_VA_ARGS_LESS_1_IMPL</ref>(__VA_ARGS__, 63, 62, 61, \
	60, 59, 58, 57, 56, 55, 54, 53, 52, 51,		 \
	50, 49, 48, 47, 46, 45, 44, 43, 42, 41,		 \
	40, 39, 38, 37, 36, 35, 34, 33, 32, 31,		 \
	30, 29, 28, 27, 26, 25, 24, 23, 22, 21,		 \
	20, 19, 18, 17, 16, 15, 14, 13, 12, 11,		 \
	10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, ~)</initializer>
        <briefdescription>
<para>Number of arguments in the variable arguments list minus one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of variadic arguments in the argument list, minus one </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="547" column="9" bodyfile="include/sys/util_macro.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1gaf82371bd6bf317add5276fc6cbd66662" prot="public" static="no">
        <name>MACRO_MAP_CAT</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="util__internal_8h_1abe4f647ef2c1c706bc9d0d0e737e58bf" kindref="member">MACRO_MAP_CAT_</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Mapping macro that pastes results together. </para>
        </briefdescription>
        <detaileddescription>
<para>This is similar to <ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref> in that it invokes a macro repeatedly on each element of <computeroutput><bold>VA_ARGS</bold></computeroutput>. However, unlike <ref refid="group__sys-util_1ga278c8b7cbbea2f585e371d3568f3cb12" kindref="member">FOR_EACH()</ref>, <ref refid="group__sys-util_1gaf82371bd6bf317add5276fc6cbd66662" kindref="member">MACRO_MAP_CAT()</ref> pastes the results together into a single token.</para>
<para>For example, with this macro FOO: <verbatim>#define FOO(x) item_##x##_
</verbatim> <computeroutput><ref refid="group__sys-util_1gaf82371bd6bf317add5276fc6cbd66662" kindref="member">MACRO_MAP_CAT(FOO, a, b, c)</ref>,</computeroutput> expands to the token: <verbatim>item_a_item_b_item_c_
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to expand on each argument, followed by its arguments. (The macro should take exactly one argument.) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The results of expanding the macro on each argument, all pasted together </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="576" column="9" bodyfile="include/sys/util_macro.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sys-util_1ga58eba1f911e21da46b8beea264934d55" prot="public" static="no">
        <name>MACRO_MAP_CAT_N</name>
        <param><defname>N</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="util__internal_8h_1a72d29784bb0a030942e2c6eb2f9d42b9" kindref="member">MACRO_MAP_CAT_N_</ref>(N, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Mapping macro that pastes a fixed number of results together. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="group__sys-util_1gaf82371bd6bf317add5276fc6cbd66662" kindref="member">MACRO_MAP_CAT()</ref>, but expects a fixed number of arguments. If more arguments are given than are expected, the rest are ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of arguments to map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to expand on each argument, followed by its arguments. (The macro should take exactly one argument.) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The results of expanding the macro on each argument, all pasted together </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/util_macro.h" line="591" column="9" bodyfile="include/sys/util_macro.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
