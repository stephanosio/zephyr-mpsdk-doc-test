<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="net__ip_8h" kind="file" language="C++">
    <compoundname>net_ip.h</compoundname>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes refid="util_8h" local="no">sys/util.h</includes>
    <includes refid="byteorder_8h" local="no">sys/byteorder.h</includes>
    <includes refid="toolchain_8h" local="no">toolchain.h</includes>
    <includes refid="net__linkaddr_8h" local="no">net/net_linkaddr.h</includes>
    <includes local="no">syscalls/net_ip.h</includes>
    <includedby refid="net_2can_8h" local="no">include/net/can.h</includedby>
    <includedby refid="coap_8h" local="no">include/net/coap.h</includedby>
    <includedby refid="dns__resolve_8h" local="no">include/net/dns_resolve.h</includedby>
    <includedby refid="ethernet_8h" local="no">include/net/ethernet.h</includedby>
    <includedby refid="http__client_8h" local="no">include/net/http_client.h</includedby>
    <includedby refid="igmp_8h" local="no">include/net/igmp.h</includedby>
    <includedby refid="mqtt_8h" local="no">include/net/mqtt.h</includedby>
    <includedby refid="net__context_8h" local="no">include/net/net_context.h</includedby>
    <includedby refid="net__event_8h" local="no">include/net/net_event.h</includedby>
    <includedby refid="net__if_8h" local="no">include/net/net_if.h</includedby>
    <includedby refid="net__offload_8h" local="no">include/net/net_offload.h</includedby>
    <includedby refid="net__pkt_8h" local="no">include/net/net_pkt.h</includedby>
    <includedby refid="net_2socket_8h" local="no">include/net/socket.h</includedby>
    <includedby refid="socket__can_8h" local="no">include/net/socket_can.h</includedby>
    <includedby refid="socket__net__mgmt_8h" local="no">include/net/socket_net_mgmt.h</includedby>
    <includedby refid="socket__offload_8h" local="no">include/net/socket_offload.h</includedby>
    <includedby refid="udp_8h" local="no">include/net/udp.h</includedby>
    <includedby refid="virtual_8h" local="no">include/net/virtual.h</includedby>
    <includedby refid="websocket_8h" local="no">include/net/websocket.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/net/net_ip.h</label>
        <link refid="net__ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>net/net_linkaddr.h</label>
        <link refid="net__linkaddr_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/byteorder.h</label>
        <link refid="byteorder_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sys/errno_private.h</label>
        <link refid="errno__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="9">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="5">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>errno.h</label>
        <link refid="errno_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="6">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="2">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="20">
        <label>syscalls/errno_private.h</label>
      </node>
      <node id="21">
        <label>syscalls/net_ip.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="37">
        <label>include/net/bt.h</label>
        <link refid="bt_8h"/>
      </node>
      <node id="2">
        <label>include/net/can.h</label>
        <link refid="net_2can_8h"/>
      </node>
      <node id="3">
        <label>include/net/coap.h</label>
        <link refid="coap_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/net/dns_resolve.h</label>
        <link refid="dns__resolve_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>include/net/dsa.h</label>
        <link refid="dsa_8h"/>
      </node>
      <node id="28">
        <label>include/net/dummy.h</label>
        <link refid="dummy_8h"/>
      </node>
      <node id="18">
        <label>include/net/ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>include/net/ethernet_mgmt.h</label>
        <link refid="ethernet__mgmt_8h"/>
      </node>
      <node id="21">
        <label>include/net/http_client.h</label>
        <link refid="http__client_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>include/net/ieee802154.h</label>
        <link refid="ieee802154_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>include/net/ieee802154_mgmt.h</label>
        <link refid="ieee802154__mgmt_8h"/>
      </node>
      <node id="29">
        <label>include/net/ieee802154_radio.h</label>
        <link refid="ieee802154__radio_8h"/>
      </node>
      <node id="24">
        <label>include/net/igmp.h</label>
        <link refid="igmp_8h"/>
      </node>
      <node id="4">
        <label>include/net/lwm2m.h</label>
        <link refid="lwm2m_8h"/>
      </node>
      <node id="23">
        <label>include/net/mqtt.h</label>
        <link refid="mqtt_8h"/>
      </node>
      <node id="43">
        <label>include/net/net_config.h</label>
        <link refid="net__config_8h"/>
      </node>
      <node id="25">
        <label>include/net/net_context.h</label>
        <link refid="net__context_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>include/net/net_event.h</label>
        <link refid="net__event_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>include/net/net_if.h</label>
        <link refid="net__if_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/net/net_ip.h</label>
        <link refid="net__ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>include/net/net_mgmt.h</label>
        <link refid="net__mgmt_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>include/net/net_offload.h</label>
        <link refid="net__offload_8h"/>
      </node>
      <node id="27">
        <label>include/net/net_pkt.h</label>
        <link refid="net__pkt_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/net/net_pkt_filter.h</label>
        <link refid="net__pkt__filter_8h"/>
      </node>
      <node id="40">
        <label>include/net/net_stats.h</label>
        <link refid="net__stats_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>include/net/openthread.h</label>
        <link refid="openthread_8h"/>
      </node>
      <node id="30">
        <label>include/net/ppp.h</label>
        <link refid="ppp_8h"/>
      </node>
      <node id="31">
        <label>include/net/promiscuous.h</label>
        <link refid="promiscuous_8h"/>
      </node>
      <node id="16">
        <label>include/net/sntp.h</label>
        <link refid="sntp_8h"/>
      </node>
      <node id="6">
        <label>include/net/socket.h</label>
        <link refid="net_2socket_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>include/net/socket_can.h</label>
        <link refid="socket__can_8h"/>
      </node>
      <node id="46">
        <label>include/net/socket_net_mgmt.h</label>
        <link refid="socket__net__mgmt_8h"/>
      </node>
      <node id="7">
        <label>include/net/socket_offload.h</label>
        <link refid="socket__offload_8h"/>
      </node>
      <node id="12">
        <label>include/net/socketutils.h</label>
        <link refid="socketutils_8h"/>
      </node>
      <node id="8">
        <label>include/net/tftp.h</label>
        <link refid="tftp_8h"/>
      </node>
      <node id="32">
        <label>include/net/udp.h</label>
        <link refid="udp_8h"/>
      </node>
      <node id="33">
        <label>include/net/virtual.h</label>
        <link refid="virtual_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>include/net/virtual_mgmt.h</label>
        <link refid="virtual__mgmt_8h"/>
      </node>
      <node id="22">
        <label>include/net/websocket.h</label>
        <link refid="websocket_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>include/net/wifi_mgmt.h</label>
        <link refid="wifi__mgmt_8h"/>
      </node>
      <node id="9">
        <label>include/posix/arpa/inet.h</label>
        <link refid="inet_8h"/>
      </node>
      <node id="10">
        <label>include/posix/net/if.h</label>
        <link refid="if_8h"/>
      </node>
      <node id="11">
        <label>include/posix/netdb.h</label>
        <link refid="netdb_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/posix/netinet/in.h</label>
        <link refid="in_8h"/>
      </node>
      <node id="14">
        <label>include/posix/netinet/tcp.h</label>
        <link refid="tcp_8h"/>
      </node>
      <node id="15">
        <label>include/posix/poll.h</label>
        <link refid="poll_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/posix/sys/socket.h</label>
        <link refid="posix_2sys_2socket_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structin6__addr" prot="public">in6_addr</innerclass>
    <innerclass refid="structin__addr" prot="public">in_addr</innerclass>
    <innerclass refid="structsockaddr__in6" prot="public">sockaddr_in6</innerclass>
    <innerclass refid="structsockaddr__in6__ptr" prot="public">sockaddr_in6_ptr</innerclass>
    <innerclass refid="structsockaddr__in" prot="public">sockaddr_in</innerclass>
    <innerclass refid="structsockaddr__in__ptr" prot="public">sockaddr_in_ptr</innerclass>
    <innerclass refid="structsockaddr__ll" prot="public">sockaddr_ll</innerclass>
    <innerclass refid="structsockaddr__ll__ptr" prot="public">sockaddr_ll_ptr</innerclass>
    <innerclass refid="structsockaddr__can__ptr" prot="public">sockaddr_can_ptr</innerclass>
    <innerclass refid="structiovec" prot="public">iovec</innerclass>
    <innerclass refid="structmsghdr" prot="public">msghdr</innerclass>
    <innerclass refid="structcmsghdr" prot="public">cmsghdr</innerclass>
    <innerclass refid="structsockaddr" prot="public">sockaddr</innerclass>
    <innerclass refid="structnet__tuple" prot="public">net_tuple</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ip__4__6_1ga51dba11ffc8e3b1bf695e721b3144094" prot="public" static="no">
        <name>PF_UNSPEC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unspecified protocol family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="42" column="9" bodyfile="include/net/net_ip.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga3f5da0b5be27fe31ec7cc11bfa8d1a25" prot="public" static="no">
        <name>PF_INET</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="43" column="9" bodyfile="include/net/net_ip.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga323f2649198fc7e64b19881869265618" prot="public" static="no">
        <name>PF_INET6</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="44" column="9" bodyfile="include/net/net_ip.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga8e297adb5fe2e28b0d9d921a5d56a8e9" prot="public" static="no">
        <name>PF_PACKET</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Packet family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="45" column="9" bodyfile="include/net/net_ip.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaeac0c3db7a1e021f17987bcc76893849" prot="public" static="no">
        <name>PF_CAN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controller Area Network. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="46" column="9" bodyfile="include/net/net_ip.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga288b09307bcc46aef2acf2af5e3e1006" prot="public" static="no">
        <name>PF_NET_MGMT</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network management info. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="47" column="9" bodyfile="include/net/net_ip.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga521c315ca2a2a4e6345878e84af4085e" prot="public" static="no">
        <name>PF_LOCAL</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="48" column="9" bodyfile="include/net/net_ip.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga0407288f5fb975a03b21d5287c282b2e" prot="public" static="no">
        <name>PF_UNIX</name>
        <initializer><ref refid="group__ip__4__6_1ga521c315ca2a2a4e6345878e84af4085e" kindref="member">PF_LOCAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="49" column="9" bodyfile="include/net/net_ip.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gae77ae24b14b7b7f294f3e04121173f12" prot="public" static="no">
        <name>AF_UNSPEC</name>
        <initializer><ref refid="group__ip__4__6_1ga51dba11ffc8e3b1bf695e721b3144094" kindref="member">PF_UNSPEC</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unspecified address family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="52" column="9" bodyfile="include/net/net_ip.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga9930604d0e32588eae76f43ca38e7826" prot="public" static="no">
        <name>AF_INET</name>
        <initializer><ref refid="group__ip__4__6_1ga3f5da0b5be27fe31ec7cc11bfa8d1a25" kindref="member">PF_INET</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 4. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="53" column="9" bodyfile="include/net/net_ip.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaa03706b2738b9a58d4985dfbe99e1bac" prot="public" static="no">
        <name>AF_INET6</name>
        <initializer><ref refid="group__ip__4__6_1ga323f2649198fc7e64b19881869265618" kindref="member">PF_INET6</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP protocol family version 6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="54" column="9" bodyfile="include/net/net_ip.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaa89aa4cd481fe17260c3f5d493cc23f5" prot="public" static="no">
        <name>AF_PACKET</name>
        <initializer><ref refid="group__ip__4__6_1ga8e297adb5fe2e28b0d9d921a5d56a8e9" kindref="member">PF_PACKET</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Packet family. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="55" column="9" bodyfile="include/net/net_ip.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga546620c7e758f003b24b7fdae4f97bd4" prot="public" static="no">
        <name>AF_CAN</name>
        <initializer><ref refid="group__ip__4__6_1gaeac0c3db7a1e021f17987bcc76893849" kindref="member">PF_CAN</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controller Area Network. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="56" column="9" bodyfile="include/net/net_ip.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga41d0cbb55cd9550a7f732b1520119c15" prot="public" static="no">
        <name>AF_NET_MGMT</name>
        <initializer><ref refid="group__ip__4__6_1ga288b09307bcc46aef2acf2af5e3e1006" kindref="member">PF_NET_MGMT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network management info. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="57" column="9" bodyfile="include/net/net_ip.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gae24f1f9ea44fcce3affcb2137f593dc1" prot="public" static="no">
        <name>AF_LOCAL</name>
        <initializer><ref refid="group__ip__4__6_1ga521c315ca2a2a4e6345878e84af4085e" kindref="member">PF_LOCAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="58" column="9" bodyfile="include/net/net_ip.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga0fd8739854bc8b48d65f0b669fed3ffe" prot="public" static="no">
        <name>AF_UNIX</name>
        <initializer><ref refid="group__ip__4__6_1ga0407288f5fb975a03b21d5287c282b2e" kindref="member">PF_UNIX</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inter-process communication <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="59" column="9" bodyfile="include/net/net_ip.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gada37feda716b4ba89cf9dba34288141d" prot="public" static="no">
        <name>ntohs</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a840037a5fd3d36817dc92a44469df704" kindref="member">sys_be16_to_cpu</ref>(x)</initializer>
        <briefdescription>
<para>Convert 16-bit value from network to host byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The network byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="96" column="9" bodyfile="include/net/net_ip.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gac317b3e903719ba02894f1710f7f2439" prot="public" static="no">
        <name>ntohl</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1aee4cefae7f089197e77c487faafda269" kindref="member">sys_be32_to_cpu</ref>(x)</initializer>
        <briefdescription>
<para>Convert 32-bit value from network to host byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The network byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="104" column="9" bodyfile="include/net/net_ip.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga3cfcf123d4ead264289232f91f2c9ca5" prot="public" static="no">
        <name>ntohll</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1abb4d263f2b9b1cbf1c8fbaec714fc411" kindref="member">sys_be64_to_cpu</ref>(x)</initializer>
        <briefdescription>
<para>Convert 64-bit value from network to host byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The network byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="112" column="9" bodyfile="include/net/net_ip.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" prot="public" static="no">
        <name>htons</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a9e2c7b19bbba5343ee8c5f9740484a56" kindref="member">sys_cpu_to_be16</ref>(x)</initializer>
        <briefdescription>
<para>Convert 16-bit value from host to network byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The host byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="120" column="9" bodyfile="include/net/net_ip.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" prot="public" static="no">
        <name>htonl</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a508d3b125adf1d30e8411381827c4f05" kindref="member">sys_cpu_to_be32</ref>(x)</initializer>
        <briefdescription>
<para>Convert 32-bit value from host to network byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The host byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="128" column="9" bodyfile="include/net/net_ip.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga9f4bf0773c45ad9a9753a1b784a13fbb" prot="public" static="no">
        <name>htonll</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="byteorder_8h_1a6ac423744c21c1e40aabd7ecb9b9e8d5" kindref="member">sys_cpu_to_be64</ref>(x)</initializer>
        <briefdescription>
<para>Convert 64-bit value from host to network byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The host byte order value to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network byte order value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="136" column="9" bodyfile="include/net/net_ip.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga1eefdabf590090be9f98bdf4a2f43bb4" prot="public" static="no">
        <name>NET_IPV6_ADDR_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="148" column="9" bodyfile="include/net/net_ip.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga10a82ea9ba9ca19f3b773bdd53c978e0" prot="public" static="no">
        <name>NET_IPV4_ADDR_SIZE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="161" column="9" bodyfile="include/net/net_ip.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" prot="public" static="no">
        <name>ALIGN_H</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__sys-util_1gaada5610108b15d85c65d863b0c646ef3" kindref="member">ROUND_UP</ref>(x, __alignof__(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="257" column="9" bodyfile="include/net/net_ip.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" prot="public" static="no">
        <name>ALIGN_D</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__sys-util_1gaada5610108b15d85c65d863b0c646ef3" kindref="member">ROUND_UP</ref>(x, __alignof__(z_max_align_t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="260" column="9" bodyfile="include/net/net_ip.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga39567a31d167fc53336d2ab4a2cd78a4" prot="public" static="no">
        <name>CMSG_FIRSTHDR</name>
        <param><defname>msghdr</defname></param>
        <initializer>	((<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_controllen &gt;= sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>) ?	\
	 (struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref> *)((<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_control) : NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="264" column="9" bodyfile="include/net/net_ip.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga77c17efca635d597cb6e98b28172bdc0" prot="public" static="no">
        <name>CMSG_NXTHDR</name>
        <param><defname>msghdr</defname></param>
        <param><defname>cmsg</defname></param>
        <initializer>	(((cmsg) == NULL) ? <ref refid="group__ip__4__6_1ga39567a31d167fc53336d2ab4a2cd78a4" kindref="member">CMSG_FIRSTHDR</ref>(<ref refid="structmsghdr" kindref="compound">msghdr</ref>) :			 \
	 (((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)(cmsg) + <ref refid="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" kindref="member">ALIGN_H</ref>((cmsg)-&gt;cmsg_len) +		 \
	   <ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)) &gt;				 \
	   (<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)((<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_control) + (<ref refid="structmsghdr" kindref="compound">msghdr</ref>)-&gt;msg_controllen) ? \
	  NULL :							 \
	  (struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref> *)((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)(cmsg) +			 \
			     <ref refid="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" kindref="member">ALIGN_H</ref>((cmsg)-&gt;cmsg_len))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="270" column="9" bodyfile="include/net/net_ip.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga5ab6d56e410ac0904107e84aeb1484cc" prot="public" static="no">
        <name>CMSG_DATA</name>
        <param><defname>cmsg</defname></param>
        <initializer>((<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *)(cmsg) + <ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="281" column="9" bodyfile="include/net/net_ip.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga8db11d639dd07c723256f3bb5bc89044" prot="public" static="no">
        <name>CMSG_SPACE</name>
        <param><defname>length</defname></param>
        <initializer>(<ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)) + <ref refid="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" kindref="member">ALIGN_H</ref>(length))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="285" column="9" bodyfile="include/net/net_ip.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gadb36e4ff4fa9a0c6730321c4bfcf64bc" prot="public" static="no">
        <name>CMSG_LEN</name>
        <param><defname>length</defname></param>
        <initializer>(<ref refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" kindref="member">ALIGN_D</ref>(sizeof(struct <ref refid="structcmsghdr" kindref="compound">cmsghdr</ref>)) + length)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="289" column="9" bodyfile="include/net/net_ip.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga93b37007689284fd9c4bde1a8f4b9199" prot="public" static="no">
        <name>INET_ADDRSTRLEN</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max length of the IPv4 address as a string. Defined by POSIX. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="384" column="9" bodyfile="include/net/net_ip.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1gaf776b22a727aae7c9f4d869d50df47e8" prot="public" static="no">
        <name>INET6_ADDRSTRLEN</name>
        <initializer>46</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max length of the IPv6 address as a string. Takes into account possible mapped IPv4 addresses. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="388" column="9" bodyfile="include/net/net_ip.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga5b32bdfc249437709bb25bd95ec7d6d7" prot="public" static="no">
        <name>NET_MAX_PRIORITIES</name>
        <initializer>8 /* How many priority values there are */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="427" column="9" bodyfile="include/net/net_ip.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ip__4__6_1ga75ffcc08e621c2d47d1ae043fce2acad" prot="public" static="no">
        <name>net_ipaddr_copy</name>
        <param><defname>dest</defname></param>
        <param><defname>src</defname></param>
        <initializer>	UNALIGNED_PUT(UNALIGNED_GET(src), dest)</initializer>
        <briefdescription>
<para>Copy an IPv4 or IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source IP address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Destination address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="739" column="9" bodyfile="include/net/net_ip.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" prot="public" static="no" strong="no">
        <type></type>
        <name>net_ip_protocol</name>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a334b0a4a5a3e331e7c7864471e9eab08" prot="public">
          <name>IPPROTO_IP</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IP protocol (pseudo-val for <ref refid="posix_2sys_2socket_8h_1a9e476c4da1bb69b721e4aaa384114328" kindref="member">setsockopt()</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a7ccd735b73f6955ae2f4abf3e7ca6bb4" prot="public">
          <name>IPPROTO_ICMP</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ICMP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4cbcb48be0cd8eb6fb5b5741f1c7b639" prot="public">
          <name>IPPROTO_IGMP</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IGMP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a49a42f6d628bf65e78478e8eb4874ff2" prot="public">
          <name>IPPROTO_IPIP</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPIP tunnels <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4a3c433d15859f62bacc06312791a45e" prot="public">
          <name>IPPROTO_TCP</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TCP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31abd7dfb22e255a4eed332f41de12d7321" prot="public">
          <name>IPPROTO_UDP</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>UDP protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a892549243e60ed1e04e88a14b44d8185" prot="public">
          <name>IPPROTO_IPV6</name>
          <initializer>= 41</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv6 protocol <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31aeeff57e3cf726718a92b2138e5842926" prot="public">
          <name>IPPROTO_ICMPV6</name>
          <initializer>= 58</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ICMPv6 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a3f186705d5c21da1b72ecb91cca1f7a4" prot="public">
          <name>IPPROTO_RAW</name>
          <initializer>= 255</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RAW IP packets <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol numbers from IANA/BSD </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="62" column="1" bodyfile="include/net/net_ip.h" bodystart="62" bodyend="72"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1ga721da18d2a3cfd9b3a56e9efc9f6e58b" prot="public" static="no" strong="no">
        <type></type>
        <name>net_ip_protocol_secure</name>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba6d479e64d940cea948c874d36c656fcc" prot="public">
          <name>IPPROTO_TLS_1_0</name>
          <initializer>= 256</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TLS 1.0 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba102692f9f57dd0ec6f8c6cb54a235d4c" prot="public">
          <name>IPPROTO_TLS_1_1</name>
          <initializer>= 257</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TLS 1.1 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58baa5e176fa47ca23a6f25101a5203f8e5a" prot="public">
          <name>IPPROTO_TLS_1_2</name>
          <initializer>= 258</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TLS 1.2 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba92e94005d7a80aacbffad2f3f10555ef" prot="public">
          <name>IPPROTO_DTLS_1_0</name>
          <initializer>= 272</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DTLS 1.0 protocol </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58bad4d2a6ca8756ee52221f19fb06c34a1c" prot="public">
          <name>IPPROTO_DTLS_1_2</name>
          <initializer>= 273</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DTLS 1.2 protocol </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol numbers for TLS protocols </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="75" column="1" bodyfile="include/net/net_ip.h" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1gaaab4268707dbe08348b98fb028e7aa5c" prot="public" static="no" strong="no">
        <type></type>
        <name>net_sock_type</name>
        <enumvalue id="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cae3b7fb9487113a31d403b23aaeaad424" prot="public">
          <name>SOCK_STREAM</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stream socket type <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5ca006b373a518eeeb717573f91e70d7fcc" prot="public">
          <name>SOCK_DGRAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Datagram socket type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cad78d54561daf9c4a7cda0ce115e3f231" prot="public">
          <name>SOCK_RAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RAW socket type <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Socket type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="84" column="1" bodyfile="include/net/net_ip.h" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1ga7a207761e4879c140f48f93978cb2f0b" prot="public" static="no" strong="no">
        <type></type>
        <name>net_ip_mtu</name>
        <enumvalue id="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba76d0214e90b8507d3074a5b1ab38267c" prot="public">
          <name>NET_IPV6_MTU</name>
          <initializer>= 1280</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv6 MTU length. We must be able to receive this size IPv6 packet without fragmentation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba500ea814a9a955fbb4a65fdf96e784d1" prot="public">
          <name>NET_IPV4_MTU</name>
          <initializer>= 576</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv4 MTU length. We must be able to receive this size IPv4 packet without fragmentation. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="403" column="1" bodyfile="include/net/net_ip.h" bodystart="403" bodyend="413"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" prot="public" static="no" strong="no">
        <type></type>
        <name>net_priority</name>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdae01a1318d81935d370f030456435202b" prot="public">
          <name>NET_PRIORITY_BK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Background (lowest) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda8bc1e038efe3e2332ccd3840990a64ce" prot="public">
          <name>NET_PRIORITY_BE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Best effort (default) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdac9c5e9073459374d56491c26b692d5b0" prot="public">
          <name>NET_PRIORITY_EE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Excellent effort <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda38103e3ab83f8fd693a5a1c18de98354" prot="public">
          <name>NET_PRIORITY_CA</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Critical applications (highest) <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda7878127d03fb7d0a34b8d68b9461e792" prot="public">
          <name>NET_PRIORITY_VI</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Video, &lt; 100 ms latency and jitter </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda6919b414160f3ed8ac7c391761c77e8a" prot="public">
          <name>NET_PRIORITY_VO</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Voice, &lt; 10 ms latency and jitter <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda23090c0b06a54b8a41be3f44497b0c05" prot="public">
          <name>NET_PRIORITY_IC</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internetwork control <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda05855ea3da85f60bec646a4491b554ef" prot="public">
          <name>NET_PRIORITY_NC</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Network control <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Network packet priority settings described in IEEE 802.1Q Annex I.1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="416" column="1" bodyfile="include/net/net_ip.h" bodystart="416" bodyend="425"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" prot="public" static="no" strong="no">
        <type></type>
        <name>net_addr_state</name>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da1de25b6f7d4c58957bce10d5f32fb5df" prot="public">
          <name>NET_ADDR_ANY_STATE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default (invalid) address type </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da6581c6c65c8f4e857fe9275e9ad1f8a9" prot="public">
          <name>NET_ADDR_TENTATIVE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tentative address <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da8f25e58072ffdfac2832740893ad881a" prot="public">
          <name>NET_ADDR_PREFERRED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Preferred address <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da85f4224bf8692e4b4a09ebb7b411f9a3" prot="public">
          <name>NET_ADDR_DEPRECATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Deprecated address <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>What is the current state of the network address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="439" column="1" bodyfile="include/net/net_ip.h" bodystart="439" bodyend="444"/>
      </memberdef>
      <memberdef kind="enum" id="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" prot="public" static="no" strong="no">
        <type></type>
        <name>net_addr_type</name>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a1c62cc5fe7d788175da915c25fc689e6" prot="public">
          <name>NET_ADDR_ANY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default value. This is not a valid value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41ae0dbfc40ad42a55a176578a55d0c4006" prot="public">
          <name>NET_ADDR_AUTOCONF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Auto configured address </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a7f6748a05d02325bd41b23cd05e6d1db" prot="public">
          <name>NET_ADDR_DHCP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Address is from DHCP </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41adc6d5d3b52bddf03930e125b0f21ae9e" prot="public">
          <name>NET_ADDR_MANUAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Manually set address </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a4dc979a84d5aaca6ae6f0f4e1c9bbff4" prot="public">
          <name>NET_ADDR_OVERRIDABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Manually set address which is overridable by DHCP </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How the network address is assigned to network interface </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="447" column="1" bodyfile="include/net/net_ip.h" bodystart="447" bodyend="458"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" prot="public" static="no">
        <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> short int</type>
        <definition>typedef unsigned short int sa_family_t</definition>
        <argsstring></argsstring>
        <name>sa_family_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Socket address family type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="164" column="28" bodyfile="include/net/net_ip.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ip__4__6_1gacf0ed818b0a3c85ff6a9206679d6d91a" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t socklen_t</definition>
        <argsstring></argsstring>
        <name>socklen_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length of a socket address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="167" column="16" bodyfile="include/net/net_ip.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ip__4__6_1gaa662667005bdc00bf1eb5cf243aad874" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_loopback</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_loopback</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a loopback address (::1). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is a loopback address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="589" column="20" bodyfile="include/net/net_ip.h" bodystart="589" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga1a2fb0427eeab1a5dec6d69208ad7f02" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is multicast address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="604" column="20" bodyfile="include/net/net_ip.h" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga13b5a26fc672d15697f99e85543184bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv6_addr_lookup</definition>
        <argsstring>(const struct in6_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_addr_lookup</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="612" column="25" declfile="include/net/net_ip.h" declline="612" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga00853528daf79c947dcdc320035ed538" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_my_addr</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_my_addr</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if IPv6 address is found in one of the network interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address was found, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="622" column="20" bodyfile="include/net/net_ip.h" bodystart="622" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gadb4031153c4fef86110879befa6b9975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref> *</type>
        <definition>struct net_if_mcast_addr * net_if_ipv6_maddr_lookup</definition>
        <argsstring>(const struct in6_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv6_maddr_lookup</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="627" column="31" declfile="include/net/net_ip.h" declline="627" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaf8c5158de9a65d840faa61bb3dec341c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_my_maddr</definition>
        <argsstring>(struct in6_addr *maddr)</argsstring>
        <name>net_ipv6_is_my_maddr</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>maddr</declname>
        </param>
        <briefdescription>
<para>Check if IPv6 multicast address is found in one of the network interfaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Multicast IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address was found, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="638" column="20" bodyfile="include/net/net_ip.h" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga9654007b0a3c4d033df1ec3d00bd26ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_prefix</definition>
        <argsstring>(const uint8_t *addr1, const uint8_t *addr2, uint8_t length)</argsstring>
        <name>net_ipv6_is_prefix</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Check if two IPv6 addresses are same when compared after prefix mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>First IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix length (max length is 128).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if IPv6 prefixes are the same, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="652" column="20" bodyfile="include/net/net_ip.h" bodystart="652" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga879e4aed725d7ea3fe609fa989f14735" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_loopback</definition>
        <argsstring>(struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_loopback</name>
        <param>
          <type>struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is a loopback address (127.0.0.0/8). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is a loopback address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="689" column="20" bodyfile="include/net/net_ip.h" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gadc623ecacf024733ab6d477d87cc4b9d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_unspecified</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_unspecified</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is unspecified (all bits zero) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is unspecified, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="701" column="20" bodyfile="include/net/net_ip.h" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae8c3302cf9ca457de32eabcf65975b70" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_mcast</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_mcast</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is multicast address, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="713" column="20" bodyfile="include/net/net_ip.h" bodystart="713" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gac000a319de7a6f95d4a63719bca3b865" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_ll_addr</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_ll_addr</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv4 address is a link local address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it is, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="725" column="20" bodyfile="include/net/net_ip.h" bodystart="725" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaf731738fb1761208739976d767736f87" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv4_addr_copy_raw</definition>
        <argsstring>(uint8_t *dest, const uint8_t *src)</argsstring>
        <name>net_ipv4_addr_copy_raw</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy an IPv4 address raw buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source IP address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="748" column="20" bodyfile="include/net/net_ip.h" bodystart="748" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga4925e6f3734b8fc1d9cb1ca1a510b5f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_copy_raw</definition>
        <argsstring>(uint8_t *dest, const uint8_t *src)</argsstring>
        <name>net_ipv6_addr_copy_raw</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy an IPv6 address raw buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source IP address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="760" column="20" bodyfile="include/net/net_ip.h" bodystart="760" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga0bdcc8dad8eb42c02426e55378ececf8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_addr_cmp</definition>
        <argsstring>(const struct in_addr *addr1, const struct in_addr *addr2)</argsstring>
        <name>net_ipv4_addr_cmp</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two IPv4 addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="774" column="20" bodyfile="include/net/net_ip.h" bodystart="774" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga32ffb42c62169ac9b34a0faa7c7ffd12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_addr_cmp_raw</definition>
        <argsstring>(const uint8_t *addr1, const uint8_t *addr2)</argsstring>
        <name>net_ipv4_addr_cmp_raw</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two raw IPv4 address buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv4 address buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="788" column="20" bodyfile="include/net/net_ip.h" bodystart="788" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga3456f90a2ea094d16f05a358645a6eb8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_addr_cmp</definition>
        <argsstring>(const struct in6_addr *addr1, const struct in6_addr *addr2)</argsstring>
        <name>net_ipv6_addr_cmp</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two IPv6 addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="803" column="20" bodyfile="include/net/net_ip.h" bodystart="803" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gafbe40461a645cf11fc8b3a07e1d9156e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_addr_cmp_raw</definition>
        <argsstring>(const uint8_t *addr1, const uint8_t *addr2)</argsstring>
        <name>net_ipv6_addr_cmp_raw</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two raw IPv6 address buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IPv6 address buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the addresses are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="817" column="20" bodyfile="include/net/net_ip.h" bodystart="817" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gacac4279ee8896ddf2a76c612b36edf38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_ll_addr</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_ll_addr</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv6 address is a link local address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it is, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="831" column="20" bodyfile="include/net/net_ip.h" bodystart="831" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae10578b8801d213482de7d7d7e7ba230" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_ula_addr</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_ula_addr</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv6 address is a unique local address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it is, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="843" column="20" bodyfile="include/net/net_ip.h" bodystart="843" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gab0211c91e113cf01a8a16b1a106e7290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
        <definition>const struct in6_addr * net_ipv6_unspecified_address</definition>
        <argsstring>(void)</argsstring>
        <name>net_ipv6_unspecified_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return pointer to any (all bits zeros) IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Any IPv6 address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="853" column="21" declfile="include/net/net_ip.h" declline="853" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaceb9afdd7f2f78d96e6debd72f63ebf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>const struct in_addr * net_ipv4_unspecified_address</definition>
        <argsstring>(void)</argsstring>
        <name>net_ipv4_unspecified_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return pointer to any (all bits zeros) IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Any IPv4 address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="860" column="20" declfile="include/net/net_ip.h" declline="860" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga4df601fd1c89f1908df52b2673f9b113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
        <definition>const struct in_addr * net_ipv4_broadcast_address</definition>
        <argsstring>(void)</argsstring>
        <name>net_ipv4_broadcast_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return pointer to broadcast (all bits ones) IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Broadcast IPv4 address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="867" column="20" declfile="include/net/net_ip.h" declline="867" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga558b31e556a1a4b8d1e68a78f3f755ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_addr_mask_cmp</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_addr_mask_cmp</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="870" column="13" declfile="include/net/net_ip.h" declline="870" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga715455ec5e8041c5d7075fa6913674cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_addr_mask_cmp</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_ipv4_addr_mask_cmp</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given address belongs to same subnet that has been configured for the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is in same subnet, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="882" column="20" bodyfile="include/net/net_ip.h" bodystart="882" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga8f93179138c1942bc1a099102a4314cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_if_ipv4_is_addr_bcast</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_if_ipv4_is_addr_bcast</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="888" column="13" declfile="include/net/net_ip.h" declline="888" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gac545e2252f221c73c80cea746dffa083" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_addr_bcast</definition>
        <argsstring>(struct net_if *iface, const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_addr_bcast</name>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the given IPv4 address is a broadcast address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface to use. Must be a valid pointer to an interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if address is a broadcast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="910" column="20" bodyfile="include/net/net_ip.h" bodystart="910" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga04a8f21d173d51bdcc092b92ed949e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref> *</type>
        <definition>struct net_if_addr * net_if_ipv4_addr_lookup</definition>
        <argsstring>(const struct in_addr *addr, struct net_if **iface)</argsstring>
        <name>net_if_ipv4_addr_lookup</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__if" kindref="compound">net_if</ref> **</type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="920" column="25" declfile="include/net/net_ip.h" declline="920" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga3db2a1fca0b525a7202277700b987eb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv4_is_my_addr</definition>
        <argsstring>(const struct in_addr *addr)</argsstring>
        <name>net_ipv4_is_my_addr</name>
        <param>
          <type>const struct <ref refid="structin__addr" kindref="compound">in_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv4 address is assigned to any network interface in the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid pointer on an IPv4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if IPv4 address is found in one of the network interfaces, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="932" column="20" bodyfile="include/net/net_ip.h" bodystart="932" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gafe2c8dc0bdb677ba9bc872d051aab2a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_unspecified</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_unspecified</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is unspecified (all bits zero) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is unspecified, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="951" column="20" bodyfile="include/net/net_ip.h" bodystart="951" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga5a334819f4e4bf87aea5caa7ef28c68a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_solicited_node</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_solicited_node</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is solicited node multicast address FF02:0:0:0:0:1:FFXX:XXXX defined in RFC 3513. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is solicited node address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="967" column="20" bodyfile="include/net/net_ip.h" bodystart="967" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_scope</definition>
        <argsstring>(const struct in6_addr *addr, int scope)</argsstring>
        <name>net_ipv6_is_addr_mcast_scope</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a given scope multicast address (FFyx::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>Scope to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is in given scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="986" column="20" bodyfile="include/net/net_ip.h" bodystart="986" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga3f80a84f330a31aaa875fdea64dc18ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_same_mcast_scope</definition>
        <argsstring>(const struct in6_addr *addr_1, const struct in6_addr *addr_2)</argsstring>
        <name>net_ipv6_is_same_mcast_scope</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr_1</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr_2</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 addresses have the same multicast scope (FFyx::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr_1</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr_2</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address 2</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if both addresses have same multicast scope, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1001" column="20" bodyfile="include/net/net_ip.h" bodystart="1001" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga55d67d4349dd354a7254a2f8e8320693" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_global</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_global</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a global multicast address (FFxE::/16). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is global multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1015" column="20" bodyfile="include/net/net_ip.h" bodystart="1015" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae27ca6956f943469cad0faa0ba738fc2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_iface</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_iface</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a interface scope multicast address (FFx1::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a interface scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1029" column="20" bodyfile="include/net/net_ip.h" bodystart="1029" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6f83a3a8701ec378b47337acba59d5e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_link</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_link</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a link local scope multicast address (FFx2::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a link local scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1043" column="20" bodyfile="include/net/net_ip.h" bodystart="1043" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga497a148717c1c1095abeb4482566dda0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_mesh</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_mesh</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a mesh-local scope multicast address (FFx3::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a mesh-local scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1057" column="20" bodyfile="include/net/net_ip.h" bodystart="1057" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6704146124a14be9cf2a636947c35a00" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_site</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_site</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a site scope multicast address (FFx5::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a site scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1071" column="20" bodyfile="include/net/net_ip.h" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga141ed5de3043dd7d6b45098aea38a4b1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_org</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_org</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is an organization scope multicast address (FFx8::). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is an organization scope multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1085" column="20" bodyfile="include/net/net_ip.h" bodystart="1085" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga611a4adb332715d983375899dcf101d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_group</definition>
        <argsstring>(const struct in6_addr *addr, const struct in6_addr *group)</argsstring>
        <name>net_ipv6_is_addr_mcast_group</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address belongs to certain multicast group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group id IPv6 address, the values must be in network byte order</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the IPv6 multicast address belongs to given multicast group, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1100" column="20" bodyfile="include/net/net_ip.h" bodystart="1100" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gacf00ae106727f97e2fd35be68418354d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_all_nodes_group</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_all_nodes_group</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address belongs to the all nodes multicast group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the IPv6 multicast address belongs to the all nodes multicast group, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1120" column="1" bodyfile="include/net/net_ip.h" bodystart="1120" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga35bdad7c958f1ea656680000ee3f6bfd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_iface_all_nodes</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_iface_all_nodes</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a interface scope all nodes multicast address (FF01::1). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a interface scope all nodes multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1140" column="1" bodyfile="include/net/net_ip.h" bodystart="1140" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaba3e1259f452381ef3e109bb2eb34c09" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_is_addr_mcast_link_all_nodes</definition>
        <argsstring>(const struct in6_addr *addr)</argsstring>
        <name>net_ipv6_is_addr_mcast_link_all_nodes</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Check if the IPv6 address is a link local scope all nodes multicast address (FF02::1). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the address is a link local scope all nodes multicast address, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1156" column="1" bodyfile="include/net/net_ip.h" bodystart="1156" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6091a7406c136fcf480517cb969c9d90" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_solicited_node</definition>
        <argsstring>(const struct in6_addr *src, struct in6_addr *dst)</argsstring>
        <name>net_ipv6_addr_create_solicited_node</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Create solicited node IPv6 multicast address FF02:0:0:0:0:1:FFXX:XXXX defined in RFC 3513. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1170" column="6" bodyfile="include/net/net_ip.h" bodystart="1170" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga0a78f83dcb4e341d86d9352506196696" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create</definition>
        <argsstring>(struct in6_addr *addr, uint16_t addr0, uint16_t addr1, uint16_t addr2, uint16_t addr3, uint16_t addr4, uint16_t addr5, uint16_t addr6, uint16_t addr7)</argsstring>
        <name>net_ipv6_addr_create</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr0</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr2</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr3</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr4</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr5</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr6</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref></type>
          <declname>addr7</declname>
        </param>
        <briefdescription>
<para>Construct an IPv6 address from eight 16-bit words. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr0</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr3</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr4</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr5</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr6</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr7</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit word which is part of the address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1198" column="20" bodyfile="include/net/net_ip.h" bodystart="1198" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga58cbba1c522815b1ce201b0377ffe0b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_ll_allnodes_mcast</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_addr_create_ll_allnodes_mcast</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create link local allnodes multicast IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1219" column="20" bodyfile="include/net/net_ip.h" bodystart="1219" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga30821f0a2c08b4b01b71d362e3a25de1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_ll_allrouters_mcast</definition>
        <argsstring>(struct in6_addr *addr)</argsstring>
        <name>net_ipv6_addr_create_ll_allrouters_mcast</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Create link local allrouters multicast IPv6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1229" column="20" bodyfile="include/net/net_ip.h" bodystart="1229" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga6d41f1de27e2e8fbb8f12925eba852b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void net_ipv6_addr_create_iid</definition>
        <argsstring>(struct in6_addr *addr, struct net_linkaddr *lladdr)</argsstring>
        <name>net_ipv6_addr_create_iid</name>
        <param>
          <type>struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref> *</type>
          <declname>lladdr</declname>
        </param>
        <briefdescription>
<para>Create IPv6 address interface identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lladdr</parametername>
</parameternamelist>
<parameterdescription>
<para>Link local address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1240" column="20" bodyfile="include/net/net_ip.h" bodystart="1240" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaf4b0c30b926748625bd3c4c81d06ffc5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_ipv6_addr_based_on_ll</definition>
        <argsstring>(const struct in6_addr *addr, const struct net_linkaddr *lladdr)</argsstring>
        <name>net_ipv6_addr_based_on_ll</name>
        <param>
          <type>const struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref> *</type>
          <declname>lladdr</declname>
        </param>
        <briefdescription>
<para>Check if given address is based on link layer address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if it is, False otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1297" column="20" bodyfile="include/net/net_ip.h" bodystart="1297" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gad97b2c3da722409eada099f9b7e13f03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in6" kindref="compound">sockaddr_in6</ref> *</type>
        <definition>static struct sockaddr_in6 * net_sin6</definition>
        <argsstring>(const struct sockaddr *addr)</argsstring>
        <name>net_sin6</name>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in6" kindref="compound">sockaddr_in6</ref> from sockaddr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv6 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1363" column="33" bodyfile="include/net/net_ip.h" bodystart="1363" bodyend="1366"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gacccfbac6a03480840fa219e9a1924dc6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in" kindref="compound">sockaddr_in</ref> *</type>
        <definition>static struct sockaddr_in * net_sin</definition>
        <argsstring>(const struct sockaddr *addr)</argsstring>
        <name>net_sin</name>
        <param>
          <type>const struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in" kindref="compound">sockaddr_in</ref> from sockaddr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv4 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1376" column="32" bodyfile="include/net/net_ip.h" bodystart="1376" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae86d2cd402142190e1ea1c120a57939f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in6__ptr" kindref="compound">sockaddr_in6_ptr</ref> *</type>
        <definition>static struct sockaddr_in6_ptr * net_sin6_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_sin6_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in6__ptr" kindref="compound">sockaddr_in6_ptr</ref> from sockaddr_ptr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv6 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1390" column="23" bodyfile="include/net/net_ip.h" bodystart="1390" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga4b948e84590081a8aed2a63496e57ae2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__in__ptr" kindref="compound">sockaddr_in_ptr</ref> *</type>
        <definition>static struct sockaddr_in_ptr * net_sin_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_sin_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__in__ptr" kindref="compound">sockaddr_in_ptr</ref> from sockaddr_ptr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to IPv4 socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1404" column="22" bodyfile="include/net/net_ip.h" bodystart="1404" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gad5cf206e18769a15f9fc917e416db6ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__ll__ptr" kindref="compound">sockaddr_ll_ptr</ref> *</type>
        <definition>static struct sockaddr_ll_ptr * net_sll_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_sll_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__ll__ptr" kindref="compound">sockaddr_ll_ptr</ref> from sockaddr_ptr. This is a helper so that the code calling this function can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to linklayer socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1418" column="22" bodyfile="include/net/net_ip.h" bodystart="1418" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gac2fb590a35961c04807dd985f462c5fb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structsockaddr__can__ptr" kindref="compound">sockaddr_can_ptr</ref> *</type>
        <definition>static struct sockaddr_can_ptr * net_can_ptr</definition>
        <argsstring>(const struct sockaddr_ptr *addr)</argsstring>
        <name>net_can_ptr</name>
        <param>
          <type>const struct sockaddr_ptr *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="structsockaddr__can__ptr" kindref="compound">sockaddr_can_ptr</ref> from sockaddr_ptr. This is a helper so that the code needing this functionality can be made shorter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to CAN socket address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1432" column="23" bodyfile="include/net/net_ip.h" bodystart="1432" bodyend="1435"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga264b3c0a13493eac291ddc85d0b4d43d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_addr_pton</definition>
        <argsstring>(sa_family_t family, const char *src, void *dst)</argsstring>
        <name>net_addr_pton</name>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Convert a string to IP address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address family (AF_INET or AF_INET6) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address in a null terminated string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct <ref refid="structin__addr" kindref="compound">in_addr</ref> if family is AF_INET or pointer to struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> if family is AF_INET6</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function doesn&apos;t do precise error checking, do not use for untrusted strings.</para>
</simplesect>
<simplesect kind="return"><para>0 if ok, &lt; 0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1450" column="6" declfile="include/net/net_ip.h" declline="1450" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga326b6cd455f8b6193f490fa2877c5222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * net_addr_ntop</definition>
        <argsstring>(sa_family_t family, const void *src, char *dst, size_t size)</argsstring>
        <name>net_addr_ntop</name>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Convert IP address to string form. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address family (AF_INET or AF_INET6) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct <ref refid="structin__addr" kindref="compound">in_addr</ref> if family is AF_INET or pointer to struct <ref refid="structin6__addr" kindref="compound">in6_addr</ref> if family is AF_INET6 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for IP address as a null terminated string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes available in the buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dst pointer if ok, NULL if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1463" column="7" declfile="include/net/net_ip.h" declline="1463" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga9918e156f0039cf45d487a112e0a2ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool net_ipaddr_parse</definition>
        <argsstring>(const char *str, size_t str_len, struct sockaddr *addr)</argsstring>
        <name>net_ipaddr_parse</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>str_len</declname>
        </param>
        <param>
          <type>struct <ref refid="structsockaddr" kindref="compound">sockaddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Parse a string that contains either IPv4 or IPv6 address and optional port, and store the information in user supplied sockaddr struct. </para>
        </briefdescription>
        <detaileddescription>
<para>Syntax of the IP address string: 192.0.2.1:80 192.0.2.42</para>
<para>[2001:db8::2] 2001:db::42 Note that the str_len parameter is used to restrict the amount of characters that are checked. If the string does not contain port number, then the port number in sockaddr is not modified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String that contains the IP address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the string to be parsed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user supplied struct sockaddr.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if parsing could be done, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1487" column="6" declfile="include/net/net_ip.h" declline="1487" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga1695009388402938dcc2e49b526ebd1f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref></type>
        <definition>static int32_t net_tcp_seq_cmp</definition>
        <argsstring>(uint32_t seq1, uint32_t seq2)</argsstring>
        <name>net_tcp_seq_cmp</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq2</declname>
        </param>
        <briefdescription>
<para>Compare TCP sequence numbers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function compares TCP sequence numbers, accounting for wraparound effects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq1</parametername>
</parameternamelist>
<parameterdescription>
<para>First sequence number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seq2</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds sequence number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if seq1 &lt; seq2, 0 if seq1 == seq2, &gt; 0 if seq &gt; seq2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1501" column="23" bodyfile="include/net/net_ip.h" bodystart="1501" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaa77b299f53e5535ac4c4bea1b6531a34" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool net_tcp_seq_greater</definition>
        <argsstring>(uint32_t seq1, uint32_t seq2)</argsstring>
        <name>net_tcp_seq_greater</name>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq1</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>seq2</declname>
        </param>
        <briefdescription>
<para>Check that one TCP sequence number is greater. </para>
        </briefdescription>
        <detaileddescription>
<para>This is convenience function on top of <ref refid="group__ip__4__6_1ga1695009388402938dcc2e49b526ebd1f" kindref="member">net_tcp_seq_cmp()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq1</parametername>
</parameternamelist>
<parameterdescription>
<para>First sequence number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seq2</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds sequence number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if seq &gt; seq2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1516" column="20" bodyfile="include/net/net_ip.h" bodystart="1516" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga8b794f251cf8412c769ab415902a9f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_bytes_from_str</definition>
        <argsstring>(uint8_t *buf, int buf_len, const char *src)</argsstring>
        <name>net_bytes_from_str</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buf_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Convert a string of hex values to array of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>The syntax of the string is &quot;ab:02:98:fa:42:01&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory where the bytes are written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the memory area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>String of bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, &lt;0 if error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1532" column="5" declfile="include/net/net_ip.h" declline="1532" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gae74c9ba7ff4addbce7f931bd6fa91fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_tx_priority2tc</definition>
        <argsstring>(enum net_priority prio)</argsstring>
        <name>net_tx_priority2tc</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Convert Tx network packet priority to traffic class so we can place the packet into correct Tx queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Network priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tx traffic class that handles that priority network traffic. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1542" column="5" declfile="include/net/net_ip.h" declline="1542" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga7b3c41ae9b3962090d72c130a9fa61b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int net_rx_priority2tc</definition>
        <argsstring>(enum net_priority prio)</argsstring>
        <name>net_rx_priority2tc</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Convert Rx network packet priority to traffic class so we can place the packet into correct Rx queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>Network priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rx traffic class that handles that priority network traffic. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1552" column="5" declfile="include/net/net_ip.h" declline="1552" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga14bc7018e3dd7c3e320b44a077343ce4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
        <definition>static enum net_priority net_vlan2priority</definition>
        <argsstring>(uint8_t priority)</argsstring>
        <name>net_vlan2priority</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Convert network packet VLAN priority to network packet priority so we can place the packet into correct queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>VLAN priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network priority </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1562" column="32" bodyfile="include/net/net_ip.h" bodystart="1562" bodyend="1582"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1ga8be77d043d4d1d29e0879b3b22274629" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t net_priority2vlan</definition>
        <argsstring>(enum net_priority priority)</argsstring>
        <name>net_priority2vlan</name>
        <param>
          <type>enum <ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Convert network packet priority to network packet VLAN priority. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet priority</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>VLAN priority (PCP) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1591" column="23" bodyfile="include/net/net_ip.h" bodystart="1591" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="group__ip__4__6_1gaba4c72e3aa2ceb4ac67d25112fb36523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * net_family2str</definition>
        <argsstring>(sa_family_t family)</argsstring>
        <name>net_family2str</name>
        <param>
          <type><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref></type>
          <declname>family</declname>
        </param>
        <briefdescription>
<para>Return network address family value as a string. This is only usable for debugging. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>Network address family code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Network address family as a string, or NULL if family is unknown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/net/net_ip.h" line="1605" column="12" declfile="include/net/net_ip.h" declline="1605" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>IPv6 and IPv4 definitions. </para>
    </briefdescription>
    <detaileddescription>
<para>Generic IPv6 and IPv4 address definitions. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_NET_NET_IP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_NET_NET_IP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="util_8h" kindref="compound">sys/util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="byteorder_8h" kindref="compound">sys/byteorder.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="toolchain_8h" kindref="compound">toolchain.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="net__linkaddr_8h" kindref="compound">net/net_linkaddr.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Specifying<sp/>VLAN<sp/>tag<sp/>here<sp/>in<sp/>order<sp/>to<sp/>avoid<sp/>circular<sp/>dependencies<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_VLAN_TAG_UNSPEC<sp/>0x0fff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Protocol<sp/>families.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__ip__4__6_1ga51dba11ffc8e3b1bf695e721b3144094" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_UNSPEC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__ip__4__6_1ga3f5da0b5be27fe31ec7cc11bfa8d1a25" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_INET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="group__ip__4__6_1ga323f2649198fc7e64b19881869265618" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_INET6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="group__ip__4__6_1ga8e297adb5fe2e28b0d9d921a5d56a8e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_PACKET<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group__ip__4__6_1gaeac0c3db7a1e021f17987bcc76893849" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="group__ip__4__6_1ga288b09307bcc46aef2acf2af5e3e1006" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_NET_MGMT<sp/><sp/><sp/><sp/><sp/>5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="group__ip__4__6_1ga521c315ca2a2a4e6345878e84af4085e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_LOCAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__ip__4__6_1ga0407288f5fb975a03b21d5287c282b2e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PF_UNIX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PF_LOCAL<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Address<sp/>families.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__ip__4__6_1gae77ae24b14b7b7f294f3e04121173f12" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_UNSPEC<sp/><sp/><sp/><sp/><sp/><sp/>PF_UNSPEC<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="group__ip__4__6_1ga9930604d0e32588eae76f43ca38e7826" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_INET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PF_INET<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group__ip__4__6_1gaa03706b2738b9a58d4985dfbe99e1bac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_INET6<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PF_INET6<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group__ip__4__6_1gaa89aa4cd481fe17260c3f5d493cc23f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_PACKET<sp/><sp/><sp/><sp/><sp/><sp/>PF_PACKET<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__ip__4__6_1ga546620c7e758f003b24b7fdae4f97bd4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_CAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PF_CAN<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group__ip__4__6_1ga41d0cbb55cd9550a7f732b1520119c15" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_NET_MGMT<sp/><sp/><sp/><sp/>PF_NET_MGMT<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="group__ip__4__6_1gae24f1f9ea44fcce3affcb2137f593dc1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_LOCAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PF_LOCAL<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="group__ip__4__6_1ga0fd8739854bc8b48d65f0b669fed3ffe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AF_UNIX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PF_UNIX<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" kindref="member">net_ip_protocol</ref><sp/>{</highlight></codeline>
<codeline lineno="63" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a334b0a4a5a3e331e7c7864471e9eab08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a334b0a4a5a3e331e7c7864471e9eab08" kindref="member">IPPROTO_IP</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a7ccd735b73f6955ae2f4abf3e7ca6bb4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a7ccd735b73f6955ae2f4abf3e7ca6bb4" kindref="member">IPPROTO_ICMP</ref><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4cbcb48be0cd8eb6fb5b5741f1c7b639" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4cbcb48be0cd8eb6fb5b5741f1c7b639" kindref="member">IPPROTO_IGMP</ref><sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a49a42f6d628bf65e78478e8eb4874ff2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a49a42f6d628bf65e78478e8eb4874ff2" kindref="member">IPPROTO_IPIP</ref><sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4a3c433d15859f62bacc06312791a45e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a4a3c433d15859f62bacc06312791a45e" kindref="member">IPPROTO_TCP</ref><sp/>=<sp/>6,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31abd7dfb22e255a4eed332f41de12d7321" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31abd7dfb22e255a4eed332f41de12d7321" kindref="member">IPPROTO_UDP</ref><sp/>=<sp/>17,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a892549243e60ed1e04e88a14b44d8185" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a892549243e60ed1e04e88a14b44d8185" kindref="member">IPPROTO_IPV6</ref><sp/>=<sp/>41,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31aeeff57e3cf726718a92b2138e5842926" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31aeeff57e3cf726718a92b2138e5842926" kindref="member">IPPROTO_ICMPV6</ref><sp/>=<sp/>58,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a3f186705d5c21da1b72ecb91cca1f7a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaf06819bf427cc58be1229b27b373ca31a3f186705d5c21da1b72ecb91cca1f7a4" kindref="member">IPPROTO_RAW</ref><sp/>=<sp/>255,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="group__ip__4__6_1ga721da18d2a3cfd9b3a56e9efc9f6e58b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga721da18d2a3cfd9b3a56e9efc9f6e58b" kindref="member">net_ip_protocol_secure</ref><sp/>{</highlight></codeline>
<codeline lineno="76" refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba6d479e64d940cea948c874d36c656fcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba6d479e64d940cea948c874d36c656fcc" kindref="member">IPPROTO_TLS_1_0</ref><sp/>=<sp/>256,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba102692f9f57dd0ec6f8c6cb54a235d4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba102692f9f57dd0ec6f8c6cb54a235d4c" kindref="member">IPPROTO_TLS_1_1</ref><sp/>=<sp/>257,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58baa5e176fa47ca23a6f25101a5203f8e5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58baa5e176fa47ca23a6f25101a5203f8e5a" kindref="member">IPPROTO_TLS_1_2</ref><sp/>=<sp/>258,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba92e94005d7a80aacbffad2f3f10555ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58ba92e94005d7a80aacbffad2f3f10555ef" kindref="member">IPPROTO_DTLS_1_0</ref><sp/>=<sp/>272,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80" refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58bad4d2a6ca8756ee52221f19fb06c34a1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga721da18d2a3cfd9b3a56e9efc9f6e58bad4d2a6ca8756ee52221f19fb06c34a1c" kindref="member">IPPROTO_DTLS_1_2</ref><sp/>=<sp/>273,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="group__ip__4__6_1gaaab4268707dbe08348b98fb028e7aa5c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaaab4268707dbe08348b98fb028e7aa5c" kindref="member">net_sock_type</ref><sp/>{</highlight></codeline>
<codeline lineno="85" refid="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cae3b7fb9487113a31d403b23aaeaad424" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cae3b7fb9487113a31d403b23aaeaad424" kindref="member">SOCK_STREAM</ref><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5ca006b373a518eeeb717573f91e70d7fcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5ca006b373a518eeeb717573f91e70d7fcc" kindref="member">SOCK_DGRAM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cad78d54561daf9c4a7cda0ce115e3f231" kindref="member">SOCK_RAW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="group__ip__4__6_1ggaaab4268707dbe08348b98fb028e7aa5cad78d54561daf9c4a7cda0ce115e3f231" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="group__ip__4__6_1gada37feda716b4ba89cf9dba34288141d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ntohs(x)<sp/>sys_be16_to_cpu(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="group__ip__4__6_1gac317b3e903719ba02894f1710f7f2439" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ntohl(x)<sp/>sys_be32_to_cpu(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="group__ip__4__6_1ga3cfcf123d4ead264289232f91f2c9ca5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ntohll(x)<sp/>sys_be64_to_cpu(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>htons(x)<sp/>sys_cpu_to_be16(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>htonl(x)<sp/>sys_cpu_to_be32(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group__ip__4__6_1ga9f4bf0773c45ad9a9753a1b784a13fbb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>htonll(x)<sp/>sys_cpu_to_be64(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="structin6__addr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141" refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[16];</highlight></codeline>
<codeline lineno="142" refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[8];<sp/></highlight><highlight class="comment">/*<sp/>In<sp/>big<sp/>endian<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[4];<sp/></highlight><highlight class="comment">/*<sp/>In<sp/>big<sp/>endian<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal">};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Binary<sp/>size<sp/>of<sp/>the<sp/>IPv6<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="group__ip__4__6_1ga1eefdabf590090be9f98bdf4a2f43bb4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_ADDR_SIZE<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structin__addr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153" refid="structin__addr_1a4fd35e401c510fabab8979eb8416dd9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="structin__addr_1a4fd35e401c510fabab8979eb8416dd9b" kindref="member">s4_addr</ref>[4];</highlight></codeline>
<codeline lineno="154" refid="structin__addr_1ab3122fff9d58baf7dc4f12c6f021fd86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structin__addr_1ab3122fff9d58baf7dc4f12c6f021fd86" kindref="member">s4_addr16</ref>[2];<sp/></highlight><highlight class="comment">/*<sp/>In<sp/>big<sp/>endian<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="structin__addr_1ae4e092a27efb643067d7ce10bd454bed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structin__addr_1ae4e092a27efb643067d7ce10bd454bed" kindref="member">s4_addr32</ref>[1];<sp/></highlight><highlight class="comment">/*<sp/>In<sp/>big<sp/>endian<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="structin__addr_1a5abe94a260a50619a60ce111a59f00b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="structin__addr_1a5abe94a260a50619a60ce111a59f00b5" kindref="member">s_addr</ref>;<sp/></highlight><highlight class="comment">/*<sp/>In<sp/>big<sp/>endian,<sp/>for<sp/>POSIX<sp/>compatibility.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Binary<sp/>size<sp/>of<sp/>the<sp/>IPv4<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="group__ip__4__6_1ga10a82ea9ba9ca19f3b773bdd53c978e0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV4_ADDR_SIZE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="group__ip__4__6_1gacf0ed818b0a3c85ff6a9206679d6d91a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gacf0ed818b0a3c85ff6a9206679d6d91a" kindref="member">socklen_t</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>sin_port<sp/>and<sp/>sin6_port<sp/>are<sp/>in<sp/>network<sp/>byte<sp/>order</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>in<sp/>various<sp/>sockaddr*<sp/>structs.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="structsockaddr__in6" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in6" kindref="compound">sockaddr_in6</ref><sp/>{</highlight></codeline>
<codeline lineno="176" refid="structsockaddr__in6_1aefa41e43be9c615f8cfd6266c0ed1687" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in6_1aefa41e43be9c615f8cfd6266c0ed1687" kindref="member">sin6_family</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AF_INET6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="structsockaddr__in6_1a4fc2b7a478d258e9e778772701096022" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in6_1a4fc2b7a478d258e9e778772701096022" kindref="member">sin6_port</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Port<sp/>number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="structsockaddr__in6_1a219e7f3ecd6d7dcf8fc2465475be490f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in6_1a219e7f3ecd6d7dcf8fc2465475be490f" kindref="member">sin6_addr</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IPv6<sp/>address<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="structsockaddr__in6_1a1daad78c9848862ab33a48e05fa8cf17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in6_1a1daad78c9848862ab33a48e05fa8cf17" kindref="member">sin6_scope_id</ref>;<sp/></highlight><highlight class="comment">/*<sp/>interfaces<sp/>for<sp/>a<sp/>scope<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="structsockaddr__in6__ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in6__ptr" kindref="compound">sockaddr_in6_ptr</ref><sp/>{</highlight></codeline>
<codeline lineno="183" refid="structsockaddr__in6__ptr_1a5de1da662d5fb57417a593cee8cc82de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in6__ptr_1a5de1da662d5fb57417a593cee8cc82de" kindref="member">sin6_family</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AF_INET6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="structsockaddr__in6__ptr_1a64be2e93c2453899af630428089086cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in6__ptr_1a64be2e93c2453899af630428089086cc" kindref="member">sin6_port</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Port<sp/>number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="structsockaddr__in6__ptr_1af594f9662b0785a8f527bb9fcb95d92d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structsockaddr__in6__ptr_1af594f9662b0785a8f527bb9fcb95d92d" kindref="member">sin6_addr</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IPv6<sp/>address<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="structsockaddr__in6__ptr_1a9fe0b00f5081d4e027e15497304bc55b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in6__ptr_1a9fe0b00f5081d4e027e15497304bc55b" kindref="member">sin6_scope_id</ref>;<sp/></highlight><highlight class="comment">/*<sp/>interfaces<sp/>for<sp/>a<sp/>scope<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="structsockaddr__in" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in" kindref="compound">sockaddr_in</ref><sp/>{</highlight></codeline>
<codeline lineno="191" refid="structsockaddr__in_1a9a7d98bb8e18f4a06a021c32d6cc7117" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in_1a9a7d98bb8e18f4a06a021c32d6cc7117" kindref="member">sin_family</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AF_INET<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="structsockaddr__in_1a3cf9239fdd8bd32855d66a4b86349fbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in_1a3cf9239fdd8bd32855d66a4b86349fbb" kindref="member">sin_port</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Port<sp/>number<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="structsockaddr__in_1a4ea5f2f1138e5c8597097db255a9ec6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in_1a4ea5f2f1138e5c8597097db255a9ec6c" kindref="member">sin_addr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IPv4<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="structsockaddr__in__ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in__ptr" kindref="compound">sockaddr_in_ptr</ref><sp/>{</highlight></codeline>
<codeline lineno="197" refid="structsockaddr__in__ptr_1ae8ca040f7813d6974e0440f877df6744" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in__ptr_1ae8ca040f7813d6974e0440f877df6744" kindref="member">sin_family</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AF_INET<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="structsockaddr__in__ptr_1aab1491a8d77ca11d8104ef3ef1bace80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__in__ptr_1aab1491a8d77ca11d8104ef3ef1bace80" kindref="member">sin_port</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Port<sp/>number<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="structsockaddr__in__ptr_1a02d48b07cb42745a729428fc9f4af765" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structsockaddr__in__ptr_1a02d48b07cb42745a729428fc9f4af765" kindref="member">sin_addr</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IPv4<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="structsockaddr__ll" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__ll" kindref="compound">sockaddr_ll</ref><sp/>{</highlight></codeline>
<codeline lineno="204" refid="structsockaddr__ll_1a4920e92fb0613ba8594a6b6c226048d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><ref refid="structsockaddr__ll_1a4920e92fb0613ba8594a6b6c226048d9" kindref="member">sll_family</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Always<sp/>AF_PACKET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="structsockaddr__ll_1a661e329c10a8f06a85ad831630273e49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll_1a661e329c10a8f06a85ad831630273e49" kindref="member">sll_protocol</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Physical-layer<sp/>protocol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="structsockaddr__ll_1a93b4976ed8e9d58cdcc620f5d1987f68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll_1a93b4976ed8e9d58cdcc620f5d1987f68" kindref="member">sll_ifindex</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Interface<sp/>number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="structsockaddr__ll_1a2df317106a30498dd9f87e1d4eefc8fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll_1a2df317106a30498dd9f87e1d4eefc8fc" kindref="member">sll_hatype</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ARP<sp/>hardware<sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="structsockaddr__ll_1a2001fcf2627149283e3460b18f44b313" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll_1a2001fcf2627149283e3460b18f44b313" kindref="member">sll_pkttype</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Packet<sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="structsockaddr__ll_1acb72ab39a239d9e5752b7422dc9a2dc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll_1acb72ab39a239d9e5752b7422dc9a2dc6" kindref="member">sll_halen</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>address<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="structsockaddr__ll_1aee52affe8837ffe1c32c94ce34117d6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll_1aee52affe8837ffe1c32c94ce34117d6a" kindref="member">sll_addr</ref>[8];<sp/><sp/></highlight><highlight class="comment">/*<sp/>Physical-layer<sp/>address<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="structsockaddr__ll__ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__ll__ptr" kindref="compound">sockaddr_ll_ptr</ref><sp/>{</highlight></codeline>
<codeline lineno="214" refid="structsockaddr__ll__ptr_1aab6bfff94bf5880375e7538be72a11c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><ref refid="structsockaddr__ll__ptr_1aab6bfff94bf5880375e7538be72a11c1" kindref="member">sll_family</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Always<sp/>AF_PACKET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="structsockaddr__ll__ptr_1ad25fe5fef518de3652cf67d25582e50c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll__ptr_1ad25fe5fef518de3652cf67d25582e50c" kindref="member">sll_protocol</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Physical-layer<sp/>protocol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="structsockaddr__ll__ptr_1a47a2543cc247cba79cbaaf82787aa9cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll__ptr_1a47a2543cc247cba79cbaaf82787aa9cf" kindref="member">sll_ifindex</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Interface<sp/>number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="structsockaddr__ll__ptr_1a337cef9822b70d31b50135f158c54b5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll__ptr_1a337cef9822b70d31b50135f158c54b5d" kindref="member">sll_hatype</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ARP<sp/>hardware<sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="structsockaddr__ll__ptr_1a6fa3dcd69fefa59a6da37bde8160104b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll__ptr_1a6fa3dcd69fefa59a6da37bde8160104b" kindref="member">sll_pkttype</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Packet<sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="structsockaddr__ll__ptr_1ab27a07520cee5183aa62e7a0615f1c5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__ll__ptr_1ab27a07520cee5183aa62e7a0615f1c5f" kindref="member">sll_halen</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>address<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="structsockaddr__ll__ptr_1a28579052ff6eda21d5f060e2c8de2421" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/><sp/><sp/>*<ref refid="structsockaddr__ll__ptr_1a28579052ff6eda21d5f060e2c8de2421" kindref="member">sll_addr</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Physical-layer<sp/>address<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">};</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="structsockaddr__can__ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__can__ptr" kindref="compound">sockaddr_can_ptr</ref><sp/>{</highlight></codeline>
<codeline lineno="224" refid="structsockaddr__can__ptr_1a37eebdcc4598e3f55eeaa954e77981fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><ref refid="structsockaddr__can__ptr_1a37eebdcc4598e3f55eeaa954e77981fb" kindref="member">can_family</ref>;</highlight></codeline>
<codeline lineno="225" refid="structsockaddr__can__ptr_1a7a181132dfcb2cb7c2bc1cc2deb1814b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsockaddr__can__ptr_1a7a181132dfcb2cb7c2bc1cc2deb1814b" kindref="member">can_ifindex</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HAVE_IOVEC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="structiovec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structiovec" kindref="compound">iovec</ref><sp/>{</highlight></codeline>
<codeline lineno="230" refid="structiovec_1a07aeddeccf80f14520fdd7ef0759442b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*<ref refid="structiovec_1a07aeddeccf80f14520fdd7ef0759442b" kindref="member">iov_base</ref>;</highlight></codeline>
<codeline lineno="231" refid="structiovec_1a17b5ac2078fd1adfabb262a95808a07d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structiovec_1a17b5ac2078fd1adfabb262a95808a07d" kindref="member">iov_len</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="structmsghdr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmsghdr" kindref="compound">msghdr</ref><sp/>{</highlight></codeline>
<codeline lineno="236" refid="structmsghdr_1a691a8866b21c7083974a2ff1e7987ce1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structmsghdr_1a691a8866b21c7083974a2ff1e7987ce1" kindref="member">msg_name</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>optional<sp/>socket<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="structmsghdr_1a47762b69eee1c9ba5736d64516ea0960" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gacf0ed818b0a3c85ff6a9206679d6d91a" kindref="member">socklen_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structmsghdr_1a47762b69eee1c9ba5736d64516ea0960" kindref="member">msg_namelen</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>socket<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="structmsghdr_1a1b893a6f84c4ba52708c5dcfcc720293" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structiovec" kindref="compound">iovec</ref><sp/>*<ref refid="structmsghdr_1a1b893a6f84c4ba52708c5dcfcc720293" kindref="member">msg_iov</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>scatter/gather<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="structmsghdr_1ad4ef1bd6821e599bf42f936850d2c4d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsghdr_1ad4ef1bd6821e599bf42f936850d2c4d7" kindref="member">msg_iovlen</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>msg_iov<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="structmsghdr_1afba5fc31b0f197e25602d2232ca6d783" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structmsghdr_1afba5fc31b0f197e25602d2232ca6d783" kindref="member">msg_control</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ancillary<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="structmsghdr_1a9fa41b0e9a02b5dc9a01aa6f18108adb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsghdr_1a9fa41b0e9a02b5dc9a01aa6f18108adb" kindref="member">msg_controllen</ref>;<sp/></highlight><highlight class="comment">/*<sp/>ancillary<sp/>data<sp/>buffer<sp/>len<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="structmsghdr_1a9e8ff97d402c99551cbfd564e9e10a74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsghdr_1a9e8ff97d402c99551cbfd564e9e10a74" kindref="member">msg_flags</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flags<sp/>on<sp/>received<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="structcmsghdr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcmsghdr" kindref="compound">cmsghdr</ref><sp/>{</highlight></codeline>
<codeline lineno="246" refid="structcmsghdr_1a7cf479e5e162e65ad164616453d61df2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gacf0ed818b0a3c85ff6a9206679d6d91a" kindref="member">socklen_t</ref><sp/><ref refid="structcmsghdr_1a7cf479e5e162e65ad164616453d61df2" kindref="member">cmsg_len</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>bytes,<sp/>including<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="structcmsghdr_1ac0ff1400cb63fbc2e0ece19434cb8fef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcmsghdr_1ac0ff1400cb63fbc2e0ece19434cb8fef" kindref="member">cmsg_level</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Originating<sp/>protocol<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="structcmsghdr_1a4c7cabf7899a688ce10bc92773fca9c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcmsghdr_1a4c7cabf7899a688ce10bc92773fca9c1" kindref="member">cmsg_type</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Protocol-specific<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flexible<sp/>array<sp/>member<sp/>to<sp/>force<sp/>alignment<sp/>of<sp/>cmsghdr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="structcmsghdr_1a92c00d02575707f72c04f090b6f8d399" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_max_align_t<sp/><ref refid="structcmsghdr_1a92c00d02575707f72c04f090b6f8d399" kindref="member">cmsg_data</ref>[];</highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Alignment<sp/>for<sp/>headers<sp/>and<sp/>data.<sp/>These<sp/>are<sp/>arch<sp/>specific<sp/>but<sp/>define</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>them<sp/>here<sp/>atm<sp/>if<sp/>not<sp/>found<sp/>alredy.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ALIGN_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="group__ip__4__6_1ga051015580ee95f46da1d68f6be2b333d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN_H(x)<sp/>ROUND_UP(x,<sp/>__alignof__(struct<sp/>cmsghdr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ALIGN_D)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group__ip__4__6_1gab67ab3f70af998e71325fb26ea0f6a83" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN_D(x)<sp/>ROUND_UP(x,<sp/>__alignof__(z_max_align_t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CMSG_FIRSTHDR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="group__ip__4__6_1ga39567a31d167fc53336d2ab4a2cd78a4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CMSG_FIRSTHDR(msghdr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((msghdr)-&gt;msg_controllen<sp/>&gt;=<sp/>sizeof(struct<sp/>cmsghdr)<sp/>?<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(struct<sp/>cmsghdr<sp/>*)((msghdr)-&gt;msg_control)<sp/>:<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CMSG_NXTHDR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="group__ip__4__6_1ga77c17efca635d597cb6e98b28172bdc0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CMSG_NXTHDR(msghdr,<sp/>cmsg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((cmsg)<sp/>==<sp/>NULL)<sp/>?<sp/>CMSG_FIRSTHDR(msghdr)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint8_t<sp/>*)(cmsg)<sp/>+<sp/>ALIGN_H((cmsg)-&gt;cmsg_len)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALIGN_D(sizeof(struct<sp/>cmsghdr))<sp/>&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint8_t<sp/>*)((msghdr)-&gt;msg_control)<sp/>+<sp/>(msghdr)-&gt;msg_controllen)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(struct<sp/>cmsghdr<sp/>*)((uint8_t<sp/>*)(cmsg)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALIGN_H((cmsg)-&gt;cmsg_len))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CMSG_DATA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="group__ip__4__6_1ga5ab6d56e410ac0904107e84aeb1484cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CMSG_DATA(cmsg)<sp/>((uint8_t<sp/>*)(cmsg)<sp/>+<sp/>ALIGN_D(sizeof(struct<sp/>cmsghdr)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CMSG_SPACE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group__ip__4__6_1ga8db11d639dd07c723256f3bb5bc89044" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CMSG_SPACE(length)<sp/>(ALIGN_D(sizeof(struct<sp/>cmsghdr))<sp/>+<sp/>ALIGN_H(length))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CMSG_LEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="group__ip__4__6_1gadb36e4ff4fa9a0c6730321c4bfcf64bc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CMSG_LEN(length)<sp/>(ALIGN_D(sizeof(struct<sp/>cmsghdr))<sp/>+<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Packet<sp/>types.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_HOST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>us<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_BROADCAST<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>all<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_MULTICAST<sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>group<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_OTHERHOST<sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>someone<sp/>else<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_OUTGOING<sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Originated<sp/>by<sp/>us<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_LOOPBACK<sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACKET_FASTROUTE<sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>These<sp/>macros<sp/>are<sp/>defined<sp/>in<sp/>a<sp/>specific<sp/>order.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>The<sp/>largest<sp/>sockaddr<sp/>size<sp/>is<sp/>the<sp/>last<sp/>one.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_IPV4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NET_SOCKADDR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NET_SOCKADDR_PTR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_in))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_PTR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_in_ptr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_SOCKETS_PACKET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NET_SOCKADDR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NET_SOCKADDR_PTR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_ll))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_PTR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_ll_ptr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_IPV6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NET_SOCKADDR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_in6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_NET_SOCKETS_PACKET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NET_SOCKADDR_PTR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_PTR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_in6_ptr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_NET_IPV4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_NET_IPV6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CONFIG_NET_SOCKETS_PACKET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_in6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_SOCKADDR_PTR_MAX_SIZE<sp/>(sizeof(struct<sp/>sockaddr_in6_ptr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="structsockaddr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr" kindref="compound">sockaddr</ref><sp/>{</highlight></codeline>
<codeline lineno="342" refid="structsockaddr_1ac6ef02e9a2e90a30218132ffd7b5a5c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/><ref refid="structsockaddr_1ac6ef02e9a2e90a30218132ffd7b5a5c5" kindref="member">sa_family</ref>;</highlight></codeline>
<codeline lineno="343" refid="structsockaddr_1a3d44571051f408599343acfc2c95d244" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structsockaddr_1a3d44571051f408599343acfc2c95d244" kindref="member">data</ref>[NET_SOCKADDR_MAX_SIZE<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref>)];</highlight></codeline>
<codeline lineno="344"><highlight class="normal">};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_ptr<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>family;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>[NET_SOCKADDR_PTR_MAX_SIZE<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref>)];</highlight></codeline>
<codeline lineno="351"><highlight class="normal">};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Same<sp/>as<sp/>sockaddr<sp/>in<sp/>our<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_storage<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>ss_family;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="test__fifo__contexts_8c_1a8b1feab52ee372b1ee1297129329eaad" kindref="member">data</ref>[NET_SOCKADDR_MAX_SIZE<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref>)];</highlight></codeline>
<codeline lineno="357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Socket<sp/>address<sp/>struct<sp/>for<sp/>UNIX<sp/>domain<sp/>sockets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_un<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>sun_family;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AF_UNIX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sun_path[NET_SOCKADDR_MAX_SIZE<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref>)];</highlight></codeline>
<codeline lineno="363"><highlight class="normal">};</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_addr<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>family;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="371"><highlight class="normal">};</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IN6ADDR_ANY_INIT<sp/>{<sp/>{<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>}<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IN6ADDR_LOOPBACK_INIT<sp/>{<sp/>{<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1<sp/>}<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>in6addr_any;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>in6addr_loopback;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="group__ip__4__6_1ga93b37007689284fd9c4bde1a8f4b9199" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INET_ADDRSTRLEN<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="group__ip__4__6_1gaf776b22a727aae7c9f4d869d50df47e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INET6_ADDRSTRLEN<sp/>46</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>are<sp/>for<sp/>internal<sp/>usage<sp/>of<sp/>the<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_ADDR_LEN<sp/>sizeof(&quot;xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV4_ADDR_LEN<sp/>sizeof(&quot;xxx.xxx.xxx.xxx&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INADDR_ANY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INADDR_ANY_INIT<sp/>{<sp/>{<sp/>{<sp/>INADDR_ANY<sp/>}<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INADDR_LOOPBACK_INIT<sp/><sp/>{<sp/>{<sp/>{<sp/>127,<sp/>0,<sp/>0,<sp/>1<sp/>}<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="group__ip__4__6_1ga7a207761e4879c140f48f93978cb2f0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga7a207761e4879c140f48f93978cb2f0b" kindref="member">net_ip_mtu</ref><sp/>{</highlight></codeline>
<codeline lineno="407" refid="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba76d0214e90b8507d3074a5b1ab38267c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba76d0214e90b8507d3074a5b1ab38267c" kindref="member">NET_IPV6_MTU</ref><sp/>=<sp/>1280,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba500ea814a9a955fbb4a65fdf96e784d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga7a207761e4879c140f48f93978cb2f0ba500ea814a9a955fbb4a65fdf96e784d1" kindref="member">NET_IPV4_MTU</ref><sp/>=<sp/>576,</highlight></codeline>
<codeline lineno="413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref><sp/>{</highlight></codeline>
<codeline lineno="417" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdae01a1318d81935d370f030456435202b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdae01a1318d81935d370f030456435202b" kindref="member">NET_PRIORITY_BK</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="418" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda8bc1e038efe3e2332ccd3840990a64ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda8bc1e038efe3e2332ccd3840990a64ce" kindref="member">NET_PRIORITY_BE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="419" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdac9c5e9073459374d56491c26b692d5b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdac9c5e9073459374d56491c26b692d5b0" kindref="member">NET_PRIORITY_EE</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="420" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda38103e3ab83f8fd693a5a1c18de98354" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda38103e3ab83f8fd693a5a1c18de98354" kindref="member">NET_PRIORITY_CA</ref><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="421" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda7878127d03fb7d0a34b8d68b9461e792" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda7878127d03fb7d0a34b8d68b9461e792" kindref="member">NET_PRIORITY_VI</ref><sp/>=<sp/>4,<sp/></highlight></codeline>
<codeline lineno="422" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda6919b414160f3ed8ac7c391761c77e8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda6919b414160f3ed8ac7c391761c77e8a" kindref="member">NET_PRIORITY_VO</ref><sp/>=<sp/>5,<sp/></highlight></codeline>
<codeline lineno="423" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda23090c0b06a54b8a41be3f44497b0c05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda23090c0b06a54b8a41be3f44497b0c05" kindref="member">NET_PRIORITY_IC</ref><sp/>=<sp/>6,<sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda05855ea3da85f60bec646a4491b554ef" kindref="member">NET_PRIORITY_NC</ref><sp/>=<sp/>7<sp/><sp/></highlight></codeline>
<codeline lineno="425" refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda05855ea3da85f60bec646a4491b554ef" refkind="member"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="group__ip__4__6_1ga5b32bdfc249437709bb25bd95ec7d6d7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_MAX_PRIORITIES<sp/>8<sp/></highlight><highlight class="comment">/*<sp/>How<sp/>many<sp/>priority<sp/>values<sp/>there<sp/>are<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="structnet__tuple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__tuple" kindref="compound">net_tuple</ref><sp/>{</highlight></codeline>
<codeline lineno="431" refid="structnet__tuple_1a8f9a1aab3c3aedeead795ca6624d4d6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_addr<sp/>*<ref refid="structnet__tuple_1a8f9a1aab3c3aedeead795ca6624d4d6d" kindref="member">remote_addr</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="432" refid="structnet__tuple_1af7004f8f8d74d49d6771393825612294" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_addr<sp/>*<ref refid="structnet__tuple_1af7004f8f8d74d49d6771393825612294" kindref="member">local_addr</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="433" refid="structnet__tuple_1ab4c31093a23bc60d8dcf5b784e3fb39a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__tuple_1ab4c31093a23bc60d8dcf5b784e3fb39a" kindref="member">remote_port</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="434" refid="structnet__tuple_1a9a1cd0dd55a9e866cb0e910120362b7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><ref refid="structnet__tuple_1a9a1cd0dd55a9e866cb0e910120362b7e" kindref="member">local_port</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="435" refid="structnet__tuple_1aa9eeba2c8e263afbf6368e04353d6014" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaf06819bf427cc58be1229b27b373ca31" kindref="member">net_ip_protocol</ref><sp/><ref refid="structnet__tuple_1aa9eeba2c8e263afbf6368e04353d6014" kindref="member">ip_proto</ref>;<sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga32e58fc83532ef57eeb6ff952f17288d" kindref="member">net_addr_state</ref><sp/>{</highlight></codeline>
<codeline lineno="440" refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da1de25b6f7d4c58957bce10d5f32fb5df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da1de25b6f7d4c58957bce10d5f32fb5df" kindref="member">NET_ADDR_ANY_STATE</ref><sp/>=<sp/>-1,<sp/></highlight></codeline>
<codeline lineno="441" refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da6581c6c65c8f4e857fe9275e9ad1f8a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da6581c6c65c8f4e857fe9275e9ad1f8a9" kindref="member">NET_ADDR_TENTATIVE</ref><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="442" refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da8f25e58072ffdfac2832740893ad881a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da8f25e58072ffdfac2832740893ad881a" kindref="member">NET_ADDR_PREFERRED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="443" refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da85f4224bf8692e4b4a09ebb7b411f9a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gga32e58fc83532ef57eeb6ff952f17288da85f4224bf8692e4b4a09ebb7b411f9a3" kindref="member">NET_ADDR_DEPRECATED</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" kindref="member">net_addr_type</ref><sp/>{</highlight></codeline>
<codeline lineno="449" refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a1c62cc5fe7d788175da915c25fc689e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a1c62cc5fe7d788175da915c25fc689e6" kindref="member">NET_ADDR_ANY</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="451" refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41ae0dbfc40ad42a55a176578a55d0c4006" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41ae0dbfc40ad42a55a176578a55d0c4006" kindref="member">NET_ADDR_AUTOCONF</ref>,</highlight></codeline>
<codeline lineno="453" refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a7f6748a05d02325bd41b23cd05e6d1db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a7f6748a05d02325bd41b23cd05e6d1db" kindref="member">NET_ADDR_DHCP</ref>,</highlight></codeline>
<codeline lineno="455" refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41adc6d5d3b52bddf03930e125b0f21ae9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41adc6d5d3b52bddf03930e125b0f21ae9e" kindref="member">NET_ADDR_MANUAL</ref>,</highlight></codeline>
<codeline lineno="457" refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a4dc979a84d5aaca6ae6f0f4e1c9bbff4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a4dc979a84d5aaca6ae6f0f4e1c9bbff4" kindref="member">NET_ADDR_OVERRIDABLE</ref>,</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_ipv6_hdr<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>vtc;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>tcflow;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>flow;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>len;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>nexthdr;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>hop_limit;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[<ref refid="group__ip__4__6_1ga1eefdabf590090be9f98bdf4a2f43bb4" kindref="member">NET_IPV6_ADDR_SIZE</ref>];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[<ref refid="group__ip__4__6_1ga1eefdabf590090be9f98bdf4a2f43bb4" kindref="member">NET_IPV6_ADDR_SIZE</ref>];</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_ipv6_frag_hdr<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>nexthdr;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>reserved;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>offset;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>id;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_ipv4_hdr<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>vhl;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>tos;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>len;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">[2];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>offset[2];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>ttl;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>proto;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>chksum;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>src[<ref refid="group__ip__4__6_1ga10a82ea9ba9ca19f3b773bdd53c978e0" kindref="member">NET_IPV4_ADDR_SIZE</ref>];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>dst[<ref refid="group__ip__4__6_1ga10a82ea9ba9ca19f3b773bdd53c978e0" kindref="member">NET_IPV4_ADDR_SIZE</ref>];</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_icmp_hdr<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>type;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>code;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>chksum;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_udp_hdr<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>src_port;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>dst_port;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>len;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>chksum;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_tcp_hdr<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>src_port;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>dst_port;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>seq[4];</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>ack[4];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>offset;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>wnd[2];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>chksum;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>urg[2];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>optdata[0];</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}<sp/>__packed;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*net_addr_type2str(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gafecee2d4a331dc85ad962b81a6303e41" kindref="member">net_addr_type</ref><sp/>type)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41ae0dbfc40ad42a55a176578a55d0c4006" kindref="member">NET_ADDR_AUTOCONF</ref>:</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;AUTO&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a7f6748a05d02325bd41b23cd05e6d1db" kindref="member">NET_ADDR_DHCP</ref>:</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;DHCP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41adc6d5d3b52bddf03930e125b0f21ae9e" kindref="member">NET_ADDR_MANUAL</ref>:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MANUAL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a4dc979a84d5aaca6ae6f0f4e1c9bbff4" kindref="member">NET_ADDR_OVERRIDABLE</ref>:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;OVERRIDE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ggafecee2d4a331dc85ad962b81a6303e41a1c62cc5fe7d788175da915c25fc689e6" kindref="member">NET_ADDR_ANY</ref>:</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IPv6<sp/>extension<sp/>headers<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_NEXTHDR_HBHO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_NEXTHDR_DESTO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>60</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_NEXTHDR_ROUTING<sp/><sp/><sp/><sp/><sp/>43</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_NEXTHDR_FRAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>44</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_NEXTHDR_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>59</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">net_ip_header<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_ipv4_hdr<sp/>*ipv4;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_ipv6_hdr<sp/>*ipv6;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">};</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">net_proto_header<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_udp_hdr<sp/>*udp;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">net_tcp_hdr<sp/>*tcp;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">};</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_UDPH_LEN<sp/><sp/><sp/><sp/>8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>UDP<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_TCPH_LEN<sp/><sp/><sp/><sp/>20<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>TCP<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_ICMPH_LEN<sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>ICMP<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6H_LEN<sp/><sp/><sp/><sp/><sp/><sp/>40<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>IPv6<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_ICMPV6H_LEN<sp/><sp/><sp/><sp/>NET_ICMPH_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>ICMPv6<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6UDPH_LEN<sp/><sp/><sp/>(NET_UDPH_LEN<sp/>+<sp/>NET_IPV6H_LEN)<sp/></highlight><highlight class="comment">/*<sp/>IPv6<sp/>+<sp/>UDP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6TCPH_LEN<sp/><sp/><sp/>(NET_TCPH_LEN<sp/>+<sp/>NET_IPV6H_LEN)<sp/></highlight><highlight class="comment">/*<sp/>IPv6<sp/>+<sp/>TCP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6ICMPH_LEN<sp/><sp/>(NET_IPV6H_LEN<sp/>+<sp/>NET_ICMPH_LEN)<sp/></highlight><highlight class="comment">/*<sp/>ICMPv6<sp/>+<sp/>IPv6<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_FRAGH_LEN<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV4H_LEN<sp/><sp/><sp/><sp/><sp/><sp/>20<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>IPv4<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_ICMPV4H_LEN<sp/><sp/><sp/><sp/>NET_ICMPH_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>ICMPv4<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV4UDPH_LEN<sp/><sp/><sp/>(NET_UDPH_LEN<sp/>+<sp/>NET_IPV4H_LEN)<sp/></highlight><highlight class="comment">/*<sp/>IPv4<sp/>+<sp/>UDP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV4TCPH_LEN<sp/><sp/><sp/>(NET_TCPH_LEN<sp/>+<sp/>NET_IPV4H_LEN)<sp/></highlight><highlight class="comment">/*<sp/>IPv4<sp/>+<sp/>TCP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV4ICMPH_LEN<sp/><sp/>(NET_IPV4H_LEN<sp/>+<sp/>NET_ICMPH_LEN)<sp/></highlight><highlight class="comment">/*<sp/>ICMPv4<sp/>+<sp/>IPv4<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6H_LENGTH_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x04<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Offset<sp/>of<sp/>the<sp/>Length<sp/>field<sp/>in<sp/>the<sp/>IPv6<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NET_IPV6_FRAGH_OFFSET_MASK<sp/><sp/><sp/><sp/><sp/><sp/>0xfff8<sp/><sp/></highlight><highlight class="comment">/*<sp/>Mask<sp/>for<sp/>the<sp/>13-bit<sp/>Fragment<sp/>Offset<sp/>field<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="group__ip__4__6_1gaa662667005bdc00bf1eb5cf243aad874" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaa662667005bdc00bf1eb5cf243aad874" kindref="member">net_ipv6_is_addr_loopback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[0])<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[1])<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[2])<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gac317b3e903719ba02894f1710f7f2439" kindref="member">ntohl</ref>(UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[3]))<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="group__ip__4__6_1ga1a2fb0427eeab1a5dec6d69208ad7f02" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga1a2fb0427eeab1a5dec6d69208ad7f02" kindref="member">net_ipv6_is_addr_mcast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[0]<sp/>==<sp/>0xFF;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref>;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if__config" kindref="compound">net_if_config</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612" refid="group__ip__4__6_1ga13b5a26fc672d15697f99e85543184bb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref><sp/>*<ref refid="group__ip__4__6_1ga13b5a26fc672d15697f99e85543184bb" kindref="member">net_if_ipv6_addr_lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>**iface);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="622" refid="group__ip__4__6_1ga00853528daf79c947dcdc320035ed538" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga00853528daf79c947dcdc320035ed538" kindref="member">net_ipv6_is_my_addr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga13b5a26fc672d15697f99e85543184bb" kindref="member">net_if_ipv6_addr_lookup</ref>(addr,<sp/>NULL)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="group__ip__4__6_1gadb4031153c4fef86110879befa6b9975" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if__mcast__addr" kindref="compound">net_if_mcast_addr</ref><sp/>*<ref refid="group__ip__4__6_1gadb4031153c4fef86110879befa6b9975" kindref="member">net_if_ipv6_maddr_lookup</ref>(</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>**iface);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="group__ip__4__6_1gaf8c5158de9a65d840faa61bb3dec341c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaf8c5158de9a65d840faa61bb3dec341c" kindref="member">net_ipv6_is_my_maddr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*maddr)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadb4031153c4fef86110879befa6b9975" kindref="member">net_if_ipv6_maddr_lookup</ref>(maddr,<sp/>NULL)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="group__ip__4__6_1ga9654007b0a3c4d033df1ec3d00bd26ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga9654007b0a3c4d033df1ec3d00bd26ee" kindref="member">net_ipv6_is_prefix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*addr1,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*addr2,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>length)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>bits<sp/>=<sp/>128<sp/>-<sp/>length;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>bytes<sp/>=<sp/>length<sp/>/<sp/>8U;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>remain<sp/>=<sp/>bits<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>mask;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(addr1,<sp/>addr2,<sp/>bytes))<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!remain)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>remaining<sp/>bits,<sp/>the<sp/>prefixes<sp/>are<sp/>the<sp/>same<sp/>as<sp/>first</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>bytes<sp/>are<sp/>the<sp/>same.</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>mask<sp/>that<sp/>has<sp/>remaining<sp/>most<sp/>significant<sp/>bits<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>((0xff<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>remain))<sp/>^<sp/>0xff)<sp/>&lt;&lt;<sp/>remain;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(addr1[bytes]<sp/>&amp;<sp/>mask)<sp/>==<sp/>(addr2[bytes]<sp/>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="group__ip__4__6_1ga879e4aed725d7ea3fe609fa989f14735" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga879e4aed725d7ea3fe609fa989f14735" kindref="member">net_ipv4_is_addr_loopback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr-&gt;<ref refid="structin__addr_1a4fd35e401c510fabab8979eb8416dd9b" kindref="member">s4_addr</ref>[0]<sp/>==<sp/>127U;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="group__ip__4__6_1gadc623ecacf024733ab6d477d87cc4b9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc623ecacf024733ab6d477d87cc4b9d" kindref="member">net_ipv4_is_addr_unspecified</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin__addr_1a5abe94a260a50619a60ce111a59f00b5" kindref="member">s_addr</ref>)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="group__ip__4__6_1gae8c3302cf9ca457de32eabcf65975b70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae8c3302cf9ca457de32eabcf65975b70" kindref="member">net_ipv4_is_addr_mcast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__ip__4__6_1gac317b3e903719ba02894f1710f7f2439" kindref="member">ntohl</ref>(UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin__addr_1a5abe94a260a50619a60ce111a59f00b5" kindref="member">s_addr</ref>))<sp/>&amp;<sp/>0xF0000000)<sp/>==<sp/>0xE0000000;</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="group__ip__4__6_1gac000a319de7a6f95d4a63719bca3b865" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gac000a319de7a6f95d4a63719bca3b865" kindref="member">net_ipv4_is_ll_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__ip__4__6_1gac317b3e903719ba02894f1710f7f2439" kindref="member">ntohl</ref>(UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin__addr_1a5abe94a260a50619a60ce111a59f00b5" kindref="member">s_addr</ref>))<sp/>&amp;<sp/>0xA9FE0000)<sp/>==<sp/>0xA9FE0000;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="739" refid="group__ip__4__6_1ga75ffcc08e621c2d47d1ae043fce2acad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>net_ipaddr_copy(dest,<sp/>src)<sp/>\</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(UNALIGNED_GET(src),<sp/>dest)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="748" refid="group__ip__4__6_1gaf731738fb1761208739976d767736f87" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaf731738fb1761208739976d767736f87" kindref="member">net_ipv4_addr_copy_raw</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*dest,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*src)</highlight></codeline>
<codeline lineno="750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga75ffcc08e621c2d47d1ae043fce2acad" kindref="member">net_ipaddr_copy</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*)dest,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*)src);</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="760" refid="group__ip__4__6_1ga4925e6f3734b8fc1d9cb1ca1a510b5f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga4925e6f3734b8fc1d9cb1ca1a510b5f1" kindref="member">net_ipv6_addr_copy_raw</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*dest,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*src)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(dest,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref>));</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="group__ip__4__6_1ga0bdcc8dad8eb42c02426e55378ececf8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga0bdcc8dad8eb42c02426e55378ececf8" kindref="member">net_ipv4_addr_cmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr1,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr2)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNALIGNED_GET(&amp;addr1-&gt;<ref refid="structin__addr_1a5abe94a260a50619a60ce111a59f00b5" kindref="member">s_addr</ref>)<sp/>==<sp/>UNALIGNED_GET(&amp;addr2-&gt;<ref refid="structin__addr_1a5abe94a260a50619a60ce111a59f00b5" kindref="member">s_addr</ref>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="group__ip__4__6_1ga32ffb42c62169ac9b34a0faa7c7ffd12" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga32ffb42c62169ac9b34a0faa7c7ffd12" kindref="member">net_ipv4_addr_cmp_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*addr1,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*addr2)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga0bdcc8dad8eb42c02426e55378ececf8" kindref="member">net_ipv4_addr_cmp</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*)addr1,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*)addr2);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="803" refid="group__ip__4__6_1ga3456f90a2ea094d16f05a358645a6eb8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga3456f90a2ea094d16f05a358645a6eb8" kindref="member">net_ipv6_addr_cmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr1,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr2)</highlight></codeline>
<codeline lineno="805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(addr1,<sp/>addr2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref>));</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="group__ip__4__6_1gafbe40461a645cf11fc8b3a07e1d9156e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gafbe40461a645cf11fc8b3a07e1d9156e" kindref="member">net_ipv6_addr_cmp_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*addr1,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*addr2)</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga3456f90a2ea094d16f05a358645a6eb8" kindref="member">net_ipv6_addr_cmp</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*)addr1,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*)addr2);</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="831" refid="group__ip__4__6_1gacac4279ee8896ddf2a76c612b36edf38" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gacac4279ee8896ddf2a76c612b36edf38" kindref="member">net_ipv6_is_ll_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[0])<sp/>==<sp/><ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(0xFE80);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="843" refid="group__ip__4__6_1gae10578b8801d213482de7d7d7e7ba230" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae10578b8801d213482de7d7d7e7ba230" kindref="member">net_ipv6_is_ula_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[0]<sp/>==<sp/>0xFD;</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="853" refid="group__ip__4__6_1gab0211c91e113cf01a8a16b1a106e7290" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*<ref refid="group__ip__4__6_1gab0211c91e113cf01a8a16b1a106e7290" kindref="member">net_ipv6_unspecified_address</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="860" refid="group__ip__4__6_1gaceb9afdd7f2f78d96e6debd72f63ebf0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*<ref refid="group__ip__4__6_1gaceb9afdd7f2f78d96e6debd72f63ebf0" kindref="member">net_ipv4_unspecified_address</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="867" refid="group__ip__4__6_1ga4df601fd1c89f1908df52b2673f9b113" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*<ref refid="group__ip__4__6_1ga4df601fd1c89f1908df52b2673f9b113" kindref="member">net_ipv4_broadcast_address</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if" kindref="compound">net_if</ref>;</highlight></codeline>
<codeline lineno="870" refid="group__ip__4__6_1ga558b31e556a1a4b8d1e68a78f3f755ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga558b31e556a1a4b8d1e68a78f3f755ea" kindref="member">net_if_ipv4_addr_mask_cmp</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="group__ip__4__6_1ga715455ec5e8041c5d7075fa6913674cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga715455ec5e8041c5d7075fa6913674cd" kindref="member">net_ipv4_addr_mask_cmp</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga558b31e556a1a4b8d1e68a78f3f755ea" kindref="member">net_if_ipv4_addr_mask_cmp</ref>(iface,<sp/>addr);</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888" refid="group__ip__4__6_1ga8f93179138c1942bc1a099102a4314cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga8f93179138c1942bc1a099102a4314cf" kindref="member">net_if_ipv4_is_addr_bcast</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_NATIVE_IPV4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gac545e2252f221c73c80cea746dffa083" kindref="member">net_ipv4_is_addr_bcast</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__ip__4__6_1ga0bdcc8dad8eb42c02426e55378ececf8" kindref="member">net_ipv4_addr_cmp</ref>(addr,<sp/><ref refid="group__ip__4__6_1ga4df601fd1c89f1908df52b2673f9b113" kindref="member">net_ipv4_broadcast_address</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga8f93179138c1942bc1a099102a4314cf" kindref="member">net_if_ipv4_is_addr_bcast</ref>(iface,<sp/>addr);</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="group__ip__4__6_1gac545e2252f221c73c80cea746dffa083" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gac545e2252f221c73c80cea746dffa083" kindref="member">net_ipv4_is_addr_bcast</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>*iface,</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(iface);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARG_UNUSED(addr);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="group__ip__4__6_1ga04a8f21d173d51bdcc092b92ed949e53" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__if__addr" kindref="compound">net_if_addr</ref><sp/>*<ref refid="group__ip__4__6_1ga04a8f21d173d51bdcc092b92ed949e53" kindref="member">net_if_ipv4_addr_lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__if" kindref="compound">net_if</ref><sp/>**iface);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="932" refid="group__ip__4__6_1ga3db2a1fca0b525a7202277700b987eb9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga3db2a1fca0b525a7202277700b987eb9" kindref="member">net_ipv4_is_my_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin__addr" kindref="compound">in_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__ip__4__6_1ga04a8f21d173d51bdcc092b92ed949e53" kindref="member">net_if_ipv4_addr_lookup</ref>(addr,<sp/>NULL)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__ip__4__6_1gac545e2252f221c73c80cea746dffa083" kindref="member">net_ipv4_is_addr_bcast</ref>(NULL,<sp/>addr);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="group__ip__4__6_1gafe2c8dc0bdb677ba9bc872d051aab2a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gafe2c8dc0bdb677ba9bc872d051aab2a0" kindref="member">net_ipv6_is_addr_unspecified</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[0])<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[1])<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[2])<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[3])<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="group__ip__4__6_1ga5a334819f4e4bf87aea5caa7ef28c68a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga5a334819f4e4bf87aea5caa7ef28c68a" kindref="member">net_ipv6_is_addr_solicited_node</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[0])<sp/>==<sp/><ref refid="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" kindref="member">htonl</ref>(0xff020000)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[1])<sp/>==<sp/>0x00000000<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[2])<sp/>==<sp/><ref refid="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" kindref="member">htonl</ref>(0x00000001)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[3])<sp/>&amp;<sp/><ref refid="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" kindref="member">htonl</ref>(0xff000000))<sp/>==</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" kindref="member">htonl</ref>(0xff000000));</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="986" refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" kindref="member">net_ipv6_is_addr_mcast_scope</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scope)</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[0]<sp/>==<sp/>0xff)<sp/>&amp;&amp;<sp/>(addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[1]<sp/>==<sp/>scope);</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001" refid="group__ip__4__6_1ga3f80a84f330a31aaa875fdea64dc18ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga3f80a84f330a31aaa875fdea64dc18ec" kindref="member">net_ipv6_is_same_mcast_scope</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr_1,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr_2)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(addr_1-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[0]<sp/>==<sp/>0xff)<sp/>&amp;&amp;<sp/>(addr_2-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[0]<sp/>==<sp/>0xff)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(addr_1-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[1]<sp/>==<sp/>addr_2-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[1]);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015" refid="group__ip__4__6_1ga55d67d4349dd354a7254a2f8e8320693" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga55d67d4349dd354a7254a2f8e8320693" kindref="member">net_ipv6_is_addr_mcast_global</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" kindref="member">net_ipv6_is_addr_mcast_scope</ref>(addr,<sp/>0x0e);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029" refid="group__ip__4__6_1gae27ca6956f943469cad0faa0ba738fc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae27ca6956f943469cad0faa0ba738fc2" kindref="member">net_ipv6_is_addr_mcast_iface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" kindref="member">net_ipv6_is_addr_mcast_scope</ref>(addr,<sp/>0x01);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043" refid="group__ip__4__6_1ga6f83a3a8701ec378b47337acba59d5e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga6f83a3a8701ec378b47337acba59d5e4" kindref="member">net_ipv6_is_addr_mcast_link</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" kindref="member">net_ipv6_is_addr_mcast_scope</ref>(addr,<sp/>0x02);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057" refid="group__ip__4__6_1ga497a148717c1c1095abeb4482566dda0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga497a148717c1c1095abeb4482566dda0" kindref="member">net_ipv6_is_addr_mcast_mesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" kindref="member">net_ipv6_is_addr_mcast_scope</ref>(addr,<sp/>0x03);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071" refid="group__ip__4__6_1ga6704146124a14be9cf2a636947c35a00" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga6704146124a14be9cf2a636947c35a00" kindref="member">net_ipv6_is_addr_mcast_site</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" kindref="member">net_ipv6_is_addr_mcast_scope</ref>(addr,<sp/>0x05);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085" refid="group__ip__4__6_1ga141ed5de3043dd7d6b45098aea38a4b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga141ed5de3043dd7d6b45098aea38a4b1" kindref="member">net_ipv6_is_addr_mcast_org</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gadc75208131d5a4333f31291ac5f8ce94" kindref="member">net_ipv6_is_addr_mcast_scope</ref>(addr,<sp/>0x08);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100" refid="group__ip__4__6_1ga611a4adb332715d983375899dcf101d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga611a4adb332715d983375899dcf101d0" kindref="member">net_ipv6_is_addr_mcast_group</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*group)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[1])<sp/>==<sp/>group-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[2])<sp/>==<sp/>group-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[2]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[3])<sp/>==<sp/>group-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[3]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[1])<sp/>==<sp/>group-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[2])<sp/>==<sp/>group-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_GET(&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[3])<sp/>==<sp/>group-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[3];</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120" refid="group__ip__4__6_1gacf00ae106727f97e2fd35be68418354d" refkind="member"><highlight class="normal"><ref refid="group__ip__4__6_1gacf00ae106727f97e2fd35be68418354d" kindref="member">net_ipv6_is_addr_mcast_all_nodes_group</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>all_nodes_mcast_group<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x01<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga611a4adb332715d983375899dcf101d0" kindref="member">net_ipv6_is_addr_mcast_group</ref>(addr,<sp/>&amp;all_nodes_mcast_group);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140" refid="group__ip__4__6_1ga35bdad7c958f1ea656680000ee3f6bfd" refkind="member"><highlight class="normal"><ref refid="group__ip__4__6_1ga35bdad7c958f1ea656680000ee3f6bfd" kindref="member">net_ipv6_is_addr_mcast_iface_all_nodes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae27ca6956f943469cad0faa0ba738fc2" kindref="member">net_ipv6_is_addr_mcast_iface</ref>(addr)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gacf00ae106727f97e2fd35be68418354d" kindref="member">net_ipv6_is_addr_mcast_all_nodes_group</ref>(addr);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156" refid="group__ip__4__6_1gaba3e1259f452381ef3e109bb2eb34c09" refkind="member"><highlight class="normal"><ref refid="group__ip__4__6_1gaba3e1259f452381ef3e109bb2eb34c09" kindref="member">net_ipv6_is_addr_mcast_link_all_nodes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga6f83a3a8701ec378b47337acba59d5e4" kindref="member">net_ipv6_is_addr_mcast_link</ref>(addr)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1gacf00ae106727f97e2fd35be68418354d" kindref="member">net_ipv6_is_addr_mcast_all_nodes_group</ref>(addr);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170" refid="group__ip__4__6_1ga6091a7406c136fcf480517cb969c9d90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga6091a7406c136fcf480517cb969c9d90" kindref="member">net_ipv6_addr_create_solicited_node</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*src,</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*dst)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[0]<sp/><sp/><sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[1]<sp/><sp/><sp/>=<sp/>0x02;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(0,<sp/>&amp;dst-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[1]);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(0,<sp/>&amp;dst-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[2]);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(0,<sp/>&amp;dst-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[3]);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(0,<sp/>&amp;dst-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[4]);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[10]<sp/><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[11]<sp/><sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[12]<sp/><sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[13]<sp/><sp/>=<sp/>src-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[13];</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(UNALIGNED_GET(&amp;src-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[7]),<sp/>&amp;dst-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[7]);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198" refid="group__ip__4__6_1ga0a78f83dcb4e341d86d9352506196696" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga0a78f83dcb4e341d86d9352506196696" kindref="member">net_ipv6_addr_create</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr0,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr1,</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr2,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr3,</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr4,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr5,</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr6,<sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/>addr7)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr0),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[0]);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr1),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[1]);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr2),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[2]);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr3),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[3]);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr4),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[4]);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr5),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[5]);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr6),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[6]);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1ga51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons</ref>(addr7),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ac639658b289173e364d9e067ec2ceb69" kindref="member">s6_addr16</ref>[7]);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219" refid="group__ip__4__6_1ga58cbba1c522815b1ce201b0377ffe0b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga58cbba1c522815b1ce201b0377ffe0b2" kindref="member">net_ipv6_addr_create_ll_allnodes_mcast</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga0a78f83dcb4e341d86d9352506196696" kindref="member">net_ipv6_addr_create</ref>(addr,<sp/>0xff02,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0x0001);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229" refid="group__ip__4__6_1ga30821f0a2c08b4b01b71d362e3a25de1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga30821f0a2c08b4b01b71d362e3a25de1" kindref="member">net_ipv6_addr_create_ll_allrouters_mcast</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ga0a78f83dcb4e341d86d9352506196696" kindref="member">net_ipv6_addr_create</ref>(addr,<sp/>0xff02,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0x0002);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240" refid="group__ip__4__6_1ga6d41f1de27e2e8fbb8f12925eba852b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga6d41f1de27e2e8fbb8f12925eba852b4" kindref="member">net_ipv6_addr_create_iid</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref><sp/>*lladdr)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(<ref refid="group__ip__4__6_1gae4027a6ad07f13aa12eab285a1b46019" kindref="member">htonl</ref>(0xfe800000),<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[0]);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(0,<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[1]);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(lladdr-&gt;<ref refid="structnet__linkaddr_1a7b2f8ebe68b557eb9cbb4c2f2ecd70e0" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>generated<sp/>IPv6<sp/>shall<sp/>not<sp/>toggle<sp/>the</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Universal/Local<sp/>bit.<sp/>RFC<sp/>6282<sp/>ch<sp/>3.2.2</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lladdr-&gt;<ref refid="structnet__linkaddr_1a5f5b4c3d353261d0fab8011aa09f00d7" kindref="member">type</ref><sp/>==<sp/><ref refid="group__net__linkaddr_1gga1312c2322bc4a4f1c3b76d6466806b24a4f365da4c9300c31cd4022600e630ce3" kindref="member">NET_LINK_IEEE802154</ref><sp/>||</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a5f5b4c3d353261d0fab8011aa09f00d7" kindref="member">type</ref><sp/>==<sp/><ref refid="group__net__linkaddr_1gga1312c2322bc4a4f1c3b76d6466806b24a0c418d5923fa4b7f200bf6b05b2e854d" kindref="member">NET_LINK_CANBUS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNALIGNED_PUT(0,<sp/>&amp;addr-&gt;<ref refid="structin6__addr_1ab436399c6fe320d361b024bf78af4aba" kindref="member">s6_addr32</ref>[2]);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[11]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[12]<sp/>=<sp/>0xfe;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[13]<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[14]<sp/>=<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[0];</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[15]<sp/>=<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[1];</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>do<sp/>not<sp/>toggle<sp/>the<sp/>Universal/Local<sp/>bit</highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>Bluetooth.<sp/>See<sp/>RFC<sp/>7668<sp/>ch<sp/>3.2.2</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8],<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>,<sp/>3);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[11]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[12]<sp/>=<sp/>0xfe;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[13],<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref><sp/>+<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CONFIG_NET_L2_BT_ZEP1656)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Workaround<sp/>against<sp/>older<sp/>Linux<sp/>kernel<sp/>BT<sp/>IPSP<sp/>code.</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>will<sp/>be<sp/>removed<sp/>eventually.</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lladdr-&gt;<ref refid="structnet__linkaddr_1a5f5b4c3d353261d0fab8011aa09f00d7" kindref="member">type</ref><sp/>==<sp/><ref refid="group__net__linkaddr_1gga1312c2322bc4a4f1c3b76d6466806b24abc3c811d04e998cbf498cc19644d182a" kindref="member">NET_LINK_BLUETOOTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8]<sp/>^=<sp/>0x02;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lladdr-&gt;<ref refid="structnet__linkaddr_1a5f5b4c3d353261d0fab8011aa09f00d7" kindref="member">type</ref><sp/>==<sp/><ref refid="group__net__linkaddr_1gga1312c2322bc4a4f1c3b76d6466806b24a7fc0b181a04fe90ca3a9c72170810d7b" kindref="member">NET_LINK_ETHERNET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8]<sp/>^=<sp/>0x02;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1af0f01bffcd16daa9143f6014d10a25ad" kindref="member">memcpy</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8],<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>,<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a7b2f8ebe68b557eb9cbb4c2f2ecd70e0" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8]<sp/>^=<sp/>0x02;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297" refid="group__ip__4__6_1gaf4b0c30b926748625bd3c4c81d06ffc5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaf4b0c30b926748625bd3c4c81d06ffc5" kindref="member">net_ipv6_addr_based_on_ll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structin6__addr" kindref="compound">in6_addr</ref><sp/>*addr,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__linkaddr" kindref="compound">net_linkaddr</ref><sp/>*lladdr)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr<sp/>||<sp/>!lladdr)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(lladdr-&gt;<ref refid="structnet__linkaddr_1a7b2f8ebe68b557eb9cbb4c2f2ecd70e0" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[14],<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>,<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a7b2f8ebe68b557eb9cbb4c2f2ecd70e0" kindref="member">len</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8]<sp/><sp/>==<sp/>0U<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[9]<sp/><sp/>==<sp/>0U<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[10]<sp/>==<sp/>0U<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[11]<sp/>==<sp/>0xff<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[12]<sp/>==<sp/>0xfe)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lladdr-&gt;<ref refid="structnet__linkaddr_1a5f5b4c3d353261d0fab8011aa09f00d7" kindref="member">type</ref><sp/>==<sp/><ref refid="group__net__linkaddr_1gga1312c2322bc4a4f1c3b76d6466806b24a7fc0b181a04fe90ca3a9c72170810d7b" kindref="member">NET_LINK_ETHERNET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[9],<sp/>&amp;lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[1],<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[13],<sp/>&amp;lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[3],<sp/>3)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[11]<sp/>==<sp/>0xff<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[12]<sp/>==<sp/>0xfe<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8]<sp/>^<sp/>0x02)<sp/>==<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lladdr-&gt;<ref refid="structnet__linkaddr_1a5f5b4c3d353261d0fab8011aa09f00d7" kindref="member">type</ref><sp/>==<sp/><ref refid="group__net__linkaddr_1gga1312c2322bc4a4f1c3b76d6466806b24abc3c811d04e998cbf498cc19644d182a" kindref="member">NET_LINK_BLUETOOTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[9],<sp/>&amp;lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[1],<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[13],<sp/>&amp;lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[3],<sp/>3)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[11]<sp/>==<sp/>0xff<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[12]<sp/>==<sp/>0xfe</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(CONFIG_NET_L2_BT_ZEP1656)</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Workaround<sp/>against<sp/>older<sp/>Linux<sp/>kernel<sp/>BT<sp/>IPSP</highlight></codeline>
<codeline lineno="1332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>code.<sp/>This<sp/>will<sp/>be<sp/>removed<sp/>eventually.</highlight></codeline>
<codeline lineno="1333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8]<sp/>^<sp/>0x02)<sp/>==<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[0]</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="string_8h_1ad8bfbfa1e4ad284ded921dd775735521" kindref="member">memcmp</ref>(&amp;addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[9],<sp/>&amp;lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[1],</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a7b2f8ebe68b557eb9cbb4c2f2ecd70e0" kindref="member">len</ref><sp/>-<sp/>1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(addr-&gt;<ref refid="structin6__addr_1aa1d600770ac35faa253a53aecd9b3786" kindref="member">s6_addr</ref>[8]<sp/>^<sp/>0x02)<sp/>==<sp/>lladdr-&gt;<ref refid="structnet__linkaddr_1a2176a9f7a444ac3b0108102d8cf852f0" kindref="member">addr</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363" refid="group__ip__4__6_1gad97b2c3da722409eada099f9b7e13f03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in6" kindref="compound">sockaddr_in6</ref><sp/>*<ref refid="group__ip__4__6_1gad97b2c3da722409eada099f9b7e13f03" kindref="member">net_sin6</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr" kindref="compound">sockaddr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr__in6" kindref="compound">sockaddr_in6</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376" refid="group__ip__4__6_1gacccfbac6a03480840fa219e9a1924dc6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in" kindref="compound">sockaddr_in</ref><sp/>*<ref refid="group__ip__4__6_1gacccfbac6a03480840fa219e9a1924dc6" kindref="member">net_sin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr" kindref="compound">sockaddr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr__in" kindref="compound">sockaddr_in</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390" refid="group__ip__4__6_1gae86d2cd402142190e1ea1c120a57939f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in6__ptr" kindref="compound">sockaddr_in6_ptr</ref><sp/>*<ref refid="group__ip__4__6_1gae86d2cd402142190e1ea1c120a57939f" kindref="member">net_sin6_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_ptr<sp/>*addr)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr__in6__ptr" kindref="compound">sockaddr_in6_ptr</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404" refid="group__ip__4__6_1ga4b948e84590081a8aed2a63496e57ae2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__in__ptr" kindref="compound">sockaddr_in_ptr</ref><sp/>*<ref refid="group__ip__4__6_1ga4b948e84590081a8aed2a63496e57ae2" kindref="member">net_sin_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_ptr<sp/>*addr)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr__in__ptr" kindref="compound">sockaddr_in_ptr</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418" refid="group__ip__4__6_1gad5cf206e18769a15f9fc917e416db6ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__ll__ptr" kindref="compound">sockaddr_ll_ptr</ref><sp/>*<ref refid="group__ip__4__6_1gad5cf206e18769a15f9fc917e416db6ee" kindref="member">net_sll_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_ptr<sp/>*addr)</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr__ll__ptr" kindref="compound">sockaddr_ll_ptr</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432" refid="group__ip__4__6_1gac2fb590a35961c04807dd985f462c5fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsockaddr__can__ptr" kindref="compound">sockaddr_can_ptr</ref><sp/>*<ref refid="group__ip__4__6_1gac2fb590a35961c04807dd985f462c5fb" kindref="member">net_can_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_ptr<sp/>*addr)</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr__can__ptr" kindref="compound">sockaddr_can_ptr</ref><sp/>*)addr;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450" refid="group__ip__4__6_1ga264b3c0a13493eac291ddc85d0b4d43d" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga264b3c0a13493eac291ddc85d0b4d43d" kindref="member">net_addr_pton</ref>(<ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>family,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463" refid="group__ip__4__6_1ga326b6cd455f8b6193f490fa2877c5222" refkind="member"><highlight class="normal">__syscall<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__ip__4__6_1ga326b6cd455f8b6193f490fa2877c5222" kindref="member">net_addr_ntop</ref>(<ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>family,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487" refid="group__ip__4__6_1ga9918e156f0039cf45d487a112e0a2ada" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga9918e156f0039cf45d487a112e0a2ada" kindref="member">net_ipaddr_parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_len,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsockaddr" kindref="compound">sockaddr</ref><sp/>*addr);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501" refid="group__ip__4__6_1ga1695009388402938dcc2e49b526ebd1f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref><sp/><ref refid="group__ip__4__6_1ga1695009388402938dcc2e49b526ebd1f" kindref="member">net_tcp_seq_cmp</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>seq1,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>seq2)</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a0c18914b3041c2f583aba76f418399c2" kindref="member">int32_t</ref>)(seq1<sp/>-<sp/>seq2);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516" refid="group__ip__4__6_1gaa77b299f53e5535ac4c4bea1b6531a34" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gaa77b299f53e5535ac4c4bea1b6531a34" kindref="member">net_tcp_seq_greater</ref>(<ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>seq1,<sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/>seq2)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga1695009388402938dcc2e49b526ebd1f" kindref="member">net_tcp_seq_cmp</ref>(seq1,<sp/>seq2)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532" refid="group__ip__4__6_1ga8b794f251cf8412c769ab415902a9f32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga8b794f251cf8412c769ab415902a9f32" kindref="member">net_bytes_from_str</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542" refid="group__ip__4__6_1gae74c9ba7ff4addbce7f931bd6fa91fa0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae74c9ba7ff4addbce7f931bd6fa91fa0" kindref="member">net_tx_priority2tc</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref><sp/>prio);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552" refid="group__ip__4__6_1ga7b3c41ae9b3962090d72c130a9fa61b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ga7b3c41ae9b3962090d72c130a9fa61b1" kindref="member">net_rx_priority2tc</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref><sp/>prio);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562" refid="group__ip__4__6_1ga14bc7018e3dd7c3e320b44a077343ce4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref><sp/><ref refid="group__ip__4__6_1ga14bc7018e3dd7c3e320b44a077343ce4" kindref="member">net_vlan2priority</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>priority)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Map<sp/>according<sp/>to<sp/>IEEE<sp/>802.1Q<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>vlan2priority[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda8bc1e038efe3e2332ccd3840990a64ce" kindref="member">NET_PRIORITY_BE</ref>,</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdae01a1318d81935d370f030456435202b" kindref="member">NET_PRIORITY_BK</ref>,</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffdac9c5e9073459374d56491c26b692d5b0" kindref="member">NET_PRIORITY_EE</ref>,</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda38103e3ab83f8fd693a5a1c18de98354" kindref="member">NET_PRIORITY_CA</ref>,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda7878127d03fb7d0a34b8d68b9461e792" kindref="member">NET_PRIORITY_VI</ref>,</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda6919b414160f3ed8ac7c391761c77e8a" kindref="member">NET_PRIORITY_VO</ref>,</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda23090c0b06a54b8a41be3f44497b0c05" kindref="member">NET_PRIORITY_IC</ref>,</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda05855ea3da85f60bec646a4491b554ef" kindref="member">NET_PRIORITY_NC</ref></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(priority<sp/>&gt;=<sp/><ref refid="group__sys-util_1ga70c57aae3eb654e205459b4362c8089a" kindref="member">ARRAY_SIZE</ref>(vlan2priority))<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>Best<sp/>Effort<sp/>as<sp/>the<sp/>default<sp/>priority<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1ggae87ef466e77ded673ed7e593d3eddffda8bc1e038efe3e2332ccd3840990a64ce" kindref="member">NET_PRIORITY_BE</ref>;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref>)vlan2priority[priority];</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591" refid="group__ip__4__6_1ga8be77d043d4d1d29e0879b3b22274629" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__ip__4__6_1ga8be77d043d4d1d29e0879b3b22274629" kindref="member">net_priority2vlan</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ip__4__6_1gae87ef466e77ded673ed7e593d3eddffd" kindref="member">net_priority</ref><sp/>priority)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>conversion<sp/>works<sp/>both<sp/>ways<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref>)<ref refid="group__ip__4__6_1ga14bc7018e3dd7c3e320b44a077343ce4" kindref="member">net_vlan2priority</ref>(priority);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605" refid="group__ip__4__6_1gaba4c72e3aa2ceb4ac67d25112fb36523" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__ip__4__6_1gaba4c72e3aa2ceb4ac67d25112fb36523" kindref="member">net_family2str</ref>(<ref refid="group__ip__4__6_1ga2d9e094abb99ebd0874373edf1c45eda" kindref="member">sa_family_t</ref><sp/>family);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscalls/net_ip.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_NET_NET_IP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/net/net_ip.h"/>
  </compounddef>
</doxygen>
