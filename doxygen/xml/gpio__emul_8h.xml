<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="gpio__emul_8h" kind="file" language="C++">
    <compoundname>gpio_emul.h</compoundname>
    <includes refid="include_2zephyr_2types_8h" local="no">zephyr/types.h</includes>
    <includes refid="drivers_2gpio_8h" local="no">drivers/gpio.h</includes>
    <incdepgraph>
      <node id="5">
        <label>drivers/gpio.h</label>
        <link refid="drivers_2gpio_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/drivers/gpio/gpio_emul.h</label>
        <link refid="gpio__emul_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>dt-bindings/gpio/gpio.h</label>
        <link refid="dt-bindings_2gpio_2gpio_8h"/>
      </node>
      <node id="6">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sys/slist.h</label>
        <link refid="slist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="15">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="2">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="18">
        <label>device.h</label>
      </node>
      <node id="10">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="20">
        <label>syscalls/gpio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gpio__emul_1gaa7eae6a0f85d0f0fb6a8aa41329f4709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_emul_input_set_masked</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins, gpio_port_value_t values)</argsstring>
        <name>gpio_emul_input_set_masked</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref></type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Modify the values of one or more emulated GPIO input <computeroutput>pins</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask of pins that have changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>New values to assign to <computeroutput>pins</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="56" column="5" declfile="include/drivers/gpio/gpio_emul.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1ga3962e337bc22e532f2c181724621fcf8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_emul_input_set</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, int value)</argsstring>
        <name>gpio_emul_input_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Modify the value of one emulated GPIO input <computeroutput>pin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New values to assign to <computeroutput>pin</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="69" column="19" bodyfile="include/drivers/gpio/gpio_emul.h" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1gaa6e4c5c2c53d421e9635c0a977172205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_emul_output_get_masked</definition>
        <argsstring>(const struct device *port, gpio_port_pins_t pins, gpio_port_value_t *values)</argsstring>
        <name>gpio_emul_output_get_masked</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref></type>
          <declname>pins</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref> *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Read the value of one or more emulated GPIO output <computeroutput>pins</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pins</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask of pins that have changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to where the value of <computeroutput>pins</computeroutput> will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="85" column="5" declfile="include/drivers/gpio/gpio_emul.h" declline="85" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1gaa62613aa6eb442d2c4e436893316124f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int gpio_emul_output_get</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin)</argsstring>
        <name>gpio_emul_output_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Read the value of one emulated GPIO output <computeroutput>pin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or 1 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="97" column="19" bodyfile="include/drivers/gpio/gpio_emul.h" bodystart="97" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__gpio__emul_1ga86bd5ff4f557e4d520a4f760fb74cdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpio_emul_flags_get</definition>
        <argsstring>(const struct device *port, gpio_pin_t pin, gpio_flags_t *flags)</argsstring>
        <name>gpio_emul_flags_get</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref> *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Get <computeroutput>flags</computeroutput> for a given emulated GPIO <computeroutput>pin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>For more information on available flags, see <ref refid="group__gpio__interface" kindref="compound">GPIO Driver APIs</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The emulated GPIO port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin to retrieve <computeroutput>flags</computeroutput> for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to where the flags for <computeroutput>pin</computeroutput> will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para>-EINVAL if an invalid argument is provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/gpio/gpio_emul.h" line="122" column="5" declfile="include/drivers/gpio/gpio_emul.h" declline="122" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Backend API for emulated GPIO. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Friedt<sp/>Professional<sp/>Engineering<sp/>Services,<sp/>Inc</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_EMUL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_EMUL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="include_2zephyr_2types_8h" kindref="compound">zephyr/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="drivers_2gpio_8h" kindref="compound">drivers/gpio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group__gpio__emul_1gaa7eae6a0f85d0f0fb6a8aa41329f4709" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__emul_1gaa7eae6a0f85d0f0fb6a8aa41329f4709" kindref="member">gpio_emul_input_set_masked</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>values);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group__gpio__emul_1ga3962e337bc22e532f2c181724621fcf8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__emul_1ga3962e337bc22e532f2c181724621fcf8" kindref="member">gpio_emul_input_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gpio__emul_1gaa7eae6a0f85d0f0fb6a8aa41329f4709" kindref="member">gpio_emul_input_set_masked</ref>(port,<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin),<sp/>value<sp/>?<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin)<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="group__gpio__emul_1gaa6e4c5c2c53d421e9635c0a977172205" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__emul_1gaa6e4c5c2c53d421e9635c0a977172205" kindref="member">gpio_emul_output_get_masked</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga7f40ed51f14fd8000e9b52ab347b273f" kindref="member">gpio_port_pins_t</ref><sp/>pins,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>*values);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="group__gpio__emul_1gaa62613aa6eb442d2c4e436893316124f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__emul_1gaa62613aa6eb442d2c4e436893316124f" kindref="member">gpio_emul_output_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gpio__interface_1gabcebe24c93486896e1dfc2459ec25693" kindref="member">gpio_port_value_t</ref><sp/>values;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/><ref refid="group__gpio__emul_1gaa6e4c5c2c53d421e9635c0a977172205" kindref="member">gpio_emul_output_get_masked</ref>(port,<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin),<sp/>&amp;values);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref><sp/>=<sp/>(values<sp/>&amp;<sp/><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(pin))<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="k__float__disable_8c_1a706ddfa9be3cb7727dd680308a7e62e0" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="group__gpio__emul_1ga86bd5ff4f557e4d520a4f760fb74cdd5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gpio__emul_1ga86bd5ff4f557e4d520a4f760fb74cdd5" kindref="member">gpio_emul_flags_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdevice" kindref="compound">device</ref><sp/>*port,<sp/><ref refid="group__gpio__interface_1ga38179eb7a46a743c12cfac28f347fb34" kindref="member">gpio_pin_t</ref><sp/>pin,<sp/><ref refid="group__gpio__interface_1ga5f5cb5e7dae6d58e072bb450af029d2e" kindref="member">gpio_flags_t</ref><sp/>*<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_EMUL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/drivers/gpio/gpio_emul.h"/>
  </compounddef>
</doxygen>
