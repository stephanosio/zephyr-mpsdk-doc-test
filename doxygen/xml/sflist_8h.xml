<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="sflist_8h" kind="file" language="C++">
    <compoundname>sflist.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="stdbool_8h" local="no">stdbool.h</includes>
    <includes refid="____assert_8h" local="no">sys/__assert.h</includes>
    <includes refid="list__gen_8h" local="yes">list_gen.h</includes>
    <includedby refid="kernel__includes_8h" local="no">include/kernel_includes.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>sys/__assert.h</label>
        <link refid="____assert_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>list_gen.h</label>
        <link refid="list__gen_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>sys/printk.h</label>
        <link refid="printk_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sys/util_internal.h</label>
        <link refid="util__internal_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>util_loops.h</label>
        <link refid="util__loops_8h"/>
      </node>
      <node id="12">
        <label>sys/util_macro.h</label>
        <link refid="util__macro_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>toolchain.h</label>
        <link refid="toolchain_8h"/>
      </node>
      <node id="15">
        <label>zephyr/types.h</label>
        <link refid="include_2zephyr_2types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
        <link refid="stdbool_8h"/>
      </node>
      <node id="9">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>include/cache.h</label>
        <link refid="cache_8h"/>
      </node>
      <node id="6">
        <label>include/device.h</label>
        <link refid="device_8h"/>
      </node>
      <node id="7">
        <label>include/drivers/pcie/endpoint/pcie_ep.h</label>
        <link refid="pcie__ep_8h"/>
      </node>
      <node id="5">
        <label>include/init.h</label>
        <link refid="init_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/kernel.h</label>
        <link refid="include_2kernel_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/kernel_includes.h</label>
        <link refid="kernel__includes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>include/posix/pthread.h</label>
        <link refid="pthread_8h"/>
      </node>
      <node id="184">
        <label>include/smf.h</label>
        <link refid="smf_8h"/>
      </node>
      <node id="1">
        <label>include/sys/sflist.h</label>
        <link refid="sflist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>include/syscall_handler.h</label>
        <link refid="syscall__handler_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
      </node>
      <node id="180">
        <label>include/timeout_q.h</label>
        <link refid="timeout__q_8h"/>
        <childnode refid="181" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>include/wait_q.h</label>
        <link refid="wait__q_8h"/>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>include/xen/console.h</label>
        <link refid="xen_2console_8h"/>
      </node>
      <node id="183">
        <label>include/zephyr.h</label>
        <link refid="zephyr_8h"/>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>subsys/testsuite/ztest/include/ztest.h</label>
        <link refid="ztest_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>subsys/testsuite/ztest/include/ztest_assert.h</label>
        <link refid="ztest__assert_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>subsys/testsuite/ztest/include/ztest_test.h</label>
        <link refid="ztest__test_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>subsys/testsuite/ztest/include/ztest_test_deprecated.h</label>
        <link refid="ztest__test__deprecated_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="178">
        <label>subsys/testsuite/ztest/include/ztest_test_new.h</label>
        <link refid="ztest__test__new_8h"/>
      </node>
      <node id="13">
        <label>tests/kernel/common/src/atomic.c</label>
        <link refid="atomic_8c"/>
      </node>
      <node id="14">
        <label>tests/kernel/common/src/bitarray.c</label>
        <link refid="bitarray_8c"/>
      </node>
      <node id="15">
        <label>tests/kernel/common/src/bitfield.c</label>
        <link refid="bitfield_8c"/>
      </node>
      <node id="16">
        <label>tests/kernel/common/src/boot_delay.c</label>
        <link refid="boot__delay_8c"/>
      </node>
      <node id="17">
        <label>tests/kernel/common/src/byteorder.c</label>
        <link refid="byteorder_8c"/>
      </node>
      <node id="18">
        <label>tests/kernel/common/src/clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="19">
        <label>tests/kernel/common/src/errno.c</label>
        <link refid="errno_8c"/>
      </node>
      <node id="20">
        <label>tests/kernel/common/src/irq_offload.c</label>
        <link refid="irq__offload_8c"/>
      </node>
      <node id="21">
        <label>tests/kernel/common/src/main.c</label>
        <link refid="common_2src_2main_8c"/>
      </node>
      <node id="22">
        <label>tests/kernel/common/src/multilib.c</label>
        <link refid="multilib_8c"/>
      </node>
      <node id="23">
        <label>tests/kernel/common/src/printk.c</label>
        <link refid="printk_8c"/>
      </node>
      <node id="24">
        <label>tests/kernel/common/src/timeout_order.c</label>
        <link refid="timeout__order_8c"/>
      </node>
      <node id="25">
        <label>tests/kernel/condvar/condvar_api/src/main.c</label>
        <link refid="condvar_2condvar__api_2src_2main_8c"/>
      </node>
      <node id="26">
        <label>tests/kernel/context/src/main.c</label>
        <link refid="context_2src_2main_8c"/>
      </node>
      <node id="27">
        <label>tests/kernel/device/src/abstract_driver.c</label>
        <link refid="abstract__driver_8c"/>
      </node>
      <node id="28">
        <label>tests/kernel/device/src/abstract_driver.h</label>
        <link refid="abstract__driver_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tests/kernel/device/src/main.c</label>
        <link refid="device_2src_2main_8c"/>
      </node>
      <node id="30">
        <label>tests/kernel/device/src/mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="31">
        <label>tests/kernel/device/src/test_driver_init.c</label>
        <link refid="test__driver__init_8c"/>
      </node>
      <node id="32">
        <label>tests/kernel/early_sleep/src/main.c</label>
        <link refid="early__sleep_2src_2main_8c"/>
      </node>
      <node id="33">
        <label>tests/kernel/events/event_api/src/main.c</label>
        <link refid="events_2event__api_2src_2main_8c"/>
      </node>
      <node id="34">
        <label>tests/kernel/events/event_api/src/test_event_apis.c</label>
        <link refid="test__event__apis_8c"/>
      </node>
      <node id="35">
        <label>tests/kernel/events/sys_event/src/main.c</label>
        <link refid="events_2sys__event_2src_2main_8c"/>
      </node>
      <node id="36">
        <label>tests/kernel/fatal/exception/src/main.c</label>
        <link refid="fatal_2exception_2src_2main_8c"/>
      </node>
      <node id="37">
        <label>tests/kernel/fatal/no-multithreading/src/main.c</label>
        <link refid="fatal_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="38">
        <label>tests/kernel/fifo/fifo_api/src/main.c</label>
        <link refid="fifo_2fifo__api_2src_2main_8c"/>
      </node>
      <node id="39">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo.h</label>
        <link refid="test__fifo_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_cancel.c</label>
        <link refid="test__fifo__cancel_8c"/>
      </node>
      <node id="41">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_contexts.c</label>
        <link refid="test__fifo__contexts_8c"/>
      </node>
      <node id="42">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_fail.c</label>
        <link refid="test__fifo__fail_8c"/>
      </node>
      <node id="43">
        <label>tests/kernel/fifo/fifo_api/src/test_fifo_loop.c</label>
        <link refid="test__fifo__loop_8c"/>
      </node>
      <node id="44">
        <label>tests/kernel/fifo/fifo_timeout/src/main.c</label>
        <link refid="fifo_2fifo__timeout_2src_2main_8c"/>
      </node>
      <node id="45">
        <label>tests/kernel/fifo/fifo_usage/src/main.c</label>
        <link refid="fifo_2fifo__usage_2src_2main_8c"/>
      </node>
      <node id="46">
        <label>tests/kernel/fpu_sharing/float_disable/src/k_float_disable.c</label>
        <link refid="k__float__disable_8c"/>
      </node>
      <node id="47">
        <label>tests/kernel/fpu_sharing/float_disable/src/main.c</label>
        <link refid="fpu__sharing_2float__disable_2src_2main_8c"/>
      </node>
      <node id="48">
        <label>tests/kernel/fpu_sharing/generic/src/load_store.c</label>
        <link refid="load__store_8c"/>
      </node>
      <node id="49">
        <label>tests/kernel/fpu_sharing/generic/src/main.c</label>
        <link refid="fpu__sharing_2generic_2src_2main_8c"/>
      </node>
      <node id="50">
        <label>tests/kernel/fpu_sharing/generic/src/pi.c</label>
        <link refid="pi_8c"/>
      </node>
      <node id="51">
        <label>tests/kernel/gen_isr_table/src/main.c</label>
        <link refid="gen__isr__table_2src_2main_8c"/>
      </node>
      <node id="52">
        <label>tests/kernel/interrupt/src/direct_isr.c</label>
        <link refid="direct__isr_8c"/>
      </node>
      <node id="53">
        <label>tests/kernel/interrupt/src/dynamic_isr.c</label>
        <link refid="dynamic__isr_8c"/>
      </node>
      <node id="54">
        <label>tests/kernel/interrupt/src/interrupt_offload.c</label>
        <link refid="interrupt__offload_8c"/>
      </node>
      <node id="55">
        <label>tests/kernel/interrupt/src/main.c</label>
        <link refid="interrupt_2src_2main_8c"/>
      </node>
      <node id="56">
        <label>tests/kernel/interrupt/src/nested_irq.c</label>
        <link refid="nested__irq_8c"/>
      </node>
      <node id="57">
        <label>tests/kernel/interrupt/src/prevent_irq.c</label>
        <link refid="prevent__irq_8c"/>
      </node>
      <node id="58">
        <label>tests/kernel/interrupt/src/regular_isr.c</label>
        <link refid="regular__isr_8c"/>
      </node>
      <node id="59">
        <label>tests/kernel/lifo/lifo_api/src/main.c</label>
        <link refid="lifo_2lifo__api_2src_2main_8c"/>
      </node>
      <node id="60">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo.h</label>
        <link refid="test__lifo_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_contexts.c</label>
        <link refid="test__lifo__contexts_8c"/>
      </node>
      <node id="62">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_fail.c</label>
        <link refid="test__lifo__fail_8c"/>
      </node>
      <node id="63">
        <label>tests/kernel/lifo/lifo_api/src/test_lifo_loop.c</label>
        <link refid="test__lifo__loop_8c"/>
      </node>
      <node id="64">
        <label>tests/kernel/lifo/lifo_usage/src/main.c</label>
        <link refid="lifo_2lifo__usage_2src_2main_8c"/>
      </node>
      <node id="65">
        <label>tests/kernel/mbox/mbox_api/src/main.c</label>
        <link refid="mbox_2mbox__api_2src_2main_8c"/>
      </node>
      <node id="66">
        <label>tests/kernel/mbox/mbox_api/src/test_mbox_api.c</label>
        <link refid="test__mbox__api_8c"/>
      </node>
      <node id="67">
        <label>tests/kernel/mbox/mbox_usage/src/main.c</label>
        <link refid="mbox_2mbox__usage_2src_2main_8c"/>
      </node>
      <node id="68">
        <label>tests/kernel/mem_heap/k_heap_api/src/main.c</label>
        <link refid="mem__heap_2k__heap__api_2src_2main_8c"/>
      </node>
      <node id="69">
        <label>tests/kernel/mem_heap/k_heap_api/src/test_kheap_api.c</label>
        <link refid="test__kheap__api_8c"/>
      </node>
      <node id="70">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/main.c</label>
        <link refid="mem__heap_2mheap__api__concept_2src_2main_8c"/>
      </node>
      <node id="71">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_api.c</label>
        <link refid="test__mheap__api_8c"/>
      </node>
      <node id="72">
        <label>tests/kernel/mem_heap/mheap_api_concept/src/test_mheap_concept.c</label>
        <link refid="test__mheap__concept_8c"/>
      </node>
      <node id="73">
        <label>tests/kernel/mem_heap/shared_multi_heap/src/main.c</label>
        <link refid="mem__heap_2shared__multi__heap_2src_2main_8c"/>
      </node>
      <node id="74">
        <label>tests/kernel/mem_protect/demand_paging/src/main.c</label>
        <link refid="mem__protect_2demand__paging_2src_2main_8c"/>
      </node>
      <node id="75">
        <label>tests/kernel/mem_protect/futex/src/main.c</label>
        <link refid="mem__protect_2futex_2src_2main_8c"/>
      </node>
      <node id="76">
        <label>tests/kernel/mem_protect/mem_map/src/main.c</label>
        <link refid="mem__protect_2mem__map_2src_2main_8c"/>
      </node>
      <node id="77">
        <label>tests/kernel/mem_protect/mem_protect/src/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="80">
        <label>tests/kernel/mem_protect/mem_protect/src/inherit.c</label>
        <link refid="inherit_8c"/>
      </node>
      <node id="81">
        <label>tests/kernel/mem_protect/mem_protect/src/kobject.c</label>
        <link refid="kobject_8c"/>
      </node>
      <node id="78">
        <label>tests/kernel/mem_protect/mem_protect/src/main.c</label>
        <link refid="mem__protect_2mem__protect_2src_2main_8c"/>
      </node>
      <node id="82">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_domain.c</label>
        <link refid="mem__domain_8c"/>
      </node>
      <node id="83">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_partition.c</label>
        <link refid="mem__partition_8c"/>
      </node>
      <node id="79">
        <label>tests/kernel/mem_protect/mem_protect/src/mem_protect.h</label>
        <link refid="mem__protect_8h"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>tests/kernel/mem_protect/obj_validation/src/main.c</label>
        <link refid="mem__protect_2obj__validation_2src_2main_8c"/>
      </node>
      <node id="85">
        <label>tests/kernel/mem_protect/protection/src/main.c</label>
        <link refid="mem__protect_2protection_2src_2main_8c"/>
      </node>
      <node id="86">
        <label>tests/kernel/mem_protect/stack_random/src/main.c</label>
        <link refid="mem__protect_2stack__random_2src_2main_8c"/>
      </node>
      <node id="87">
        <label>tests/kernel/mem_protect/stackprot/src/main.c</label>
        <link refid="mem__protect_2stackprot_2src_2main_8c"/>
      </node>
      <node id="88">
        <label>tests/kernel/mem_protect/sys_sem/src/main.c</label>
        <link refid="mem__protect_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="89">
        <label>tests/kernel/mem_protect/syscalls/src/main.c</label>
        <link refid="mem__protect_2syscalls_2src_2main_8c"/>
      </node>
      <node id="90">
        <label>tests/kernel/mem_protect/userspace/src/main.c</label>
        <link refid="mem__protect_2userspace_2src_2main_8c"/>
      </node>
      <node id="91">
        <label>tests/kernel/mem_slab/mslab/src/main.c</label>
        <link refid="mem__slab_2mslab_2src_2main_8c"/>
      </node>
      <node id="92">
        <label>tests/kernel/mem_slab/mslab_api/src/main.c</label>
        <link refid="mem__slab_2mslab__api_2src_2main_8c"/>
      </node>
      <node id="93">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_api.c</label>
        <link refid="test__mslab__api_8c"/>
      </node>
      <node id="94">
        <label>tests/kernel/mem_slab/mslab_api/src/test_mslab_extern.c</label>
        <link refid="test__mslab__extern_8c"/>
      </node>
      <node id="95">
        <label>tests/kernel/mem_slab/mslab_concept/src/main.c</label>
        <link refid="mem__slab_2mslab__concept_2src_2main_8c"/>
      </node>
      <node id="96">
        <label>tests/kernel/mem_slab/mslab_concept/src/test_mslab_alloc_wait.c</label>
        <link refid="test__mslab__alloc__wait_8c"/>
      </node>
      <node id="97">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/main.c</label>
        <link refid="mem__slab_2mslab__threadsafe_2src_2main_8c"/>
      </node>
      <node id="98">
        <label>tests/kernel/mem_slab/mslab_threadsafe/src/test_mslab_threadsafe.c</label>
        <link refid="test__mslab__threadsafe_8c"/>
      </node>
      <node id="99">
        <label>tests/kernel/mp/src/main.c</label>
        <link refid="mp_2src_2main_8c"/>
      </node>
      <node id="100">
        <label>tests/kernel/msgq/msgq_api/src/main.c</label>
        <link refid="msgq_2msgq__api_2src_2main_8c"/>
      </node>
      <node id="101">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq.h</label>
        <link refid="test__msgq_8h"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_attrs.c</label>
        <link refid="test__msgq__attrs_8c"/>
      </node>
      <node id="103">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_contexts.c</label>
        <link refid="test__msgq__contexts_8c"/>
      </node>
      <node id="104">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_fail.c</label>
        <link refid="test__msgq__fail_8c"/>
      </node>
      <node id="105">
        <label>tests/kernel/msgq/msgq_api/src/test_msgq_purge.c</label>
        <link refid="test__msgq__purge_8c"/>
      </node>
      <node id="106">
        <label>tests/kernel/msgq/msgq_usage/src/main.c</label>
        <link refid="msgq_2msgq__usage_2src_2main_8c"/>
      </node>
      <node id="107">
        <label>tests/kernel/mutex/mutex_api/src/test_mutex_apis.c</label>
        <link refid="test__mutex__apis_8c"/>
      </node>
      <node id="108">
        <label>tests/kernel/mutex/mutex_error_case/src/test_mutex_error.c</label>
        <link refid="test__mutex__error_8c"/>
      </node>
      <node id="109">
        <label>tests/kernel/mutex/sys_mutex/src/main.c</label>
        <link refid="mutex_2sys__mutex_2src_2main_8c"/>
      </node>
      <node id="110">
        <label>tests/kernel/mutex/sys_mutex/src/thread_competition.c</label>
        <link refid="thread__competition_8c"/>
      </node>
      <node id="111">
        <label>tests/kernel/obj_tracking/src/main.c</label>
        <link refid="obj__tracking_2src_2main_8c"/>
      </node>
      <node id="112">
        <label>tests/kernel/pending/src/main.c</label>
        <link refid="pending_2src_2main_8c"/>
      </node>
      <node id="113">
        <label>tests/kernel/pipe/pipe/src/main.c</label>
        <link refid="pipe_2pipe_2src_2main_8c"/>
      </node>
      <node id="114">
        <label>tests/kernel/pipe/pipe/src/test_pipe.c</label>
        <link refid="test__pipe_8c"/>
      </node>
      <node id="115">
        <label>tests/kernel/pipe/pipe_api/src/main.c</label>
        <link refid="pipe_2pipe__api_2src_2main_8c"/>
      </node>
      <node id="116">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_avail.c</label>
        <link refid="test__pipe__avail_8c"/>
      </node>
      <node id="117">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_contexts.c</label>
        <link refid="test__pipe__contexts_8c"/>
      </node>
      <node id="118">
        <label>tests/kernel/pipe/pipe_api/src/test_pipe_fail.c</label>
        <link refid="test__pipe__fail_8c"/>
      </node>
      <node id="119">
        <label>tests/kernel/poll/src/main.c</label>
        <link refid="poll_2src_2main_8c"/>
      </node>
      <node id="120">
        <label>tests/kernel/poll/src/test_poll.c</label>
        <link refid="test__poll_8c"/>
      </node>
      <node id="121">
        <label>tests/kernel/poll/src/test_poll_fail.c</label>
        <link refid="test__poll__fail_8c"/>
      </node>
      <node id="122">
        <label>tests/kernel/profiling/profiling_api/src/main.c</label>
        <link refid="profiling_2profiling__api_2src_2main_8c"/>
      </node>
      <node id="123">
        <label>tests/kernel/queue/src/main.c</label>
        <link refid="queue_2src_2main_8c"/>
      </node>
      <node id="124">
        <label>tests/kernel/queue/src/test_queue.h</label>
        <link refid="test__queue_8h"/>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>tests/kernel/queue/src/test_queue_contexts.c</label>
        <link refid="test__queue__contexts_8c"/>
      </node>
      <node id="126">
        <label>tests/kernel/queue/src/test_queue_fail.c</label>
        <link refid="test__queue__fail_8c"/>
      </node>
      <node id="127">
        <label>tests/kernel/queue/src/test_queue_loop.c</label>
        <link refid="test__queue__loop_8c"/>
      </node>
      <node id="128">
        <label>tests/kernel/queue/src/test_queue_user.c</label>
        <link refid="test__queue__user_8c"/>
      </node>
      <node id="129">
        <label>tests/kernel/sched/deadline/src/main.c</label>
        <link refid="sched_2deadline_2src_2main_8c"/>
      </node>
      <node id="130">
        <label>tests/kernel/sched/metairq/src/main.c</label>
        <link refid="sched_2metairq_2src_2main_8c"/>
      </node>
      <node id="131">
        <label>tests/kernel/sched/preempt/src/main.c</label>
        <link refid="sched_2preempt_2src_2main_8c"/>
      </node>
      <node id="134">
        <label>tests/kernel/sched/schedule_api/src/main.c</label>
        <link refid="sched_2schedule__api_2src_2main_8c"/>
      </node>
      <node id="132">
        <label>tests/kernel/sched/schedule_api/src/test_priority_scheduling.c</label>
        <link refid="test__priority__scheduling_8c"/>
      </node>
      <node id="133">
        <label>tests/kernel/sched/schedule_api/src/test_sched.h</label>
        <link refid="test__sched_8h"/>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>tests/kernel/sched/schedule_api/src/test_sched_is_preempt_thread.c</label>
        <link refid="test__sched__is__preempt__thread_8c"/>
      </node>
      <node id="136">
        <label>tests/kernel/sched/schedule_api/src/test_sched_priority.c</label>
        <link refid="test__sched__priority_8c"/>
      </node>
      <node id="137">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_and_lock.c</label>
        <link refid="test__sched__timeslice__and__lock_8c"/>
      </node>
      <node id="138">
        <label>tests/kernel/sched/schedule_api/src/test_sched_timeslice_reset.c</label>
        <link refid="test__sched__timeslice__reset_8c"/>
      </node>
      <node id="139">
        <label>tests/kernel/sched/schedule_api/src/test_slice_scheduling.c</label>
        <link refid="test__slice__scheduling_8c"/>
      </node>
      <node id="140">
        <label>tests/kernel/sched/schedule_api/src/user_api.c</label>
        <link refid="user__api_8c"/>
      </node>
      <node id="141">
        <label>tests/kernel/semaphore/semaphore/src/main.c</label>
        <link refid="semaphore_2semaphore_2src_2main_8c"/>
      </node>
      <node id="142">
        <label>tests/kernel/semaphore/sys_sem/src/main.c</label>
        <link refid="semaphore_2sys__sem_2src_2main_8c"/>
      </node>
      <node id="143">
        <label>tests/kernel/sleep/src/main.c</label>
        <link refid="sleep_2src_2main_8c"/>
      </node>
      <node id="144">
        <label>tests/kernel/sleep/src/usleep.c</label>
        <link refid="usleep_8c"/>
      </node>
      <node id="145">
        <label>tests/kernel/smp/src/main.c</label>
        <link refid="smp_2src_2main_8c"/>
      </node>
      <node id="146">
        <label>tests/kernel/smp_boot_delay/src/main.c</label>
        <link refid="smp__boot__delay_2src_2main_8c"/>
      </node>
      <node id="147">
        <label>tests/kernel/spinlock/src/main.c</label>
        <link refid="spinlock_2src_2main_8c"/>
      </node>
      <node id="148">
        <label>tests/kernel/spinlock/src/spinlock_error_case.c</label>
        <link refid="spinlock__error__case_8c"/>
      </node>
      <node id="149">
        <label>tests/kernel/stack/stack/src/main.c</label>
        <link refid="stack_2stack_2src_2main_8c"/>
      </node>
      <node id="150">
        <label>tests/kernel/stack/stack/src/test_stack_contexts.c</label>
        <link refid="test__stack__contexts_8c"/>
      </node>
      <node id="151">
        <label>tests/kernel/stack/stack/src/test_stack_fail.c</label>
        <link refid="test__stack__fail_8c"/>
      </node>
      <node id="152">
        <label>tests/kernel/threads/dynamic_thread/src/main.c</label>
        <link refid="threads_2dynamic__thread_2src_2main_8c"/>
      </node>
      <node id="153">
        <label>tests/kernel/threads/no-multithreading/src/main.c</label>
        <link refid="threads_2no-multithreading_2src_2main_8c"/>
      </node>
      <node id="154">
        <label>tests/kernel/threads/thread_apis/src/main.c</label>
        <link refid="threads_2thread__apis_2src_2main_8c"/>
      </node>
      <node id="155">
        <label>tests/kernel/threads/thread_apis/src/test_essential_thread.c</label>
        <link refid="test__essential__thread_8c"/>
      </node>
      <node id="156">
        <label>tests/kernel/threads/thread_apis/src/test_kthread_for_each.c</label>
        <link refid="test__kthread__for__each_8c"/>
      </node>
      <node id="157">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cancel_abort.c</label>
        <link refid="test__threads__cancel__abort_8c"/>
      </node>
      <node id="158">
        <label>tests/kernel/threads/thread_apis/src/test_threads_cpu_mask.c</label>
        <link refid="test__threads__cpu__mask_8c"/>
      </node>
      <node id="159">
        <label>tests/kernel/threads/thread_apis/src/test_threads_set_priority.c</label>
        <link refid="test__threads__set__priority_8c"/>
      </node>
      <node id="160">
        <label>tests/kernel/threads/thread_apis/src/test_threads_spawn.c</label>
        <link refid="test__threads__spawn_8c"/>
      </node>
      <node id="161">
        <label>tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c</label>
        <link refid="test__threads__suspend__resume_8c"/>
      </node>
      <node id="162">
        <label>tests/kernel/threads/thread_error_case/src/main.c</label>
        <link refid="threads_2thread__error__case_2src_2main_8c"/>
      </node>
      <node id="163">
        <label>tests/kernel/threads/thread_init/src/main.c</label>
        <link refid="threads_2thread__init_2src_2main_8c"/>
      </node>
      <node id="164">
        <label>tests/kernel/threads/thread_stack/src/main.c</label>
        <link refid="threads_2thread__stack_2src_2main_8c"/>
      </node>
      <node id="165">
        <label>tests/kernel/threads/tls/src/main.c</label>
        <link refid="threads_2tls_2src_2main_8c"/>
      </node>
      <node id="166">
        <label>tests/kernel/tickless/tickless_concept/src/main.c</label>
        <link refid="tickless_2tickless__concept_2src_2main_8c"/>
      </node>
      <node id="167">
        <label>tests/kernel/timer/cycle64/src/main.c</label>
        <link refid="timer_2cycle64_2src_2main_8c"/>
      </node>
      <node id="168">
        <label>tests/kernel/timer/starve/src/main.c</label>
        <link refid="timer_2starve_2src_2main_8c"/>
      </node>
      <node id="169">
        <label>tests/kernel/timer/timer_api/src/main.c</label>
        <link refid="timer_2timer__api_2src_2main_8c"/>
      </node>
      <node id="170">
        <label>tests/kernel/timer/timer_api/src/timer_convert.c</label>
        <link refid="timer__convert_8c"/>
      </node>
      <node id="171">
        <label>tests/kernel/timer/timer_error_case/src/main.c</label>
        <link refid="timer_2timer__error__case_2src_2main_8c"/>
      </node>
      <node id="172">
        <label>tests/kernel/timer/timer_monotonic/src/main.c</label>
        <link refid="timer_2timer__monotonic_2src_2main_8c"/>
      </node>
      <node id="173">
        <label>tests/kernel/workq/critical/src/main.c</label>
        <link refid="workq_2critical_2src_2main_8c"/>
      </node>
      <node id="174">
        <label>tests/kernel/workq/user_work/src/main.c</label>
        <link refid="workq_2user__work_2src_2main_8c"/>
      </node>
      <node id="175">
        <label>tests/kernel/workq/work/src/main.c</label>
        <link refid="workq_2work_2src_2main_8c"/>
      </node>
      <node id="176">
        <label>tests/kernel/workq/work_queue/src/main.c</label>
        <link refid="workq_2work__queue_2src_2main_8c"/>
      </node>
      <node id="177">
        <label>tests/kernel/xip/src/main.c</label>
        <link refid="xip_2src_2main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1gaa3e9a3eeef7ecca012b0926fb2758c01" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_NODE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_NODE(sflist, __sl, __sn)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list Note: the loop is unsafe and thus __sn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_SFLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="69" column="9" bodyfile="include/sys/sflist.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga0470a27a54ed20eec35baa6cacd6a5ff" prot="public" static="no">
        <name>SYS_SFLIST_ITERATE_FROM_NODE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <initializer>	Z_GENLIST_ITERATE_FROM_NODE(sflist, __sl, __sn)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list, from a node in the list Note: the loop is unsafe and thus __sn should not be removed. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_ITERATE_FROM_NODE(l, n) {
    &lt;user code&gt;
}
</verbatim> Like <ref refid="group__flagged-single-linked-list__apis_1gaa3e9a3eeef7ecca012b0926fb2758c01" kindref="member">SYS_SFLIST_FOR_EACH_NODE()</ref>, but __dn already contains a node in the list where to start searching for the next entry from. If NULL, it starts from the head.</para>
<para>This and other SYS_SFLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer to peek each node of the list it contains the starting node, or NULL to start from the head </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="92" column="9" bodyfile="include/sys/sflist.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1gabe867ebba43f1f0ebd2441147a9e3d3d" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_NODE_SAFE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__sn</defname></param>
        <param><defname>__sns</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_NODE_SAFE(sflist, __sl, __sn, __sns)</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list Note: __sn can be removed, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_NODE_SAFE(l, n, s) {
    &lt;user code&gt;
}
</verbatim> This and other SYS_SFLIST_*() macros are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sn</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer to peek each node of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__sns</parametername>
</parameternamelist>
<parameterdescription>
<para>A sys_sfnode_t pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="111" column="9" bodyfile="include/sys/sflist.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga68dae6db03b52bc27777a2b8c274a852" prot="public" static="no">
        <name>SYS_SFLIST_CONTAINER</name>
        <param><defname>__ln</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_CONTAINER(__ln, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="122" column="9" bodyfile="include/sys/sflist.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga2c339b75ed80f3a94b0419ac73f18682" prot="public" static="no">
        <name>SYS_SFLIST_PEEK_HEAD_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_HEAD_CONTAINER(sflist, __sl, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="132" column="9" bodyfile="include/sys/sflist.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga73760da17d0daefe655bbd750a3ce3e8" prot="public" static="no">
        <name>SYS_SFLIST_PEEK_TAIL_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_TAIL_CONTAINER(sflist, __sl, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="142" column="9" bodyfile="include/sys/sflist.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga0ba4b870acea3a10a1be066fb1d769c8" prot="public" static="no">
        <name>SYS_SFLIST_PEEK_NEXT_CONTAINER</name>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_PEEK_NEXT_CONTAINER(sflist, __cn, __n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="151" column="9" bodyfile="include/sys/sflist.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga1db228cdfd8004738fc6c4d2430be0cc" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_CONTAINER</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_CONTAINER(sflist, __sl, __cn, __n)</initializer>
        <briefdescription>
<para>Provide the primitive to iterate on a list under a container Note: the loop is unsafe and thus __cn should not be detached. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_CONTAINER(l, c, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_sfnode_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="168" column="9" bodyfile="include/sys/sflist.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga6b33a7b2be024c0e243f5bbccf900e81" prot="public" static="no">
        <name>SYS_SFLIST_FOR_EACH_CONTAINER_SAFE</name>
        <param><defname>__sl</defname></param>
        <param><defname>__cn</defname></param>
        <param><defname>__cns</defname></param>
        <param><defname>__n</defname></param>
        <initializer>	Z_GENLIST_FOR_EACH_CONTAINER_SAFE(sflist, __sl, __cn, __cns, __n)</initializer>
        <briefdescription>
<para>Provide the primitive to safely iterate on a list under a container Note: __cn can be detached, it will not break the loop. </para>
        </briefdescription>
        <detaileddescription>
<para>User <emphasis>MUST</emphasis> add the loop statement curly braces enclosing its own code: <verbatim>SYS_SFLIST_FOR_EACH_NODE_SAFE(l, c, cn, n) {
    &lt;user code&gt;
}
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>__sl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on a sys_sflist_t to iterate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cn</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to peek each entry of the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__cns</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer for the loop to run safely </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>__n</parametername>
</parameternamelist>
<parameterdescription>
<para>The field name of sys_sfnode_t within the container struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="186" column="9" bodyfile="include/sys/sflist.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga892d5c9ce2d89b04f0ce15a88eefed71" prot="public" static="no">
        <name>SYS_SFLIST_STATIC_INIT</name>
        <param><defname>ptr_to_list</defname></param>
        <initializer>{NULL, NULL}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="208" column="9" bodyfile="include/sys/sflist.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__flagged-single-linked-list__apis_1ga46e57329036b76ab03267d2e9258d5c2" prot="public" static="no">
        <name>SYS_SFLIST_FLAGS_MASK</name>
        <initializer>0x3UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="209" column="9" bodyfile="include/sys/sflist.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sflist_8h_1a5f0d5529e0d52d1a0d3c9594fadff48c" prot="public" static="no">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>typedef uint32_t unative_t</definition>
        <argsstring></argsstring>
        <name>unative_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="32" column="18" bodyfile="include/sys/sflist.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" prot="public" static="no">
        <type>struct _sfnode</type>
        <definition>typedef struct _sfnode sys_sfnode_t</definition>
        <argsstring></argsstring>
        <name>sys_sfnode_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="39" column="22" bodyfile="include/sys/sflist.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sflist_8h_1a9e7f835170787303732c805dc7375f66" prot="public" static="no">
        <type>struct _sflist</type>
        <definition>typedef struct _sflist sys_sflist_t</definition>
        <argsstring></argsstring>
        <name>sys_sflist_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="46" column="22" bodyfile="include/sys/sflist.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga9597045ad20485fd88a0fec83fe1ffe1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_init</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_init</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Initialize a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="202" column="20" bodyfile="include/sys/sflist.h" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga0e258c1faa3cbaee48c29e8f2c11132b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t sys_sfnode_flags_get</definition>
        <argsstring>(sys_sfnode_t *node)</argsstring>
        <name>sys_sfnode_flags_get</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Fetch flags value for a particular sfnode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the node to fetch flags from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of flags, which will be between 0 and 3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="270" column="23" bodyfile="include/sys/sflist.h" bodystart="270" bodyend="273" declfile="include/sys/sflist.h" declline="216" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga6c993728bebb604f966cdc944939642e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_head</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_peek_head</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Peek the first node from the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A point on the list to peek the first node from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer on the first node of the list (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="243" column="28" bodyfile="include/sys/sflist.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gabf278ac7912180fc50a25c0ebddc093c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_tail</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_peek_tail</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Peek the last node from the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A point on the list to peek the last node from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer on the last node of the list (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="255" column="28" bodyfile="include/sys/sflist.h" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gae56469b67ad7a92363d04ac726e326ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sfnode_init</definition>
        <argsstring>(sys_sfnode_t *node, uint8_t flags)</argsstring>
        <name>sys_sfnode_init</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Initialize an sflist node. </para>
        </briefdescription>
        <detaileddescription>
<para>Set an initial flags value for this slist node, which can be a value between 0 and 3. These flags will persist even if the node is moved around within a list, removed, or transplanted to a different slist.</para>
<para>This is ever so slightly faster than <ref refid="group__flagged-single-linked-list__apis_1ga85d82a3a5927f79a5f5655cb3405ce95" kindref="member">sys_sfnode_flags_set()</ref> and should only be used on a node that hasn&apos;t been added to any list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the node to set the flags on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A value between 0 and 3 to set the flags value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="288" column="20" bodyfile="include/sys/sflist.h" bodystart="288" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga85d82a3a5927f79a5f5655cb3405ce95" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sfnode_flags_set</definition>
        <argsstring>(sys_sfnode_t *node, uint8_t flags)</argsstring>
        <name>sys_sfnode_flags_set</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set flags value for an sflist node. </para>
        </briefdescription>
        <detaileddescription>
<para>Set a flags value for this slist node, which can be a value between 0 and 3. These flags will persist even if the node is moved around within a list, removed, or transplanted to a different slist.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the node to set the flags on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A value between 0 and 3 to set the flags value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="304" column="20" bodyfile="include/sys/sflist.h" bodystart="304" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gac506235a9df89a7a52631e9990ceaad5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_sflist_is_empty</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_is_empty</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Test if the given list is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to test</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean, true if it&apos;s empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="323" column="22" bodyfile="include/sys/sflist.h" bodystart="323" bodyend="323" declfile="include/sys/sflist.h" declline="321" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gaa67d15dd4fb28dbbc64f4b0e8e21455e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_next_no_check</definition>
        <argsstring>(sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_peek_next_no_check</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Peek the next node from current node, node is not NULL. </para>
        </briefdescription>
        <detaileddescription>
<para>Faster then <ref refid="group__flagged-single-linked-list__apis_1ga514b41f1af89f3f08e216cfede7d5605" kindref="member">sys_sflist_peek_next()</ref> if node is known not to be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node where to peek the next node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer on the next node (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="336" column="31" bodyfile="include/sys/sflist.h" bodystart="336" bodyend="336" declfile="include/sys/sflist.h" declline="334" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga514b41f1af89f3f08e216cfede7d5605" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_peek_next</definition>
        <argsstring>(sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_peek_next</name>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Peek the next node from current node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node where to peek the next node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer on the next node (or NULL if none) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="347" column="31" bodyfile="include/sys/sflist.h" bodystart="347" bodyend="347" declfile="include/sys/sflist.h" declline="345" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga824ff283c821b6f392ebd81516b65712" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_prepend</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_prepend</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Prepend a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to prepend </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="360" column="22" bodyfile="include/sys/sflist.h" bodystart="360" bodyend="360" declfile="include/sys/sflist.h" declline="357" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga77733972e39b7db9fc3dcc998261fb2d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_append</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_append</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Append a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="373" column="22" bodyfile="include/sys/sflist.h" bodystart="373" bodyend="373" declfile="include/sys/sflist.h" declline="370" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gaaf9512d6c4432f34347771c9887e678a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_append_list</definition>
        <argsstring>(sys_sflist_t *list, void *head, void *tail)</argsstring>
        <name>sys_sflist_append_list</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
<para>Append a list to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>Append a singly-linked, NULL-terminated list consisting of nodes containing the pointer to the next node as the first element of a node, to <emphasis>list</emphasis>. This and other sys_sflist_*() functions are not thread safe.</para>
<para>FIXME: Why are the element parameters void *?</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the first element of the list to append </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the last element of the list to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="391" column="22" bodyfile="include/sys/sflist.h" bodystart="391" bodyend="391" declfile="include/sys/sflist.h" declline="388" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga6c68678fceb6127a34760fb04ddef8b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_merge_sflist</definition>
        <argsstring>(sys_sflist_t *list, sys_sflist_t *list_to_append)</argsstring>
        <name>sys_sflist_merge_sflist</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list_to_append</declname>
        </param>
        <briefdescription>
<para>merge two sflists, appending the second one to the first </para>
        </briefdescription>
        <detaileddescription>
<para>When the operation is completed, the appending list is empty. This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list_to_append</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the list to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="405" column="22" bodyfile="include/sys/sflist.h" bodystart="405" bodyend="405" declfile="include/sys/sflist.h" declline="402" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga8983c5704eb149b0941f1fb19f79b8c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_insert</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *prev, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_insert</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Insert a node to the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the previous node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="420" column="22" bodyfile="include/sys/sflist.h" bodystart="420" bodyend="420" declfile="include/sys/sflist.h" declline="416" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga065a7968e8082b65f9344a6331b424fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_get_not_empty</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_get_not_empty</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Fetch and remove the first node of the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>List must be known to be non-empty. This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first node of the list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="434" column="31" bodyfile="include/sys/sflist.h" bodystart="434" bodyend="434" declfile="include/sys/sflist.h" declline="432" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga124d4dbb8d6d554071cb5eac2585b4ac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
        <definition>static sys_sfnode_t * sys_sflist_get</definition>
        <argsstring>(sys_sflist_t *list)</argsstring>
        <name>sys_sflist_get</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Fetch and remove the first node of the given list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the first node of the list (or NULL if empty) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="447" column="31" bodyfile="include/sys/sflist.h" bodystart="447" bodyend="447" declfile="include/sys/sflist.h" declline="445" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1ga66c716ef7495fcb04ea60aac340dc5ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sys_sflist_remove</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *prev_node, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_remove</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>prev_node</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Remove a node. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the previous node (can be NULL, which means the node is the list&apos;s head) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="463" column="22" bodyfile="include/sys/sflist.h" bodystart="463" bodyend="463" declfile="include/sys/sflist.h" declline="459" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__flagged-single-linked-list__apis_1gad66348fe7677cca76a547e09c8354322" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>static bool sys_sflist_find_and_remove</definition>
        <argsstring>(sys_sflist_t *list, sys_sfnode_t *node)</argsstring>
        <name>sys_sflist_find_and_remove</name>
        <param>
          <type><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Find and remove a node from a list. </para>
        </briefdescription>
        <detaileddescription>
<para>This and other sys_sflist_*() functions are not thread safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the list to affect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the node to remove from the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if node was removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sys/sflist.h" line="478" column="22" bodyfile="include/sys/sflist.h" bodystart="478" bodyend="478" declfile="include/sys/sflist.h" declline="475" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Single-linked list implementation. </para>
    </briefdescription>
    <detaileddescription>
<para>Single-linked list implementation using inline macros/functions. This API is not thread safe, and thus if a list is used across threads, calls to functions must be protected with synchronization primitives. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_SYS_SFLIST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_SYS_SFLIST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdbool_8h" kindref="compound">stdbool.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="____assert_8h" kindref="compound">sys/__assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="list__gen_8h" kindref="compound">list_gen.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__LP64__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a2095b9bffea4b2656950c6c0419edbf1" kindref="member">uint64_t</ref><sp/><ref refid="sflist_8h_1a5f0d5529e0d52d1a0d3c9594fadff48c" kindref="member">unative_t</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="sflist_8h_1a5f0d5529e0d52d1a0d3c9594fadff48c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref><sp/><ref refid="sflist_8h_1a5f0d5529e0d52d1a0d3c9594fadff48c" kindref="member">unative_t</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_sfnode<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a5f0d5529e0d52d1a0d3c9594fadff48c" kindref="member">unative_t</ref><sp/>next_and_flags;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_sfnode<sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_sflist<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*head;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*tail;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_sflist<sp/><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group__flagged-single-linked-list__apis_1gaa3e9a3eeef7ecca012b0926fb2758c01" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_FOR_EACH_NODE(__sl,<sp/>__sn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_FOR_EACH_NODE(sflist,<sp/>__sl,<sp/>__sn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="group__flagged-single-linked-list__apis_1ga0470a27a54ed20eec35baa6cacd6a5ff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_ITERATE_FROM_NODE(__sl,<sp/>__sn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_ITERATE_FROM_NODE(sflist,<sp/>__sl,<sp/>__sn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="group__flagged-single-linked-list__apis_1gabe867ebba43f1f0ebd2441147a9e3d3d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_FOR_EACH_NODE_SAFE(__sl,<sp/>__sn,<sp/>__sns)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_FOR_EACH_NODE_SAFE(sflist,<sp/>__sl,<sp/>__sn,<sp/>__sns)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Provide<sp/>the<sp/>primitive<sp/>to<sp/>resolve<sp/>the<sp/>container<sp/>of<sp/>a<sp/>list<sp/>node</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>Note:<sp/>it<sp/>is<sp/>safe<sp/>to<sp/>use<sp/>with<sp/>NULL<sp/>pointer<sp/>nodes</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>@param<sp/>__ln<sp/>A<sp/>pointer<sp/>on<sp/>a<sp/>sys_sfnode_t<sp/>to<sp/>get<sp/>its<sp/>container</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@param<sp/>__cn<sp/>Container<sp/>struct<sp/>type<sp/>pointer</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@param<sp/>__n<sp/>The<sp/>field<sp/>name<sp/>of<sp/>sys_sfnode_t<sp/>within<sp/>the<sp/>container<sp/>struct</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="group__flagged-single-linked-list__apis_1ga68dae6db03b52bc27777a2b8c274a852" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_CONTAINER(__ln,<sp/>__cn,<sp/>__n)<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_CONTAINER(__ln,<sp/>__cn,<sp/>__n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Provide<sp/>the<sp/>primitive<sp/>to<sp/>peek<sp/>container<sp/>of<sp/>the<sp/>list<sp/>head</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@param<sp/>__sl<sp/>A<sp/>pointer<sp/>on<sp/>a<sp/>sys_sflist_t<sp/>to<sp/>peek</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param<sp/>__cn<sp/>Container<sp/>struct<sp/>type<sp/>pointer</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@param<sp/>__n<sp/>The<sp/>field<sp/>name<sp/>of<sp/>sys_sfnode_t<sp/>within<sp/>the<sp/>container<sp/>struct</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group__flagged-single-linked-list__apis_1ga2c339b75ed80f3a94b0419ac73f18682" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_PEEK_HEAD_CONTAINER(__sl,<sp/>__cn,<sp/>__n)<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_PEEK_HEAD_CONTAINER(sflist,<sp/>__sl,<sp/>__cn,<sp/>__n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Provide<sp/>the<sp/>primitive<sp/>to<sp/>peek<sp/>container<sp/>of<sp/>the<sp/>list<sp/>tail</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@param<sp/>__sl<sp/>A<sp/>pointer<sp/>on<sp/>a<sp/>sys_sflist_t<sp/>to<sp/>peek</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param<sp/>__cn<sp/>Container<sp/>struct<sp/>type<sp/>pointer</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param<sp/>__n<sp/>The<sp/>field<sp/>name<sp/>of<sp/>sys_sfnode_t<sp/>within<sp/>the<sp/>container<sp/>struct</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group__flagged-single-linked-list__apis_1ga73760da17d0daefe655bbd750a3ce3e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_PEEK_TAIL_CONTAINER(__sl,<sp/>__cn,<sp/>__n)<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_PEEK_TAIL_CONTAINER(sflist,<sp/>__sl,<sp/>__cn,<sp/>__n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Provide<sp/>the<sp/>primitive<sp/>to<sp/>peek<sp/>the<sp/>next<sp/>container</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@param<sp/>__cn<sp/>Container<sp/>struct<sp/>type<sp/>pointer</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@param<sp/>__n<sp/>The<sp/>field<sp/>name<sp/>of<sp/>sys_sfnode_t<sp/>within<sp/>the<sp/>container<sp/>struct</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="group__flagged-single-linked-list__apis_1ga0ba4b870acea3a10a1be066fb1d769c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_PEEK_NEXT_CONTAINER(__cn,<sp/>__n)<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_PEEK_NEXT_CONTAINER(sflist,<sp/>__cn,<sp/>__n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="group__flagged-single-linked-list__apis_1ga1db228cdfd8004738fc6c4d2430be0cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_FOR_EACH_CONTAINER(__sl,<sp/>__cn,<sp/>__n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_FOR_EACH_CONTAINER(sflist,<sp/>__sl,<sp/>__cn,<sp/>__n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="group__flagged-single-linked-list__apis_1ga6b33a7b2be024c0e243f5bbccf900e81" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_FOR_EACH_CONTAINER_SAFE(__sl,<sp/>__cn,<sp/>__cns,<sp/>__n)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z_GENLIST_FOR_EACH_CONTAINER_SAFE(sflist,<sp/>__sl,<sp/>__cn,<sp/>__cns,<sp/>__n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>Required<sp/>function<sp/>definitions<sp/>for<sp/>the<sp/>list_gen.h<sp/>interface</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>These<sp/>are<sp/>the<sp/>only<sp/>functions<sp/>that<sp/>do<sp/>not<sp/>treat<sp/>the<sp/>list/node<sp/>pointers</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>as<sp/>completely<sp/>opaque<sp/>types.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="group__flagged-single-linked-list__apis_1ga9597045ad20485fd88a0fec83fe1ffe1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1ga9597045ad20485fd88a0fec83fe1ffe1" kindref="member">sys_sflist_init</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="group__flagged-single-linked-list__apis_1ga892d5c9ce2d89b04f0ce15a88eefed71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_STATIC_INIT(ptr_to_list)<sp/>{NULL,<sp/>NULL}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="group__flagged-single-linked-list__apis_1ga46e57329036b76ab03267d2e9258d5c2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_SFLIST_FLAGS_MASK<sp/><sp/><sp/>0x3UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*z_sfnode_next_peek(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*)(node-&gt;next_and_flags<sp/>&amp;<sp/>~SYS_SFLIST_FLAGS_MASK);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__flagged-single-linked-list__apis_1ga0e258c1faa3cbaee48c29e8f2c11132b" kindref="member">sys_sfnode_flags_get</ref>(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_sfnode_next_set(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*parent,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*child)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>cur_flags<sp/>=<sp/><ref refid="group__flagged-single-linked-list__apis_1ga0e258c1faa3cbaee48c29e8f2c11132b" kindref="member">sys_sfnode_flags_get</ref>(parent);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;next_and_flags<sp/>=<sp/>cur_flags<sp/>|<sp/>(<ref refid="sflist_8h_1a5f0d5529e0d52d1a0d3c9594fadff48c" kindref="member">unative_t</ref>)child;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_sflist_head_set(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,<sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;head<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>z_sflist_tail_set(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,<sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;tail<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="group__flagged-single-linked-list__apis_1ga6c993728bebb604f966cdc944939642e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*<ref refid="group__flagged-single-linked-list__apis_1ga6c993728bebb604f966cdc944939642e" kindref="member">sys_sflist_peek_head</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list-&gt;head;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group__flagged-single-linked-list__apis_1gabf278ac7912180fc50a25c0ebddc093c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*<ref refid="group__flagged-single-linked-list__apis_1gabf278ac7912180fc50a25c0ebddc093c" kindref="member">sys_sflist_peek_tail</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list-&gt;tail;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>APIs<sp/>specific<sp/>to<sp/>sflist<sp/>type</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="group__flagged-single-linked-list__apis_1ga0e258c1faa3cbaee48c29e8f2c11132b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__flagged-single-linked-list__apis_1ga0e258c1faa3cbaee48c29e8f2c11132b" kindref="member">sys_sfnode_flags_get</ref>(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;next_and_flags<sp/>&amp;<sp/><ref refid="group__flagged-single-linked-list__apis_1ga46e57329036b76ab03267d2e9258d5c2" kindref="member">SYS_SFLIST_FLAGS_MASK</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="group__flagged-single-linked-list__apis_1gae56469b67ad7a92363d04ac726e326ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1gae56469b67ad7a92363d04ac726e326ea" kindref="member">sys_sfnode_init</ref>(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>~<ref refid="group__flagged-single-linked-list__apis_1ga46e57329036b76ab03267d2e9258d5c2" kindref="member">SYS_SFLIST_FLAGS_MASK</ref>)<sp/>==<sp/>0UL,<sp/></highlight><highlight class="stringliteral">&quot;flags<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;next_and_flags<sp/>=<sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="group__flagged-single-linked-list__apis_1ga85d82a3a5927f79a5f5655cb3405ce95" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1ga85d82a3a5927f79a5f5655cb3405ce95" kindref="member">sys_sfnode_flags_set</ref>(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node,<sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASSERT((<ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref><sp/>&amp;<sp/>~<ref refid="group__flagged-single-linked-list__apis_1ga46e57329036b76ab03267d2e9258d5c2" kindref="member">SYS_SFLIST_FLAGS_MASK</ref>)<sp/>==<sp/>0UL,<sp/></highlight><highlight class="stringliteral">&quot;flags<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;next_and_flags<sp/>=<sp/>(<ref refid="sflist_8h_1a5f0d5529e0d52d1a0d3c9594fadff48c" kindref="member">unative_t</ref>)(z_sfnode_next_peek(node))<sp/>|<sp/><ref refid="http__parser_8h_1ab6b306ef981f5e21bb41ea2c2dbe8cd9" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>Derived,<sp/>generated<sp/>APIs</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1gac506235a9df89a7a52631e9990ceaad5" kindref="member">sys_sflist_is_empty</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="group__flagged-single-linked-list__apis_1gac506235a9df89a7a52631e9990ceaad5" refkind="member"><highlight class="normal">Z_GENLIST_IS_EMPTY(sflist)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*<ref refid="group__flagged-single-linked-list__apis_1gaa67d15dd4fb28dbbc64f4b0e8e21455e" kindref="member">sys_sflist_peek_next_no_check</ref>(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="group__flagged-single-linked-list__apis_1gaa67d15dd4fb28dbbc64f4b0e8e21455e" refkind="member"><highlight class="normal">Z_GENLIST_PEEK_NEXT_NO_CHECK(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*<ref refid="group__flagged-single-linked-list__apis_1ga514b41f1af89f3f08e216cfede7d5605" kindref="member">sys_sflist_peek_next</ref>(<ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="group__flagged-single-linked-list__apis_1ga514b41f1af89f3f08e216cfede7d5605" refkind="member"><highlight class="normal">Z_GENLIST_PEEK_NEXT(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1ga824ff283c821b6f392ebd81516b65712" kindref="member">sys_sflist_prepend</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="group__flagged-single-linked-list__apis_1ga824ff283c821b6f392ebd81516b65712" refkind="member"><highlight class="normal">Z_GENLIST_PREPEND(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1ga77733972e39b7db9fc3dcc998261fb2d" kindref="member">sys_sflist_append</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="group__flagged-single-linked-list__apis_1ga77733972e39b7db9fc3dcc998261fb2d" refkind="member"><highlight class="normal">Z_GENLIST_APPEND(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1gaaf9512d6c4432f34347771c9887e678a" kindref="member">sys_sflist_append_list</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*head,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tail);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="group__flagged-single-linked-list__apis_1gaaf9512d6c4432f34347771c9887e678a" refkind="member"><highlight class="normal">Z_GENLIST_APPEND_LIST(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1ga6c68678fceb6127a34760fb04ddef8b0" kindref="member">sys_sflist_merge_sflist</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list_to_append);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="group__flagged-single-linked-list__apis_1ga6c68678fceb6127a34760fb04ddef8b0" refkind="member"><highlight class="normal">Z_GENLIST_MERGE_LIST(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1ga8983c5704eb149b0941f1fb19f79b8c1" kindref="member">sys_sflist_insert</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*prev,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="group__flagged-single-linked-list__apis_1ga8983c5704eb149b0941f1fb19f79b8c1" refkind="member"><highlight class="normal">Z_GENLIST_INSERT(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*<ref refid="group__flagged-single-linked-list__apis_1ga065a7968e8082b65f9344a6331b424fc" kindref="member">sys_sflist_get_not_empty</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="group__flagged-single-linked-list__apis_1ga065a7968e8082b65f9344a6331b424fc" refkind="member"><highlight class="normal">Z_GENLIST_GET_NOT_EMPTY(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*<ref refid="group__flagged-single-linked-list__apis_1ga124d4dbb8d6d554071cb5eac2585b4ac" kindref="member">sys_sflist_get</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="group__flagged-single-linked-list__apis_1ga124d4dbb8d6d554071cb5eac2585b4ac" refkind="member"><highlight class="normal">Z_GENLIST_GET(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1ga66c716ef7495fcb04ea60aac340dc5ed" kindref="member">sys_sflist_remove</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*prev_node,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="group__flagged-single-linked-list__apis_1ga66c716ef7495fcb04ea60aac340dc5ed" refkind="member"><highlight class="normal">Z_GENLIST_REMOVE(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__flagged-single-linked-list__apis_1gad66348fe7677cca76a547e09c8354322" kindref="member">sys_sflist_find_and_remove</ref>(<ref refid="sflist_8h_1a9e7f835170787303732c805dc7375f66" kindref="member">sys_sflist_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sflist_8h_1a02dabbe35036cbc11fbbefa99a129cc7" kindref="member">sys_sfnode_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="group__flagged-single-linked-list__apis_1gad66348fe7677cca76a547e09c8354322" refkind="member"><highlight class="normal">Z_GENLIST_FIND_AND_REMOVE(sflist,<sp/>sfnode)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_SYS_SFLIST_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sys/sflist.h"/>
  </compounddef>
</doxygen>
