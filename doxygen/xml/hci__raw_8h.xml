<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="hci__raw_8h" kind="file" language="C++">
    <compoundname>hci_raw.h</compoundname>
    <innerclass refid="structbt__hci__raw__cmd__ext" prot="public">bt_hci_raw_cmd_ext</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__hci__raw_1ga3362c6f543530ee2e84033289cc338dc" prot="public" static="no">
        <name>BT_HCI_ERR_EXT_HANDLED</name>
        <initializer>0xff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="70" column="9" bodyfile="include/bluetooth/hci_raw.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__hci__raw_1gafba7e7bb992c0e58f692e7548fd70d7a" prot="public" static="no">
        <name>BT_HCI_RAW_CMD_EXT</name>
        <param><defname>_op</defname></param>
        <param><defname>_min_len</defname></param>
        <param><defname>_func</defname></param>
        <initializer>	{ \
		.op = _op, \
		.min_len = _min_len, \
		.func = _func, \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper macro to define a command extension</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Opcode of the command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_min_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimal length of the command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Handler function to be called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="78" column="9" bodyfile="include/bluetooth/hci_raw.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__hci__raw_1gabe974f22edeef8189603ba75fd90ff3c" prot="public" static="no" strong="no">
        <type></type>
        <name>@77</name>
        <enumvalue id="group__hci__raw_1ggabe974f22edeef8189603ba75fd90ff3caef221882801448593d4e2771305e5c12" prot="public">
          <name>BT_HCI_RAW_MODE_PASSTHROUGH</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Passthrough mode <verbatim>    While in this mode the buffers are passed as is between the stack
    and the driver.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__hci__raw_1ggabe974f22edeef8189603ba75fd90ff3ca3b9f471e60e3e295c2e687811fb2a0b2" prot="public">
          <name>BT_HCI_RAW_MODE_H4</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>H:4 mode <verbatim>    While in this mode H:4 headers will added into the buffers
    according to the buffer type when coming from the stack and will be
    removed and used to set the buffer type.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="35" column="1" bodyfile="include/bluetooth/hci_raw.h" bodystart="35" bodyend="50"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__hci__raw_1ga8de934e01eb9a16a3c9d096151e58313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_send</definition>
        <argsstring>(struct net_buf *buf)</argsstring>
        <name>bt_send</name>
        <param>
          <type>struct <ref refid="structnet__buf" kindref="compound">net_buf</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Send packet to the Bluetooth controller. </para>
        </briefdescription>
        <detaileddescription>
<para>Send packet to the Bluetooth controller. Caller needs to implement netbuf pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>netbuf packet to be send</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="33" column="5" declfile="include/bluetooth/hci_raw.h" declline="33" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__hci__raw_1gaeac8c91975e3385b56c5e4b957a5c0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_hci_raw_set_mode</definition>
        <argsstring>(uint8_t mode)</argsstring>
        <name>bt_hci_raw_set_mode</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set Bluetooth RAW channel mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Set access mode of Bluetooth RAW channel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Access mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="60" column="5" declfile="include/bluetooth/hci_raw.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__hci__raw_1gaa6bdef963d4d62dab1df6975453eb761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
        <definition>uint8_t bt_hci_raw_get_mode</definition>
        <argsstring>(void)</argsstring>
        <name>bt_hci_raw_get_mode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get Bluetooth RAW channel mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Get access mode of Bluetooth RAW channel.</para>
<para><simplesect kind="return"><para>Access mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="68" column="9" declfile="include/bluetooth/hci_raw.h" declline="68" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__hci__raw_1ga9ebd7ac0d9779b52dc971f43158eacdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bt_hci_raw_cmd_ext_register</definition>
        <argsstring>(struct bt_hci_raw_cmd_ext *cmds, size_t size)</argsstring>
        <name>bt_hci_raw_cmd_ext_register</name>
        <param>
          <type>struct <ref refid="structbt__hci__raw__cmd__ext" kindref="compound">bt_hci_raw_cmd_ext</ref> *</type>
          <declname>cmds</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Register Bluetooth RAW command extension table. </para>
        </briefdescription>
        <detaileddescription>
<para>Register Bluetooth RAW channel command extension table, opcodes in this table are intercepted to sent to the handler function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmds</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the command extension table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the command extension table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="114" column="6" declfile="include/bluetooth/hci_raw.h" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__hci__raw_1gaae30308fe69b1b2fd2972dbcd5a34d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bt_enable_raw</definition>
        <argsstring>(struct k_fifo *rx_queue)</argsstring>
        <name>bt_enable_raw</name>
        <param>
          <type>struct <ref refid="structk__fifo" kindref="compound">k_fifo</ref> *</type>
          <declname>rx_queue</declname>
        </param>
        <briefdescription>
<para>Enable Bluetooth RAW channel: </para>
        </briefdescription>
        <detaileddescription>
<para>Enable Bluetooth RAW HCI channel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rx_queue</parametername>
</parameternamelist>
<parameterdescription>
<para>netbuf queue where HCI packets received from the Bluetooth controller are to be queued. The queue is defined in the caller while the available buffers pools are handled in the stack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success or (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/bluetooth/hci_raw.h" line="126" column="5" declfile="include/bluetooth/hci_raw.h" declline="126" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bluetooth HCI RAW channel handling. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Intel<sp/>Corporation</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEPHYR_INCLUDE_BLUETOOTH_HCI_RAW_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEPHYR_INCLUDE_BLUETOOTH_HCI_RAW_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="group__hci__raw_1ga8de934e01eb9a16a3c9d096151e58313" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__hci__raw_1ga8de934e01eb9a16a3c9d096151e58313" kindref="member">bt_send</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41" refid="group__hci__raw_1ggabe974f22edeef8189603ba75fd90ff3caef221882801448593d4e2771305e5c12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__hci__raw_1ggabe974f22edeef8189603ba75fd90ff3caef221882801448593d4e2771305e5c12" kindref="member">BT_HCI_RAW_MODE_PASSTHROUGH</ref><sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__hci__raw_1ggabe974f22edeef8189603ba75fd90ff3ca3b9f471e60e3e295c2e687811fb2a0b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__hci__raw_1ggabe974f22edeef8189603ba75fd90ff3ca3b9f471e60e3e295c2e687811fb2a0b2" kindref="member">BT_HCI_RAW_MODE_H4</ref><sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group__hci__raw_1gaeac8c91975e3385b56c5e4b957a5c0db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__hci__raw_1gaeac8c91975e3385b56c5e4b957a5c0db" kindref="member">bt_hci_raw_set_mode</ref>(<ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="group__hci__raw_1gaa6bdef963d4d62dab1df6975453eb761" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><ref refid="group__hci__raw_1gaa6bdef963d4d62dab1df6975453eb761" kindref="member">bt_hci_raw_get_mode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__hci__raw_1ga3362c6f543530ee2e84033289cc338dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_HCI_ERR_EXT_HANDLED<sp/><sp/>0xff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__hci__raw_1gafba7e7bb992c0e58f692e7548fd70d7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BT_HCI_RAW_CMD_EXT(_op,<sp/>_min_len,<sp/>_func)<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.op<sp/>=<sp/>_op,<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min_len<sp/>=<sp/>_min_len,<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.func<sp/>=<sp/>_func,<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structbt__hci__raw__cmd__ext" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbt__hci__raw__cmd__ext" kindref="compound">bt_hci_raw_cmd_ext</ref><sp/>{</highlight></codeline>
<codeline lineno="87" refid="structbt__hci__raw__cmd__ext_1a3b6fb18d5fabcc5f10265d9de3e46c48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a5debae8b2a1ec20a6694c0c443ee399e" kindref="member">uint16_t</ref><sp/><sp/><ref refid="structbt__hci__raw__cmd__ext_1a3b6fb18d5fabcc5f10265d9de3e46c48" kindref="member">op</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structbt__hci__raw__cmd__ext_1a04041d07145923ffb7116136e3c70ffa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbt__hci__raw__cmd__ext_1a04041d07145923ffb7116136e3c70ffa" kindref="member">min_len</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structbt__hci__raw__cmd__ext_1a364aa7239debd06655d7e51f2eb28ee5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref><sp/><sp/><sp/>(*<ref refid="structbt__hci__raw__cmd__ext_1a364aa7239debd06655d7e51f2eb28ee5" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnet__buf" kindref="compound">net_buf</ref><sp/>*buf);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="group__hci__raw_1ga9ebd7ac0d9779b52dc971f43158eacdd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__hci__raw_1ga9ebd7ac0d9779b52dc971f43158eacdd" kindref="member">bt_hci_raw_cmd_ext_register</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structbt__hci__raw__cmd__ext" kindref="compound">bt_hci_raw_cmd_ext</ref><sp/>*cmds,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnet__buf_1a1522d81a002804223e25300a6961f527" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="group__hci__raw_1gaae30308fe69b1b2fd2972dbcd5a34d9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__hci__raw_1gaae30308fe69b1b2fd2972dbcd5a34d9f" kindref="member">bt_enable_raw</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structk__fifo" kindref="compound">k_fifo</ref><sp/>*rx_queue);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ZEPHYR_INCLUDE_BLUETOOTH_HCI_RAW_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/bluetooth/hci_raw.h"/>
  </compounddef>
</doxygen>
