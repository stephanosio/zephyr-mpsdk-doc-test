<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group____usb__device__core__api" kind="group">
    <compoundname>_usb_device_core_api</compoundname>
    <title>USB Device Core API</title>
    <innerclass refid="structusb__ep__cfg__data" prot="public">usb_ep_cfg_data</innerclass>
    <innerclass refid="structusb__interface__cfg__data" prot="public">usb_interface_cfg_data</innerclass>
    <innerclass refid="structusb__cfg__data" prot="public">usb_cfg_data</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group____usb__device__core__api_1ga9a45db26a9be295640ed122533427725" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* usb_ep_callback) (uint8_t ep, enum usb_dc_ep_cb_status_code cb_status)</definition>
        <argsstring>)(uint8_t ep, enum usb_dc_ep_cb_status_code cb_status)</argsstring>
        <name>usb_ep_callback</name>
        <briefdescription>
<para>Callback function signature for the USB Endpoint status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="100" column="9" bodyfile="include/usb/usb_device.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group____usb__device__core__api_1gaddacbff094a41c885c3041af72fa6804" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* usb_request_handler) (struct usb_setup_packet *setup, int32_t *transfer_len, uint8_t **payload_data)</definition>
        <argsstring>)(struct usb_setup_packet *setup, int32_t *transfer_len, uint8_t **payload_data)</argsstring>
        <name>usb_request_handler</name>
        <briefdescription>
<para>Callback function signature for class specific requests. </para>
        </briefdescription>
        <detaileddescription>
<para>Function which handles Class specific requests corresponding to an interface number specified in the device descriptor table. For host to device direction the &apos;len&apos; and &apos;payload_data&apos; contain the length of the received data and the pointer to the received data respectively. For device to host class requests, &apos;len&apos; and &apos;payload_data&apos; should be set by the callback function with the length and the address of the data to be transmitted buffer respectively. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="114" column="9" bodyfile="include/usb/usb_device.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group____usb__device__core__api_1ga3439af9464471b3acdc21f4359efb53a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* usb_interface_config) (struct usb_desc_header *head, uint8_t bInterfaceNumber)</definition>
        <argsstring>)(struct usb_desc_header *head, uint8_t bInterfaceNumber)</argsstring>
        <name>usb_interface_config</name>
        <briefdescription>
<para>Function for interface runtime configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="120" column="9" bodyfile="include/usb/usb_device.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group____usb__device__core__api_1ga2e599eb20f647d9bb2369d76a7dc51db" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* usb_transfer_callback) (uint8_t ep, int tsize, void *priv)</definition>
        <argsstring>)(uint8_t ep, int tsize, void *priv)</argsstring>
        <name>usb_transfer_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function signature for transfer completion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="353" column="9" bodyfile="include/usb/usb_device.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group____usb__device__core__api_1ga28783e727e35db1a651309a7f9f5444a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_set_config</definition>
        <argsstring>(const uint8_t *usb_descriptor)</argsstring>
        <name>usb_set_config</name>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>usb_descriptor</declname>
        </param>
        <briefdescription>
<para>Configure USB controller. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to configure USB controller. Configuration parameters must be valid or an error is returned</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">usb_descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>USB descriptor table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="210" column="5" declfile="include/usb/usb_device.h" declline="210" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga2d485c77055dd975f3170fbaea7f2bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_deconfig</definition>
        <argsstring>(void)</argsstring>
        <name>usb_deconfig</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Deconfigure USB controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the USB device to it&apos;s initial state</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="219" column="5" declfile="include/usb/usb_device.h" declline="219" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1gad1fa5e491d93c2bd1fe7967c12148902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_enable</definition>
        <argsstring>(usb_dc_status_callback status_cb)</argsstring>
        <name>usb_enable</name>
        <param>
          <type><ref refid="group____usb__device__controller__api_1ga2ddb0b059b4e1e76473ed7f56d0cf2ee" kindref="member">usb_dc_status_callback</ref></type>
          <declname>status_cb</declname>
        </param>
        <briefdescription>
<para>Enable the USB subsystem and associated hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the USB core subsystem and enables the corresponding hardware so that it can begin transmitting and receiving on the USB bus, as well as generating interrupts.</para>
<para>Class-specific initialization and registration must be performed by the user before invoking this, so that any data or events on the bus are processed correctly by the associated class handling code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">status_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback registered by user to notify about USB device controller state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="237" column="5" declfile="include/usb/usb_device.h" declline="237" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga65723c9469a12c87e5554169396f8e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_disable</definition>
        <argsstring>(void)</argsstring>
        <name>usb_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable the USB device. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to disable the USB device. Upon success, the specified USB interface is clock gated in hardware, it is no longer capable of generating interrupts.</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="248" column="5" declfile="include/usb/usb_device.h" declline="248" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga6d4b568f2f3aac4f099c35393fb601b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_write</definition>
        <argsstring>(uint8_t ep, const uint8_t *data, uint32_t data_len, uint32_t *bytes_ret)</argsstring>
        <name>usb_write</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>const <ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>bytes_ret</declname>
        </param>
        <briefdescription>
<para>Write data to the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to write data to the specified endpoint. The supplied usb_ep_callback will be called when transmission is done.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data requested to write. This may be zero for a zero length status packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytes_ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes written to the EP FIFO. This value may be NULL if the application expects all bytes to be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="266" column="5" declfile="include/usb/usb_device.h" declline="266" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1gab2c21738baa839b483654d1d5baf2981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_read</definition>
        <argsstring>(uint8_t ep, uint8_t *data, uint32_t max_data_len, uint32_t *ret_bytes)</argsstring>
        <name>usb_read</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>ret_bytes</declname>
        </param>
        <briefdescription>
<para>Read data from the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the Endpoint handler function, after an OUT interrupt has been received for that EP. The application must only call this function through the supplied usb_ep_callback function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Max length of data to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ret_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes read. If data is NULL and max_data_len is 0 the number of bytes available for read is returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="285" column="5" declfile="include/usb/usb_device.h" declline="285" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1gaaf206afaf32bde1b8d77d04bc6ec091f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_ep_set_stall</definition>
        <argsstring>(uint8_t ep)</argsstring>
        <name>usb_ep_set_stall</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Set STALL condition on the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by USB device class handler code to set stall condition on endpoint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="298" column="5" declfile="include/usb/usb_device.h" declline="298" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1gae7bc410d0db8a6d2142992153bb1424d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_ep_clear_stall</definition>
        <argsstring>(uint8_t ep)</argsstring>
        <name>usb_ep_clear_stall</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Clears STALL condition on the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by USB device class handler code to clear stall condition on endpoint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="311" column="5" declfile="include/usb/usb_device.h" declline="311" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga4c919f7e993f80150bdde2d7fab254ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_ep_read_wait</definition>
        <argsstring>(uint8_t ep, uint8_t *data, uint32_t max_data_len, uint32_t *read_bytes)</argsstring>
        <name>usb_ep_read_wait</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
          <declname>max_data_len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref> *</type>
          <declname>read_bytes</declname>
        </param>
        <briefdescription>
<para>Read data from the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This is similar to usb_ep_read, the difference being that, it doesn&apos;t clear the endpoint NAKs so that the consumer is not bogged down by further upcalls till he is done with the processing of the data. The caller should reactivate ep by invoking <ref refid="group____usb__device__core__api_1gaab17b8c523ac211ff308c8dc774ba092" kindref="member">usb_ep_read_continue()</ref> do so.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>max length of data to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">read_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes read. If data is NULL and max_data_len is 0 the number of bytes available for read should be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="331" column="5" declfile="include/usb/usb_device.h" declline="331" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1gaab17b8c523ac211ff308c8dc774ba092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_ep_read_continue</definition>
        <argsstring>(uint8_t ep)</argsstring>
        <name>usb_ep_read_continue</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Continue reading data from the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Clear the endpoint NAK and enable the endpoint to accept more data from the host. Usually called after <ref refid="group____usb__device__core__api_1ga4c919f7e993f80150bdde2d7fab254ee" kindref="member">usb_ep_read_wait()</ref> when the consumer is fine to accept more data. Thus these calls together acts as flow control mechanism.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="348" column="5" declfile="include/usb/usb_device.h" declline="348" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga3485c3d1c3fa7259de32fd57d303bc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usb_transfer_ep_callback</definition>
        <argsstring>(uint8_t ep, enum usb_dc_ep_cb_status_code)</argsstring>
        <name>usb_transfer_ep_callback</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>enum</type>
          <declname>usb_dc_ep_cb_status_code</declname>
        </param>
        <briefdescription>
<para>Transfer management endpoint callback. </para>
        </briefdescription>
        <detaileddescription>
<para>If a USB class driver wants to use high-level transfer functions, driver needs to register this callback as usb endpoint callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="366" column="6" declfile="include/usb/usb_device.h" declline="366" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga27c3040dca474b5b45e6bea63a500cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_transfer</definition>
        <argsstring>(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags, usb_transfer_callback cb, void *priv)</argsstring>
        <name>usb_transfer</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dlen</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group____usb__device__core__api_1ga2e599eb20f647d9bb2369d76a7dc51db" kindref="member">usb_transfer_callback</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <briefdescription>
<para>Start a transfer. </para>
        </briefdescription>
        <detaileddescription>
<para>Start a usb transfer to/from the data buffer. This function is asynchronous and can be executed in IRQ context. The provided callback will be called on transfer completion (or error) in thread context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to write-to/read-from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Transfer flags (USB_TRANS_READ, USB_TRANS_WRITE...) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function called on transfer completion/failure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priv</parametername>
</parameternamelist>
<parameterdescription>
<para>Data passed back to the transfer completion callback</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="385" column="5" declfile="include/usb/usb_device.h" declline="385" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga1060e3a473a7f0bc71763a413e91ab56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_transfer_sync</definition>
        <argsstring>(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags)</argsstring>
        <name>usb_transfer_sync</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dlen</declname>
        </param>
        <param>
          <type><ref refid="lib_2libc_2minimal_2include_2sys_2types_8h_1a4089fb16419d359081465355db05f846" kindref="member">unsigned</ref> int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Start a transfer and block-wait for completion. </para>
        </briefdescription>
        <detaileddescription>
<para>Synchronous version of usb_transfer, wait for transfer completion before returning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to write-to/read-from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Transfer flags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes transferred on success, negative errno code on fail. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="402" column="5" declfile="include/usb/usb_device.h" declline="402" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1gab399dc4a43a99c927ee7588a57c49211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usb_cancel_transfer</definition>
        <argsstring>(uint8_t ep)</argsstring>
        <name>usb_cancel_transfer</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Cancel any ongoing transfer on the specified endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="410" column="6" declfile="include/usb/usb_device.h" declline="410" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga758a63b22c48d2ae9d025adb92ed5925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usb_cancel_transfers</definition>
        <argsstring>(void)</argsstring>
        <name>usb_cancel_transfers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cancel all ongoing transfers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="415" column="6" declfile="include/usb/usb_device.h" declline="415" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga6292a473cffc1f8683da902c2a85d653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool usb_transfer_is_busy</definition>
        <argsstring>(uint8_t ep)</argsstring>
        <name>usb_transfer_is_busy</name>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Check that transfer is ongoing for the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint address corresponding to the one listed in the device configuration table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if transfer is ongoing, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="425" column="6" declfile="include/usb/usb_device.h" declline="425" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga7d67c8d49b52fb33818d654ca647c1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usb_wakeup_request</definition>
        <argsstring>(void)</argsstring>
        <name>usb_wakeup_request</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Start the USB remote wakeup procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to request a remote wakeup. This feature must be enabled in configuration, otherwise it will always return -ENOTSUP error.</para>
<para><simplesect kind="return"><para>0 on success, negative errno code on fail, i.e. when the bus is already active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="437" column="5" declfile="include/usb/usb_device.h" declline="437" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group____usb__device__core__api_1ga577018c415eec38ef5038cdb2f45ed2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdbool_8h_1abb452686968e48b67397da5f97445f5b" kindref="member">bool</ref></type>
        <definition>bool usb_get_remote_wakeup_status</definition>
        <argsstring>(void)</argsstring>
        <name>usb_get_remote_wakeup_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get status of the USB remote wakeup feature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if remote wakeup has been enabled by the host, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="444" column="6" declfile="include/usb/usb_device.h" declline="444" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group____usb__device__core__api_1gabb531b022f5d2d859227a7b35d593d80" prot="public" static="no">
        <name>USB_TRANS_READ</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(0)   /** Read transfer <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref> */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="356" column="9" bodyfile="include/usb/usb_device.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group____usb__device__core__api_1ga163ee39a47b0a3d9fe3697cc4f24e787" prot="public" static="no">
        <name>USB_TRANS_WRITE</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(1)   /** Write transfer <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref> */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="357" column="9" bodyfile="include/usb/usb_device.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group____usb__device__core__api_1ga81c618544f27e0dc0e556021b0418c40" prot="public" static="no">
        <name>USB_TRANS_NO_ZLP</name>
        <initializer><ref refid="group__sys-util_1ga3a8ea58898cb58fc96013383d39f482c" kindref="member">BIT</ref>(2)   /** No zero-length packet <ref refid="semaphore_2sys__sem_2src_2main_8c_1a194186a621980a6095d787bf06099591" kindref="member">flag</ref> */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/usb/usb_device.h" line="358" column="9" bodyfile="include/usb/usb_device.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>USB Device Core Layer API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
