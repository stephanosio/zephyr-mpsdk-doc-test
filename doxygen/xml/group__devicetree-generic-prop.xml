<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__devicetree-generic-prop" kind="group">
    <compoundname>devicetree-generic-prop</compoundname>
    <title>Property accessors</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" prot="public" static="no">
        <name>DT_PROP</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="devicetree_8h_1a8c1e6c5301ff391563977e563117d0f6" kindref="member">DT_CAT</ref>(node_id, _P_##prop)</initializer>
        <briefdescription>
<para>Get a devicetree property value. </para>
        </briefdescription>
        <detaileddescription>
<para>For properties whose bindings have the following types, this macro expands to:</para>
<para><itemizedlist>
<listitem><para>string: a string literal</para>
</listitem><listitem><para>boolean: 0 if the property is false, or 1 if it is true</para>
</listitem><listitem><para>int: the property&apos;s value as an integer literal</para>
</listitem><listitem><para>array, uint8-array, string-array: an initializer expression in braces, whose elements are integer or string literals (like {0, 1, 2}, {&quot;hello&quot;, &quot;world&quot;}, etc.)</para>
</listitem><listitem><para>phandle: a node identifier for the node with that phandle</para>
</listitem></itemizedlist>
</para>
<para>A property&apos;s type is usually defined by its binding. In some special cases, it has an assumed type defined by the devicetree specification even when no binding is available: &quot;compatible&quot; has type string-array, &quot;status&quot; and &quot;label&quot; have type string, and &quot;interrupt-controller&quot; has type boolean.</para>
<para>For other properties or properties with unknown type due to a missing binding, behavior is undefined.</para>
<para>For usage examples, see <ref refid="group__devicetree-generic-id_1ga015b4819473797982e83cae497697086" kindref="member">DT_PATH()</ref>, <ref refid="group__devicetree-generic-id_1gaa49e19bbc39dc0d6f16b78a5d02482c9" kindref="member">DT_ALIAS()</ref>, <ref refid="group__devicetree-generic-id_1gab7d23294a6bf7fd44a98b48ec47d8a79" kindref="member">DT_NODELABEL()</ref>, and <ref refid="group__devicetree-generic-id_1gae199b930cb21ff38dab284a696093ead" kindref="member">DT_INST()</ref> above.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a representation of the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="538" column="9" bodyfile="include/devicetree.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" prot="public" static="no">
        <name>DT_PROP_LEN</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop##_LEN)</initializer>
        <briefdescription>
<para>Get a property&apos;s logical length. </para>
        </briefdescription>
        <detaileddescription>
<para>Here, &quot;length&quot; is a number of elements, which may differ from the property&apos;s size in bytes.</para>
<para>The return value depends on the property&apos;s type:</para>
<para><itemizedlist>
<listitem><para>for types array, string-array, and uint8-array, this expands to the number of elements in the array</para>
</listitem><listitem><para>for type phandles, this expands to the number of phandles</para>
</listitem><listitem><para>for type phandle-array, this expands to the number of phandle and specifier blocks in the property</para>
</listitem></itemizedlist>
</para>
<para>These properties are handled as special cases:</para>
<para><itemizedlist>
<listitem><para>reg property: use <ref refid="group__devicetree-reg-prop_1ga6cdd22b6a2881b09ed63d9d262566a0a" kindref="member">DT_NUM_REGS(node_id)</ref> instead</para>
</listitem><listitem><para>interrupts property: use <ref refid="group__devicetree-interrupts-prop_1ga2985e5d55d2d9dbbbe93ba855d5db320" kindref="member">DT_NUM_IRQS(node_id)</ref> instead</para>
</listitem></itemizedlist>
</para>
<para>It is an error to use this macro with the ranges, dma-ranges, reg or interrupts properties.</para>
<para>For other properties, behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>a lowercase-and-underscores property with a logical length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="568" column="9" bodyfile="include/devicetree.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gabd2d8a9242818c7a9bf981114c912d75" prot="public" static="no">
        <name>DT_PROP_LEN_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(node_id, prop), \
		    (<ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN</ref>(node_id, prop)), (default_value))</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the property is defined (as determined by <ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP()</ref>), this expands to <ref refid="group__devicetree-generic-prop_1gaa7f5afcedd1f54be79a5337e8e28a5b6" kindref="member">DT_PROP_LEN(node_id, prop)</ref>. The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>a lowercase-and-underscores property with a logical length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s length or the given default value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="584" column="9" bodyfile="include/devicetree.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga479dfc704087eea7e7c5af42ae98576c" prot="public" static="no">
        <name>DT_PROP_HAS_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga111fe4e9d63758262fc6810a782cb32a" kindref="member">IS_ENABLED</ref>(<ref refid="devicetree_8h_1ac806173a3b422212ed11c59639ac174c" kindref="member">DT_CAT6</ref>(node_id, _P_, prop, _IDX_, idx, _EXISTS))</initializer>
        <briefdescription>
<para>Is index &quot;idx&quot; valid for an array type property? </para>
        </briefdescription>
        <detaileddescription>
<para>If this returns 1, then <ref refid="group__devicetree-generic-prop_1ga52ad691ea4cae633ca702020e939d461" kindref="member">DT_PROP_BY_IDX(node_id, prop, idx)</ref> or <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX(node_id, prop, idx, ...)</ref> are valid at index &quot;idx&quot;. If it returns 0, it is an error to use those macros with that index.</para>
<para>These properties are handled as special cases:</para>
<para><itemizedlist>
<listitem><para>reg property: use <ref refid="group__devicetree-reg-prop_1ga59aa43231678d08eeac6e5b344048f02" kindref="member">DT_REG_HAS_IDX(node_id, idx)</ref> instead</para>
</listitem><listitem><para>interrupts property: use <ref refid="group__devicetree-interrupts-prop_1ga238a290dc6cea9479104ff8f95de1c4c" kindref="member">DT_IRQ_HAS_IDX(node_id, idx)</ref> instead</para>
</listitem></itemizedlist>
</para>
<para>It is an error to use this macro with the reg or interrupts properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>a lowercase-and-underscores property with a logical length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression which evaluates to 1 if &quot;idx&quot; is a valid index into the given property, and 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="608" column="9" bodyfile="include/devicetree.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga52ad691ea4cae633ca702020e939d461" prot="public" static="no">
        <name>DT_PROP_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop##_IDX_##idx)</initializer>
        <briefdescription>
<para>Get the value at index &quot;idx&quot; in an array type property. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;property[index]&quot;.</para>
<para>When the property&apos;s binding has type array, string-array, uint8-array, or phandles, this expands to the idx-th array element as an integer, string literal, or node identifier respectively.</para>
<para>These properties are handled as special cases:</para>
<para><itemizedlist>
<listitem><para>reg property: use <ref refid="group__devicetree-reg-prop_1gac540b00bb12d0662f6aefe6ac0cff243" kindref="member">DT_REG_ADDR_BY_IDX()</ref> or <ref refid="group__devicetree-reg-prop_1ga9a703d688e4b983689b8579e0e7d9f48" kindref="member">DT_REG_SIZE_BY_IDX()</ref> instead</para>
</listitem><listitem><para>interrupts property: use <ref refid="group__devicetree-interrupts-prop_1ga3779b2115eac60ab32adfc8d212e973f" kindref="member">DT_IRQ_BY_IDX()</ref> instead</para>
</listitem></itemizedlist>
</para>
<para>For non-array properties, behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a representation of the idx-th element of the property </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="633" column="9" bodyfile="include/devicetree.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" prot="public" static="no">
        <name>DT_PROP_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(node_id, prop), \
		    (<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop)), (default_value))</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP(node_id, prop)</ref>. The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="648" column="9" bodyfile="include/devicetree.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga89070ef089930290ce31788b5b3b84e5" prot="public" static="no">
        <name>DT_LABEL</name>
        <param><defname>node_id</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, label)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP(node_id, label)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience for the Zephyr device API, which uses label properties as <ref refid="group__device__model_1ga15386ca9ab38f3e30183c18f604fa835" kindref="member">device_get_binding()</ref> arguments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node&apos;s label property value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="660" column="9" bodyfile="include/devicetree.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" prot="public" static="no">
        <name>DT_ENUM_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, prop##_ENUM_IDX)</initializer>
        <briefdescription>
<para>Get a property value&apos;s index into its enumeration values. </para>
        </briefdescription>
        <detaileddescription>
<para>The return values start at zero.</para>
<para>Example devicetree fragment: <verbatim>usb1: usb@12340000 {
        maximum-speed = &quot;full-speed&quot;;
};
usb2: usb@12341000 {
        maximum-speed = &quot;super-speed&quot;;
};
</verbatim> Example bindings fragment: <verbatim>properties:
  maximum-speed:
    type: string
    enum:
       - &quot;low-speed&quot;
       - &quot;full-speed&quot;
       - &quot;high-speed&quot;
       - &quot;super-speed&quot;
</verbatim> Example usage: <verbatim>DT_ENUM_IDX(DT_NODELABEL(usb1), maximum_speed) // 1
DT_ENUM_IDX(DT_NODELABEL(usb2), maximum_speed) // 3
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index of the property&apos;s value in its enum: list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="696" column="9" bodyfile="include/devicetree.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gac3616e3aa1a025235032786de8d31576" prot="public" static="no">
        <name>DT_ENUM_IDX_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_idx_value</defname></param>
        <initializer>	<ref refid="group__sys-util_1ga358bc3e7669c860a98839a51cd526b20" kindref="member">COND_CODE_1</ref>(<ref refid="group__devicetree-generic-exist_1gacce67bf20541cd2d07d8540058964692" kindref="member">DT_NODE_HAS_PROP</ref>(node_id, prop), \
		    (<ref refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" kindref="member">DT_ENUM_IDX</ref>(node_id, prop)), (default_idx_value))</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" kindref="member">DT_ENUM_IDX()</ref>, but with a fallback to a default enum index. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to its zero based index value thanks to <ref refid="group__devicetree-generic-prop_1ga6c1a3b93e30429c1c69a7e2d8fe2d840" kindref="member">DT_ENUM_IDX(node_id, prop)</ref>.</para>
<para>Otherwise, this expands to provided default index enum value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_idx_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback index value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero-based index of the property&apos;s value in its enum if present, default_idx_value ohterwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="712" column="9" bodyfile="include/devicetree.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" prot="public" static="no">
        <name>DT_STRING_TOKEN</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _STRING_TOKEN)</initializer>
        <briefdescription>
<para>Get a string property&apos;s value as a token. </para>
        </briefdescription>
        <detaileddescription>
<para>This removes &quot;the quotes&quot; from string-valued properties, and converts non-alphanumeric characters to underscores. That can be useful, for example, when programmatically using the value to form a C variable or code.</para>
<para><ref refid="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" kindref="member">DT_STRING_TOKEN()</ref> can only be used for properties with string type.</para>
<para>It is an error to use <ref refid="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" kindref="member">DT_STRING_TOKEN()</ref> in other circumstances.</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        prop = &quot;foo&quot;;
};
n2: node-2 {
        prop = &quot;FOO&quot;;
}
n3: node-3 {
        prop = &quot;123 foo&quot;;
};
</verbatim> Example bindings fragment: <verbatim>properties:
  prop:
    type: string
</verbatim> Example usage: <verbatim>DT_STRING_TOKEN(DT_NODELABEL(n1), prop) // foo
DT_STRING_TOKEN(DT_NODELABEL(n2), prop) // FOO
DT_STRING_TOKEN(DT_NODELABEL(n3), prop) // 123_foo
</verbatim> Notice how:</para>
<para><itemizedlist>
<listitem><para>Unlike C identifiers, the property values may begin with a number. It&apos;s the user&apos;s responsibility not to use such values as the name of a C identifier.</para>
</listitem><listitem><para>The uppercased &quot;FOO&quot; in the DTS remains <computeroutput>FOO</computeroutput> as a token. It is <emphasis>not</emphasis> converted to <computeroutput>foo</computeroutput>.</para>
</listitem><listitem><para>The whitespace in the DTS &quot;123 foo&quot; string is converted to <computeroutput>123_foo</computeroutput> as a token.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property string name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of <computeroutput>prop</computeroutput> as a token, i.e. without any quotes and with special characters converted to underscores </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="768" column="9" bodyfile="include/devicetree.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gae0b5e2b6633a98ead17ec20d3494658f" prot="public" static="no">
        <name>DT_STRING_UPPER_TOKEN</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="devicetree_8h_1a28493e4c0eb55f3065dc52e3946f8879" kindref="member">DT_CAT4</ref>(node_id, _P_, prop, _STRING_UPPER_TOKEN)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga5995350cc7fd2d12ef7daa2487d1db54" kindref="member">DT_STRING_TOKEN()</ref>, but uppercased. </para>
        </briefdescription>
        <detaileddescription>
<para>This removes &quot;the quotes and capitalize&quot; from string-valued properties, and converts non-alphanumeric characters to underscores. That can be useful, for example, when programmatically using the value to form a C variable or code.</para>
<para><ref refid="group__devicetree-generic-prop_1gae0b5e2b6633a98ead17ec20d3494658f" kindref="member">DT_STRING_UPPER_TOKEN()</ref> can only be used for properties with string type.</para>
<para>It is an error to use <ref refid="group__devicetree-generic-prop_1gae0b5e2b6633a98ead17ec20d3494658f" kindref="member">DT_STRING_UPPER_TOKEN()</ref> in other circumstances.</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        prop = &quot;foo&quot;;
};
n2: node-2 {
        prop = &quot;123 foo&quot;;
};
</verbatim> Example bindings fragment: <verbatim>properties:
  prop:
    type: string
</verbatim> Example usage: <verbatim>DT_STRING_UPPER_TOKEN(DT_NODELABEL(n1), prop) // FOO
DT_STRING_UPPER_TOKEN(DT_NODELABEL(n2), prop) // 123_FOO
</verbatim> Notice how:</para>
<para><itemizedlist>
<listitem><para>Unlike C identifiers, the property values may begin with a number. It&apos;s the user&apos;s responsibility not to use such values as the name of a C identifier.</para>
</listitem><listitem><para>The lowercased &quot;foo&quot; in the DTS becomes <computeroutput>FOO</computeroutput> as a token, i.e. it is uppercased.</para>
</listitem><listitem><para>The whitespace in the DTS &quot;123 foo&quot; string is converted to <computeroutput>123_FOO</computeroutput> as a token, i.e. it is uppercased and whitespace becomes an underscore.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property string name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of <computeroutput>prop</computeroutput> as a token, i.e. without any quotes and with special characters converted to underscores </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="820" column="9" bodyfile="include/devicetree.h" bodystart="820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" prot="public" static="no">
        <name>DT_PROP_BY_PHANDLE_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>phs</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(<ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX</ref>(node_id, phs, idx), prop)</initializer>
        <briefdescription>
<para>Get a property value from a phandle in a property. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shorthand for: <verbatim>DT_PROP(DT_PHANDLE_BY_IDX(node_id, phs, idx), prop)
</verbatim> That is, &quot;prop&quot; is a property of the phandle&apos;s node, not a property of &quot;node_id&quot;.</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        foo = &lt;&amp;n2 &amp;n3&gt;;
};

n2: node-2 {
        bar = &lt;42&gt;;
};

n3: node-3 {
        baz = &lt;43&gt;;
};
</verbatim> Example usage: <verbatim>#define N1 DT_NODELABEL(n1)

DT_PROP_BY_PHANDLE_IDX(N1, foo, 0, bar) // 42
DT_PROP_BY_PHANDLE_IDX(N1, foo, 1, baz) // 43
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phs</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle&quot;, &quot;phandles&quot;, or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;phs&quot;, which must be zero if &quot;phs&quot; has type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="870" column="9" bodyfile="include/devicetree.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gad1c6a6544eac7bc77c1ed4aebd15df2b" prot="public" static="no">
        <name>DT_PROP_BY_PHANDLE_IDX_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>phs</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(<ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX</ref>(node_id, phs, idx), prop, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" kindref="member">DT_PROP_BY_PHANDLE_IDX()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to DT_PROP_BY_PHANDLE_IDX(node_id, phs, idx, prop). The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phs</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle&quot;, &quot;phandles&quot;, or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;phs&quot;, which must be zero if &quot;phs&quot; has type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="892" column="9" bodyfile="include/devicetree.h" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gabc1b099dda97fb03a9259a8b21fc04d2" prot="public" static="no">
        <name>DT_PROP_BY_PHANDLE</name>
        <param><defname>node_id</defname></param>
        <param><defname>ph</defname></param>
        <param><defname>prop</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" kindref="member">DT_PROP_BY_PHANDLE_IDX</ref>(node_id, ph, 0, prop)</initializer>
        <briefdescription>
<para>Get a property value from a phandle&apos;s node. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <ref refid="group__devicetree-generic-prop_1gaeba973992914d493cff5506ecf86a00d" kindref="member">DT_PROP_BY_PHANDLE_IDX(node_id, ph, 0, prop)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ph</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of &quot;node_id&quot; with type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of the phandle&apos;s node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the property&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="906" column="9" bodyfile="include/devicetree.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" prot="public" static="no">
        <name>DT_PHA_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, pha##_IDX_##idx##_VAL_##cell)</initializer>
        <briefdescription>
<para>Get a phandle-array specifier cell value at an index. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;phandle_array[index].cell&quot;. That is, the cell value is in the &quot;pha&quot; property of &quot;node_id&quot;, inside the specifier at index &quot;idx&quot;.</para>
<para>Example devicetree fragment: <verbatim>gpio0: gpio@... {
        #gpio-cells = &lt;2&gt;;
};

gpio1: gpio@... {
        #gpio-cells = &lt;2&gt;;
};

led: led_0 {
        gpios = &lt;&amp;gpio0 17 0x1&gt;, &lt;&amp;gpio1 5 0x3&gt;;
};
</verbatim> Bindings fragment for the gpio0 and gpio1 nodes: <verbatim>gpio-cells:
  - pin
  - flags
</verbatim> Above, &quot;gpios&quot; has two elements:</para>
<para><itemizedlist>
<listitem><para>index 0 has specifier &lt;17 0x1&gt;, so its &quot;pin&quot; cell is 17, and its &quot;flags&quot; cell is 0x1</para>
</listitem><listitem><para>index 1 has specifier &lt;5 0x3&gt;, so &quot;pin&quot; is 5 and &quot;flags&quot; is 0x3</para>
</listitem></itemizedlist>
</para>
<para>Example usage: <verbatim>#define LED DT_NODELABEL(led)

DT_PHA_BY_IDX(LED, gpios, 0, pin)   // 17
DT_PHA_BY_IDX(LED, gpios, 1, flags) // 0x3
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name within the specifier at &quot;pha&quot; index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="957" column="9" bodyfile="include/devicetree.h" bodystart="957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gad830ed96dbc4f7dac3455153e0a944d6" prot="public" static="no">
        <name>DT_PHA_BY_IDX_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, pha##_IDX_##idx##_VAL_##cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to DT_PHA_BY_IDX(node_id, pha, idx, cell). The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>logical index into &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name within the specifier at &quot;pha&quot; index &quot;idx&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value or &quot;default_value&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="977" column="9" bodyfile="include/devicetree.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gacef5921973a55433161fe0be3f8f628d" prot="public" static="no">
        <name>DT_PHA</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX</ref>(node_id, pha, 0, cell)</initializer>
        <briefdescription>
<para>Equivalent to <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX(node_id, pha, 0, cell)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="991" column="9" bodyfile="include/devicetree.h" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga886559b058b24164b62ab95215d860bd" prot="public" static="no">
        <name>DT_PHA_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1gad830ed96dbc4f7dac3455153e0a944d6" kindref="member">DT_PHA_BY_IDX_OR</ref>(node_id, pha, 0, cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gacef5921973a55433161fe0be3f8f628d" kindref="member">DT_PHA()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to <ref refid="group__devicetree-generic-prop_1gacef5921973a55433161fe0be3f8f628d" kindref="member">DT_PHA(node_id, pha, cell)</ref>. The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1007" column="9" bodyfile="include/devicetree.h" bodystart="1007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1gae469615356a867c49416da15bdc44a26" prot="public" static="no">
        <name>DT_PHA_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, pha##_NAME_##name##_VAL_##cell)</initializer>
        <briefdescription>
<para>Get a value within a phandle-array specifier by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__devicetree-generic-prop_1ga118b63fd22c20ef940ac2fa073c126ed" kindref="member">DT_PHA_BY_IDX()</ref>, except it treats &quot;pha&quot; as a structure where each array element has a name.</para>
<para>It might help to read the argument order as being similar to &quot;node-&gt;phandle_struct.name.cell&quot;. That is, the cell value is in the &quot;pha&quot; property of &quot;node_id&quot;, treated as a data structure where each array element has a name.</para>
<para>Example devicetree fragment: <verbatim>n: node {
        io-channels = &lt;&amp;adc1 10&gt;, &lt;&amp;adc2 20&gt;;
        io-channel-names = &quot;SENSOR&quot;, &quot;BANDGAP&quot;;
};
</verbatim> Bindings fragment for the &quot;adc1&quot; and &quot;adc2&quot; nodes: <verbatim>io-channel-cells:
  - input
</verbatim> Example usage: <verbatim>DT_PHA_BY_NAME(DT_NODELABEL(n), io_channels, sensor, input)  // 10
DT_PHA_BY_NAME(DT_NODELABEL(n), io_channels, bandgap, input) // 20
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a specifier in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name in the named specifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1044" column="9" bodyfile="include/devicetree.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga79cda6ca70cc1e27b034ad096d4f4401" prot="public" static="no">
        <name>DT_PHA_BY_NAME_OR</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <param><defname>cell</defname></param>
        <param><defname>default_value</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga5e5bfc9b1a6627b3f73014329e96340f" kindref="member">DT_PROP_OR</ref>(node_id, pha##_NAME_##name##_VAL_##cell, default_value)</initializer>
        <briefdescription>
<para>Like <ref refid="group__devicetree-generic-prop_1gae469615356a867c49416da15bdc44a26" kindref="member">DT_PHA_BY_NAME()</ref>, but with a fallback to default_value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value exists, this expands to DT_PHA_BY_NAME(node_id, pha, name, cell). The default_value parameter is not expanded in this case.</para>
<para>Otherwise, this expands to default_value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of a specifier in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores cell name in the named specifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>a fallback value to expand to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cell&apos;s value or default_value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1062" column="9" bodyfile="include/devicetree.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga65c90d2d96255b8569c5b869b637c2fd" prot="public" static="no">
        <name>DT_PHANDLE_BY_NAME</name>
        <param><defname>node_id</defname></param>
        <param><defname>pha</defname></param>
        <param><defname>name</defname></param>
        <initializer>	<ref refid="group__devicetree-generic-prop_1ga8e1fd9ebacd85d2013df027d041d506b" kindref="member">DT_PROP</ref>(node_id, pha##_NAME_##name##_PH)</initializer>
        <briefdescription>
<para>Get a phandle&apos;s node identifier from a phandle array by name. </para>
        </briefdescription>
        <detaileddescription>
<para>It might help to read the argument order as being similar to &quot;node-&gt;phandle_struct.name.phandle&quot;. That is, the phandle array is treated as a structure with named elements. The return value is the node identifier for a phandle inside the structure.</para>
<para>Example devicetree fragment: <verbatim>adc1: adc@... {
        label = &quot;ADC_1&quot;;
};

adc2: adc@... {
        label = &quot;ADC_2&quot;;
};

n: node {
        io-channels = &lt;&amp;adc1 10&gt;, &lt;&amp;adc2 20&gt;;
        io-channel-names = &quot;SENSOR&quot;, &quot;BANDGAP&quot;;
};
</verbatim> Above, &quot;io-channels&quot; has two elements:</para>
<para><itemizedlist>
<listitem><para>the element named &quot;SENSOR&quot; has phandle &amp;adc1</para>
</listitem><listitem><para>the element named &quot;BANDGAP&quot; has phandle &amp;adc2</para>
</listitem></itemizedlist>
</para>
<para>Example usage: <verbatim>#define NODE DT_NODELABEL(n)

DT_LABEL(DT_PHANDLE_BY_NAME(NODE, io_channels, sensor))  // &quot;ADC_1&quot;
DT_LABEL(DT_PHANDLE_BY_NAME(NODE, io_channels, bandgap)) // &quot;ADC_2&quot;
</verbatim> Notice how devicetree properties and names are lowercased, and non-alphanumeric characters are converted to underscores.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pha</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property with type &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores name of an element in &quot;pha&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node with that phandle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1112" column="9" bodyfile="include/devicetree.h" bodystart="1112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" prot="public" static="no">
        <name>DT_PHANDLE_BY_IDX</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <param><defname>idx</defname></param>
        <initializer>	<ref refid="devicetree_8h_1ac806173a3b422212ed11c59639ac174c" kindref="member">DT_CAT6</ref>(node_id, _P_, prop, _IDX_, idx, _PH)</initializer>
        <briefdescription>
<para>Get a node identifier for a phandle in a property. </para>
        </briefdescription>
        <detaileddescription>
<para>When a node&apos;s value at a logical index contains a phandle, this macro returns a node identifier for the node with that phandle.</para>
<para>Therefore, if &quot;prop&quot; has type &quot;phandle&quot;, &quot;idx&quot; must be zero. (A &quot;phandle&quot; type is treated as a &quot;phandles&quot; with a fixed length of 1).</para>
<para>Example devicetree fragment: <verbatim>n1: node-1 {
        foo = &lt;&amp;n2 &amp;n3&gt;;
};

n2: node-2 { ... };
n3: node-3 { ... };
</verbatim> Above, &quot;foo&quot; has type phandles and has two elements:</para>
<para><itemizedlist>
<listitem><para>index 0 has phandle &amp;n2, which is node-2&apos;s phandle</para>
</listitem><listitem><para>index 1 has phandle &amp;n3, which is node-3&apos;s phandle</para>
</listitem></itemizedlist>
</para>
<para>Example usage: <verbatim>#define N1 DT_NODELABEL(n1)

DT_PHANDLE_BY_IDX(N1, foo, 0) // node identifier for node-2
DT_PHANDLE_BY_IDX(N1, foo, 1) // node identifier for node-3
</verbatim> Behavior is analogous for phandle-arrays.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property name in &quot;node_id&quot; with type &quot;phandle&quot;, &quot;phandles&quot; or &quot;phandle-array&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into &quot;prop&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node identifier for the node with the phandle at that index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1154" column="9" bodyfile="include/devicetree.h" bodystart="1154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__devicetree-generic-prop_1ga7bd77c49472ba4547d87f00f40fd7171" prot="public" static="no">
        <name>DT_PHANDLE</name>
        <param><defname>node_id</defname></param>
        <param><defname>prop</defname></param>
        <initializer><ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX</ref>(node_id, prop, 0)</initializer>
        <briefdescription>
<para>Get a node identifier for a phandle property&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <ref refid="group__devicetree-generic-prop_1ga8ff163c240878a988d29d727671671de" kindref="member">DT_PHANDLE_BY_IDX(node_id, prop, 0)</ref>. Its primary benefit is readability when &quot;prop&quot; has type &quot;phandle&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>lowercase-and-underscores property of &quot;node_id&quot; with type &quot;phandle&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node identifier for the node pointed to by &quot;ph&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/devicetree.h" line="1173" column="9" bodyfile="include/devicetree.h" bodystart="1173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
