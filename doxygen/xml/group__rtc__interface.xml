<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__rtc__interface" kind="group">
    <compoundname>rtc_interface</compoundname>
    <title>Real Time Clock interfaces</title>
    <innerclass refid="structmaxim__ds3231__alarm" prot="public">maxim_ds3231_alarm</innerclass>
    <innerclass refid="structmaxim__ds3231__syncpoint" prot="public">maxim_ds3231_syncpoint</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__rtc__interface_1ga684b29dc1c11d8df698437f27e6d0403" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* maxim_ds3231_alarm_callback_handler_t) (const struct device *dev, uint8_t id, uint32_t syncclock, void *user_data)</definition>
        <argsstring>)(const struct device *dev, uint8_t id, uint32_t syncclock, void *user_data)</argsstring>
        <name>maxim_ds3231_alarm_callback_handler_t</name>
        <briefdescription>
<para>Signature for DS3231 alarm callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para>The alarm callback is invoked from the system work queue thread. At the point the callback is invoked the corresponding alarm flags will have been cleared from the device status register. The callback is permitted to invoke operations on the device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device from which the callback originated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the alarm id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syncclock</parametername>
</parameternamelist>
<parameterdescription>
<para>the value from <ref refid="group__rtc__interface_1ga68e1512974db4b526a632e140fa7eed8" kindref="member">maxim_ds3231_read_syncclock()</ref> at the time the alarm interrupt was processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>the corresponding parameter from <ref refid="structmaxim__ds3231__alarm_1a192fb8c10246bfe466e74aafbb45d720" kindref="member">maxim_ds3231_alarm::user_data</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="230" column="9" bodyfile="include/drivers/rtc/maxim_ds3231.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__rtc__interface_1ga59541c849327f388169ca3a15df0ba57" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* maxim_ds3231_notify_callback) (const struct device *dev, struct sys_notify *notify, int res)</definition>
        <argsstring>)(const struct device *dev, struct sys_notify *notify, int res)</argsstring>
        <name>maxim_ds3231_notify_callback</name>
        <briefdescription>
<para>Signature used to notify a user of the DS3231 that an asynchronous operation has completed. </para>
        </briefdescription>
        <detaileddescription>
<para>Functions compatible with this type are subject to all the constraints of <ref refid="group__sys__notify__apis_1ga2a9ffe35a5ad44fb7c5b00bb5c5c0499" kindref="member">sys_notify_generic_callback</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notify</parametername>
</parameternamelist>
<parameterdescription>
<para>the notification structure provided in the call</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>the result of the operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="247" column="9" bodyfile="include/drivers/rtc/maxim_ds3231.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__rtc__interface_1ga68e1512974db4b526a632e140fa7eed8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t maxim_ds3231_read_syncclock</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>maxim_ds3231_read_syncclock</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Read the local synchronization clock. </para>
        </briefdescription>
        <detaileddescription>
<para>Synchronization aligns the DS3231 real-time clock with a stable monotonic local clock which should have a frequency between 1 kHz and 1 MHz and be itself synchronized with the primary system time clock. The accuracy of the alignment and the maximum time between synchronization updates is affected by the resolution of this clock.</para>
<para>On some systems the hardware clock from k_cycles_get_32() is suitable, but on others that clock advances too quickly. The frequency of the target-specific clock is provided by <ref refid="group__rtc__interface_1ga6e4a3f34023be910d33fd7f89f81dba3" kindref="member">maxim_ds3231_syncclock_frequency()</ref>.</para>
<para>At this time the value is captured from <computeroutput><ref refid="group__clock__apis_1ga9253cfb7b46af4d8994349323ce9872b" kindref="member">k_uptime_get_32()</ref></computeroutput>; future kernel extensions may make a higher-resolution clock available.</para>
<para><simplesect kind="note"><para>This function is <emphasis>isr-ok</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current value of the synchronization clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="360" column="24" bodyfile="include/drivers/rtc/maxim_ds3231.h" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1ga6e4a3f34023be910d33fd7f89f81dba3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a0a8582351ac627ee8bde2973c825e47f" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t maxim_ds3231_syncclock_frequency</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>maxim_ds3231_syncclock_frequency</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the frequency of the synchronization clock. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides the frequency of the clock used in <ref refid="group__rtc__interface_1ga68e1512974db4b526a632e140fa7eed8" kindref="member">maxim_ds3231_read_syncclock()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the frequency of the selected synchronization clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="373" column="24" bodyfile="include/drivers/rtc/maxim_ds3231.h" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1ga1a41193eb70b147eb623ff07be3b3954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_ctrl_update</definition>
        <argsstring>(const struct device *dev, uint8_t set_bits, uint8_t clear_bits)</argsstring>
        <name>maxim_ds3231_ctrl_update</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>set_bits</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>clear_bits</declname>
        </param>
        <briefdescription>
<para>Set and clear specific bits in the control register. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function assumes the device register cache is valid. It will not read the register value, and it will write to the device only if the value changes as a result of applying the set and clear changes.</para>
</simplesect>
<simplesect kind="note"><para>Unlike <ref refid="group__rtc__interface_1ga1073100b5943141333de8cfd0cd8ac2b" kindref="member">maxim_ds3231_stat_update()</ref> the return value from this function indicates the register value after changes were made. That return value is cached for use in subsequent operations.</para>
</simplesect>
<simplesect kind="note"><para>This function is <emphasis>supervisor</emphasis>.</para>
</simplesect>
<simplesect kind="return"><para>the non-negative updated value of the register, or a negative error code from an I2C transaction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="395" column="5" declfile="include/drivers/rtc/maxim_ds3231.h" declline="395" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1ga1073100b5943141333de8cfd0cd8ac2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_stat_update</definition>
        <argsstring>(const struct device *dev, uint8_t set_bits, uint8_t clear_bits)</argsstring>
        <name>maxim_ds3231_stat_update</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>set_bits</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>clear_bits</declname>
        </param>
        <briefdescription>
<para>Read the ctrl_stat register then set and clear bits in it. </para>
        </briefdescription>
        <detaileddescription>
<para>The content of the ctrl_stat register will be read, then the set and clear bits applied and the result written back to the device (regardless of whether there appears to be a change in value).</para>
<para>OSF, A1F, and A2F will be written with 1s if the corresponding bits do not appear in either <computeroutput>set_bits</computeroutput> or <computeroutput>clear_bits</computeroutput>. This ensures that if any flag becomes set between the read and the write that indicator will not be cleared.</para>
<para><simplesect kind="note"><para>Unlike <ref refid="group__rtc__interface_1ga1a41193eb70b147eb623ff07be3b3954" kindref="member">maxim_ds3231_ctrl_update()</ref> the return value from this function indicates the register value before any changes were made.</para>
</simplesect>
<simplesect kind="note"><para>This function is <emphasis>supervisor</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>bits to be set when writing back. Setting bits other than <ref refid="maxim__ds3231_8h_1aa966f6de1e7662e66fac1d631b44d021" kindref="member">MAXIM_DS3231_REG_STAT_EN32kHz</ref> will have no effect.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>bits to be cleared when writing back. Include the bits for the status flags you want to clear.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the non-negative register value as originally read (disregarding the effect of clears and sets), or a negative error code from an I2C transaction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="428" column="5" declfile="include/drivers/rtc/maxim_ds3231.h" declline="428" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1gabc9bd9ff8a2107c08a7d9ca02c162be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_get_alarm</definition>
        <argsstring>(const struct device *dev, uint8_t id, struct maxim_ds3231_alarm *cfg)</argsstring>
        <name>maxim_ds3231_get_alarm</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>struct <ref refid="structmaxim__ds3231__alarm" kindref="compound">maxim_ds3231_alarm</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Read a DS3231 alarm configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The alarm configuration data is read from the device and reconstructed into the output parameter.</para>
<para><simplesect kind="note"><para>This function is <emphasis>supervisor</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the alarm index, which must be 0 (for the 1 s resolution alarm) or 1 (for the 1 min resolution alarm).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a structure into which the configured alarm data will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a non-negative value indicating successful conversion, or a negative error code from an I2C transaction or invalid parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="450" column="5" declfile="include/drivers/rtc/maxim_ds3231.h" declline="450" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1ga8f876ad2e16e88d80a2f914be3df49b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_set_alarm</definition>
        <argsstring>(const struct device *dev, uint8_t id, const struct maxim_ds3231_alarm *cfg)</argsstring>
        <name>maxim_ds3231_set_alarm</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a3cb4a16b0e8d6af0af86d4fd6ba5fd9d" kindref="member">uint8_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmaxim__ds3231__alarm" kindref="compound">maxim_ds3231_alarm</ref> *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
<para>Configure a DS3231 alarm. </para>
        </briefdescription>
        <detaileddescription>
<para>The alarm configuration is validated and stored into the device.</para>
<para>To cancel an alarm use <ref refid="group__counter__interface_1gade0bb97c0dfa03676d11ee47601d4cee" kindref="member">counter_cancel_channel_alarm()</ref>.</para>
<para><simplesect kind="note"><para>This function is <emphasis>supervisor</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>0 Analog to counter index. <computeroutput>ALARM1</computeroutput> is 0 and has 1 s resolution, <computeroutput>ALARM2</computeroutput> is 1 and has 1 minute resolution.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the desired alarm configuration. Both alarms are configured; if only one is to change the application must supply the existing configuration for the other.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a non-negative value on success, or a negative error code from an I2C transaction or an invalid parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="474" column="5" declfile="include/drivers/rtc/maxim_ds3231.h" declline="474" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1gabdf39bc4983b12646ad3b18ccfc1a7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_synchronize</definition>
        <argsstring>(const struct device *dev, struct sys_notify *notify)</argsstring>
        <name>maxim_ds3231_synchronize</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structsys__notify" kindref="compound">sys_notify</ref> *</type>
          <declname>notify</declname>
        </param>
        <briefdescription>
<para>Synchronize the RTC against the local clock. </para>
        </briefdescription>
        <detaileddescription>
<para>The RTC advances one tick per second with no access to sub-second precision. Synchronizing clocks at sub-second resolution requires enabling a 1pps signal then capturing the system clocks in a GPIO callback. This function provides that operation.</para>
<para>Synchronization is performed in asynchronously, and may take as long as 1 s to complete; notification of completion is provided through the <computeroutput>notify</computeroutput> parameter.</para>
<para>Applications should use <ref refid="group__rtc__interface_1ga4e9fab406fd3b9b20c0c7011bfbb7a8a" kindref="member">maxim_ds3231_get_syncpoint()</ref> to retrieve the synchronization data collected by this operation.</para>
<para><simplesect kind="note"><para>This function is <emphasis>supervisor</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notify</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object used to specify asynchronous function behavior and store completion information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>non-negative</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if a synchronization or set is currently in progress </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if notify is not provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if the required interrupt is not configured </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="504" column="5" declfile="include/drivers/rtc/maxim_ds3231.h" declline="504" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1ga45656b5994c063b77d04f60c71d42c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_req_syncpoint</definition>
        <argsstring>(const struct device *dev, struct k_poll_signal *signal)</argsstring>
        <name>maxim_ds3231_req_syncpoint</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref> *</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
<para>Request to update the synchronization point. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a variant of <ref refid="group__rtc__interface_1gabdf39bc4983b12646ad3b18ccfc1a7dc" kindref="member">maxim_ds3231_synchronize()</ref> for use from user threads.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a valid and ready-to-be-signalled <ref refid="structk__poll__signal" kindref="compound">k_poll_signal</ref>. May be NULL to request a synchronization point be collected without notifying when it has been updated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>non-negative</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if a synchronization or set is currently in progress </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if the required interrupt is not configured </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="522" column="6" declfile="include/drivers/rtc/maxim_ds3231.h" declline="522" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1ga4e9fab406fd3b9b20c0c7011bfbb7a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_get_syncpoint</definition>
        <argsstring>(const struct device *dev, struct maxim_ds3231_syncpoint *syncpoint)</argsstring>
        <name>maxim_ds3231_get_syncpoint</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structmaxim__ds3231__syncpoint" kindref="compound">maxim_ds3231_syncpoint</ref> *</type>
          <declname>syncpoint</declname>
        </param>
        <briefdescription>
<para>Retrieve the most recent synchronization point. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the synchronization data last captured using <ref refid="group__rtc__interface_1gabdf39bc4983b12646ad3b18ccfc1a7dc" kindref="member">maxim_ds3231_synchronize()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syncpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the synchronization data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>non-negative</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOENT</parametername>
</parameternamelist>
<parameterdescription>
<para>if no syncpoint has been captured </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="537" column="6" declfile="include/drivers/rtc/maxim_ds3231.h" declline="537" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1ga485db29a3aca59000798d5ae16ad7041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_set</definition>
        <argsstring>(const struct device *dev, const struct maxim_ds3231_syncpoint *syncpoint, struct sys_notify *notify)</argsstring>
        <name>maxim_ds3231_set</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structmaxim__ds3231__syncpoint" kindref="compound">maxim_ds3231_syncpoint</ref> *</type>
          <declname>syncpoint</declname>
        </param>
        <param>
          <type>struct <ref refid="structsys__notify" kindref="compound">sys_notify</ref> *</type>
          <declname>notify</declname>
        </param>
        <briefdescription>
<para>Set the RTC to a time consistent with the provided synchronization. </para>
        </briefdescription>
        <detaileddescription>
<para>The RTC advances one tick per second with no access to sub-second precision, and setting the clock resets the internal countdown chain. This function implements the magic necessary to set the clock while retaining as much sub-second accuracy as possible. It requires a synchronization point that pairs sub-second resolution civil time with a local synchronization clock captured at the same instant. The set operation may take as long as 1 second to complete; notification of completion is provided through the <computeroutput>notify</computeroutput> parameter.</para>
<para><simplesect kind="note"><para>This function is <emphasis>supervisor</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syncpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure providing the synchronization point.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notify</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object used to specify asynchronous function behavior and store completion information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>non-negative</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>if syncpoint or notify are null </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOTSUP</parametername>
</parameternamelist>
<parameterdescription>
<para>if the required interrupt signal is not configured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EBUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>if a synchronization or set is currently in progress </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="567" column="5" declfile="include/drivers/rtc/maxim_ds3231.h" declline="567" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__rtc__interface_1gab2091298eb9b94da29ad79616b707bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxim_ds3231_check_alarms</definition>
        <argsstring>(const struct device *dev)</argsstring>
        <name>maxim_ds3231_check_alarms</name>
        <param>
          <type>const struct <ref refid="structdevice" kindref="compound">device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Check for and clear flags indicating that an alarm has fired. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a mask indicating alarms that are marked as having fired, and clears from stat the flags that it found set. Alarms that have been configured with a callback are not represented in the return value.</para>
<para>This API may be used when a persistent alarm has been programmed.</para>
<para><simplesect kind="note"><para>This function is <emphasis>supervisor</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS3231 device pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a non-negative value that may have MAXIM_DS3231_ALARM1 and/or MAXIM_DS3231_ALARM2 set, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/drivers/rtc/maxim_ds3231.h" line="588" column="5" declfile="include/drivers/rtc/maxim_ds3231.h" declline="588" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>RTC DS3231 Driver-Specific API. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
