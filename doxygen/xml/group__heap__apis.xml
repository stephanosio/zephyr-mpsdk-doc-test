<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__heap__apis" kind="group">
    <compoundname>heap_apis</compoundname>
    <title>Heap APIs</title>
    <innerclass refid="structk__heap" prot="public">k_heap</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_heap_init</definition>
        <argsstring>(struct k_heap *h, void *mem, size_t bytes)</argsstring>
        <name>k_heap_init</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs a synchronized <ref refid="structk__heap" kindref="compound">k_heap</ref> object over a memory region specified by the user. Note that while any alignment and size can be passed as valid parameters, internal alignment restrictions inside the inner <ref refid="structsys__heap" kindref="compound">sys_heap</ref> mean that not all bytes may be usable as allocated memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap struct to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory region, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5097" column="6" declfile="include/kernel.h" declline="5097" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gaf77211a72441de389857bc13e10be4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_heap_aligned_alloc</definition>
        <argsstring>(struct k_heap *h, size_t align, size_t bytes, k_timeout_t timeout)</argsstring>
        <name>k_heap_aligned_alloc</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate aligned memory from a <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Behaves in all ways like <ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref>, except that the returned memory (if available) will have a starting address in memory which is a multiple of the specified power-of-two alignment value in bytes. The resulting memory can be returned to the heap using <ref refid="group__heap__apis_1ga6cf917a0b3d91a0101192bd4808ada9c" kindref="member">k_heap_free()</ref>.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR. </para>
</simplesect>
<simplesect kind="note"><para>When CONFIG_MULTITHREADING=n any <emphasis>timeout</emphasis> is treated as K_NO_WAIT.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap from which to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment in bytes, must be a power of two </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to wait, or K_NO_WAIT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to memory the caller can now use </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5118" column="6" declfile="include/kernel.h" declline="5118" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_heap_alloc</definition>
        <argsstring>(struct k_heap *h, size_t bytes, k_timeout_t timeout)</argsstring>
        <name>k_heap_alloc</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="structk__timeout__t" kindref="compound">k_timeout_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Allocate memory from a <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Allocates and returns a memory buffer from the memory region owned by the heap. If no memory is available immediately, the call will block for the specified timeout (constructed via the standard timeout API, or K_NO_WAIT or K_FOREVER) waiting for memory to be freed. If the allocation cannot be performed by the expiration of the timeout, NULL will be returned.</para>
<para><simplesect kind="note"><para><emphasis>timeout</emphasis> must be set to K_NO_WAIT if called from ISR. </para>
</simplesect>
<simplesect kind="note"><para>When CONFIG_MULTITHREADING=n any <emphasis>timeout</emphasis> is treated as K_NO_WAIT.</para>
</simplesect>
<simplesect kind="par"><title>Function properties (list may not be complete)</title><para><htmlonly> isr-ok </htmlonly>  <verbatim>embed:rst:inline :ref:`api_term_isr-ok`</verbatim> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap from which to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired size of block to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to wait, or K_NO_WAIT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to valid heap memory, or NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5141" column="6" declfile="include/kernel.h" declline="5141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1ga6cf917a0b3d91a0101192bd4808ada9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_heap_free</definition>
        <argsstring>(struct k_heap *h, void *mem)</argsstring>
        <name>k_heap_free</name>
        <param>
          <type>struct <ref refid="structk__heap" kindref="compound">k_heap</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Free memory allocated by <ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the specified memory block, which must have been returned from <ref refid="group__heap__apis_1ga22b83564e50ae6177388dfe63e32a512" kindref="member">k_heap_alloc()</ref>, to the heap for use by other callers. Passing a NULL block is legal, and has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Heap to which to return the memory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid memory block, or NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5154" column="6" declfile="include/kernel.h" declline="5154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_aligned_alloc</definition>
        <argsstring>(size_t align, size_t size)</argsstring>
        <name>k_aligned_alloc</name>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from the heap with a specified alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides semantics similar to aligned_alloc(); memory is allocated from the heap with a specified alignment. However, one minor difference is that <ref refid="group__heap__apis_1gae16d486aa250f9c07fa6a57342bcd3b4" kindref="member">k_aligned_alloc()</ref> accepts any non-zero <computeroutput>size</computeroutput>, wherase aligned_alloc() only accepts a <computeroutput>size</computeroutput> that is an integral multiple of <computeroutput>align</computeroutput>.</para>
<para>Above, aligned_alloc() refers to: C11 standard (ISO/IEC 9899:2011): 7.22.3.1 The aligned_alloc function (p: 347-348)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment of memory requested (in bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory requested (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the allocated memory if successful; otherwise NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5251" column="13" declfile="include/kernel.h" declline="5251" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gaa8edf1e63e5d5dd78d7adcfd787394ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_malloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>k_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from the heap. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides traditional <ref refid="stdlib_8h_1a9c36d0fe3ec4675cbffdc9b52f5fb399" kindref="member">malloc()</ref> semantics. Memory is allocated from the heap memory pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory requested (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the allocated memory if successful; otherwise NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5263" column="13" declfile="include/kernel.h" declline="5263" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1ga79b63cc93b3358cf82d74f40e73b69d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void k_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>k_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free memory allocated from heap. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides traditional <ref refid="stdlib_8h_1afbedc913aa4651b3c3b4b3aecd9b4711" kindref="member">free()</ref> semantics. The memory being returned must have been allocated from the heap memory pool or k_mem_pool_malloc().</para>
<para>If <emphasis>ptr</emphasis> is NULL, no operation is performed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to previously allocated memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5276" column="13" declfile="include/kernel.h" declline="5276" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__heap__apis_1gad031d50ed62d08202a5dcf992c20246c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * k_calloc</definition>
        <argsstring>(size_t nmemb, size_t size)</argsstring>
        <name>k_calloc</name>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory from heap, array style. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine provides traditional <ref refid="stdlib_8h_1a2807e26a012717736641384f91ab2563" kindref="member">calloc()</ref> semantics. Memory is allocated from the heap memory pool and zeroed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the requested array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each array element (in bytes).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the allocated memory if successful; otherwise NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5289" column="13" declfile="include/kernel.h" declline="5289" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__heap__apis_1ga795d7f1e6d5b7b19a7a50198d7829a0f" prot="public" static="no">
        <name>K_HEAP_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>bytes</defname></param>
        <initializer>	Z_HEAP_DEFINE_IN_SECT(name, bytes,			\
			      __noinit_named(kheap_buf_##name))</initializer>
        <briefdescription>
<para>Define a static <ref refid="structk__heap" kindref="compound">k_heap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines and initializes a static memory region and <ref refid="structk__heap" kindref="compound">k_heap</ref> of the requested size. After kernel start, &amp;name can be used as if <ref refid="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" kindref="member">k_heap_init()</ref> had been called.</para>
<para>Note that this macro enforces a minimum size on the memory region to accommodate metadata requirements. Very small heaps will be padded to fit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for the struct <ref refid="structk__heap" kindref="compound">k_heap</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory region, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5202" column="9" bodyfile="include/kernel.h" bodystart="5202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__heap__apis_1ga968f4c6a201fdf6862d62dd5d9f8d032" prot="public" static="no">
        <name>K_HEAP_DEFINE_NOCACHE</name>
        <param><defname>name</defname></param>
        <param><defname>bytes</defname></param>
        <initializer>	Z_HEAP_DEFINE_IN_SECT(name, bytes, __nocache)</initializer>
        <briefdescription>
<para>Define a static <ref refid="structk__heap" kindref="compound">k_heap</ref> in uncached memory. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines and initializes a static memory region and <ref refid="structk__heap" kindref="compound">k_heap</ref> of the requested size in uncache memory. After kernel start, &amp;name can be used as if <ref refid="group__heap__apis_1ga9273e06dc8d6a351499f2f5abfdcb39f" kindref="member">k_heap_init()</ref> had been called.</para>
<para>Note that this macro enforces a minimum size on the memory region to accommodate metadata requirements. Very small heaps will be padded to fit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name for the struct <ref refid="structk__heap" kindref="compound">k_heap</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory region, in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/kernel.h" line="5220" column="9" bodyfile="include/kernel.h" bodystart="5220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
